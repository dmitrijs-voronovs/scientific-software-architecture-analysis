quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Deployability,"I think that the rendering is executed through the Visual Studio extension called ""[Jupyter Notebook Renderers](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers)"". I apparently solved this issue by simply downgrading the version of this extension, since I read in the changelog of the latest version ""Removed rendering of text/latex in favor of built-in support."". Thus the problem was in the Visual Studio part, however it still remain opened in the case one decide to install the latest version of this extension. Thank you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1809#issuecomment-1043028427:502,install,install,502,https://qutip.org,https://github.com/qutip/qutip/issues/1809#issuecomment-1043028427,1,['install'],['install']
Deployability,"I think the module should really be `qutip.testing` (or `qutip.test` if the name's already taken), not `qutip.core.data.testing`, if you're going to add one. It's very likely to be the case in the future (if it isn't already) that you'll need additional dependencies to define the tests, and you don't want to force _all_ runtime users to have them to install QuTiP. If you put the package in a separate top-level module, it's _far_ easier to separate out all the code, and have `qutip/__init__.py` not import `qutip.testing`, so things won't break. Also, tests generally need to work with a fully imported version of the module. If we start putting testing infrastructure in the core, we're going to encode a whole lot of cyclical dependencies right away, or end up with `testing` modules scattered all across the codebase, for no real gain. For discovery: that would only happen during test generation, which comes after importing the modules and defining the classes, so you'd still be able to define tolerances and influence how the tests ran. The problem with _not_ having discovery is that it becomes very easy to forget to test a function, and with so much of the machinery automated, it's also easy to forget it when reviewing a PR. That's particularly true once you have external contributors writing these sorts of things - we have it in Qiskit, where people add things to our ""standard equivalence library"", and new contributors and new reviewers don't know where all the different tests are, so our discovery tests have helped catch bugs. That happens even with super experienced team members. I'd argue that code coverage metrics are possibly a better way of detecting missing tests - that fails safe if you add broken code and forget to test it, whereas having to specify the tests explicitly means you can accidentally add broken code to a dispatcher and not know, if you forgot to add the test.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-981562735:352,install,install,352,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-981562735,1,['install'],['install']
Deployability,I think the priority order should be. *. Default value from `qutip.hardware_info`; *. Value from configuration file if exists; *. Environment variable if set,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/119#issuecomment-41985674:97,configurat,configuration,97,https://qutip.org,https://github.com/qutip/qutip/issues/119#issuecomment-41985674,1,['configurat'],['configuration']
Deployability,"I think there are two separate issues here. . As for the fortran module, it's true that the it adds a lot of build complexity, but most users do not need it and can easily install qutip without it. There is a case for removing it from qutip and put it in a separate module, but think this should be low priority, since it would require non-negligible amount work, would break backwards compatibility (it should bump next release to 4.0), and does not really provide any new features (other than a less complex code base). There might users who rely on it and for them it might be annoying if we remove it. So I would vote for postponing it until there are very strong arguments for removing it. As for the topic of this issue, I think that qutip should follow the lead of NumPy, even if it breaks backwards compatibility in the configuration methods, so that users that are familiar with NumPy and related projects does not have any surprises when using qutip. Also, if I understand correctly, this would mostly change how one configure and build against blas libraries such as openblas? Then I guess it would not effect the typical user that just download and install the package with standard configuration (no site.cfg file), and it should be safe the follow the advice of the OP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/392#issuecomment-155058653:172,install,install,172,https://qutip.org,https://github.com/qutip/qutip/issues/392#issuecomment-155058653,5,"['configurat', 'install', 'release']","['configuration', 'install', 'release']"
Deployability,I think this looks good. Has no idea about this new win+gcc install methods. Thanks.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/779#issuecomment-350572815:60,install,install,60,https://qutip.org,https://github.com/qutip/qutip/pull/779#issuecomment-350572815,1,['install'],['install']
Deployability,"I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. It might be faster already if you evaluate the piecewise varying parts into one ""constant"" part at each point. This isn't guaranteed, because it involves copying rather more data _before_ the call (to construct the constant matrix once), but if the integrator would need to take many intermediate time steps, I expect it would win out. Would something like this work for you?; ```python; times = [0, ...]; # Liouvillians for parts you have control over; control_liouvillians = [qutip.liouvillian(h) for h in control_hamiltonians]; # The time-dependent Hamiltonian for stuff you're not controlling; base_hamiltonian = qutip.QobjEvo([H0, [H1, time_dependence], ...]); # Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:436,integrat,integrator,436,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,2,['integrat'],['integrator']
Deployability,"I thought that it was highly recommended to use the same compiler for; extensions that is used for python itself? Is this just an ideal rather; than a necessity?. Also, it would be ideal to try and use a compiler that is available on the; conda-forge. Not sure whether the Intel one is or not. On 28 May 2016 at 04:54, Paul Nation notifications@github.com wrote:. > Thanks for pointing this out. I did not know that this was the case.; > Ironically the complex numbers are done this way to support compilers (VS; > in particular) that do not obey C99. The suggested patch is a bit difficult; > to implement as the runtime generated Cython code is compiled via pyximport; > and getting in there to change the c files would be a bit tricky. However,; > I know that the Intel compiler has no problem with the Cython code (at; > least on Linux). So perhaps that is the way to go for Python 3.5.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/qutip/qutip/issues/447#issuecomment-222288358, or mute; > the thread; > https://github.com/notifications/unsubscribe/AIxX7bilAvaPFQKZx8CtnoG8p0DEpaQ_ks5qF7xvgaJpZM4HpJf1; > .",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/447#issuecomment-222801414:566,patch,patch,566,https://qutip.org,https://github.com/qutip/qutip/issues/447#issuecomment-222801414,1,['patch'],['patch']
Deployability,"I thought we had resolved the installation issues with the Fortran side by making the MC solver a optional (default to False).; I am not that I have fully digested everything in this thread, but @zerothi seems confident that there is just some small change that we need to improve integration with the latest Numpy. Its not clear to me what are the risks or other downsides.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/392#issuecomment-155040632:30,install,installation,30,https://qutip.org,https://github.com/qutip/qutip/issues/392#issuecomment-155040632,2,"['install', 'integrat']","['installation', 'integration']"
Deployability,"I tried a fresh conda environment `conda install gcc cython numpy scipy` etc. Still, the tests pass on Travis CI.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1065#issuecomment-527433833:41,install,install,41,https://qutip.org,https://github.com/qutip/qutip/pull/1065#issuecomment-527433833,1,['install'],['install']
Deployability,"I tried creating a new environment, cloning the dev.major branch and running `setup.py install` which didn't work either.; Adding `recursive-include qutip *.h` to `MANIFEST.in` before running the setup solved the problem. Interestingly it solved it for the `qutip5-bench` environment as well. So I created two new environments to see if the problem would also be solved in those, installing dev.major with pip in one and by cloning and using `setup.py install` without adding `recursive-include qutip *.h` to `MANIFEST.in` in the other. The QobjEvo object was created without any problems in both environments.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1960#issuecomment-1194631968:87,install,install,87,https://qutip.org,https://github.com/qutip/qutip/issues/1960#issuecomment-1194631968,3,['install'],"['install', 'installing']"
Deployability,"I tried to replicate locally but seemed difficult to create the same mkl/numpy/scipy env.; Anaconda Python 2.7 now seems to have mkl 2018, scipy 1.1, numpy 1.14; Travis is creating mkl 2017, scipy 0.19, numpy 1.13; I suspect it will update soon, so lets fix the other issues first and see what happens when it's merge-ready",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/883#issuecomment-398803946:233,update,update,233,https://qutip.org,https://github.com/qutip/qutip/pull/883#issuecomment-398803946,1,['update'],['update']
Deployability,"I tried to run the code posted by @jkochNU, and it runs successfully in my machine. Though, the result is that the expectation value is a array of zeros. Given that the initial state is the eigenvalue of the Hamiltonian, we should expect it to be all ones instead of all zeros. ```; In [5]: sol.expect[0]; Out[5]:; array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,; 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,; 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,; 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,; 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,; 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]); ``` ; Here is my qutip.about:; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jak; e Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.22.0; Scipy Version: 1.7.3; Cython Version: 0.29.26; Matplotlib Version: 3.5.1; Python Version: 3.9.9; Number of CPUs: 6; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/saipavanchitta/miniconda3/envs/sai/lib/python3.9/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1776#issuecomment-1017465570:1502,Install,Installed,1502,https://qutip.org,https://github.com/qutip/qutip/issues/1776#issuecomment-1017465570,2,['Install'],"['Installation', 'Installed']"
Deployability,"I understand completely!. I'd probably just go to `int64` with your internal CSR implementation for the moment. Would it be very easy to have the `int32`/`int64` boiled down to a single compile-time flag, for those people that compile QuTiP manually and feel they really need the smaller `int32` matrices? The pre-compiled pip/conda releases could be `int64`. That might be a simple way to provide some support for ""both"". Somehow, I thought that SciPy would put a lot more emphasis on performance, and do things like Kronecker products without conversion. It would seem that SciPy should be the place to really optimize the sparse linear algebra implementation, including all the possible combinations like `CSR * DIA`. Then everyone could build on top of that, making custom sparse-matrix implementation unnecessary. Maybe when someone gets some serious funding for working on QuTiP, encapsulating all of this better would be doable. So, just something to keep in mind before bolting on too many things onto the existing custom implementation (like multiple sparse and full storage formats). Once you open up that can of worms, it just might be better to re-design `Oobj.data` to have a very broad base (e.g. SciPy), and keep the custom CSR as an optional, highly efficient implementation for the special case, maybe in a separate package. Either way, it's going to be a lot of work, and not something for a minor-version release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384094285:333,release,releases,333,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384094285,2,['release'],"['release', 'releases']"
Deployability,I updated #1869 to use the new BaseResult class.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1139698913:2,update,updated,2,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1139698913,1,['update'],['updated']
Deployability,"I updated anaconda, and then I installed it, and I finally managed to install qutip.; My version was 4.4.10",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/860#issuecomment-387728205:2,update,updated,2,https://qutip.org,https://github.com/qutip/qutip/issues/860#issuecomment-387728205,3,"['install', 'update']","['install', 'installed', 'updated']"
Deployability,"I updated my qutip to V5 and I tried ; ```; cmap = 'jet'; fig, ax = plot_spin_distribution(Q, THETA, PHI, ""3d"", cmap=cmap); ```; to change the color map of the sphere, but I get error; ```; fig, ax = plot_spin_distribution(Q, THETA, PHI, ""3d"", cmap=cmap); NameError: name 'plot_spin_distribution' is not defined. Did you mean: 'plot_spin_distribution_2d'?; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2431#issuecomment-2118997182:2,update,updated,2,https://qutip.org,https://github.com/qutip/qutip/issues/2431#issuecomment-2118997182,1,['update'],['updated']
Deployability,I updated the krylov page after the merger. The code was not touched since the review.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1986#issuecomment-1351836403:2,update,updated,2,https://qutip.org,https://github.com/qutip/qutip/pull/1986#issuecomment-1351836403,1,['update'],['updated']
Deployability,I updated the notebooks to use `parallel_map` instead of `parfor` in https://github.com/qutip/qutip-tutorials/pull/31.; I guess we can close this issue?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1963#issuecomment-1216678043:2,update,updated,2,https://qutip.org,https://github.com/qutip/qutip/issues/1963#issuecomment-1216678043,1,['update'],['updated']
Deployability,I updated the pull request to post to coveralls only for one build permutation (gcc+python 3.4).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/318#issuecomment-75572747:2,update,updated,2,https://qutip.org,https://github.com/qutip/qutip/pull/318#issuecomment-75572747,1,['update'],['updated']
Deployability,"I use the qutip to do some Grover simulations. having a Hilbertspace of Grover an an additional entangled Hilbert space. In a simpler version there is only one state in the entangled Space so the program automatically chooses dimension 1. ; And then there are allot of errors coming because of this qutip error. ; At the moment I fixed it using a patched qutip version. And I think there are more cases when one has dynamical dimensions of a space, that there are cases in which the dimension is 1.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/823#issuecomment-399020891:347,patch,patched,347,https://qutip.org,https://github.com/qutip/qutip/issues/823#issuecomment-399020891,1,['patch'],['patched']
Deployability,I used `pip install git+https://github.com/qutip/qutip@dev.major ` to install it.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1960#issuecomment-1194450193:12,install,install,12,https://qutip.org,https://github.com/qutip/qutip/issues/1960#issuecomment-1194450193,2,['install'],['install']
Deployability,"I vote for macports+pip or building qutip manually (this is what I use) . Even if we get macports up and running, the port will always be behind everything else as it needs to get reviewed before the update is uploaded. The new homebrew scripts are also convenient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/283#issuecomment-66282510:200,update,update,200,https://qutip.org,https://github.com/qutip/qutip/issues/283#issuecomment-66282510,1,['update'],['update']
Deployability,"I vote for setting the dtype. This is probably safer since there are some; parts of the code that expect arrays.; On Sep 10, 2014 11:36 PM, ""Robert Johansson"" notifications@github.com; wrote:. > Thanks for reporting this problem! It seems to be related to the recent; > numpy 1.9 (works fine with older numpy releases). We should either add; > dtype=object in the call to np.array or use list, as you suggests.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/qutip/qutip/issues/228#issuecomment-55124130.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/228#issuecomment-55211686:309,release,releases,309,https://qutip.org,https://github.com/qutip/qutip/issues/228#issuecomment-55211686,1,['release'],['releases']
Deployability,"I was checking the status of this PR, sorry for the delay, @abhisekupadhyaya. . 1) **Address comments**: There's been some updates and CI tests pass. However, my comments are still not addressed, e.g., updates in docstrings, see above. Addressing this before the next months is crucial as then there may be quite some activity on the `qip` module. . 2) **Add tests**: We also need to add at least a couple of tests with some examples circuits. The tests could check:; 2.a) that the circuit does the same thing; 2.b) that the circuit is exactly the same (no change of gates into other gates). 2) **Qasm export**: Adding an export feature, e.g. `to_qasm`, would be great. But this PR could address just the import and be fine (changing name would be best). If the `to_qasm` feature was here, one could simply test it one way and return, and check that, e.g.; ```; read_qasm(qutip_circuit1.to_qasm()) == qutip_circuit1; read_qasm(qasm_circuit2).to_qasm() ==qasm_circuit2; ```; if this feature was there, one could also test randomly generated circuits. @abhisekupadhyaya do you think you can address 1) and 2)?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1140#issuecomment-621946565:123,update,updates,123,https://qutip.org,https://github.com/qutip/qutip/pull/1140#issuecomment-621946565,2,['update'],['updates']
Deployability,"I was claiming that the algorithm from the Molmer paper is different because it relies on small timesteps and it does not use stepping back (or more generally, it does not use any form of root finding). They are probably equivalent, but I did not find the equivalence obvious. Thanks for the reference, I will check it out. Also, for the sake of more efficient root finding (if I understand correctly currently you are just repeating the integration over a smaller interval) you might find this interesting: http://mail.scipy.org/pipermail/scipy-user/2010-March/024890.html",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/344#issuecomment-105091967:438,integrat,integration,438,https://qutip.org,https://github.com/qutip/qutip/issues/344#issuecomment-105091967,1,['integrat'],['integration']
Deployability,"I was wondering about the CFLAGS bit. Should we not prepend or append our flags, rather than overwrite?; I was trying to install qutip on our (University) lab machines (for which I did not have sudo). They did not have Cython or pydev. I got quite far, but only by changing the qutip setup to accept include dirs from CPATH. I never got as far as making a PR, because ultimately it failed due to reasons I could not understand, so I parked it.; However I think I could have made something work by setting include dirs in CFLAGS.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/570#issuecomment-265063594:121,install,install,121,https://qutip.org,https://github.com/qutip/qutip/pull/570#issuecomment-265063594,1,['install'],['install']
Deployability,I which case I think we should definitely use the comtypes as Chris suggests. And add it to the recommended packages in the install docs,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/421#issuecomment-181726756:124,install,install,124,https://qutip.org,https://github.com/qutip/qutip/pull/421#issuecomment-181726756,1,['install'],['install']
Deployability,I will also update the mcsolver to output both states and expect values in this pull.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/275#issuecomment-65736185:12,update,update,12,https://qutip.org,https://github.com/qutip/qutip/pull/275#issuecomment-65736185,1,['update'],['update']
Deployability,"I will recode tonight. > On Feb 8, 2016, at 23:17, Alexander Pitchford notifications@github.com wrote:; > ; > I which case I think we should definitely use the comtypes as Chris suggests. And add it to the recommended packages in the install docs; > ; > —; > Reply to this email directly or view it on GitHub.; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/421#issuecomment-181909794:234,install,install,234,https://qutip.org,https://github.com/qutip/qutip/pull/421#issuecomment-181909794,1,['install'],['install']
Deployability,I will submit a patch to the installer later today. Basically you need to add `'-mmacosx-version-min=10.9'` to the `_compiler_flags` and `extra_link_args`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/919#issuecomment-428218886:16,patch,patch,16,https://qutip.org,https://github.com/qutip/qutip/issues/919#issuecomment-428218886,2,"['install', 'patch']","['installer', 'patch']"
Deployability,"I will update my contribution as soon as I come back from holidays. Best, Jérôme. -------- Message original --------; Objet : Re: [qutip/qutip] Update steadystate.py (#1275); De : Simon Cross ; À : qutip/qutip ; Cc : NS2 group at LPS ,Mention . @NS2LPS Apologies for the slow reviews. Would you be up for updating this PR and then we can review it properly? It would be good to somehow add tests to these cases, but I'm not sure how easy that is to do. -- ; You are receiving this because you were mentioned.; Reply to this email directly or view it on GitHub:; https://github.com/qutip/qutip/pull/1275#issuecomment-893440155",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1275#issuecomment-893447309:7,update,update,7,https://qutip.org,https://github.com/qutip/qutip/pull/1275#issuecomment-893447309,2,"['Update', 'update']","['Update', 'update']"
Deployability,"I will update this pull request so that it is ready for review, although, I think maybe some changes in the code style will be needed. One thing I would like to mention is that the _noise_direct function seems to yield a more accurate result than the noise_pseudoinv function, this may be due to the selected method (for the case of noise_pseudoinv), the discussion we had at the beginning about not including the low value of the frenquency or some mistake I made testing? In any case I just wanted to point out that even though both functions work, noise_direct gives a more accurate result to the analytical one.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2435#issuecomment-2183962093:7,update,update,7,https://qutip.org,https://github.com/qutip/qutip/pull/2435#issuecomment-2183962093,1,['update'],['update']
Deployability,"I wonder if there is something wrong with your new QuTiP install? Since I can't reproduce the issue locally it might be difficult to suggest solutions, but I can give some debugging advice:. - Try reducing the code used to produce the issue as much as possible (perhaps just a single cell that calls the solver without any c_ops and checks the initial and final expectation values, without plots).; - Check all the inputs to the solver (psi0, etc).; - If a solver prints the ""ODE Integration Error"" warning it usually means that the solver has not converged to an output it trusts, so the solution returned is likely wrong.; ; If you manage to find a smaller reproducer of the error, report it here with as much information about your setup as possible (you can start with the output of `qutip.about()`).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1987#issuecomment-1229174846:57,install,install,57,https://qutip.org,https://github.com/qutip/qutip/issues/1987#issuecomment-1229174846,2,"['Integrat', 'install']","['Integration', 'install']"
Deployability,"I would just cut remove it with the v5 release, it will be harder to make breaking changes later and with the removal of `__array__`, we already change the way `Qobj` interact with `numpy`. But if we keep it for a while, we should give a warning when used. My spellcheck correct to ""specializations"".",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1611#issuecomment-880866304:39,release,release,39,https://qutip.org,https://github.com/qutip/qutip/pull/1611#issuecomment-880866304,1,['release'],['release']
Deployability,"I would just leave it the way it is. That way we stay more compatible with; systems where the user may not be able to install newer versions. -P. On Jan 5, 2017 7:02 PM, ""Alexander Pitchford"" <notifications@github.com>; wrote:. > Yes, 4.0.1 has this issue. Hence the main motivation for 4.0.2.; > 4.0.1 only really exists on PyPI right now. Website and conda-forge are; > now 4.0.2. I will be uploading 4.0.2 to PyPI today.; >; > I don't know if 4.0.2 will work with scipy 0.15. It only gets built and; > tested (import qutip) on conda-forge against numpy 1.10 / scipy 0.17 and; > numpy 1.11 / scipy 0.18 as far as I know. Our Travis (full) tests only test; > numpy 1.11 / scipy 0.18.; >; > @nonhermitian <https://github.com/nonhermitian> do you think we should; > bump the requirements up to numpy 1.10 / scipy 0.17?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/616#issuecomment-270812257>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ABMPqX4zClITXSfdSbdBOy4pPcz-oZHxks5rPaCsgaJpZM4Lb48Y>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/616#issuecomment-270816809:118,install,install,118,https://qutip.org,https://github.com/qutip/qutip/issues/616#issuecomment-270816809,1,['install'],['install']
Deployability,"I would like CI to check that the documentation builds work, but maybe we can reduce what is built somewhat once we're happy with how ReadTheDocs is set up. I suggest that on ReadTheDocs we build docs for all the active release branches (so currently qutip-4.7.X and qutip-5.0.X) and then yes, we'll have to update which is stable when that changes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2087#issuecomment-1428131345:220,release,release,220,https://qutip.org,https://github.com/qutip/qutip/pull/2087#issuecomment-1428131345,2,"['release', 'update']","['release', 'update']"
Deployability,"I would prefer it not breaking any code with master. Ideally, we should raise a deprecation warning first, then upload the change later... There is a major new version in development that would allow this kind of changes in the branch `dev.major`. ; So could you move this PR to merge to `dev.major` instead of `master`. . If you prefer not to wait for the next major release, which will take some time, you can remove the list of list in `Bloch.point_colors` so there is no need to change the examples.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1315#issuecomment-668667134:368,release,release,368,https://qutip.org,https://github.com/qutip/qutip/pull/1315#issuecomment-668667134,1,['release'],['release']
Deployability,"I would still prefer `qutip.extensions`, `qutip.ext` or maybe `qutip.extra` rather than `qutip.services` because although picloud and tskmon can properly be called services, I think that if we pursue the idea of having extra utitlities like this in the qutip project we should take a broader approach and call it extensions, which may or may not be services. These would have to be completely isolated from the rest of the qutip code base (including the configuration file parser).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255#issuecomment-63908501:454,configurat,configuration,454,https://qutip.org,https://github.com/qutip/qutip/pull/255#issuecomment-63908501,1,['configurat'],['configuration']
Deployability,I'd be happy to help on the future improvements (e.g. chi and Stinespring) and integrating these changes with other parts of qutip. The more piecemeal we can make the changes the easier it will be to review.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1098#issuecomment-570133990:79,integrat,integrating,79,https://qutip.org,https://github.com/qutip/qutip/pull/1098#issuecomment-570133990,1,['integrat'],['integrating']
Deployability,"I'll take a look at the merge. It seems like it might have gone bad. I'll add in some tests once I fix the merge, as well. I'll look into the diag method and try to move everything over to separate; everything as you described. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:706,integrat,integration,706,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['integrat'],"['integration', 'integrator']"
Deployability,"I'll try to explain as much as I can, but I'm not sure exactly what is going on. The error might have been there for quite a while, it was not until I recently tried to modify qutip regarding the other issue I raised that I noticed that changes I made had no effect because qutip was not compiling. Earlier today I did manage to get changes to qutip to register and work, but I still get this error on reload. Maybe it no longer matters. While pyrex is in the path, it seems to not be installed. (I cannot import or uninstall it). I can also not remember installing openMP, although I'm not sure if openMP capability comes with gcc by default. . This issue is likely something strange with my exact installation. What has me confused is that re-installing the packages does not seem to solve anything. Apologies for the unclear explanation. If there is any specific information I can add, please tell me what I can do. My qutip.about() is:. QuTiP Version: 4.6.3; Numpy Version: 1.22.2; Scipy Version: 1.8.0; Cython Version: 0.29.27; Matplotlib Version: 3.5.1; Python Version: 3.8.10; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1810#issuecomment-1044657281:485,install,installed,485,https://qutip.org,https://github.com/qutip/qutip/issues/1810#issuecomment-1044657281,5,"['Install', 'install']","['Installed', 'installation', 'installed', 'installing']"
Deployability,I'll update the notebook and test this more.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1155#issuecomment-578951420:5,update,update,5,https://qutip.org,https://github.com/qutip/qutip/pull/1155#issuecomment-578951420,1,['update'],['update']
Deployability,"I'm a fan of the CodeClimate complexity tests, but I wouldn't be averse to removing its complaints about ""TODO"" comments - I'm not sure what we really gain from that in this sort of open-source development. In a business where people are working full-time then I imagine it can be worth preventing a merge to finalise some details, but in our very decentralised development, really in some cases (especially in the next major release), we do need to merge in parts of code we know to be imperfect. That said, we probably should make an effort to clear out some of the TODOs and FIXMEs that are in the codebase already. Pushed fix-up changes since last review:; - wrapped the steadystate SciPy linalg functions so they're simplified at the point of call, and unknown keywords in old SciPy versions are just silently ""eaten"" (this is the same behaviour that the file used to have, just formalised a little more).; - added `TODO` in a comment in `qutip.cy.pyxbuilder`; - changed the static class attributes in `test_superoper.py` into a `setup_method` function. *edit*: oh yeah, forgot that there were still errors in some old SciPy bits in the control module as well. I'll push a fix to that before this needs reviewing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305:426,release,release,426,https://qutip.org,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305,1,['release'],['release']
Deployability,"I'm also seeing this on Windows, with a fresh installation of Anaconda on a virtual machine (the Win10/Edge one) from https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-462991969:46,install,installation,46,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-462991969,1,['install'],['installation']
Deployability,"I'm also using Anaconda on Macbook M1 and ran into 2 errors today when importing qutip. . 1. With the M1 chip, qutip had a problem with hardware detection and as @jakelishman said, commenting lines 48 and 49 on `qutip/hardware_info.py` fixed this error. 2. Then I got the same error message with ""IPYTHON not defined"" and ""'qutip' has no attribute 'settings'."" I thought my conda environment must have been missing the ipython package somehow(?) so I tried `conda install ipython` and importing qutip again and it worked! (I then ran qutip.testing.run() to test out all functions and everything worked perfectly).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1396#issuecomment-759733240:464,install,install,464,https://qutip.org,https://github.com/qutip/qutip/issues/1396#issuecomment-759733240,1,['install'],['install']
Deployability,"I'm busy checking builds in #2046, and hopefully once those are running successfully, we can release. It's the usual dance of figuring out which versions of SciPy and numpy to build for.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2036#issuecomment-1346425908:93,release,release,93,https://qutip.org,https://github.com/qutip/qutip/issues/2036#issuecomment-1346425908,1,['release'],['release']
Deployability,I'm changing this draft to the complete PR. I'll update it with any changes related to documentation once the build error is resolved.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2114#issuecomment-1463345791:49,update,update,49,https://qutip.org,https://github.com/qutip/qutip/pull/2114#issuecomment-1463345791,1,['update'],['update']
Deployability,"I'm going to close this for now because I think it's more to do with previous installation artifacts, which is something that is difficult to handle neatly without making a huge `__init__` full od all sorts of one-off special cases that only QuTiP developers ever encounter. We're doing a variant of Paul's suggestion in `dev.major` using new read-only ""installation settings"", and besides, we're going to have OpenMP built into the same C extensions and completely remove use of `pyximport` then too, so this sort of problem shouldn't appear again. It's possible we may still see very occasional bugs from QuTiP developers in the 4.x branch, but since it's mostly related to how QuTiP leaks its changes to the Python import process (via `pyximport`), which are fixed by the `Coefficient` object, it's probably not worth developer time back-porting such a major change.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1334#issuecomment-809301114:78,install,installation,78,https://qutip.org,https://github.com/qutip/qutip/issues/1334#issuecomment-809301114,2,['install'],['installation']
Deployability,"I'm going to merge this so that tests pass repeatably on master again and so that I can proceed with the 4.7 release, but we should keep #1854 open and address it for QuTiP 5 (if tests don't just pass there already).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1855#issuecomment-1097982571:109,release,release,109,https://qutip.org,https://github.com/qutip/qutip/pull/1855#issuecomment-1097982571,1,['release'],['release']
Deployability,"I'm happy to help mitigate this in QuTiP since importing less during ""import qutip"" would be a good thing, but not being able to `import scipy.fftpack` when SciPy has been installed because it vendors the wrong `GLIBCXX` seems like a fairly serious SciPy bug?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1915#issuecomment-1144683208:172,install,installed,172,https://qutip.org,https://github.com/qutip/qutip/issues/1915#issuecomment-1144683208,1,['install'],['installed']
Deployability,I'm keen to merge this and make this the last PR for the 4.7.1 release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2041#issuecomment-1345397044:63,release,release,63,https://qutip.org,https://github.com/qutip/qutip/pull/2041#issuecomment-1345397044,1,['release'],['release']
Deployability,"I'm not a Mac user, no. I run a Linux desktop and a Windows 10 laptop. That said, helping colleagues deal with OS X / Enthought Canopy compatibility issues is a big part of the reason that I started using Anaconda instead. They seem to do a much better job at dealing with Xcode updates erasing old SDKs.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/382#issuecomment-148549546:279,update,updates,279,https://qutip.org,https://github.com/qutip/qutip/issues/382#issuecomment-148549546,1,['update'],['updates']
Deployability,"I'm not sure solution 3 will work as easily as this - if the user's `scipy.linalg.eigh` is broken, then calling it doesn't help, surely?. Also, I can reproduce the segfaults with both `np.ascontiguousarray` and `np.asfortranarray` on my machine, but it is a size of 64 that seems to reliably do me in. Script to reproduce:; ```python; import numpy as np; from scipy.linalg import eigh. def random_hermitian(n):; h = np.random.rand(n, n) + 1j*np.random.rand(n, n); return h + np.conj(h.T). for n in range(1, 101):; print(n); for _ in [None]*100:; x = eigh(np.ascontiguousarray(random_hermitian(n))); ```; and this segfaults on `n=64` reliably with the `pip` version of `scipy` (linked against OpenBLAS 0.3.7), and always succeeds with the `conda` version (linked against MKL 2019.4). Both `scipy` versions are 1.4.1 here. I did the most bare-bones install to test this:; ```; $ conda create -n blastest python; $ conda activate blastest; $ pip install scipy; $ python blas.py; ```; where `blas.py` is the repro script above. Doing this, `pip` pulls me OpenBLAS 0.3.7. Looking at the source of OpenBLAS, the whole heavy-lifting implementation is in Fortran - there's the classic LAPACKe C wrapper around the core Fortran LAPACK, but everything eventually goes down to the Fortran. If it helps, it's an out-of-bounds access error that causes the segfault for me, and the address it's trying to access doesn't look like dummy nonsense (`0x101b95010`). I'm pretty sure it's a nasty Mac/OpenBLAS bug. If the problem is particularly in `zheevr` we could swap the call to `eig` (instead of `eigh`) for Mac only, which should hopefully sidestep the problem, because it'll call `zgeev` instead. All recent pip installs of `scipy` link against OpenBLAS, so there's not much that can sidestep it there, other than mandating `conda` usage, because you can't relink `scipy` to decent libraries without compiling from source.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628780955:847,install,install,847,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628780955,3,['install'],"['install', 'installs']"
Deployability,"I'm seeing the same segfault when trying to run the tests on MacOS. I'm using the following script `run_tests.sh` in the qutip root folder for running the tests:; ~~~; #!/usr/bin/env bash; python3 -m venv venv; ./venv/bin/pip install -r requirements.txt; ./venv/bin/pip install pytest matplotlib ipython; ./venv/bin/python setup.py install; ./venv/bin/pip freeze > test.log; ./venv/bin/python -c 'import scipy; print(""Scipy config:""); scipy.__config__.show()' >> test.log; ./venv/bin/python -c 'import numpy; print(""Numpy config:""); numpy.__config__.show()' >> test.log; (cd venv && ./bin/python -c 'from qutip.testing import run; run()' 2>&1 | tee -a ../test.log); ~~~; This results in the attached [`test.log`](https://github.com/qutip/qutip/files/4307785/test.log). This is for the 4.5.1 release candidate, but I'm getting the same segfault on the current `master` (01132789581821517986fad1a14ab3feec7d2de2)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-596633885:226,install,install,226,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-596633885,4,"['install', 'release']","['install', 'release']"
Deployability,"I'm trying it now on a Windows without ImageMagick installed. However, it finds a wrong executable `convert`, which is a default command on Windows...... Is there a way to identify if the `convert` is the one we want? Otherwise, we can also just catch the CalledProcessError at line 148 and add an instruction. ```; 147 in_file = file_stem + "".pdf""; 148 out_file = file_stem + ""."" + configuration.file_type; --> 149 _run_command((which, *configuration.arguments, in_file, out_file)); 150 with open(out_file, mode) as file:; 151 return file.read(). ~\Miniconda3\envs\qutip-dev-py3\lib\subprocess.py in run(input, capture_output, timeout, check, *popenargs, **kwargs); 485 if check and retcode:; 486 raise CalledProcessError(retcode, process.args,; --> 487 output=stdout, stderr=stderr); 488 return CompletedProcess(process.args, retcode, stdout, stderr); 489 . CalledProcessError: Command '('convert', '-density', '100', 'qcirc.pdf', 'qcirc.png')' returned non-zero exit status 4.; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605443125:51,install,installed,51,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605443125,3,"['configurat', 'install']","['configuration', 'installed']"
Deployability,"I'm using Qutip 3.0.1 for Python 3.4, just updated from Python 2.7 to compare. Bug persists, but it seems that your version of Qutip doesn't have it. Sorry about not using the dev version. . I downloaded the latest official version from apt-get, is there a way to get the dev version from there or do I have to compile etc.?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/226#issuecomment-54701699:43,update,updated,43,https://qutip.org,https://github.com/qutip/qutip/issues/226#issuecomment-54701699,1,['update'],['updated']
Deployability,"I'm using. My configuration information is as follows:. Software	Version; QuTiP	4.5.2; Numpy	1.18.5; SciPy	1.5.0; matplotlib	3.2.2; Cython	0.29.21; Number of CPUs	6; BLAS Info	INTEL MKL; IPython	7.16.1; Python	3.8.3 (default, Jul 2 2020, 11:26:31) [Clang 10.0.0 ]; OS	posix [darwin]; Fri Sep 18 02:42:59 2020 MSK. For Mac OS: FileNotFoundError: [Errno 2] No such file or directory: 'qcirc.png'.\. When I try to generate a circuit diagram as follows:. %matplotlib inline; from IPython.display import Image; from numpy import pi; import numpy as np; from qutip import *; from qutip.qip.operations import *; from qutip.qip.circuit import QubitCircuit, Gate. cphase(pi/2); q = QubitCircuit(2, reverse_states=False); q.add_gate(""CSIGN"", controls=[0], targets=[1]); q.png. Log Error:. ---------------------------------------------------------------------------; FileNotFoundError Traceback (most recent call last); <ipython-input-14-a760fe8d2360> in <module>; 1 q = QubitCircuit(2, reverse_states=False); 2 q.add_gate(""CSIGN"", controls=[0], targets=[1]); ----> 3 q.png. ~/opt/anaconda3/lib/python3.8/site-packages/qutip/qip/circuit.py in png(self); 1122 def png(self):; 1123 from IPython.display import Image; -> 1124 return Image(self._repr_png_(), embed=True); 1125 ; 1126 @property. ~/opt/anaconda3/lib/python3.8/site-packages/qutip/qip/circuit.py in _repr_png_(self); 1114 ; 1115 def _repr_png_(self):; -> 1116 return _latex_compile(self.latex_code(), format=""png""); 1117 ; 1118 def _repr_svg_(self):. ~/opt/anaconda3/lib/python3.8/site-packages/qutip/qip/circuit_latex.py in _latex_compile(code, filename, format); 60 os.system(""convert -density %s %s.pdf %s.png"" % (100, filename,; 61 filename)); ---> 62 with open(""%s.png"" % filename, ""rb"") as f:; 63 result = f.read(); 64 else:. FileNotFoundError: [Errno 2] No such file or directory: 'qcirc.png'. How do I fix this error on Mac?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/702#issuecomment-694558061:14,configurat,configuration,14,https://qutip.org,https://github.com/qutip/qutip/issues/702#issuecomment-694558061,1,['configurat'],['configuration']
Deployability,I'm very sorry for such a slow response on this - have been busy. I will try out the update on the weekend hopefully and report back. ; thanks for looking into this!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/829#issuecomment-375156686:85,update,update,85,https://qutip.org,https://github.com/qutip/qutip/issues/829#issuecomment-375156686,1,['update'],['update']
Deployability,I'm working on a 4.6.3 release at the moment.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1766#issuecomment-1030356669:23,release,release,23,https://qutip.org,https://github.com/qutip/qutip/issues/1766#issuecomment-1030356669,1,['release'],['release']
Deployability,"I've been thinking about how this interacts with our build and test infrastructure, and I'm writing some of those thoughts here partly for myself:. - We currently build with oldest-supported-numpy, and we want to keep that because which is the earliest supported numpy varies by Python version and operating system and changes over time, so it's good if someone else worries about that for us. - We require for installation currently numpy >= 1.16.6 and that is probably what we want to update to match the NEP. There is a question here of whether we should specify our minimum supported numpy in ""install_requires"" in ""setup.cfg"" or not. - The majority of our test matrix should *build* qutip with oldest-supported-numpy to match what we distribute. - We should include at least one test run for the oldest numpy we require (i.e. oldest NEP) and one for the most recent (i.e. latest numpy). . - We should include at least one test run for the oldest Python we support and one for the newest. - We should include at least one test run for the oldest SciPy we support and one for the newest. - The NEP doesn't say anything about SciPy, but I propose we select the oldest SciPy that supports our oldest NEP numpy. And as Asier suggested, I think it would be good to write this all down. The test matrix requirements could just be a big comment in the GitHub action file.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1941#issuecomment-1165714182:411,install,installation,411,https://qutip.org,https://github.com/qutip/qutip/pull/1941#issuecomment-1165714182,2,"['install', 'update']","['installation', 'update']"
Deployability,"I've bumped this to QuTiP 5, since that seems a more polite time to change the default configuration directory than 4.7.1.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1876#issuecomment-1219758744:87,configurat,configuration,87,https://qutip.org,https://github.com/qutip/qutip/issues/1876#issuecomment-1219758744,1,['configurat'],['configuration']
Deployability,"I've done another round of reviewing. I'm still unhappy with `register_feedback` and `add_feedback` on Solvers, but I'd like to propose that we try merge this PR with those in place and then argue about them separately outside of this PR and change things if I manage to convince you. :). I'll try summarize my point of view here (just so that I don't forget my own thinking):. - Solvers provide feedback.; - QobjEvos use feedback.; - Each solver class should define what feedback it can provide.; - Each QobjEvo should define what feedback it uses. The sensible place to do this is when the `QobjEvo` is constructed.; - When a solver is constructed or updated, it should check that it can provide the feedback used by all of the relevant `QobjEvo`s and raise an exception if it can not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1837260911:653,update,updated,653,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1837260911,1,['update'],['updated']
Deployability,"I've had a thorough look. Simplifying the SolverOptions class is an excellent idea, but I think the PR currently doesn't go far enough and ends up with the solver classes, the integrator classes and the solver option classes required to share too much internal state with each other. As a next step to try untangle things, I suggest the following:. - Let's remove the `known_solvers` and the solver `name` from the SolverOptions and instead have the base solver pass the allowed options with defaults in to the SolverOptions constructor directly. If the allowed options list is `None`, then we can allow all options (for the convenience of users who really want to make their own SolverOptions instances).; - Having the options able to notify a listener of changes seems great -- let's keep that.; - When a solver is created, let's have the base solver create a new SolverOptions instance, either from a dictionary or another SolverOptions instance, but with the allowed options and defaults now specified.; - To deal with the integrator options, let's go back to having a single option named `ode`, but have the value of `ode` have type `SolverOptions`, and be a child of the solver options (if the child has a value modified, it should notify the parent of the change).; - For convenience, when passing options as a dictionary, one should be able to use `{""ode.method"": ""vern9""}` or `{""ode"": {""method"": ""vern9""}`. I think that should be enough to disentangle things from each other. The base solver would need to update the integrator if integrator options change and deal with any changes to the base options. It's not completely clear to me whether the result options should also be sub-options or just be included in the solver options. I'm happy for them to be included in the solver options, as long as the solver options are passed to the result class constructor. That keeps things a bit simpler and if solver needs new result options it can always create its own result sub-class and just pr",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945:176,integrat,integrator,176,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945,1,['integrat'],['integrator']
Deployability,"I've had good luck using the mingw package for 64-bit Anaconda, which installs the 64-bit version of mingw. I've detailed this in qutip/qutip-doc#22, but I haven't had the opportunity to test those instructions on a wide range of Windows systems.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-146571326:70,install,installs,70,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-146571326,1,['install'],['installs']
Deployability,"I've just noticed that @BOBO1997's [proposed solution](https://github.com/qutip/qutip/issues/1497#issue-855992475) is effectively the same as what I've implemented in my PR. I also like that his solution takes care of possibly unsorted inputs - I've borrowed that idea and updated my PR accordingly. Thanks, @BOBO1997!. I've also noticed that there are multiple instantiations of the same `gate` object upon each loop iteration, but I suspect those probably need to be kept distinct, unless the desired behaviour would be that changing one of those objects affects equivalently the other ones. In my PR I have the gate instantiation behaviour as it originally was (i.e., not adding references to the same `gate` object, but creating a new object upon each iteration). Please, let me know if this should be changed to perform only one instantiation and insert multiple references to the same object instead. @BoxiLi, I hope my #1892 doesn't interfere with https://github.com/qutip/qutip-qip/discussions/15. Please, feel free to close/reject the PR, if it does.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1497#issuecomment-1124338701:273,update,updated,273,https://qutip.org,https://github.com/qutip/qutip/issues/1497#issuecomment-1124338701,1,['update'],['updated']
Deployability,"I've just pushed a couple of commits to fix up a little bit of the formatting (it was the squashed lines I meant, rather than the particular level of indent or location of the keyword `or`) and to slightly fix the tolerance of the eigenvalue test. The individual uncertainty in any eigenvalue is allowed to be ~1e-12, so when you sum them all up to compare them, you have to propagrate the uncertainty through. Don't worry about the random test failure you got in a pickle test one time - that wasn't your fault and we know about it and have fixed it for the next major release of QuTiP already. Also don't worry about the speed of the CI tests. You can't reliably benchmark by comparing CI runs because you never know what else was running on the physical hardware at the same time. Travis are ramping down the amount of processing power available to us while they're transition business model. I'll be moving our testing infrastructure elsewhere when I've got a bit more time to sort it out, and have decided what we actually want/need/can get. In the mean time, we just live with the occasional test failure if a Mac Xcode12 machine is overloaded when we get to it. We can rerun them if we need to; it's not worth compromising on our test coverage.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-822688883:570,release,release,570,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-822688883,1,['release'],['release']
Deployability,"I've just pushed a little change to correct some minor points of style in `random_objects.py` (that weren't your fault - they were there before), and to correct the docstring to say that only `N=None` triggers the deduction, not `N=0`. (I also just finished the conversion of the tests into a parametrised pytest style - I'm trying to keep get these gradually updated as we look at the files, but I didn't want to ask you to do a _whole_ bunch more work, when you've already done a lot to get this ready, thanks!)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1509#issuecomment-832161733:360,update,updated,360,https://qutip.org,https://github.com/qutip/qutip/pull/1509#issuecomment-832161733,1,['update'],['updated']
Deployability,I've merged #1752 and scheduled this for inclusion in the 4.6.3 release. Thank you again for reporting this @goerz!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1753#issuecomment-1006012360:64,release,release,64,https://qutip.org,https://github.com/qutip/qutip/issues/1753#issuecomment-1006012360,1,['release'],['release']
Deployability,I've opened #1855 to disable the mcsolve tests on Windows for now. I intend to leave this issue open until after 4.7 is released and to see what happens with the mcsolve in QuTiP 5.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1854#issuecomment-1097936583:120,release,released,120,https://qutip.org,https://github.com/qutip/qutip/pull/1854#issuecomment-1097936583,1,['release'],['released']
Deployability,"I've opened up #1825 which has just the test updates from this PR (as @Ericgig suggsted). @MrRobot2211 I'm going to close this PR, but once @Ericgig has finished the new dims support PR, I think you could revisit adding this to dev.major -- i.e. QuTiP 5 -- if you are up for it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-1061733545:45,update,updates,45,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-1061733545,1,['update'],['updates']
Deployability,"If it helps in the future, you can use `pycodestyle` (available in `pip` and `conda`) to check pep8 compliance on your end before pushing a commit. As to the actual command, we might not actually want to remove the usage of `convert` - it's quite possible that a lot of people are still using ImageMagick 6, since for most people it's just a dependency that got installed by something else, and isn't frequently updated. `qutip` doesn't list it as an official dependency, so it wouldn't get updated on our behalf. We could catch which version of `ImageMagick` to use with something like; ```python; def _magick_comamnd():; for command in ['magick', 'convert']:; try:; subprocess.run((command, '--version'), capture_output=True); return command; except OSError:; pass; raise FileNotFoundError(""Couldn't locate system ImageMagick""); ```; and cache the result on import (below into the variable `_magick`). There could also be logic based on OS if needed. The convert command would become; ```python; subprocess.run((_magick, ""-density"", 100, filename + "".pdf"", filename + "".png"")); ```; or something like that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1179#issuecomment-585236473:362,install,installed,362,https://qutip.org,https://github.com/qutip/qutip/pull/1179#issuecomment-585236473,3,"['install', 'update']","['installed', 'updated']"
Deployability,"If needed, you can also install some things with `pip` in the `pip:` section at the bottom.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2527#issuecomment-2334801778:24,install,install,24,https://qutip.org,https://github.com/qutip/qutip/pull/2527#issuecomment-2334801778,1,['install'],['install']
Deployability,If only the mac one fail I will merge it anyway and update #1288.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1301#issuecomment-649584449:52,update,update,52,https://qutip.org,https://github.com/qutip/qutip/pull/1301#issuecomment-649584449,1,['update'],['update']
Deployability,"If only this had come an hour sooner! Making a new release of code is pretty straightforwards now, though, so we can fold this and some other bits and bobs into a patch release in a week or two's time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1496#issuecomment-817381110:51,release,release,51,https://qutip.org,https://github.com/qutip/qutip/pull/1496#issuecomment-817381110,3,"['patch', 'release']","['patch', 'release']"
Deployability,"If the QuTiP is already installed then there is no problem after the update, it works.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/919#issuecomment-427661220:24,install,installed,24,https://qutip.org,https://github.com/qutip/qutip/issues/919#issuecomment-427661220,2,"['install', 'update']","['installed', 'update']"
Deployability,"If we look at https://github.com/cython/cython/issues/4310, they plan to deprecate the compilation time `IF` in a future release.; They suggest using cmacro or code generation to replace this. I suggest to take more time thinking about this and use those method instead. As it is, we would have to set a compilation environment variable each time something want to `cimport Data`, even from outside qutip...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1727#issuecomment-1104573990:121,release,release,121,https://qutip.org,https://github.com/qutip/qutip/pull/1727#issuecomment-1104573990,1,['release'],['release']
Deployability,"If you install from source from the master branch with the environment variable `CI_QUTIP_WITH_IDXINT_64=1` set, you should be able to use matrix with size up to `2**63-1`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/853#issuecomment-1785174200:7,install,install,7,https://qutip.org,https://github.com/qutip/qutip/issues/853#issuecomment-1785174200,1,['install'],['install']
Deployability,"If you only need the final state and you don't need any intermediate times, your `tlist` should only have two elements in it. So; ```python; import qutip; hamiltonian = qutip.sigmax(); state = qutip.basis(2, 0).proj(); times = [0, 10]; qutip.mesolve(hamiltonian, state, times); ```; should give the correct result. If you want to integrated for a long time, you might get errors about the integration not converging. If so, you will need to increase the `nsteps` solver option, such as; ```; options = qutip.Options(nsteps=10_000_000); qutip.mesolve(..., options=options); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-808417826:330,integrat,integrated,330,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-808417826,2,['integrat'],"['integrated', 'integration']"
Deployability,"If you work only with solver, you can only update the args once per step.; To have it apply each time the rhs is used it need to be inserted into `QobjEvo`.; The method `_prepare` is there for that, it's called at the start of `matmul`, and `expect`.; I was thinking of using it like this:. ```; cdef class QobjEvo_With_FeedBack(QobjEvo):; """"""; QobjEvo which support feedback.; """"""; cdef dict feedback. def __init__(self, Q_object=[], args={},; tlist=None, deepcopy=False, copy=True):; self.feedback = {}; super().__init__(Q_object, args, tlist, deepcopy, copy). def add_feedback(self, args_key, function):; self.feedback[args_key] = function. cdef double _prepare(self, double t, Data state=None):; if state is not None:; self.arguments({key: feedback(t, state); for key, feedback in self.feedback.items()}); return t + self._shift_dt ; ```; The state will be column stacked Data object, so the function much reshape and restore dims, etc.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1142273887:43,update,update,43,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1142273887,1,['update'],['update']
Deployability,"In development version 4.4: . - For Python 3.6, when running `qutip.testing.run()`. ```; uTiP Version: 4.4.0.dev0+0bf3e05e; Numpy Version: 1.16.2; Scipy Version: 1.2.1; Cython Version: 0.29.6; Matplotlib Version: 3.0.3; Python Version: 3.6.8; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: True; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); ```; I obtain an error at ; ```; Propagator: steady state ... Segmentation fault: 11; ```. - For Python 3.7 with ; ```; QuTiP Version: 4.4.0.dev0+0bf3e05e; Numpy Version: 1.16.2; Scipy Version: 1.2.1; Cython Version: 0.29.6; Matplotlib Version: 3.0.3; Python Version: 3.7.3; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: True; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/nathanshammah/miniconda3/envs/py37/lib/python3.7/site-packages/qutip-4.4.0.dev0+0bf3e05e-py3.7-macosx-10.7-x86_64.egg/qutip; ```; the error occurs at . ```; Metrics: Check avg gate fidelities for random ... python(42424,0x7fffa34a8380) malloc: *** error for object 0x7fc74f258880: incorrect checksum for freed object - object was probably modified after being freed.; *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-482116179:291,Install,Installed,291,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-482116179,3,['Install'],"['Installation', 'Installed']"
Deployability,"In my tries yesterday, I did not have problem with `scipy.linalg.eigh` for C array. Since `scipy` does not use the same lapack interface for C and Fontran continuous array, I though it was fine. I guess I did not run enough tests. . Using `eig` and `zgeev` seems a good idea. I don't have any error with it yet.; It would then be good to change all the `eigh` in the code, not just the `zheevr` call in cython. ; And probably raise an issue in `scipy`. @jakelishman since most computation of eigenvalue in Qutip go through the `Qobj` could you fix that call this summer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628833918:155,continuous,continuous,155,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628833918,1,['continuous'],['continuous']
Deployability,"In the development version `qutip.core.dimensions.to_tensor_rep` does just that.; I would be easy to add to a `Qobj` method. In the release version, `dims_to_tensor_perm` and `dims_to_tensor_shape` can be used to create the array.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2353#issuecomment-2004842390:132,release,release,132,https://qutip.org,https://github.com/qutip/qutip/issues/2353#issuecomment-2004842390,1,['release'],['release']
Deployability,"In the documentation, qutip is build with `pip install qutip[full]`, while in test it is installed with `pip install qutip[$QUTIP_TARGET]`, with the target changing depending on the test. We don't have any test using extra yet... The mpi4py team made a GitHub Actions workflow to run it in test: https://github.com/mpi4py/setup-mpi. You can add that workflow and the `extra` to have every test run with mpi:; ```; - uses: actions/checkout@v3; - uses: mpi4py/setup-mpi@v1; ```. `QUTIP_TARGET=""tests,graphics,semidefinite,ipython,extra"" `. By I am not sure it would work for windows. Also if installing mpi is slow, we may not want it in all test.; But conditional workflow are tricky so lets see want if it just works first. Yes, the test failures are related to last weekend scipy release, not this code.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1904189729:47,install,install,47,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1904189729,5,"['install', 'release']","['install', 'installed', 'installing', 'release']"
Deployability,"In the release version `qutip-4.7.X`, it is set in `qutip/__init__.py`. On master it is at https://github.com/qutip/qutip/blob/253d91c2776fef5cc0025e3c537d046f6e9c97a1/qutip/settings.py#L159; It's a property and can't be changed, but we can change that if useful.; The condition is the same. Qutip's sparse `eig` is not safe for matrices with degenerate real part of the eigen value (#1998), but I have not seen issues with the dense one (calling lapack through numpy).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2273#issuecomment-1832717751:7,release,release,7,https://qutip.org,https://github.com/qutip/qutip/issues/2273#issuecomment-1832717751,1,['release'],['release']
Deployability,"Indeed, it is [in the code](https://github.com/qutip/qutip/blob/2aa51b92df57f995778940815d20d293f00f8a9d/qutip/operators.py#L888-L948). However, I cannot find any reference to them in [the documentation](http://qutip.org/docs/3.1.0/search.html?q=charge&check_keywords=yes&area=default). EDIT: Ok, my bad, documentation and official pip releases are 3.1.0 and it seems to have been added recently :/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/562#issuecomment-263879657:336,release,releases,336,https://qutip.org,https://github.com/qutip/qutip/issues/562#issuecomment-263879657,1,['release'],['releases']
Deployability,Installation using MacPorts and Anaconda (without the Fortran mcsolver) both work fine on OSX. I would recommend using one of those.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/348#issuecomment-113357619:0,Install,Installation,0,https://qutip.org,https://github.com/qutip/qutip/issues/348#issuecomment-113357619,1,['Install'],['Installation']
Deployability,"Installation via pip or from source seems to work. Oh, and I'm also pretty sure that the conda installation *used* to work on this machine (a few weeks ago)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-289227191:0,Install,Installation,0,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-289227191,2,"['Install', 'install']","['Installation', 'installation']"
Deployability,"Installing FORTRAN on OS X can be a bit tricky, but I've seen several people successfully use the [HPC for OS X](http://hpc.sourceforge.net/) builds of gfortran.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/391#issuecomment-154595439:0,Install,Installing,0,https://qutip.org,https://github.com/qutip/qutip/issues/391#issuecomment-154595439,1,['Install'],['Installing']
Deployability,Installing from source is probably the way to go.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-365811269:0,Install,Installing,0,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-365811269,1,['Install'],['Installing']
Deployability,"Interesting observation, the vector_to_operator seems to expect an ""operator-ket"" class, as seen in the examples: . http://qutip.org/docs/3.1.0/guide/guide-states.html. In the code, it expects the dimensions of the operator(""op"") should be: . `op.dims = [ [[rows], [cols]], [1]]`. This is probably to keep in line with the way operator_to_vector sets the dimensions. I am not sure what the expected behavior is supposed to be with a ""ket"" instead of a ""operator-ket"". You are correct to think that this behavior changed in release 4.5 as the shape passed to the sp_reshape function in vector_to_operator changed from:. `n = int(np.sqrt(op.shape[0]))`; `shape = (n, n)`. to . `shape = (np.prod(q.dims[0]), np.prod(q.dims[1]))`. The first preserves the correct ""size"" (which is later used in the check which throws ""Exception: Total size of array must be unchanged."") but the latter one does not for kets. . Maybe we should return the shape assignment to the previous one ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600771828:523,release,release,523,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600771828,1,['release'],['release']
Deployability,"Interesting... It seems I can not reproduce the problem. I've run the for loop 150 times and always got 1e-12.; about():. > QuTiP: Quantum Toolbox in Python; > Copyright (c) 2011 and later.; > Alexander Pitchford, Chris Granade, Paul D. Nation & Robert J. Johansson; > ; > QuTiP Version: None; > Numpy Version: 1.11.1; > Scipy Version: 0.18.0; > Cython Version: 0.24.1; > Matplotlib Version: 1.5.1; > Python Version: 2.7.12; > Number of CPUs: 2; > BLAS Info: INTEL MKL; > INTEL MKL Ext: True; > Platform Info: Windows (x86); > Installation path: E:\Miniconda2\lib\site-packages\qutip-none-py2.7-win32.egg\qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/526#issuecomment-242813827:527,Install,Installation,527,https://qutip.org,https://github.com/qutip/qutip/issues/526#issuecomment-242813827,1,['Install'],['Installation']
Deployability,"Interesting... You see, the gate `Gate(RY, targets=[0, 1], controls=None)` is clearly wrong because RY acts only on one qubits. I guess you are probably using a released version of QuTiP (4.5.2/3 maybe) and not the master branch. This error was hidden before in those released version. If you try to install from source (http://qutip.org/docs/latest/installation.html#installing-from-source) (which you have to if you want to contribute anyway), you will probably see this error message.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275:161,release,released,161,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275,5,"['install', 'release']","['install', 'installation', 'installing-from-source', 'released']"
Deployability,Internal note: `bloch_redfield_solve` quit without raising an error when ode integration fails.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965#issuecomment-1203283104:77,integrat,integration,77,https://qutip.org,https://github.com/qutip/qutip/issues/1965#issuecomment-1203283104,1,['integrat'],['integration']
Deployability,"Is anyone working on this? I see no assignee, and it would be nice to get this feature on a stable release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1887#issuecomment-1278553473:99,release,release,99,https://qutip.org,https://github.com/qutip/qutip/issues/1887#issuecomment-1278553473,1,['release'],['release']
Deployability,"Is it ok if sneak in parallelisation of the HEOM stuff into this issue? A bunch of groups have done it already, and it apparently gives some advantages, but only Tanimura himself has released code and details showing their approach http://pubs.acs.org/doi/abs/10.1021/acs.jctc.5b00488?journalCode=jctcce. I was talking to alex about importing their code with cython (assuming they allow it, they haven't specified a licence that I noticed). Otherwise, their approach seems to be to do a taylor series expansion of the propagator, and do all the resulting matrix multiplication stuff on a GPU. Though I guess there's something tricky involving memory in that last step.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/438#issuecomment-186782990:183,release,released,183,https://qutip.org,https://github.com/qutip/qutip/issues/438#issuecomment-186782990,1,['release'],['released']
Deployability,"Is it the case so, I was just about to upgrade to Mojave. Is it the issue with IDLE or Notebooks?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/919#issuecomment-427550075:39,upgrade,upgrade,39,https://qutip.org,https://github.com/qutip/qutip/issues/919#issuecomment-427550075,1,['upgrade'],['upgrade']
Deployability,"Is multiprocessing used by default in some functions ? Can we do away with that in the __init__.py file and add it where it is used ? . Why do we need to check for numpy and scipy versions at each import ? Is it not enough to check it when installing qutip ?. What do you mean by ""avoiding internal imports"" ? Do you mean to say that we should remove all * imports ? . ```; from qutip.tomography import *; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-269518208:240,install,installing,240,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-269518208,1,['install'],['installing']
Deployability,Is this PR done? If so I can merge it and make a new release candidate dist file.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/195#issuecomment-49124612:53,release,release,53,https://qutip.org,https://github.com/qutip/qutip/pull/195#issuecomment-49124612,1,['release'],['release']
Deployability,Is this merge ready? I am looking to make the 4.0.2 release,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/609#issuecomment-269961480:52,release,release,52,https://qutip.org,https://github.com/qutip/qutip/pull/609#issuecomment-269961480,1,['release'],['release']
Deployability,"It appears that they have removed hw.cpufrequency on these things (About this mac doesn't show a freq. either). I don't know what is their policy in this regard but I did find these two related issues: https://github.com/giampaolo/psutil/issues/1892 and https://github.com/shirou/gopsutil/pull/999. My workaround was to comment out the code and hard-wire a random value in there :-) A quick grep didn't seem to show any use of cpu_freq elsewhere in the code but then I didn't look too much in depth. I don't personally use qutip, my partner does, she's the physicist, I'm just the geek helping hand :). It does look like this code could use some error handling and put some ""reasonable"" default values if the sysctl's fail indeed. Happy to test a patch and report. She's currently away so there will be some latency (I can occasionally ssh into her laptop but it takes preparation), so I can't really submit a PR myself at this point.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1606#issuecomment-880308664:747,patch,patch,747,https://qutip.org,https://github.com/qutip/qutip/issues/1606#issuecomment-880308664,1,['patch'],['patch']
Deployability,"It could be in the installation instruction. . Or solution 3 should be easy and quick do implement as a temporary patch. A good first cython PR.; We just need to decide if we accept it like this, go back to make a better fix later or wait for scipy / blas to fix it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628675623:19,install,installation,19,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628675623,2,"['install', 'patch']","['installation', 'patch']"
Deployability,It did work for me with QuTiP master on Python 3.10.5. Could you try with master to? We need to do a 4.7.1 release soon anyway.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1978#issuecomment-1219847833:107,release,release,107,https://qutip.org,https://github.com/qutip/qutip/pull/1978#issuecomment-1219847833,1,['release'],['release']
Deployability,"It doesn't fail on Python 3.10 and below, because there are pre-built wheels for those Pythons. Python 3.11 wasn't released when 4.7.0 came out, so there aren't prebuilt wheels for that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2036#issuecomment-1342844102:115,release,released,115,https://qutip.org,https://github.com/qutip/qutip/issues/2036#issuecomment-1342844102,1,['release'],['released']
Deployability,"It gives me correct result when I change the ODE tolerances as you mentioned, in mesolve(). Thank you so much. I tried in v4.7.3, now, after I upgrade it to v5, still same result as v4.7.3.; Now I can try my original calculation, your suggestion should work then.; Thanks. > It is a little annoying it is just failing silently. yes, I agree....",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2229#issuecomment-1713148770:143,upgrade,upgrade,143,https://qutip.org,https://github.com/qutip/qutip/issues/2229#issuecomment-1713148770,1,['upgrade'],['upgrade']
Deployability,It is fixed in the latest release (4.7.2) with #2082.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2211#issuecomment-1674730690:26,release,release,26,https://qutip.org,https://github.com/qutip/qutip/issues/2211#issuecomment-1674730690,1,['release'],['release']
Deployability,"It is not only the number of calls to expect that changes. It seems like the key difference in your example is the number of calls to ode.integrate, which are doubled in numbers and account for an additional 60 sec of wall time, out of which at most 3.7 is spent for calculating expectation values. Maybe the following can provide some additional clues. For `tlist = linspace(0, 10, 10)`. ```; ncalls tottime percall cumtime percall filename:lineno(function); ...; 500 2.669 0.005 39.053 0.078 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:757(_mc_alg_evolve); 163354 0.476 0.000 35.217 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:376(integrate); 163354 34.360 0.000 34.477 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:859(run); 157186 0.265 0.000 28.734 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:747(step); 533/1 0.004 0.000 0.761 0.761 <frozen importlib._bootstrap>:2234(_find_and_load); ```. For `tlist = linspace(0, 10, 100)`. ```; ncalls tottime percall cumtime percall filename:lineno(function); ...; 500 6.320 0.013 108.141 0.216 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:757(_mc_alg_evolve); 290347 0.887 0.000 95.006 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:376(integrate); 290347 93.419 0.000 93.705 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:859(run); 238940 0.414 0.000 45.467 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:747(step); 153438 3.721 0.000 3.721 0.000 {built-in method cy_expect_psi_csr}; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-64520821:138,integrat,integrate,138,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-64520821,9,['integrat'],['integrate']
Deployability,It is possible to do any release. I just did master for testing.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/279#issuecomment-65757704:25,release,release,25,https://qutip.org,https://github.com/qutip/qutip/pull/279#issuecomment-65757704,1,['release'],['release']
Deployability,"It is there because one has to build all the cython modules in the cy folder. Since cython is used for time dependent stuff, we stopped packaging the c code itself and just let the user build it since cython is a required package. > On Mar 4, 2016, at 10:05, Alexander Pitchford notifications@github.com wrote:; > ; > There is a section in qutip/init.py that checks the cython version, then re cythonizes all the pyx. It prints a warning if cython is not found. So after install, during which all the cython modules get built, during the first import of qutip all the building happens again. This seems unnecessary, and is actually an issue if we are making a pre-built package. I have patched out this section in the conda-forge feedstock. All but 7 of the tests are successful.; > ; > Cython is not actually needed at run time for most of QuTiP. Why is it sometimes needed at runtime?; > ; > Should we look remove this section from the init.py, and put some warning in the methods that use cython at runtime?; > ; > —; > Reply to this email directly or view it on GitHub.; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/448#issuecomment-192387820:471,install,install,471,https://qutip.org,https://github.com/qutip/qutip/issues/448#issuecomment-192387820,2,"['install', 'patch']","['install', 'patched']"
Deployability,"It looks like the mcsolve tests hang if the interpolate tests are run. This is probably related to the use of multiprocessing / mcsolve inside both. Update: Actually, the mcsolve tests are hanging periodically even without the interpolate tests.; Further update: It seems to be the test `TestConstantCollapse::test_states_and_expect[string]` that hangs, so perhaps it is related to compiling Cython functions on the fly while running mcsolve?; Furtherer update: I'm trying removing the unused imports in mcsolve. This shouldn't really make a difference but with multiprocessing who knows, so it seems worth a try.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1854#issuecomment-1097121753:149,Update,Update,149,https://qutip.org,https://github.com/qutip/qutip/pull/1854#issuecomment-1097121753,3,"['Update', 'update']","['Update', 'update']"
Deployability,"It looks like this CI check was killed prematurely again. I'm not sure what is happening with Travis lately, but I suspect it's related to their move over to container-based deployment.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/359#issuecomment-129753540:174,deploy,deployment,174,https://qutip.org,https://github.com/qutip/qutip/pull/359#issuecomment-129753540,1,['deploy'],['deployment']
Deployability,"It looks like we are going to just go with installing dependencies with macports and do a pip install for qutip itself from here on out. This is already the procedure listed in the 3.1 docs. Therefore, I am going to close this issue if there are no other thoughts on the matter.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/283#issuecomment-67802461:43,install,installing,43,https://qutip.org,https://github.com/qutip/qutip/issues/283#issuecomment-67802461,2,['install'],"['install', 'installing']"
Deployability,"It now all fare similarly to 4.3.1. or considerably better, also when `e_ops` are given:. ### QuTiP 4.4 with this patch (updated):. * Case 1) Average states = False, Store States = True; **Real cell time: 17s (previously: 28.9s. version 4.3.1: 25s)**. * Case 2) Average states = False, Store States = False; Real cell time: 8s (previously: 18.64s. version 4.3.1: 11s). * Case 3) Average states = True, Store States = True; **Real cell time: 9s (previously: 23s. version 4.3.1: 65s)**. * Case 4) Default options; Real cell time: 8s (previously: 19s. version 4.3.1: 8s ). * Case 5) Average states = True, Store States = False; Real cell time: 8.7s (previously: 28s. version 4.3.1: 8.7s)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1024#issuecomment-504745846:114,patch,patch,114,https://qutip.org,https://github.com/qutip/qutip/pull/1024#issuecomment-504745846,2,"['patch', 'update']","['patch', 'updated']"
Deployability,"It probably depends on the C++ environment I guess? I just reinstalled qutip `dev.major`, ran the above script and saw; ```; cl : Command line warning D9025 : overriding '/W3' with '/w'; cl : Command line warning D9025 : overriding '/O2' with '/O1'; cqobjevo_compiled_coeff_117945645340.cpp; E:\Miniconda3\envs\qutip5\lib\site-packages\numpy\core\include\numpy\npy_1_7_deprecated_api.h(14) : Warning Msg: Using deprecated NumPy API, disable it with #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; Creating library C:\Users\Boxi\.pyxbld\temp.win-amd64-cpython-39\Release\Users\Boxi\.pyxbld\temp.win-amd64-cpython-39\Release\pyrex\cqobjevo_compiled_coeff_117945645340.cp39-win_amd64.lib and object C:\Users\Boxi\.pyxbld\temp.win-amd64-cpython-39\Release\Users\Boxi\.pyxbld\temp.win-amd64-cpython-39\Release\pyrex\cqobjevo_compiled_coeff_117945645340.cp39-win_amd64.exp; Generating code; Finished generating code; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1190#issuecomment-1171712449:565,Release,Release,565,https://qutip.org,https://github.com/qutip/qutip/issues/1190#issuecomment-1171712449,4,['Release'],['Release']
Deployability,"It seems that you are running qutip from the installation directory. You should change directories first. . > On Apr 28, 2016, at 08:47, lightning469 notifications@github.com wrote:; > ; > Hi,; > ; > AttributeError Traceback (most recent call last); > C:\Users\David Feng\Desktop\qutip-3.1.0\qutip\tests\test_wigner.py in (); > 37 from numpy.testing import assert_, run_module_suite, assert_equal; > 38 ; > ---> 39 from qutip.states import coherent, fock; > 40 from qutip.wigner import wigner; > 41 from qutip.random_objects import rand_dm, rand_ket; > ; > C:\Users\David Feng\Desktop\qutip-3.1.0\qutip__init__.pyc in (); > 60 qutip.settings.ipython = True; > 61 except:; > ---> 62 qutip.settings.ipython = False; > 63 ; > 64 # -----------------------------------------------------------------------------; > ; > AttributeError: 'module' object has no attribute 'settings'; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/469#issuecomment-215877900:45,install,installation,45,https://qutip.org,https://github.com/qutip/qutip/issues/469#issuecomment-215877900,1,['install'],['installation']
Deployability,It seems to be caused by a new version of cython which affect which files are used for tests by nose. I made a patch.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/917#issuecomment-431498898:111,patch,patch,111,https://qutip.org,https://github.com/qutip/qutip/pull/917#issuecomment-431498898,1,['patch'],['patch']
Deployability,"It seems to work now (the failing test is unrelated). I will briefly summarize what I found out and changed. Setting up and using an MPI environment is surprisingly difficult, and I don't think it is in the scope of qutip to try and make that easier, or guide users to do that. The philosophy here is, if the user can get the `mpi4py.futures.MPIPoolExecutor` to work, then they can also use `mpi_pmap` in qutip. However, I did show in the tutorial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:773,install,installed,773,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,2,['install'],['installed']
Deployability,"It should be fixed with v5's release.; Now the documentation says that `c_ops` can be a list of `QobjEvo` or anything that can be interpreted as such, including functions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2270#issuecomment-2028996738:29,release,release,29,https://qutip.org,https://github.com/qutip/qutip/issues/2270#issuecomment-2028996738,1,['release'],['release']
Deployability,"It was during fixing/changing the behaviour shown in 1808 that I first saw the issue. It seems now that I can change the qutip code, and to some degree at least it does compile, but the mentioned error still shows up in the terminal on running reload(qutip). Its likely that the error was there before I started modifying any files, and that I did not happen to spot it between all the lines jupyter tends to print in the terminal. It also shows up on my system after I force a fresh installation of qutip with no changes. It does not currently seem to stop me from doing anything, but I don't know what causes it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1810#issuecomment-1046958786:484,install,installation,484,https://qutip.org,https://github.com/qutip/qutip/issues/1810#issuecomment-1046958786,1,['install'],['installation']
Deployability,"It was my mistake; I removed the old install manually and compiled it again, now everything's fine. Thanks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42923244:37,install,install,37,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42923244,1,['install'],['install']
Deployability,It will be added it the next major release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1990#issuecomment-1248613448:35,release,release,35,https://qutip.org,https://github.com/qutip/qutip/issues/1990#issuecomment-1248613448,1,['release'],['release']
Deployability,"It will be useful for solver feedback.; In v4 we can define Hamiltonian to depend on the state: `H(t, args, psi/rho)`.; We don't have it working in v5, but we will need to restore it before release.; This `_prepare` catch the time and state at the start of `matmul` and `expect` and update the arguments according to feedback.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2016#issuecomment-1302681575:190,release,release,190,https://qutip.org,https://github.com/qutip/qutip/pull/2016#issuecomment-1302681575,2,"['release', 'update']","['release', 'update']"
Deployability,"It's ""Cython version 0.20.1post0"" and the official release of QuTiP (2.2.0) I'm using.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42849332:51,release,release,51,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42849332,1,['release'],['release']
Deployability,"It's fine to not split the PR in too many chunks.; Yes it's easier to review, but I don't want to have it half implemented/merged at release, which is coming soon.; You could just add `kron` here. The other can be implemented using matmul and can wait. It's fine to take some time. Just ping me when you want a re-review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2314#issuecomment-1942727858:133,release,release,133,https://qutip.org,https://github.com/qutip/qutip/pull/2314#issuecomment-1942727858,1,['release'],['release']
Deployability,It's fixed in `master` with #1752. A patch should be released soon.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1766#issuecomment-1014616780:37,patch,patch,37,https://qutip.org,https://github.com/qutip/qutip/issues/1766#issuecomment-1014616780,2,"['patch', 'release']","['patch', 'released']"
Deployability,"It's in development. ; If you use qutip v5.0.0a2 on pypi or master branch here with [qutip-jax](https://github.com/qutip/qutip-jax), some solver can work on gpu. (We tested `sesolve` and `mesolve`, mcsolve should work, stochastic, HOEM, brmesolve don't.); The readthedocs of qutip-jax shows how to use it. qutip-jax is not up to date with the latest versions.; If you are interested in trying it, I will make it works with the latest jax version and qutip master.; Any and all feedback appreciated. We expect an official release of these features in March.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2320#issuecomment-1932348944:521,release,release,521,https://qutip.org,https://github.com/qutip/qutip/issues/2320#issuecomment-1932348944,1,['release'],['release']
Deployability,It's looking good but there are a few gate decompositions in the test notebook (i've updated and checked it in) that fails. It would be good if we could sort that out before merging this.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/145#issuecomment-45212370:85,update,updated,85,https://qutip.org,https://github.com/qutip/qutip/pull/145#issuecomment-45212370,1,['update'],['updated']
Deployability,"It's probably relevant that scipy 1.6.1 fixed some problems with sparse matrices (with COO format constructor), see https://docs.scipy.org/doc/scipy-1.6.1/reference/release.1.6.1.html including PR#13403 https://github.com/scipy/scipy/pull/13403",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1451#issuecomment-784228597:165,release,release,165,https://qutip.org,https://github.com/qutip/qutip/issues/1451#issuecomment-784228597,1,['release'],['release']
Deployability,"It's very clean, I really like the `set & set` and reusing the classes. But in v4, while we used `f(t, args)` in most examples, we never said that it should be the exact signature up to variable name, so I don't think it an appropriate check for which version to use. Ideally, the check should be good enough we don't need to change any tests not directly related to the addition of this feature. Also what should; ```; def f(t, w, a=1):; return a. coeff = coefficient(f, args={'w':1}); coeff.replace_arguments(a=2)(0); ```; give? Since `a` is not given, it's not our job to update it, or should we add it to `_f_arg_names`?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633#issuecomment-894438481:575,update,update,575,https://qutip.org,https://github.com/qutip/qutip/pull/1633#issuecomment-894438481,1,['update'],['update']
Deployability,It's very likely that the Python you used to install QuTiP was not the one you used to import it. It can happen when several Python versions/environments are present (e.g. on a server).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1391#issuecomment-735452873:45,install,install,45,https://qutip.org,https://github.com/qutip/qutip/issues/1391#issuecomment-735452873,1,['install'],['install']
Deployability,"Just a few comments:; * The changes in behavior are probably due to a different QuTiP version. Your `qutip.about()` output shows that you have installed version 5.0.3 on the one PC and version 4.6.2 on the other. Version 5 was recently released, and it is a major update and changes many of the internals of QuTiP. Old code should still work with version 5 in the majority of cases, but it is not guaranteed to always work. For old code, you might therefore prefer to use version 4 (the latest release of version 4 is v4.7.6).; * Your notebooks are rather long, and for a person who has not written them it can be hard to figure out what they do. If you would like to investigate in detail where the different behavior comes from, I would recommend to try to boil it down to a *short, self-contained* example script that gives different results in versions 4 and 5.; * The differing plots show values with a magnitude of $10^{-14}$ or so. That is rather small. By default, QuTiP's solvers use tolerances of $10^{-12}$, so you should not expect the numerical results to have a higher precision than that. In numerical calculations, it is generally recommended to rescale your units such that your parameters and results have a magnitude around $1$ if possible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2501#issuecomment-2249560375:143,install,installed,143,https://qutip.org,https://github.com/qutip/qutip/issues/2501#issuecomment-2249560375,4,"['install', 'release', 'update']","['installed', 'release', 'released', 'update']"
Deployability,Just a ping to @araza6 for any update. Cc @quantshah.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-633933697:31,update,update,31,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-633933697,1,['update'],['update']
Deployability,"Just a small additional comment, the ODE solver is probably slow in your case because of the large disparity in parameters (particularly the very large dephasing rate), which makes it a bit stiff I guess (and hence maybe why BDF works a little better than adams in this case?). I will close this issue, but if you have any comments/updates on improving the performance of your example, feel free to comment or re-open it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1591#issuecomment-900015271:332,update,updates,332,https://qutip.org,https://github.com/qutip/qutip/issues/1591#issuecomment-900015271,1,['update'],['updates']
Deployability,"Just a small comment in the meanwhile, might be instructive to run the code on ipython (on the terminal instead of jupyter), usually it gives the behavior of os.run() commands as well. Might help with installation of missing packages.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1185#issuecomment-601944385:201,install,installation,201,https://qutip.org,https://github.com/qutip/qutip/issues/1185#issuecomment-601944385,1,['install'],['installation']
Deployability,"Just adding my two cents. From my experience, a lot of our users don't know how to efficiently locate the error and find the solution. Simply posting a HOW-TO guide along with the release notes might not be sufficient, because the users may not be aware of its existence. It would help I think if we could; - raise an error or warning message that locates the error as clear as possible and; - if feasible, leave a link in the error/warning message directing the users to the HOW-TO guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053:180,release,release,180,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053,1,['release'],['release']
Deployability,Just found that installing through pip gave the same problem.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/690#issuecomment-298964798:16,install,installing,16,https://qutip.org,https://github.com/qutip/qutip/issues/690#issuecomment-298964798,1,['install'],['installing']
Deployability,"Just found what may have been the cause of the segfault. Incorrect indexing in `data.csr.Accumulator.gather` led to uninitialised memory being exposed if it encountered a zero value which in the current PR would only have been exposed by `Qobj.ptrace` on CSR to CSR, but by no fault of its own. This PR is ready for review - these last couple of patches I've just been sending could equally have gone to the next PR I'm preparing which is waiting for this one to be merged so I can rebase it on top of the new `dev.major`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338#issuecomment-678399544:346,patch,patches,346,https://qutip.org,https://github.com/qutip/qutip/pull/1338#issuecomment-678399544,1,['patch'],['patches']
Deployability,"Just noticed this thread. . I can take a detailed look, perhaps with @arnelg as we recently updated the superoperator functions in 4.5. . My initial reaction is this is ""off label use"" of `vector_to_operator`. If so, then we can update the docs to make this point clear.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-641690849:92,update,updated,92,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-641690849,2,['update'],"['update', 'updated']"
Deployability,"Just to add that we also have operator evolution in the form. $$ \partial_t \begin{pmatrix} U \\\\ U' \end{pmatrix} = -i \begin{pmatrix} H & 0 \\\\ H' & H \end{pmatrix} \begin{pmatrix} U \\\\ U' \end{pmatrix}, $$. and similar with $U$ switched for a map and $H$ for some Lindblad superoperator, in goat, which seems to work fine in terms of the multiplication during the ODE update step. So, as suggested, it would seem that mainly we just want a nice, efficient method for constructing / extracting these objects.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2384#issuecomment-2046601871:375,update,update,375,https://qutip.org,https://github.com/qutip/qutip/issues/2384#issuecomment-2046601871,1,['update'],['update']
Deployability,"Just to get the ball rolling, I will go ahead and ask my question here and migrate it if necessary. . My code performs quantum annealing on a transverse-field Ising Hamiltonian as inspired by D-Wave Systems devices which is explained briefly [here](https://docs.dwavesys.com/docs/latest/c_gs_2.html), but the essential equation is; ![D-Wave-hamiltonian](https://user-images.githubusercontent.com/29308150/61193322-bdb48c00-a688-11e9-94ac-22c5d093b47a.png).; The A(s) and B(s) factors dictate the time-evolution from the initial Hamiltonian to the final Hamiltonian where s is a linear function of time, i.e. s(t) is linear with slope between 0 and some max and 0 <= s <= 1. In my code, my sesolve command looks like 'results = qt.sesolve(listH, init_state, discretized_times_list)' where 'listH = [[Hx, A(s(t))], [Hz, B(s(t))]]' and A(s(t)) and B(s(t)) and created by using QuTiP's interpolate.Cubic_Spline function that dictates what the A and B parameters should be at each point in time. . When I make successive calls, it is to do several different things. For example, I may change coupling (h and J) values to create a new spin-glass, adjust number of qubits (larger or smaller H), or anneal for a longer or shorter time. I am not sure how to directly relate this to what has been posted so far, but perhaps I am not fully understanding the point made in https://github.com/qutip/qutip/issues/966#issuecomment-474569011.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/966#issuecomment-511266095:21,rolling,rolling,21,https://qutip.org,https://github.com/qutip/qutip/issues/966#issuecomment-511266095,1,['rolling'],['rolling']
Deployability,"Just to make sure, but I guess you already restarted the console after everything is installed?. If you got the pdf, then the LaTeX part is working. Have you tried to use the ImageMagick command to convert the pdf to png yourself?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1888#issuecomment-1112216929:85,install,installed,85,https://qutip.org,https://github.com/qutip/qutip/issues/1888#issuecomment-1112216929,1,['install'],['installed']
Deployability,"Last review re-request, hopefully. I think everything's correct and ready now. 1. I had forgotten to build the sdist here, so it would have been missing from the pip package. That's fixed now.; 2. It's harder than you might expect to quickly fail all jobs in a GitHub Actions workflow right now. It seems that they expect you to try and continue for as long as possible for jobs on different runners, so I had to make everything depend on the confirmation verification to get the fail-fast behaviour.; 3. Hopefully neatened up the language we've been talking about.; 4. Removed installation of unnecessary VC++ tools for Python 2.7 on Windows.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1465#issuecomment-807184002:578,install,installation,578,https://qutip.org,https://github.com/qutip/qutip/pull/1465#issuecomment-807184002,1,['install'],['installation']
Deployability,"Let me look at this tonight. I have uploaded the spline interp method, and just need to integrate it with the solvers. I have done something similar elsewhere so it should be straightforward (provided I find the time). The nonlinear list is also easy to incorporate, for SciPy 0.18+, so I think that there interp methods will replace the array based format in the future.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-245346539:88,integrat,integrate,88,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-245346539,1,['integrat'],['integrate']
Deployability,Let me make some updates before review.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/291#issuecomment-66950762:17,update,updates,17,https://qutip.org,https://github.com/qutip/qutip/pull/291#issuecomment-66950762,1,['update'],['updates']
Deployability,"Looking at it, the issue is in `sesolve` which is called by `mesovle` when no `c_ops` are passed. It save the Hamiltonian in the results. If you do; ```; if hasattr(out, 'SolverSystem'):; out.SolverSystem = None; ```; before pickling, it should work. But I would suggest to extract the states as numpy arrays and use `numpy.save`. With it, the data should stay readable even if you update numpy or python, while any qutip (or scipy) update could make it impossible to unpickle `Qobj`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1684#issuecomment-934345372:382,update,update,382,https://qutip.org,https://github.com/qutip/qutip/issues/1684#issuecomment-934345372,2,['update'],['update']
Deployability,"Looking at the docs `requirements.txt`, it looks like the docs build failing is an indication that your build process isn't correct. The docs requirements is a pinning file that's now quite old, so it still has Numpy 1.19. That fails, which indicates your build is using a too-new version of Numpy. You probably want to update the docs requirements pins, but equally you probably want to add a CI test case that deliberately uses Numpy <1.20 on Python 3.7 or 3.8 to ensure that your build is correct.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1735#issuecomment-989840346:320,update,update,320,https://qutip.org,https://github.com/qutip/qutip/pull/1735#issuecomment-989840346,1,['update'],['update']
Deployability,"Looking good, could you add the file `doc/change/2103.misc` containing a short description of the changes.; We use it to make sure we don't forget contributions when making release documentation.; See https://qutip.org/docs/latest/development/contributing.html#changelog-generation",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2103#issuecomment-1451965023:173,release,release,173,https://qutip.org,https://github.com/qutip/qutip/pull/2103#issuecomment-1451965023,1,['release'],['release']
Deployability,"Looking great, good job! . Just a few minor problems with the unit tests:; - use .np.array on line 214 in random_objects.py; - I get errors like ""AttributeError: 'numpy.ndarray' object has no attribute 'H'"". We need to use numpy.matrix instead of numpy.ndarray if .H is to be used.; - line 57 insuperop_reps: ""inpt=q_oper.data.reshape([sqrt_shape] \* 4)."" gives an error because q_oper.data is csr sparse matrix and does not implement reshape. I guess that the unit tests work on your system (maybe some version differences of numpy/scipy), so I'll go ahead and merge this PR now, and try to fix the unit test problems I get here. Just go ahead and make a new PR if there is anything else that you want to add or update. We really appreciate your contribution!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/22#issuecomment-18782823:713,update,update,713,https://qutip.org,https://github.com/qutip/qutip/pull/22#issuecomment-18782823,1,['update'],['update']
Deployability,"Looks cool, you can make the PR against the master branch. We do not have a; dev branch. On Mon, 22 Jul 2019 at 19:14, Michael Goerz <notifications@github.com>; wrote:. > Sorry.. got a little distracted, and wanted to check the contributing; > guidelines on what branch to make the pull request against. Currently it’s; > master. Is that ok? If yes, I’ll undraft it.; >; > Draft PRs are pretty new, and a very nice way to kick off the Continuous; > Integration. Like in this case, I wanted to check if any of the tests; > involve that message. As they don’t, this actually is ready to go.; >; > —; > You are receiving this because you were mentioned.; >; >; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/1049?email_source=notifications&email_token=ABVFIBCN7YWP77NBJVTZA2LQAXTJDA5CNFSM4IEC7VHKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2QRIRA#issuecomment-513872964>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ABVFIBHWIDKPIYAU6NMZXILQAXTJDANCNFSM4IEC7VHA>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1049#issuecomment-513873973:435,Continuous,Continuous,435,https://qutip.org,https://github.com/qutip/qutip/pull/1049#issuecomment-513873973,2,"['Continuous', 'Integrat']","['Continuous', 'Integration']"
Deployability,"Looks good in general. Will have a closer test later today. There are some unnecessary style changes to other parts of the code. Especially `'` to `""` was quite unnecessary... It is not massive but it makes it a bit hard to identify which is the essential change. How hard is it to revert the changes of `'` to `""`? Other styling updates like removing unused importations are fine.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2442#issuecomment-2145262488:330,update,updates,330,https://qutip.org,https://github.com/qutip/qutip/pull/2442#issuecomment-2145262488,1,['update'],['updates']
Deployability,"Looks like it's resolved now (unless documentation should be updated on how to use the --with-openmp option with the new build method. I'm not sure if end users should now be using wheels builds). Both `--config-setting=""--global-option=--with-openmp""` and `--config-setting=""--build-option=--with-openmp""` achieve a wheels (PEP517) build and `python -c ""import qutip; qutip.about()""` reports `OPENMP Installed: True` for both python3.10 and python 3.11. `--global-option` gets a warning message:; ```; $ python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /projects/misc/build/qutip/.pybuild/cpython3_3.10_qutip --config-setting=""--global-option=--with-openmp""; * Building wheel...; /usr/lib/python3/dist-packages/setuptools/build_meta.py:307: SetuptoolsDeprecationWarning: ; The arguments ['--with-openmp'] were given via `--global-option`.; Please use `--build-option` instead,; `--global-option` is reserved to flags like `--verbose` or `--quiet`.; ; warnings.warn(msg, SetuptoolsDeprecationWarning); ...; ```; So it's saying we should be using `--build-option` not `--global-option`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875#issuecomment-1368866726:61,update,updated,61,https://qutip.org,https://github.com/qutip/qutip/issues/1875#issuecomment-1368866726,2,"['Install', 'update']","['Installed', 'updated']"
Deployability,"Looks like there were breaking changes introduced in CVXPY 1.1 that changed some sort of matrix handling? I think the entirely of the `dnorm` function was written by Chris Granade about 5 years ago, and they're off at Microsoft now. As an immediate workaround, you can pin the version of CVXPY in conda to 1.0 (`conda install 'cvxpy=1.0'`) to fix it. Otherwise, probably there's a solution in swapping over a load of `*` to `@` in `qutip/semidefinite.py` and `qutip/metrics.py`, but that might be a bit nontrivial to solve. If you succeed, please do make a pull request. The reason that the ""simple"" cases work is that QuTiP detects them as known results and has fast paths avoiding `cvxpy`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1422#issuecomment-764772713:318,install,install,318,https://qutip.org,https://github.com/qutip/qutip/issues/1422#issuecomment-764772713,1,['install'],['install']
Deployability,"Made another quick change. We know from Prop. 3.44 of (Watrous, 2018) that the diamond norm of CPTP channel is 1. So I added a quick `if` statement that checks this. Also refactored `dnorm` so there's only one return statement to make code climate happy. Looks like it's unhappy with something else and maybe made the logic harder to follow. Please advise if you have a preference. Again, can't really run tests locally, so approving the CI pipeline would be fantastic.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2416#issuecomment-2098903691:441,pipeline,pipeline,441,https://qutip.org,https://github.com/qutip/qutip/pull/2416#issuecomment-2098903691,1,['pipeline'],['pipeline']
Deployability,"Many thanks! I solved it!; Now I have this WARNING:matplotlib.animation:MovieWriter avconv; unavailable. Trying to use pillow instead.; *Many thanks*. *P**arfait Atchadé*. *Tel Spain: 0034661205543*; *Tel Deutsch: 00491706659017*. On Wed, 9 Dec 2020 at 15:45, Jake Lishman <notifications@github.com> wrote:. > You'll find it easier installing from conda-forge, since we distribute; > binary releases there: see the installation guide; > <http://qutip.org/docs/latest/installation.html> here.; >; > If you want to install from source using pip, you need to configure your; > C++ development environment correctly - you'll probably need to enable the; > XCode command-line tools (see e.g. this; > <https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/>).; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1404#issuecomment-742038577>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AGKQN3YYS6ZYMTV4HEHFTELST7OW3ANCNFSM4UT7TWQQ>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404#issuecomment-742050650:332,install,installing,332,https://qutip.org,https://github.com/qutip/qutip/issues/1404#issuecomment-742050650,6,"['install', 'release']","['install', 'install-command-line-tools-mac-os-x', 'installation', 'installing', 'releases']"
Deployability,"Matplolib 3.9 (released 20h ago) is not imported properly in python 3.9:; https://github.com/qutip/qutip/actions/runs/9118045396/job/25070276189; ```; $ conda list; ...; loky 3.4.1 pypi_0 pypi; matplotlib 3.9.0 pypi_0 pypi; matplotlib-inline 0.1.7 pypi_0 pypi; ...; $ python -c ""import qutip; qutip.about()""; /home/runner/work/qutip/qutip/qutip/__init__.py:24: UserWarning: matplotlib not found: Graphics will not work.; ```; In master we no longer support python 3.9, so for the micro release I just set an upper limit on the matplotlib version in python 3.9 tests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2429#issuecomment-2116072715:15,release,released,15,https://qutip.org,https://github.com/qutip/qutip/pull/2429#issuecomment-2116072715,2,['release'],"['release', 'released']"
Deployability,Maybe we can change the base branch to master. Never did it before but it seems straightforward https://help.github.com/en/articles/changing-the-base-branch-of-a-pull-request and then update qip opt branch.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1025#issuecomment-505045224:184,update,update,184,https://qutip.org,https://github.com/qutip/qutip/pull/1025#issuecomment-505045224,1,['update'],['update']
Deployability,"Merged!; Thank you Alberto. If you want to continue contribute on it: add support for independent `L_m` and `L_p`.; Or update it for v5, presently the `dev.major` branch, we would really appreciate.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1660#issuecomment-929203460:119,update,update,119,https://qutip.org,https://github.com/qutip/qutip/pull/1660#issuecomment-929203460,1,['update'],['update']
Deployability,"Merged. > I changed the merge target from `qutip-5.0.X` to `master`. The `qutip-...` branches are for released version. Could you merge the current master branch, we added fixes for the new numpy, scipy version and it should help tests to passes. Merged my qutip-5.0.X to master",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2140#issuecomment-1610357858:102,release,released,102,https://qutip.org,https://github.com/qutip/qutip/pull/2140#issuecomment-1610357858,1,['release'],['released']
Deployability,"Merging since this looks straight forward and it would be good to have it for the 4.7.1 release, but would appreciate post-merge review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2043#issuecomment-1345288271:88,release,release,88,https://qutip.org,https://github.com/qutip/qutip/pull/2043#issuecomment-1345288271,1,['release'],['release']
Deployability,"Minimal script to reproduce the error that only uses numpy:; ```; # On a CPU with AVX512 extensions and numpy 1.21.2:; # (only tested on Ubuntu); # It works again on numpy 1.21.4 (and maybe 1.21.3 -- I did not check because 1.21.3 was not conda installable). import numpy as np. L = np.diag([1+0j, 1, 1, 1]); b = np.array([1+0j, 0, 0, 0]). # commenting out the line below makes everything work, with it solve returns nans.; np.exp(0); # breakpoint(). v = np.linalg.solve(L, b); np.testing.assert_allclose(v, b); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1694#issuecomment-967000449:245,install,installable,245,https://qutip.org,https://github.com/qutip/qutip/pull/1694#issuecomment-967000449,1,['install'],['installable']
Deployability,"Most of it is already in qutip or in development:; - We already have a progress bar.; - We have feedback to support solvers where parameters are changed depending on the current state. Those should not updated at each time-step, but included in the rhs. Otherwise, it will increase runtime and often the numerical error. We mostly use multistep method (Adams and BDF) which are particularly sensible to that.; - In my rework of `mcsolve`, I'm including the capacity to stop after a certain time, (already merged) and after the error bar gets under a certain tolerance. I have not though an equivalent for `me/sesolve` would be needed but it would be simple enough to add. We could have function that takes the expect value and tell the solver to stop or continue. ; - I was thinking of adding the ability to step through the evolution (draft in #1455):; ```; solver = MeSolver(H, c_ops, options=opt); solver.start(t0, rho0); for t in [t1,t2, ...]:; rho_t = solver.step(t, args=new_args); ```; Which would work like a `yield`:; ```; solver = MeSolver(H, c_ops, options=opt); for rho_t in solver.yield_run(rho0, tlist):; if needed:; solver.update_parameter(args=new_args); ```; I prefer using steps since you don't have do define `tlist` first, you could use it in a `while True` loop or interactively.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451:202,update,updated,202,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451,1,['update'],['updated']
Deployability,"Most recent macOS Big Sur version change the output of command. ```bash; $ sysctl -n machdep.cpu.brand_string; Apple M1; ```. The output does not contains information about the frequency of CPU. To fix this problem, I use command . ```bash; $ sysctl hw.cpufrequency; hw.cpufrequency: 2400000000; ``` . The updated code should be able to get cpu frequency correctly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1401#issuecomment-751540091:306,update,updated,306,https://qutip.org,https://github.com/qutip/qutip/pull/1401#issuecomment-751540091,1,['update'],['updated']
Deployability,"Move compiler to a separate package. The new code climate issues are all from there. After #1074 get merged, one has to update all the `qutip.qip.gates` to `qutip.qip.operations` in this PR. Everything else should be fine.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1155#issuecomment-578532075:120,update,update,120,https://qutip.org,https://github.com/qutip/qutip/pull/1155#issuecomment-578532075,1,['update'],['update']
Deployability,"My current understanding is that if NumPy is installed but not Cython, then when `egg-info` is called, NumPy distutils will happily follow `add_subpackage` to pull in `qutip/cy/setup.py`, then choke on the missing Cython dependency. On the other hand, if both are missing, the new fallbacks introduced in this PR will be tripped, such that the `add_subpackage` call will not happen, and `qutip/cy/setup.py` will not get called. I'll readily admit that NumPy but not Cython is an edge case, but it's one that we can probably deal with by trying to import Cython at the top and letting the `ImportError` branch us onto the fallback path. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/489#issuecomment-225778916:45,install,installed,45,https://qutip.org,https://github.com/qutip/qutip/pull/489#issuecomment-225778916,1,['install'],['installed']
Deployability,"My guess is it is a side effect of using the step function time-dependence. Instead, try a tanh, or other continuous and differentiable approximation, and see if that works.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/771#issuecomment-338078907:106,continuous,continuous,106,https://qutip.org,https://github.com/qutip/qutip/issues/771#issuecomment-338078907,1,['continuous'],['continuous']
Deployability,"Nevermind, sorry I was being stupid. Changed the integrator tolerance and it work :/.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1492#issuecomment-815315471:49,integrat,integrator,49,https://qutip.org,https://github.com/qutip/qutip/issues/1492#issuecomment-815315471,1,['integrat'],['integrator']
Deployability,"New information:; I ran the same script on another PC and it reproduced the same result as 3 years ago. Also, I didn't encounter the same importing problem as reported in #2500 .; I am reproducing the qutip.about() output below for this other PC:. ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.5; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: 3.5.1; Python Version: 3.9.9; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\ychao\Anaconda3\envs\qutip-env\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2501#issuecomment-2249532978:985,Install,Installed,985,https://qutip.org,https://github.com/qutip/qutip/issues/2501#issuecomment-2249532978,2,['Install'],"['Installation', 'Installed']"
Deployability,"Nice, this is great. Perhaps someone with working conda environment for windows could build binary qutip packages for windows using conda-recipes/qutip and upload to binstar (now anaconda cloud?), for example here:. https://anaconda.org/jrjohansson/qutip/files. It would be nice with binary builds for all platform there (or rather, we should create a new official qutip project account on binstar), so that it would be possible to install qutip on any platform in the same way by specifying the binstar channel. . Since conda is taking over the scientific python community with storm, I think we should even consider discontinuing debian, macports, brew as installation option and only promote conda and pypi. As it is now we have too many installation options, and I think it confuses users more than it helps.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-150410961:432,install,install,432,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-150410961,3,['install'],"['install', 'installation']"
Deployability,Nice. Also update 'gate_expand_3toN' to take an argument 'controls' instead of 'control1' and 'control2'. The unit tests in 'qutip.tests.test_gate.py' also need to be updated.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/136#issuecomment-44073618:11,update,update,11,https://qutip.org,https://github.com/qutip/qutip/pull/136#issuecomment-44073618,2,['update'],"['update', 'updated']"
Deployability,No errors from the following:; ```; try:; from qutip import *; from qutip.qip import *; except ImportError:; !pip install --quiet qutip--4.7.5 qutip-qip; from qutip import *; from qutip.qip import *; ```,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2334#issuecomment-1962951064:114,install,install,114,https://qutip.org,https://github.com/qutip/qutip/issues/2334#issuecomment-1962951064,1,['install'],['install']
Deployability,"No worries! Re-merging pull requests with master is frequently necessary, no problem at all. Thanks for the updates! It looks all fine as far as I can tell without running tests. Is this merge ready from your point of view?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/294#issuecomment-67725094:108,update,updates,108,https://qutip.org,https://github.com/qutip/qutip/pull/294#issuecomment-67725094,1,['update'],['updates']
Deployability,"No worries, I just wanted to get it merged so that I could pull it into the qutip-3.1.X branch and start preparing release files.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/297#issuecomment-68322113:115,release,release,115,https://qutip.org,https://github.com/qutip/qutip/pull/297#issuecomment-68322113,1,['release'],['release']
Deployability,"No, I don't know what exactly caused this. All operation are through `Qobj`. Maybe `tidyup` have some effect.; But testing for a pure `0` with floating number is never a good idea. Which test do you think we should update. `test_quantumcircuit` is testing what it should.; `test_measurement` tests case which have `0` probabilities with `np.testing.assert_almost_equal`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1656#issuecomment-917054484:215,update,update,215,https://qutip.org,https://github.com/qutip/qutip/pull/1656#issuecomment-917054484,1,['update'],['update']
Deployability,"No, I guess we never did, at least not on `master`. I've updated this PR to do both.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1414#issuecomment-754585483:57,update,updated,57,https://qutip.org,https://github.com/qutip/qutip/pull/1414#issuecomment-754585483,1,['update'],['updated']
Deployability,"No, `dtype` should always be respected, even for jax.; So the default need to be changed.; One options would be to set `dtype=None` for the default and then if it's `None` and sparse, then use dense. (+ update the docstring and tests.); Another options would be to remove the `dtype` parameter and replace it with `sparse` like `eigenenergies`. But I would like to keep support for both for a while has we should no introduce breaking change outside of major release which won't come anytime soon (detect if the user input a dtype and warn it in that case, but still give him his intended behaviour.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2484#issuecomment-2231753388:203,update,update,203,https://qutip.org,https://github.com/qutip/qutip/pull/2484#issuecomment-2231753388,2,"['release', 'update']","['release', 'update']"
Deployability,"No, if `test` is used for the branch name, it will still deploy to testpypi. Both `deploy to ...` jobs were cut and pasted with only 2 lines changed so I merged them so we don't forget to update one without the other. I also added more feedback to the job that would show uploaded files even for a dry run.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2477#issuecomment-2199969342:57,deploy,deploy,57,https://qutip.org,https://github.com/qutip/qutip/pull/2477#issuecomment-2199969342,3,"['deploy', 'update']","['deploy', 'update']"
Deployability,"No, it was deliberate. I added these in as part of the 4.0 release. They need to be distributed with the pip installer, otherwise it cannot build. At least that is why I added them in.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/653#issuecomment-283903360:59,release,release,59,https://qutip.org,https://github.com/qutip/qutip/pull/653#issuecomment-283903360,2,"['install', 'release']","['installer', 'release']"
Deployability,"No, see this commit; https://github.com/numpy/numpy/pull/5597; which enabled it.; Hence, it will be a problem for future numpy versions as well. Sure you can do whatever you want with the options, or you could do a; double option,. opts = get_info('lapack_opt',0); opts2 = get_info('qutip',0); opts.update(opts2). or something alike, that should be your decision.; The above would enable a specific [qutip] block in the site.cfg which; localizes settings ;). 2015-11-08 22:06 GMT+01:00 Chris Granade notifications@github.com:. > Does this change break when using extra_link_args on NumPy ≤ 0.10.1?; > Also, should extra_link_args here be allowed to override site.cfg? It; > might be good to do a newblas.update() to allow users to explicitly pass; > compile args for qutraj_run that differ from site.cfg.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/qutip/qutip/issues/392#issuecomment-154871830. ## . Kind regards Nick",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/392#issuecomment-154875854:299,update,update,299,https://qutip.org,https://github.com/qutip/qutip/issues/392#issuecomment-154875854,2,['update'],['update']
Deployability,"No, this PR include #990. ; Once This is merged, only the updated citation (Phys. Rev. A 91, 012118, (2015).) will be left to merge from #990.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/991#issuecomment-498737855:58,update,updated,58,https://qutip.org,https://github.com/qutip/qutip/pull/991#issuecomment-498737855,1,['update'],['updated']
Deployability,"No, we usually have no problem on linux. How did you install it? `pip`, `python setup.py install`? Did you have a prior installation? Some time, if you install qutip without openmp but installed it previously with openmp there are errors.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1205#issuecomment-600635973:53,install,install,53,https://qutip.org,https://github.com/qutip/qutip/issues/1205#issuecomment-600635973,5,['install'],"['install', 'installation', 'installed']"
Deployability,"Not really much to add, except that if it were possible to try a fresh; install of anaconda, and maybe python 3.6, but that is just guessing.; Probably an install from source is better on linux any way.; The conda packages were mainly developed for users with issues compiling; (i.e. on Windows). Though things have moved on so much since we started; trying that as a solution. On 26 March 2017 at 02:01, Paul Nation <notifications@github.com> wrote:. > Oh sorry, I thought you were reporting the sys gcc, not the conda one.; >; > Conda-forge and QuTiP are tested heavily against Ubuntu 14.04, so if any; > platform works, it should be that one.; >; > As I originally suspected, the problem comes from the Cython code.; > Specifically for the sparse matrix math. The fact that you can build it; > yourself suggests a binary incompatibility. However, again, we test; > against 14.04, so I am hard pressed to think about what the issue could be.; > gdb might be able to hunt down where the dump occurs.; >; > On Mar 25, 2017 18:27, ""Michael Goerz"" <notifications@github.com> wrote:; >; > Since it's the python from the conda package, I'm assuming that's because; > Continuum created the linux package on a Redhat system. GCC is identified; > like that on both of the workstations. But yeah, my guess would be that; > there is some shared library that's compiled in a way that's incompatible; > with the rest of the system. Is there any linux utility that would allow to; > determine which library is being accessed at the moment of the crash? Some; > invocation of ldd?; >; > —; > You are receiving this because you commented.; >; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/674#issuecomment-289249308>, or; > mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ABMPqT0F1WSzbd-; > hOyso9XQM0K5ldiiwks5rpbEBgaJpZM4MpI4Z>; > .; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly,",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-289852411:72,install,install,72,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-289852411,2,['install'],['install']
Deployability,Not sure if the failure on windows is related to the numpy release or not. It's a different issue so I will merge this and look at it another time.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2510#issuecomment-2296970652:59,release,release,59,https://qutip.org,https://github.com/qutip/qutip/pull/2510#issuecomment-2296970652,1,['release'],['release']
Deployability,"Not sure. Conda seems to be complaining about how the update is called. Maybe something has changed in conda. Need to check. . > On Nov 8, 2015, at 14:08, Chris Granade notifications@github.com wrote:; > ; > This looks like a good change. Not sure why it would cause Travis to not see conda at all, though, that's bizarre. Any ideas?; > ; > —; > Reply to this email directly or view it on GitHub.; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/393#issuecomment-154874510:54,update,update,54,https://qutip.org,https://github.com/qutip/qutip/pull/393#issuecomment-154874510,1,['update'],['update']
Deployability,Note that I have removed my previous qutip installation and did a fresh install to verify.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/269#issuecomment-65179998:43,install,installation,43,https://qutip.org,https://github.com/qutip/qutip/issues/269#issuecomment-65179998,2,['install'],"['install', 'installation']"
Deployability,"Note that the same holds for Cython:. ``` zsh; % pip install qutip; Collecting qutip; Using cached qutip-3.1.0.tar.gz; Complete output from command python setup.py egg_info:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/tmp/pip-build-hg437fn6/qutip/setup.py"", line 159, in <module>; configuration=configuration; File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/core.py"", line 135, in setup; config = configuration(); File ""/tmp/pip-build-hg437fn6/qutip/setup.py"", line 135, in configuration; config.add_subpackage('qutip'); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 1002, in add_subpackage; caller_level = 2); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 971, in get_subpackage; caller_level = caller_level + 1); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 908, in _get_configuration_from_setup_py; config = setup_module.configuration(*args); File ""qutip/setup.py"", line 8, in configuration; config.add_subpackage('cy'); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 1002, in add_subpackage; caller_level = 2); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 971, in get_subpackage; caller_level = caller_level + 1); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 883, in _get_configuration_from_setup_py; ('.py', 'U', 1)); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/imp.py"", line 234, in load_module; return load_source(name, filename, file); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/imp.py"", line 172, in load_source; module = _load(spec); File",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/426#issuecomment-183253786:53,install,install,53,https://qutip.org,https://github.com/qutip/qutip/issues/426#issuecomment-183253786,5,"['configurat', 'install']","['configuration', 'install']"
Deployability,"Note to self: After discussion with @Ericgig, I'm going to remove the deprecation warning for now since qutip-lattice is not yet updated and published to PyPI. qutip-lattice is still where future development should happen.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1819#issuecomment-1059196652:129,update,updated,129,https://qutip.org,https://github.com/qutip/qutip/pull/1819#issuecomment-1059196652,1,['update'],['updated']
Deployability,"Note: in theory you can install QuTiP from the test PyPI server right now by doing; ```; pip install -i https://test.pypi.org/simple qutip-jakelishman; ```; (that's just the name - you still do `import qutip`) but since it's on the ""wrong"" server, you first have to manually install `numpy` and `scipy`. When it's released properly on PyPI it'll handle the dependencies correctly - this is only an artifact of being on the testing server. Running that command will install a binary version with no compilation, and should work on any (reasonable) Linux machine, Mac (possibly not M1 chips) and Windows. It's possible you may get an error about `ndarray size changed ... this may indicate binary incompatibility` - if so, either force `numpy` up to the new 1.20 or down to 1.19 (whichever one you don't have). This was a breaking change in numpy 1.20. Per my reading of the release notes, it won't be an issue provided in the future we always build against `numpy>=1.20` (even when using lower `numpy` at runtime) because the new version updates a certain C-API macro to take into account the possibility of runtime variability. I have pushed an additional change to the build requirements to ensure this always happens. This has another knock-on effect: numpy 1.20 only supports Python 3.7+ (released June 2017). Currently, officially QuTiP supports Python 3.6, but I think it's reasonable to follow numpy's footsteps and **drop support for python 3.6 from qutip 5.0**. It's offset by gaining support for 3.9. (Apologies for all the force-pushing - whenever I want to re-run a test release on my own branch I have to temporarily add an extra commit to swap to the testing server, then force-push a rewind of this PR's branch.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519:24,install,install,24,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519,9,"['install', 'release', 'update']","['install', 'release', 'released', 'updates']"
Deployability,Now I don't understand what is the problem with the Travis test.; UPDATE: The problem is somehow self cured.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/529#issuecomment-243373614:66,UPDATE,UPDATE,66,https://qutip.org,https://github.com/qutip/qutip/pull/529#issuecomment-243373614,1,['UPDATE'],['UPDATE']
Deployability,Now solved by @Ericgig in release 4.4.0.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/844#issuecomment-510885355:26,release,release,26,https://qutip.org,https://github.com/qutip/qutip/issues/844#issuecomment-510885355,1,['release'],['release']
Deployability,"Numpy interprets the Python base type `complex` as equal to `np.complex128` when passed as a dtype. Personally I think `np.complex128` is much clearer (since it specifies the size in the name too), but I wouldn't worry too much about changing everything everywhere. `cqobjevo.pyx` in particular is going to be nearly entirely rewritten in the next major QuTiP release anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1451#issuecomment-785001605:360,release,release,360,https://qutip.org,https://github.com/qutip/qutip/issues/1451#issuecomment-785001605,1,['release'],['release']
Deployability,Numpy is maintaining a list of project versions that support numpy 2 -- https://github.com/numpy/numpy/issues/26191. They're waiting of downstream packages to be ready before release. We could add ourselves there if we liked.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2421#issuecomment-2108725817:175,release,release,175,https://qutip.org,https://github.com/qutip/qutip/pull/2421#issuecomment-2108725817,1,['release'],['release']
Deployability,Numpy seems to add it this way - https://github.com/numpy/numpy/blob/master/MANIFEST.in. If it is okay then I can change the MANIFEST files and continue the 4.3 release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/894#issuecomment-403686597:161,release,release,161,https://qutip.org,https://github.com/qutip/qutip/issues/894#issuecomment-403686597,1,['release'],['release']
Deployability,OK that seemed to work. I'm curious how these changes might affect https://github.com/qutip/continuous-benchmark,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/76#issuecomment-36084634:92,continuous,continuous-benchmark,92,https://qutip.org,https://github.com/qutip/qutip/pull/76#issuecomment-36084634,1,['continuous'],['continuous-benchmark']
Deployability,"OK, I see. If you are refactoring the parallelization of the mcsolve (which is currently tightly integrated in the mc code and quite messy) I would strongly recommend and lobby for using the new parallel_map API, and do away with all multiprocessing code in the mcsolve module and not using the callback function. I think this could make the mcsolve module vastly more readable and easier to maintain.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-65020826:97,integrat,integrated,97,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-65020826,1,['integrat'],['integrated']
Deployability,"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. If you change your mind, just re-open this PR and I'll resolve any conflicts on it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085#issuecomment-1426693519:40,release,release,40,https://qutip.org,https://github.com/qutip/qutip/pull/2085#issuecomment-1426693519,2,"['release', 'update']","['release', 'updates']"
Deployability,"OK, I'll have a look at it. Is there any specific reason for not making more frequent (and with less features) releases?. I'm closing the issue as it should be fixed in latest dev branch. I will reopen if I still experience the issue after updating.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/542#issuecomment-249343387:111,release,releases,111,https://qutip.org,https://github.com/qutip/qutip/issues/542#issuecomment-249343387,1,['release'],['releases']
Deployability,"Of course, Python does in general allow users to override whatever behaviour we choose - a user can always define `Qobj.__array__` or any of the others themselves, which will monkey-patch QuTiP into doing what that user wants. Similarly, we _could_ have `Qobj.__array__` defined conditionally on a global QuTiP option; pydata/sparse takes this approach, although theirs is a slightly different case semantically because they are trying to make sparse equivalents of `ndarray`, rather than sparse matrices.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-773997386:182,patch,patch,182,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-773997386,1,['patch'],['patch']
Deployability,"Oh man, yeah, that's embarrassing. Yeah, that's exactly what I _meant_ to put. I dunno how I screwed up the patch that badly!. I'll rebase these commits onto `master` and squash them into one or two nice modular commits. I think a little bit of the development here is worth preserving in the commit history for if someone looks at it in the future (there's no guarantee that this PR discussion will _always_ be up, but commit messages are forever). I'll force-push to this branch, so you'll have to force-pull a copy (or just delete your copy of this branch). Not the best practice, but better for keeping the `master` commit history neat.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605528198:108,patch,patch,108,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605528198,1,['patch'],['patch']
Deployability,Oh ok. I'll wait for the next update to be pushed on pip then I think. I can workaround this in the meantime.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/542#issuecomment-249287554:30,update,update,30,https://qutip.org,https://github.com/qutip/qutip/issues/542#issuecomment-249287554,1,['update'],['update']
Deployability,"Oh, damn, you're right, I forgot to run install. My bad :)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/236#issuecomment-56970513:40,install,install,40,https://qutip.org,https://github.com/qutip/qutip/issues/236#issuecomment-56970513,1,['install'],['install']
Deployability,"Oh, don't worry about rushing - there's no hurry. We don't expect to release 4.7 for _at least_ a month, probably two. I was just mentioning it now so you'd have time if you were still interested.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1469#issuecomment-853281689:69,release,release,69,https://qutip.org,https://github.com/qutip/qutip/pull/1469#issuecomment-853281689,1,['release'],['release']
Deployability,"Oh, you're right Simon - I think I was just thinking about conda-forge, where we have the pinning files. The build process may need updating a bit now - I pinned cibuildwheel to a pre-2 version, but since I wrote that, cibuildwheel 2 was released, and should generally work fine. You may want to look at things like `CIBW_DEPENDENCY_VERSIONS` to set constraints on the versions of Numpy and Scipy used in the build to maintain compatibility perhaps?. @drew-parsons: will Debian's version requirements recognise that a version of QuTiP built against Numpy 1.20 can no longer support Numpys before 1.20? Anything that compiles C extensions against Numpy will have that potential issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1720#issuecomment-976973209:238,release,released,238,https://qutip.org,https://github.com/qutip/qutip/issues/1720#issuecomment-976973209,1,['release'],['released']
Deployability,"Ok great! Thanks, I was worried I screwed up the install somehow",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180#issuecomment-1601854467:49,install,install,49,https://qutip.org,https://github.com/qutip/qutip/issues/2180#issuecomment-1601854467,1,['install'],['install']
Deployability,"Ok so if we have to start we do away with all the * imports first except. ```from qutip.qobj import *```. then we can remove the numpy and scipy checks but numpy is still used to setup pyximport in . ```; # Setup pyximport ; import pyximport; os.environ['CFLAGS'] = '-O2 -w -ffast-math'; pyximport.install(setup_args={'include_dirs': [numpy.get_include()]}); del pyximport; ```. Then we can move the section regarding multiprocessing to some appropiate place. Currently it is used in the following files. Can we put the multiprocessing stuff in a file called `multiprocessing_config.py` and run it to get the settings in `__init__` at all the places where we need multiprocessing.; ```; /Users/shahnawaz/dev/qutip/qutip/__init__.py:; 33 from __future__ import division, print_function, absolute_import; 34 import os; 35: # Fix the multiprocessing issue with NumPy compiled against OPENBLAS; 36 if 'OPENBLAS_MAIN_FREE' not in os.environ:; 37 os.environ['OPENBLAS_MAIN_FREE'] = '1'; ..; 149 # cpu/process configuration; 150 #; 151: import multiprocessing; 152 ; 153 # Check if environ flag for qutip processes is set; ...; 164 qutip.settings.num_cpus = info['cpus']; 165 else:; 166: qutip.settings.num_cpus = multiprocessing.cpu_count(); 167 ; 168 ; ...; 270 # Clean name space; 271 #; 272: del os, sys, numpy, scipy, multiprocessing. /Users/shahnawaz/dev/qutip/qutip/fortran/mcsolve_f90.py:; 83 serial : boolean; 84 If True (default is False) the solver will not make use of the; 85: multiprocessing module, and simply run in serial.; 86 ptrace_sel: list; 87 This optional argument specifies a list of components to keep when; ..; 226 ; 227 def parallel(self):; 228: from multiprocessing import Process, Queue, JoinableQueue; 229 ; 230 if debug:. /Users/shahnawaz/dev/qutip/qutip/hardware_info.py:; 36 import os; 37 import sys; 38: import multiprocessing; 39 ; 40 def _mac_hardware_info():; ..; 91 ncpus += int(cpu.Properties_['NumberOfCores'].Value); 92 except:; 93: ncpus = int(multiprocessing.cpu_co",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-270871889:298,install,install,298,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-270871889,1,['install'],['install']
Deployability,"Ok, I added the tests. Took me a little moment, first time I'm doing this. Are these sufficient or should I add something else?; It's not rigorously testing everything but for sure the things that I adjusted. I also stumbled upon a deprecation warning, so I updated the syntax for the `colormaps`. With the tests for `HarmonicOscillatorWaveFunction` and `HarmonicOscillatorProbabilityFunction` I got the warning `ComplexWarning: Casting complex values to real discards the imaginary part` in two instances. Not sure how I should proceed, so I wanted to ask. Should I just ignore it and keep it like it was or search for where exactly this happens and adjust it so it explicitly calls np.real(), or maybe np.abs()? Thanks a lot for the help!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2548#issuecomment-2420588426:258,update,updated,258,https://qutip.org,https://github.com/qutip/qutip/pull/2548#issuecomment-2420588426,1,['update'],['updated']
Deployability,"Ok, I'm going to merge this now because I'm gearing up for the 4.6 release and I want to include this bugfix.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1478#issuecomment-816312032:67,release,release,67,https://qutip.org,https://github.com/qutip/qutip/pull/1478#issuecomment-816312032,1,['release'],['release']
Deployability,"Ok, I'm not sure that enforcing numpy >= 1.20 at compile time is sufficient. I don't know if it's a Cython thing, a numpy thing or an us thing, but I'll figure it out later when I've got more time. The distribution changes here are still good here, and if it ends up that for the initial release of 5.0 we only support numpy 1.20+, that's unfortunate but not really the end of the world.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-770477015:288,release,release,288,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-770477015,1,['release'],['release']
Deployability,"Ok, I've reverted to using the PR number for the news fragment file names, and updated the contributing/PR instructions. I also looked into why the `towncrier-check` test is failing. It looks like towncrier is not finding the `pyproject.toml` config file because it is not running in the root directory. I added a `working-directory: /` specification to the action step to address this, hopefully this should fix it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1927#issuecomment-1159608537:79,update,updated,79,https://qutip.org,https://github.com/qutip/qutip/pull/1927#issuecomment-1159608537,1,['update'],['updated']
Deployability,"Ok, I've updated all PR links. It was no harder than basically running `sed s_#_qutip/qutip-doc#_g` on the commit messages - I checked that nothing untoward got changed as well. I've also updated the PR template - thanks Eric, I never would have thought of that (not sure how I missed it while using `grep` though!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513#issuecomment-829953403:9,update,updated,9,https://qutip.org,https://github.com/qutip/qutip/pull/1513#issuecomment-829953403,2,['update'],['updated']
Deployability,"Ok, great thanks.; I will start work on the release. On 23 February 2017 at 17:34, Paul Nation <notifications@github.com> wrote:. > Ready.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/649#issuecomment-282063195>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7Z-0RBHwqj9EUPTc_uCRxOHvw8Hdks5rfcM6gaJpZM4MI5S0>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/649#issuecomment-282065212:44,release,release,44,https://qutip.org,https://github.com/qutip/qutip/issues/649#issuecomment-282065212,1,['release'],['release']
Deployability,"Ok, it seems that for some reason the 'mkl_info' key from the NumPy config info is no longer available in some miniconda installs. This took forever to find as I could not reproduce the error at home when using a fresh miniconda install. Now I look in the libs as well for BLAS info.; - Also removed matplotlib from the requirements as it is not a requirement. At least not at present.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/547#issuecomment-252450097:121,install,installs,121,https://qutip.org,https://github.com/qutip/qutip/pull/547#issuecomment-252450097,2,['install'],"['install', 'installs']"
Deployability,"Ok, it turns out I got the numpy release notes the wrong way round; we have to build our binaries with `1.16.6 <= numpy < 1.20` to maintain ABI compatibility no matter the numpy version. I have updated the compiler infrastructure to take this into account - this is in some ways a temporary restriction until two or three years in the future when we can drop support for all numpy versions less than 1.20. This is ready for final review. If you're fast, you can also try installing from the test PyPI server to see if the wheels work for you. While it's on the temporary server, you need to install `numpy` and `scipy` manually yourself (as they don't exist on test.pypi.org), but pip will do the dependencies correctly for you once it's publishing to the full repo.; ```bash; conda create -n pypi-test; conda install python pip numpy scipy; pip install -i https://test.pypi.org/simple qutip-jakelishman; python -c 'import qutip; qutip.about()'; ```. @hodgestar, @nathanshammah: perhaps you could just glance over this again and make sure everything looks right to you? Simon, I know you already looked over it once, so if you've not got time again, no problem - barely anything has changed since you last saw it. Nathan: in theory once we're in a position where deployments push to PyPI I think I can write an action for qutip/qutip.github.io to push a commit updating the website with the new information too. However, with the docs currently using a completely separate build process in a different repo, they can't really be triggered by a release here. I wrote this PR against `dev.major`, but I suppose in theory I could backport it to the 4.x branch if that's absolutely required. I think some parts of the setup changed for `dev.major`, which is why I didn't originally try to make it to the current version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158:33,release,release,33,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158,8,"['deploy', 'install', 'release', 'update']","['deployments', 'install', 'installing', 'release', 'updated']"
Deployability,"Ok, let's drop the tensor thing then. I'll make a new patch which includes the time-dependence syntax that you suggest, indeed a more convenient way. Do you think it would be necessary to perform linear interpolation as I did or would just rounding to the nearest point be ok. It looks like I'll need to add code to sesolve and mesolve, and these files seem to have some duplicate code already, do you think it would be useful to make a new file with some shared helper functions (mostly for generating the cython code)?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-44796169:54,patch,patch,54,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-44796169,1,['patch'],['patch']
Deployability,"Ok, so I did some benchmarking at https://nbviewer.ipython.org/gist/goerz/34af142b78d7e344417d838bbea78aaf/06_example_3states_benchmark.ipynb ([gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf)), based on [one of the example notebooks from the Krotov package](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). I'll be referring to the numbered cells in that notebook in the discussion below. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:. > I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. That's certainly worth trying: when calling `mesolve` in a loop over the time grid, I did indeed see a significant speedup when summing the Lindbladian into a single constant `Qobj`, see `In [21]` vs `In [24]`. On the other hand, it doesn't always give a speedup: in the low-level [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) it actually makes the propagation slower, see `In [29]` vs `In [32]`. It's a bit surprising, but then, as you say:. > [...] This isn't guaranteed, because it involves copying rather more data _before_ the call. So that's ok. > Would something like this work for you? [...]; >; > By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately. To be clear, I personally never use collapse operators (and the Krotov documentation heavily discourages it). Inst",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:962,integrat,integrator,962,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Deployability,"Ok, so I tweaked the template and configuration for towncrier so that it doesn't render an issue/PR number next to each changelog entry. This frees you from requiring an issue / PR number when writing a news fragment. ; @hodgestar yes I think with this configuration you can just use any unique string for the filename.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1927#issuecomment-1156932155:34,configurat,configuration,34,https://qutip.org,https://github.com/qutip/qutip/pull/1927#issuecomment-1156932155,2,['configurat'],['configuration']
Deployability,"Ok, something must have happened here, `read_qasm` is not imported at all. It is hard to debug `from ... import *`. I don't think our recent release of `qutip==4.7.5` changed anything on the importation behaviour. It was just bug fix. You could try `from qutip.qip.qasm import read_qasm`. This should work as expected and will show the detailed reason if not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2334#issuecomment-1962960400:141,release,release,141,https://qutip.org,https://github.com/qutip/qutip/issues/2334#issuecomment-1962960400,1,['release'],['release']
Deployability,"Ok, the issue seems to be rooted in Scipy's `block_diag` function which was fixed in 0.19.; https://github.com/scipy/scipy/issues/4908. I attempted to bump up the scipy and cython version and tested this locally. All tests pass now. I will try the same with conda. ```; QuTiP Version: 4.3.0.dev0+2ac36add; Numpy Version: 1.14.4; Scipy Version: 0.19.1; Cython Version: 0.28.3; Matplotlib Version: None; Python Version: 2.7.15; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /Users/shahnawaz/dev/qutip/qutip; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/861#issuecomment-396122238:473,Install,Installed,473,https://qutip.org,https://github.com/qutip/qutip/pull/861#issuecomment-396122238,2,['Install'],"['Installation', 'Installed']"
Deployability,"On a subsequent run, the build on Travis CI failed. . The two runs were prompted by the same branch, minutes apart, but differed for the version of Python that Travis CI picked up (3.72 working, 3.73 failing) and some minor decimal difference in release version of one dependency (Cython if I remember correctly). . Making a branch with a special .travis.yml file with additional osx_image instructions for the Mac OS build might help to sort this out. Two days ago Travis switched to Python 3 as default installation language and unexpectedly yesterday I noticed that some of the failing builds on previous branches were successful. We are always building with Python 3, as it says in the change log, I am just wondering if some dependency was doing something incorrectly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/961#issuecomment-484739775:246,release,release,246,https://qutip.org,https://github.com/qutip/qutip/pull/961#issuecomment-484739775,2,"['install', 'release']","['installation', 'release']"
Deployability,"On mac os, try brew install imagemagick",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/702#issuecomment-435592809:20,install,install,20,https://qutip.org,https://github.com/qutip/qutip/issues/702#issuecomment-435592809,1,['install'],['install']
Deployability,"Once installed, running; ```; import qutip.testing as qt; qt.run(); ```. fails:; ```; Python Version: 2.7.15; Traceback (most recent call last):; File ""t.py"", line 2, in <module>; qt.run(); File ""/usr/local/lib/python2.7/site-packages/qutip/testing.py"", line 40, in run; about(); File ""/usr/local/lib/python2.7/site-packages/qutip/about.py"", line 77, in about; print(""Number of CPUs: %s"" % hardware_info()['cpus']); KeyError: 'cpus'; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/891#issuecomment-403717297:5,install,installed,5,https://qutip.org,https://github.com/qutip/qutip/issues/891#issuecomment-403717297,1,['install'],['installed']
Deployability,"One can also think about moving the fortran solver to its own installer as a qutip add-on. With the recent performance gains of the Python based solver, this change is not so bad in my opinion.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/283#issuecomment-66561013:62,install,installer,62,https://qutip.org,https://github.com/qutip/qutip/issues/283#issuecomment-66561013,1,['install'],['installer']
Deployability,"Other than doing the changes you suggested, I updated [the description](https://github.com/qutip/qutip/pull/2170#issue-1737987577) and deleted all deprecated functions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2170#issuecomment-1620368190:46,update,updated,46,https://qutip.org,https://github.com/qutip/qutip/pull/2170#issuecomment-1620368190,1,['update'],['updated']
Deployability,"Our diamond norm calculation in [QPtomographer](https://github.com/Tomographer/QPtomographer/) is written in C++ in the file [QPtomographer/cxx/diamond_norm_scs.h](https://github.com/Tomographer/QPtomographer/blob/master/cxx/diamond_norm_scs.h) (see [QPtomographer/test/test_diamond_norm.cxx](https://github.com/Tomographer/QPtomographer/blob/master/test/test_diamond_norm.cxx) for an example usage) and uses the C interface of [the SCS solver](https://github.com/cvxgrp/scs). The way it stands, it also depends on [Eigen C++ header library](http://eigen.tuxfamily.org/), but it should be easy to remove this dependency as it is only used to specify the input matrices. Other minor dependencies are easily removed. I'm not sure what underlying mechanism you use in QuTiP, but it should be relatively straightforward to reformat the whole class into a C implementation with only SCS as a dependency. Unfortunately the python `scs` package does not install C headers, so that dependency might turn out to be something to worry about. Perhaps SCS itself can be integrated in the QuTiP source?. I'd be happy if our code is useful for you, and let me know if you'd like any clarifications about our implementation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/874#issuecomment-494716341:947,install,install,947,https://qutip.org,https://github.com/qutip/qutip/issues/874#issuecomment-494716341,2,"['install', 'integrat']","['install', 'integrated']"
Deployability,"Out of interest, I had a look around. BSD-3 clause and GPL-v2 are ""compatible"", but only in the sense that the resultant _must_ be GPL-licensed (see [a bit of discussion here](https://opensource.stackexchange.com/questions/7180/can-i-combine-gplv2-and-bsd-3-clause-code-and-keep-the-bsd-permissions)). That probably means that we're technically not following the rules at the moment. That said, my understanding is that licences are just a general statement of rights that are given to everyone. If we get explicit permission from the creator of the library to include it in this library with a rider that this particular section cannot be copied or used in a public project except under GPL-v2 terms, then I think we'd be fine (except that might make it super annoying for downstream projects...). In general I think the primary reason that we can't release GPL'd code under a BSD licence is that the BSD licence doesn't have the restriction that source code must be made available. I _think_, however, that since the circuit drawing isn't an integral part of QuTiP, it would be allowed for us to distribute this portion as a stand-alone extension to QuTiP which is individually GPL'd, even if we couldn't get a relicensed version of the LaTeX package. It's always fine for private use to use GPL'd stuff.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1187#issuecomment-607176262:851,release,release,851,https://qutip.org,https://github.com/qutip/qutip/pull/1187#issuecomment-607176262,1,['release'],['release']
Deployability,"Passes fine for me, patched onto 4.6.2.; Running tests locally,; ```; ...; tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 79%]; ...; tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]. === 1910 passed, 20 skipped, 67 deselected, 53 warnings in 472.83s (0:07:52) ===; autopkgtest [16:47:24]: test test-qutip: -----------------------]; autopkgtest [16:47:24]: test test-qutip: - - - - - - - - - - results - - - - - - - - - -; test-qutip PASS; autopkgtest [16:47:24]: @@@@@@@@@@@@@@@@@@@@ summary; test-qutip PASS; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1648#issuecomment-909311635:20,patch,patched,20,https://qutip.org,https://github.com/qutip/qutip/pull/1648#issuecomment-909311635,1,['patch'],['patched']
Deployability,"Perhaps a bit more computationally efficient solution (although, it probably wouldn't make more than a marginal difference, at any reasonable order of number of indices, at which insertion is to be performed): insert at an index `i + k` , where `i` is the original index as per the `index` list, and `k` is the number of insertions performed so far, as part of the insertion loop. I'll raise a PR with the proposed fix. **Update:** The PR in question is https://github.com/qutip/qutip/pull/1892.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1497#issuecomment-1123990033:422,Update,Update,422,https://qutip.org,https://github.com/qutip/qutip/issues/1497#issuecomment-1123990033,1,['Update'],['Update']
Deployability,"Perhaps at the info level. At least that is my naive thinking. However, I think maybe the exception that you have in the dnorm is good enough. Then the user can install the required module if they want to use that function. Regardless though, this is something that really needs to be specified in the docs.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/465#issuecomment-215308429:161,install,install,161,https://qutip.org,https://github.com/qutip/qutip/pull/465#issuecomment-215308429,1,['install'],['install']
Deployability,Perhaps better to default to installing the latest release rather than master?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/279#issuecomment-65757518:29,install,installing,29,https://qutip.org,https://github.com/qutip/qutip/pull/279#issuecomment-65757518,2,"['install', 'release']","['installing', 'release']"
Deployability,"Please merge with master and resolve conflicts and push the updates. In general, to avoid conflicts, you should do 'git pull upsteam master' into your master before creating a new branch.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/294#issuecomment-67649107:60,update,updates,60,https://qutip.org,https://github.com/qutip/qutip/pull/294#issuecomment-67649107,1,['update'],['updates']
Deployability,Please refer to [`smesolve` new methods](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb) and [benchmark](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-smesolve-tests.ipynb). I think you should just use `c_ops` or `sc_ops`. Keeping this open as the notebook needs to be updated and the Users guide documentation. The [API documentation](http://qutip.org/docs/latest/apidoc/functions.html?highlight=smesolve#qutip.stochastic.smesolve) is updated.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1029#issuecomment-510889471:392,update,updated,392,https://qutip.org,https://github.com/qutip/qutip/issues/1029#issuecomment-510889471,2,['update'],['updated']
Deployability,"Please update this pull to the latest master so that we can check if it passes with all of the new changes. Also, your last correlation pull did not clean up the *.pyx files generated for the time-dependent code. Please check that no *.pyx files are left hanging around in this pull.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-272532379:7,update,update,7,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-272532379,1,['update'],['update']
Deployability,Print `qutip.about()` to get info on open mp. In general if you did not enforce it in installation it should be `False`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1175#issuecomment-583685282:86,install,installation,86,https://qutip.org,https://github.com/qutip/qutip/issues/1175#issuecomment-583685282,1,['install'],['installation']
Deployability,"QuTiP 4.5.3 doesn't support M1 Macs, sorry. None of us has access to one to test, and our CI didn't support them for quite a while. This will be fixed in the next release of QuTiP. In the meantime, you can either build the package from the current source code here, or you can go into your QuTiP installation folder and comment out lines 48 and 49 of `qutip/hardware_info.py` to work around it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1473#issuecomment-808873718:163,release,release,163,https://qutip.org,https://github.com/qutip/qutip/issues/1473#issuecomment-808873718,2,"['install', 'release']","['installation', 'release']"
Deployability,"QuTiP 4.6.3 has be released with the likely fix and we have no more information or ability to reproduce, so closing for now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1705#issuecomment-1856852938:19,release,released,19,https://qutip.org,https://github.com/qutip/qutip/issues/1705#issuecomment-1856852938,1,['release'],['released']
Deployability,QuTiP 4.6.3 has been released some time ago. :),MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1750#issuecomment-1856865560:21,release,released,21,https://qutip.org,https://github.com/qutip/qutip/issues/1750#issuecomment-1856865560,1,['release'],['released']
Deployability,"QuTiP 4.7.0 remove the hardware_info file. I suspect that your new install is just different to your old one. E.g. you seem to now be running SciPy 1.7.3, but maybe a more recent SciPy would work better (e.g. 1.8.2 or 1.9.0). In either case, this is almost certainly an issue with SciPy on M1 and not specific to QuTiP. Of course we would still like QuTiP to work for you -- it's just that the solution may lie in updating or installing SciPy differently, not QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1987#issuecomment-1229185731:67,install,install,67,https://qutip.org,https://github.com/qutip/qutip/issues/1987#issuecomment-1229185731,2,['install'],"['install', 'installing']"
Deployability,QuTiP 4.7.1 has been released to PyPI -- https://pypi.org/project/qutip/4.7.1/ -- and `pip install qutip` now works for me on Python 3.11.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2036#issuecomment-1347417696:21,release,released,21,https://qutip.org,https://github.com/qutip/qutip/issues/2036#issuecomment-1347417696,2,"['install', 'release']","['install', 'released']"
Deployability,QuTiP 4.7.2 was just released on pypi.; coda-forge release coming next.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180#issuecomment-1613443341:21,release,released,21,https://qutip.org,https://github.com/qutip/qutip/issues/2180#issuecomment-1613443341,4,['release'],"['release', 'released']"
Deployability,"QuTiP: Quantum Toolbox in Python. ================================. Copyright (c) QuTiP team 2011 and later. Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed,; Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross, Asier; Galicia, Paul Menczel, and Patrick Hopf. Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco; Nori and Will Zeng. Original developers: R. J. Johansson & P. D. Nation. Previous lead developers: Chris Granade & A. Grimsmo. Currently developed through wide collaboration. See https://github.com/qutip; for details. QuTiP Version: 5.0.4. Numpy Version: 1.24.3. Scipy Version: 1.14.1. Cython Version: None. Matplotlib Version: 3.7.2. Python Version: 3.11.5. Number of CPUs: 16. BLAS Info: INTEL MKL. INTEL MKL Ext: False. Platform Info: Windows (AMD64). Installation path: C:\Users\sabhy\anaconda3\Lib\site-packages\qutip. ================================================================================. Please cite QuTiP in your publication. ================================================================================. For your convenience a bibtex reference can be easily generated using; `qutip.cite()`. On Wed, Sep 25, 2024 at 4:09 AM Paul ***@***.***> wrote:. > Could you please include the output of the command qutip.about()? Because; > your code does not give an error on my setup.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/2536#issuecomment-2372741589>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AJVIYE6VAXW7QIVMRM4WQTDZYILLZAVCNFSM6AAAAABOYAR32CVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGNZSG42DCNJYHE>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2536#issuecomment-2373078683:827,Install,Installation,827,https://qutip.org,https://github.com/qutip/qutip/issues/2536#issuecomment-2373078683,1,['Install'],['Installation']
Deployability,"QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.0; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.14; Matplotlib Version: 3.1.2; Python Version: 3.7.3; Number of CPUs: 32; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1175#issuecomment-583693680:654,Install,Installed,654,https://qutip.org,https://github.com/qutip/qutip/issues/1175#issuecomment-583693680,1,['Install'],['Installed']
Deployability,"Quick example is below. To add a bit more, the ''slowness'''of the standard brmesolve() run in this example depends on whether I install mkl or not. without mkl, its >10 mins, with mkl, about one minute. The run with converting the tensor to sparse always takes around 30-40 seconds, and doesn't depend too much on mkl. ```; import qutip as qt; import numpy as np. #spectral density; def Jw(w): ; return lam**2 * gamma * w / ((w0**2 - w**2)**2 + (gamma**2) * (w**2)); ; ; #power spectrum; def J_power_spectrum(w):; """""" The Ohmic bath power spectrum as a function of w; (and the bath parameters).; """"""; return (; Jw(w) * 2 * (w>0); ); def Ising_solve(N, g0, J0, gamma, tlist, options, use_csr=True):; # N : number of spins; # g0 : splitting; # J0 : couplings. #Setup operators for individual qubits; sx_list, sy_list, sz_list = [], [], []; for i in range(N):; op_list = [qt.qeye(2)] * N; op_list[i] = qt.sigmax(); sx_list.append(qt.tensor(op_list)); op_list[i] = qt.sigmay(); sy_list.append(qt.tensor(op_list)); op_list[i] = qt.sigmaz(); sz_list.append(qt.tensor(op_list)). # Hamiltonian - Energy splitting terms; H = 0.; for i in range(N):; H += g0 * sz_list[i]. # Interaction terms; for n in range(N - 1):; H += -J0 * sx_list[n] * sx_list[n + 1]. # Initial state; state_list = [qt.basis(2, 1)] * (N-1); state_list.append(qt.basis(2, 0)); psi0 = qt.tensor(state_list); fx = 1; fy = 1.1; fz = 0.9; coup = (fx * (sx_list[N-1]) ; + fy * (sy_list[N-1]); + fz * (sz_list[N-1])). ; if use_csr:; R = qt.bloch_redfield_tensor(H, [[coup, J_power_spectrum]], fock_basis=True, sparse_eigensolver=True,br_dtype = 'sparse', sec_cutoff=-1); R = R.to('csr').tidyup(); result = qt.mesolve(R,psi0, tlist, options=options); else:; result = qt.brmesolve(H, psi0, tlist, a_ops = [[coup, J_power_spectrum]], e_ops=sz_list, options=options, sec_cutoff=-1); return result. #bath sd params; lam = 5; w0 = 10; gamma = 5; . #system params; N = 5; g0 = 1; J0 = 5. tlist = np.linspace(0, 100, 1000); options ={""nsteps"": 15000, ""s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2530#issuecomment-2403834583:129,install,install,129,https://qutip.org,https://github.com/qutip/qutip/issues/2530#issuecomment-2403834583,1,['install'],['install']
Deployability,"Quick update for readers: We (@cgranade, @jakelishman, @Ericgig and I) agreed that the best next step is to implement a draft `Instrument` class that shows the function signatures and interactions with `Qobj` and a few examples and then to see where to go from there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1673#issuecomment-940314000:6,update,update,6,https://qutip.org,https://github.com/qutip/qutip/issues/1673#issuecomment-940314000,1,['update'],['update']
Deployability,"Qutip `essolve` and QOtoolbox's `ode2es` both work by diagonalizing `L`. Once the eigenstates are computed, the time evolution is mostly free.; `mesolve` solve the ODE system one time increment at a time. So for any long enough `tlist`, `essolve` will be faster. Also, unless you compiled Qutip yourself with the openmp option, `mesolve` will run on one cpu, while the eigen solver run in parallel. With 16 cpus and the size of your problem, not running in parallel will slow you down. With some luck, the next major version release will be distributed compiled with openmp. . With the present release, if you compile with openmp (https://qutip.org/docs/latest/installation.html#direct-setuptools-source-builds) you should get better time, but correlation will still not be great.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1591#issuecomment-870937294:525,release,release,525,https://qutip.org,https://github.com/qutip/qutip/issues/1591#issuecomment-870937294,3,"['install', 'release']","['installation', 'release']"
Deployability,"Qutip use Scipy's Ode solvers. The interface of scipy solvers chaged in recent version, but we are still using [ode](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.ode.html#scipy.integrate.ode). We are using zvode integrator and adams method per default. Most of qutip's solver accept an options arguments which can change the method to 'bdf' but cannot be changed to Isoda or dopri. Mpi is not supported but multiprocessing is used by mcsolve and the stochastic solvers. If you [compile qutip](http://qutip.org/docs/latest/installation.html?highlight=openmp) yourself, we have a openmp parallelized matrix-vector product which can be used to speed up problem with large Hamiltonian.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1101#issuecomment-542843153:176,integrat,integrate,176,https://qutip.org,https://github.com/qutip/qutip/issues/1101#issuecomment-542843153,4,"['install', 'integrat']","['installation', 'integrate', 'integrator']"
Deployability,"RESOLVED. First, I changed to a source install inside the anaconda site-packages folder instead of pulling from the site. I was still getting the error, but I found this similar issue at https://github.com/qutip/qutip/pull/311, which suggested I remove the fpmath calls in a couple of the c compiler setup.py files. In particular, the setups in the cy and control subdirectories (see links). For instance, something like . ```; extra_compile_args=['-w', '-ffast-math',; '-O3', '-march=native, '-mfpmath=sse']; ```. to. ```; extra_compile_args=['-w', '-ffast-math',; '-O3', '-march=native'], #, '-mfpmath=sse'; ```. For some reason, this wasn't working either, so I decided to try changing; -march=native. to; -march=x86-64. , and that did the trick!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/409#issuecomment-165934550:39,install,install,39,https://qutip.org,https://github.com/qutip/qutip/issues/409#issuecomment-165934550,1,['install'],['install']
Deployability,"Regarding the suggestions in the TODO list:. > Have qutip-qip be an optional dependency. I'm wondering about this. Having `pip install qutip[qip]` is nice, but what should happen with `pip install qutip[full]`? Should that also install `qutip_qip`? If not should we then leave `qutip_qip` out of `full`? And should we have `qutip[full-family]`?. > Add installation of qutip-qip to the CI workflow. This we should not do -- we don't want anything in core qutip to accidentally require qutip_qip (that was sort of the point of the family packages).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1920#issuecomment-1147715338:127,install,install,127,https://qutip.org,https://github.com/qutip/qutip/pull/1920#issuecomment-1147715338,4,['install'],"['install', 'installation']"
Deployability,"Regarding your questions:. - It's the same in QuTiP 5 currently. I am creating a PR also for that version, but I will include support for multiple coupling operators to the PR.; - Yes, I will add a test for this.; - This parameter is only relevant for `fmmesolve` ( master equation solver ). There is already the parameter `kmax` which sets the truncation of sidebands to be considered for the integration of the coupling operator. The integral to solve reads as:. $$ \frac{1}{T} \int_0^T dt e^{-ik\Omega t} f(t) $$. where $k \in \[-k_{max}, k_{max} \]$ and $f(t)$ is a $T$-periodic function. Hence, we know the frequency of the integrand and therefore the required number of grid points for the numerical integration can be set based on `kmax`.; I think, we don't need to create another parameter for `nT`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1961#issuecomment-1198959790:394,integrat,integration,394,https://qutip.org,https://github.com/qutip/qutip/pull/1961#issuecomment-1198959790,2,['integrat'],['integration']
Deployability,"Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_pw_8rhs14880_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:7589,Release,Release,7589,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_pw_8rhs14881_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:13342,Release,Release,13342,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_pw_8rhs14882_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:19260,Release,Release,19260,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_pw_8rhs14883_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; ok; correlation: comparing TLS emission correlations (fn-list td format) ... ok; correlation: comparing TLS emission correlations (fn td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Diagonalization of random two-level system ... ok; Diagonalizat",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:25178,Release,Release,25178,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"Running `conda update qutip` didn't update my installation. Then, when I tried to install a specific version using `conda install qutip=4.6.2` it gave me a very large number of conflicts. . However, I then removed my install and was able to install the current version of QuTiP using `pip` and it appears to now be working. Thank you for the help.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1634#issuecomment-895792055:15,update,update,15,https://qutip.org,https://github.com/qutip/qutip/issues/1634#issuecomment-895792055,7,"['install', 'update']","['install', 'installation', 'update']"
Deployability,Running it through the profiler suggests that cy_expect_psi_csr is only responsible for a small part of the time (accumulative time 4.2 sec as compared to total run time of 148 sec). ```; Wed Nov 26 15:04:59 2014 profile.out; 5155120 function calls (5143582 primitive calls) in 148.280 seconds; Ordered by: cumulative time; List reduced from 3097 to 100 due to restriction <100>; ncalls tottime percall cumtime percall filename:lineno(function); 441/1 0.014 0.000 148.283 148.283 {built-in method exec}; 1 0.001 0.001 148.283 148.283 mcsolve-performance.py:1(<module>); 2 0.000 0.000 147.463 73.732 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:69(mcsolve); 2 0.000 0.000 147.411 73.706 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:446(run); 2 0.000 0.000 147.411 73.705 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:423(parallel); 2 0.011 0.006 147.411 73.705 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:415(serial); 1000 8.867 0.009 147.340 0.147 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:757(_mc_alg_evolve); 453518 1.543 0.000 130.497 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:376(integrate); 453518 127.846 0.000 128.245 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:859(run); 395940 0.709 0.000 74.413 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:747(step); 171960 4.219 0.000 4.219 0.000 {built-in method cy_expect_psi_csr}; ```,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-64519867:1249,integrat,integrate,1249,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-64519867,4,['integrat'],['integrate']
Deployability,"Same for me :; I rolled back to previous mkl and qutip by running:; conda install mkl=2018.0.3; conda install qutip=4.1.3. Now my programs calling steadystate work again but I also get 1 error related to mkl and steady when running the full test. Denis. De : zhang [mailto:notifications@github.com]; Envoyé : samedi 28 septembre 2019 09:33; À : qutip/qutip <qutip@noreply.github.com>; Cc : VION Denis <denis.vion@cea.fr>; Comment <comment@noreply.github.com>; Objet : Re: [qutip/qutip] Error with conda MKL2019.0 on Windows (#975). This was reported on the help group; https://groups.google.com/forum/#!topic/qutip/L-MIFFwK0xU. (copying from there); the newest mkl(Math library for intel) version(2019) can not work on QuTiP 4.3.1. I rollback it to mkl(2018.0.3), the qutip.testing then work well. If using mkl(2019.0), there will MKL read problems, like:. File ""C:\Users\ym24chen\Anaconda3\. x = lu.solve(b, verbose=verbose). File ""C:\Users\ym24chen\Anaconda3\envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 164, in solve. np_x, np_error). OSError: exception: access violation reading 0x0000000000000008. envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 384, in mkl_spsolve. Env info:. QuTiP Version: 4.3.1. Numpy Version: 1.15.4. Scipy Version: 1.1.0. Cython Version: 0.29.6. Matplotlib Version: 3.0.3. Python Version: 3.7.2. Number of CPUs: 8. BLAS Info: INTEL MKL. OPENMP Installed: False. INTEL MKL Ext: True. Platform Info: Windows (AMD64). Installation path: C:\Users\canwa\AppData\Local\conda\conda\envs\qutipenv\lib\site-packages\qutip. ==============================================================================. How can I rollback it to mkl(2018.0.3)? I just use ""conda install mkl=2018"" but the test still return errors. —; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://github.com/qutip/qutip/issues/975?email_source=notifications&email_token=ADBRKX2X6OKO5WY3XBOXMFLQL4CEJA5CNFSM4HFQJOJ2YY3PNVWWK3TUL52",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/975#issuecomment-536288655:74,install,install,74,https://qutip.org,https://github.com/qutip/qutip/issues/975#issuecomment-536288655,3,"['install', 'rollback']","['install', 'rollback']"
Deployability,"Scipy 1.14 is not supported yet. The patch will release with 5.0.3, ~~hopefully today~~, tomorrow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472#issuecomment-2191420632:37,patch,patch,37,https://qutip.org,https://github.com/qutip/qutip/issues/2472#issuecomment-2191420632,2,"['patch', 'release']","['patch', 'release']"
Deployability,See https://github.com/qutip/qutip/pull/1069; The code is (until merged) at https://github.com/qutip/qutip/tree/qutip-4.4.1.; Should be released next week.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1039#issuecomment-520089216:136,release,released,136,https://qutip.org,https://github.com/qutip/qutip/issues/1039#issuecomment-520089216,1,['release'],['released']
Deployability,"Seems to be back with matplotlib 3.4.1 in my case - exactly same error, very annoying (from matplotlib's site). QuTiP Version: 4.6.0; Numpy Version: 1.20.2; Scipy Version: 1.6.3; Cython Version: 0.29.23; Matplotlib Version: 3.4.1; Python Version: 3.8.8; Number of CPUs: 32; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/XXX/anaconda3/envs/qutip/lib/python3.8/site-packages/qutip. raise Exception(""Could not convert string to importable function, ""; Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_xxxxx.pyx",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1326#issuecomment-832382977:302,Install,Installed,302,https://qutip.org,https://github.com/qutip/qutip/issues/1326#issuecomment-832382977,2,['Install'],"['Installation', 'Installed']"
Deployability,"Setting up the testing environment with `conda` avoids the segfault, but hangs indefinitely while running the tests. I'm using the following `run_tests_conda.sh`:; ~~~; #!/usr/bin/env bash; conda create -y -p venv python=3.8 'cython>=0.21' 'numpy>=1.12' 'scipy>=1.0' matplotlib ipython pytest; ./venv/bin/python setup.py install; ./venv/bin/pip freeze > test.log; ./venv/bin/python -c 'import scipy; print(""Scipy config:""); scipy.__config__.show()' >> test.log; ./venv/bin/python -c 'import numpy; print(""Numpy config:""); numpy.__config__.show()' >> test.log; (cd venv && ./bin/python -c 'from qutip.testing import run; run()' 2>&1 | tee -a ../test.log); ~~~. This produces the attached [`test.log`](https://github.com/qutip/qutip/files/4307943/test.log): testing hangs at `test_mcsolve.py::test_MCTDFunc`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-596652939:321,install,install,321,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-596652939,1,['install'],['install']
Deployability,"Shall we schedule a 4.6.1 patch release for later this week? Perhaps I should email the others and set up a video call so I can demonstrate the release procedures. I can think of a few little patches that can be backported to 4.6.0, and then hopefully we can make 4.6.2 with new patches we get from Unitary Hack. The Floquet changes (currently on my desk - we've swapped to dealing by email a bit more) and the changes in Wigner will likely be part of the 4.7 release, of stuff I know right now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1541#issuecomment-831237284:26,patch,patch,26,https://qutip.org,https://github.com/qutip/qutip/pull/1541#issuecomment-831237284,6,"['patch', 'release']","['patch', 'patches', 'release']"
Deployability,"Should be closed by QuTiP [v. 4.5.2](https://github.com/qutip/qutip/releases/tag/v4.5.2), just released.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1304#issuecomment-663613720:68,release,releases,68,https://qutip.org,https://github.com/qutip/qutip/issues/1304#issuecomment-663613720,2,['release'],"['released', 'releases']"
Deployability,Should be fixed by #1199 and released in QuTiP 4.5.2.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1196#issuecomment-809400723:29,release,released,29,https://qutip.org,https://github.com/qutip/qutip/issues/1196#issuecomment-809400723,1,['release'],['released']
Deployability,Should be fixed with the 4.7.5 release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293#issuecomment-1969569230:31,release,release,31,https://qutip.org,https://github.com/qutip/qutip/issues/2293#issuecomment-1969569230,2,['release'],['release']
Deployability,"Should be. On Jan 2, 2017 04:35, ""Alexander Pitchford"" <notifications@github.com>; wrote:. > Is this merge ready? I am looking to make the 4.0.2 release; >; > —; > You are receiving this because you were assigned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/609#issuecomment-269961480>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ABMPqSIT-mM87hOq6Snnf_eEVt0_ngKnks5rOOEWgaJpZM4LY4iC>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/609#issuecomment-269976248:145,release,release,145,https://qutip.org,https://github.com/qutip/qutip/pull/609#issuecomment-269976248,1,['release'],['release']
Deployability,"Should gcc be reporting redhat 4.8.2 when running​ on ubuntu?. On Mar 25, 2017 11:00, ""Michael Goerz"" <notifications@github.com> wrote:. > Installing qutip via the conda package and then importing it produces a; > crash for me:; >; > goerz@mlhpc2:~> conda create -y -c conda-forge -m -n qutiptest python=3.5 qutip; > Using Anaconda Cloud api site https://api.anaconda.org; > Fetching package metadata: ........; > Solving package specifications: .........; >; > Package plan for installation in environment /home/goerz/.conda/envs/qutiptest:; >; > The following NEW packages will be INSTALLED:; >; > certifi: 2017.1.23-py35_0; > cython: 0.25.2-py35_1; > libgfortran: 3.0.0-1; > mkl: 2017.0.1-0; > ncurses: 5.9-10 numpy: 1.12.1-py35_0; > openssl: 1.0.2k-1; > pip: 9.0.1-py35_1; > python: 3.5.3-1; > qutip: 4.1.0-np112py35_1; > readline: 6.2-2 (soft-link); > scipy: 0.19.0-np112py35_0; > setuptools: 33.1.1-py35_0; > sqlite: 3.13.0-1; > tk: 8.5.19-1; > wheel: 0.29.0-py35_0; > xz: 5.2.2-1; > zlib: 1.2.11-0; >; > Linking packages ...; > [ COMPLETE ]|##########################| 100%; > #; > # To activate this environment, use:; > # $ source activate qutiptest; > #; > # To deactivate this environment, use:; > # $ source deactivate; > #; > goerz@mlhpc2:~> source activate qutiptest; > discarding /home/goerz/.conda/envs/default/bin from PATH; > prepending /home/goerz/.conda/envs/qutiptest/bin to PATH; > (qutiptest)goerz@mlhpc2:~> python; > Python 3.5.3 | packaged by conda-forge | (default, Feb 9 2017, 14:37:12); > [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import qutip; > /home/goerz/.conda/envs/qutiptest/lib/python3.5/site-packages/qutip/__init__.py:161: UserWarning: matplotlib not found: Graphics will not work.; > warnings.warn(""matplotlib not found: Graphics will not work.""); > Illegal instruction (core dumped); > (qutiptest)goerz@mlhpc2:~>; >; > Let me know if you need further information on my setup",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-289248444:139,Install,Installing,139,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-289248444,3,"['INSTALL', 'Install', 'install']","['INSTALLED', 'Installing', 'installation']"
Deployability,"Should have been taken care in the recent conda and pip release of QuTiP, 4.4.0, #1037.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/987#issuecomment-510879357:56,release,release,56,https://qutip.org,https://github.com/qutip/qutip/issues/987#issuecomment-510879357,1,['release'],['release']
Deployability,Should now be fixed by later releases of MKL; see scipy/scipy#8205.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/937#issuecomment-809450728:29,release,releases,29,https://qutip.org,https://github.com/qutip/qutip/issues/937#issuecomment-809450728,1,['release'],['releases']
Deployability,"Should we also update the setup.cfg file with the latest version of numpy and python employed in tests? Allowing the installation of previous numpy versions that are not included in the CI may lead unanticipated bugs. Is there any reason to allow older versions of numpy in the setup.cfg (currently `numpy>=1.16"") instead of matching those with the versions used for testing?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1941#issuecomment-1163372067:15,update,update,15,https://qutip.org,https://github.com/qutip/qutip/pull/1941#issuecomment-1163372067,2,"['install', 'update']","['installation', 'update']"
Deployability,"Since I have been using GCC 4.8 for a while now, i did not think about compilers back to 4.4. I will take a look at this code on Monday, but my initial thinking is just to drop the optimization and leave it at that. This would save us from having to run an extra test suite on Travis. The only compiler flags that matter at the end are O3 and the fast math. Everything else is just a few percent improvement at best. . Paul. > On Feb 21, 2015, at 06:42, Dominic Meiser notifications@github.com wrote:; > ; > gcc 4.4 does not support the -flto option for link time optimization. This is still a common compiler because it is the system gcc in centos 6 and redhat enterprise 6.; > ; > In this pull request I've removed that option. Users who need this could set the CCFLAGS environment variable to customize the compiler flags. Alternatively, we could add options to setup.py to enable or disable link time optimization.; > ; > I've also added additional rows to the travis build matrix to test building with gcc 4.4 and clang. In its current form this adds 4 additional rows to the build matrix (2 additional compilers, each tested with python 2.7 and 3.4). Let me know if you think this is excessive. It's possible to add just one python version for gcc 4.4 and clang.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/qutip/qutip/pull/318; > ; > Commit Summary; > ; > Remove -flto compilation flags.; > Add gcc4.4 and clang builds to travis build matrix.; > File Changes; > ; > M .travis.yml (8); > M qutip/control/setup.py (4); > M qutip/cy/setup.py (2); > Patch Links:; > ; > https://github.com/qutip/qutip/pull/318.patch; > https://github.com/qutip/qutip/pull/318.diff; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/318#issuecomment-75334652:1606,Patch,Patch,1606,https://qutip.org,https://github.com/qutip/qutip/pull/318#issuecomment-75334652,2,"['Patch', 'patch']","['Patch', 'patch']"
Deployability,"Since tests pass with the updated branch, I'm going to merge this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1692#issuecomment-947776584:26,update,updated,26,https://qutip.org,https://github.com/qutip/qutip/pull/1692#issuecomment-947776584,1,['update'],['updated']
Deployability,"Since we are now using Anaconda as the default installation platform, I think that it is time to move the mcf90 module to its own installer. This can be done in Pull #648, with the files left where they are, and then moved to another install when we get around to it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/439#issuecomment-281571152:47,install,installation,47,https://qutip.org,https://github.com/qutip/qutip/issues/439#issuecomment-281571152,3,['install'],"['install', 'installation', 'installer']"
Deployability,"So I applied the solution to the code , its doesn't work well in ourcase, their solution does okay for the preset angle ; This is the updated code with custom ordering ; <img width=""661"" alt=""image"" src=""https://github.com/qutip/qutip/assets/54374648/0e02b27c-d09c-4f13-8d29-1031e2f0c92a"">; <img width=""647"" alt=""image"" src=""https://github.com/qutip/qutip/assets/54374648/37c62667-cf01-4d37-9c20-770b6fc3da8f"">; It messes up the older pic, so I feel its best to make custom ordering a parameter users can choose to opt for, they can choose between min, max, average and custom ; While this solution improves it after 2 days of searching this seems like a common problem and a solution is yet to come by from matplotlib ; reference ; https://github.com/matplotlib/matplotlib/issues/25534#issue-1637116709. Some improvements comes from adding the bars one by one ourself ; https://www.mail-archive.com/matplotlib-users@lists.sourceforge.net/msg19740.html#:~:text=As%20for%20the,will%20have%20problems",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2442#issuecomment-2145034602:134,update,updated,134,https://qutip.org,https://github.com/qutip/qutip/pull/2442#issuecomment-2145034602,1,['update'],['updated']
Deployability,"So I decided to reinstall Python (Anaconda specifically) to get a fresh slate as in my own debugging and trying to update packages other code started to behave weirdly. Here is my current qutip.about():; QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. I am using the Qt5Agg matplotlib backend, and changing to the TkAgg backend gives the same behaviour. However, running the code you pasted in a separate (command line) console I am able to view the sphere with even the b.show() command.; I still have this behaviour in my editor however (Visual Studio Code) so I think the problem is something to so with my debug environment, this code even behaves as it should in the powershell window in VS code. ; I know this isnt the VS code issue page but if you have any suggestions I'd much appreciate it",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1616#issuecomment-883428764:115,update,update,115,https://qutip.org,https://github.com/qutip/qutip/issues/1616#issuecomment-883428764,3,"['Install', 'update']","['Installation', 'Installed', 'update']"
Deployability,"So I did an update of my conda environment to the latest version and now also the installation via pip has a problem, producing an `ImportError` (but not a segfault!) in the same location:. goerz@mlhpc2 develop:~/Documents/Programming/QNET> ipython; Python 3.6.0 |Anaconda 4.3.1 (64-bit)| (default, Dec 23 2016, 12:22:00); Type ""copyright"", ""credits"" or ""license"" for more information. IPython 5.1.0 -- An enhanced Interactive Python.; ? -> Introduction and overview of IPython's features.; %quickref -> Quick reference.; help -> Python's own help system.; object? -> Details about 'object', use 'object??' for extra details. In [1]: import qutip; ---------------------------------------------------------------------------; ImportError Traceback (most recent call last); <ipython-input-1-ad45215f3e51> in <module>(); ----> 1 import qutip. /home/goerz/.conda/envs/default/lib/python3.6/site-packages/qutip/__init__.py in <module>(); 169; 170 # core; --> 171 from qutip.qobj import *; 172 from qutip.states import *; 173 from qutip.operators import *. /home/goerz/.conda/envs/default/lib/python3.6/site-packages/qutip/qobj.py in <module>(); 58 import qutip.settings as settings; 59 from qutip import __version__; ---> 60 from qutip.fastsparse import fast_csr_matrix, fast_identity; 61 from qutip.cy.ptrace import _ptrace; 62 from qutip.permute import _permute. /home/goerz/.conda/envs/default/lib/python3.6/site-packages/qutip/fastsparse.py in <module>(); 404 #Need to do some trailing imports here; 405 #-------------------------------------; --> 406 from qutip.cy.spmath import (zcsr_transpose, zcsr_adjoint, zcsr_mult). ImportError: /home/goerz/.conda/envs/default/lib/python3.6/site-packages/qutip/cy/spmath.cpython-36m-x86_64-linux-gnu.so: undefined symbol: _ZTINSt8ios_base7failureB5cxx11E. The verbose log file from the installation (`pip install -v --no-cache-dir qutip`) is here: [pip_log.txt](https://github.com/qutip/qutip/files/914669/pip_log.txt)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-293395036:12,update,update,12,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-293395036,4,"['install', 'update']","['install', 'installation', 'update']"
Deployability,"So I did just that, and the ""overloaded method"" error doesn't happen again, which is good.; But installation still fails on other errors, I believe related to NumPy:. ```; ./setup.py install --user; Compiling qutip/cy/spmatfuncs.pyx because it changed.; Compiling qutip/cy/stochastic.pyx because it changed.; Compiling qutip/cy/sparse_utils.pyx because it changed.; Compiling qutip/cy/graph_utils.pyx because it changed.; Compiling qutip/cy/interpolate.pyx because it changed.; Compiling qutip/cy/spmath.pyx because it changed.; Compiling qutip/cy/heom.pyx because it changed.; Compiling qutip/cy/math.pyx because it changed.; Compiling qutip/cy/spconvert.pyx because it changed.; Compiling qutip/cy/ptrace.pyx because it changed.; Compiling qutip/cy/testing.pyx because it changed.; Compiling qutip/cy/brtools.pyx because it changed.; Compiling qutip/cy/brtools_testing.pyx because it changed.; [ 1/13] Cythonizing qutip/cy/brtools.pyx. Error compiling Cython file:; ------------------------------------------------------------; ... DTYPE = np.float64; ^; ------------------------------------------------------------. qutip/cy/parameters.pxi:2:10: cimported module has no attribute 'float64'. Error compiling Cython file:; ------------------------------------------------------------; ... DTYPE = np.float64; ctypedef np.float64_t DTYPE_t. ITYPE = np.int32; ^; ------------------------------------------------------------. qutip/cy/parameters.pxi:5:10: cimported module has no attribute 'int32'. Error compiling Cython file:; ------------------------------------------------------------; ...; ctypedef np.float64_t DTYPE_t. ITYPE = np.int32; ctypedef np.int32_t ITYPE_t. CTYPE = np.complex128; ^; ------------------------------------------------------------. qutip/cy/parameters.pxi:8:10: cimported module has no attribute 'complex128'. Error compiling Cython file:; ------------------------------------------------------------; ...; ctypedef np.int32_t ITYPE_t. CTYPE = np.complex128; ctypedef np.co",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/723#issuecomment-317495769:96,install,installation,96,https://qutip.org,https://github.com/qutip/qutip/issues/723#issuecomment-317495769,2,['install'],"['install', 'installation']"
Deployability,"So after starting with a fresh install of Anaconda and going through the steps described in https://qutip.org/docs/4.1/installation.html to install through conda-forge and conda, I am still seeing the same behaviour. However I have found a workaround that gives me exactly what I want. During my debugging I ending up adding the `b.make_sphere()` command, this seems to have caused the extra set of axes to keep appearing. I found that by omitting the `make_sphere` command and just replacing `b.show()` with `plt.show()` worked perfectly.; Heres my MWE; ```python; import qutip; import matplotlib.pyplot as plt; b=qutip.Bloch(). b.add_vectors([1,0,0]); b.render(). plt.show(); ```. My `qutip.about()` output is:; ```; QuTiP Version: 4.6.2; Numpy Version: 1.20.3; Scipy Version: 1.6.2; Cython Version: 0.29.24; Matplotlib Version: 3.3.4; Python Version: 3.9.5; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\Chester\.conda\envs\qutip-env\lib\site-packages\qutip; ```. Hopefully this helps someone. @jakelishman I tried interactive mode toggling when this problem first occurred as that's what the behaviour reminded me of too. Gave it another go with my example in this text (replacing the `plt.show()` with `b.show()`) but still same behaviour.; I think it's to do with something similar to the problem/solution in https://stackoverflow.com/questions/12369693/how-to-make-the-plot-not-disappear/12905317 as `self.fig` within the Bloch class is initialised in `render()` (and then called in `show()`) a similar way. But I am not familiar enough with the qutip backend to know if this is an error, especially as this does not seem like a common issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1616#issuecomment-883619754:31,install,install,31,https://qutip.org,https://github.com/qutip/qutip/issues/1616#issuecomment-883619754,5,"['Install', 'install']","['Installation', 'Installed', 'install', 'installation']"
Deployability,"So far:; I have created the 4.1.x branch; Created the gztar and zip via sdist; (there was a problem with missing hpp files, now fixed); I have uploaded the packages to the website and updated the links.; I have updated the conda-forge recipe. I am waiting to see how the packages work out before going any further. The Windows ones take about 24 before they get processed in the queue",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/649#issuecomment-285766694:184,update,updated,184,https://qutip.org,https://github.com/qutip/qutip/issues/649#issuecomment-285766694,2,['update'],['updated']
Deployability,"So the error is because QuTiP uses 32 bit int indices. This is because; that was all the scipy supported at the time. This can be updated to; support 64 ints as well, but is a bit of work to do. On Fri, Apr 6, 2018, 08:53 Xavier <notifications@github.com> wrote:. > Thanks for your quick reply. I am using multiple profilers at the moment,; > but albeit large, the RAM usage may not be the main problem. I am running; > the program on a 2 TB VM as well, and it looks like the maximum of N before; > the program crashes is the same. (N=115 crashes, but there should be enough; > RAM available for this parameter. Now running for N=112.); >; > The specific error I get is the following one:; >; > *Traceback (most recent call last):*; > File ""SPI_V5.py"", line 197, in; > H_BS1=-BS_1/(2.*Dt_BS1)*(a_UPs.dag()*a_LOWs+a_UPs*a_LOWs.dag()+a_UPi.dag(); > *a_LOWi+a_UPi*a_LOWi.dag()); > File ""/usr/local/lib/python3.5/dist-packages/qutip/qobj.py"", line 414, in; > *add*; > out.data = self.data + other.data; > File ""/usr/local/lib/python3.5/dist-packages/scipy/sparse/base.py"", line; > 375, in *add*; > return self._add_sparse(other); > File ""/usr/local/lib/python3.5/dist-packages/scipy/sparse/compressed.py"",; > line 342, in _add_sparse; >; > return self._binopt(other, '*plus*'); > File ""/usr/local/lib/python3.5/dist-packages/qutip/fastsparse.py"", line; > 115, in _binopt; > A = fast_csr_matrix((data, indices, indptr), dtype=data.dtype,; > shape=self.shape); > File ""/usr/local/lib/python3.5/dist-packages/qutip/fastsparse.py"", line; > 60, in *init*; >; > *raise TypeError('fast_csr_matrix allows only int32 indices.') TypeError:; > fast_csr_matrix allows only int32 indices.*; >; > To me, it seems that it is due to a bad type of integer passed to a QuTiP; > function. Do you agree?; > I admit that it is hard to solve a problem without having the code; > available, but perhaps you know more of this specific TypeError in QuTiP.; >; > Best regards,; > Xavier; >; > —; > You are receiving this because yo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/845#issuecomment-379268268:130,update,updated,130,https://qutip.org,https://github.com/qutip/qutip/issues/845#issuecomment-379268268,1,['update'],['updated']
Deployability,"So, I did a lot of digging around trying to add the banner for all the older documentation to point towards the latest. But it was a pain to modify and add manually a message on each page to point towards the latest docs. However, for future releases, we could use the `cannonical_url` option of `sphinx_rtd_theme` which makes search engines index the latest links to the documentations. https://docs.readthedocs.io/en/stable/canonical.html",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1516#issuecomment-467538074:242,release,releases,242,https://qutip.org,https://github.com/qutip/qutip/issues/1516#issuecomment-467538074,1,['release'],['releases']
Deployability,"Solved by QuTiP 4.4.0 PyPI release. It proved quite slow to build the wheels on my try on Colab (5 minutes), we can open another issue in case this is standard.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1008#issuecomment-510884494:27,release,release,27,https://qutip.org,https://github.com/qutip/qutip/issues/1008#issuecomment-510884494,1,['release'],['release']
Deployability,Solved in QuTiP 4.4.0 release. See [`ssesolve` new methods](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-ssesolver-new-methods.ipynb) and [benchmarks](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/development/development-ssesolve-tests.ipynb) for details. I checked that your snippet now runs.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/857#issuecomment-510887275:22,release,release,22,https://qutip.org,https://github.com/qutip/qutip/issues/857#issuecomment-510887275,1,['release'],['release']
Deployability,"Some Updates: . 1. I have added some tests for both the Measurement (in qutip/tests/test_circuit_measurement.py) portion and the circuit run (qutip/tests/test_qubitcircuit.py) portions of the code. There is a slight hiccup with the Python 3.8 run of one of the tests (test_run_statistics). I am not sure why it is only failing in the Python 3.8 case. ; 2. I have converted all the tests in qutip/tests/test_qubitcircuit.py to pytest style tests. Maybe, @jakelishman can comment if further changes are required. ; 3. Finally, since `measurement_density` and `measurement_ket` allow for POVM style measurements, it might be better to move those functions to qutip/measurement.py but I am not sure. Maybe @hodgestar can comment on that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-639989935:5,Update,Updates,5,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-639989935,1,['Update'],['Updates']
Deployability,"Some updates: . 1. I have added specifying kets as `ops` in `measure` and `measurement_statistics`. I have also added a check for whether the sum of all the measurement operators sums to identity which should be the case with any POVMs. New tests for the same have been added as well ! ; 2. I have removed `self.gates` as well as `self.gates_and_measurements`. The replacement is the more ""general"" (and less of a mouthful) `self.circuit_ops` which contains both. I still allow `propagators` function to be allowed in this case (because it is useful internally in `run`). However, now if a circuit with measurement needs to call `resolve_gates` or `adjacent_gates`, it needs to add measurements after the fact. . @BoxiLi, any opinions ? I have also addressed all the other minor issues as well ! . P.S. All of the new codeclimate issues are just previous issues re-appearing carried on because I modified those lines.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-647187809:5,update,updates,5,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-647187809,1,['update'],['updates']
Deployability,Some updates:. 1. All measurements (except the one in the computational basis) have now been moved to qutip/measurement.py. The interface for the previous measurement style (using observables and eigenstates) remains the same. The only difference is that the `measure` and `measurement_statistics` functions now act as dispatch functions that can carry out projective measurements instead when the `op : list of projection operators` ; 2. I have moved all measurement tests to qutip/tests/test_measurement.py as well as moved all measurement tests to pytest style,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643731499:5,update,updates,5,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643731499,1,['update'],['updates']
Deployability,"Sorry @vikas-chaudhary-2802 I didn't notice your question last week. As boxi said, might be a bad install or you are using the wrong version. The ''how to contribute to qutip'' section of this tutorial might be useful for setting things up https://colab.research.google.com/drive/1RcgX7oEzGjzPAF8Ryus54Q5UmyMddmLA?usp=sharing",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2345#issuecomment-2016997897:98,install,install,98,https://qutip.org,https://github.com/qutip/qutip/issues/2345#issuecomment-2016997897,1,['install'],['install']
Deployability,"Sorry for such a long delay... @QuantumFall This issue somehow escaped from my email list and I never noticed it. This is actually a situation often encountered when testing just one gate. If Hamiltonian acts trivially on the state for a few time steps, the adaptive solver may decide on a step size so large that all the reaming pulses are skipped. Set the max step size fixes it:; ```python; options = qutip.Options(max_step=0.05); processor_state = processor.run_state(init_state, options=options).states[-1].tidyup(1.0e-6); ```. Usually, this is because the Hamiltonian is 0 at the first few steps. This example is actually slightly different. The first pulse is a non-trivial (sxsx+sysy) (swap-like). Maybe it is because it has no effect on the initial state `(0,0,0,1)`. But `(1,0,0,0)` seems to work well. It seems really necessary to adaptively choose a step size for the simulators. BTW, new updates will most likely only be added to the separate package [`qutip-qip`](https://github.com/qutip/qutip-qip). Please feel free to check there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2003#issuecomment-1343478054:901,update,updates,901,https://qutip.org,https://github.com/qutip/qutip/issues/2003#issuecomment-1343478054,1,['update'],['updates']
Deployability,"Sorry for the delay - my Windows decided it needed an update, which took hours.; I ran the specific test `test_MCSimpleConstFunc` : OK; I ran all the interpolation followed by the all the mcsolve tests: OK; This would seem to resolve #728 ; I would say this is ready to merge. Good work. Thank you @nonhermitian",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/729#issuecomment-317883897:54,update,update,54,https://qutip.org,https://github.com/qutip/qutip/pull/729#issuecomment-317883897,1,['update'],['update']
Deployability,Sorry for the delay @nathanshammah . I have made the changes in https://github.com/qutip/qutip/pull/1165 . Looking forward to see the new release!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1148#issuecomment-578520593:138,release,release,138,https://qutip.org,https://github.com/qutip/qutip/issues/1148#issuecomment-578520593,1,['release'],['release']
Deployability,"Sorry for the delay on the docstrings and so on, I think all suggestions should be incorporated now. However, thanks to Paul's suggestion of adapting the tutorial 1e. I realized that I made a ""mistake from the very beggining"", namely the function used to fit the correlation function is only good if the imaginary part of the spectral density is 0 at t=0, because I'm using. $C(t)=\sum_{k}a_{k}e^{-b_{k} t}e^{i c_{k} t}$. so . $C_{R}(t)=\sum_{k}a_{k}e^{-b_{k} t}cos(c_{k} t)$. $C_{I}(t)=\sum_{k}a_{k}e^{-b_{k} t}sin(c_{k} t)$. No matter how many terms I take $C_{I}(0)=0$. I should have realized before but this can be bypassed by excluding $t=0$ from the fit, and starting at a small t, you get a decent fit, as long as you don't look at C(0), and I never check for these situations before. The results of doing this are pretty decent, but updating tutorial 1e I realized it required higher calculation times for the HEOMSolver when compared to using another ansatz for the correlation function, since solving is the expensive bit then I changed the code use another function for fitting. $C(t)=\sum_{k}(a_{k}+i d_{k})e^{-b_{k} t}e^{i c_{k} t}$. The downside is that since this function has 4 parameters, it required changing other functions as well, luckily only functions starting with _, hopefully this won't delay the PR too much. I updated the tutorials with this as well, and added a bit so that passing the parameters for the fitting is easier (after this comment), if the change is not desirable we can just go back to the commit before this comment",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2260#issuecomment-1925945764:1338,update,updated,1338,https://qutip.org,https://github.com/qutip/qutip/pull/2260#issuecomment-1925945764,1,['update'],['updated']
Deployability,"Sorry for the delayed reply, here is what I've been trying to do:. N = 8; max_excitation = 1 ; num_levels = 2; dims = [num_levels] * N`. ann_operators = enr_destroy(dims, excitations = max_excitation); w_r = 2 * np.pi * 5; w = np.array([w_r] * N). J_r = 2 * np.pi * 0.4; J_t2 = 1.353 * J_r; J_t1 = 1.035 * J_r. J = np.array([J_t2, J_t1] + [J_r] * (N-5) + [J_t1, J_t2]). kappa = 2.92 * J_r; drive_amp = 2 * np.pi * 0.0001. mod_freq = 2 * np.pi * 0.87; mod_amp = mod_freq * 0.8. t = []. detuning_list = 2 * np.pi * np.linspace(-1, 1, 501). for detuning in detuning_list:; drive_w = (w_r - detuning). H_r = 0; for i, a in enumerate(ann_operators):; H_r += (w[i] - drive_w) * a.dag() * a. H_int = 0; for i in range(len(ann_operators)-1):; H_int += J[i] * (ann_operators[i].dag() * ann_operators[i+1] + ann_operators[i+1].dag() * ann_operators[i]). H_d = -1j * drive_amp * (ann_operators[0] - ann_operators[0].dag()). H = H_r + H_int + H_d; c_ops = [np.sqrt(kappa)*ann_operators[0], np.sqrt(kappa)*ann_operators[-1]]; Op_t = mod_amp * ann_operators[6].dag() * ann_operators[6]. rho_ss = steadystate_floquet(H, c_ops, Op_t, w_d = mod_freq). a_out = np.sqrt(kappa) * expect(ann_operators[-1], rho_ss); t.append(np.sqrt(kappa) * a_out/drive_amp). t = np.array(t). dB = 0. if dB:; plt.plot(detuning_list/2/np.pi, 20*np.log10(np.abs(t))); plt.xlabel(""Detuning (GHz)""); plt.ylabel(""|S21|(dB)""); plt.ylim(-10,0.01). else:; plt.plot(detuning_list/2/np.pi, (np.abs(t))); plt.xlabel(""Detuning (GHz)""); plt.ylabel(""|S21|""); plt.grid()`. Qutip 4.7:; ![image](https://github.com/qutip/qutip/assets/61804899/95a303ef-dcef-4fae-bace-5d6f5b7b24a1). Qutip 5.1.0 (installed by downloading a zip from the git as on April 11th):; ![image](https://github.com/qutip/qutip/assets/61804899/04d3e168-2893-435b-9818-91fe917c5d6b)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2386#issuecomment-2050649919:1641,install,installed,1641,https://qutip.org,https://github.com/qutip/qutip/issues/2386#issuecomment-2050649919,1,['install'],['installed']
Deployability,"Sorry, this reply is very late! I was testing openmp installs on windows the other day. if you make a new conda environment, and make sure to install openmp first, it seems OK. (In once instance I did seem to have your issue, but I am not exactly sure what I did to reproduce it because it suddenly disappeared. Perhaps you had qutip already installed, and then tried to reinstall on top of it with openmp enabled?). however, you may then run into the issue currently being fixed in https://github.com/qutip/qutip/pull/1471 ; You might need to wait a little for that fix to be merged, or use Jake's branch in the mean time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1378#issuecomment-808861212:53,install,installs,53,https://qutip.org,https://github.com/qutip/qutip/issues/1378#issuecomment-808861212,3,['install'],"['install', 'installed', 'installs']"
Deployability,"Sorry.. got a little distracted, and wanted to check the contributing guidelines on what branch to make the pull request against. Currently it’s master. Is that ok? If yes, I’ll undraft it. Draft PRs are pretty new, and a very nice way to kick off the Continuous Integration. Like in this case, I wanted to check if any of the tests involve that message. As they don’t, this actually is ready to go.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1049#issuecomment-513872964:252,Continuous,Continuous,252,https://qutip.org,https://github.com/qutip/qutip/pull/1049#issuecomment-513872964,2,"['Continuous', 'Integrat']","['Continuous', 'Integration']"
Deployability,Sounds like it is xvfb that is interfering with the test environment. I guess if you install it you'll likely be able to reproduce the error.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-908496458:85,install,install,85,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-908496458,1,['install'],['install']
Deployability,"Subject: Re: [qutip/qutip] More detailed information for GSoC 2020 project; > (#1184); >; > Hi Boxi,; >; > Can you please modify the projects of the Wiki page as you deem best?; > All: we can also think of changing the order of them. It may be that; > project #3 is deemed the most important.; >; > Best wishes,; >; > Nathan; >; > Dr. Nathan Shammah; > Postdoctoral Research Scientist; > Theoretical Quantum Physics Laboratory; > RIKEN, Wako, Saitama, Japan; > www.nathanshammah.com; >; >; >; > On Sun, Feb 23, 2020 at 5:42 AM Boxi Li <notifications@github.com> wrote:; >; > > I have some detail information for the GSoC 2020 project ""Error; > mitigation; > > in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > > Wiki page. I post it here so if anyone finds it nice could copy it to the; > > Wiki page.; > >; > > I add some details based on the original description:; > > ------------------------------; > > 1. Error mitigation in QuTiP; > >; > > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > > quantum circuit simulator (which was a GSoC project) providing enhanced; > > features for a pulse-level description of quantum circuits and noise; > > models. A new class Processor and several subclasses are added to; > > represent different platforms for quantum computing. They can transfer a; > > quantum circuit into the corresponding control sequence and simulate the; > > dynamics with QuTiP solvers. Different noise models can be added to; > > qutip.qip.noise to simulate noise in a quantum device.; > >; > > This module is still young and many features can be improved, including; > > new device models, new noise models and integration with the existing; > > general framework for quantum circuits (qutip.qip.circuit). There are; > > also possible applications such as error mitigation techniques [1-3].; > >; > > The tutorial notebooks can be found at; > > http://qutip.org/tutorials.html#nisq. A recent presentation on the; > FOSDEM; > > co",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:4451,release,release,4451,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['release'],['release']
Deployability,"Sure, but I suppose I meant: are you planning to integrate that process in the ODE passed to the scipy integrator?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/525#issuecomment-249344184:49,integrat,integrate,49,https://qutip.org,https://github.com/qutip/qutip/pull/525#issuecomment-249344184,2,['integrat'],"['integrate', 'integrator']"
Deployability,"Switching `auto_tidyup` to being a relative tolerance not an absolute tolerance I think is a really good idea. It raises the cost of it a bit by making it a two-pass operation (and for sure let's use the max norm, not the trace norm!), but I think it's a sensible compromise. We could even have two options - `tidyup_atol` and `tidyup_rtol` to have both, and have `tidyup_atol` default to `0`. Also, fine point about `QobjEvo` - I'd forgotten that it internally called `tidyup`. I'm certainly in favour of swapping the default to `False` for the next major release. I know people may still want the option, so not a good idea to remove it completely, but I think having the default be `False` is safer numerically.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349#issuecomment-680027055:557,release,release,557,https://qutip.org,https://github.com/qutip/qutip/issues/1349#issuecomment-680027055,1,['release'],['release']
Deployability,"Testing locally in a conda environment without NumPy, this seems to work. In particular, I tested with the following commands:. ``` bash; $ conda create -n nonp python=2.7; $ source activate nonp; $ pip install git+https://github.com/cgranade/qutip.git@fix-setup-numpy#egg=QuTiP; ```. Notably, `conda create` still provides setuptools. I have not yet tested with neither setuptools nor numpy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/489#issuecomment-224191450:203,install,install,203,https://qutip.org,https://github.com/qutip/qutip/pull/489#issuecomment-224191450,1,['install'],['install']
Deployability,"Testing without cython is faster but cython is needed to install qutip. Most tests are only useful to us. We should make a subset of tests to check installation without checking all options. We could have only 1 stochastic test instead of running all 8 solvers, unless you are working on this part of the code, they will all fail or pass together. @costrouc running one test per file would be better than removing some file. Are you in an hurry? I could make it once I am back from vacation (unless someone else have time during new year)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147#issuecomment-569766176:57,install,install,57,https://qutip.org,https://github.com/qutip/qutip/issues/1147#issuecomment-569766176,2,['install'],"['install', 'installation']"
Deployability,"Thank you Jake for taking a quick look!; I checked once more and the following produces an error (used in an ""empty"" virtual environment):; ```; > pip install setuptools wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; > python setup.py develop. Traceback (most recent call last):; File ""/home/kaladin/Documents/git/qutip/qutip4/setup.py"", line 13, in <module>; import packaging.version; ModuleNotFoundError: No module named 'packaging'; ```; So I think `packaging` it is not included with `setuptools`. . > `requirements.txt` has no special meaning at all so it doesn't really matter,; Lets not add wheels and setuptools to the requirements then. Updating it with the latest dependency versions in setup.cfg dependencies should be fine though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1715#issuecomment-973123214:151,install,install,151,https://qutip.org,https://github.com/qutip/qutip/pull/1715#issuecomment-973123214,1,['install'],['install']
Deployability,"Thank you Paul,; I will give this a test, probably tomorrow now. ; I am going to try and fix some of the little niggles (mainly in the control tests), then I am going to make a 4.0.2 release. I guess I can include this and the rest of the commits you have made since we made 4.0.0?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/596#issuecomment-269847535:183,release,release,183,https://qutip.org,https://github.com/qutip/qutip/pull/596#issuecomment-269847535,1,['release'],['release']
Deployability,"Thank you Sidhant. I’d split it up. On Sat, 27 Jun 2020 at 06:07, Sidhant Saraogi <notifications@github.com>; wrote:. > Update : Most of the functionality is now there, except measure and; > conditional statements, I hope to add those after we are done merging the; > measurement PR. @nathanshammah <https://github.com/nathanshammah> I was; > wondering if writing to QASM should be a separate PR or the same one ?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/1291#issuecomment-650486135>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADPF67AEYTRJEAW23HB3JLDRYVV7LANCNFSM4OAG5ZOA>; > .; >; -- ; Dr. Nathan Shammah; www.nathanshammah.com",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1291#issuecomment-650556880:120,Update,Update,120,https://qutip.org,https://github.com/qutip/qutip/pull/1291#issuecomment-650556880,1,['Update'],['Update']
Deployability,Thank you for all the info @hodgestar! I reinstalled qutip in a new environment as you advise and then `conda install nomkl qutip` worked as expected. It resulted now in passing all tests (skipping a few) so I think it's best to leave it as it is for now since @Gerb0ise did not have more success upgrading numpy separately.; This is my current `qutip.about()`; ```; QuTiP Version: 4.6.2; Numpy Version: 1.22.0; Scipy Version: 1.7.3; Cython Version: 0.29.25; Matplotlib Version: 3.5.0; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\Stela Kusar\anaconda3\envs\qutip-env\lib\site-packages\qutip; ```,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1750#issuecomment-1006378710:110,install,install,110,https://qutip.org,https://github.com/qutip/qutip/issues/1750#issuecomment-1006378710,3,"['Install', 'install']","['Installation', 'Installed', 'install']"
Deployability,Thank you for creating this thread and encouraging to see that there are more people raising the same issues. I saw it one week ago and came to the conclusion that my research group would be much helped if QuTiP used int64 for the sparce matrix indices. I have the following questions:; 1. When do you decide if you go int64?; 2. How long would it take for you to implement this update?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-383573047:379,update,update,379,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-383573047,1,['update'],['update']
Deployability,"Thank you for doing this quickly, I guess you did until quite late. Yes, tests in `test_integrator` are parameterized over all integrators registered in `sesolve_integrators`, etc.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925428011:127,integrat,integrators,127,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925428011,1,['integrat'],['integrators']
Deployability,Thank you for finding it. You can make a patch if you have time. nonhermitian's `np.iinfo(np.int32).max` seems the best solution. seeds should be `dtype=np.uint32`,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/968#issuecomment-478688966:41,patch,patch,41,https://qutip.org,https://github.com/qutip/qutip/issues/968#issuecomment-478688966,1,['patch'],['patch']
Deployability,"Thank you for looking into this issue. I tried doing as instructed but it doesn't seem to be able to execute the command succesfully. This has been running for 30min now:; ![imagen](https://user-images.githubusercontent.com/85493516/148235603-f69bf0f7-6f69-4eac-8479-863ab7aa3872.png). Below here my qutip.about(). ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.3; Scipy Version: 1.7.1; Cython Version: 0.29.24; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\Stela Kusar\anaconda3\lib\site-packages\qutip; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1750#issuecomment-1005741549:1057,Install,Installed,1057,https://qutip.org,https://github.com/qutip/qutip/issues/1750#issuecomment-1005741549,2,['Install'],"['Installation', 'Installed']"
Deployability,"Thank you for picking up my suggestion in #1096. ### Suggested Changes; - 1) There are some minor issues with CodeClimate ([here](https://codeclimate.com/github/qutip/qutip/pull/1187)). @christian512 can you please reformat to 79 lines?; This can be done with tools like `black`:; ```; pip install black; black circuit.py --line-length 79; ```; - 2) @christian512 could you add something also in `qutip-doc` to acknowledge the use of this library in the documentation? @BoxiLi recently added circuits to the User Guide, if I remember correctly. . ## Questions and comments; - 3) I then leave it to @BoxiLi to review the PR more closely, if he has time, otherwise I'll look into it this week. . - 4) Is there a problem in theory using `qcircuit` code, which is with license `gpl-2.0` into a BSD-new (maybe @Ericgig @ajgpitch or @goerz know more)?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1187#issuecomment-602522398:290,install,install,290,https://qutip.org,https://github.com/qutip/qutip/pull/1187#issuecomment-602522398,1,['install'],['install']
Deployability,"Thank you for pointing, these functions were added and modified over years and it would be a good idea to unify the documentation. . However we are short handed, so it will probably wait until we rework the dimension representation in a future major release; ( #1476). We are open to help until then.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1722#issuecomment-979361059:250,release,release,250,https://qutip.org,https://github.com/qutip/qutip/issues/1722#issuecomment-979361059,1,['release'],['release']
Deployability,Thank you for replying so quickly. I changed the definition as you mentioned and updated the example; no change in behavior.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/226#issuecomment-54697854:81,update,updated,81,https://qutip.org,https://github.com/qutip/qutip/issues/226#issuecomment-54697854,1,['update'],['updated']
Deployability,"Thank you for reporting, should work in 4.4.1 ; https://github.com/qutip/qutip/tree/qutip-4.4.1 (Should be released next week).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1067#issuecomment-520054549:107,release,released,107,https://qutip.org,https://github.com/qutip/qutip/issues/1067#issuecomment-520054549,1,['release'],['released']
Deployability,"Thank you for reporting, the fix is available in the qutip-4.7.X branch.; We will try to make a release with the fix soon.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182#issuecomment-1608172869:96,release,release,96,https://qutip.org,https://github.com/qutip/qutip/issues/2182#issuecomment-1608172869,1,['release'],['release']
Deployability,"Thank you for reporting.; There seems to be an issue with our detection of mkl for a while.; Since it's an optional dependancy, the related tests have been quietly skipped for a while... You could probably manually import it until we make a patch:; ```; from ctypes import cdll; import sys; import os. qutip.settings._mkl_lib = cdll.LoadLibrary( os.path.dirname(sys.executable) + r'\Library\bin\mkl_rt.dll' ); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2496#issuecomment-2243309367:241,patch,patch,241,https://qutip.org,https://github.com/qutip/qutip/issues/2496#issuecomment-2243309367,1,['patch'],['patch']
Deployability,"Thank you for reporting.; This should be already fixed in the `master` branch.; You can use `master`, we keep it stable enough that it can be used at any time, or wait for the next release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1640#issuecomment-902706073:181,release,release,181,https://qutip.org,https://github.com/qutip/qutip/issues/1640#issuecomment-902706073,1,['release'],['release']
Deployability,"Thank you for reporting.; Yes, Qutip does not work with cython 3.0.0.; I found a bug in cython trying to fix it so the patch could take some time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2198#issuecomment-1642186485:119,patch,patch,119,https://qutip.org,https://github.com/qutip/qutip/issues/2198#issuecomment-1642186485,1,['patch'],['patch']
Deployability,"Thank you for taking this issue. The contribution to the phase is `np.exp(1.0j * 1 * phi)`, ignoring the `m` and it's not documented. So I guess all ket are `m = 1`...; Since it's wrong and not documented, you are free to choose which ever way you prefer. But please update the docstring so that is is clear.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1839#issuecomment-1082462658:267,update,update,267,https://qutip.org,https://github.com/qutip/qutip/issues/1839#issuecomment-1082462658,1,['update'],['update']
Deployability,"Thank you for the answer. I will try to use functions as you suggested. I didn't know how to use pdb so I didn't know what to do. I added print(e) but nothing happens. I can attach my code (in Jupyter notebook) if you'd like to look at it. To give you more information, I tried the same code in a Linux machine and it works fine. So I think the problem might be for Mac computers only. Also, these problem popped up after I upgraded to qutip 4.5. The problem didn't go away when I reverted to the previous Conda environment though...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1196#issuecomment-596178441:424,upgrade,upgraded,424,https://qutip.org,https://github.com/qutip/qutip/issues/1196#issuecomment-596178441,1,['upgrade'],['upgraded']
Deployability,"Thank you for the comments! . Also, as someone who uses QuTip on a daily basis as part of my work, I was really happy with the changes and restructuring of the solver module. Thank you for the work 😄 . If I may take this opportunity to ask two things:; * I have been looking on Qutip 4.7 for ways to speed up the mc solver simulations, and one of them was to not compute the average density matrix for all times, but only for the last time. Since the behaviour at 4.7 of `mcsolve` was to average the state anyways (despite what I passed on the options object), I found a workaround by having an independent list to create my time dependant Hamiltonian and the `tlist` argument of the solver. Is this something achievable more straightforwardly/differently in Qutip 5.0?; * (shorter): Is there a roadmap for when will Qutip 5.0 be released?. Thank you for your time, and I hope its fine me asking here 😆",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2167#issuecomment-1571077559:830,release,released,830,https://qutip.org,https://github.com/qutip/qutip/pull/2167#issuecomment-1571077559,1,['release'],['released']
Deployability,"Thank you for the details on the new updates. @fminga's suggestions seemed reasonable to me: personally, I would be somewhat reluctant to modify something that is so much at the heart of the library machinery (master equations, etc.) for what seems a very specific use. I admit that part of this resistance is that I cannot really foresee the implications of this change. Now the Qobj permute tests are failing for example. I also see your point for more general definitions. I would recommend that docstrings and tests be included and possibly even some dev notebook or tutorial, or even just a gist here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1098#issuecomment-571299702:37,update,updates,37,https://qutip.org,https://github.com/qutip/qutip/pull/1098#issuecomment-571299702,1,['update'],['updates']
Deployability,"Thank you for the explanation @phfaist. I don't know the answer unfortunately. There are upcoming developments in quantum tomography with QuTiP, including recently added [notebooks](https://github.com/qutip/qutip-notebooks/pull/79), that warrant looking into this library integration further. . Besides this, regarding cvxpy, the package is now actively maintained also on conda forge https://anaconda.org/cvxgrp/cvxpy/files?page=1, we could add a check in the test failures to the to-do list...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/874#issuecomment-500419184:272,integrat,integration,272,https://qutip.org,https://github.com/qutip/qutip/issues/874#issuecomment-500419184,1,['integrat'],['integration']
Deployability,Thank you for the fix! I tested it locally and I was able to reproduce the error in #1753 and confirm it is fixed with this PR. `qutip.about()` also returns same message locally (not sure where it is tested if it is tested). It seems that CI was not complaining because we do not test for numpy 1.22 yet (although build requirements do install latest numpy version) but I think @hodgestar plans to include numpy 1.22 in the CI soon (see comments in #1747). I hope this PR can be merged soon as tests in PR qutip/qutip-tensornetwork#10 are failing due to `qutip.about()` not working with numpy 1.22.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1752#issuecomment-1005999347:336,install,install,336,https://qutip.org,https://github.com/qutip/qutip/pull/1752#issuecomment-1005999347,1,['install'],['install']
Deployability,Thank you for the helpful replies and the quick patch. I agree that defaulting to a unipartite system is what most users would expect.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/769#issuecomment-337920147:48,patch,patch,48,https://qutip.org,https://github.com/qutip/qutip/issues/769#issuecomment-337920147,1,['patch'],['patch']
Deployability,"Thank you for the review. > Could you add `mpi4py` to the requirement ins setup.cfg?; >; > You added the function to tests, but mpi4py is never installed for the automated tests. Did you try adding it to one of the job in `.github/workflow/tests.yml`? I am pretty sure it will run with only one process, but running the parallel function on one cpu is better than not testing it at all. If you tried and couldn't install mpi4py on github runner, please add a note about the issues somewhere. I have added it to setup.cfg, and now some tasks are failing.; * The documentation build fails because it can't install `mpi4py` (`mpi.h` is missing). I don't quite understand why that is... I can install `mpi4py` on my laptop without problems (it just uses regular parallel processes instead).; * The `mpi_pmap` tests are still being skipped. I'm sorry, but I don't understand what needs to be done with the `tests.yml`.; * The failing tests on ubuntu-latest, python 3.10 / 3.11 seem unrelated to my changes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1903335386:144,install,installed,144,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1903335386,4,['install'],"['install', 'installed']"
Deployability,"Thank you for the updates, @gsuarezr !. To give a brief summary of the progress: on our todo-list we have the following items left:; * Neill's comment above and one TODO comment I left somewhere in the code earlier; * Finishing tests for the environment module and the fitting utility function; * Adding tests for the HEOM solver using the new API; * Updating (at least some of) the HEOM tutorial notebooks to show off the new features. The main code and documentation is converging from our side, and I think ready for more detailed reviews.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2534#issuecomment-2437142464:18,update,updates,18,https://qutip.org,https://github.com/qutip/qutip/pull/2534#issuecomment-2437142464,1,['update'],['updates']
Deployability,Thank you for your continuous improvement. I will take a look at it next week.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1045249945:19,continuous,continuous,19,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1045249945,1,['continuous'],['continuous']
Deployability,"Thank you for your interest.; You are looking at the development version of the documentation (`master` instead of `latest`).; If you want to try that function, you will need to install qutip from source or wait until the 5.1 release. (Should be released this fall.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2525#issuecomment-2334203314:178,install,install,178,https://qutip.org,https://github.com/qutip/qutip/issues/2525#issuecomment-2334203314,3,"['install', 'release']","['install', 'release', 'released']"
Deployability,"Thank you for your prompt reply. @sahmed95. QuTip was installed on Windows; ```; pyhton 3.6.4; ```; We download anaconda and install QuTip from conda-forge with; ```; conda install -c conda-forge qutip; ```; but when run ; ```; import qutip.testing as qt; qt.run(); ```; the following message occurred:; ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transf",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:54,install,installed,54,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,5,"['Install', 'install']","['Installation', 'Installed', 'install', 'installed']"
Deployability,"Thank you for your swift response Eric. . Your suggestion helped me out. Apparently the relevant .dll file in my \Library\bin\ folder was named 'mkl_rt.2.dll', rather than 'mkl_rt.dll'. I duplicated the my file and renamed it and now everything works as expected. . It seems when qutip is checking for mkl with qutip.settings._find_mkl() it specifically looks for '\mkl_rt.dll'. Probably including the possibility for a deviation of the above form should patch it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2496#issuecomment-2243348834:455,patch,patch,455,https://qutip.org,https://github.com/qutip/qutip/issues/2496#issuecomment-2243348834,1,['patch'],['patch']
Deployability,"Thank you so much all of your help and for responding so quickly! The fix to the example works very well, thanks!. I am working on getting the patch working and installed commits ecca45c, 3e908bb, 8ce7757, 03b4cb7, 346b2e7, and a1c809a. I am getting a ValueError when I run the example and think I might have accidentally missed a commit - would you have an idea of what I might be missing? I am including my QuTiP version information below. Thanks for all of your help. QuTiP Version: 4.7.0.dev0+a1c809a; Numpy Version: 1.21.0; Scipy Version: 1.4.1; Cython Version: 0.29.24; Matplotlib Version: 3.4.2; Python Version: 3.7.6; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617#issuecomment-886058842:143,patch,patch,143,https://qutip.org,https://github.com/qutip/qutip/issues/1617#issuecomment-886058842,3,"['Install', 'install', 'patch']","['Installed', 'installed', 'patch']"
Deployability,Thank you! I'll try qutip-jax. Looking forward to the official release!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2320#issuecomment-1933954768:63,release,release,63,https://qutip.org,https://github.com/qutip/qutip/issues/2320#issuecomment-1933954768,1,['release'],['release']
Deployability,Thanks - I'm doing an install on behalf of one of our researchers - I'll pass comment back.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/491#issuecomment-224640717:22,install,install,22,https://qutip.org,https://github.com/qutip/qutip/issues/491#issuecomment-224640717,1,['install'],['install']
Deployability,"Thanks @BoxiLi ; Okay, embarrassingly, I was still in my `update-4,x` branch, so hence didn't find the file. Still, I did try a lot of stuff like `from qutip import hadamard_transform` (in other envs) that didn't work, before I found (with some help) that `from qutip import gates` is a good option. It seems like there was a deliberate choice not to expose the function names individually. A search for ""hadamard_transform"" or ""gates"" does not return anything helpful. Does it need pointing at in the docs build?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2389#issuecomment-2046653469:58,update,update-,58,https://qutip.org,https://github.com/qutip/qutip/issues/2389#issuecomment-2046653469,1,['update'],['update-']
Deployability,Thanks @cgranade. @BoxiLi what's the timeline to remove `qip` from `qutip/qutip`? Are we waiting the QuTiP 5 release?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1781#issuecomment-1028904411:109,release,release,109,https://qutip.org,https://github.com/qutip/qutip/pull/1781#issuecomment-1028904411,1,['release'],['release']
Deployability,"Thanks @eendebakpt for the fix! ; However, a similar fix was already included in dev.major in #1918. The only difference with your approach is that I did not include a try expect for import of iPython because the relevant change for the print_figure function was done 8 years ago. Besides, there is also the issue that currently our tests workflows do not install ipython so `repr` in your tests will not call `_repr_svg_`. Sorry I did not include this fix in master as well, but if you want it to be fixed I recommend cherry-picking the commits of #1918.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1943#issuecomment-1166512776:356,install,install,356,https://qutip.org,https://github.com/qutip/qutip/pull/1943#issuecomment-1166512776,1,['install'],['install']
Deployability,"Thanks @tehruhn for swiftly addressing this issue opened by @Titanosaurus. Please remember update the change log and .rst documentation file, when you manage. (It may be nice to find a way to remind contributors to update the Change log for the new version release, or understand how this can be partly done automatically, as in qiksit).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1104#issuecomment-542009457:91,update,update,91,https://qutip.org,https://github.com/qutip/qutip/pull/1104#issuecomment-542009457,3,"['release', 'update']","['release', 'update']"
Deployability,"Thanks Jake. I've raised the Issue in regards to building deb packages from source (https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=999517), so pip can't be used in that context. The Debian build machinery invokes `python3 setup.py {config,build,install}` not `setup.py develop`, c.f. past build log with numpy 1.19 [here](https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-2&stamp=1630423818&raw=0).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1720#issuecomment-974835138:248,install,install,248,https://qutip.org,https://github.com/qutip/qutip/issues/1720#issuecomment-974835138,1,['install'],['install']
Deployability,"Thanks Nathan. Once I install your versions of the packages and Python 3.7, these errors are gone.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1018#issuecomment-501582503:22,install,install,22,https://qutip.org,https://github.com/qutip/qutip/issues/1018#issuecomment-501582503,1,['install'],['install']
Deployability,"Thanks Paul, I forgot to make the actual release!. Did you find my little script in qutip-doc for stripping the underscores?. On 12 March 2017 at 16:06, Paul Nation <notifications@github.com> wrote:. > Nevermind. Forgot about the underscore issue with jekyll.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/649#issuecomment-285954579>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7U6T0rFVTeBAjupMlDimnzs4dc7Eks5rlBgfgaJpZM4MI5S0>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/649#issuecomment-286080945:41,release,release,41,https://qutip.org,https://github.com/qutip/qutip/issues/649#issuecomment-286080945,1,['release'],['release']
Deployability,"Thanks a lot for the update! Could you please add few unit tests for this module, perhaps based on some of the examples from your notebook?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/282#issuecomment-69420379:21,update,update,21,https://qutip.org,https://github.com/qutip/qutip/pull/282#issuecomment-69420379,1,['update'],['update']
Deployability,"Thanks again for this, that's good to know. With these and related changes we have got some nice speed improvements :-). https://github.com/qutip/continuous-benchmark",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/58#issuecomment-25672612:146,continuous,continuous-benchmark,146,https://qutip.org,https://github.com/qutip/qutip/pull/58#issuecomment-25672612,1,['continuous'],['continuous-benchmark']
Deployability,"Thanks alot for your great help.; Activating conda solved the problem, but still the command ""import numpy as; np"" leads to the following error:. File ""<stdin>"", line 1; import numpy as np; ^; IndentationError: unexpected indent. Other commands like ""import matplotlib.pyplot as plt"" works fine but; something like ""r=np.random.rand(4,4)"" does not work.; My numpy version is 1.19.2. Would you please help me to solve the problem.; Many thanks. On Tue, Dec 1, 2020 at 12:44 AM Boxi Li <notifications@github.com> wrote:. > Every time you open a new terminal, you will need to activate the conda; > environment by conda activate qutip-env. QuTiP is only installed in this; > environment. If you are interested, you could check; > https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html; > for details.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1391#issuecomment-736060302>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AR53J43QBLGZO3C3WKRB7BDSSQDMJANCNFSM4UGXA6UA>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1391#issuecomment-736727232:651,install,installed,651,https://qutip.org,https://github.com/qutip/qutip/issues/1391#issuecomment-736727232,1,['install'],['installed']
Deployability,"Thanks for merging!; Is it possible to make a release of qutip 4? Or, if you have a set release calendar, when to expect it?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2283#issuecomment-1887804548:46,release,release,46,https://qutip.org,https://github.com/qutip/qutip/pull/2283#issuecomment-1887804548,2,['release'],['release']
Deployability,"Thanks for pointing this out. I did not know that this was the case. Ironically the complex numbers are done this way to support compilers (VS in particular) that do not obey C99. The suggested patch is a bit difficult to implement as the runtime generated Cython code is compiled via pyximport and getting in there to change the c files would be a bit tricky. However, I know that the Intel compiler has no problem with the Cython code (at least on Linux). So perhaps that is the way to go for Python 3.5.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/447#issuecomment-222288358:194,patch,patch,194,https://qutip.org,https://github.com/qutip/qutip/issues/447#issuecomment-222288358,1,['patch'],['patch']
Deployability,"Thanks for reporting this problem! It seems to be related to the recent numpy 1.9 (works fine with older numpy releases). We should either add `dtype=object` in the call to np.array or use list, as you suggests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/228#issuecomment-55124130:111,release,releases,111,https://qutip.org,https://github.com/qutip/qutip/issues/228#issuecomment-55124130,1,['release'],['releases']
Deployability,"Thanks for reporting this, indeed it was missing. I have made a PR to fix it. After the PR is merged, you can use the fixed version by compiling `qutip` from the source yourself or wait for the next release (in a few weeks hopefully). If you want to use the fixed sooner and without compiling `qutip` yourself. An alternative is to use the [`qutip-qip`](https://github.com/qutip/qutip-qip) package. Which is equivalent to the module `qutip.qip` you are using. Everything should work if you replace `from qutip.qip import ...` by `from qutip_qip import ...`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1602#issuecomment-875407374:199,release,release,199,https://qutip.org,https://github.com/qutip/qutip/issues/1602#issuecomment-875407374,1,['release'],['release']
Deployability,"Thanks for reporting this. The new version of packaging removed LegacyVersion. They deprecated *constructing* LegacyVersion for two years, but not doing the right thing and raising an error on LegacyVersion ourselves (which we do). So we'll have to remove our check and release 4.7.1 to fix this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2036#issuecomment-1342764859:270,release,release,270,https://qutip.org,https://github.com/qutip/qutip/issues/2036#issuecomment-1342764859,1,['release'],['release']
Deployability,"Thanks for reporting this. This is actually a bit of a concern - as far as I know none of the developers have the new ARM chips (or even macOS 11) and I don't know how long it'll be until CI servers have them, so there may be more bugs lurking for you. Please let us know if you have any more problems, especially building from source or string-format time-dependence - I'd expect those to be the most fragile to new kernel and hardware changes. @ajgpitch This is actually going to be a nuisance for distributing wheels too. I _think_ GH actions will have the necessary Xcode 12 support, but I'm not sure the multi-wheel tool I'm using does - the new Apple silicon is ARM not x86 so it needs different compilation. We may not be able to support M1 macs in binary releases initially.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1395#issuecomment-735863085:763,release,releases,763,https://qutip.org,https://github.com/qutip/qutip/issues/1395#issuecomment-735863085,1,['release'],['releases']
Deployability,"Thanks for reporting this. We've already fixed it in `master`, but haven't yet pushed a new patch release out. We hope to do that soon. You can temporarily work around it by installing SciPy 1.4 in your QuTiP environment, or building QuTiP from the latest source.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1304#issuecomment-651614556:92,patch,patch,92,https://qutip.org,https://github.com/qutip/qutip/issues/1304#issuecomment-651614556,3,"['install', 'patch', 'release']","['installing', 'patch', 'release']"
Deployability,"Thanks for reporting this. Yes, we certainly want the installation to be smooth on osx... Exactly what problems did you have with macports and xcode? I've got thing running on yosemite and macports, so that's certainly possible, but I have not installed this environment from scratch in a long while, so I don't know what difficulties you might encounter when doing this. . I've not used brew myself, but if you wrote down the steps you had to do to set up things with brew we could provide these as an alternative install path.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/265#issuecomment-64202123:54,install,installation,54,https://qutip.org,https://github.com/qutip/qutip/issues/265#issuecomment-64202123,3,['install'],"['install', 'installation', 'installed']"
Deployability,"Thanks for reviewing! Sounds good, will make those changes ASAP. . Quick disclaimer, I can't seem to install `cvxpy` on my machine without using anaconda, so I haven't run the qutip tests personally. I assume these run automatically in the pipeline. I have done a lot of testing independently though and the implementation seems to work very reliably (often giving more accurate results than the semidefinite program).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2416#issuecomment-2094916281:101,install,install,101,https://qutip.org,https://github.com/qutip/qutip/pull/2416#issuecomment-2094916281,2,"['install', 'pipeline']","['install', 'pipeline']"
Deployability,"Thanks for testing it. Macports still have some advantages over pip, since it supports dependencies on non-python packages. I'm not sure if installing qutip via pip from on a fresh system will resolve all dependencies properly (will have to test this more carefully before next qutip release). Homebrew looks interesting from this point of view (I don't like that everything has to be built from source with macports..) but it is a bit unfortunate that not all qutip dependencies are in the standard homebrew repository.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/62#issuecomment-27496281:140,install,installing,140,https://qutip.org,https://github.com/qutip/qutip/issues/62#issuecomment-27496281,2,"['install', 'release']","['installing', 'release']"
Deployability,"Thanks for the PR @terrorfisch!. I'm not very familiar with this so I'm probably making stupid mistakes. When I try locally `pip3 install \qutip`, also on WSL actually, it still chocks at the line `from Cython.Build import cythonize` in the `setup.py`. And I don't really understand why `pyproject.toml` can help come across that. Do you understand the reason behind why it should work?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1309#issuecomment-654957169:130,install,install,130,https://qutip.org,https://github.com/qutip/qutip/pull/1309#issuecomment-654957169,1,['install'],['install']
Deployability,Thanks for the comment and sorry for the typo. I corrected it. The issue still persists. I also updated [the question](https://quantumcomputing.stackexchange.com/questions/22187/qutip-vs-rk45-which-one-gives-the-correct-results-for-time-dependent-systems) on stack exchange.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986660625:96,update,updated,96,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986660625,1,['update'],['updated']
Deployability,"Thanks for the comment. I was not aware of the change, but actually I do not understand the meaning of partial trace over an object that is not made of multiple tensored objects? And the output in the previous case was the quantum object itself, i.e., there is no effect of `ptrace` if the object is already a single subspace object, right? I see it can come handy in some applications where there is an iterative process of partial tracing subsystems. Not sure of why the change was made, maybe @Ericgig knows more. I still need to understand better to have an opinion. Thanks for opening the issue. Maybe a deprecation warning could be of use, replacing the old mechanism, if the devs want to change the feature with a major release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1413#issuecomment-753941995:727,release,release,727,https://qutip.org,https://github.com/qutip/qutip/issues/1413#issuecomment-753941995,1,['release'],['release']
Deployability,"Thanks for the explanation. ; You'll see I found some relative imports i missed and updated, and Travis CI is off again",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/246#issuecomment-63487433:84,update,updated,84,https://qutip.org,https://github.com/qutip/qutip/pull/246#issuecomment-63487433,1,['update'],['updated']
Deployability,"Thanks for the interest! To be clear, I wasn't trying to suggest that the whole thing is in scope for QuTiP per se; this PR concerns calling a small one-file [client library](https://github.com/cgranade/tskmon-client) from QuTiP. Given the similarity with that and the PiCloud functionality's goal (integrate QuTiP with third-party web services), maybe a good architecture would be something like a `qutip.services` package, where the expectation is that each submodule would require some additional client library?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255#issuecomment-63312872:299,integrat,integrate,299,https://qutip.org,https://github.com/qutip/qutip/pull/255#issuecomment-63312872,1,['integrat'],['integrate']
Deployability,Thanks for the merge! Did you update the notebook as well? Thanks,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/783#issuecomment-352050277:30,update,update,30,https://qutip.org,https://github.com/qutip/qutip/pull/783#issuecomment-352050277,1,['update'],['update']
Deployability,"Thanks for the quick response - currently I've just pip-installed the package, but I would be happy to use the main branch if you would be able to fix this. I would find this very useful - for the quantities I am interested in calculating I need much less than 800 repeats to get convergence. I understand it is possible to calculate the expectation directly in ssesolve but I find it is useful to save the states to a file so I have more freedom to calculate a range of different operators at a later date.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2299#issuecomment-1904394637:56,install,installed,56,https://qutip.org,https://github.com/qutip/qutip/issues/2299#issuecomment-1904394637,1,['install'],['installed']
Deployability,Thanks for the reminder. I will discuss once with Nathan regarding some small changes and fix up all the pep8 issues. We are discussing if the name of the module should remain `piqs` and the class as `Dicke` following the manuscript. I will update this by tomorrow and we can merge it asap.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-368972564:241,update,update,241,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-368972564,1,['update'],['update']
Deployability,"Thanks for the response. Now that we have a second opinion from @ajgpitch, a class-based implementation would be awesome. That is of course if you can spare the extra effort @bencbartlett . If not then we can merge this now and open another PR to do this. Once again, thank you very much @bencbartlett for your contribution. Let me know your final comments on whether you can combine the functions to have a cleaner class-based module and I can merge this after. Thank you very much for the contribution. This will certainly be a major feature to showcase in the next version release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-385970958:576,release,release,576,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-385970958,1,['release'],['release']
Deployability,"Thanks for the review!. > * Should we stop the user from passing a list of kets to `mcsolve` directly?; > Presently it work but it's not documented (and list `ntraj` don't.). You are right, done. Of course we could also allow the same arguments for `mcsolve` as for `run`, but I thought it might be good to keep the `mcsolve` interface simpler. > * It would be nice to have the trajectories per initial state information stored in the result somewhere. I have added that information and checking it in a test. Edit: I forgot that I still haven't updated the docs. Will do that. Edit 2: Done",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143:546,update,updated,546,https://qutip.org,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143,1,['update'],['updated']
Deployability,"Thanks for the review, I'll update my MR accordingly :)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/762#issuecomment-337017576:28,update,update,28,https://qutip.org,https://github.com/qutip/qutip/pull/762#issuecomment-337017576,1,['update'],['update']
Deployability,"Thanks for this. We've already merged a fix to master (#1440), and we'll be releasing a new version of QuTiP in the coming days that will officially support Numpy 1.20. In the meantime, you can work around by pinning your Numpy version 1.19 (there are some other problems within all current released QuTiP versions when dealing with Numpy 1.20 as well).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1442#issuecomment-780017025:291,release,released,291,https://qutip.org,https://github.com/qutip/qutip/issues/1442#issuecomment-780017025,1,['release'],['released']
Deployability,"Thanks for your comment!; I somehow missed the note that it's on a TODO for the next major release - that's great, as it will make things a bit more consistent.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1672#issuecomment-929486716:91,release,release,91,https://qutip.org,https://github.com/qutip/qutip/issues/1672#issuecomment-929486716,1,['release'],['release']
Deployability,"Thanks for your comments @Ericgig , I will see if there is a way to implement the alternative solution while maintaining the backwards compatibility. Also I'll be happy to contribute and update the docs, let's keep this issue open, I have my full time work but after hours gradually I'll come up with a pull request.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1238#issuecomment-643878326:187,update,update,187,https://qutip.org,https://github.com/qutip/qutip/issues/1238#issuecomment-643878326,1,['update'],['update']
Deployability,"Thanks for your quick reply, I upgraded qutip and the issue is indeed fixed",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2438#issuecomment-2134117269:31,upgrade,upgraded,31,https://qutip.org,https://github.com/qutip/qutip/issues/2438#issuecomment-2134117269,1,['upgrade'],['upgraded']
Deployability,"Thanks for your replies.; I did not have any python on my computer. Firstly, I installed Anaconda, then build a qutip-env. I typed ""conda activate qutip-env"" and then used the following command to install the requirements: ""conda install numpy scipy cython matplotlib pytest pytest-cov jupyter notebook spyder"" .; Then, I added ""conda config --append channels conda-forge"", getting the following warning: ""conda-forge already in channels list, moving to the bottem"".; Then, I run ""conda install qutip"" with no errors.; qutip was installed in ""/root/anaconda3/env"" and i opened a terminal in ""/root"", typed ""python"" and then ""import qutip.testing as qt"" getting the above error.; I really appreciate any help!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1391#issuecomment-735554120:79,install,installed,79,https://qutip.org,https://github.com/qutip/qutip/issues/1391#issuecomment-735554120,5,['install'],"['install', 'installed']"
Deployability,"Thanks for your reply!; My conda version is 4.5.1, and qutip version is 4.2.0.; I use jupyter in anaconda as my IDE, instead of Visual Studio.; I have updated the conda and qutip and it doesn't work either.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/854#issuecomment-382595062:151,update,updated,151,https://qutip.org,https://github.com/qutip/qutip/issues/854#issuecomment-382595062,1,['update'],['updated']
Deployability,"Thanks for your work on this, @hodgestar . I hope you don't mind me asking: do you have a planned release date for `v4.7.1`? I just need to know so that I can decide whether I wait for it to be released or if I look for a temporary workaround.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2036#issuecomment-1344152741:98,release,release,98,https://qutip.org,https://github.com/qutip/qutip/issues/2036#issuecomment-1344152741,2,['release'],"['release', 'released']"
Deployability,"Thanks very much @Ericgig for preparing this!. I feel like it will be quite confusing if gates like `cnot` have different signatures than the ones in qutip-qip. Moreover, many of those gates/transformations are not only relevant to `qip`, but also used in other applications, so maybe we should keep more of them in the main qutip. One of the reasons that we want to include those gates into `qutip.operators` is because a few other downstream packages (e.g. `krylovsolver` that is now merged into qutip, and `qutip-tensornetwork` also uses Hadamard transform) also use them for testing (only) purposes. Having them in the main qutip may save them from depending on qutip-qip. I guess it would be better if we either; - Remove all qip and only define a few `_cnot`, `_swap` as private functions for testing inside the main qutip. And ask whoever else wants to use some gates to install `qutip-qip`. This may result in e.g. `qutip-tensornetwork` depending on `qutip-qip or having to implement a copy of some gates. or; - Include some more commonly used gates like `rx`, `ry` (they are unitaries generated by the Paulis and directly relevant to quantum control) `iswap` etc and keep them identical to the ones in qutip-qip, so that those who just want some gates for testing does not have to download the full qutip-qip. If the problem is the `qutip.qip.expand_operator`. I would argue that we can even include it into the main qutip. It is `tensor` + `permutation` and works not just for qubit systems, but also for other composite Hilbert spaces (provided a `dims`). It is quite handy not just for `qip`, but also for control and probably some other applications. What do you think?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1890#issuecomment-1120403103:878,install,install,878,https://qutip.org,https://github.com/qutip/qutip/pull/1890#issuecomment-1120403103,1,['install'],['install']
Deployability,"Thanks! I used git checkout for ecca45c and reinstalled with python setup.py install, and I get the following error for the minimal example:; ```; Traceback (most recent call last):; File ""MinimalErrorExample.py"", line 62, in <module>; result = cpo.optimize_pulse_unitary(drift, ctrls, U_0, U_targ, n_ts, evo_time, fid_err_targ=fid_err_targ, min_grad=min_grad, max_iter=max_iter, max_wall_time=max_wall_time, out_file_ext=f_ext, init_pulse_type=p_type, log_level=log_level,gen_stats=True,dyn_params=dict(oper_dtype=Qobj,sparse_eigen_decomp=True)); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 757, in optimize_pulse_unitary; gen_stats=gen_stats); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/pulseoptim.py"", line 459, in optimize_pulse; result = optim.run_optimization(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 957, in run_optimization; result = self._create_result(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/optimizer.py"", line 362, in _create_result; result.initial_fid_err = self.dynamics.fid_computer.get_fid_err(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 412, in get_fid_err; return np.abs(1 - self.get_fidelity()); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 422, in get_fidelity; self.fid_norm_func(self.get_fidelity_prenorm()); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 438, in get_fidelity_prenorm; dyn.compute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/dynamics.py"", line 1394, in compute_evolution; self.tslot_computer.recompute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/tslotcomp.py"", line 265, in recompute_evolution; prop_comp._compute_prop_grad(k, j); File ""/Us",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617#issuecomment-886098212:77,install,install,77,https://qutip.org,https://github.com/qutip/qutip/issues/1617#issuecomment-886098212,1,['install'],['install']
Deployability,"Thanks! I'll work out how to handle this numpy 1.20 C-API change properly before this is ready to merge, I think - turns out my reading of the numpy release notes was wrong, or (possibly) Cython is generating some compile-time-constant code it should be deciding at runtime (as of the latest numpy). Hopefully it's just a configuration change on our end that I can work out somewhere.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-770779664:149,release,release,149,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-770779664,2,"['configurat', 'release']","['configuration', 'release']"
Deployability,"Thanks!. @Ericgig ; > If you need to use an array coefficient and this is your restriction on tlist, use qutip.Cubic_spline (or build the QobjEvo before the solver, but I don't remember if it is safe in v4). This is exactly my case. I see, I can just give mesolve a Cubic_spline object, very nice. I didn't know that give `tlist` to mesolve is same as asking these intermediate results. I was using it just as a match for array coefficient. Actually, I've been using array coefficient for a while and I don't even know such functionality exists. And I remember someone else mentioned this to me before, so I shouldn't be the only one. I see in the doc there is a section mentioning it. Probably we could stress it a bit more. @jakelishman ; > We probably shouldn't mutate the given Options object, but the call as written here doesn't make a huge amount of sense - why would you want to run the integrator but not have any output stored at all? You'd just be spinning your processor. Sorry, my post was a bit unclear. I only need the final result. So I set `store_final_state=True`, but that doesn't change the behaviour of `store_state` at all. Indeed, I'm doing so just because I didn't know the solution Eric pointed out before. For me a warning before changing `Options` would be nice. And probably pointing out the solution Eric mentioned?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775319207:895,integrat,integrator,895,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775319207,1,['integrat'],['integrator']
Deployability,"Thanks, I'm glad that it's useful! I broadly agree that moving instructions to Anaconda makes a lot of sense, though I'd suggest keeping the alternative installation methods on a new page (""Advanced Installion,"" perhaps?), as they're still useful for less typical installations. As for the binstar/Anaconda cloud recipes, I do have a working Anaconda 2.3 installation for Windows 10 64-bit, but only for Python 2.7. I've had a lot of trouble with getting side-by-side of 2.7 and 3.4 on Windows for some reason, and there's a few 2-specific libraries I need. When I get through some of my current deadlines, I'll work on getting a Windows binstar recipe going for installing on 2.7, though I'd appreciate help getting it to work on 3.4 as well. Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-150433198:153,install,installation,153,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-150433198,5,"['Install', 'install']","['Installion', 'installation', 'installations', 'installing']"
Deployability,"Thanks, and I'm sorry for the hassle. No idea what happened last time. Perhaps it's related to using the legacy container? If you think it's helpful, I can play with `travis.yml` to try and [get the migration working](http://docs.travis-ci.com/user/migrating-from-legacy/?utm_source=legacy-notice&utm_medium=banner&utm_campaign=legacy-upgrade).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128693856:335,upgrade,upgrade,335,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128693856,1,['upgrade'],['upgrade']
Deployability,"Thanks, confirming the stray rhs*.pyx files are no longer installed in 4.4.1.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/987#issuecomment-547067014:58,install,installed,58,https://qutip.org,https://github.com/qutip/qutip/issues/987#issuecomment-547067014,1,['install'],['installed']
Deployability,"Thanks, it worked! I simply moved it to the library where third-party packages are installed in Canopy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/469#issuecomment-215968543:83,install,installed,83,https://qutip.org,https://github.com/qutip/qutip/issues/469#issuecomment-215968543,1,['install'],['installed']
Deployability,"Thanks, it works!; (And actually, PyPi is a better solution. (As you were using MacPorts, and its direct replacement is Homebrew, I though that there is a particular reason it won't work with `pip install qutip`.))",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/62#issuecomment-27495167:197,install,install,197,https://qutip.org,https://github.com/qutip/qutip/issues/62#issuecomment-27495167,1,['install'],['install']
Deployability,"Thanks, this helps track it down. It seems not to be an issue with ENR per se, but with the floquet steadystate solver itself (it also appears without using ENR states). . I think I pinned it down to two small bugs in that seem to have crept in to the solver with the data layer updates, I will make a PR for it and ping you for some feedback, if thats ok. We lack a sufficiently robust test for this solver really, if you can suggest something tractable (very small example, potentially analytical solution we can check against), it would be very helpful.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2386#issuecomment-2051189504:279,update,updates,279,https://qutip.org,https://github.com/qutip/qutip/issues/2386#issuecomment-2051189504,1,['update'],['updates']
Deployability,"Thanks. I added numpy, scipy and matplotlib to the modules not to be reloaded, and the issue seems to have resolved. By the way, I am using an old version of spyder on my device. Could that be the cause of this issue? I do not have the admin control over the device, so if that is likely a cause, I will ask the admin to update spyder.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2121#issuecomment-1469782342:321,update,update,321,https://qutip.org,https://github.com/qutip/qutip/issues/2121#issuecomment-1469782342,1,['update'],['update']
Deployability,"Thanks. I was thinking of restarting the build. Since the PR for the bump worked out just fine (#890), I guess this is okay. Making a new release now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/889#issuecomment-403668485:138,release,release,138,https://qutip.org,https://github.com/qutip/qutip/pull/889#issuecomment-403668485,1,['release'],['release']
Deployability,"Thanks. Looking good so I'm merging. PS. You do not need to create a new PR when updating a file in a PR. Just commit and push more changes into the branch that you made the pull request from and the PR will be automatically updated. This PR #44 could therefore have a continuation of PR #43. Not a big deal, JFYI.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/44#issuecomment-22769605:225,update,updated,225,https://qutip.org,https://github.com/qutip/qutip/pull/44#issuecomment-22769605,1,['update'],['updated']
Deployability,Thanks. The many files in the diff is because you merged with master rather than rebased to latest commit in master. It's not a problem. I'll take care of this PR manually because if the remaining merge conflicts. This will be the last PR that is excepted for the 3.1 release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/301#issuecomment-68475039:268,release,release,268,https://qutip.org,https://github.com/qutip/qutip/pull/301#issuecomment-68475039,1,['release'],['release']
Deployability,"That is true. I'll try to look into why this is the case. However, it does have three expectation calculated. You can check this with output.expect ! . Edit: . So, I just realized that the noise-spectrum is associated with the coupling operator [sigmax()], I think the correct call to brmesolve must infact be (updated to current qutip standards) . `output = brmesolve(H, psi0, tlist, [[sigmax(), ohmic_spectrum]], e_ops)`. This is in line with the notation we use in example (https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/brmesolve-time-dependent-Liouvillian.ipynb). I will make a pull request updating both the example notebook (http://qutip.org/docs/4.0.2/guide/dynamics/dynamics-bloch-redfield.html ) to reflect this and make sure we depreciate the spectra_cb argument in bloch_redfield_tensor to eliminate the confusion. Thanks for bringing this to notice !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703:311,update,updated,311,https://qutip.org,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703,1,['update'],['updated']
Deployability,"That last commit updates the versions of macOS and XCode that we test against. XCode 12 is comparatively very slow (both compile and run), so we should likely try to figure out why that's the case and improve it. We made the same commit on `dev.major` in #1348.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1347#issuecomment-680065748:17,update,updates,17,https://qutip.org,https://github.com/qutip/qutip/pull/1347#issuecomment-680065748,1,['update'],['updates']
Deployability,"That's a good question... I'm not sure if we should update parfor or create new functions parallel_map, but this is a first attempt to try to generalize the parfor functions we have to work with functions that take arbitray arguments and keyword arguments, and that works with the ui.progressbar interface. The main point here is that I want the multiprocessing and IPython.parallel backed impementation of ""par_something"" to be swappable. The ones we have now are not. If we can agree on a new API for how these functions should behave we could update the old parfor functions instead of creating new ones. However, this would break backwards compatibility in some minor ways, so I didn't want to mess with the existing parfor functions, since they are part of our published API. Hence the new functions.. I know it's not ideal to have alternative functions that does the same thing, but also not good to break backwards compatibility.. Also, the parfor name is a bit of a misnomer, since it is a map function rather than a for loop.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/253#issuecomment-63156126:52,update,update,52,https://qutip.org,https://github.com/qutip/qutip/pull/253#issuecomment-63156126,2,['update'],['update']
Deployability,"That's actually a very nice solution that I hadn't thought about. I guess it's kind of weird that we have a `try/finally` directly inside a context manager, but effectively we're just monkey-patching the `__exit__` method so that `os.chdir(previous_dir)` gets called first, so it's always going to look a little funky. There's our nice commit that swaps them over.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605345803:191,patch,patching,191,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605345803,1,['patch'],['patching']
Deployability,"The ""known issues"" are definitely still there. They cause whatever `dnorm` does using cvxpy to fail, just through having `mkl` as a conda package. `test_metrics` uses the `qutip.settings.has_mkl` to determine whether to skip the dnorm tests. This however is False whenever blas_info is not mkl, mkl could still be installed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/872#issuecomment-394201492:314,install,installed,314,https://qutip.org,https://github.com/qutip/qutip/issues/872#issuecomment-394201492,1,['install'],['installed']
Deployability,"The Read The Docs version is compiled on each commit, but the website version requires downloading the update version and manually updating the website repo.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2104#issuecomment-1454074321:103,update,update,103,https://qutip.org,https://github.com/qutip/qutip/issues/2104#issuecomment-1454074321,1,['update'],['update']
Deployability,The Travis CI should be up and running now. Can you rebase your PR so we can rerun the tests with the latest travis ci configuration?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/76#issuecomment-36082072:119,configurat,configuration,119,https://qutip.org,https://github.com/qutip/qutip/pull/76#issuecomment-36082072,1,['configurat'],['configuration']
Deployability,"The Travis build seems to create a new conda env each time it runs the test. Consequently it downloads and installs the latest [conda] numpy, scipy etc. I tried creating a fresh conda env yesterday and found that the numpy version was higher than my qutip dev env, which I created a few months ago.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/379#issuecomment-148349639:107,install,installs,107,https://qutip.org,https://github.com/qutip/qutip/pull/379#issuecomment-148349639,1,['install'],['installs']
Deployability,"The Windows test failure is the strange ""Tcl is not properly installed one"". Someone else reported this at https://github.com/microsoft/azure-pipelines-tasks/issues/16426 so I mentioned that we see it too. I linked to this build failure there, so please don't re-run it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1968#issuecomment-1207185394:61,install,installed,61,https://qutip.org,https://github.com/qutip/qutip/pull/1968#issuecomment-1207185394,2,"['install', 'pipeline']","['installed', 'pipelines-tasks']"
Deployability,The [workaround](https://stackoverflow.com/questions/58897928/macos-sdk-headers-for-macos-10-14-pkg-is-incompatible-with-this-version-of-maco) for me seems to be ; ```; sudo rm -rf /Library/Developer/CommandLineTools; xcode-select --install; cd /Library/Developer/CommandLineTools/Packages/; open macOS_SDK_headers_for_macOS_10.14.pkg; ```,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1030#issuecomment-593426036:233,install,install,233,https://qutip.org,https://github.com/qutip/qutip/issues/1030#issuecomment-593426036,1,['install'],['install']
Deployability,"The `Qcircuit.tex` PR was unfortunately many many years ago, long before I made my first commit to QuTiP (according to `git log` it was by Anubhav Vardhan in 2014), so the damage is already done. It was on my mind because there was a PR about updating the version of the code in it (#1187). Nonetheless, we definitely should remove it. @BoxiLi Boxi: `Qcircuit.tex` is a concern for `qutip-qip` more than the main library from 5.0 onwards - it's currently in `qip/circuit_latex.py`, which we'll have removed, but you've gained. It might be most appropriate to handle this the same way Qiskit does - generate code which does `\usepackage{qcircuit}`, and leave it up to the user to have a properly-provisioned LaTeX environment. I note that `qcircuit` is included in MikTeX and TexLive since at least 2018 (but not sure when exactly it was added). > Yeah putting years I think is the correct thing. Didn't know that at the time. Ah, that's good to know, thanks. I'm trying to learn more about licensing - I'm trying to get it sorted now into the right form, but it's a really complicated field. I think if we change `LICENCE.txt` to. ```text; Copyright (c) 2011--2021 Paul Nation and Robert Johansson.; Copyright (c) 2021--2021 QuTiP Admin Team.; All rights reserved. <BSD 3-clause licence>; ```. and update the final `2021` as appropriate, we'll be in the best standing. That's also why we might want to remove the general licence text from each file - it's already redundant, but it'll be much harder to update if we have it scattered everywhere (automation would run the risk of us messing up and changing any external code's licence as well, I think, which would be wrong). > Look forward to talking to you in July!. Me too!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845:1298,update,update,1298,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845,2,['update'],['update']
Deployability,"The `fidelity` function use the Nielsen & Chuang definition. In a future release, [process_fidelity](https://github.com/qutip/qutip/blob/eeae142630e23818cd08a6b3ea5f6145e3e60225/qutip/core/metrics.py#L148), will be the fidelity version you expect.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2102#issuecomment-1450305103:73,release,release,73,https://qutip.org,https://github.com/qutip/qutip/issues/2102#issuecomment-1450305103,1,['release'],['release']
Deployability,"The array interface is now working for qutip master, but I don't know when it will be made in a release.; overlap between operator is also added.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/938#issuecomment-445046066:96,release,release,96,https://qutip.org,https://github.com/qutip/qutip/issues/938#issuecomment-445046066,1,['release'],['release']
Deployability,"The bug in 1) seems to refer to Issue #1008 due to #999, the incompatibility of current version releases with SciPy 1.3. Try to pinpoint in your virtual environment the version of SciPy to 1.2.1.; Something like `pip install scipy==1.2.1` should work. Also, this is a minor thing but please refer to the current documentation, http://qutip.org/docs/latest/installation.html (QuTiP 4.3, not 4.1). . In a conda environment everything should work properly with these specifications:; ```; QuTiP Version: 4.3.1; Numpy Version: 1.15.4; Scipy Version: 1.2.1; Cython Version: 0.29.8; Matplotlib Version: 3.1.0; Python Version: 3.7.3; Number of CPUs: 2; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /miniconda3/lib/python3.7/site-packages/qutip; ```; Also, consider upgrading to python 3.6 or 3.7.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1018#issuecomment-501560442:96,release,releases,96,https://qutip.org,https://github.com/qutip/qutip/issues/1018#issuecomment-501560442,5,"['Install', 'install', 'release']","['Installation', 'Installed', 'install', 'installation', 'releases']"
Deployability,"The canopy needs to be updated as it points toward an old os 10.6 whose SDK is not available on your newer osx. . Paul. > On Oct 14, 2015, at 13:49, rjmagyar notifications@github.com wrote:; > ; > I just built and installed Qutip on the command line using Enthought python. No errors...; > ; > Then when I run I get:; > ; > Enthought Canopy Python 2.7.9 | 64-bit | (default, May 20 2015, 20:01:56) ; > [GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.6)] on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > ; > from qutip import *; > Compiling with an SDK that doesn't seem to exist: /Developer/SDKs/MacOSX10.6.sdk; > Please check your Xcode installation; > In file included from /usr/local/lib/gcc/x86_64-apple-darwin14.4.0/5.1.0/include-fixed/syslimits.h:7:0,; > from /usr/local/lib/gcc/x86_64-apple-darwin14.4.0/5.1.0/include-fixed/limits.h:34,; > from /Applications/Canopy.app/appdata/canopy-1.5.4.3105.macosx-x86_64/Canopy.app/Contents/include/python2.7/Python.h:19,; > from /Users/rjmagya/.pyxbld/temp.macosx-10.6-x86_64-2.7/pyrex/qutip/cy/spmatfuncs.c:16:; > /usr/local/lib/gcc/x86_64-apple-darwin14.4.0/5.1.0/include-fixed/limits.h:168:61: error: no include path in which to search for limits.h; > In file included from /Users/rjmagya/.pyxbld/temp.macosx-10.6-x86_64-2.7/pyrex/qutip/cy/spmatfuncs.c:16:0:; > /Applications/Canopy.app/appdata/canopy-1.5.4.3105.macosx-x86_64/Canopy.app/Contents/include/python2.7/Python.h:33:19: fatal error: stdio.h: No such file or directory; > compilation terminated.; > Traceback (most recent call last):; > File """", line 1, in ; > File ""/Users/rjmagya/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/qutip/init.py"", line 213, in ; > from qutip.qobj import *; > File ""/Users/rjmagya/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/qutip/qobj.py"", line 60, in ; > from qutip.ptrace import ptrace; > File ""/Users/rjmagya/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/382#issuecomment-148179436:23,update,updated,23,https://qutip.org,https://github.com/qutip/qutip/issues/382#issuecomment-148179436,3,"['install', 'update']","['installation', 'installed', 'updated']"
Deployability,"The compulsive renaming continues.; I also reduced the number of time steps in the test to speed things up, and set to ignore the IntegrationWarning",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455#issuecomment-194836741:130,Integrat,IntegrationWarning,130,https://qutip.org,https://github.com/qutip/qutip/pull/455#issuecomment-194836741,1,['Integrat'],['IntegrationWarning']
Deployability,The conflict is just because that trailing white space PR got merged. You can update from qutip master and resolve it locally. No worries.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1291#issuecomment-656382945:78,update,update,78,https://qutip.org,https://github.com/qutip/qutip/pull/1291#issuecomment-656382945,1,['update'],['update']
Deployability,"The conflicts are because first we branched qip_opt from master, but then qip_opt was not updated to master itself and I tried to update it against master since this will be a PR which gets merged into master and not your GSoC project. This led to many changes which happened over master and were not there in your PR and led to some conflicts between `master` and `qip_opt` I suppose.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1025#issuecomment-505057710:90,update,updated,90,https://qutip.org,https://github.com/qutip/qutip/pull/1025#issuecomment-505057710,2,['update'],"['update', 'updated']"
Deployability,"The default Apple `clang` version doesn't recognise `-fopenmp` out-of-the-box, because Apple don't ship an OMP library with macOS. You'll have more luck (with most C/C++ projects!) if you install a fully-featured compiler and environment. On [homebrew](https://brew.sh) you can find both `clang`/`clang++` and `gcc`/`g++`, both of which can be installed with OMP support. Make sure your set `PATH`/`CC`/`CXX` environment variables are set up correctly after you've installed, so you're calling the compiler you've just installed, not just the Xcode versions. This isn't a bug in QuTiP, although we could remember this when somebody's working on modernising the distribution - in C/C++ land, tools like `automake` run through a big list of things to check during build configuration, and one of them is if OMP appears to exist. That way the error message is a little clearer (although in this case it's reasonable clear if you're used to C compilers).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774:188,install,install,188,https://qutip.org,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774,5,"['configurat', 'install']","['configuration', 'install', 'installed']"
Deployability,The deprecation is because of the QuTiP 4.5 update. The notebook is a bit outdated. The importation should be `from qutip.qip.operations import *`. This should solve the problem,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1096#issuecomment-593089971:44,update,update,44,https://qutip.org,https://github.com/qutip/qutip/issues/1096#issuecomment-593089971,1,['update'],['update']
Deployability,"The deprecation warning from `scipy==1.11` reads; `DeprecationWarning: scipy.array is deprecated and will be removed in SciPy 2.0.0, use numpy.array instead`. However, clearly this functionality broke before that release; with some discussion here: ; - https://github.com/scipy/scipy/issues/19065#issuecomment-1678439743; - https://github.com/scipy/scipy/pull/19067",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2300#issuecomment-1906274768:213,release,release,213,https://qutip.org,https://github.com/qutip/qutip/issues/2300#issuecomment-1906274768,1,['release'],['release']
Deployability,"The dpsi option worked fine on my mac from jupyter. ; - please update the docstring to highlight this option (could also add the presence of the `name` option, besides directory and format); - It is a nice feature, it could be highlighted in the documentation, here https://github.com/qutip/qutip-doc/blob/master/guide/guide-bloch.rst; - add to 4.4.1 enhancements in the changelog, https://github.com/qutip/qutip-doc/blob/master/changelog.rst; Let's skip the codeclimate issues for the moment, but in the future it might be nice to refactor the Bloch class inner workings, as it took me a while to sort out issue #1027.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1104#issuecomment-541539574:63,update,update,63,https://qutip.org,https://github.com/qutip/qutip/pull/1104#issuecomment-541539574,1,['update'],['update']
Deployability,"The easiest would be to make special integrators for HEOM which take a dict of `QobjEvo`: `system = {(from, to): H0,}` and list of states. Then we loop over the items: `drho[from] = QobjEvo(t) @ rho[to]`. As long as the state can be represented in an array, every ODE from scipy, jax, etc can be used. We have tools to stack, unstack, split columns, etc, so the conversion between array and list of `Dense` is easy and efficient. For scipy integrators, that would only need to change 3 methods. Would that work on the HEOM side?; This mean we would need specialised integrator in JAX etc, but would be a lot easier than the stochastic ones so I don't think it's an issue. Changing the `QobjEvo` would be more work, but doable.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2384#issuecomment-2310307934:37,integrat,integrators,37,https://qutip.org,https://github.com/qutip/qutip/issues/2384#issuecomment-2310307934,3,['integrat'],"['integrator', 'integrators']"
Deployability,"The error comes from the file `/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py`. This file is no longer part of qutip (development version), so it must come from the old installation. Make sure you delete that file before installing the development version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42922781:186,install,installation,186,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42922781,2,['install'],"['installation', 'installing']"
Deployability,"The example provided no longer produces that error when I run it. However, the error still occurs whenever I run an odd value for N. I would like to look more into this issue and try to resolve it.; ### Code Output; For N=10 `0.006061302499141838 0.006061302499140235`; For N=5 `-inf 0.004046653546081098`; For N=7 `-inf 0.004630127471444943`; For N=9 `-inf 0.005564781691231526`; ### Your Environment; ```; uTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.12.0; Cython Version: 3.0.10; Matplotlib Version:3.5.1; Python Version: 3.10.12; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1919#issuecomment-2178970555:597,Install,Installed,597,https://qutip.org,https://github.com/qutip/qutip/issues/1919#issuecomment-2178970555,1,['Install'],['Installed']
Deployability,"The failing test in `CircuitSimulator` is likely from `run_statistics`, which collects all the possible outcomes wrt. the measurement result. If the measurement result is `None`, it will skip that state. I can also set tolerance there, or update the test.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1656#issuecomment-917056083:239,update,update,239,https://qutip.org,https://github.com/qutip/qutip/pull/1656#issuecomment-917056083,1,['update'],['update']
Deployability,"The fermionic stuff looks to me! For the change in the terminator, I see the logic I guess. Also makes it easier for the user to include it or not, without remaking the bath. I have some reservations about it just because I can imagine someone following the examples and using jupyter notebook rerunning the same cell multiple times and continuously modifying their Hsys or something? But that can just be made clear in the examples so lets go ahead and merge this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1726#issuecomment-987532370:337,continuous,continuously,337,https://qutip.org,https://github.com/qutip/qutip/pull/1726#issuecomment-987532370,1,['continuous'],['continuously']
Deployability,The first error generally occurs if you are running qutip from within the directory where you installed it,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/891#issuecomment-404096438:94,install,installed,94,https://qutip.org,https://github.com/qutip/qutip/issues/891#issuecomment-404096438,1,['install'],['installed']
Deployability,"The fix is already merged in the qutip-4.7.X branch (#2178).; I can't say when the patch will be officially released, but I am expecting it to come sooner than later.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2179#issuecomment-1601564240:83,patch,patch,83,https://qutip.org,https://github.com/qutip/qutip/issues/2179#issuecomment-1601564240,2,"['patch', 'release']","['patch', 'released']"
Deployability,"The fix seems to be rather straight forward in that the `_get_coord_info_new` function in `_remove_margins` needs to be updated to the new matplotlib one. . I could get on it myself later this week and create a PR. However this fix would probably lead to an incompatibility with `matplotlib<=3.9`, how would this be generally handled?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2535#issuecomment-2370679738:120,update,updated,120,https://qutip.org,https://github.com/qutip/qutip/issues/2535#issuecomment-2370679738,1,['update'],['updated']
Deployability,"The fixes in #1471 were released in 4.6.0, Neill reported that it worked for him, so I'm closing this issue for now. Please comment or reopen it if there is more to report.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1378#issuecomment-892638766:24,release,released,24,https://qutip.org,https://github.com/qutip/qutip/issues/1378#issuecomment-892638766,1,['release'],['released']
Deployability,"The green line is after the first commit of this pull request where I used a for loop. The orange line is after the second commit when I switched to using numpy.cumprod.; The red line is from the quantum optics framework written in julia that I'm currently working on (https://github.com/bastikr/QuantumOptics.jl). While doing some benchmarks I realized that for large N qutips coherent function failed which is why I wrote this patch. I don't know where the constant offset in the benchmark originates from but I think the speed is fine now, creating coherent states is probably never a bottleneck anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/683#issuecomment-292929031:429,patch,patch,429,https://qutip.org,https://github.com/qutip/qutip/pull/683#issuecomment-292929031,1,['patch'],['patch']
Deployability,The heterodyne stochastic example was updated as part of this year's GSoC tutorial renovation project. The updated notebook can be found at https://nbviewer.org/urls/qutip.org/qutip-tutorials/tutorials-v4/time-evolution/015_smesolve-heterodyne.ipynb. Thank you for reporting this.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1029#issuecomment-1345303687:38,update,updated,38,https://qutip.org,https://github.com/qutip/qutip/issues/1029#issuecomment-1345303687,2,['update'],['updated']
Deployability,The issue seems that your version of `cvxpy` is not compatible with the version of `scipy` installed.; Try to update it and import it directly.; `cvxpy` is optional so you could also uninstall it before importing qutip.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2500#issuecomment-2248041684:91,install,installed,91,https://qutip.org,https://github.com/qutip/qutip/issues/2500#issuecomment-2248041684,2,"['install', 'update']","['installed', 'update']"
Deployability,The issue was with the conda update that pulled a libgcc package that broke Travis,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/758#issuecomment-332886926:29,update,update,29,https://qutip.org,https://github.com/qutip/qutip/pull/758#issuecomment-332886926,1,['update'],['update']
Deployability,"The latest attempt seems to correctly generate `egg_info` if NumPy is missing, if NumPy is present by not Cython, or if both are present. That should make it much easier to list QuTiP as an external dependency in `requirements.txt`, as our`setup.py` should no longer assume a particular install order. If the latest CI passes, I'll add the review merge ready label.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/489#issuecomment-225887759:287,install,install,287,https://qutip.org,https://github.com/qutip/qutip/pull/489#issuecomment-225887759,1,['install'],['install']
Deployability,"The latest release is 3.0.1 and current development version is 3.1.0 like the setup.py file suggest. Not sure why about reports 3.0.0, that's strange. Have you run setup.py install?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/236#issuecomment-56970079:11,release,release,11,https://qutip.org,https://github.com/qutip/qutip/issues/236#issuecomment-56970079,2,"['install', 'release']","['install', 'release']"
Deployability,The latest release of Qutip has some fixes for arrays of `Qobj`. Updating to 4.6.2 should solve the issue.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1661#issuecomment-919287769:11,release,release,11,https://qutip.org,https://github.com/qutip/qutip/issues/1661#issuecomment-919287769,1,['release'],['release']
Deployability,"The main function of the `Options` class is to hold the documentation of the options supported by solver, mostly integrator related ones are an issue. Since sub-packages can add new integration methods, it should be somewhere dynamic that can fetch them at runtime. We can't have them in the description of the function interface directly, but it must be clear from that documentation where to find them.; We can't have them in the documentation of the solver class. It could be in a solver instance, but that too late: needing to initialize a `BrSolver` or `HEOMSolver` just to know which options `bsmesolve` and `heomsolve` support is not user friendly.; The Integrator class is useless for the users: if they want to solve ODE, they should use `scipy.integrate`, for quantum systems evolution, `mesolve` etc. So we should not ask them to look there. `SolverOptions(name)` make it reasonably easy to check the supported options and their default before using the solver. Another approach I see is to fix the integrator when using the functions interface, this way we could properly document the function with all items from both the solver and integrator. When using the class interface, we keep both options separated (and make the choice of integrator it's own keyword):; ```; solver = SeSolver(H, integrator_method='adams', options=solver_options, ode_options=ode_options); solver.options # Solver options only. solver.set_integrator('vern7', ode_options); help(solver.ode_options) # See description of integrator options; ```. That way the function calls is very close to v4 and easy to use, and the class interface give access to new features. ; This also makes `krylovsolve` fit more. Since `method` is used by the solver, not the integrator, it should not be under the `options.ode`, but it seems confusing to have it with the normal options, so having it as an independent parameter could make it clearer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897:113,integrat,integrator,113,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897,9,"['Integrat', 'integrat']","['Integrator', 'integrate', 'integration', 'integrator']"
Deployability,"The main reason is time. I only have an occasional hour or two to put in. In addition, there are many holes in the docs and examples that need to be closed before a release. We are trying to take care of all of this before next years APS meeting.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/542#issuecomment-249343558:165,release,release,165,https://qutip.org,https://github.com/qutip/qutip/issues/542#issuecomment-249343558,1,['release'],['release']
Deployability,The new version is merged and will be released soon.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/738#issuecomment-465875615:38,release,released,38,https://qutip.org,https://github.com/qutip/qutip/issues/738#issuecomment-465875615,1,['release'],['released']
Deployability,The notebook book would live in here:; https://github.com/qutip/qutip-notebooks/tree/master/examples; We would then link it in here:; https://github.com/qutip/qutip.github.io/blob/master/tutorials.html; I guess in the Basics section. As for the qutip-docs:; It would be good to update functions.rst. This is for the auto-generated API docs. If you are feeling super keen then you could add a guide-measurement.rst in:; https://github.com/qutip/qutip-doc/tree/master/guide; and link it from:; https://github.com/qutip/qutip-doc/blob/master/guide/guide.rst. Barring a few build problems here and there the docs building has been okay recently (I think).; Instructions can be found here:; https://github.com/qutip/qutip-doc/blob/master/README.md,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-547176797:278,update,update,278,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-547176797,1,['update'],['update']
Deployability,"The old `cdef ndarray` syntax can _technically_ be a little faster in some Cython applications because it doesn't involve instantiating a new type; Cython just generates Numpy C-API code. However, this is legacy behaviour of Cython and using these variables generates very old Numpy C-API code in some instances (e.g. pre-Numpy 1.7 (2013)). The memory-view syntax does not require holding the GIL and is rather shorter and easier to read - the former makes threaded parallelisation more possible, particularly in `dev.major` where we are more aggressive about releasing the GIL during heavy computation. Closing for now because it's not really urgent to update old code, but we'll touch it up (speed permitting) as we modify this sort of file in the future. `dev.major` already removed well over half the uses of it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/866#issuecomment-809641984:654,update,update,654,https://qutip.org,https://github.com/qutip/qutip/issues/866#issuecomment-809641984,1,['update'],['update']
Deployability,"The options is in development ( #1231 ) , the options will be set in the qutiprc file. However it will probably not be released before end of fall if not winter.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1259#issuecomment-628263381:119,release,released,119,https://qutip.org,https://github.com/qutip/qutip/issues/1259#issuecomment-628263381,1,['release'],['released']
Deployability,"The parallel issue was resolved earlier. See the ipynbtools import of ipyparallel. ncps should not be an issue as it has always has fallen back on the multiprocessing count. > On Feb 9, 2016, at 18:40, Alexander Pitchford notifications@github.com wrote:; > ; > I was helping someone with an install on windows 7 yesterday.; > We were testing using a notebook, and it worked fine except the version_table. The first error was resolved by installing ipython parallel. Still after that it was failing with something like key 'ncpus' missing. Sorry for not supplying exact errors. I could ask the user to post them if necessary.; > ; > @nonhermitian is #421 likely to resolve this? Even if say they don't have win32com or comtypes installed?; > ; > —; > Reply to this email directly or view it on GitHub.; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/423#issuecomment-182174246:291,install,install,291,https://qutip.org,https://github.com/qutip/qutip/issues/423#issuecomment-182174246,3,['install'],"['install', 'installed', 'installing']"
Deployability,"The particular example that was given as an MKL error, is a tricky problem. Seems that the MKL cannot solve for it in the `power` steady mode. As such, I have implemented a 'solver' kwarg that allows for picking the solver that is used in the direct and power methods. The default is SciPy, which could be the usual SuperLU solver, or UMFPACK, if installed via scikits.umfpack. The 'mkl' option can be passed to do the mkl library. I will see what the Intel people have to say about solving the particular matrix that was given:. https://groups.google.com/d/msg/qutip/axGZ-7vtnhI/2Rlsl7ExAgAJ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/720#issuecomment-315449568:347,install,installed,347,https://qutip.org,https://github.com/qutip/qutip/pull/720#issuecomment-315449568,1,['install'],['installed']
Deployability,"The particular reported bug was fixed in #1199, and released in QuTiP 4.5.2.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1207#issuecomment-809399835:52,release,released,52,https://qutip.org,https://github.com/qutip/qutip/issues/1207#issuecomment-809399835,1,['release'],['released']
Deployability,"The problem is indeed the use of `blas_opt['extra_compile_args']`which works well on my mac too, but for some reason that I couldn't get to the bottom with, it does not work on the macports build environment. Perhaps the numpy dependency is not properly specified in the ports file, or something similar. I agree with the OP that it would be highly desirable to get this working, but right now i don't have the time work on trying to fix it. Unless it this get fixed somehow, we should probably revise the recommended installation instructions to use macports+pip or homebrew+pip instead.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/283#issuecomment-66273918:518,install,installation,518,https://qutip.org,https://github.com/qutip/qutip/issues/283#issuecomment-66273918,1,['install'],['installation']
Deployability,"The problem with windows has been that there was/is no free 64 bit compiler, and because of that it has been way easier to just install anaconda 32 and use mingw32 on windows (even on windows 64). . In principle is should be possible build and install qutip 64-bit version on windows with a commercial 64-bit compiler (e.g. Visual Studio), but since few people has access to such a compiler we have not tested this option. Perhaps mingw64 is now a viable option, but I'm not sure how useful it is now. Would be great if someone could test it. . Binary builds for 32 and 64 conda packages for windows would be highly desirable in my opinion. I have once created a conda package for qutip (https://github.com/conda/conda-recipes/tree/master/qutip) ; so if someone got the development environment with the required compilers setup for windows it should be straightforward to build the packages.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-145857462:128,install,install,128,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-145857462,2,['install'],['install']
Deployability,The recently released v5 support callback for `c_ops`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1254#issuecomment-2029218180:13,release,released,13,https://qutip.org,https://github.com/qutip/qutip/issues/1254#issuecomment-2029218180,1,['release'],['released']
Deployability,"The requirements are described in the pyproject.toml file (which seems to be considered the current ""best practice"" for Python projects) and the setup.cfg file (which is an older best practice). Typically for development one would install with either `python setup.py develop` or `pip install -e '.[full]'` both of which should read the dependencies from the pyproject.toml file. Closing this for now but happy to help more if needed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1763#issuecomment-1014882006:231,install,install,231,https://qutip.org,https://github.com/qutip/qutip/issues/1763#issuecomment-1014882006,2,['install'],['install']
Deployability,"The solver seems to be working nicely, and passes all the tests that I have come up with. The last few tests still need to be added, interpolation functions should be able to be used for H and c_op terms, and the docstrings need to be updated as there is a new preferred way to input the a_ops that eliminated the need for a spectra_cb kwarg.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/676#issuecomment-300685498:235,update,updated,235,https://qutip.org,https://github.com/qutip/qutip/pull/676#issuecomment-300685498,1,['update'],['updated']
Deployability,"The test failure on Python 3.6 appears to be due to some exceptionally weird behaviour by `conda` in the Travis setup - if you look closely, you can see that when it runs `conda uninstall cython`, it _downgrades_ `numpy` to 1.14.2. This would not be a problem in a `conda-forge` release build, because the `numpy` API dependency is pinned in the feedstock, but it is a potential problem on `pip` source builds. It's possible this super odd behaviour of `conda` is the cause of people's complaints on the email lists about failed imports. I will push a change to the requirements here to try and enforce `numpy >= 1.16.6`, which ought to solve the dependency issues. I will make a similar change on `master` and in #1429 (which I will likely back-port to master before 4.6).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1448#issuecomment-782105359:279,release,release,279,https://qutip.org,https://github.com/qutip/qutip/pull/1448#issuecomment-782105359,1,['release'],['release']
Deployability,"The tests don't work with numpy 1.25, the actual code work but raise warnings from time to time.; The fix is already merged in the qutip-4.7.X branch (#2178).; I can't say when the patch will be officially released, but I am expecting it to come sooner than later.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180#issuecomment-1601563608:181,patch,patch,181,https://qutip.org,https://github.com/qutip/qutip/issues/2180#issuecomment-1601563608,2,"['patch', 'release']","['patch', 'released']"
Deployability,"The tests fail because if one defines `f(t, args, k)` and defines `g = partial(f, k=0.5)` then the signature of g is `<Signature (t, args, *, k=5)>`. There will likely be other cases like this (e.g. many decorators will change the signature). I vote that we give up on all the complicated detection of the old syntax and simply ask users to change `f(t, args)` to `f(t, **args)` when they upgrade to QuTiP 5.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881:389,upgrade,upgrade,389,https://qutip.org,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881,1,['upgrade'],['upgrade']
Deployability,"The tests failed because of the recent packaging release (see #2037). The documentation builds passed though, so I'm merging this change to the documentation requirements.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2035#issuecomment-1342951991:49,release,release,49,https://qutip.org,https://github.com/qutip/qutip/pull/2035#issuecomment-1342951991,1,['release'],['release']
Deployability,"The tests ran fine, besides for the option with OpenMP, where it gave ; ```; /home/travis/miniconda/envs/test-environment/lib/python3.7/site-packages/qutip-4.5.0.dev0+2fe7701-py3.7-linux-x86_64.egg/qutip/__init__.py:166: UserWarning: matplotlib not found: Graphics will not work.; warnings.warn(""matplotlib not found: Graphics will not work.""); Calibrating OPENMP threshold...; No output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself.; Check the details on how to adjust your build configuration on: https://docs.travis-ci.com/user/common-build-problems/#build-times-out-because-no-output-was-received; The build has been terminated; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-566115975:557,configurat,configuration,557,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-566115975,1,['configurat'],['configuration']
Deployability,"The times at which the `L` are computed are not those at which the states are computed. It computes the derivative at times farther than the desired time and do an interpolation step to get the state. . Some feature (pulse) may be skipped by this method and you should set `Options(max_step=...)` with a `max_step` smaller than half the pulse width, but it should have no issue with a linear ramp. We use the `zvode` integrator of `scipy.integrate.ode`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1821#issuecomment-1058493500:417,integrat,integrator,417,https://qutip.org,https://github.com/qutip/qutip/issues/1821#issuecomment-1058493500,2,['integrat'],"['integrate', 'integrator']"
Deployability,"The tutorials only use it indirectly, so it's just qutip-qip that we need to update. Update: This might be a little tricky, since `qutip-qtrl` only supports QuTiP v5 and `qutip-qip` supports both v4 and v5.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2116#issuecomment-1466322463:77,update,update,77,https://qutip.org,https://github.com/qutip/qutip/pull/2116#issuecomment-1466322463,2,"['Update', 'update']","['Update', 'update']"
Deployability,"There are conda versions for cvxopt and cvxpy (https://anaconda.org/mcg/cvxpy) but nobody seems to be maintaining or updating them. Installing the conda version downgrades everything else. I will first try to fix the yml issue. Nothing seemed to be incorrect in the YML file, and the travis CI linter is not available, so I am not sure what is wrong with the file. Will update if I make progress.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/873#issuecomment-394298574:132,Install,Installing,132,https://qutip.org,https://github.com/qutip/qutip/pull/873#issuecomment-394298574,2,"['Install', 'update']","['Installing', 'update']"
Deployability,"There are no test code for progress bars yet.; You will need to create a new test file: `qutip/tests/test_progressbar.py`. The test can be as simple as creating the bar, call `update`, call `finished` and check that the total time is a sensible value.; You could also use pytest to catch print with [capsys](https://docs.pytest.org/en/7.1.x/how-to/capture-stdout-stderr.html#accessing-captured-output-from-a-test-function) and confirm that something was printed when `update` / `finished` is called.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520:176,update,update,176,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520,2,['update'],['update']
Deployability,"There are ten other test files with `from qutip import *`. I will fix these soon, as this may fix the problem we are experiencing with tests on Windows with the release we are trying to make",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/726#issuecomment-317071325:161,release,release,161,https://qutip.org,https://github.com/qutip/qutip/pull/726#issuecomment-317071325,1,['release'],['release']
Deployability,"There are two different issues and now I am realizing I should have filed them separately. One issue is that when I use a time-dependent Hamiltonian given in the list array format I get the wrong result. Your example doesn't contain a time-dependent Hamiltonian given in list array format. To reproduce the issue in your example I replaced; ```; H = [H0, [H1, 't']]; output = mesolve(H, psi0, tlist, c_op_list, [sm.dag() * sm], {}); ```; with; ```; H = [H0, [H1, tlist]]; output = mesolve(H, psi0, tlist, c_op_list, [sm.dag() * sm], {}); ```; For the other case (list callback format) I cannot reproduce the issue with your example. I am starting to think that this problem is not directly caused by having t[0] != 0. What I see is that for `t0 > 5` in my example, I get a constant output from mesolve when I should get an oscillatory solution. Is it possible that the numerical integration is failing silently and the returned expectation values are just for the initial condition?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/561#issuecomment-264643370:879,integrat,integration,879,https://qutip.org,https://github.com/qutip/qutip/issues/561#issuecomment-264643370,1,['integrat'],['integration']
Deployability,"There is no agreement on how this should be handled yet. It's been removed from `dev.major` with the plan to restore it before the release, but the exact interface is not fixed. It certainly will not be some special keyword in args. It could be a special value, or a special parameter / method for the solver class.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1142124017:131,release,release,131,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1142124017,1,['release'],['release']
Deployability,"There is no support at all right now, but it is in progress.; It should work with the QobjEvoFunc PR, but it will take a quite some time before it is finished, an more before it is merged and released, it probably won't come before v5. For now, H can be a callback to a liouvillian. So he can make it work like this:; ```; def L(t, args):; H = H(t, ...); c_op = C(H, t, ...); return qutip.liouvillian(H, [c_op]). mesolve(L, ..., c_ops=[]); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1260#issuecomment-627565548:192,release,released,192,https://qutip.org,https://github.com/qutip/qutip/issues/1260#issuecomment-627565548,1,['release'],['released']
Deployability,"There is one particular setup where the sparse eigen solver segfault. This happen with pure scipy and is not related to qutip.; Looking into it, I saw that when we installed qutip, it updated scipy version. It downgraded scipy 1.12 to 1.11, thus we never tested for 1.12.; Also build isolation meant that the version of numpy, scipy and cython we set in our test matrix did not match the one at installation. This is not ideal for cython since the compilation version could have a major impact. I set it to not use build isolation and used the matrix set version to compile qutip.; This had the side effect of not using the setup that caused the segfault and solving the failing test issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2361#issuecomment-2019207660:164,install,installed,164,https://qutip.org,https://github.com/qutip/qutip/pull/2361#issuecomment-2019207660,3,"['install', 'update']","['installation', 'installed', 'updated']"
Deployability,"There isn't a QuTiP build for Apple ARM CPUs on PyPI because we don't have the hardware to build it. I recommend installing from conda-forge by following the instructions at https://qutip.org/docs/latest/installation.html#installing-with-conda. You can also compile from source yourself by installing all the necessary dependencies, but I think try conda-forge first.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2027#issuecomment-1335129564:113,install,installing,113,https://qutip.org,https://github.com/qutip/qutip/issues/2027#issuecomment-1335129564,4,['install'],"['installation', 'installing', 'installing-with-conda']"
Deployability,"There's no link, just bad luck. This won't prevent merge - the tests clearly show your change is fine. Unfortunately our test suite isn't perfect, and sometimes it tries to integrate an insanely stiff system or something like that by accident.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050:173,integrat,integrate,173,https://qutip.org,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050,1,['integrat'],['integrate']
Deployability,"These failing tests are different from those random failing we've been seeing before. I also have this in my scheduler PR, but it is completely unrelated to the PR. It starts to appear yesterday, but nothing was merged in the last three weeks. Does anyone have a clue?. The error seems to come from the core data part @jakelishman @Ericgig. Scipy made a release 4 days ago and we are using one of the private attributes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-649280292:354,release,release,354,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-649280292,1,['release'],['release']
Deployability,"These fortran errors only appears when installing through the dist file. When installing from the source directory in the repo it works. Something is missing the the dist file, perhaps the .f2py_f2cmap file or something similar.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/197#issuecomment-49159675:39,install,installing,39,https://qutip.org,https://github.com/qutip/qutip/pull/197#issuecomment-49159675,2,['install'],['installing']
Deployability,"These tests are now skipped with the skipif decorator, but should be looked at again before next release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/30#issuecomment-35974556:97,release,release,97,https://qutip.org,https://github.com/qutip/qutip/issues/30#issuecomment-35974556,1,['release'],['release']
Deployability,This PR mainly reformats some line lengths. I'm going to reject it for now in favour of a more comprehensive update of this documentation for QuTiP 5 at some point.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1773#issuecomment-1168805739:109,update,update,109,https://qutip.org,https://github.com/qutip/qutip/pull/1773#issuecomment-1168805739,1,['update'],['update']
Deployability,"This bug is only in 4.4.0, the patch has not been released yet.; Don't use parallel_map in windows for mcsolve and stochastic solvers to go around it.; Or if you can install from source, the working version is in #1040",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1039#issuecomment-519914331:31,patch,patch,31,https://qutip.org,https://github.com/qutip/qutip/issues/1039#issuecomment-519914331,3,"['install', 'patch', 'release']","['install', 'patch', 'released']"
Deployability,"This commit, [1315742](https://github.com/qutip/qutip/commit/1315742843dd27a6505ef70b539fbcb4882a53f0), already has removed `from scipy import array` from `parallel.py`. But it appears this commit is not included in the most recent releases of 4.7.X. Edit:; The problem lies on this branch here: https://github.com/qutip/qutip/blob/qutip-4.7.X/qutip/parallel.py",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2300#issuecomment-1906351746:232,release,releases,232,https://qutip.org,https://github.com/qutip/qutip/issues/2300#issuecomment-1906351746,1,['release'],['releases']
Deployability,"This could possibly be fixed in new scipy https://github.com/scipy/scipy/pull/2972. I'd inadvertently introduced a speed regression for non-huge matrices when I changed the scipy expm implementation from Higham 2005 to 2009. Sorry about that. Although scipy expm has many unit tests, I'm not completely sure how it deals with complex matrices because the Higham codes are designed for 64 bit float. Also scipy doesn't have the continuous benchmarking like https://github.com/qutip/continuous-benchmark which would be awesome.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/182#issuecomment-48622482:427,continuous,continuous,427,https://qutip.org,https://github.com/qutip/qutip/pull/182#issuecomment-48622482,2,['continuous'],"['continuous', 'continuous-benchmark']"
Deployability,This did just bite me when trying to deploy QuTiP to MyBinder for my QuTiP SciPy tutorial and I can confirm this bug is incredibly annoying.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1915#issuecomment-1158105114:37,deploy,deploy,37,https://qutip.org,https://github.com/qutip/qutip/issues/1915#issuecomment-1158105114,1,['deploy'],['deploy']
Deployability,"This error comes from the integration algorithm.; Take a differential equation like dy/dt = -i*y.; With a simple method like euler: ; y(t+dt) = y(t) + f' dt = y(1-i*dt); So the norm increase exponentially *(1+dt**2) at each iteration, not somewhat randomly.; The default method we use is ""adams"" from scipy's solver, which is a lot better than euler, but still have a bias. We also stop the solver for re-normalization of the state from time to time, introducing another bias.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708:26,integrat,integration,26,https://qutip.org,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708,1,['integrat'],['integration']
Deployability,This error is because of a conflict between versions. Remove the old qutip installation in /usr/local/lib/python2.7/dist-packages/qutip and reinstall the development version.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42904625:75,install,installation,75,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42904625,1,['install'],['installation']
Deployability,"This fails for python2.7 and it might also be related to older scipy version. I could not even install it locally in my python2.7 conda environment with scipy 0.15 as I get some compile errors for the `cy/brtools` module. One more reason to move to Python 3 and update scipy perhaps. @ajgpitch . If you have seen this error before with a conda env clashing with the Python GIL, please let me know,; ```; qutip/cy/brtools.pyx:98:51: Converting to Python object not allowed without gil; Traceback (most recent call last):; ```; The conda environment is as follows:; ```; # packages in environment at /Users/shahnawaz/miniconda3/envs/python2:; #; # Name Version Build Channel; blas 1.0 mkl; ca-certificates 2018.4.16 0 conda-forge; certifi 2018.4.16 py27_0 conda-forge; cython 0.28.3 py27_0 conda-forge; intel-openmp 2018.0.3 0; libgfortran 3.0.1 h93005f0_2; mkl 2018.0.3 1; ncurses 5.9 10 conda-forge; numpy 1.9.3 py27hb3dd696_3; numpy-base 1.14.3 py27ha9ae307_2; openblas 0.2.20 8 conda-forge; openssl 1.0.2o 0 conda-forge; pip 9.0.3 py27_0 conda-forge; python 2.7.15 0 conda-forge; qutip 4.3.0.dev0+2a849f2e <pip>; readline 7.0 0 conda-forge; scipy 0.15.1 np19py27_0; setuptools 39.2.0 py27_0 conda-forge; sqlite 3.20.1 2 conda-forge; tk 8.6.7 0 conda-forge; wheel 0.31.0 py27_0 conda-forge; zlib 1.2.11 h470a237_3 conda-forge; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/861#issuecomment-396111344:95,install,install,95,https://qutip.org,https://github.com/qutip/qutip/pull/861#issuecomment-396111344,2,"['install', 'update']","['install', 'update']"
Deployability,This feels a bit weird. To update the qip_opt branch from the master. But I guess this is how it should be. @ajgpitch @BoxiLi,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1014#issuecomment-500747351:27,update,update,27,https://qutip.org,https://github.com/qutip/qutip/pull/1014#issuecomment-500747351,1,['update'],['update']
Deployability,"This file is now correctly distributed in the `4.6` sdist release (see #1449), though do note that people who want to use OpenMP will probably have an easier time of it if they are installing from the latest `git` source.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1205#issuecomment-828360653:58,release,release,58,https://qutip.org,https://github.com/qutip/qutip/issues/1205#issuecomment-828360653,2,"['install', 'release']","['installing', 'release']"
Deployability,"This is a really great idea! Since we're putting this into version 5, I have a suggestion to take things a small step further and try the following:. Let's have only one function element type that accepts functions of the form `f(t, ...)` where `...` is any signature that does not include `POSITIONAL_ONLY` arguments (i.e. no `/`) or a `VAR_POSITIONAL` argument (i.e. no `*args`) and is implemented as follows:. When the function element is constructed, we use `inspect.signature(f)` to:. * raise an error if any `POSITIONAL_ONLY` or `VAR_POSITIONAL` arguments are present; * determine the list of `POSITIONAL_OR_KEYWORD` argument; * determine whether a `VAR_KEYWORDS` argument is present. When the function arguments are updated:. * if `VAR_KEYWORDS` was present, we just keep all arguments; * if not, set the arguments to just `{k: new_args[k] for k in argument_list}`. When the function element is called:. * we can just just call `f(t, **args)` as before, because `args` already contains either just the named arguments we want or all the arguments if a `VAR_KEYWORDS` argument was present in f. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1609#issuecomment-881312472:723,update,updated,723,https://qutip.org,https://github.com/qutip/qutip/pull/1609#issuecomment-881312472,1,['update'],['updated']
Deployability,This is also an error for me. Do I need to downconvert matplotlib for windows as well?. QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: 0.29.24; Matplotlib Version: 3.5.0; Python Version: 3.9.7; Number of CPUs: 12; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\XXX\Anaconda3\envs\qutip\lib\site-packages\qutip,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1326#issuecomment-996827395:279,Install,Installed,279,https://qutip.org,https://github.com/qutip/qutip/issues/1326#issuecomment-996827395,2,['Install'],"['Installation', 'Installed']"
Deployability,"This is an interesting bug, thanks for raising it! Roughly, QuTiP looks at `$HOME` to find where the `qutiprc`configuration file. If QuTiP can't find it, it will raise a warning and proceed with defaults, so that shouldn't adversely affect you unless you've set some flags like `debug=True`. That said, we should definitely raise a less intimidating warning when `$HOME` is unset.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/365#issuecomment-136613770:110,configurat,configuration,110,https://qutip.org,https://github.com/qutip/qutip/issues/365#issuecomment-136613770,1,['configurat'],['configuration']
Deployability,"This is due to numerical error in the integration, you can change the precision in options:; `Options(max_step=1/(wr * 100), atol=1e-9, rtol=1e-9)`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2258#issuecomment-1793050302:38,integrat,integration,38,https://qutip.org,https://github.com/qutip/qutip/issues/2258#issuecomment-1793050302,1,['integrat'],['integration']
Deployability,"This is implemented in the development branch for the next major release of QuTiP, but likely won't appear in the 4.x branch.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1259#issuecomment-809319324:65,release,release,65,https://qutip.org,https://github.com/qutip/qutip/issues/1259#issuecomment-809319324,1,['release'],['release']
Deployability,"This is just a test. ; Since many failed Travis builds had a malloc error, also according to [this StackOverflow thread](https://stackoverflow.com/questions/19840671/malloc-error-incorrect-checksum-for-freed-object-object-was-probably-mod/19841133) it seemed that XCode was the source of the problem. . I added as osx environment in the travis configuration file xcode 10.2 (should be on osx 10.14 Mojave, not sure though). Build still fails, now at ; ```; Qobj subtraction ... python(2491,0x1192585c0) malloc: Incorrect checksum for freed object 0x7ffe6ff1ad50: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(2491,0x1192585c0) malloc: *** set a breakpoint in malloc_error_break to debug; /Users/travis/.travis/functions: line 104: 2491 Abort trap: 6 nosetests --verbosity=2 --with-coverage --cover-package=qutip qutip; The command ""nosetests --verbosity=2 --with-coverage --cover-package=qutip qutip"" exited with 134.; ```; which seems a pretty basic test.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/985#issuecomment-485054530:344,configurat,configuration,344,https://qutip.org,https://github.com/qutip/qutip/pull/985#issuecomment-485054530,1,['configurat'],['configuration']
Deployability,This is the same error as #681. It is an issue with the Arch linux package. You should install another way.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/690#issuecomment-298933237:87,install,install,87,https://qutip.org,https://github.com/qutip/qutip/issues/690#issuecomment-298933237,1,['install'],['install']
Deployability,"This issue has a two-fold interest: decreasing test time in general and expand the platforms through which QuTiP is available. . What is the reason it takes so long on Nix? QuTiP, in the [latest PR](https://travis-ci.org/qutip/qutip/builds/628865624?utm_source=github_status&utm_medium=notification), takes on average 20 minutes to run its tests on a given platform. Much of this I think is due to the Cython configurations, indeed the no-cython option takes only 13 minutes. My first suggestion would be to try without Cython if things speed up, from those requirements (@Ericgig set that up and I am not knowledgeable about it). . From your PR on `nixpkgs` do you build on Travis CI or a similar cloud? If you could give a list of time taken by the different tests that would help. . The idea of a subset of tests is interesting (essential tests vs. thorough tests), in general; for example thorough tests could be done only in production and a lighter version could be called with `qutip.testing.run()`. Although, in specific, it is not clear to me how to triage which tests to skip. I would be glad to have the others opinion on this too (pinged them as assignees).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700:409,configurat,configurations,409,https://qutip.org,https://github.com/qutip/qutip/issues/1147#issuecomment-569696700,1,['configurat'],['configurations']
Deployability,"This issue has been fixed by #1000, but don't you think there should be a new release of QuTiP to integrate it? A minor release integrating only the corresponding commit could be enough. There is nothing more frustrating for a beginner than when the installation instructions fail. I can grantee that most QuTiP users are not expert of packages dependencies and follow installation instructions without understanding them.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1019#issuecomment-503156655:78,release,release,78,https://qutip.org,https://github.com/qutip/qutip/issues/1019#issuecomment-503156655,6,"['install', 'integrat', 'release']","['installation', 'integrate', 'integrating', 'release']"
Deployability,"This issue is mostly obseleted by the merging of #1465, since the complete build structure is now different. In that we didn't necessarily implement the complete change requested here (we don't have `pytest` as a requirement), but we do have the PEP-517-approved way of fully specifying build requirements, so getting a correct build environment is automated. I will note that `pip install -e .` doesn't play very nicely with packages with Cython components to build; at the time of writing, `pip` would tend to install dependencies and perform the build in a venv regardless of what was installed in the activated Python environment (especially if conda), which meant that the complete set of Cython files needed to be re-compiled every time this command was run. That's fine if you just want to edit the Python files, but `setup.py develop` would correctly remember which Cython files actually _needed_ to be re-compiled, so remains much more useful for low-level QuTiP development for practical purposes right now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1263#issuecomment-809340570:382,install,install,382,https://qutip.org,https://github.com/qutip/qutip/issues/1263#issuecomment-809340570,3,['install'],"['install', 'installed']"
Deployability,"This looks great and I think it will help a lot in cleanly implementing more complex solvers light the HEOMSolver. I have two suggestions for future improvements:. - I'd like to see `.options = ...` become a method because it now modifies the existing integrator and `.options(...)` would both make that clearer and more flexible. E.g. with a method we could allow both `.options(new_options)` to completely override the options and `.options(key=new_value)` to update just one setting. - The first call to `result.add(t, X)` uses `X = state0` but state0 could be almost anything the user passed in (and not necessarily the canonical form returned by `_restore_state`). It would be better if either there was a separate method to override to convert `state0` into the canonical form, or `result.add(t, X)` was called initially with `X = _restore_state(_data0)`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616:252,integrat,integrator,252,https://qutip.org,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616,2,"['integrat', 'update']","['integrator', 'update']"
Deployability,This looks great! Please update the code. And maybe with a few inline comments/docs/link to that post so that people understand a bit how it works.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2442#issuecomment-2145125136:25,update,update,25,https://qutip.org,https://github.com/qutip/qutip/pull/2442#issuecomment-2145125136,1,['update'],['update']
Deployability,This looks like a duplicate of #2118. A fix was just released in QuTiP 4.7.2 -- would you mind trying with that and letting us know if the fix works for you?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2189#issuecomment-1615929767:53,release,released,53,https://qutip.org,https://github.com/qutip/qutip/issues/2189#issuecomment-1615929767,1,['release'],['released']
Deployability,"This looks like a very interesting pull. I will have to play around with it. In the mean time, you will need to get the Travis tests to run and probably make a jupyter notebook to demo the usage. Hopefully the former just requires adding pyopencl to the install packages in Travis.yml",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/554#issuecomment-258476718:254,install,install,254,https://qutip.org,https://github.com/qutip/qutip/pull/554#issuecomment-258476718,1,['install'],['install']
Deployability,"This problem appears to have resolved itself. Testing now runs correctly. The only change to the system has been keeping SciPy packages up to date using the Enthought Canopy package manager. Originally the problem only occurred when installing with the f90 solver, installing without the f90 solver everything ran normally. I was using IPython to run the tests. Testing now runs successfully from IPython (qtconsole and notebook) and from the python interpreter.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/46#issuecomment-25209786:233,install,installing,233,https://qutip.org,https://github.com/qutip/qutip/issues/46#issuecomment-25209786,2,['install'],['installing']
Deployability,This problem has since gotten worse. The linked notebook is no longer available. I'm going to update the documentation with the numbering convention.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/385#issuecomment-350960435:94,update,update,94,https://qutip.org,https://github.com/qutip/qutip/issues/385#issuecomment-350960435,1,['update'],['update']
Deployability,"This proved more challenging than expected for the current release, e.g., as various Linux distribution require different wheels. Still looking at it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/933#issuecomment-510896073:59,release,release,59,https://qutip.org,https://github.com/qutip/qutip/issues/933#issuecomment-510896073,1,['release'],['release']
Deployability,"This ran fine on Mac Mojave with the latest conda and pip release (4.4.0). In pip, I first created a new conda environment and then ran `conda install pip`, `pip install cython numpy scipy qutip` Feel free to reopen if it is not solved on your machine.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-510894832:58,release,release,58,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-510894832,3,"['install', 'release']","['install', 'release']"
Deployability,"This sounds like an old issue we had, around when numpy 1.20 released - we pushed a fix for that in QuTiP 4.5.3. Could you post the output of `qutip.about()` to show your Numpy and QuTiP versions?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1634#issuecomment-895475026:61,release,released,61,https://qutip.org,https://github.com/qutip/qutip/issues/1634#issuecomment-895475026,1,['release'],['released']
Deployability,"This still happens if I also install matplotlib into the environment (without the ""matplotlib not found"" warning)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-289224893:29,install,install,29,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-289224893,1,['install'],['install']
Deployability,This will take a bit of work. Especially since the docs are not so easy to read. Just changing the setup import does not work as we use numpy.distutils for the configuration.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/593#issuecomment-269730765:160,configurat,configuration,160,https://qutip.org,https://github.com/qutip/qutip/issues/593#issuecomment-269730765,1,['configurat'],['configuration']
Deployability,"To get OPENMP to work on OSX one needs to install the LLVM from homebrew. However, there is a libomp clash with the OPENMP from MKL as two libraries with the same name are simultaneously initialized. I believe that this is due to the fact that the llvm has its own openmp lib, where as the MKL was compiled against a different openmp lib (perhaps from the Intel compiler as Apple's clang does not have openmp). This likely also occurs on Windows if using mingwpy. The workaround is to set; `os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'`. This is not recommended at all, but seems to work fine. Perhaps we should give an unsupported warning on platforms where this issues arrises. Or, we could just roll the dice and see how it goes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/652#issuecomment-284520576:42,install,install,42,https://qutip.org,https://github.com/qutip/qutip/pull/652#issuecomment-284520576,1,['install'],['install']
Deployability,"Today I encountered the same problem when installing qutip 4.3.1 from conda-forge channel on Ubuntu 18.04. I have Anaconda 2018.12 with Python 3.7. Installing via pip in the system python didn't work either. The solution was in fact to install from source in anaconda which I did in the following manner:; 1. download the qutip source file from webpage, in my case it was: qutip-4.3.1.tar.gz; 2. write in terminal: ""whereis pip""; 3. choose the anaconda pip location, something like: /home/miriam/anaconda3/bin/pip ; 4. go to the directory where you downloaded the source file and type: sudo *here_goes_the_pip_location_from_previous_step* install qutip-4.3.1.tar.gz; 5. it finally works for me.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-457501976:42,install,installing,42,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-457501976,4,"['Install', 'install']","['Installing', 'install', 'installing']"
Deployability,"Tried to install Qutip in windows 10, but showing following errors while working. .; .; .; .....; U = propagator(H,1, unitary_mode='single'); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\propagator.py"", line 164, in propagator; _safe_mode=False); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccom",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:9,install,install,9,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['install'],['install']
Deployability,Try again after pulling updates from master. I've just fixed it (the declaration was moved to the pxd 'header' file),MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/52#issuecomment-25344028:24,update,updates,24,https://qutip.org,https://github.com/qutip/qutip/pull/52#issuecomment-25344028,1,['update'],['updates']
Deployability,Try conda install gcc.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/965#issuecomment-471147975:10,install,install,10,https://qutip.org,https://github.com/qutip/qutip/issues/965#issuecomment-471147975,1,['install'],['install']
Deployability,Unfortunately I do not think the continuous-benchmark tests that we have in https://github.com/qutip/continuous-benchmark covers any of the code that has been changed in this PR.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/76#issuecomment-36086389:33,continuous,continuous-benchmark,33,https://qutip.org,https://github.com/qutip/qutip/pull/76#issuecomment-36086389,2,['continuous'],['continuous-benchmark']
Deployability,"Uninstalling cython or using a virtualenv without it will make the risky code make an import error and not crash. cython is needed for installation, but mostly optional at runtime. It can be used to speedup some computations but usually the compilation time is not worth it. Or, you can run tests per section:; ```; import nose; import glob; for testfile in glob.glob("".../qutip/qutip/tests/*.py):; test = testfile[N:-3].repace(""\"",""."") # remove the whole path and the .py: ( ""qutip.tests.test_qobj"" ); nose.run(defaultTest=test, argv=['nosetests', '-v']); ```; test_mccolve, test_stochastic_se and test_stochastic_me will fail/crash, but I expect most of the rest to pass.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1084#issuecomment-531884694:135,install,installation,135,https://qutip.org,https://github.com/qutip/qutip/issues/1084#issuecomment-531884694,1,['install'],['installation']
Deployability,"Unrelated, but it might also be good to mention updating the sidebar links since we've occasionally forgotten to update those in the past.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2399#issuecomment-2069939373:113,update,update,113,https://qutip.org,https://github.com/qutip/qutip/pull/2399#issuecomment-2069939373,1,['update'],['update']
Deployability,"Update : Most of the functionality is now there, except `measure` and conditional statements, I hope to add those after we are done merging the measurement PR. @nathanshammah I was wondering if writing to QASM should be a separate PR or the same one ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1291#issuecomment-650486135:0,Update,Update,0,https://qutip.org,https://github.com/qutip/qutip/pull/1291#issuecomment-650486135,1,['Update'],['Update']
Deployability,"Update Travis build passes. ### Summary . This PR helps convert between superop reps with non-square shape. This is needed because quantum channels can have input and output spaces of different dimension. It works between super, choi, kraus. It correctly handles tensor product structures and systems with different dimensions e.g. a qubit and a qutrit. . It does not work for Chi rep or the Steinspring rep. In the Chi rep only the qubit Pauli basis has been implemented. One would need to first get the Chi rep working for Qudits. At the moment it is unclear how to generalize to the Stinespring rep. . **changes**; - in `type_from_dims` the flag `enforce_square` was set to `False`. This helps in the conversion.; - in `qobj`, `__mul__` was extended to allow construction of non square operators from an outer product using the suggestion of @Ericgig ; - `_super_tofrom_choi`, `choi_to_kraus`, `kraus_to_choi` have been changed so they work with non-square shapes.; - to support the above changes `vector_to_operator` and `vec2mat` were changed to allow for non square shapes. **other changes**; - `Qobj permute`. `tidyup` was removed from to resolve a failing test at the suggestion of @nonhermitian ; - `choi_to_kraus` and `to_kraus`. When converting from Choi to to Kraus there are many small norm Kraus operators. A `tol` parameter was added to help remove these spurious operators. ### Added Tests; **test_superoperator_reps**; - Convert non-square Kraus operator to Super + Choi matrix and back.; - Neglect tiny Kraus operators when converting Choi to Kraus. **test_superoper**; - Operator - vector - operator conversion with a tensor product state.; - Operator - vector - operator conversion for non-square matrix. **test_qobj**; - bra and ket multiplication with different dims e.g. [N, 1] and [1, M] for M \neq N",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1098#issuecomment-576981021:0,Update,Update,0,https://qutip.org,https://github.com/qutip/qutip/pull/1098#issuecomment-576981021,1,['Update'],['Update']
Deployability,"Update from Google Meet discussion:. @jakelishman @Ericgig and I had a quick video call and decided that `.replace(...)` should be renamed something like `.replace_arguments(...)` and accept either a dictionary of arguments (as a positional only argument) or keyword arguments (with the new values for the arguments). In either case, the given argument keys should be update to their new values and any other keys should retain their previous values. For the other attributes `.replace(...)` was supporting replace:. * the shift value can just be updated by wrapping the coefficient with `ShiftCoefficient` or updating the `t0` of an existing shift coefficient.; * the `tlist` value really doesn't make that much sense to update without also updating the associated function values and there are many ways this can go wrong (e.g. sub-expressions with different tlists, supplying a new tlist with the incorrect length).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1507#issuecomment-856760085:0,Update,Update,0,https://qutip.org,https://github.com/qutip/qutip/pull/1507#issuecomment-856760085,4,"['Update', 'update']","['Update', 'update', 'updated']"
Deployability,"Update to 4.1 dev or do [e_ops]. -P. On Feb 9, 2017 06:10, ""WolfgangLechner"" <notifications@github.com> wrote:. > To reproduce the problem:; >; > -; >; > run Lecture 8 - Adiabatic sweep from qutip lectures with qutip 4.02; > -; >; > Error message:; >; > Traceback (most recent call last):; > File ""as.py"", line 92, in; > mesolve(h_t, psi0, taulist, [], process_rho, args); > File ""/usr/local/lib/python2.7/site-packages/qutip/mesolve.py"", line 208,; > in mesolve; > _solver_safety_check(H, rho0, c_ops, e_ops, args); > File ""/usr/local/lib/python2.7/site-packages/qutip/solver.py"", line 822,; > in _solver_safety_check; > for ii in range(len(e_ops)):; > TypeError: object of type 'function' has no len(); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/645>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ABMPqUOt9R6_QP67bFpCcaIVV3D2Su2cks5raxBggaJpZM4L8Gzy>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/645#issuecomment-278673105:0,Update,Update,0,https://qutip.org,https://github.com/qutip/qutip/issues/645#issuecomment-278673105,1,['Update'],['Update']
Deployability,"Update: I managed to find the propagator in a somewhat makeshift manner by sending an identity matrix to mesolve (although with reduced dimensions than in the code above):. ```shell; results = mesolve(H, psi_0, t, c_ops = c_ops) ### Dimensions here are [2,2,2] as compared to [3,3,7] above; plt.plot(t, expect(a_u.dag() * a_u, results.states), label=""mesolve""); for i in range(len(t)):; rho_vec = mat2vec(ρ0.full()); rho_T = Qobj(vec2mat(U_me.states[i].data * rho_vec), dims = ρ0.dims); plt.plot(t[i], expect(a_u.dag() * a_u, rho_T), ""x"", color=""orange""); plt.ylabel(""Population""); plt.xlabel(""Time""); plt.legend(); plt.show(); ```. ![image](https://github.com/user-attachments/assets/f65f25df-db91-49d6-a92a-77c3dced0900). If there's a better way of doing it, please let me know!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2532#issuecomment-2357056333:0,Update,Update,0,https://qutip.org,https://github.com/qutip/qutip/issues/2532#issuecomment-2357056333,1,['Update'],['Update']
Deployability,"Updated docs + example notebook would be great. Thanks, merging this now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/316#issuecomment-74656936:0,Update,Updated,0,https://qutip.org,https://github.com/qutip/qutip/pull/316#issuecomment-74656936,1,['Update'],['Updated']
Deployability,"Updates:. 1. Added `str_qasm` to read QASM input from string. Added tests for export by doing export followed by import. ; 2. The only remaining issue is that of global phase with gates. Specifically, with the `SQRTNOT`, `CSIGN` gates, the global phase is distorted when exporting to QASM and then re-importing. Should we just add a warning that this might happen more generally? Furthermore, gates like iSWAP become pretty useless with this. @BoxiLi . Otherwise, the PR is mostly ready for review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1318#issuecomment-657746734:0,Update,Updates,0,https://qutip.org,https://github.com/qutip/qutip/pull/1318#issuecomment-657746734,1,['Update'],['Updates']
Deployability,"Updates:; - I have switched the order of `state` and `op`/`ops`. ; - There is now an optional `targets` arguments on each of the measurement functions to enable applying `ops` on particular; `qubits` although this is inherently delicate, especially when dealing with non-qubit type dimensions. Right now, it's restricted to `qubit` style expansions (in terms of dimensions). This indicated in the docstring. I will add some more information on how to use this in the user guide but I think it works best for more simpler use cases !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-648548980:0,Update,Updates,0,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-648548980,1,['Update'],['Updates']
Deployability,"Users should not be installing pip dependencies into a conda environment. They should be using conda, not pip. You are only running into this because you are using pip inside a conda environment, and yes, you'll need the dependencies (with their proper conda names) in that environment. (And, since wheels work inside conda, `pip install cutip` should work inside a conda env, even if they should be using conda - it's only because you are building inside it, which is very much not supported for normal users)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1738#issuecomment-990018307:20,install,installing,20,https://qutip.org,https://github.com/qutip/qutip/pull/1738#issuecomment-990018307,2,['install'],"['install', 'installing']"
Deployability,"Using the exact same qutip, numpy, scipy and python versions, I still cannot reproduce your error. Perhaps something messed up your installation? I would recommend trying again in a fresh conda environment.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2536#issuecomment-2375830378:132,install,installation,132,https://qutip.org,https://github.com/qutip/qutip/issues/2536#issuecomment-2375830378,1,['install'],['installation']
Deployability,"Using the stable release of QuTiP doesn't really help me: I'm trying to prepare a pull request for QuTiP, so I need to be able to run tests on `master` and my topic branch. I've been relying on the CI to run the tests for me, but that gets tricky once you run into test failures. You can't really debug the tests if you can't run them locally. I'm also not surprised you're not able to reproduce this on your machine on Linux: this is definitely a platform-dependent problem. The issue is that QuTiP's use of Cython is *extremely* brittle. This makes contributing to the library quite difficult. Until the most recent release (4.4.1), these kinds of problems were also affecting me and colleagues a lot as a user, but luckily that seems to have gotten better. Nonetheless, it would be great if QuTiP's low-level parts became even more robust. I know this is not a trivial problem (or I'd contribute some fixes myself), and I'm very thankful for all the core developers' work, but it's definitely a source of frustration.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-540025634:17,release,release,17,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-540025634,2,['release'],['release']
Deployability,"Version 5 does not officially support python 3.8.; We seems to have miss something in the requirement needed to have pip find version 4 instead. If you really want v5, you could probably install it without build-isolation, something like:; ```; pip install numpy>=1.19.0 scipy>=1.8.0 cython==0.27.37 setuptools packaging ; pip install --no-build-isolation qutip; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412#issuecomment-2085295423:187,install,install,187,https://qutip.org,https://github.com/qutip/qutip/issues/2412#issuecomment-2085295423,3,['install'],['install']
Deployability,"Very nice! The fortran stuff never worked on travis. In fact, it builds and install ok, but fails to load when the tests are ran. Perhaps some missing library path?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/300#issuecomment-68425677:76,install,install,76,https://qutip.org,https://github.com/qutip/qutip/pull/300#issuecomment-68425677,1,['install'],['install']
Deployability,"Very probably. The integrator doesn't know what you're trying to achieve, and you've set it exact tolerance limits (either implicitly or explicitly), so it has to integrate within those limits. If you want the steady-state solution, you can try `qutip.steadystate` instead.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605#issuecomment-886246136:19,integrat,integrator,19,https://qutip.org,https://github.com/qutip/qutip/issues/1605#issuecomment-886246136,2,['integrat'],"['integrate', 'integrator']"
Deployability,"Was planning to do it today. Probably in about 4 hours from now.; I assume I am including all your recent pulls. On 9 March 2017 at 20:06, Paul Nation <notifications@github.com> wrote:. > When are you thinking or branching a 4.1 release?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/649#issuecomment-285465642>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7bacLwu2bPN0JyuG4UpFaPkZUxnjks5rkFuugaJpZM4MI5S0>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/649#issuecomment-285601574:229,release,release,229,https://qutip.org,https://github.com/qutip/qutip/issues/649#issuecomment-285601574,1,['release'],['release']
Deployability,We aim at delivering the next release in a couple of weeks. Maybe just adding tests to be sure nothing is broken here would help including this PR.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1098#issuecomment-573569425:30,release,release,30,https://qutip.org,https://github.com/qutip/qutip/pull/1098#issuecomment-573569425,1,['release'],['release']
Deployability,"We already don't match our requirement with tests. We require scipy 1.0 but test for >=1.4. Same for numpy, we tests for >=1.20.; We should update it before making the release. ; But we will still build with oldest-supported-numpy so it may not be inline with the tests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1941#issuecomment-1163446152:140,update,update,140,https://qutip.org,https://github.com/qutip/qutip/pull/1941#issuecomment-1163446152,2,"['release', 'update']","['release', 'update']"
Deployability,"We can in theory drop that requirement for users - it was there in the immediate aftermath of the Numpy 1.20 release, which broke C-ABI compatibility with previous versions, and we had a couple of problems with people building against Numpy 1.20 but trying to run against a prior version. Our CI and release versions will still all need to be built against Numpy 1.16 (or our minimum supported runtime Numpy) as the lowest common denominator until we drop support for all Numpy releases before 1.20, but we enforce that in our build pipelines anyway. Just to be clear (though I think you knew this):. > Can qutip be updated to run with current versions of Numpy?. QuTiP already runs correctly against Numpy 1.20 and Numpy 1.21, and its runtime requirements on Numpy are uncapped. It's just building from source that'll fail, and that was originally a sort of ""fail-safe"" mechanism. Also `pip install -e .` should automatically do build isolation for you, including installing all the build requirements into a temporary virtual environment, so it should have just worked here. Calling `setup.py develop` directly is kind of out-dated now, though it can still be useful if you're planning on doing Cython development; `pip`'s isolation actually usually means that the Cython compiler can't detect changes any more, so it always needs to rebuild everything. `setup.py develop`, because of its much lower-level status, leaves the source and extension-library files well enough untouched that it can do incremental compilation. If you're not doing Cython development (only Python), `pip install -e .` is much better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497:109,release,release,109,https://qutip.org,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497,8,"['install', 'pipeline', 'release', 'update']","['install', 'installing', 'pipelines', 'release', 'releases', 'updated']"
Deployability,We can keep this in mind for the next micro version release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1187#issuecomment-661856927:52,release,release,52,https://qutip.org,https://github.com/qutip/qutip/pull/1187#issuecomment-661856927,1,['release'],['release']
Deployability,"We can't implement `__hash__` for `Qobj`, sorry - it's just not possible while following the [Python data model](https://docs.python.org/3/reference/datamodel.html#object.__hash__). The two principle points that a hash function must follow from there are; 1. objects which compare equal with `__eq__` have the same hash; 2. the hash of an object cannot change after instantiation (no mutable types). Unfortunately we fail on both points. `Qobj.__eq__` is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs an",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:1009,rolling,rolling,1009,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,1,['rolling'],['rolling']
Deployability,"We can, but I think it is best to wait. This is just one example of where; we need to add int64 support. It is going to be a bit of work to do that,; so should wait till next release. On Jul 14, 2017 4:04 AM, ""Alexander Pitchford"" <notifications@github.com>; wrote:. > @nonhermitian <https://github.com/nonhermitian> can we merge this?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/699#issuecomment-315322772>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ABMPqR6nNyKdMdldv4uM2mAnglMlJmnlks5sNz04gaJpZM4Nr1OC>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/699#issuecomment-315347447:175,release,release,175,https://qutip.org,https://github.com/qutip/qutip/pull/699#issuecomment-315347447,1,['release'],['release']
Deployability,We could install without `semidefinite` for 3.11 to remove `cvxopt` from the requirement.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2041#issuecomment-1344657806:9,install,install,9,https://qutip.org,https://github.com/qutip/qutip/pull/2041#issuecomment-1344657806,1,['install'],['install']
Deployability,"We currently link to the PR in the changelog text, and that that seems a good thing to keep, so we already have to write or update the text after the PR is created. I'm a bit against pulling information from the PR description. My observation is that the descriptions (even my own) are not very good, because they're written when the PR is just opened, before all of the improvements that happen during review. @trentfridey Does the PR number have to appear in the filename or confer any special advantages? Or can one just use a meaningful unique name for the file? E.g. `fix-20220614-add-towncrier`?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1927#issuecomment-1155008517:124,update,update,124,https://qutip.org,https://github.com/qutip/qutip/pull/1927#issuecomment-1155008517,1,['update'],['update']
Deployability,We don't currently test or build for 3.12 on the `qutip-4.7.X` branch. Probably we should since 5 isn't fully released yet.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293#issuecomment-1892426006:110,release,released,110,https://qutip.org,https://github.com/qutip/qutip/issues/2293#issuecomment-1892426006,1,['release'],['released']
Deployability,We don't support cython 3.X and the fix for matplotlib 3.8 is not released yet.; My guess is if you roll back cython to 0.29.36 it will work. Fix for cython 3.X will be in the next major release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2245#issuecomment-1773217627:66,release,released,66,https://qutip.org,https://github.com/qutip/qutip/issues/2245#issuecomment-1773217627,2,['release'],"['release', 'released']"
Deployability,We have a patch already written in #1440 - just needs a review before we merge and hopefully push out a new version to conda.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-778863114:10,patch,patch,10,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-778863114,1,['patch'],['patch']
Deployability,"We have an install now, through conda-forge packages, and #570, that works on all platforms, even without a C compiler. We have a working compiler solution for all platforms except Python 3.5/3.6 on Windows. So I don't think we need to work further on making qutip work without a C compiler. We should be trying to include the dynamic C for all users, which we almost have. I am keen on making the import lighter though. Though it's not super urgent. I will be looking more into the pyximport and settings soon. I think we should be able to move the `pyximport.install` to just before when it is needed. And the same with the `hardware_info` call.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-271126292:11,install,install,11,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-271126292,2,['install'],['install']
Deployability,"We have decided not to continue to maintain the Ubuntu channel. Please; install from source to using qutip 3.2.; Alternatively you can use the conda-forge channel if you are able to work; with qutip 3.1. On 9 May 2016 at 02:52, Qi notifications@github.com wrote:. > There doesn't seem to be the package released under Ubuntu 16.04 channel.; > After I added the Ubuntu PPA for QuTiP, I got the following error/warning:; > ; > qxd@ubuntu1604$: sudo apt-get update; > ...; > W: The repository 'http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu xenial Release' does not have a Release file.; > N: Data from such a repository can't be authenticated and is therefore potentially dangerous to use.; > N: See apt-secure(8) manpage for repository creation and user configuration details.; > E: Failed to fetch http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu/dists/xenial/main/binary-amd64/Packages 404 Not Found; > E: Failed to fetch http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu/dists/xenial/main/binary-i386/Packages 404 Not Found; > ; > Thanks for maintaining it :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/qutip/qutip/issues/472",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/472#issuecomment-218122293:72,install,install,72,https://qutip.org,https://github.com/qutip/qutip/issues/472#issuecomment-218122293,9,"['Release', 'configurat', 'install', 'release', 'update']","['Release', 'configuration', 'install', 'released', 'releases', 'update']"
Deployability,"We have made some progress! But I also have some questions for the experts here.; * We have added a Users Guide for the new solver, as a new subsection of the ""Monte Carlo Solver"" guide. On my machine, I can build the documentation without problems (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?; * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; * The _run_one_traj function now exists 3 times, with practically identical code:; https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L206) should be ""integrate"", I think. Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. Side note: due to a WSL bug, some of my commit timestamps are messed up. Because of that, some commits seem to be shown out of order here...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901:1062,integrat,integrate,1062,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901,1,['integrat'],['integrate']
Deployability,"We only use it for Travis, the end user only needs to install pytest.; I don't think removing it should change the output, but we can try it if you think it might work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1134#issuecomment-560293809:54,install,install,54,https://qutip.org,https://github.com/qutip/qutip/issues/1134#issuecomment-560293809,1,['install'],['install']
Deployability,"We probably shouldn't mutate the given `Options` object, but the call as written here doesn't make a huge amount of sense - why would you want to run the integrator but not have any output stored at all? You'd just be spinning your processor. That said, if we're going to do something different to what the user requested we should at least emit a warning. There's also interplay with `store_final_state` here too; it's questionable technique to do `e_ops=None, store_final_state=True` with a `tlist` with more than two elements, but probably people who aren't familiar with `nsteps` will do something like that, and it seems a bit picky to prevent/warn on that when the intention seems clear. I think that the current behaviour doesn't take this case into account when falling back - it'll store all states, which in the 4.x branch is a fairly major time sink (but much much faster in 5.0). What behaviour would you expect for your use case? I'd probably do something like:; 1. if we change the `Options`, we have to clone it first to prevent leaking our mutations; 2. if we're not going to save anything, we should warn the user but then do it anyway - maybe their time-dependence functions leak state, and they're just doing something weird with that; 3. `store_final_state` should count as ""storing something"", so no need to set `store_states` if `store_final_states=True` and there are no `e_ops`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775216824:154,integrat,integrator,154,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775216824,1,['integrat'],['integrator']
Deployability,"We removed the need for cython at run time (officially) recently. It is still needed at installation for installation from sources, but conda can be used if cython is not available. I am not sure about the minimum version, but it does not have to be that recent. Pickling of cdef class is done manually and depend more on pickle version than cython's.; We don't support python2 anymore since numpy also removed it's support, but 4.3 or 4.2 should date from a time it was still supported. Are some of the cython files compiling or are they all failing?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1129#issuecomment-607866651:88,install,installation,88,https://qutip.org,https://github.com/qutip/qutip/issues/1129#issuecomment-607866651,2,['install'],['installation']
Deployability,We should release the patch soon. @hodgestar Let me know if you need any help with the release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1766#issuecomment-1018630360:10,release,release,10,https://qutip.org,https://github.com/qutip/qutip/issues/1766#issuecomment-1018630360,3,"['patch', 'release']","['patch', 'release']"
Deployability,"We use the scipy ode solver. In their documentation ; https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.ode.html; they state that for the ZVODE solver. > Warning; > This integrator is not re-entrant. You cannot have two ode instances using the “zvode” integrator at the same time. This does seem a big shame, as there are of course many good reasons to want to parallelise solving ODEs.; Not really sure that there is any easy way around this. Only one of the ode integrators does not carry this warning. We currently don't have any setting that allows switching integrator method",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/822#issuecomment-365680262:113,integrat,integrate,113,https://qutip.org,https://github.com/qutip/qutip/issues/822#issuecomment-365680262,5,['integrat'],"['integrate', 'integrator', 'integrators']"
Deployability,"We'll have a new release before Monday, and maybe today.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2036#issuecomment-1344178773:17,release,release,17,https://qutip.org,https://github.com/qutip/qutip/issues/2036#issuecomment-1344178773,1,['release'],['release']
Deployability,"Website is updated, so all the links are now live. Merging.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1511#issuecomment-829095859:11,update,updated,11,https://qutip.org,https://github.com/qutip/qutip/pull/1511#issuecomment-829095859,1,['update'],['updated']
Deployability,"Welcome, and thanks for filing your first issue. `measurement_statistics_observable` determines the eigenvalues and eigenstates of the supplied operator, so it's likely to be slow as the size of the system grows. If there is a means to speed it up, we'd be happy to give that a try. You could also try the alpha release of QuTiP 5 (`pip install qutip==5.0.0a2`) and compare performance there. Are you only seeing the negative probabilities when `state` is a density matrix? Perhaps we can make the code a bit better and explicitly tidy up the small unphysical negative probabilities.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2265#issuecomment-1819949808:312,release,release,312,https://qutip.org,https://github.com/qutip/qutip/issues/2265#issuecomment-1819949808,2,"['install', 'release']","['install', 'release']"
Deployability,"Well how about we just stick with the way it is, change squeez to squeeze in the next release (with squeez depreciated and calling the new version), and mentioning in the docs that qutip should probably be imported last?. On Wednesday, June 5, 2013 at 11:54 AM, Robert Johansson wrote:. > I would have preferred if the squeez function was called squeeze... but that's just a personal preference. There are many very generic symbol names in qutip, such as tensor, create, etc. These could easily appear in some other package, such as scipy or numpy sometime in the future, and then become a conflict, so I tend to prefer not relying on distorting the function names to make them more unique. For example, identity seems more readable to qeye, which is why i prefer it.; > What is your suggestion? That we remove identity again? If you think that's the best thing to do that I'm ok with that.; > However, if best practices python programming is followed, either by not importing into the global namespace or by importing packages in dependency order (for example numpy, matplotlob, scipy. followed by qutip), then this isn't really a problem.; > ; > —; > Reply to this email directly or view it on GitHub (https://github.com/qutip/qutip/issues/25#issuecomment-18952812).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/25#issuecomment-18955374:86,release,release,86,https://qutip.org,https://github.com/qutip/qutip/issues/25#issuecomment-18955374,1,['release'],['release']
Deployability,Well the most naive way I can think of is to overwrite the `circuit.py` file in your local installation of qutip with this new `circuit.py` file. It is located in `qutip/qutip/qip` in your local python package installation folder. If you can't find it then you can go for a fresh install with this file. - Remove your current qutip version with a `pip uninstall qutip`; - Download the latest qutip version from the [website](qutip.org) and replace the `circuit.py` file in `qutip/qip` folder with the one from here.; - Reinstall qutip by running `python setup.py install` from your qutip folder. Of course there are better ways to do this such as pulling this branch locally and updating your qutip version. If you need any help ping me on our gitter channel https://gitter.im/qutip/Lobby.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/679#issuecomment-291664172:91,install,installation,91,https://qutip.org,https://github.com/qutip/qutip/pull/679#issuecomment-291664172,4,['install'],"['install', 'installation']"
Deployability,"Well, the default implementation for states is actually nearly completely unchanged (the only difference is that I replaced `np.fliplr(array)` with `array[::-1]`, which I think is a more readable idiom for ""backwards""). You're right that in the new form, basically the method is that you cache various parts of the `np.polyval` call into a 3D tensor, rather than recomputing this large polynomial each time. The `np.polyval` call is how you actually go from an array of different values of `alpha` (which comes from the meshgrid) to the coherent state, but doing it with `polyval` means you construct the coherent state and do the dot product simultaneously to save memory. If you need to repeat the calculations a bunch, and you've got enough memory to spare, you can build up all the `alpha**n / sqrt(factorial(n))` tensor once, then just dot it against every state. Since we're dealing with _complex_ Hilbert spaces, the inner product isn't a straight dot product, it needs the conjugate of one of the sides, so we only store the conjugate of the alpha tensor. You can see in the timings that this isn't _always_ the biggest win you'd expect; in some cases, the additional memory usage causes you to be more heavily bound by memory bandwidth issues rather than CPU pipelined stuff, which is another reason we allow forcing either method to be used. If you're interested in the most readable implementation, you might want to look at the test:; https://github.com/qutip/qutip/blob/a20c26307e2f6e738f87efd75abafc3dff4daad5/qutip/tests/test_wigner.py#L251-L260",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877254212:1268,pipeline,pipelined,1268,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877254212,1,['pipeline'],['pipelined']
Deployability,"Well, yesterday when helping said user, I installed a fresh Anaconda 32bit for winodws + mingw + libpython. Then I installed the latest github release of qutip. And still I got these issues.; I could try to reproduce on a clean win7 virtual machine I have here?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/423#issuecomment-182176833:42,install,installed,42,https://qutip.org,https://github.com/qutip/qutip/issues/423#issuecomment-182176833,3,"['install', 'release']","['installed', 'release']"
Deployability,"Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_pw_8rhs14880_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:7166,Release,Release,7166,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_pw_8rhs14881_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:13003,Release,Release,13003,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_pw_8rhs14882_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:19007,Release,Release,19007,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_pw_8rhs14883_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:25011,Release,Release,25011,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"What QuTiP version, how is it installed and on what os?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/916#issuecomment-464297771:30,install,installed,30,https://qutip.org,https://github.com/qutip/qutip/issues/916#issuecomment-464297771,1,['install'],['installed']
Deployability,"What do you think is more efficient than doing; ```python; states = [qutip.basis(2, 0), qutip.basis(2, 1)]; results = [qutip.sesolve(H, state, times) for state in states]; ```; ?. I'm saying that to do each state independently, `mesolve` and `sesolve` have to independently integrate each state, so even if we added this functionality into those functions directly, it would be little more than that loop I just wrote if you have used the tools I described in the first comment. If you want the entire system propagator, `qutip.propagator` can calculate that for you. Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple, but if you have very specific domain knowledge of your system, you often will be able to write an integrator which is faster for your cases, rather than the full general-purposes ones in QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465:274,integrat,integrate,274,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465,2,['integrat'],"['integrate', 'integrator']"
Deployability,"What happens if you try one of the control pulseoptim notebooks? e.g.:; http://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/control-pulseoptim-QFT.ipynb. They do not have any cython components. On 27 February 2018 at 13:09, Bilal Riaz <notifications@github.com> wrote:. > I installed using conda-forge channel and installation worked without any; > problems, but when i run following jupyter notebook from example code on; > documentation: (http://nbviewer.jupyter.org/github/qutip/qutip-notebooks/; > blob/master/examples/control-grape-cnot.ipynb); > it gives following error; > [image: grape]; > <https://user-images.githubusercontent.com/34689025/36730450-652e8d18-1c02-11e8-83a8-8741d69f24d6.JPG>; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/826#issuecomment-368867793>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7dXsxCq1txKUU7RuhVSNZaW3A9oPks5tY_5_gaJpZM4SSlE1>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826#issuecomment-368895127:300,install,installed,300,https://qutip.org,https://github.com/qutip/qutip/issues/826#issuecomment-368895127,2,['install'],"['installation', 'installed']"
Deployability,"What's wrong with just using a loop? Adding the `combine` statement is already extra work for you, and using the solver in a loop will be much clearer about what's going on. The `Qobj` object container is not meant to a vector of objects itself - use a list for that, or a numpy array if you're only going to do simple mathematical operations that you want broadcasting for (numpy will broadcast `*`, `/`, `+`, `-` and `**` correctly). The calculational complexity of the solver isn't helped by knowing you're going to do it a few times, but there are some setup costs that QuTiP already gives you the tools to alleviate. `mesolve` constructs a Liouvillian out the Hamiltonian and collapse operators; if you want to reuse the result of this, you should use `qutip.liouvillian` and `qutip.QobjEvo`, and use the `compile` method of the latter. You can pass the result of this directly as the `H` parameter of `mesolve` and it'll skip all the setup. There is some work going on about making a class-based interface to the solvers, which allows easier use of the tools to reduce setup time, but those likely won't be released for some time yet. In the meantime, just use a loop here. There will not be a notable slow down (unlike numpy maths operations) because the Python iteration over elements takes a negligible amount of time compared to single numerical intergration. As a side note, in this particular case you're doing unitary dynamics with state vectors, so this call to `mesolve` is actually translated into one to `sesolve`, which does not need to construct the Liouvillian.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774:1113,release,released,1113,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774,1,['release'],['released']
Deployability,When are you thinking or branching a 4.1 release?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/649#issuecomment-285465642:41,release,release,41,https://qutip.org,https://github.com/qutip/qutip/issues/649#issuecomment-285465642,1,['release'],['release']
Deployability,"While this has been fixed ""by hand"" by @tehruhn, a fix for the future releases is needed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1531#issuecomment-574250631:70,release,releases,70,https://qutip.org,https://github.com/qutip/qutip/issues/1531#issuecomment-574250631,1,['release'],['releases']
Deployability,"While this isn't an alternative for this PR, scipy 1.5 made new LAPACK drivers available for `scipy.linalg.eigh`, one or more of which might not have the same problems in OpenBLAS on Mac. Still, we can't require scipy 1.5 when that only released like 5 days ago, but it's interesting going forwards.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1288#issuecomment-649793403:237,release,released,237,https://qutip.org,https://github.com/qutip/qutip/pull/1288#issuecomment-649793403,1,['release'],['released']
Deployability,"While you're at it, could you update the mac test to a more recent version of mac. xcode12 is now out but we are still testing on xcode10 (https://docs.travis-ci.com/user/reference/osx). There were segfault with xcode11, thus we skipped it, but I hope it's solved with the `eigh` patch.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1348#issuecomment-679979350:30,update,update,30,https://qutip.org,https://github.com/qutip/qutip/pull/1348#issuecomment-679979350,2,"['patch', 'update']","['patch', 'update']"
Deployability,"Whoops, that's a mistake in fef7a9c - I accidentally removed a `skipif` checking for the Cython version. I've updated my local setup so I have two environments, one with and one without `Cython` so I can catch that kind of thing locally. I'm force-pushing over fef7a9c and bf6f75c after a nice little rebase to keep the commit history tidier. (Ideally I would have caught this locally and wouldn't have needed to force-push a rebase commit, but c'est la vie, and `--force-with-lease` didn't complain).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-603229265:110,update,updated,110,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-603229265,1,['update'],['updated']
Deployability,Why do we need a new function for this? Can't we just update the existing parfor function with the changes you have made?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/253#issuecomment-63155928:54,update,update,54,https://qutip.org,https://github.com/qutip/qutip/pull/253#issuecomment-63155928,1,['update'],['update']
Deployability,Why not try installing via Anaconda?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/690#issuecomment-299022469:12,install,installing,12,https://qutip.org,https://github.com/qutip/qutip/issues/690#issuecomment-299022469,1,['install'],['installing']
Deployability,Will do. Also going to update a few things in the function itself soon.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/724#issuecomment-317231533:23,update,update,23,https://qutip.org,https://github.com/qutip/qutip/pull/724#issuecomment-317231533,1,['update'],['update']
Deployability,"Win32com is in win Anaconda. That is how I tested the code. . > On Feb 8, 2016, at 22:34, Chris Granade notifications@github.com wrote:; > ; > I only had comtypes installed for something else, but at least it's in conda and pip. Sadly, win32com is not in either repository.; > ; > —; > Reply to this email directly or view it on GitHub.; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/421#issuecomment-181909452:163,install,installed,163,https://qutip.org,https://github.com/qutip/qutip/pull/421#issuecomment-181909452,1,['install'],['installed']
Deployability,"With #393 now in, can you update your branch from master? Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/394#issuecomment-154918223:26,update,update,26,https://qutip.org,https://github.com/qutip/qutip/pull/394#issuecomment-154918223,1,['update'],['update']
Deployability,"Without seeing the code it is difficult to be sure exactly what this problem was. Python's garbage collection should have been aggressively pruning the stored objects once they were no longer referenced, and I'm not aware of any other people reporting memory usage problems in `mesolve`, but it's possible there was a reference being kept to a dense Liouvillian at every time step at some point in the past (the Liouvillian would explain the N^4 usage, as opposed to a dm which should be just N^2). I'm fairly sure this isn't a problem any more at least; I was able to run the test script; ```python; import qutip; import numpy as np; N = 500; L = [[qutip.liouvillian(qutip.rand_herm(N)), '1']]; rho = qutip.rand_dm(N); times = np.linspace(0, 1, 101); e_op = qutip.jmat((N - 1)/2, 'x'); qutip.mesolve(L, rho, times, e_ops=[e_op]); ```; on a fairly non-descript Macbook without issue as of a `master` shortly (hopefully) before the 4.6 release, without ever exceeding 3GB of RAM used. Just for approximate calculations for N=115: a 100% dense DM stored in CSR format takes ~257kB of memory, while a 100% dense Liouvillian would be ~3.26GB. Closing now due to lack of activity.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/845#issuecomment-809630515:935,release,release,935,https://qutip.org,https://github.com/qutip/qutip/issues/845#issuecomment-809630515,1,['release'],['release']
Deployability,"Without the black changes, the patch would have applied cleanly, I think. With them, it's better to wait til the end, and then rebase the PR on top of master (in git, not github), then merge the PR into master as normal. The rebase is a destructive operation (rewrites history of the PR), so we have to take more care when working with more than one person, but it's better afterwards. I've heard this called a few things - Atlassian calls it a ""foxtrot merge"", for example. Here's a blog post they made about them, and some of the problems: https://blog.developer.atlassian.com/stop-foxtrots-now/. *Edit*: I usually wouldn't care about this, and we'd just squash the PR into a single commit to avoid all these problems, but in this particular case, the PR is kind of like two logical things at once. First it does @dweigand's original PR (but completed), and then it does what could have been another improvement change to all the code. We want to preserve the history in source control of the original PR (so you can see the changes I made to speed it up), so it needs to go in as two separate commits, doing a regular merge. If you're working on your own stuff, normally you'd be able to just squash and be done with it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-878194970:31,patch,patch,31,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-878194970,1,['patch'],['patch']
Deployability,"Woot for finding this buglet. I have some questions:. - What happens in v5?; - Can we also add a test for this case where a different nT is needed?; - Should we make nT a parameter which defaults to your new value? How closely do the signatures of the various Floquet solvers match currently? If they already have different options we can likely just add a new parameter. If not, perhaps we can anyway, but we should think a bit more.; - We should update the docstring to match.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1961#issuecomment-1198052613:448,update,update,448,https://qutip.org,https://github.com/qutip/qutip/pull/1961#issuecomment-1198052613,1,['update'],['update']
Deployability,"Would it be okay to use `_path_from_env(""XDG_CONFIG_HOME"", Path.home() / "".config"")` rather than depend on the `xdg` package?. How does one know if one is on a system where XDG is supported? E.g. I know Windows used to use a special APP configuration folder of its own.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1876#issuecomment-1219758222:237,configurat,configuration,237,https://qutip.org,https://github.com/qutip/qutip/issues/1876#issuecomment-1219758222,1,['configurat'],['configuration']
Deployability,"Wow, that a lot of work. Good to see you are still working on the lattice stuff. Right now, we don't have enough hands to maintain it and it pretty much abandoned. If you have the will to give it some love, it would be great. However could you make those PRs to qutip-lattice, in small review able chunks? v4.7 is the last of the v4 series and new feature like this can't be a bug-fix release. And in v5 we are splitting lattice, qip and control in other repo and keeping in Qutip only what me and @hodgestar can actively maintain. qutip-notebook is also taking the door in favour of qutip-tutorial, which tests notebooks and adds other maintainability features. Is this tools you created for your research that you are now contributing or do you plan to stick around contributing on qutip-lattice?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1956#issuecomment-1186306765:385,release,release,385,https://qutip.org,https://github.com/qutip/qutip/pull/1956#issuecomment-1186306765,1,['release'],['release']
Deployability,"Yeah, Google will just update itself over time, I think - the http links aren't dead, they just redirect through to the https ones (or at least they will when I force https access from tomorrow). There's a similar PR on the website (qutip/qutip.github.io#145) to fix links there as well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1555#issuecomment-840558024:23,update,update,23,https://qutip.org,https://github.com/qutip/qutip/pull/1555#issuecomment-840558024,1,['update'],['update']
Deployability,"Yeah, `qutip-qip` is a much easier build and installation process because you don't need to be concerned about compiler infrastructure, ABI compatibility or stuff like that. In addition in that particular test run, there were three individual calls to change the installed packages, which meant plenty of space for stuff to go wrong. In this case, I think it was a strange interaction between the old `.travis.yml` specifically installing `numpy` and all other dependencies from `conda-forge`, without the channel being in the defaults list. Since `conda uninstall` doesn't specify an additional channel, the dependency calculator considers `defaults` to be higher priority, so it sets various packages to arbitrary allowed ones from `defaults`, which with `openblas` installed like this meant numpy `1.14`. That's my guess at least - it's a pretty weird set up circumstances, but the new `.travis.yml` file that's already in `master` is far simpler about the build process.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609:45,install,installation,45,https://qutip.org,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609,4,['install'],"['installation', 'installed', 'installing']"
Deployability,"Yeah, auto-tidyup should be a function of CSR matrices only. It doesn't make sense for dense matrices to have it, that's just burning cycles. As Asier mentioned, you already can't rely on floating-point operations being exactly identical between different matrix types, so there's no particular problem there. The point about auto-differentiation is an excellent reason that it must be allowed to vary between types as well. To be honest, I'm not sure how many cases the auto-tidyup operation actually helps in keeping things efficient. It may well be worth us having a proper investigation, and seeing how often it actually helps. I can tweak the addition and matrix-multiplication sparse algorithms to automatically tidy up when generating their output (if they don't already...), in which case we could probably entirely remove all ""automatic"" tidyup, and just have it be a manual operation?. `isherm_csr_full` is actually explicitly meant to handle all cases, _especially_ those involving matrices that have not been tidied up. The logic is actually sound (it's been deployed in `master` for a while now), but looks like there's a typo made when I handled the merge up, and the data-layer is missing a few of its mathematical tests so it didn't get spotted. I'll fix that now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1610#issuecomment-882040752:1071,deploy,deployed,1071,https://qutip.org,https://github.com/qutip/qutip/pull/1610#issuecomment-882040752,1,['deploy'],['deployed']
Deployability,"Yeah, definitely there's no point running tests that aren't really testing the package properly. I would hope that if we're much more aggressive about converting time-dependent lists into QobjEvo objects inside `mesolve`, `mcsolve` and `sesolve` (or the class-based versions of them), we could significantly reduce the amount of testing that needs to be done with them. Most of the tests of time-dependent formats would then occur in the QobjEvo tests. We could still test all the configurations of the solvers without too heavy a time penalty. If we only use a small number of different time-dependent operators, we can compile them all only once, and have `pytest` manage the resources through shared fixtures. That would really cut down the run times, especially for the current ""slow"" tests. Another avenue for cutting down run time is if we could merge say the MKL and OpenMP tests into one Travis job - the setup time for one job is about 2.5 minutes, and that's before any tests have run at all. I would hazard a guess that having MKL but not OpenMP is a pretty rare case (maybe more common on high-performance clusters where people submit single-cpu jobs?).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604348182:481,configurat,configurations,481,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604348182,1,['configurat'],['configurations']
Deployability,"Yeah, it was not a fresh conda, but one that I did not previously install QuTiP in. However, that warning is essentially telling me that it is trying to build the Cython openmp stuff at init. It should not be doing this, but will do so if it is trying to load a Cython generated file that was not built yet.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1334#issuecomment-670133651:66,install,install,66,https://qutip.org,https://github.com/qutip/qutip/issues/1334#issuecomment-670133651,1,['install'],['install']
Deployability,"Yeah, seems like in v5 if you give a list of colors to add_points it ignores whether you choose 's' or 'm' and just plots multicolored. I would keep that as is (since i guess the logic of choosing 's' or 'm' is more about what default values to choose if the user provides no list of colors), and maybe update the docstring to just say giving a list of colors to add_points will override the choice of 's' or 'm'? . in v4.7 on the other hand, giving point_color() seems to still obey the choice of s or m used in add_points(). i would say its not so important to preserve that (presumably if you give a list you want multiple colors). @AGaliciaMartinez @Ericgig does this sound reasonable?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1974#issuecomment-1905451596:303,update,update,303,https://qutip.org,https://github.com/qutip/qutip/issues/1974#issuecomment-1905451596,1,['update'],['update']
Deployability,"Yeah, so this bug is fixed in QuTiP 4.5.3 and above. You can also fix it by downgrading Numpy to 1.19 or below (in 1.20 they changed how they handle object arrays, which broke us and a few other packages). That's strange that Conda won't let you upgrade beyond 4.5.2; there's no constraint on our conda package which should prevent it. Do you have any other packages installed that depend on QuTiP? If so, they might be pinning our version. What happens when you run `conda update qutip`? (By the way, you can also install `qutip` from `pip` easily since the 4.6 release).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1634#issuecomment-895511734:246,upgrade,upgrade,246,https://qutip.org,https://github.com/qutip/qutip/issues/1634#issuecomment-895511734,5,"['install', 'release', 'update', 'upgrade']","['install', 'installed', 'release', 'update', 'upgrade']"
Deployability,"Yeah, that was what I was referring to - Travis just tests that the Cython parts compile. I'm new to working on code in any kind of organisation, so I wasn't sure if it's normal to have the unit tests run as part of the CI process, or if that was only meant to test the installation path.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1158#issuecomment-576016364:270,install,installation,270,https://qutip.org,https://github.com/qutip/qutip/issues/1158#issuecomment-576016364,1,['install'],['installation']
Deployability,"Yeah, this feels like a bug in `propagator` - I bet at some point we do `qeye(L.shape[0])` instead of `qeye(L.dims[0])`. There's sometimes quite a bit of that in older code - it used to slip through because we weren't super strict about dimension handling, so in certain cases (like this one), we'd accept bad dimensions. I might try and have a look tonight (UK time), if I have time - I've wanted to break up the large `propagator` monolith into smaller components for quite a while. ---. About numerical precision: if you want to try increasing the precision of the integrators, try passing `options=qutip.Options(nsteps=1_000_000, atol=1e-12, rtol=1e-10)` to `propagator`. `atol` and `rtol` are absolute and relative tolerances respectively, and `nsteps` is the number of subdivisions the integrator is _allowed_ to take (if it reaches its tolerance goals, it won't take all of them). You'll find that `atol` and `rtol` will have only a loose relation to the tolerance of your fidelity value, because there's a _lot_ of floating-point operations between those points in which the errors compound, and there's a hard limit on the tolerances the integrator can achieve, so you might not be able to get a perfect answer. The fidelity calculation involves finding the square root of a density operator, so that's another large possible source of error. About times: if you only care about the state at the last time, setting `tlist = np.linspace(0, x, 201)` is quite inefficient. Instead, set `tlist = [0, x]`, and then pass `options=qutip.Options(nsteps=<very very big integer>)`. It's more efficient because it doesn't need to achieve tolerance goals and construct/store `Qobj` instances at every intermediate timestep. Temporary workaround: this is _very_ temporary, and generally a bad idea in QuTiP, but you can ""flatten"" all your operators into a single space for now, while we implement a fix. To do that:; ```python; # initial setup; H = qutip.tensor(...); c_ops = [qutip.tensor(...)]. original",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1585#issuecomment-865903199:568,integrat,integrators,568,https://qutip.org,https://github.com/qutip/qutip/issues/1585#issuecomment-865903199,2,['integrat'],"['integrator', 'integrators']"
Deployability,"Yeah, this is just one of those silly things caused by ImageMagick choosing a _very_ generic name and then getting burned (hence the swap to `magick`...). Probably the best thing to do is to try and run `convert` once at discovery and to see what happens. If you run `convert -version` on an IM6 install, does it output a string that looks like; > Version: ImageMagick 6.blahblahblah; or something similar?. If so, try this patch: [check_convert.txt](https://github.com/qutip/qutip/files/4397692/check_convert.txt). It rearranged the functions a little for a more logical order (I'll rebase the PR before merge), but the main change is that it now tests the output of `convert -version` to see if it contains the substring `imagemagick` (case insensitive). The reason to do this now is because if we allowed the error to propagate later, we'd have to check it every time and it would mean we'd have to pass through the ""special cases"" more frequently, and it would make the core logic more complex. Also, we _could_ catch a subprocess `CalledProcessError` later (say if one of the other commands were to fail for some reason) and re-raise our own, but to be honest I didn't want to over-engineer what ought to have been a relatively simple PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605504526:296,install,install,296,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605504526,2,"['install', 'patch']","['install', 'patch']"
Deployability,"Yeah. Just do a 'git pull upstream master' on this branch. The Travis; config file was updated and it's not the same as this branch. You don't; have to do a painful rebase. The tests need to run online. On Mon, Jun 18, 2018, 9:03 PM Louis Tessler <notifications@github.com>; wrote:. > @sahmed95 <https://github.com/sahmed95> shouldn't the merge automatically; > take care of that without bothering to rebase?; >; > I'd like to avoid wasting time on a rebase if there's no tangible benefit; >; > —; > You are receiving this because you were mentioned.; >; >; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/883#issuecomment-398031660>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AGpUBArCWgSxWGFO-QoURjxQPLZ63Eeiks5t95crgaJpZM4UrUyK>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/883#issuecomment-398048087:87,update,updated,87,https://qutip.org,https://github.com/qutip/qutip/pull/883#issuecomment-398048087,1,['update'],['updated']
Deployability,Yes please. Also make sure that you update to the latest master in your pull so that the travis tests pass.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/565#issuecomment-264249437:36,update,update,36,https://qutip.org,https://github.com/qutip/qutip/pull/565#issuecomment-264249437,1,['update'],['update']
Deployability,Yes we are not sensitive to the point releases typically. I will merge this when I get home.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/276#issuecomment-66585827:38,release,releases,38,https://qutip.org,https://github.com/qutip/qutip/pull/276#issuecomment-66585827,1,['release'],['releases']
Deployability,"Yes, I also tried using these packages. If you see #484 and all the; corresponding links you will see why we switched to the pip install. It's questionable whether we should have a feature that relies on a library; that is not maintaining a conda package. But that is a question for another; day. On 4 June 2018 at 10:51, Shahnawaz Ahmed <notifications@github.com> wrote:. > There are conda versions for cvxopt and cvxpy (https://anaconda.org/mcg/; > cvxpy) but nobody seems to be maintaining or updating them. Installing; > the conda version downgrades everything else. I will first try to fix the; > yml issue. Nothing seemed to be incorrect in the YML file, and the travis; > CI linter is not available, so I am not sure what is wrong with the file.; > Will update if I make progress.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/873#issuecomment-394298574>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7e0B0n4eEJ-sZ3Ts6PTblD_UxUD8ks5t5QMkgaJpZM4UYSyh>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/873#issuecomment-394303776:129,install,install,129,https://qutip.org,https://github.com/qutip/qutip/pull/873#issuecomment-394303776,3,"['Install', 'install', 'update']","['Installing', 'install', 'update']"
Deployability,"Yes, I am currently using the M1 chip. However, I previously had no issues with scipy or qutip before, only after I wiped my Mac and reinstall everything did these problems occur. . Last time I installed qutip I went into the hardware_info.py script and changed two lines of code to get the module to work on my M1. I tried to do this again in the exact same way but once I navigated to the qutip folder I found there was no such file. Could this be an issue?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1987#issuecomment-1229183720:194,install,installed,194,https://qutip.org,https://github.com/qutip/qutip/issues/1987#issuecomment-1229183720,1,['install'],['installed']
Deployability,"Yes, I am not going to worry about it, everything works from scripts and when called from the library, so probably just some funny business. I am about to commit a minor update where the diags are grabbed directly from the sparse density matrix, for larger density matrices, or really sparse ones, this bumps up the speed a bit. I will also make a few more unit tests, just for my own sanity. Thanks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/526#issuecomment-242821449:170,update,update,170,https://qutip.org,https://github.com/qutip/qutip/issues/526#issuecomment-242821449,1,['update'],['update']
Deployability,"Yes, I have not been able to install mcf90 under anaconda.; I think I remember seeing some discussion suggesting that the mcf90 has little or any performance improvement over the standard mcsolver. I have not tried myself. Being an anaconda user, this would take some effort for me.; I think that if it is not offering much greater performance, then we should just exclude it from the conda package.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/439#issuecomment-186524698:29,install,install,29,https://qutip.org,https://github.com/qutip/qutip/issues/439#issuecomment-186524698,1,['install'],['install']
Deployability,"Yes, I have restarted the console after the installation. I tried it now, through the command prompt and it worked fine, the qcirc.pdf file was converted to qcirc.png and I could open it. So I am not sure what is the origin of the problem when running the command q.png in python...; Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1888#issuecomment-1112231739:44,install,installation,44,https://qutip.org,https://github.com/qutip/qutip/issues/1888#issuecomment-1112231739,1,['install'],['installation']
Deployability,"Yes, `target` makes them a bit specialized and calling `expand_operator` manually is probably a good option. If I may propose the following:; - Move `expand_operator` to `dimensions.py` and keep it in qutip.; - Keep two functions `hadamard_transform` and `qubit_clifford_group`, and find a proper place for them in the main qutip (`operator.py`?). They are not that trivial to implement like the rest of the gates and are also not limited to just `qip`. Keep them consistent with other functions that generate Qobj (support `dtype`).; - Remove all rest of the gates and create some private substitutions just for testing. We should probably add somewhere in the changelog for the major release that if users are using gates like `cnot` for testing and now cannot find it. They should either define the gate themselves (and use `expand_operator` if needed) or install `qutip-qip`. (BTW, is there a place where we can maintain a list of those notes for the major release?)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1890#issuecomment-1121214389:686,release,release,686,https://qutip.org,https://github.com/qutip/qutip/pull/1890#issuecomment-1121214389,3,"['install', 'release']","['install', 'release']"
Deployability,"Yes, installing Microsoft visual C++ solved the problem.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2322#issuecomment-1948097986:5,install,installing,5,https://qutip.org,https://github.com/qutip/qutip/issues/2322#issuecomment-1948097986,1,['install'],['installing']
Deployability,"Yes, that also fails, with the same error (on Windows):. `Building module rhs44481 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']`. I just realized that this particular problem is probably just that this Windows VM doesn't have Visual Studio installed (maybe I should try again with the 20GB developer's VM that Microsoft has). So as a user on Windows, having installed QuTiP through Anaconda, I can't do any time propagation? Somehow, I would have thought that having Cython though Anaconda would also come with some compiler like gcc (which is what it seems to be doing on the Mac). Otherwise, that seems like a very limiting factor to any Windows user. There's no way to run QuTiP while preventing it to cythonize time-dependencies, right? That is, aside from workarounds like the one I did here: https://github.com/qucontrol/krotov/blob/247d4066c83ee4923769b934486da9dae95f6879/src/krotov/objectives.py#L175. Anyway, this is likely not really the same issue as the original problem on the Mac.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-464148578:279,install,installed,279,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-464148578,2,['install'],['installed']
Deployability,"Yes, that is to keep the installation light. Matplolib is surely used for the visualization but most runtime modules can do without it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/892#issuecomment-403674547:25,install,installation,25,https://qutip.org,https://github.com/qutip/qutip/issues/892#issuecomment-403674547,1,['install'],['installation']
Deployability,"Yes, the QT stuff is bit troublesome.. and it is not a core functionality in qutip. The about() and demos() does not do much harm, so deprecate them in next release we can drop them alltogether in the following release. The progressbar is a bigger problem, because (if I got this right) it is partly due to the event-loop tricks we need to do to get the qt progressbar to work we have problems with catching keyboardinterrupt properly in for example mcsolve, and this makes it difficult to abort a calculation cleanly. This is big problem in IPython notebooks, where one cannot hit Ctrl-C and Ctrl-Z until process is stopped.. Factoring the qt progressbar out of mcsolve should therefore be a priority, and the simplest way to do this would obviously be to drop the qt progressbar function completely... I'll add a note about this in the roadmap wiki and closing this issue now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/19#issuecomment-18917941:157,release,release,157,https://qutip.org,https://github.com/qutip/qutip/issues/19#issuecomment-18917941,2,['release'],['release']
Deployability,"Yes. I saw that. So should we have a single script for all the if statements (checking and installing python2.7, MKL, CVOPT etc.) and run it by passing some command line argument such as. ```; - travis_config install_conda; - travis_config install_mkl; - travis_config install; ```. to do all the complex config stuff?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/875#issuecomment-394644625:91,install,installing,91,https://qutip.org,https://github.com/qutip/qutip/pull/875#issuecomment-394644625,2,['install'],"['install', 'installing']"
Deployability,Yes. Perhaps it is a problem with my scipy installation or something. I'll do some more poking around and try to figure it out.; - Bill,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/501#issuecomment-229492311:43,install,installation,43,https://qutip.org,https://github.com/qutip/qutip/issues/501#issuecomment-229492311,1,['install'],['installation']
Deployability,"You are probably installing with the Anaconda Python package. It points to a location that does not exist for the mkl blas libraries, which it doesnt ship with. . The fortran solver is somewhat dated, and the Python solver is now close in performance. You should probably use the latter one.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/491#issuecomment-224636252:17,install,installing,17,https://qutip.org,https://github.com/qutip/qutip/issues/491#issuecomment-224636252,1,['install'],['installing']
Deployability,You can choose the scipy version to install: `conda install scipy=1.2.1` or `pip install scipy==1.2.1`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1019#issuecomment-502357838:36,install,install,36,https://qutip.org,https://github.com/qutip/qutip/issues/1019#issuecomment-502357838,3,['install'],['install']
Deployability,"You can compute the propagator with `mesolve` by passing it an identity matrix as the input state: ; `U = qutip.mesolve(H, qutip.qeye(H.dims), times, options=options).states`. `QobjEvo` should be supported by `propagator`, I will add it to my to-do for the next major release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1482#issuecomment-814921274:268,release,release,268,https://qutip.org,https://github.com/qutip/qutip/issues/1482#issuecomment-814921274,1,['release'],['release']
Deployability,"You can go ahead and merge it. The tests are passing and I checked the; latex code and visualization myself. On 05-Apr-2017 3:04 PM, ""Alexander Pitchford"" <notifications@github.com>; wrote:. > @mortenkjaergaard <https://github.com/mortenkjaergaard> once merged there; > are documented procedures for you to install the latest version from this; > repo; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/679#issuecomment-291807222>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AGpUBEIN656ybDBmGOjjWYVVsvlBH2Qnks5rs2AIgaJpZM4MyxeC>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/679#issuecomment-291862617:307,install,install,307,https://qutip.org,https://github.com/qutip/qutip/pull/679#issuecomment-291862617,1,['install'],['install']
Deployability,You can test with the 4.4.0 conda / pip release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/965#issuecomment-510881793:40,release,release,40,https://qutip.org,https://github.com/qutip/qutip/issues/965#issuecomment-510881793,1,['release'],['release']
Deployability,"You can use it to select number of processes to use, right? I think it is useful if you don't want to use all processors for a calculation, although I usually use the .qutiprc configuration file for this rather than environment variables. I guess it is not really necessary but could be useful I guess.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/119#issuecomment-41985199:176,configurat,configuration,176,https://qutip.org,https://github.com/qutip/qutip/issues/119#issuecomment-41985199,1,['configurat'],['configuration']
Deployability,"You can use: `smesolve(..., store_all_expect=True)` then use `result.runs_expect[traj_n, e_op, t]`.; (Please check the order of the index.). You can also use `options=SolverOptions(average_states=False, store_states=True)` to have `results.states` keep the states of all trajectories. If you use the v5 pre-release, the with `options = {'keep_run_results': True}` you have both `result.average_expect` and `result.runs_expect`. Same for the states, adding `'store_states':True` to the options, you can get the trajectories states with `result.runs_states` and the averaged states with `result.average_state`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194#issuecomment-1635773906:307,release,release,307,https://qutip.org,https://github.com/qutip/qutip/issues/2194#issuecomment-1635773906,1,['release'],['release']
Deployability,"You may be trying to run QuTiP from the same directory you installed it; from. On Jan 18, 2017 9:51 AM, ""17643015"" <notifications@github.com> wrote:. > If I try to import qutip a second time, I get the following error:; > ------------------------------; >; > AttributeError Traceback (most recent call last); > in (); > ----> 1 from qutip import*; >; > /home/jan/.local/lib/python2.7/site-packages/qutip/*init*.pyc in (); > 60 qutip.settings.ipython = True; > 61 except:; > ---> 62 qutip.settings.ipython = False; > 63; > 64 # ------------------------------------------------------------; > -----------------; >; > AttributeError: 'module' object has no attribute 'settings'; >; > Also I am running ubuntu 16.10; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/637#issuecomment-273531916>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ABMPqUlvpTPnqA51MHD8rB-A_QVrHsXYks5rTkMngaJpZM4LnG0_>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/637#issuecomment-273536944:59,install,installed,59,https://qutip.org,https://github.com/qutip/qutip/issues/637#issuecomment-273536944,1,['install'],['installed']
Deployability,You might be waiting a while. You can install the github master via pip fairly easily.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/542#issuecomment-249295313:38,install,install,38,https://qutip.org,https://github.com/qutip/qutip/issues/542#issuecomment-249295313,1,['install'],['install']
Deployability,"You must have some other package installed that's conflicting with QuTiP somehow - our dependencies are pretty lax. We only ask for Numpy >= 1.16.6 and Scipy >= 1.0 as hard dependencies (with no upper bounds), and both of those versions are old. Good to know it's fixed now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1634#issuecomment-895828645:33,install,installed,33,https://qutip.org,https://github.com/qutip/qutip/issues/1634#issuecomment-895828645,1,['install'],['installed']
Deployability,"You probably need to patch this line in Qobj.norm. https://github.com/cgranade/qutip/blob/feature-supermeta/qutip/qobj.py#L766. so that matrix norm functions are used instead of vector norm. . But there are probably many other places where the code relies on Qobj.type being either of ket/bra/oper/super, so I think it might be a better idea to add the new information about the superoperator representation in another Qobj attribute, such as Qobj.superrep.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/90#issuecomment-37779230:21,patch,patch,21,https://qutip.org,https://github.com/qutip/qutip/pull/90#issuecomment-37779230,1,['patch'],['patch']
Deployability,"You should install qutip with anacondas package manager and not pip. Please install using. ```conda install -c conda-forge qutip; ```. On Tue 8 May, 2018, 10:50 PM hchanzy, <notifications@github.com> wrote:. > I installed anaconda on windows 10.; > I used then ""pip install qutip"", and I get this error :; > File ""\lib\distutils\cygwinccompiler.py"" line 129, in *init*; > if self.ld_version >= ""2.10.90"" :; > TypeError: '>=' not supported between instances of 'NoneType' and 'str'; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/860>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AGpUBK8samd0yf037ZRMulY3XfyKvmEdks5twaK9gaJpZM4T2rnS>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/860#issuecomment-387572634:11,install,install,11,https://qutip.org,https://github.com/qutip/qutip/issues/860#issuecomment-387572634,5,['install'],"['install', 'installed']"
Deployability,"You'll find it easier installing from conda-forge, since we distribute binary releases there: see the [installation guide](http://qutip.org/docs/latest/installation.html) here. If you want to install from source using `pip`, you need to configure your C++ development environment correctly - you'll probably need to enable the XCode command-line tools ([see e.g. this](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/)).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404#issuecomment-742038577:22,install,installing,22,https://qutip.org,https://github.com/qutip/qutip/issues/1404#issuecomment-742038577,6,"['install', 'release']","['install', 'install-command-line-tools-mac-os-x', 'installation', 'installing', 'releases']"
Deployability,"You're trying to plot a Hamiltonian with a principle frequency of ~32 GHz, and you want to scan time over ~3ms. That involves integrating over 5 million periods of oscillation - there's little you can do to get a sensible runtime any more because you're evolving it for so long. You might want to make a frame transformation in your Hamiltonian and make a rotating-wave approximation to suppress these very high-frequency terms.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1376#issuecomment-721217434:126,integrat,integrating,126,https://qutip.org,https://github.com/qutip/qutip/issues/1376#issuecomment-721217434,1,['integrat'],['integrating']
Deployability,"Yup, it installed ok, the openmp threshold check error is gone, and all tests passed ok~!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1471#issuecomment-808886693:8,install,installed,8,https://qutip.org,https://github.com/qutip/qutip/pull/1471#issuecomment-808886693,1,['install'],['installed']
Deployability,[![Coverage Status](https://coveralls.io/builds/1558211/badge)](https://coveralls.io/builds/1558211). Coverage decreased (-0.05%) when pulling **2b8ccd0fbcdd5a49a861feeef4b7fcd064d17326 on jrjohansson:parallel-updates** into **f4cb22d03d23d44debcd3513ded09f71c43a167c on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/271#issuecomment-65347711:210,update,updates,210,https://qutip.org,https://github.com/qutip/qutip/pull/271#issuecomment-65347711,1,['update'],['updates']
Deployability,[![Coverage Status](https://coveralls.io/builds/1589410/badge)](https://coveralls.io/builds/1589410). Coverage increased (+0.0%) when pulling **2ee79ccbcdd2ae154e0698fc574a50d31bd0b71c on jrjohansson:mesolve-docstring-updates** into **3279ab91e606305a4b0ae2af4f012e2d50a14ab0 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/286#issuecomment-66420471:218,update,updates,218,https://qutip.org,https://github.com/qutip/qutip/pull/286#issuecomment-66420471,1,['update'],['updates']
Deployability,[![Coverage Status](https://coveralls.io/builds/1595186/badge)](https://coveralls.io/builds/1595186). Coverage remained the same when pulling **f9948fd4a89b64e4782e4df493c8dc1a539abb9e on jrjohansson:travis-update** into **5bccdbad62a807d73594bd1ba6f0cc4beff8cb7a on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/289#issuecomment-66605084:207,update,update,207,https://qutip.org,https://github.com/qutip/qutip/pull/289#issuecomment-66605084,1,['update'],['update']
Deployability,[![Coverage Status](https://coveralls.io/builds/1600488/badge)](https://coveralls.io/builds/1600488). Coverage increased (+0.05%) when pulling **407427aaa85974f65d1fe8005185c6fbad5f9e53 on jrjohansson:stochastic-updates** into **61d84f359162ee7dd680073e212e6f27f3047031 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/288#issuecomment-66726276:212,update,updates,212,https://qutip.org,https://github.com/qutip/qutip/pull/288#issuecomment-66726276,1,['update'],['updates']
Deployability,[![Coverage Status](https://coveralls.io/builds/1601222/badge)](https://coveralls.io/builds/1601222). Coverage decreased (-0.0%) when pulling **f22d3cb7280b49e1e1ed8bc06ba330b3dd95df8b on jrjohansson:parallel-updates** into **bd95c50c75209754f66fb658897186467945dce0 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/290#issuecomment-66743493:209,update,updates,209,https://qutip.org,https://github.com/qutip/qutip/pull/290#issuecomment-66743493,1,['update'],['updates']
Deployability,[![Coverage Status](https://coveralls.io/builds/1628628/badge)](https://coveralls.io/builds/1628628). Coverage decreased (-0.0%) when pulling **525ec5dfe379a6e2dd310bf85b3cce313dd2e9b8 on jrjohansson:release-3.1-code-cleanup** into **23e525934c4ccac56acd7fe441ba3d0f3ed72add on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/292#issuecomment-67436094:200,release,release-,200,https://qutip.org,https://github.com/qutip/qutip/pull/292#issuecomment-67436094,1,['release'],['release-']
Deployability,[![Coverage Status](https://coveralls.io/builds/1628903/badge)](https://coveralls.io/builds/1628903). Coverage decreased (-0.01%) when pulling **6801b8539eb7190121cb9eda01e00ab583c7527e on jrjohansson:release-3.1-code-cleanup** into **947ff2b33ee81de77bc75ee6f839ee41e4be9429 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/293#issuecomment-67442213:201,release,release-,201,https://qutip.org,https://github.com/qutip/qutip/pull/293#issuecomment-67442213,1,['release'],['release-']
Deployability,[![Coverage Status](https://coveralls.io/builds/1628962/badge)](https://coveralls.io/builds/1628962). Coverage decreased (-0.01%) when pulling **db750cf06b0b6c9c7280a5f2131caef1cd8e6e4e on jrjohansson:release-3.1-code-cleanup** into **947ff2b33ee81de77bc75ee6f839ee41e4be9429 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/293#issuecomment-67443547:201,release,release-,201,https://qutip.org,https://github.com/qutip/qutip/pull/293#issuecomment-67443547,1,['release'],['release-']
Deployability,[![Coverage Status](https://coveralls.io/builds/1660698/badge)](https://coveralls.io/builds/1660698). Changes Unknown when pulling **f30d623a6f8a4e5ab7808eae47306091178e029b on jrjohansson:3.1-release-updates** into *\* on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/297#issuecomment-68126894:193,release,release-updates,193,https://qutip.org,https://github.com/qutip/qutip/pull/297#issuecomment-68126894,1,['release'],['release-updates']
Deployability,[![Coverage Status](https://coveralls.io/builds/1663131/badge)](https://coveralls.io/builds/1663131). Changes Unknown when pulling **fa4ce7b6db204a1ee838bb80d5dd4dc0af738320 on jrjohansson:3.1-release-updates** into *\* on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/297#issuecomment-68168766:193,release,release-updates,193,https://qutip.org,https://github.com/qutip/qutip/pull/297#issuecomment-68168766,1,['release'],['release-updates']
Deployability,[![Coverage Status](https://coveralls.io/builds/1665631/badge)](https://coveralls.io/builds/1665631). Changes Unknown when pulling **e4f0f6fd6a898029c0a6bc48b55a6af6d4cf6e3d on jrjohansson:3.1-release-updates** into *\* on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/297#issuecomment-68201063:193,release,release-updates,193,https://qutip.org,https://github.com/qutip/qutip/pull/297#issuecomment-68201063,1,['release'],['release-updates']
Deployability,[![Coverage Status](https://coveralls.io/builds/1676678/badge)](https://coveralls.io/builds/1676678). Changes Unknown when pulling **6e0d65421c4d5bf7a8dc4d1262c9880cbf9fafee on nonhermitian:travis-updates** into *\* on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/300#issuecomment-68425623:197,update,updates,197,https://qutip.org,https://github.com/qutip/qutip/pull/300#issuecomment-68425623,1,['update'],['updates']
Deployability,[![Coverage Status](https://coveralls.io/builds/1676696/badge)](https://coveralls.io/builds/1676696). Changes Unknown when pulling **88d0f89e3f341ed06b874e009eb23e1d084897f9 on nonhermitian:travis-updates** into *\* on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/300#issuecomment-68425931:197,update,updates,197,https://qutip.org,https://github.com/qutip/qutip/pull/300#issuecomment-68425931,1,['update'],['updates']
Deployability,[![Coverage Status](https://coveralls.io/builds/22915335/badge)](https://coveralls.io/builds/22915335). Coverage decreased (-0.007%) to 72.421% when pulling **983b91405467b32b82eb4ff97d673f59d00a48b3 on ThatAdamsGuy:patch-1** into **3f2f3f2486c8f266784e2ca29731bb7fe3138c29 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/984#issuecomment-484914912:216,patch,patch-,216,https://qutip.org,https://github.com/qutip/qutip/pull/984#issuecomment-484914912,1,['patch'],['patch-']
Deployability,[![Coverage Status](https://coveralls.io/builds/24995156/badge)](https://coveralls.io/builds/24995156). Coverage increased (+0.01%) to 71.788% when pulling **df9d7c97402f4a8b1d675190fd4e8ed632114cd3 on yarrriv:patch-1** into **181a98e910a1f34bb29be31b91d61f765d6c5a37 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1058#issuecomment-518337579:210,patch,patch-,210,https://qutip.org,https://github.com/qutip/qutip/pull/1058#issuecomment-518337579,1,['patch'],['patch-']
Deployability,[![Coverage Status](https://coveralls.io/builds/37292804/badge)](https://coveralls.io/builds/37292804). Coverage remained the same at 63.189% when pulling **8645164cfed7b1f7055c49cca80cb6de25dcc796 on cgohlke:patch-1** into **469b18c879b8e46b765caf4d6637e4d61b99747d on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1449#issuecomment-782561040:209,patch,patch-,209,https://qutip.org,https://github.com/qutip/qutip/pull/1449#issuecomment-782561040,1,['patch'],['patch-']
Deployability,[![Coverage Status](https://coveralls.io/builds/37454317/badge)](https://coveralls.io/builds/37454317). Coverage remained the same at 63.189% when pulling **d0f4a71e606ffa0d0ce63c20c1539ba5343c23c4 on jakelishman:update-mailmap** into **f995f6f638c4a275f3b44016f22adb5fdb16845f on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1454#issuecomment-786076488:213,update,update-mailmap,213,https://qutip.org,https://github.com/qutip/qutip/pull/1454#issuecomment-786076488,1,['update'],['update-mailmap']
Deployability,[![Coverage Status](https://coveralls.io/builds/39186985/badge)](https://coveralls.io/builds/39186985). Coverage decreased (-0.004%) to 64.305% when pulling **1a7ff5023a7363df5b4c62ef2c9ac8eb55f37d5b on jakelishman:update-readme** into **87f61257f65b35756305405daf82aafdc39e1b41 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1511#issuecomment-828397393:215,update,update-readme,215,https://qutip.org,https://github.com/qutip/qutip/pull/1511#issuecomment-828397393,1,['update'],['update-readme']
Deployability,[![Coverage Status](https://coveralls.io/builds/39289486/badge)](https://coveralls.io/builds/39289486). Coverage remained the same at 64.305% when pulling **7edb262b7554e07e6a58233dcf8fe45a23315c44 on jakelishman:fix-release-versioning** into **963c1bb56dbd30f6bf39cd6211bab4603ac88f13 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1541#issuecomment-830806647:217,release,release-versioning,217,https://qutip.org,https://github.com/qutip/qutip/pull/1541#issuecomment-830806647,1,['release'],['release-versioning']
Deployability,[![Coverage Status](https://coveralls.io/builds/39351308/badge)](https://coveralls.io/builds/39351308). Coverage increased (+0.2%) to 64.312% when pulling **52c3db5926158598708118e9420d4dbd58c0ee1e on hodgestar:4.6.1-release-preparation** into **d6f5838cf859d0f58d0119b22e71a266743b50cf on qutip:qutip-4.6.X**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1543#issuecomment-832021362:217,release,release-preparation,217,https://qutip.org,https://github.com/qutip/qutip/pull/1543#issuecomment-832021362,1,['release'],['release-preparation']
Deployability,[![Coverage Status](https://coveralls.io/builds/39416644/badge)](https://coveralls.io/builds/39416644). Coverage increased (+0.004%) to 64.333% when pulling **a5519d1043410cf158fe3c14e61d80ca6af9f32d on jakelishman:update-release-docs** into **4a9da224b72165dbad66ba0ba449d9429cd510c8 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1544#issuecomment-832675360:215,update,update-release-docs,215,https://qutip.org,https://github.com/qutip/qutip/pull/1544#issuecomment-832675360,1,['update'],['update-release-docs']
Deployability,[![Coverage Status](https://coveralls.io/builds/39690016/badge)](https://coveralls.io/builds/39690016). Coverage decreased (-0.04%) to 64.893% when pulling **65a695d39530ebcba83d84dae823d47b73b436de on WingCode:patch-1** into **fe91fdda6b14c4408efe427fad0f5ebdcbabfa4a on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-841148767:211,patch,patch-,211,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-841148767,1,['patch'],['patch-']
Deployability,[![Coverage Status](https://coveralls.io/builds/40239573/badge)](https://coveralls.io/builds/40239573). Coverage increased (+0.009%) to 64.937% when pulling **40af6dde3a558f2b2ba78b0ca03a34b6208f9be7 on quantshah:changelog-update-4.6.2** into **acb6cfe23f951673b8f4bcba7ea0b7a62b1e6305 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1564#issuecomment-852993886:223,update,update-,223,https://qutip.org,https://github.com/qutip/qutip/pull/1564#issuecomment-852993886,1,['update'],['update-']
Deployability,[![Coverage Status](https://coveralls.io/builds/42690711/badge)](https://coveralls.io/builds/42690711). Coverage remained the same at 65.763% when pulling **4ba6c3a1b16bfbaf85065191f2a03e58d62e55af on Erotemic:patch-1** into **d78b3b1fbd058f3fb727dd271da14af0dafbb99d on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1652#issuecomment-914083278:210,patch,patch-,210,https://qutip.org,https://github.com/qutip/qutip/pull/1652#issuecomment-914083278,1,['patch'],['patch-']
Deployability,[![Coverage Status](https://coveralls.io/builds/43080503/badge)](https://coveralls.io/builds/43080503). Coverage increased (+0.004%) to 65.871% when pulling **a377949b2d459876aebac0e60f494924566f7453 on hodgestar:feature/update-floquet-guide-fesolve-call** into **9b235c48217fbc9965f993757b0819ebf8ee1f16 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1675#issuecomment-927639215:221,update,update-floquet-guide-fesolve-call,221,https://qutip.org,https://github.com/qutip/qutip/pull/1675#issuecomment-927639215,1,['update'],['update-floquet-guide-fesolve-call']
Deployability,[![Coverage Status](https://coveralls.io/builds/43279924/badge)](https://coveralls.io/builds/43279924). Coverage increased (+0.2%) to 65.124% when pulling **ac8e9d40d23d253173918a2d353d47f23abdf633 on Ericgig:integrators** into **f8ed1be97946171ae8ba9242673cf2674430da56 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-920331445:209,integrat,integrators,209,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-920331445,1,['integrat'],['integrators']
Deployability,[![Coverage Status](https://coveralls.io/builds/44101627/badge)](https://coveralls.io/builds/44101627). Coverage increased (+0.3%) to 65.437% when pulling **af38507293a5f1465f01682e0c34f1499b21f377 on Ericgig:solver.integrator** into **9395b959fd308afc1bf2087171f3e83f6d3387e4 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1700#issuecomment-953871052:216,integrat,integrator,216,https://qutip.org,https://github.com/qutip/qutip/pull/1700#issuecomment-953871052,1,['integrat'],['integrator']
Deployability,[![Coverage Status](https://coveralls.io/builds/44887329/badge)](https://coveralls.io/builds/44887329). Coverage remained the same at 65.525% when pulling **d3a5c6e3ebb43afa0c2eb7b2456c886cb9651bd1 on Ericgig:safe.integrator** into **298316b4f034f467788943015b3277bf88f3fc9b on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1734#issuecomment-989070040:214,integrat,integrator,214,https://qutip.org,https://github.com/qutip/qutip/pull/1734#issuecomment-989070040,1,['integrat'],['integrator']
Deployability,[![Coverage Status](https://coveralls.io/builds/44890781/badge)](https://coveralls.io/builds/44890781). Coverage decreased (-0.02%) to 68.272% when pulling **351a56170119246c77692112d6b46d21a75410a3 on henryiii:patch-1** into **9c2c08b82040c2c47fe8290bc23ecf6047e00bc5 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1738#issuecomment-990098258:211,patch,patch-,211,https://qutip.org,https://github.com/qutip/qutip/pull/1738#issuecomment-990098258,1,['patch'],['patch-']
Deployability,[![Coverage Status](https://coveralls.io/builds/44907513/badge)](https://coveralls.io/builds/44907513). Coverage decreased (-0.007%) to 68.323% when pulling **d183195b99a0312d8069b01266b929b47decd198 on madphysicist:patch-1** into **3c4110a12dbac851276e146fdebc26d2b72963a7 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1469#issuecomment-807669665:216,patch,patch-,216,https://qutip.org,https://github.com/qutip/qutip/pull/1469#issuecomment-807669665,1,['patch'],['patch-']
Deployability,[![Coverage Status](https://coveralls.io/builds/45783203/badge)](https://coveralls.io/builds/45783203). Coverage decreased (-0.03%) to 68.295% when pulling **ed351d809c2dc2146aca7ef99779af12a79d98d7 on VolodyaCO:hotfix/volodyaco/title-in-visualization** into **b6b86579d6208fc2df5859059bd1cad18f1db06b on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1707#issuecomment-967185365:212,hotfix,hotfix,212,https://qutip.org,https://github.com/qutip/qutip/pull/1707#issuecomment-967185365,1,['hotfix'],['hotfix']
Deployability,[![Coverage Status](https://coveralls.io/builds/46168599/badge)](https://coveralls.io/builds/46168599). Coverage increased (+0.07%) to 65.687% when pulling **299f22bc6d2d57f572db0948fa1f0fbff32b8ed6 on hodgestar:fix/update-dev-major-ci-tests** into **0503eb03e2f1a53e747c21b99221d1d4adc1b833 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1791#issuecomment-1028153738:216,update,update-dev-major-ci-tests,216,https://qutip.org,https://github.com/qutip/qutip/pull/1791#issuecomment-1028153738,1,['update'],['update-dev-major-ci-tests']
Deployability,[![Coverage Status](https://coveralls.io/builds/47184103/badge)](https://coveralls.io/builds/47184103). Coverage remained the same at 68.993% when pulling **175afa8685d8c131ab09587014abc7f6e863d6ad on hodgestar:update-superop-tests** into **71ad3088887e6ccde897fa5f2a632932218ae337 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1825#issuecomment-1061784670:211,update,update-superop-tests,211,https://qutip.org,https://github.com/qutip/qutip/pull/1825#issuecomment-1061784670,1,['update'],['update-superop-tests']
Deployability,[![Coverage Status](https://coveralls.io/builds/48246604/badge)](https://coveralls.io/builds/48246604). Coverage increased (+0.03%) to 69.593% when pulling **a5cb85fbcc0aea7fad8a570cca4a9ae29671638a on hodgestar:feature/update-changelog-for-qutip-4-7** into **5f926b45fd8a36e2f33ea7bf36f02b8cb7ffef9f on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1852#issuecomment-1096749552:220,update,update-changelog-for-qutip-,220,https://qutip.org,https://github.com/qutip/qutip/pull/1852#issuecomment-1096749552,1,['update'],['update-changelog-for-qutip-']
Deployability,[![Coverage Status](https://coveralls.io/builds/48544268/badge)](https://coveralls.io/builds/48544268). Coverage increased (+0.02%) to 65.506% when pulling **eaae9c110b5c9a78169db01ff213b1b4b04a0043 on Ericgig:integrator.step.fix** into **539e2e4bcd730894dffaec8cd2e0ac9b72efef77 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1880#issuecomment-1108857030:210,integrat,integrator,210,https://qutip.org,https://github.com/qutip/qutip/pull/1880#issuecomment-1108857030,1,['integrat'],['integrator']
Deployability,[![Coverage Status](https://coveralls.io/builds/48593127/badge)](https://coveralls.io/builds/48593127). Coverage increased (+1.4%) to 67.07% when pulling **ec1c71c02f434b2d56fad69a8db2069f22a6b9bf on Ericgig:integrators.verner** into **414c5eccd2263a5607bf9f57b3b73381ea377504 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1644#issuecomment-953951326:208,integrat,integrators,208,https://qutip.org,https://github.com/qutip/qutip/pull/1644#issuecomment-953951326,1,['integrat'],['integrators']
Deployability,[![Coverage Status](https://coveralls.io/builds/49888682/badge)](https://coveralls.io/builds/49888682). Coverage increased (+0.01%) to 65.507% when pulling **273803aa68ccccb848933ef7536af43dc7b4abe5 on Ericgig:install.fix** into **781d58c9062fcea0b7cbacf4eaaf437adf01b274 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1926#issuecomment-1151371449:210,install,install,210,https://qutip.org,https://github.com/qutip/qutip/pull/1926#issuecomment-1151371449,1,['install'],['install']
Deployability,[![Coverage Status](https://coveralls.io/builds/51447321/badge)](https://coveralls.io/builds/51447321). Coverage remained the same at 69.927% when pulling **b179082f96cc04c039cb636c15b1b10a57794c58 on hodgestar:feature/update-roadmap-and-ideas-to-show-completed-work-2022-08** into **7a09e3ecbbeb491c70c17d8f05bb9d1dfcda5a05 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1967#issuecomment-1206374899:219,update,update-roadmap-and-ideas-to-show-completed-work-,219,https://qutip.org,https://github.com/qutip/qutip/pull/1967#issuecomment-1206374899,1,['update'],['update-roadmap-and-ideas-to-show-completed-work-']
Deployability,[![Coverage Status](https://coveralls.io/builds/51467716/badge)](https://coveralls.io/builds/51467716). Coverage decreased (-0.05%) to 71.537% when pulling **d459df96541e5a96f5010314520a252d61750dad on xspronken:UpdateManifest** into **50be470d9d23981c7cbfed0b04a702a23d440eb8 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1971#issuecomment-1207225971:212,Update,UpdateManifest,212,https://qutip.org,https://github.com/qutip/qutip/pull/1971#issuecomment-1207225971,1,['Update'],['UpdateManifest']
Deployability,[![Coverage Status](https://coveralls.io/builds/55196508/badge)](https://coveralls.io/builds/55196508). Coverage decreased (-0.2%) to 72.452% when pulling **c26257095ae5d7c9f6fd69c04bcc2206ab76c581 on Ericgig:krylov.integrator** into **a0ca511e15f2edb4d707096e74341a89d7a9d442 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1986#issuecomment-1228914050:216,integrat,integrator,216,https://qutip.org,https://github.com/qutip/qutip/pull/1986#issuecomment-1228914050,1,['integrat'],['integrator']
Deployability,[![Coverage Status](https://coveralls.io/builds/55225653/badge)](https://coveralls.io/builds/55225653). Coverage remained the same at 69.926% when pulling **e0747ab227153f16854be1a5e54a070dc8d0bded on eltociear:patch-1** into **ff9ada8cbab96b98e3163e9f5c9337c29ca59ac1 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2049#issuecomment-1354531823:211,patch,patch-,211,https://qutip.org,https://github.com/qutip/qutip/pull/2049#issuecomment-1354531823,1,['patch'],['patch-']
Deployability,[![Coverage Status](https://coveralls.io/builds/56843722/badge)](https://coveralls.io/builds/56843722). Coverage: 72.029%. Remained the same when pulling **778cbba6833f6472ac1cb4c1c5eea7164cd3d70c on hodgestar:feature/update-ipython-version-for-docs-to-8.10.0** into **6da3fc2b87406053389e11ff68e8308e87b352e4 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2086#issuecomment-1426703028:218,update,update-ipython-version-for-docs-to-,218,https://qutip.org,https://github.com/qutip/qutip/pull/2086#issuecomment-1426703028,1,['update'],['update-ipython-version-for-docs-to-']
Deployability,[![Coverage Status](https://coveralls.io/builds/58517887/badge)](https://coveralls.io/builds/58517887). Coverage: 75.271%. Remained the same when pulling **97596dbf927b20ded1d70ad4d890e377f736dba4 on hodgestar:feature/update-doc-build-requirements** into **32bbdf958ec2fe8ef37e8143f945929ed881ae6a on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2149#issuecomment-1494663755:218,update,update-doc-build-requirements,218,https://qutip.org,https://github.com/qutip/qutip/pull/2149#issuecomment-1494663755,1,['update'],['update-doc-build-requirements']
Deployability,[![Coverage Status](https://coveralls.io/builds/61043380/badge)](https://coveralls.io/builds/61043380). coverage: 78.106% (-0.02%) from 78.129% when pulling **e07d26cc2443f5ade4d9db7a5a929410a9102cad on SJUW:patch-1** into **ec0fcc60142fb5bfb3adc7f9b720fc7b2af9d8a2 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2181#issuecomment-1609825456:208,patch,patch-,208,https://qutip.org,https://github.com/qutip/qutip/pull/2181#issuecomment-1609825456,1,['patch'],['patch-']
Deployability,[![Coverage Status](https://coveralls.io/builds/64827370/badge)](https://coveralls.io/builds/64827370). coverage: 84.196%. remained the same; when pulling **1529237b401bf8f5271bf878498ca6cc9d07f772 on anonymousdouble:patch-1**; into **7fbb5672242600481d84ee4e5144c95748bf17dc on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2281#issuecomment-1873806211:217,patch,patch-,217,https://qutip.org,https://github.com/qutip/qutip/pull/2281#issuecomment-1873806211,1,['patch'],['patch-']
Deployability,[![Coverage Status](https://coveralls.io/builds/65358635/badge)](https://coveralls.io/builds/65358635). coverage: 70.442%. remained the same; when pulling **c540878f3be02e5285af1162d535808f39f6a54c on Ericgig:prepare-release-4.7.5**; into **e4ba3bd12055d66515955435075a8e14a920764f on qutip:qutip-4.7.X**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2310#issuecomment-1915073450:217,release,release-,217,https://qutip.org,https://github.com/qutip/qutip/pull/2310#issuecomment-1915073450,1,['release'],['release-']
Deployability,[![Coverage Status](https://coveralls.io/builds/66647562/badge)](https://coveralls.io/builds/66647562). coverage: 86.032%. remained the same; when pulling **dc69fee10a5e4958649e997c3fee5057ca34e9bf on hodgestar:feature/update-sphinx-rtd-theme-to-fix-search**; into **7fcc3f3fb9d626c3057fed9721a11f32f5647266 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2375#issuecomment-2030606847:219,update,update-sphinx-rtd-theme-to-fix-search,219,https://qutip.org,https://github.com/qutip/qutip/pull/2375#issuecomment-2030606847,1,['update'],['update-sphinx-rtd-theme-to-fix-search']
Deployability,[![Coverage Status](https://coveralls.io/builds/67764030/badge)](https://coveralls.io/builds/67764030). coverage: 86.27%. first build; when pulling **bb554d0ecb8d299e3fd859ba2218c82d62ef58ed on pmenczel:doc-updates**; into **e450d6df3cb54961e455234c37c4abe84d614039 on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2439#issuecomment-2137151588:207,update,updates,207,https://qutip.org,https://github.com/qutip/qutip/pull/2439#issuecomment-2137151588,1,['update'],['updates']
Deployability,"[-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_pw_8rhs14880_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:17",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:7704,Release,Release,7704,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"[-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_pw_8rhs14881_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used u",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:13541,Release,Release,13541,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"[-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_pw_8rhs14882_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used u",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:19545,Release,Release,19545,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"[-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_pw_8rhs14883_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > ok; > correlation: comparing TLS emission correlations (fn-list td format) ... ok; > correlation: comparing TL",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:25549,Release,Release,25549,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"[0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op; > + )[0]; >; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245592358>:; >; > > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense; > + ); >; > ⬇️ Suggested change; >; > - solver_instance = FLiMESolver(; > - floquet_basis,; > - c_ops,; > - args,; > - time_sense=time_sense; > - ); > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense,; > + options=options,; > + ); >; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245594985>:; >; > > @@ -929,4 +930,5 @@ def run(self, state0, tlist, *, floquet=False, args=None, e_ops=None):; > stats[""run time""] = progress_bar.total_time(); > # TODO: It would be nice if integrator could give evolution statistics; > # stats.update(_integrator.stats); > +; >; > Why a new empty line here?; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245604228>:; >; > > + self.evecs = _data.permute.indices(; > + evecs, col_perm=np.argsort(perm)); >; > This file already has black ran on it and the style is ok as is.; > (But I just learned that black exclude the newline in it's character count; > while pycodestyle include it.); > Since it's not the main part of your PR, please revert it to it's original; > state.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245610200>:; >; > > + total_R_tensor[key] += np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + except KeyError:; > + total_R_tensor[key] = np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTer",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:2879,integrat,integrator,2879,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['integrat'],['integrator']
Deployability,"[mkdtemp.txt](https://github.com/qutip/qutip/files/4396123/mkdtemp.txt). Could you try and apply this patch and see if it fixes the problem? Just download it somewhere, then; ```; git apply /path/to/mkdtemp.txt; ```; should do it. If so, I'll commit and push.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605336931:102,patch,patch,102,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605336931,1,['patch'],['patch']
Deployability,"\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\py",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:5227,Release,Release,5227,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:5089,Release,Release,5089,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:4944,Release,Release,4944,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\py",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:11064,Release,Release,11064,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:10926,Release,Release,10926,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:10781,Release,Release,10781,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\py",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:17068,Release,Release,17068,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:16930,Release,Release,16930,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:16785,Release,Release,16785,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\py",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:23072,Release,Release,23072,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:22934,Release,Release,22934,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:22789,Release,Release,22789,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_pw_8rhs14880_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Releas",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:8480,Release,Release,8480,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_pw_8rhs14881_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_V",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:14317,Release,Release,14317,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_pw_8rhs14882_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_V",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:20321,Release,Release,20321,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_pw_8rhs14883_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > ok; > correlation: comparing TLS emission correlations (fn-list td format) ... ok; > correlation: comparing TLS emission correlations (fn td format) ... ok; > Counting statistics: current and current noise in a DQD model ... ok; > Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; > Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; > Diagonalization of random two-level system ... ok; > Diagonalization of composite systems ... ok; > Excitation-number-restricted state-space: full state space ... ok; > Excitation-number-restricted state space: single excitations ... ok; > Excitation-number-restricted state space: two excitations ... ok; > Excitation-number-restricted state space: fock states ... ok; > Excitation-number-restricted state space: identity operator ... ok; > Excitation-number-restricted state space: thermal dens",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:26325,Release,Release,26325,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"`QobjEvo` have a `with_state` method `QobjEvo.with_state(t, psi, args={})` which can be used instead of `__call__` if needed. It compute the coefficient on the python side and send them to the cython part if needed. But I don't like it like this, using `__call__` will raise and error if a psi is needed, and we need to treat it differently in solvers.; How about having the state inserted in the args dictionary.; So if the users have the key ""psi_vec"" or ""psi_Qobj"" in args and mul_vec (spmv)/ expect is used, it is automatically updated. With that definition most solvers could work without a special cases for `rhs_with_state=True`. The present method could still be supported using decorator.; Also it would be relatively simple to support expectation value in args in a similar way:; if a specific key/value is found in the dictonary (`args[""_expect""+name] = Qobj/ QobjEvo` ), it is replaced with the operator expectation value when possible. . For the present case, we should document it more than change it, going back to Qobj will slow the simulation. Maybe `rhs_with_state` could be more than a bool and offer the option?; Here ` expect_rho_vec(data, vec, isherm)` from qutip.expect could be used to skip the vec -> Qobj conversion. . Also, the users should not need to know the matrix format and have to do the conversion themselves. They should never have to use `dense2D_to_fastcsr_fmode`. `QObj((vec2mat(rho))` works and should be sufficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-462591342:532,update,updated,532,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-462591342,1,['update'],['updated']
Deployability,"`c_ops` don't support arbitrary function, and there is no easy way to go around it for `mcsolve`. The main runner of the evolution is in cython and rewriting a python mcsolver would probably be easier than to try to force it.; In one of my old PR: #1123, I believe mcsolve and mesolve accepted arbitrary function for `c_ops` but `stochastic` was still in progress. You could try that, but there is no guaranties.; Otherwise, the next major release should accept functions, but it's still far away.; `mesolve` is probably the easiest way.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1398#issuecomment-740001840:440,release,release,440,https://qutip.org,https://github.com/qutip/qutip/issues/1398#issuecomment-740001840,1,['release'],['release']
Deployability,`conda install libgcc` seems to solve the problem for now. The conda-package still fails with a segfault.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-293402620:7,install,install,7,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-293402620,1,['install'],['install']
Deployability,"`mesolve` use cython code for speed and there was a strange bug when using sparse matrix with stored `0` so the `tidyup` is needed. As long as pure `0` are not kept, small values can be used. For now `..solve` will respond to `settings.auto_tidyup_atol` with #1832 for such cases. In a future major release (branch `dev.major` if you are curious), the support is for sparse matrix is improved a lot and those settings are used in the sparse matrices operations directly, so they will apply everywhere.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1831#issuecomment-1064226855:299,release,release,299,https://qutip.org,https://github.com/qutip/qutip/issues/1831#issuecomment-1064226855,1,['release'],['release']
Deployability,"`python3 -mbuild` has a `-C` option (`--config-setting`), see`https://pypa-build.readthedocs.io/en/latest/`. It sounds like it could be used for build configuration options like qutip's openmp support. It doesn't seem to work with the current handling in setup.py however. Permutations of `-C--with-openmp`, `-Copenmp`, `-Copenmp=1` enable a succcessful qutip PEP517 build, but `qutip.about()` then reports; ```; OPENMP Installed: False; ```; indicating the option is ignored.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875#issuecomment-1107460223:151,configurat,configuration,151,https://qutip.org,https://github.com/qutip/qutip/issues/1875#issuecomment-1107460223,2,"['Install', 'configurat']","['Installed', 'configuration']"
Deployability,"`qcircuit` is no longer vendored by QuTiP, so it uses whatever version of `qcircuit` is installed along with LaTeX (e.g. TexLive includes `qcircuit`).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1096#issuecomment-1097171860:88,install,installed,88,https://qutip.org,https://github.com/qutip/qutip/issues/1096#issuecomment-1097171860,1,['install'],['installed']
Deployability,"`qutip` has binary built extensions and we distribute binary releases through `conda`. These generally have to be built against a specific version of CPython, so we haven't released a cp39 candidate package yet, and `conda` will recognise that as effectively a requirement that `python<3.9`. `pip` should install from source, because we haven't yet built wheels to distribute that way (though I've been looking into that a bit more recently), so the error will likely be completely different - what sort of error do you get from that?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1371#issuecomment-711168808:61,release,releases,61,https://qutip.org,https://github.com/qutip/qutip/issues/1371#issuecomment-711168808,3,"['install', 'release']","['install', 'released', 'releases']"
Deployability,"`result.measurement` is not the same as `result.expect`, the measurement is an expectation value, but not of the `e_ops` but `m_ops` which are usually automatically generated from the `c_ops` and noise is added to the computed expectation value of the state of the trajectory. The noise is usually larger than the signal and makes it hard to see, but it should converge to mesolve's solution eventually. `smesolve`'s `expect` are just the expectation value of the state of each trajectories (averaged or not depending on options) and should average to the master equation solutions with enough trajectories. Plot in cell 8 show the match is quite good. Even with enough trajectories, the numerical error from `smesolve` will be visible. The equation solved are those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194#issuecomment-1634520926:811,integrat,integration,811,https://qutip.org,https://github.com/qutip/qutip/issues/2194#issuecomment-1634520926,1,['integrat'],['integration']
Deployability,"`scipy` 1.5 has changed some of its private attributes for matrix multiplication (to a _much_ better name!), and so matrix-matrix multiplication is completely broken for us at the moment: see scipy/scipy@53fac7a. There's also been some changes to how Hermitian eigenvalues and vectors are calculated (which actually is good news for us in general), which may has a bit of a knock-on for some of the `zheevr` tests, which is going to be a bit of a nuisance to fix. To avoid polluting this PR with (any more) off-topic discussion, I've opened #1299. The new data layer types will fix the matrix multiplication issue permanently, because we'll not be duplicating/reusing large tracts of `scipy` private code - we have our own Cython versions that operate faster on more optimised types. In the meantime, #1298 is a patch to catch the renames.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-649446743:812,patch,patch,812,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-649446743,1,['patch'],['patch']
Deployability,`xcode-select --install` does not fix the problem,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-438355753:16,install,install,16,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-438355753,1,['install'],['install']
Deployability,"a maintainer of QuTiP. And it; > seems that there is no way to make a PR to Wiki. I can also send you the; > markdown source code per email like this, but I’m not sure if it works as I; > expected.; >; > The following is the markdown source code:; >; > -----------------------------------; > ## 1. Error mitigation in QuTiP; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class `Processor` and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > `qutip.qip.noise` to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (`qutip.qip.circuit`). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; >; > ### Expected outcomes; > - More devices defined in the `qutip.qip.device` module. At the moment, we; > have two models: spin chain and cavity QED. We would like to include some; > other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:1651,integrat,integration,1651,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['integrat'],['integration']
Deployability,"actually, I had installed the 4.4.1 firstly, but it had always a similar problem. have you had other advice?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1079#issuecomment-527691554:16,install,installed,16,https://qutip.org,https://github.com/qutip/qutip/issues/1079#issuecomment-527691554,1,['install'],['installed']
Deployability,"ages/pep517/in_process/_in_process.py"", line 363, in <module>; main(); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 345, in main; json_out['return_val'] = hook(**hook_input['kwargs']); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 261, in build_wheel; return _build_backend().build_wheel(wheel_directory, config_settings,; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 230, in build_wheel; return self._build_with_temp_dir(['bdist_wheel'], '.whl',; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 211, in _build_with_temp_dir; sys.argv = (sys.argv[:1] + setup_command +; TypeError: can only concatenate list (not ""str"") to list. ERROR Backend subproccess exited when trying to invoke build_wheel; ```. The other method; ```; --config-setting=""--build-option=--with-openmp""; ```; appears to work in the sense that it builds successfully. But after installing the package it reports that openmp is still missing; ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0; Numpy Version: 1.21.5; Scipy Version: 1.8.1; Cython Version: 0.29.30; Matplotlib Version: 3.5.2; Python Version: 3.10.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ====================================================================",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152:1297,install,installing,1297,https://qutip.org,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152,1,['install'],['installing']
Deployability,"ahh this is the link I referred to, looks like there is not a lot of content on this. I will try and update the code with fixes they have recommended but I think this issue is still ongoing with matplotlib",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2442#issuecomment-2143466419:101,update,update,101,https://qutip.org,https://github.com/qutip/qutip/pull/2442#issuecomment-2143466419,1,['update'],['update']
Deployability,"alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warn",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:6048,Release,Release,6048,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs1488",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:6599,Release,Release,6599,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warn",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:11885,Release,Release,11885,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs1488",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:12352,Release,Release,12352,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warn",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:17889,Release,Release,17889,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs1488",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:18270,Release,Release,18270,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warn",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:23893,Release,Release,23893,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs1488",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:24188,Release,Release,24188,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arg",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:3739,Release,Release,3739,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conver",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:5253,Release,Release,5253,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too man",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:5389,Release,Release,5389,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arg",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:9492,Release,Release,9492,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conver",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:11006,Release,Release,11006,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too man",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:11142,Release,Release,11142,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arg",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:15410,Release,Release,15410,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conver",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:16924,Release,Release,16924,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too man",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:17060,Release,Release,17060,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arg",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:21328,Release,Release,21328,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conver",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:22842,Release,Release,22842,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too man",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:22978,Release,Release,22978,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"amiltonian aren't mutable; the preprocessing of `mesolve` means that none of those objects will exist inside the integrator loop. That's fine for this use-case, but it's not very general. These problems of mutability would apply to callback functions as well. A different way of using `yield` or callback function would be to really lean into a co-routine sort of pattern. So `mesolve` internally would look like; ```python; def mesolve(H, state, times, c_ops, e_ops, options):; # [... set up problem ...]; integrator = scipy.integrate.ode(...); for time in times[1:]:; state = integrator.step_to(time); instructions = yield _mesolve_output_state(state, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be like; ```python; solver = mesolve(H, rho0, times, c_ops); try:; result = next(solver); while True:; next_control = krotov.get_next_control(result.time, result.state); result = solver.send([; ('update-arguments', {'control': next_control}),; ('update-hamiltonian', ...),; ('add-c_op', ...),; # possible examples of API commands; ]); except StopIteration:; pass; ```; That's not super user friendly, but it _is_ nicely re-entrant. You'd have a single object you can copy and branch off, and QuTiP would be able to update the relevant objects for you at any given time. Still, I don't think it's a good strategy in general - we'd have to _very_ rigorously define the ""instructions"" API, and it would be pretty awkward to use. It would also be a nuisance for extensibility, probably; the intermediate state and instructions of `mesolve` would just more APIs we have to maintain and keep constant. Note that you can achieve the exact same thing with a callback function pattern here, except that control would never really pass back to the caller, so it would be impossible to (for example) branch execution part way through. The new, modular system we want to put into QuTiP 5 is an attempt to get the best of all these worlds. ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:2292,update,update-arguments,2292,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,2,['update'],"['update-arguments', 'update-hamiltonian']"
Deployability,"and I would value input from everyone involved in this review process (@sahmed95 , @kafischer, @nonhermitian, @ajgpitch). I've outlined my thoughts on the pros and cons of this change below. **Pros:**; - Consolidating these functions to class methods would be convenient in terms of reducing verbosity, since you would have to specify fewer arguments when calling these functions; - This would allow for a small performance increase, since maintaining a class-wide Evolver would mean that propagators would be precomputed for later simulations. However, this performance increase would be small and would be nearly un-noticeable for simulating N>3 scattered photons, since N=2 fully computes all propagators U[t1, t2]; - This could allow for additional helper functions to be added without cluttering up the exported top-level functions. Examples could include a `temporal_basis` function which could enumerate all `temporal_basis_vector`s for a given configuration of waveguides and list of times, or a `to_ndarray` function which could create an n-dimensional numpy array containing the projections of the computed scattered state onto appropriate basis vectors. **Cons:**; - Making this a class seems to be at odds with the general style that QuTiP is coded in. In physics-related modules which users regularly interact with, QuTiP seems to reserve classes exclusively for physical things, like states and operators, instead using functions to represent physics calculations which can be done with these objects. (Or, if you like, ""classes are nouns, functions are verbs"".) There are 25 keyword occurrences of ""class"" in the top-level qutip directory and subdirectories thereof:; - 21 are not physics-related:; - 6 are related to plotting or visualization utilities ; - 6 are `Distribution` classes or subclasses, which seem to be only used for visualization; - 6 are related to solver options or results; - 3 are low-level classes that users typically wouldn't interact with; - This leaves only 4 ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384821368:3338,configurat,configuration,3338,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384821368,1,['configurat'],['configuration']
Deployability,any answer/update?; Thanks,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1799#issuecomment-1035841538:11,update,update,11,https://qutip.org,https://github.com/qutip/qutip/issues/1799#issuecomment-1035841538,1,['update'],['update']
Deployability,"ase\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:5655,Release,Release,5655,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ase\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: wa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:5793,Release,Release,5793,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ase\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:11492,Release,Release,11492,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ase\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: wa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:11630,Release,Release,11630,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ase\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:17496,Release,Release,17496,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ase\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: wa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:17634,Release,Release,17634,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ase\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:23500,Release,Release,23500,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ase\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: wa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:23638,Release,Release,23638,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"at]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:5640,Release,Release,5640,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"at]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:11393,Release,Release,11393,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"at]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:17311,Release,Release,17311,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"at]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:23229,Release,Release,23229,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ata/canopy-1.5.4.3105.macosx-x86_64/Canopy.app/Contents/lib/python2.7/distutils/dist.py"", line 972, in run_command; > cmd_obj.run(); > File ""/Users/rjmagya/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/Cython/Distutils/build_ext.py"", line 163, in run; > _build_ext.build_ext.run(self); > File ""/Applications/Canopy.app/appdata/canopy-1.5.4.3105.macosx-x86_64/Canopy.app/Contents/lib/python2.7/distutils/command/build_ext.py"", line 337, in run; > self.build_extensions(); > File ""/Users/rjmagya/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/Cython/Distutils/build_ext.py"", line 171, in build_extensions; > self.build_extension(ext); > File ""/Applications/Canopy.app/appdata/canopy-1.5.4.3105.macosx-x86_64/Canopy.app/Contents/lib/python2.7/distutils/command/build_ext.py"", line 496, in build_extension; > depends=ext.depends); > File ""/Applications/Canopy.app/appdata/canopy-1.5.4.3105.macosx-x86_64/Canopy.app/Contents/lib/python2.7/distutils/ccompiler.py"", line 574, in compile; > self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts); > File ""/Applications/Canopy.app/appdata/canopy-1.5.4.3105.macosx-x86_64/Canopy.app/Contents/lib/python2.7/distutils/unixccompiler.py"", line 122, in _compile; > raise CompileError, msg; > ImportError: Building module qutip.cy.spmatfuncs failed: [""CompileError: command 'gcc' failed with exit status 1\n""]; > import numpy as np; > ; > from qutip import *; > Traceback (most recent call last):; > File """", line 1, in ; > File ""/Users/rjmagya/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/qutip/init.py"", line 62, in ; > qutip.settings.ipython = False; > AttributeError: 'module' object has no attribute 'settings'; > ; > ######################; > ; > This seems similar to the build error in Installation on OS X with Homebrew script error #348.; > ; > Is this a bug in qutip ? Is there a way to fix this?; > ; > —; > Reply to this email directly or view it on GitHub.; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/382#issuecomment-148179436:5142,Install,Installation,5142,https://qutip.org,https://github.com/qutip/qutip/issues/382#issuecomment-148179436,1,['Install'],['Installation']
Deployability,"ator representation. Perhaps @cgranade knows?; > ; > import scipy; > ; > from qutip.mesolve import _generic_ode_solve; > from qutip.superoperator import liouvillian, mat2vec; > from qutip.settings import debug; > ; > if debug:; > import inspect; > ; > def _mesolve_const_super(H, E0, tlist, c_op_list, e_ops, args, opt,; > progress_bar):; > """"""; > Evolve the super-operator `E0` using an ODE solver, for constant ; > Liouvillian; > """"""; > ; > ```; > if debug:; > print(inspect.stack()[0][3]); > ; > """"""; > #; > # check initial state; > #; > if isket(rho0):; > # if initial state is a ket and no collapse operator where given,; > # fall back on the unitary schrodinger equation solver; > if len(c_op_list) == 0 and isoper(H):; > return _sesolve_const(H, rho0, tlist, e_ops, args, opt,; > progress_bar); > ; > # Got a wave function as initial state: convert to density matrix.; > rho0 = ket2dm(rho0); > """"""; > ; > #; > # check initial value; > #; > if not E0.issuper:; > raise TypeError(""Argument 'E0' should be a super-operator""); > ; > #; > # construct liouvillian; > #; > if opt.tidy:; > H = H.tidyup(opt.atol); > ; > L = liouvillian(H, c_op_list); > ; > #; > # setup integrator; > #; > initial_vector = mat2vec(E0.full()).ravel(); > # r = scipy.integrate.ode(cy_ode_rhs); > r = scipy.integrate.ode(_rhs); > # r.set_f_params(L.data.data, L.data.indices, L.data.indptr); > # not sure why I need to transpose L here:; > r.set_f_params(scipy.transpose(L.data)); > r.set_integrator('zvode', method=opt.method, order=opt.order,; > atol=opt.atol, rtol=opt.rtol, nsteps=opt.nsteps,; > first_step=opt.first_step, min_step=opt.min_step,; > max_step=opt.max_step); > r.set_initial_value(initial_vector, tlist[0]); > ; > #; > # call generic ODE code; > #; > return _generic_ode_solve(r, E0, tlist, e_ops, opt, progress_bar); > ```; > ; > def _rhs(t,y,data):; > ym = y.reshape(data.shape); > return (data*ym).flatten(); > —; > Reply to this email directly or view it on GitHub.; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/384#issuecomment-150751174:4068,integrat,integrator,4068,https://qutip.org,https://github.com/qutip/qutip/issues/384#issuecomment-150751174,3,['integrat'],"['integrate', 'integrator']"
Deployability,"ay of using `yield` or callback function would be to really lean into a co-routine sort of pattern. So `mesolve` internally would look like; ```python; def mesolve(H, state, times, c_ops, e_ops, options):; # [... set up problem ...]; integrator = scipy.integrate.ode(...); for time in times[1:]:; state = integrator.step_to(time); instructions = yield _mesolve_output_state(state, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be like; ```python; solver = mesolve(H, rho0, times, c_ops); try:; result = next(solver); while True:; next_control = krotov.get_next_control(result.time, result.state); result = solver.send([; ('update-arguments', {'control': next_control}),; ('update-hamiltonian', ...),; ('add-c_op', ...),; # possible examples of API commands; ]); except StopIteration:; pass; ```; That's not super user friendly, but it _is_ nicely re-entrant. You'd have a single object you can copy and branch off, and QuTiP would be able to update the relevant objects for you at any given time. Still, I don't think it's a good strategy in general - we'd have to _very_ rigorously define the ""instructions"" API, and it would be pretty awkward to use. It would also be a nuisance for extensibility, probably; the intermediate state and instructions of `mesolve` would just more APIs we have to maintain and keep constant. Note that you can achieve the exact same thing with a callback function pattern here, except that control would never really pass back to the caller, so it would be impossible to (for example) branch execution part way through. The new, modular system we want to put into QuTiP 5 is an attempt to get the best of all these worlds. For users who don't need all this low-level behaviour, there'll still be the convenient `mesolve`, which just keeps working the same way it does now. For users (like you) who need more, we'll expose all the inner logic of the `mesolve` loop as separate components, so you'l",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:2611,update,update,2611,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,1,['update'],['update']
Deployability,"back (most recent call last):; File ""<string>"", line 1, in <module>; File ""/tmp/pip-build-hg437fn6/qutip/setup.py"", line 159, in <module>; configuration=configuration; File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/core.py"", line 135, in setup; config = configuration(); File ""/tmp/pip-build-hg437fn6/qutip/setup.py"", line 135, in configuration; config.add_subpackage('qutip'); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 1002, in add_subpackage; caller_level = 2); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 971, in get_subpackage; caller_level = caller_level + 1); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 908, in _get_configuration_from_setup_py; config = setup_module.configuration(*args); File ""qutip/setup.py"", line 8, in configuration; config.add_subpackage('cy'); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 1002, in add_subpackage; caller_level = 2); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 971, in get_subpackage; caller_level = caller_level + 1); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 883, in _get_configuration_from_setup_py; ('.py', 'U', 1)); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/imp.py"", line 234, in load_module; return load_source(name, filename, file); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/imp.py"", line 172, in load_source; module = _load(spec); File ""<frozen importlib._bootstrap>"", line 693, in _load; File ""<frozen importlib._bootstrap>"", line 673, in _load_unlocked; File ""<frozen importlib._bootstrap_external>"", line 662, i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/426#issuecomment-183253786:1177,configurat,configuration,1177,https://qutip.org,https://github.com/qutip/qutip/issues/426#issuecomment-183253786,1,['configurat'],['configuration']
Deployability,"bld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_pw_8rhs14880_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VE",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:8314,Release,Release,8314,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"bld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_pw_8rhs14881_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:14151,Release,Release,14151,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"bld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_pw_8rhs14882_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:20155,Release,Release,20155,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"bld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_pw_8rhs14883_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > ok; > correlation: comparing TLS emission correlations (fn-list td format) ... ok; > correlation: comparing TLS emission correlations (fn td format) ... ok; > Counting statistics: current and current noise in a DQD model ... ok; > Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; > Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; > Diagonalization of random two-level system ... ok; > Diagonalization of composite systems ... ok; > Excitation-number-restricted state-space: full state space ... ok; > Excitation-number-restricted state space: single excitations ... ok; > Excitation-number-restricted state space: two excitations ... ok; > Excitation-number-rest",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:26159,Release,Release,26159,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"c rhs function exposed to all that is a bit unnecessary and makes things more complicated than it needs to be. However, I think I found a reasonable compromise in that I created new _rhs_psi_deterministic and _rhs_rho_deterministic where the current deterministic contributions are calculated. These functions can now be called from a stochastic rhs implementation, like this. ```; dpsi_t = _rhs_psi_deterministic(H, psi_t, t, dt, args); ```. In this way the implementation of a stochastic rhs function is relatively isolated from how the deterministic part is calculated (which right now is trivial, but which could become more complex when time-dependent systems are implemented). However, it also gives all the flexibility needed in the rhs function, and these deterministic rhs functions do not need to be used if it is not suitable in a particular stochastic rhs implementation. . I've added the changes to the rhs behavior to the https://github.com/qutip/qutip/tree/sme-rhs-restructuring and updated the gist with the variant of your notebook. http://nbviewer.ipython.org/6153688. Note that a few other things, like the rhs function signature, had to change in the process. I hope that this updated API will be flexible enough to let you implement implicit solver. Regards rhs implementation and d1,d2 function: Yes, I understand that not all possible rhs schemes might be compatible with the parameterization with d1 and d2 functions, but when it is possible it has the great advantage that the user do not need to worry about how the rhs is implemented, only define the SDE in terms of d1 and d2, and then possibly select a rhs solver using the solver argument to smesolve. This will not work in general for solvers like the milstein scheme, since it requires an analytical derivative (unless it can be evaluated numerically?), and in those cases it would be sufficient to implement problem specific rhs functions (like rhs_rho_milstein_homodyne etc). Regarding the use of expm: OK, I agree t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22156426:1418,update,updated,1418,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22156426,1,['update'],['updated']
Deployability,"c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:4661,Release,Release,4661,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:22506,Release,Release,22506,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:10498,Release,Release,10498,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:16502,Release,Release,16502,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"change; >; > - c_ops = []; > - c_op_rates = []; > - for entry in c_ops_and_rates:; > - c_ops.append(entry[0]); > - c_op_rates.append(entry[1]); > + c_ops, c_op_rates = zip(*c_ops_and_rates); >; > or do the check here while you are looping over all elements.; > ⬇️ Suggested change; >; > - c_ops = []; > - c_op_rates = []; > - for entry in c_ops_and_rates:; > - c_ops.append(entry[0]); > - c_op_rates.append(entry[1]); > + c_ops = []; > + c_op_rates = []; > + for c_op, rate in c_ops_and_rates:; > + if not isinstance(c_op, Qobj):; > + raise TypeError(""c_ops must be type Qobj""); > + c_ops.append(c_op); > + c_op_rates.append(rate); >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245642075>:; >; > > + The state must be initialized first by calling ``start`` or; > + ``run``. If ``run`` is called,``step`` will continue from the last; > + time and state obtained.; > + """"""; > + if args:; > + raise ValueError(; > + ""FMESolver cannot update arguments""); > + state = super().step(t); > + if not floquet:; > + state = self.floquet_basis.from_floquet_basis(; > + state, t); > + elif copy:; > + state = state.copy(); > + return state; > +; > + def run(self, state00, taulist, *, floquet=False, args=None, e_ops=None,):; >; > state00?; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245643705>:; >; > > + elif copy:; > + state = state.copy(); > + return state; > +; > + def run(self, state00, taulist, *, floquet=False, args=None, e_ops=None,):; > + """"""; > + Calculate the evolution of the quantum system.; > +; > + For a ``state0`` at time ``tlist[0]`` do the evolution as directed by; > + ``rhs`` and for each time in ``tlist`` store the state and/or; > + expectation values in a :class:`Result`. The evolution method and; > + stored results are determined by ``options``.; > +; > + Parameters; > + ----------; > + state0 : :class:`Qobj`; >; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:10765,update,update,10765,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['update'],['update']
Deployability,"d check if a variational representation can properly capture the correlations. Trotterize the hamiltonian and get a circuit, without worrying about how to convert from one framework to the other. . I want to start the discussion on this topic eagerly because I am aware that it will take a fairly long time. If there is anything I can do to make your future internal discussions easier, do let me know. > I just want to caution you in case you're trying to work towards a PR. Indeed. I was just trying to play around with this. . > If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries. I completely agree with your approach. I’m simply trying to push for this to be something that will come out in a reasonable timeframe and not be something forgotten. > We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment without using them together, but can't even have them coexist because of version incompatibilities in optional conversion features?. I do understand your point, and I see how you want to be backward and forward compatible, however I don’t think that my proposal would break different tools in the same environment. What I propose would simply prevent `qutip.Qobj(otherlibraryobject)` from working (with an explicative error message) if `otherlibrary` does not support the same qobj interface version. Everything else would work the same. You can still import and use the two libraries independently without issues. It’s indeed possible to design around this and supporting at the same time different versions of the interface, however, and there’s value in doing so. > To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. I don't know enough of the history behind numpy current api, but I see your point. however I'd ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:1475,install,install,1475,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,1,['install'],['install']
Deployability,"d. Right now,; > I am only plotting state_z_plus so I can focus on the T1 decay from 1 to; > -1. However, as the animation and graph indicate, it seems to stop short of; > -1 and I don't see why that should be happening. I appreciate any feedback.; >; > %matplotlib inline; > import matplotlib.pyplot as plt; > import numpy as np; > import qutip as q; > import cmath; > import matplotlib as mpl; > from mpl_toolkits.mplot3d import Axes3D; >; > rc_dict = {; > ""figure.subplot.bottom"": 0.11,; > ""figure.subplot.hspace"": 0.2,; > ""figure.subplot.left"": 0.125,; > ""figure.subplot.right"": 0.9,; > ""figure.subplot.top"": 0.88,; > ""figure.subplot.wspace"": 0.2,; > ""figure.figsize"":(10,10/1.61),; > ""axes.grid"": True,; > ""text.usetex"": True,; > ""grid.linestyle"": "":"",; > ""grid.color"": ""black"", #; > ""legend.fontsize"": 20,; > ""lines.linewidth"": 2.5,; > ""axes.linewidth"": 1.5,; > ""font.family"": [""serif""],; > ""font.sans-serif"": ""Times New Roman Bold"",; > ""font.size"":26,; > }; > plt.rcParams.update(rc_dict); >; > qutip_options = q.Odeoptions(; > store_states=True,; > nsteps=20000000; > ); > si, sx, sy, sz=q.qeye(2), q.sigmax(), q.sigmay(), q.sigmaz(); > sp, sm=q.sigmap(), q.sigmam(); > state_z_plus=q.basis(2,0); > state_z_minus=q.basis(2,1); > state_x_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + q.basis(2,1)); > state_x_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - q.basis(2,1)); > state_y_plus=1.0/cmath.sqrt(2)* (q.basis(2,0) + 1j* q.basis(2,1)); > state_y_minus=1.0/cmath.sqrt(2)* (q.basis(2,0) - 1j* q.basis(2,1)); >; > h = 6.62607015e-34; > b = 0.1786195317554453 #magnetic field; > b_AC = 3.572390635108906e-05 #oscillating magnetic field; > g = 2 #g-factor; > u = 9.274E-24 #bohr magneton; > w = g*u*b/h #omega; > w0 = 5e9 # omega0 is the rotating frame frequency; > print(w); > gamma_phi = 44200000; > gamma_minus = 100000000; >; > epsilon = g*u*b/h*(2; > *cmath.pi) Delta = g*u*b_AC/h*(2*cmath.pi); >; > H = ((w-w0)/(w))*epsilon/2 * sz #*+ Delta/2*sy; >; > print(abs(((w-w0)/(w)))*epsilon/2); >; > #note h",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1418#issuecomment-763377937:1644,update,update,1644,https://qutip.org,https://github.com/qutip/qutip/issues/1418#issuecomment-763377937,1,['update'],['update']
Deployability,"digits)>; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/cmath:648:17: error: no template named 'numeric_limits'; static_assert(numeric_limits<_FloatT>::radix == 2, ""FloatT has incorrect radix"");; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/cmath:651:25: error: no template named 'numeric_limits'; return _FloatBigger ? numeric_limits<_IntT>::max() : (numeric_limits<_IntT>::max() >> _Bits << _Bits);; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/cmath:651:58: error: no template named 'numeric_limits'; return _FloatBigger ? numeric_limits<_IntT>::max() : (numeric_limits<_IntT>::max() >> _Bits << _Bits);; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/cmath:661:16: error: no template named 'numeric_limits'; using _Lim = numeric_limits<_IntT>;; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/cmath:664:12: error: use of undeclared identifier '_Lim'; return _Lim::max();; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/cmath:665:21: error: use of undeclared identifier '_Lim'; } else if (__r <= _Lim::lowest()) {; ^; /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/cmath:666:12: error: use of undeclared identifier '_Lim'; return _Lim::min();; ^; 11 errors generated.; error: command '/usr/bin/clang' failed with exit code 1; [end of output]; ; note: This error originates from a subprocess, and is likely not a problem with pip.; ERROR: Failed building wheel for qutip; Failed to build qutip; ERROR: Could not build wheels for qutip, which is required to install pyproject.toml-based projects. ```; Thanks",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740#issuecomment-1640803583:3220,install,install,3220,https://qutip.org,https://github.com/qutip/qutip/issues/1740#issuecomment-1640803583,1,['install'],['install']
Deployability,"doing this means we have to guarantee that at _no point_ is the `ctrl_array` object copied. If you wanted to branch off execution part-way through the iterator, you'd have to copy the whole state, and then you'd lose your reference to the control array unless you kept manually walking the structure of the time-dependent object (internally it gets converted into a `QobjEvo` Liouvillian) to retrieve it. The other problem is that `state0` and the `Qobj` parts of the Hamiltonian aren't mutable; the preprocessing of `mesolve` means that none of those objects will exist inside the integrator loop. That's fine for this use-case, but it's not very general. These problems of mutability would apply to callback functions as well. A different way of using `yield` or callback function would be to really lean into a co-routine sort of pattern. So `mesolve` internally would look like; ```python; def mesolve(H, state, times, c_ops, e_ops, options):; # [... set up problem ...]; integrator = scipy.integrate.ode(...); for time in times[1:]:; state = integrator.step_to(time); instructions = yield _mesolve_output_state(state, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be like; ```python; solver = mesolve(H, rho0, times, c_ops); try:; result = next(solver); while True:; next_control = krotov.get_next_control(result.time, result.state); result = solver.send([; ('update-arguments', {'control': next_control}),; ('update-hamiltonian', ...),; ('add-c_op', ...),; # possible examples of API commands; ]); except StopIteration:; pass; ```; That's not super user friendly, but it _is_ nicely re-entrant. You'd have a single object you can copy and branch off, and QuTiP would be able to update the relevant objects for you at any given time. Still, I don't think it's a good strategy in general - we'd have to _very_ rigorously define the ""instructions"" API, and it would be pretty awkward to use. It would also be a nuisance for ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:1849,integrat,integrate,1849,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,1,['integrat'],['integrate']
Deployability,"e input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across the library. This is particularly important if we want this to work well with superoperators. Really, thank you very much for making the PR - I really am excited to see people with an interest in the new data layer! I'm sorry that I took quite so long to respond properly to it, and that when I have, I've ended up being somewhat against the implementaton as it is. I would be really interested in pursuing this, likely after the initial release of 5.0, but right now I think we might need to get our ducks in a row about licensing primarily, and then about how we're going to handle tensor networks in general. In order to prevent headaches down the line (and again, very very sorry), would it be ok if we leave this unmerged, and don't attempt to modify it in any way? I don't want to get into a situation where we decide we can't accept non-QuTiP-licenced code, and we want to use/build on your code or implement something similar, but our hands are tied because anything we do will involve our knowledge of IP we don't control.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:4376,release,release,4376,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['release'],['release']
Deployability,"e'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. That sounds perfect! I might wait for QuTiP 5 to come out, or if these things are already in `master`, I'll see if I can maybe revisit `DensityMatrixODEPropagator` and maybe also add something for the Hilbert space case (whatever `sesolve` is doing internally). As an aside, I was actually surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatever `mesolve` does internally for a particular case. > We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend le",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:9133,integrat,integrate,9133,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrate']
Deployability,"e-user-images.githubusercontent.com/12125783/337660051-e4fa3d0a-ca5a-40e7-ab5b-283c30f0de07.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjAwNTEtZTRmYTNkMGEtY2E1YS00MGU3LWFiNWItMjgzYzMwZjBkZTA3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTk5YmExMTE2NGZhZmFmZWZiYjQ2YTU0ZTlmOWNmZDg1MzI5NWQyM2UxNWIzNDUwYWYwOTdjNmZhYzU2ZDBlZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.c_jkyvIGwDUsmTXLIAr5LI0-u2IhfVNWo2orjBvElfk) with names as strings.; > ; > It would be nice to make them clickable object that links to the function signatures. Like the `tensor` in https://qutip.readthedocs.io/en/qutip-5.0.x/guide/guide-tensor.html#example-constructing-composite-hamiltonians; > ; > ![image](https://private-user-images.githubusercontent.com/12125783/337661271-ad856f69-e0f2-49a2-9ab0-f88e84444373.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTc3NzY1MzMsIm5iZiI6MTcxNzc3NjIzMywicGF0aCI6Ii8xMjEyNTc4My8zMzc2NjEyNzEtYWQ4NTZmNjktZTBmMi00OWEyLTlhYjAtZjg4ZTg0NDQ0MzczLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MDclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjA3VDE2MDM1M1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTAzYTljNGFhMDMxY2RkNmU1ZWRiZjk1YzNkODllNjdjOTlkNDIxMDBhNDgxOTI0MWEyNmFlZjM1MTZjY2I5NTkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.D6pMkAw1y3WWyirs_J8dFthmGjY4V6rIMr6JUHYZ19Y). Thank you for being so clear with the explanation, now I am able to build the html. I have done this update.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051:2208,update,update,2208,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2155132051,1,['update'],['update']
Deployability,"ead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5972,integrat,integrator,5972,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Deployability,"ease\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_pw_8rhs14880_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/nd",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:7343,Release,Release,7343,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ease\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_pw_8rhs14881_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaco",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:13096,Release,Release,13096,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ease\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_pw_8rhs14882_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaco",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:19014,Release,Release,19014,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ease\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_pw_8rhs14883_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; ok; correlation: comparing TLS emission correlations (fn-list td format) ... ok; correlation: comparing TLS emission correlations (fn td format) ... ok; Counting statistics: current and current n",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:24932,Release,Release,24932,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the docstring of krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). To get very technical, Krotov's requirements are laid out in the documentation of the [`Propagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L125) abstract base class, [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagat",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:2844,update,update,2844,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['update'],['update']
Deployability,"ee that at _no point_ is the `ctrl_array` object copied. If you wanted to branch off execution part-way through the iterator, you'd have to copy the whole state, and then you'd lose your reference to the control array unless you kept manually walking the structure of the time-dependent object (internally it gets converted into a `QobjEvo` Liouvillian) to retrieve it. The other problem is that `state0` and the `Qobj` parts of the Hamiltonian aren't mutable; the preprocessing of `mesolve` means that none of those objects will exist inside the integrator loop. That's fine for this use-case, but it's not very general. These problems of mutability would apply to callback functions as well. A different way of using `yield` or callback function would be to really lean into a co-routine sort of pattern. So `mesolve` internally would look like; ```python; def mesolve(H, state, times, c_ops, e_ops, options):; # [... set up problem ...]; integrator = scipy.integrate.ode(...); for time in times[1:]:; state = integrator.step_to(time); instructions = yield _mesolve_output_state(state, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be like; ```python; solver = mesolve(H, rho0, times, c_ops); try:; result = next(solver); while True:; next_control = krotov.get_next_control(result.time, result.state); result = solver.send([; ('update-arguments', {'control': next_control}),; ('update-hamiltonian', ...),; ('add-c_op', ...),; # possible examples of API commands; ]); except StopIteration:; pass; ```; That's not super user friendly, but it _is_ nicely re-entrant. You'd have a single object you can copy and branch off, and QuTiP would be able to update the relevant objects for you at any given time. Still, I don't think it's a good strategy in general - we'd have to _very_ rigorously define the ""instructions"" API, and it would be pretty awkward to use. It would also be a nuisance for extensibility, probably; the interm",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:1901,integrat,integrator,1901,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,1,['integrat'],['integrator']
Deployability,"elated to mkl and steady when running the full test. Denis. De : zhang [mailto:notifications@github.com]; Envoyé : samedi 28 septembre 2019 09:33; À : qutip/qutip <qutip@noreply.github.com>; Cc : VION Denis <denis.vion@cea.fr>; Comment <comment@noreply.github.com>; Objet : Re: [qutip/qutip] Error with conda MKL2019.0 on Windows (#975). This was reported on the help group; https://groups.google.com/forum/#!topic/qutip/L-MIFFwK0xU. (copying from there); the newest mkl(Math library for intel) version(2019) can not work on QuTiP 4.3.1. I rollback it to mkl(2018.0.3), the qutip.testing then work well. If using mkl(2019.0), there will MKL read problems, like:. File ""C:\Users\ym24chen\Anaconda3\. x = lu.solve(b, verbose=verbose). File ""C:\Users\ym24chen\Anaconda3\envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 164, in solve. np_x, np_error). OSError: exception: access violation reading 0x0000000000000008. envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 384, in mkl_spsolve. Env info:. QuTiP Version: 4.3.1. Numpy Version: 1.15.4. Scipy Version: 1.1.0. Cython Version: 0.29.6. Matplotlib Version: 3.0.3. Python Version: 3.7.2. Number of CPUs: 8. BLAS Info: INTEL MKL. OPENMP Installed: False. INTEL MKL Ext: True. Platform Info: Windows (AMD64). Installation path: C:\Users\canwa\AppData\Local\conda\conda\envs\qutipenv\lib\site-packages\qutip. ==============================================================================. How can I rollback it to mkl(2018.0.3)? I just use ""conda install mkl=2018"" but the test still return errors. —; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://github.com/qutip/qutip/issues/975?email_source=notifications&email_token=ADBRKX2X6OKO5WY3XBOXMFLQL4CEJA5CNFSM4HFQJOJ2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD72TBSI#issuecomment-536162505>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ADBRKXZB66WCUYJDJKW7ZTLQL4CEJANCNFSM4HFQJOJQ>.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/975#issuecomment-536288655:1403,Install,Installed,1403,https://qutip.org,https://github.com/qutip/qutip/issues/975#issuecomment-536288655,4,"['Install', 'install', 'rollback']","['Installation', 'Installed', 'install', 'rollback']"
Deployability,"elease\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyre",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:9027,Release,Release,9027,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"elease\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyre",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:14945,Release,Release,14945,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"elease\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyre",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:20863,Release,Release,20863,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"emp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:1",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:14430,Release,Release,14430,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"emp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:1",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:20348,Release,Release,20348,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Relea",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:3793,Release,Release,3793,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Relea",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:9630,Release,Release,9630,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Relea",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:15634,Release,Release,15634,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Relea",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:21638,Release,Release,21638,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"er.major == 3 and sys_pyver.minor >= 12:; + # cython3 not supported on python 3.12; + # see https://github.com/qutip/qutip/issues/2293; + print(f""qutip does not support Cython on Python 3.{sys_pyver.minor} (Issue#2293)""); else:; - # Setup pyximport; - import qutip.cy.pyxbuilder as _pyxbuilder; - _pyxbuilder.install(); - del _pyxbuilder, _Cython, _version2int; - qutip.settings.has_cython = True; + from qutip.utilities import _version2int; + _cy_require = ""0.29.20""; + _cy_unsupported = ""3.0.0""; + if _version2int(_Cython.__version__) < _version2int(_cy_require):; + warnings.warn(; + ""Old version of Cython detected: needed {}, got {}.""; + .format(_cy_require, _Cython.__version__); + ); + if _version2int(_Cython.__version__) >= _version2int(_cy_unsupported):; + warnings.warn(; + ""The new version of Cython, (>= 3.0.0) is not supported.""; + .format(_Cython.__version__); + ); + else:; + # Setup pyximport; + import qutip.cy.pyxbuilder as _pyxbuilder; + _pyxbuilder.install(); + del _pyxbuilder, _Cython, _version2int; + qutip.settings.has_cython = True; ; ; # -----------------------------------------------------------------------------; Index: qutip/qutip/tests/test_brmesolve_td.py; ===================================================================; --- qutip.orig/qutip/tests/test_brmesolve_td.py	2024-01-16 03:52:59.780085342 +0100; +++ qutip/qutip/tests/test_brmesolve_td.py	2024-01-16 03:52:59.780085342 +0100; @@ -148,7 +148,8 @@; brme = qutip.brmesolve(H, psi0, times, a_ops, e_ops=[a.dag()*a]); assert np.mean(np.abs(brme.expect[0] - exact) / exact) < 1e-5; ; -; +@pytest.mark.skipif(not qutip.settings.has_cython,; + reason=""cython support is not available""); def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); @@ -232,6 +233,8 @@; [(a, a.dag()), (spectrum, '1', '1')]]); ; ; +@pytest.mark.skipif(not qutip.settings.has_cython,; + reason=""cython support is not available""); @pytest.mark.parametrize(""collapse_operators"", [; _2_tuple_split,; pytest.param(_4_tup",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293#issuecomment-1893522543:1991,install,install,1991,https://qutip.org,https://github.com/qutip/qutip/issues/2293#issuecomment-1893522543,1,['install'],['install']
Deployability,"ex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs1",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:6350,Release,Release,6350,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_pw_8rhs14880_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:6921,Release,Release,6921,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs1",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:12103,Release,Release,12103,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_pw_8rhs14881_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:12674,Release,Release,12674,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs1",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:18021,Release,Release,18021,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_pw_8rhs14882_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:18592,Release,Release,18592,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs1",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:23939,Release,Release,23939,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_pw_8rhs14883_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_tp' may ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:24510,Release,Release,24510,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ex\rhs14880.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:6228,Release,Release,6228,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ex\rhs14881.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:12065,Release,Release,12065,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ex\rhs14882.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:18069,Release,Release,18069,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ex\rhs14883.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:24073,Release,Release,24073,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"for oscillator in coherent initial state ... ok; > correlation: comparing me and es for oscillator in coherent initial state ... ok; > correlation: comparing me and mc for driven oscillator in ground state ... ERROR; > correlation: legacy me and es for oscillator in steady-state ... ok; > correlation: comparing me and es for oscillator in steady-state ... ok; > correlation: legacy spectrum from es and pi methods ... ok; > correlation: comparing spectrum from es and fft methods ... ok; > correlation: comparing spectrum from es and pi methods ... ok; > correlation: comparing TLS emission correlations (str-list td format) ... In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:3127,Release,Release,3127,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"fsa.py is the file analogous to [grape.py](https://github.com/qutip/qutip/blob/master/qutip/control/grape.py). ; tca.py is the example file (almost entirely based on this [notebook](https://github.com/qutip/qutip-notebooks/blob/master/examples/control-grape-cnot.ipynb) ) where I run it for a closed quantum system (as in the aforementioned [notebook](https://github.com/qutip/qutip-notebooks/blob/master/examples/control-grape-cnot.ipynb)).; otca.py, otca1.py and other otca*.py are files where I run them for various collapse operators.; tej_plotter.py is just a small python script file to save graphical representation of the final unitaries. > The explanation of the main idea is [here](https://www.dropbox.com/s/ris74oedclzm7vx/Qutip_open_grape.pdf?dl=0). An updated version will be found [here](https://www.overleaf.com/read/bdtqzhgtdkdq). file | output folder | collapse operator; ----|----------------|--------------------; tca.py | copA0 | none; otca.py| ocopA0 | $x\otimes y$; otca1.py| o1copA0 | $x\otimes y$, $y\otimes z$; otca2.py| o2copA0 | $y\otimes z$; otca3.py| o3copA0 | $z \otimes x $; otca4.py| o4copA0 | $x \otimes y $, $ z \otimes x$; otca5.py| o5copA0 | $z \otimes x $, $ y \otimes z$; otca6.py| o6copA0 | $ x \otimes y $, $ y \otimes z$, $ z \otimes x$",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1031#issuecomment-506789010:765,update,updated,765,https://qutip.org,https://github.com/qutip/qutip/issues/1031#issuecomment-506789010,1,['update'],['updated']
Deployability,"function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_pw_8rhs14880_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:8964,Release,Release,8964,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"h higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qutip itself. All I stated was that `I played around with auto-converting input hamiltonians and jump operators in qutip.sesolve and mesolve to Qobj if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.`. ; - So implicitly I do have stated that I'd like to see implicit conversion being performed on high-level methods. I do see benefits for the whole ecosystem if we can start integrating more: qutip already has very advanced and feature-complete solvers, there are large benefits for other packages to exploit them without having to wrap them or ask users to write more complicated code. It means that all benefits and bug-fixes to qutip are instantly available to users of other packages too that rely on it. And I think that calling a conversion method at the beginning, which most of the time will do nothing will just be a tiny drop in the bucket of the overhead of those `large` functions. However, I don't want to argue that right now. All my proposal was about was having a way to play well with your `Qobj` constructor.; It seems to me you were eventually favourable to this, so I propose we focus the discussion only on this point, and leave aside implicit or explicit conversion discussions. . I'll gladly open another issue to discuss implicit conversion, if you want, or we could organise a small round table among a bunch of developers to talk about this on skype, but for now, all i'm asking, is to agree on the design of an interface to ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:2472,integrat,integrating,2472,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['integrat'],['integrating']
Deployability,"han,. I can't modify the Wiki page because I'm not a maintainer of QuTiP. And it seems that there is no way to make a PR to Wiki. I can also send you the markdown source code per email like this, but I’m not sure if it works as I expected. The following is the markdown source code:. -----------------------------------; ## 1. Error mitigation in QuTiP; From the QuTiP 4.5 release, the qutip.qip module now contains the noisy quantum circuit simulator (which was a GSoC project) providing enhanced features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:1024,integrat,integration,1024,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['integrat'],['integration']
Deployability,"handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across the library. This is particularly important if we want this to work well with superoperators. Really, thank you very much for making the PR - I really am excited to see people with an interest in the new data layer! I'm sorry that I took quite so long to respond properly to it, and that when I have, I've ended up being somewhat against the implementaton as it is. I would be really interested in pursuing this, likely after the initial release of 5.0, but right now I think we might need to get our ducks in a row ab",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:3486,install,installed,3486,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['install'],['installed']
Deployability,"hs this.; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/qutip/qutip/pull/629; > Commit Summary; >; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - Merge remote-tracking branch 'qutip/master'; > - ENH: Faster isherm; >; > File Changes; >; > - *M* qutip/cy/spmath.pyx; > <https://github.com/qutip/qutip/pull/629/files#diff-0> (82); > - *M* qutip/fastsparse.py; > <https://github.com/qutip/qutip/pull/629/files#diff-1> (6); > - *M* qutip/qobj.py; > <https://github.com/qutip/qutip/pull/629/files#diff-2> (9); >; > Patch Links:; >; > - https://github.com/qutip/qutip/pull/629.patch; > - https://github.com/qutip/qutip/pull/629.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/629>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7WOqS7fLrlY9jKnVq_jLYXbcm_rIks5rQyVrgaJpZM4LfEtz>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/629#issuecomment-271928375:2181,Patch,Patch,2181,https://qutip.org,https://github.com/qutip/qutip/pull/629#issuecomment-271928375,2,"['Patch', 'patch']","['Patch', 'patch']"
Deployability,"hs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:9485,Release,Release,9485,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"hs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:15489,Release,Release,15489,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"hs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:21493,Release,Release,21493,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,https://github.com/Nov05/JSAnimation?tab=readme-ov-file#-changed-by-nov05 . ```; !git clone https://github.com/Nov05/JSAnimation.git; !pip install git+file:///content/JSAnimation ## <- change file path accordingly; !rm -r ./JSAnimation; ```,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/798#issuecomment-1956372439:139,install,install,139,https://qutip.org,https://github.com/qutip/qutip/issues/798#issuecomment-1956372439,1,['install'],['install']
Deployability,https://github.com/berkelbach-group/pyrho/blob/master/integrate/integrate.py,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/887#issuecomment-493303310:54,integrat,integrate,54,https://qutip.org,https://github.com/qutip/qutip/issues/887#issuecomment-493303310,2,['integrat'],['integrate']
Deployability,"ing clearer in the code - some of the earlier parametrizations I did were too aggressive because I wasn't used to the tools yet. The `test_control_pulseoptim` parts are very complex, in part because the underlying calling convention of that code is complex too. I'll try and add more comments to it to ease that along, especially in the part where I just defined a load of systems to test. That certainly should have been commented. There are general comments about what I was using the `pytest` tooling for in the commit messages, but I didn't necessarily want to leave ""intro to pytest"" comments throughout, because it would mostly crowd out the actual tests, and the `pytest` documentation online is probably going to be a better explanation than what I can do. I'm also learning `pytest` by doing this (I'd not used it before I opened the first PR)!. About the PRs: I'm happy with whatever workflow works best for you guys - I don't have any control over when the PR gets merged. It might be a little difficult for me to maintain two branches at once (i.e. if the first PR with ~10 tests is awaiting merging), because there's likely to be conflicts in `conftest.py` (in particular). Even if I branched the new PR off the previous one on the expectation that it would be merged, I'd have to keep adding merge commits into (or force-rebasing) the other branch to keep it up-to-date, which wouldn't be completely ideal in that it would make a bit of a mess in the git log. If you want to merge this one (after I've gone through and put some more comments in), I'm happy to start a new one. I can also start a new one on a new branch, I think it might just make a bit more of a mess than it solves. I think this one only got big because I had a good amount of free time at the same time as a `qutip` release happened, and most of the maintainers took a break for a few weeks. Right now I'm a bit busier with work so my conversion rate has slowed a little. I'll probably be back on it in a week or so.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241:2053,release,release,2053,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241,1,['release'],['release']
Deployability,"ing: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:6509,Release,Release,6509,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ing: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:12346,Release,Release,12346,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ing: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:18350,Release,Release,18350,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ing: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:24354,Release,Release,24354,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"inistic where the current deterministic contributions are calculated. These functions can now be called from a stochastic rhs implementation, like this. ```; dpsi_t = _rhs_psi_deterministic(H, psi_t, t, dt, args); ```. In this way the implementation of a stochastic rhs function is relatively isolated from how the deterministic part is calculated (which right now is trivial, but which could become more complex when time-dependent systems are implemented). However, it also gives all the flexibility needed in the rhs function, and these deterministic rhs functions do not need to be used if it is not suitable in a particular stochastic rhs implementation. . I've added the changes to the rhs behavior to the https://github.com/qutip/qutip/tree/sme-rhs-restructuring and updated the gist with the variant of your notebook. http://nbviewer.ipython.org/6153688. Note that a few other things, like the rhs function signature, had to change in the process. I hope that this updated API will be flexible enough to let you implement implicit solver. Regards rhs implementation and d1,d2 function: Yes, I understand that not all possible rhs schemes might be compatible with the parameterization with d1 and d2 functions, but when it is possible it has the great advantage that the user do not need to worry about how the rhs is implemented, only define the SDE in terms of d1 and d2, and then possibly select a rhs solver using the solver argument to smesolve. This will not work in general for solvers like the milstein scheme, since it requires an analytical derivative (unless it can be evaluated numerically?), and in those cases it would be sufficient to implement problem specific rhs functions (like rhs_rho_milstein_homodyne etc). Regarding the use of expm: OK, I agree that it could be a nice method to have to be used on smallish system. However, since we are stepping with a small timestep dt, shouldn't it be sufficient to use an expansion of of expm as usual? Perhaps a second-order expansio",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22156426:1617,update,updated,1617,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22156426,1,['update'],['updated']
Deployability,"initialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:9374,Release,Release,9374,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"initialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:15378,Release,Release,15378,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"initialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:21382,Release,Release,21382,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"interactive() -> None:; 264 if matplotlib.is_interactive():; --> 265 draw_all(). File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/_pylab_helpers.py:131, in Gcf.draw_all(cls, force); 129 for manager in cls.get_all_fig_managers():; 130 if force or manager.canvas.figure.stale:; --> 131 manager.canvas.draw_idle(). File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/backend_bases.py:1919, in FigureCanvasBase.draw_idle(self, *args, **kwargs); 1917 if not self._is_idle_drawing:; 1918 with self._idle_draw_cntx():; -> 1919 self.draw(*args, **kwargs). File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/backends/backend_agg.py:387, in FigureCanvasAgg.draw(self); 384 # Acquire a lock on the shared font cache.; 385 with (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar; 386 else nullcontext()):; --> 387 self.figure.draw(self.renderer); 388 # A GUI class may be need to update a window using this draw, so; 389 # don't forget to call the superclass.; 390 super().draw(). File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/artist.py:95, in _finalize_rasterization.<locals>.draw_wrapper(artist, renderer, *args, **kwargs); 93 @wraps(draw); 94 def draw_wrapper(artist, renderer, *args, **kwargs):; ---> 95 result = draw(artist, renderer, *args, **kwargs); 96 if renderer._rasterizing:; 97 renderer.stop_rasterizing(). File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/artist.py:72, in allow_rasterization.<locals>.draw_wrapper(artist, renderer); 69 if artist.get_agg_filter() is not None:; 70 renderer.start_filter(); ---> 72 return draw(artist, renderer); 73 finally:; 74 if artist.get_agg_filter() is not None:. File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/figure.py:3155, in Figure.draw(self, renderer); 3152 # ValueError can occur when resizing a window.; 3154 self.patch.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2400#issuecomment-2142000903:1507,update,update,1507,https://qutip.org,https://github.com/qutip/qutip/issues/2400#issuecomment-2142000903,1,['update'],['update']
Deployability,"ion: legacy me and es for oscillator in coherent initial state ... ok; correlation: comparing me and es for oscillator in coherent initial state ... ok; correlation: comparing me and mc for driven oscillator in ground state ... ERROR; correlation: legacy me and es for oscillator in steady-state ... ok; correlation: comparing me and es for oscillator in steady-state ... ok; correlation: legacy spectrum from es and pi methods ... ok; correlation: comparing spectrum from es and fft methods ... ok; correlation: comparing spectrum from es and pi methods ... ok; correlation: comparing TLS emission correlations (str-list td format) ... In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:1",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:2759,Release,Release,2759,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"is thread,. https://solus-project.com/forums/viewtopic.php?t=2938. which tells one to try:. sudo eopkg install -c system.devel. -P. jakeargent wrote:; >; > I'm using solus <https://solus-project.com> 64-bit, and anaconda for; > my python.; >; > anaconda cannot find any qutip package, so I tried to install with; > pip. It gives the following error:; >; > |Command ""/home/jakeargent/anaconda3/bin/python -u -c ""import; > setuptools,; > tokenize;__file__='/tmp/pip-build-n7ekqm4y/qutip/setup.py';f=getattr(tokenize, ; >; > 'open', open)(__file__);code=f.read().replace('\r\n',; > '\n');f.close();exec(compile(code, __file__, 'exec'))"" install; > --record /tmp/pip-lnsaamvm-record/install-record.txt; > --single-version-externally-managed --compile"" failed with error code; > 1 in /tmp/pip-build-n7ekqm4y/qutip/|; >; > Then I tried easy_install, which gave me:; >; > |Processing qutip Writing /home/jakeargent/qutip/setup.cfg Running; > setup.py -q bdist_egg --dist-dir; > /home/jakeargent/qutip/egg-dist-tmp-9_egnp34 Installing without the; > fortran mcsolver. In file included from; > /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/syslimits.h:7:0,; > from; > /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/limits.h:34,; > from /home/jakeargent/anaconda3/include/python3.5m/Python.h:11, from; > qutip/cy/spmatfuncs.c:27:; > /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/limits.h:168:61:; > fatal error: limits.h: No such file or directory #include_next; > <limits.h> /* recurse down to the real one */ ^ compilation; > terminated. In file included from; > /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/syslimits.h:7:0,; > from; > /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/limits.h:34,; > from /home/jakeargent/anaconda3/include/python3.5m/Python.h:11, from; > qutip/cy/spmatfuncs.c:27:; > /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/limits.h:168:61:; > fatal error: limits.h: No such file or directory #include_next; > <limits.h> /* recurse down to",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639#issuecomment-275734243:1026,Install,Installing,1026,https://qutip.org,https://github.com/qutip/qutip/issues/639#issuecomment-275734243,1,['Install'],['Installing']
Deployability,"ite out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip.; >; > I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. I'm concerned from a user's perspective. QuTiP has a wide user base, and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvable problem: having versioning in the interface API is one solution to some of these problems. ---. For greater discussion, here's an alternate approach: instead of objects defining `__qutip_qobj__`, instead we expose an entry-point `qutip.Qobj.register_conversion_function(converter, type, priority, version=None)`, and downstream libraries register functions rather than defining methods on their classes. The logic inside the `Qobj` constructor remains approximately the same as what you suggest. I think TensorFlow does something ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:4363,install,install,4363,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['install'],['install']
Deployability,"ithms and so on. I wouldn't want to add that immediately, though - no need to complicate things. #### Point 2. Basis safety wouldn't have any performance cost here - `Space(2, basis='x')` and `Space(2, basis='y')` would referentially be unequal, so the test would be free. It's basically the same thing as checking superoperator representations. I would worry about user ergonomics for creating these though. I'd propose that all QuTiP functions maintain their current behaviour of creating everything in the number basis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. You'd still type `dims=[[2], [1]]` to get a qubit ket and `dims=[[1], [2]]` for a qubit bra, so I don't think there's any confusion there. The reason there's not a special ""bra"" structure internally is because it's not necessary; a bra really is just a linear mapping from a particular vector space to the field, so having a special case for that makes more complex - the matmul compatibility test with `Map(Space, Field)` and `Map(Space, Space)` is the exact same test as for two operators, which simplifies the logic. ---. After sleeping on it, I still generally like the singleton pattern for this, but I think _completely_ relying on referential equality is probably a bit short-sighted. We can define, for example, `Space.__eq__` as; ```python; class Space:; def __eq__(self, other):; return (; self is oth",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:2329,release,release,2329,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['release'],['release']
Deployability,"itten it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/k",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6221,integrat,integrator,6221,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Deployability,"just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use othe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:11819,Integrat,Integrator,11819,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,4,"['Integrat', 'integrat']","['Integrator', 'integration', 'integrator']"
Deployability,"ld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/n",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:6623,Release,Release,6623,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/n",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:12460,Release,Release,12460,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/n",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:18464,Release,Release,18464,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"ld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/n",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:24468,Release,Release,24468,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"le for all known types automatically; when it's asked to do say `kron` on two types it doesn't have a specialisation for, it'll cast the inputs through a path of least weight into a specialisation it _does_ know, and then use that. The desired casting rules and preferred output types can be altered dynamically at run-time as well. While I put a lot of effort into making this as fast as possible (and naturally a constant-time operation with respect to the number of known types and specialisations), of course the penalty we pay is a small run-time cost of type look-ups and dispatch (<1µs, but that's dwarfed by the cost of the operations themselves). We will have a hook for creating ""data-layer types"" out of arbitrary inputs, but we weren't heavily focussing on this at all; it seems rather too special a case to have _another_ magic interface for, and we can basically just reuse `__array__` for it - ""data-layer types"" are essentially just ""matrix-like"" objects. It also isn't appropriate for the situation you're describing here, because your own objects have additional ""quantum-specific"" attributes associated with them, similar to the extra stuff that `Qobj` contains. If you want to see more of this, it's in the `dev.major` branch. ---. Defining an interoperable new public interface I think is quite a big task, since it's inherently got to be future-proof. I'm definitely +1 on us having one, and having some discussion about it before a 5.0 release. I'm most concerned with how we can do it in a manner that's useful without stymieing our own ability to iterate and improve. It's harder for downstream packages to support multiple versions of a magic interface than it is for them to changing call QuTiP library functions; with deprecation warnings we can have multiple valid methods for doing the same thing alive in the library at once, but we can't detect what version of an interface a downstream package requires (not keen on the idea of a `__qutip_qobj_api_version__` flag!!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:7554,release,release,7554,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['release'],['release']
Deployability,"le_); 1561 self.coeff_files.append(file_). ~/opt/anaconda3/lib/python3.7/site-packages/qutip/qobjevo_codegen.py in _compiled_coeffs(ops, args, dyn_args, tlist); 128 code = _make_code_4_cimport(ops, args, dyn_args, tlist); 129 coeff_obj, filename = _import_str(code, ""cqobjevo_compiled_coeff_"",; --> 130 ""CompiledStrCoeff"", True); 131 return coeff_obj(ops, args, tlist, dyn_args), code, filename; 132 . ~/opt/anaconda3/lib/python3.7/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 86 if not import_list:; 87 raise Exception(""Could not convert string to importable function, ""; ---> 88 ""tmpfile:"" + try_file + ext) from err; 89 coeff_obj = import_list[0]; 90 return coeff_obj, try_file + ext. Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_1212362029172.pyx; ```. ```ruby; about(); ```; output: ; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, and Boxi Li; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.2; Numpy Version: 1.18.1; Scipy Version: 1.4.1; Cython Version: 0.29.15; Matplotlib Version: 3.1.3; Python Version: 3.7.6; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/tripathi/opt/anaconda3/lib/python3.7/site-packages/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290:11477,Install,Installed,11477,https://qutip.org,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290,2,['Install'],"['Installation', 'Installed']"
Deployability,"lease\pyrex\rhs14880.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:4119,Release,Release,4119,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"lease\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In fu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:4409,Release,Release,4409,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"lease\pyrex\rhs14881.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:9956,Release,Release,9956,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"lease\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In fu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:10162,Release,Release,10162,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"lease\pyrex\rhs14882.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:15960,Release,Release,15960,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"lease\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In fu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:16080,Release,Release,16080,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"lease\pyrex\rhs14883.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:21964,Release,Release,21964,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"lease\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In fu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:21998,Release,Release,21998,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"lex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:5904,Release,Release,5904,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"lex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:11741,Release,Release,11741,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"lex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:17745,Release,Release,17745,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"lex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:23749,Release,Release,23749,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"line 412, in get_fid_err; return np.abs(1 - self.get_fidelity()); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 422, in get_fidelity; self.fid_norm_func(self.get_fidelity_prenorm()); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/fidcomp.py"", line 438, in get_fidelity_prenorm; dyn.compute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/dynamics.py"", line 1394, in compute_evolution; self.tslot_computer.recompute_evolution(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/tslotcomp.py"", line 265, in recompute_evolution; prop_comp._compute_prop_grad(k, j); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/propcomp.py"", line 239, in _compute_prop_grad; dyn._ensure_decomp_curr(k); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/dynamics.py"", line 1410, in _ensure_decomp_curr; self._spectral_decomp(k); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/control/dynamics.py"", line 1627, in _spectral_decomp; dims=self.dyn_dims); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/qutip/qobj.py"", line 273, in __init__; _tmp = sp.csr_matrix(inpt, dtype=complex, copy=do_copy); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/scipy/sparse/compressed.py"", line 88, in __init__; self._set_self(self.__class__(coo_matrix(arg1, dtype=dtype))); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/scipy/sparse/coo.py"", line 191, in __init__; self.row, self.col = M.nonzero(); File ""/Users/msoley/opt/anaconda3/lib/python3.7/site-packages/scipy/sparse/base.py"", line 287, in __bool__; raise ValueError(""The truth value of an array with more than one ""; ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all().; ```. Is there something I am missing in my installation? Thanks again for all of your help.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1617#issuecomment-886098212:3237,install,installation,3237,https://qutip.org,https://github.com/qutip/qutip/issues/1617#issuecomment-886098212,1,['install'],['installation']
Deployability,"list and state ... ok; > > > expect: operator list and state list ... ok; > > > expect: operator and state list ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > gates: expand 1 to N ... ok; > > > gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; > > > gates: expand 2 to N (using swap) ... ok; > > > gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; > > > gates: swap gate ... ok; > > > Graph: Breadth-First Search ... ok; > > > Graph: Graph Degree ... SKIP: Networkx not installed.; > > > Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (Bucky) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (boost) ... ok; > > > Monte-carlo: Constant H with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H with constant collapse ... ok; > > > Monte-carlo: Constant H with single collapse operator ... ok; > > > Monte-carlo: Constant H with single expect operator ... ok; > > > Monte-carlo: Collapse terms constant (func format) ... ok; > > > Monte-carlo: Collapse terms constant (str format) ... ok; > > > Monte-carl",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:3397,install,installed,3397,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['install'],['installed']
Deployability,"little fragile; doing this means we have to guarantee that at _no point_ is the `ctrl_array` object copied. If you wanted to branch off execution part-way through the iterator, you'd have to copy the whole state, and then you'd lose your reference to the control array unless you kept manually walking the structure of the time-dependent object (internally it gets converted into a `QobjEvo` Liouvillian) to retrieve it. The other problem is that `state0` and the `Qobj` parts of the Hamiltonian aren't mutable; the preprocessing of `mesolve` means that none of those objects will exist inside the integrator loop. That's fine for this use-case, but it's not very general. These problems of mutability would apply to callback functions as well. A different way of using `yield` or callback function would be to really lean into a co-routine sort of pattern. So `mesolve` internally would look like; ```python; def mesolve(H, state, times, c_ops, e_ops, options):; # [... set up problem ...]; integrator = scipy.integrate.ode(...); for time in times[1:]:; state = integrator.step_to(time); instructions = yield _mesolve_output_state(state, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be like; ```python; solver = mesolve(H, rho0, times, c_ops); try:; result = next(solver); while True:; next_control = krotov.get_next_control(result.time, result.state); result = solver.send([; ('update-arguments', {'control': next_control}),; ('update-hamiltonian', ...),; ('add-c_op', ...),; # possible examples of API commands; ]); except StopIteration:; pass; ```; That's not super user friendly, but it _is_ nicely re-entrant. You'd have a single object you can copy and branch off, and QuTiP would be able to update the relevant objects for you at any given time. Still, I don't think it's a good strategy in general - we'd have to _very_ rigorously define the ""instructions"" API, and it would be pretty awkward to use. It would also be",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:1830,integrat,integrator,1830,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,1,['integrat'],['integrator']
Deployability,looks good. but i think these scripts should install the latest release rather than master.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/279#issuecomment-65957219:45,install,install,45,https://qutip.org,https://github.com/qutip/qutip/pull/279#issuecomment-65957219,2,"['install', 'release']","['install', 'release']"
Deployability,"lose your reference to the control array unless you kept manually walking the structure of the time-dependent object (internally it gets converted into a `QobjEvo` Liouvillian) to retrieve it. The other problem is that `state0` and the `Qobj` parts of the Hamiltonian aren't mutable; the preprocessing of `mesolve` means that none of those objects will exist inside the integrator loop. That's fine for this use-case, but it's not very general. These problems of mutability would apply to callback functions as well. A different way of using `yield` or callback function would be to really lean into a co-routine sort of pattern. So `mesolve` internally would look like; ```python; def mesolve(H, state, times, c_ops, e_ops, options):; # [... set up problem ...]; integrator = scipy.integrate.ode(...); for time in times[1:]:; state = integrator.step_to(time); instructions = yield _mesolve_output_state(state, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be like; ```python; solver = mesolve(H, rho0, times, c_ops); try:; result = next(solver); while True:; next_control = krotov.get_next_control(result.time, result.state); result = solver.send([; ('update-arguments', {'control': next_control}),; ('update-hamiltonian', ...),; ('add-c_op', ...),; # possible examples of API commands; ]); except StopIteration:; pass; ```; That's not super user friendly, but it _is_ nicely re-entrant. You'd have a single object you can copy and branch off, and QuTiP would be able to update the relevant objects for you at any given time. Still, I don't think it's a good strategy in general - we'd have to _very_ rigorously define the ""instructions"" API, and it would be pretty awkward to use. It would also be a nuisance for extensibility, probably; the intermediate state and instructions of `mesolve` would just more APIs we have to maintain and keep constant. Note that you can achieve the exact same thing with a callback function pat",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:1991,integrat,integrator,1991,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,2,['integrat'],['integrator']
Deployability,"lready. We'd have to modify our procedures a little bit (we're mostly concerned with constructing the underlying matrices at the moment), but it's a smaller change in behaviour. Disadvantages that I can think of:; - It's got linear scaling with the number of conversions registered, so it's in theory possible to register ""too many"" and cause a slow down. In reality, this will be a very small effect (`Qobj` construction time will be dominated by copying data into new formats), and I think the benefits of a priority queue of allowed converters outweighs it in convenience for users.; - It involves some global state of the `qutip` library, which _may_ cause problems for multiprocessing if somebody tries to register a `lambda` converter (can't pass through `pickle`, though I'm not 100% on whether module-level stuff needs to), and of course there's the query of what happens when converters are registered in separate processes. We already have this ""problem"" in 5.0 though, because that's how the entire underlying dispatch mechanism is handled; we can just require that converters must be pickle-able.; - If a downstream package wants to lazily `import qutip` (we're a pretty heavy import right now), it's harder in this method; you'd basically have to ask a user to call `otherlibrary.register_qutip()`. For one, I'm going to put some effort into making `import qutip` take much less time for 5.0 (the main problem right now is we essentially eagerly import all of scipy and IPython if it's around), so that'll make it a bit easier. For two, a single initialisation statement isn't _necessarily_ a terrible thing; users can decide for themselves if they want to install the implicit integrations, but this is definitely an inconvenience relative to the magic method. ---. Apologies that I'm not responding super quickly to everything - I'm not the only main QuTiP dev (and I can only work on QuTiP occasionally anyway), so I'm giving others time to read and think about the proposals as well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:8455,install,install,8455,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,2,"['install', 'integrat']","['install', 'integrations']"
Deployability,"ly note) this information in the QuTiP Docs? I; feel like the fix may take long and having something written up under some; official section on the website may help for future reference. On Wed, 13 May 2020 at 23:38, Eric Giguère <notifications@github.com> wrote:. > I did some tests and; > 1 - Cause by fortran zheer (lapack eigenvalue solver for complex hermitian; > matrices) (c's version Ok); > 2 - It happen when installing the scipy stack with pip but not when; > installing it with conda.; > 3 - It depend on the problem size, 64 seems particularly bad, usually it; > fails on the second call.; > 4 - I only got it in zheevr which is only used in brmesolve. But Nathan; > got it in other tests which use scipy's eigh.; > 4 - It happen in scipy in the fortan version of lapack:; >; > import numpy as np; > from scipy.linalg import eigh; > H = random_hermitian(64); > eigh(H) # Work fine; > eigh(np.asfortranarray(H)) # segfault after a few try, may need to change H; >; > Possible solutions (for zheevr):; >; > - Installing scipy with conda, the easiest solution, but not in our; > control.; > - Finding a way to link clapack from cython. Linking scipy's one would; > require good knowledge of scipy internals since only one cython interface; > is provided. Linking to another installation of lapack, but it would; > require the user to install lapack or install it with qutip. Both seems; > wrong to me.; > - For mac user, call scipy's eigh from cython i zheevr, slower but; > better than risking segfault.; > - Have the code directly in qutip. We can adapt it from OpenBlas:; > https://github.com/xianyi/OpenBLAS/blob/master/lapack-netlib/LAPACKE/src/lapacke_zheevr.c; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1197#issuecomment-628259492>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADPF67AJF3WTZBCU4YWFY23RRMHMHANCNFSM4LCKXE6A>; > .; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628441264:1122,Install,Installing,1122,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628441264,1,['Install'],['Installing']
Deployability,"ly useful and will simplify the code inside the propagator a bit. I removed `.evolve_dm`. > **For `.sys_dims`**:; > ; > The meaning of what `.sys_dims` returns is already unclear in this PR. The docstring says its the dimension of the system. Practically I assume that to mean ""the dimension of the initial state or dm passed to .run()"". However, in the PR its used as the size of the propagator. These are the same if there is no environment, but will be different otherwise.; > ; > I suggest we keep `.sys_dims` but document that it is the dimensions of the system excluding any environment. Changed in HEOMSolver. Since environment only means something for HEOM, so it took some time to understand what it referred to. Adding the change elsewhere would be confusing. ; > **Specifying which solvers support propagators**:; > ; > Currently we have a list of explicit checks at the top of the propagator constructor, but we could instead have a ""propagator_class"" attribute on solvers the same way we have a ""result_class"" and then that could be set to some suitable default for ordinary solvers and None or ""PropagatorNotSupported"" for solvers that don't support them. There is only one class for propagator and I don't see us needing any other, so there is no use for a `propagator_class` . We could have a `support_propagator` flag, but I prefer it this way as we can set a special error message for `HEOMSolver`. ; `HEOMSolver` is the only exceptions where we could support it but choose not to take the time to implement it. ; All deterministic solver we have can be used for propagator, trajectories solver don't have a properly defined propagator for single trajectory and I don't see any use to create a propagator for the averaged states. It would take a lot of trajectories to obtain what is effectively mesolve's propagator. . We could add the flag to the integrator instead, some krylov integrator cannot evolve 2D states, but it's the only one we have plan for and it's not merged yet...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120:2274,integrat,integrator,2274,https://qutip.org,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120,2,['integrat'],['integrator']
Deployability,"mand:; > python setup.py install; >; > I get the following error message:; >; > gcc -pthread -B /home/pz/anaconda3/compiler_compat -Wl,--sysroot=/; > -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -Iqutip/cy; > -I/home/pz/anaconda3/lib/python3.7/site-packages/numpy/core/include; > -I/home/pz/anaconda3/lib/python3.7/site-packages/numpy/core/include; > -I/home/pz/anaconda3/include/python3.7m -c qutip/cy/spmatfuncs.cpp -o; > build/temp.linux-x86_64-3.7/qutip/cy/spmatfuncs.o -w -O3 -march=native; > -funroll-loops; > gcc: error trying to exec 'cc1plus': execvp: No such file or directory; > error: command 'gcc' failed with exit status 1; >; > It seems the gcc compiler isn't correctly located? Or what else problem.; >; > I checked the gcc version on the workstation:; > gcc --version; > gcc (Ubuntu 8.3.0-6ubuntu1~18.10) 8.3.0; > Copyright (C) 2018 Free Software Foundation, Inc.; > This is free software; see the source for copying conditions. There is NO; > warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; >; > whereis gcc; > gcc: /usr/bin/gcc /usr/lib/gcc /usr/share/man/man1/gcc.1.gz; >; > How can I direct the installer to find the gcc compiler?; >; > Thanks!; > Best regards, Pu Zhang; > --; > Faculty at School of Physics, Huazhong University of Science and Technology; > Room 819 (N.), Yifu Science and Technology Building; > 1037 Luoyu Road, Wuhan, China; > E-mail: puzhang0702@hust.edu.cn <puzha@fotonik.dtu.dk>; > Homepage: www.researchgate.net/profile/Pu_Zhang4; > Phone: +86 18871860394; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/946?email_source=notifications&email_token=ACGFP3L4OWY2RVW425QSG6DP2IAZPA5CNFSM4GUAHDH2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODXS6K7I#issuecomment-501605757>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ACGFP3PIENU3RR46AB6YVKDP2IAZPANCNFSM4GUAHDHQ>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-501609220:1949,install,installer,1949,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-501609220,1,['install'],['installer']
Deployability,"match is quite good. Even with enough trajectories, the numerical error from `smesolve` will be visible.; > ; > The equation solved are those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5. Thank you very much for your reply, but I still don't quite understand `smesolve`'s `expect` are just the expectation value of the state of each trajectories”. In my understanding, solving for 'smesolve' gives the corresponding 'ρ(t)' and then 'expect'. But 'smesolve' provides **[ntraj [int] number of trajectors]**, which means that there are _ntraj_ 'ρ(t)' (`expect`). If I want to show all _ntraj_ ‘s 'expect', how can I do it?. Can I understand `result.measurement` as measuring(POVM) the `smesolve.result` (where ρ(t) was given by solving the stochastic master equation) .$\hat{\rho}_{f}=\frac{\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}}{\mathrm{Tr}[\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}]}$。If this is the case, I don't understand the point of doing the measurement again here, because the stochastic master equation itself has a continuous measurement. What I want to do is simply solve the stochastic master equation to get enough trajectories **ρ(t)** and solve the relevant expected value **Tr[ρ(t)A]**. On the one hand, I want to see the expectations of all N quantum trajectories ρ(t)'s expect (**Tr[ρ(t)A] maybe with different dW**), and on the other hand I want to compare the expected average of N quantum trajectories with the result of the master equation(`mesolve.expect`). This is similar to this code in Note (but the result in [Note](https://nbviewer.org/urls/qutip.org/qutip-tutorials/tutorials-v4/time-evolution/016_smesolve-inefficient-detection.ipynb) is `result.measurement`). `fig, ax = plt.subplots(figsize=(8, 4)). for m in result.measurement:; ax.plot(times, m[:, 0].real, ""b"", alpha=0.025). ax.plot(times, result_ref.expect[1], ""k"", lw=2). ax.set_ylim(-25, 25); ax.set_xlim(0",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206:1771,continuous,continuous,1771,https://qutip.org,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206,1,['continuous'],['continuous']
Deployability,"may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unk",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:8918,Release,Release,8918,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unk",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:14836,Release,Release,14836,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unk",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:20754,Release,Release,20754,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"mp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Relea",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:7021,Release,Release,7021,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"mp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Relea",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:12858,Release,Release,12858,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"mp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Relea",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:18862,Release,Release,18862,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"mp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Relea",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:24866,Release,Release,24866,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"mparing spectrum from es and pi methods ... ok; correlation: comparing TLS emission correlations (str-list td format) ... In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyre",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:3274,Release,Release,3274,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"mported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op; > + )[0]; >; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245592358>:; >; > > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense; > + ); >; > ⬇️ Suggested change; >; > - solver_instance = FLiMESolver(; > - floquet_basis,; > - c_ops,; > - args,; > - time_sense=time_sense; > - ); > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense,; > + o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:1545,release,release,1545,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['release'],['release']
Deployability,multiprocessing is used in `__init__` to determine how many cpus are available. I guess you are right in that it is unlikely that the number of cpus would change between install and use.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-269724696:170,install,install,170,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-269724696,1,['install'],['install']
Deployability,"nda2\envs\qtpy3\include ""-IC:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\INCLUDE"" ""-IC:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\ATLMFC\INCLUDE"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt"" ""-IC:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\\shared"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\\um"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\\winrt"" ""-IC:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\INCLUDE"" ""-IC:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\ATLMFC\INCLUDE"" ""-IC:\Program Files (x86)\Windows Kits\10\include\10.0.10240.0\ucrt"" ""-IC:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\include\um"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\\shared"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\\um"" ""-IC:\Program Files (x86)\Windows Kits\8.1\include\\winrt"" /EHsc /Tpqutip/cy/spmatfuncs.cpp /Fobuild\temp.win-amd64-3.5\Release\qutip/cy/spmatfuncs.obj /w /Ox; cl : Command line warning D9025 : overriding '/W3' with '/w'; spmatfuncs.cpp; c:\anaconda2\envs\qtpy3\lib\site-packages\numpy\core\include\numpy\npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; c:\users\alex\documents\github\qutip\qutip\cy\src/zspmv.hpp(3): error C2146: syntax error: missing ')' before identifier 'data'; c:\users\alex\documents\github\qutip\qutip\cy\src/zspmv.hpp(3): error C3646: 'data': unknown override specifier; c:\users\alex\documents\github\qutip\qutip\cy\src/zspmv.hpp(3): error C2062: type 'int' unexpected; c:\users\alex\documents\github\qutip\qutip\cy\src/zspmv.hpp(7): error C2059: syntax error: ')'; qutip/cy/spmatfuncs.cpp(2503): error C2660: 'zspmvpy': function does not take 7 arguments; qutip/cy/spmatfuncs.cpp(2688): error C2660: 'zspmvpy': function does not take 7 arguments; qutip/cy/spmatfuncs.cpp(2923): error C2660: 'zspmvpy': function does ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/648#issuecomment-281199101:1592,Release,Release,1592,https://qutip.org,https://github.com/qutip/qutip/pull/648#issuecomment-281199101,1,['Release'],['Release']
Deployability,"ng the SolverOptions class is an excellent idea, but I think the PR currently doesn't go far enough and ends up with the solver classes, the integrator classes and the solver option classes required to share too much internal state with each other. As a next step to try untangle things, I suggest the following:. - Let's remove the `known_solvers` and the solver `name` from the SolverOptions and instead have the base solver pass the allowed options with defaults in to the SolverOptions constructor directly. If the allowed options list is `None`, then we can allow all options (for the convenience of users who really want to make their own SolverOptions instances).; - Having the options able to notify a listener of changes seems great -- let's keep that.; - When a solver is created, let's have the base solver create a new SolverOptions instance, either from a dictionary or another SolverOptions instance, but with the allowed options and defaults now specified.; - To deal with the integrator options, let's go back to having a single option named `ode`, but have the value of `ode` have type `SolverOptions`, and be a child of the solver options (if the child has a value modified, it should notify the parent of the change).; - For convenience, when passing options as a dictionary, one should be able to use `{""ode.method"": ""vern9""}` or `{""ode"": {""method"": ""vern9""}`. I think that should be enough to disentangle things from each other. The base solver would need to update the integrator if integrator options change and deal with any changes to the base options. It's not completely clear to me whether the result options should also be sub-options or just be included in the solver options. I'm happy for them to be included in the solver options, as long as the solver options are passed to the result class constructor. That keeps things a bit simpler and if solver needs new result options it can always create its own result sub-class and just process its options there. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945:1027,integrat,integrator,1027,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945,4,"['integrat', 'update']","['integrator', 'update']"
Deployability,"nown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: wa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:6372,Release,Release,6372,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"nown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: wa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:12209,Release,Release,12209,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"nown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: wa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:18213,Release,Release,18213,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"nown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: wa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:24217,Release,Release,24217,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"numpy seeds must be 32bit usingned int. Thus `np.uint32` is better, `np.int32` will cut half the available seeds. #1219 will fix this but it will take some time before it is officially released.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/968#issuecomment-608570391:185,release,released,185,https://qutip.org,https://github.com/qutip/qutip/issues/968#issuecomment-608570391,1,['release'],['released']
Deployability,"obj(data, dims=dims, copy=False, type='oper', isherm=...); ```; providing `data` is actually of a valid (`fast_csr_matrix`) format. Technically the `Qobj.data` attribute will be a new object that wraps the same numpy arrays as was passed, rather than the same `fast_csr_matrix`. In various forms, `expect` already does check the Hermicity, that's why `mc-dm` is careful to set it to avoid recalculating it. The expect functions in `qutip.expect` do this directly, and aren't aware of column-stacked density matrices - they'll just raise a TypeError. `mesolve` and `mcsolve` now bypass the `Qobj` stage and go direct to Cython - in 5.0 it might not be a terrible idea to route everything back through the `Qobj` form, since the performance issues there are solved (a column-stacked dense matrix can be directly wrapped by an f-ordered `Dense` type), and it's the natural central point of the code (and those parts are called from Python-space anyway, so no C concerns). Here though, the problem is actually that the expectation generator in `mesolve` correctly calculates the dtype of the output expectation array using both the state and the expectation operator, but then it does it incorrectly in the loop, and passes the hermicity down to Cython using only the expectation operator, which promptly throws out the complex part. So setting `fast='mc-dm'` in `Qobj` is a symptom of the same root cause as the problem here, rather than the cause itself. At the start of `mesolve` we don't assume that the state is Hermitian, but then inside the integration loop we do. We can still keep the speedup - if the output was created with a complex dtype, we can always safely say that we're passing in non-Hermitian operators, even if coincidentally at one timestep they happen to be anyway. See https://github.com/qutip/qutip/blob/d285e96b3afc61afd1deceef61d9635f9d9aa505/qutip/mcsolve.py#L525-L529 and https://github.com/qutip/qutip/blob/d285e96b3afc61afd1deceef61d9635f9d9aa505/qutip/mesolve.py#L509-L511",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1460#issuecomment-796835048:1976,integrat,integration,1976,https://qutip.org,https://github.com/qutip/qutip/issues/1460#issuecomment-796835048,1,['integrat'],['integration']
Deployability,"object.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conv",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:3596,Release,Release,3596,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"object.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conv",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:9349,Release,Release,9349,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"object.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conv",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:15267,Release,Release,15267,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"object.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conv",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:21185,Release,Release,21185,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"ocumentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across the library. This is particularly important if we want this to work well with superoperators. Really, thank you very much for making the PR - I really am excited to see people with an interest in the new data layer! I'm sorry that I took quite so long to respond properly to it, and that when I have, I've ended up being so",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:3376,configurat,configuration,3376,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['configurat'],['configuration']
Deployability,"ommand python setup.py egg_info:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/tmp/pip-build-hg437fn6/qutip/setup.py"", line 159, in <module>; configuration=configuration; File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/core.py"", line 135, in setup; config = configuration(); File ""/tmp/pip-build-hg437fn6/qutip/setup.py"", line 135, in configuration; config.add_subpackage('qutip'); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 1002, in add_subpackage; caller_level = 2); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 971, in get_subpackage; caller_level = caller_level + 1); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 908, in _get_configuration_from_setup_py; config = setup_module.configuration(*args); File ""qutip/setup.py"", line 8, in configuration; config.add_subpackage('cy'); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 1002, in add_subpackage; caller_level = 2); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 971, in get_subpackage; caller_level = caller_level + 1); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 883, in _get_configuration_from_setup_py; ('.py', 'U', 1)); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/imp.py"", line 234, in load_module; return load_source(name, filename, file); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/imp.py"", line 172, in load_source; module = _load(spec); File ""<frozen importlib._bootstrap>"", line 693, in _load; File ""<frozen importlib._bootstrap>"", line 673, in _load_unlocked; File ""<frozen impor",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/426#issuecomment-183253786:1121,configurat,configuration,1121,https://qutip.org,https://github.com/qutip/qutip/issues/426#issuecomment-183253786,1,['configurat'],['configuration']
Deployability,"onda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_pw_8rhs14880_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs148",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:8036,Release,Release,8036,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"onda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_pw_8rhs14881_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\U",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:13789,Release,Release,13789,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"onda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_pw_8rhs14882_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\U",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:19707,Release,Release,19707,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"onda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_pw_8rhs14883_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; ok; correlation: comparing TLS emission correlations (fn-list td format) ... ok; correlation: comparing TLS emission correlations (fn td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Exc",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:25625,Release,Release,25625,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"or each stochastic collapse operator, but now it is also possible to do something more sophisticated, like in your milstein solver. I've edited your notebook so that it uses the standard (now modified) smesolve and your rhs functions for the milstein methods. http://nbviewer.ipython.org/6153688. Note that I still only use the rhs function for the contributions due to the stochastic collapse operators (both the deterministic and stochastic part), and it does not include the unitary part or the deterministic collapse operators (if those are given as well), so it is not quite what you suggested when proposing that the rhs should calculate \rho_{n+1}. Do you think this approach is reasonable, or do you see any problems with it?. Regarding your milstein implementation, it seems that it is only valid for homodyne detection, since your have hardcoded the d1 and d2 function into the rhs function. I've tried to separate the definition of the SDE (d1 and d2) from the implementation of the SDE integrator (rhs), and naively it seems like you could use the d1 and d2 functions in rhs_milstein to make it possible to use it with hetrodyne detection as well. Is there any difficulties in generalizing the milstein method and parameterize it in terms of d1 and d2 functions in this way?. I've also tried to use the smesolve_imp and smesolve_milstein with explicit=False in your original notebook, but I do not get resuls that agree with the other methods if I use these. Looking at the code for smesolve_imp, you do an inversion of some variant of the liouvillian to calculate Lsparse, what is the purpose of that calculation? And finally, I see you use expm in _smesolve_single_milstein_implicit: I think this should be avoided because it will be very computationally demanding for larger systems. If you are satisfied with how the new rhs functions work I'll merge the branch sme-rhs-restructuring into qutip master and then feel free to submit a pull request with your milstein rhs implementation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22088170:1770,integrat,integrator,1770,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22088170,1,['integrat'],['integrator']
Deployability,"ouvillians, but dense data for Qobj's that represent Hilbert space states or Density matrices. In fact, it looks like a significant part of the overhead in the [calculation of the Krotov's pulse update](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/optimize.py#L466) is due to the stacking/unstacking, see [`profile.svg`](https://gist.githubusercontent.com/goerz/34af142b78d7e344417d838bbea78aaf/raw/f3f49104083d59b9612f153d2f0ff652ea6a9f01/profile.svg) in the [gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf#file-profile-svg). In the benchmarking notebook, for the optimization in `In [34]`, that's the extra 6 seconds per iteration (iterations 1-3 should ideally take exactly twice as long as iteration 0, as iteration 0 is a simple forward propagation and all later iterations are one forward and one backward propagations). That's what we have in our Fortran implementation, too: the runtime of the optimization is basically just the runtime of all the internal propagations; calculating the updates should be completely negligible. There's also [shape conversions](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L254-L260) happening in [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) which would be nice to eliminate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:4331,update,updates,4331,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['update'],['updates']
Deployability,"probably there are more edge case and functions that need an update (sprepost() etc), but maybe for now this is a sufficient fix?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2341#issuecomment-1978108039:61,update,update,61,https://qutip.org,https://github.com/qutip/qutip/pull/2341#issuecomment-1978108039,1,['update'],['update']
Deployability,"python3.5/site-packages/numpy/distutils/misc_util.py"", line 1002, in add_subpackage; caller_level = 2); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 971, in get_subpackage; caller_level = caller_level + 1); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 908, in _get_configuration_from_setup_py; config = setup_module.configuration(*args); File ""qutip/setup.py"", line 8, in configuration; config.add_subpackage('cy'); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 1002, in add_subpackage; caller_level = 2); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 971, in get_subpackage; caller_level = caller_level + 1); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 883, in _get_configuration_from_setup_py; ('.py', 'U', 1)); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/imp.py"", line 234, in load_module; return load_source(name, filename, file); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/imp.py"", line 172, in load_source; module = _load(spec); File ""<frozen importlib._bootstrap>"", line 693, in _load; File ""<frozen importlib._bootstrap>"", line 673, in _load_unlocked; File ""<frozen importlib._bootstrap_external>"", line 662, in exec_module; File ""<frozen importlib._bootstrap>"", line 222, in _call_with_frames_removed; File ""qutip/cy/setup.py"", line 3, in <module>; from Cython.Distutils import build_ext; ImportError: No module named 'Cython'; Installing without the fortran mcsolver.; ```. EDIT: And `qutip` installs well with `pip` even if `scipy` is not installed (or `matplotlib`). This results in an `ImportError` at first import (or warning). But once installing manually the dependencies, all is fine.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/426#issuecomment-183253786:2399,Install,Installing,2399,https://qutip.org,https://github.com/qutip/qutip/issues/426#issuecomment-183253786,4,"['Install', 'install']","['Installing', 'installed', 'installing', 'installs']"
Deployability,"r 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_pw_8rhs14880_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:7272,Release,Release,7272,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"r 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_pw_8rhs14881_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:13025,Release,Release,13025,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"r 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_pw_8rhs14882_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:18943,Release,Release,18943,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"r 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_pw_8rhs14883_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; ok; correlation: comparing TLS emission correlations (fn-list td format) ... ok; correlation: comparing TLS emission correla",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:24861,Release,Release,24861,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"r (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:7041,integrat,integrator,7041,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Deployability,"r 1e-6). . ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.0.dev0+4277eae; Numpy Version: 1.14.2; Scipy Version: 1.0.0; Cython Version: 0.28.1; Matplotlib Version: 2.2.2; Python Version: 3.4.3; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.4/dist-packages/qutip-4.3.0.dev0+4277eae-py3.4-linux-x86_64.egg/qutip. #I would expect this to have largest terms of order 1e-11 say.; [[-4.24096116e-07+1.00022928e-06j -4.16215462e-09-4.54122270e-07j]; [ 4.16215462e-09-4.54122270e-07j -4.24096116e-07-1.00022928e-06j]]; ```; and here is the result of running with the latest version (note, now difference between the two propagators respects the required tolerances):. ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.0.dev0+489fd41; Numpy Version: 1.14.2; Scipy Version: 1.0.0; Cython Version: 0.28.1; Matplotlib Version: 2.2.2; Python Version: 3.4.3; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.4/dist-packages/qutip-4.3.0.dev0+489fd41-py3.4-linux-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex file can be easily generated using `qutip.cite()`. #working well now:; [[ 3.84509091e-12+2.02926564e-12j -1.25703892e-11+0.00000000e+00j]; [ 1.25703892e-11+0.00000000e+00j 3.84509091e-12-2.02926564e-12j]]; ```. This can be closed. Thanks. EDIT: this seems related to: https://github.com/qutip/qutip/issues/843; ... that can probably be closed as wel.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/829#issuecomment-376601387:1996,Install,Installed,1996,https://qutip.org,https://github.com/qutip/qutip/issues/829#issuecomment-376601387,2,['Install'],"['Installation', 'Installed']"
Deployability,"rayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_pw_8rhs14881_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs148",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:13954,Release,Release,13954,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"rayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_pw_8rhs14882_1cy_td_ode_rhs':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs148",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:19872,Release,Release,19872,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"recated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversio",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:3987,Release,Release,3987,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"recated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversio",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:9740,Release,Release,9740,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"recated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversio",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:15658,Release,Release,15658,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"recated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversio",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:21576,Release,Release,21576,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"regarding porting it directly into qutip, and we agreed it would be a good addition as a separate solver. There are a couple of we-believe-good reasons to provide <code>krylovsolve</code> as another qutip solver. As you mention, the method is currently limited to constant closed system Hamiltonians. Another possible addition discussed during the meetings was support for open quantum systems, which provides another unitary-fund grant opportunity for some students!. Another important application for many-body systems comes in handy with Krylov. Given the memory limitations from matrix representation of operators and the exponential growth of many-body systems Hilbert spaces, the limit of qubits on which the solvers live is around 15 qubits. This limitation gets expanded (in exchange for some slow down in the computations) to a few more qubits exploiting the binary operational nature of many-body systems. While any solver could use operations instead of matrices, it is a good testing bead to use Krylov's algorithm because of a property when constructing this space. This feature is a must-have within our research group, and everyone could also benefit from it. More importantly, Krylov is gaining increasing interest in the research community, and we believe that providing it as a qutip solver will increase the traffic of the repository. Regarding benchmarks and some documentation, we have a public jupyter notebook with some benchmarks here [krylov use examples](https://colab.research.google.com/drive/1f7ng8q9QNEzaZ97vGop3aIip8GPtl3GR?usp=sharing), and there's also a [medium blog post](https://medium.com/@julian.ruffinelli/krylov-approximation-method-for-quantum-evolution-148b3f023ec4) with some other details. As for maintenance, yes, the way this code-block fits in should not be problematic to update even with qutip changes. We use <code>krylovsolve</code> for research and will keep the solver repo outside qutip up to date and (hopefully!) inside of it for the community.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1668#issuecomment-926236528:1944,update,update,1944,https://qutip.org,https://github.com/qutip/qutip/issues/1668#issuecomment-926236528,1,['update'],['update']
Deployability,"ring handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_wigner.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; !!!!!!!!!!!!!!!!!!! Interrupted: 60 errors during collection !!!!!!!!!!!!!!!!!!!; =========================== 60 error in 1.85 seconds ===========================; (base) cln-232-18:qutip nathanshammah$; ```; this on the 4.4.0 release version. ; On the dev version, ; ```; (qdev) cln-232-18:qutip nathanshammah$ pytest; ============================= test session starts ==============================; platform darwin -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0; rootdir: /Users/nathanshammah/github/qutip; collected 561 items. qutip/tests/test_basis_transformation.py ........ [ 1%]; qutip/tests/test_brmesolve.py Fatal Python error: Fatal Python error: Segmentation fault: 11; (qdev) cln-232-18:qutip nathanshammah$ pytest; ============================= test session starts ==============================; platform darwin -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0; rootdir: /Users/nathanshammah/github/qutip; collected 561 items. qutip/tests/test_basis_transformation.py ........ [ 1%]; qutip/tests/test_brmesolve.py Fatal Python error: Segmentation fault: 11; ```; and with nosetests; ```; (qdev) cln-232-18:qutip nathanshammah$ nosetests; /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: Ru",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:29257,release,release,29257,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['release'],['release']
Deployability,"rmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Qobj) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (OO) ... ok; ```. This shows that it is probably not an issue with the source code. I was looking at the output you provided from `qutip.about`, and you seem to be using `QuTiP Version: 4.5.0.dev0+d377c997`. I suspect this could be the issue, since the dev version is probably not stable yet. So I'd recommend you try this with a stable release of QuTiP.; Would you try running the same with QuTiP 4.4.1, by explicitly installing the same in conda as follows, and get back to us? :; `conda install qutip=4.4.1`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576:2707,release,release,2707,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576,3,"['install', 'release']","['install', 'installing', 'release']"
Deployability,"rom es and pi methods ... ok; correlation: comparing spectrum from es and fft methods ... ok; correlation: comparing spectrum from es and pi methods ... ok; correlation: comparing TLS emission correlations (str-list td format) ... In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unk",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:3165,Release,Release,3165,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"rs\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:4831,Release,Release,4831,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"rs\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:4695,Release,Release,4695,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"rs\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:4552,Release,Release,4552,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"rs\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:10584,Release,Release,10584,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"rs\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:10448,Release,Release,10448,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"rs\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:10305,Release,Release,10305,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"rs\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:16502,Release,Release,16502,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"rs\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:16366,Release,Release,16366,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"rs\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:16223,Release,Release,16223,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"rs\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:22420,Release,Release,22420,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"rs\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:22284,Release,Release,22284,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"rs\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:22141,Release,Release,22141,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"s (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?. The error in the documentation (HTTP Error 403) is unrelated the the actual build. It happen from time to time randomly... you can ignore it.; However the documentation build will fail on warnings. > * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; ; qutip-notebook is no longer used, we migrated to qutip-tutorial. Please open a new PR there. > * The _run_one_traj function now exists 3 times, with practically identical code:; > https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; > https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; > https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; > Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. There is a fourth `_run_one_traj` coming for the stochastic solver with also almost the same code...; Yes, some cleaning is needed and having a swap-able trajectory result class would be nice.; I looked at your implementation and it look fine.; I would just rename `trajectoryclass` to `trajectory_result_class` or something similar, otherwise it make me think it refer to the removed `TrajectorySolver`. > I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L206) should be ""integrate"", I think. ; `step` was renamed to `integrate` a while ago. Good catch!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702:2086,integrat,integrate,2086,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702,2,['integrat'],['integrate']
Deployability,"s ea1c129 to b4f75cf as ""new"" (the first three commits of this PR). However, when those commits are taken together, they make the same changes as commit 4102b99 (the one which merged #1242) in `qutip/master`. The Github ""Files changed"" dialog is a pretty-printed version of the `git` command `git diff qutip/master...Canoming/master`, which means ""show all changes on either branch since `qutip/master` and `Canoming/master` diverged"". Because they diverged before #1242 was merged, it includes those changes. The merge completes without conflict, however, because `git` is clever and recognises that the changes introduced in the two branches `qutip/master` and `Canoming/master` are identical, even though the commits are different. As a consequence, however, merging this PR without squashing it would cause commits ea1c129 to b4f75cf to suddenly appear in our commit history, which we don't want. ### If Canoming wanted to fix this (not necessary). First run; ```; git remote add qutip https://github.com/qutip/qutip.git; git fetch qutip; ```; to add the upstream `qutip` remote. Then run; ```; git checkout master; git rebase -i $(git merge-base qutip/master master); ```; and modify the file so that the instruction list looks like (only the first word of each line changes); ```; pick ea1c129a fix function QubitCircuit.remove_gate; fixup 3bd94603 fix function QubitCircui.remove_gate; fixup b4f75cfe fix; pick 4aa90f56 fix bug in QubitCircuit.add_circuit; pick 3a2676de fix function QubitCircuit.add_circuit; pick 58aebc7f fix indent; ```; Should you save and close the file, it would modify your commit history. We'd only do this to avoid a merge conflict which would otherwise occur in the next step. Then, run; ```; git rebase qutip/master; ```; which should complete without error. Finally, your local `master` would now have diverged from Github's copy (and this PR's), so you'd have to force-push the changes by doing; ```; git push --force; ```; which would update this PR accordingly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-629701269:3028,update,update,3028,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-629701269,1,['update'],['update']
Deployability,"s14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:4799,Release,Release,4799,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"s14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_pw_8rhs14880_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-pack",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:8027,Release,Release,8027,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"s14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:10636,Release,Release,10636,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"s14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_pw_8rhs14881_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packag",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:13864,Release,Release,13864,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"s14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:16640,Release,Release,16640,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"s14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_pw_8rhs14882_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packag",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:19868,Release,Release,19868,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"s14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:22644,Release,Release,22644,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"s14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1: warning: '_import_array' defined but not used [-Wunused-function]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_pw_8rhs14883_1cy_td_ode_rhs':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > ok; > correlation: comparing TLS emission correlations (fn-list td format) ... ok; > correlation: comparing TLS emission correlations (fn td format) ... ok; > Counting statistics: current and current noise in a DQD model ... ok; > Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; > Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; > Diagonalization of random two-level system ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:25872,Release,Release,25872,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"s=q.Odeoptions() #""low"" tolerances; opts=q.Odeoptions(method='adams', nsteps=100000, atol=1e-11, rtol=1e-11); times=np.linspace(0,10,300); epsilon=2*np.pi * 1; H=[epsilon/2*q.sigmaz(), [q.sigmax(), 'sin(2*pi*t)']]; U_prop_batch=q.propagator(H, times, options=opts, unitary_mode='batch', parallel=False); U_prop_single=q.propagator(H, times, options=opts, unitary_mode='single', parallel=False); print((U_prop_batch[-1]-U_prop_single[-1]).full()); ```. and here is the ""bad"" output with the older version of qutip that I was running before (Note, the difference between the 'batch' and 'single' has terms of order 1e-6). . ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.0.dev0+4277eae; Numpy Version: 1.14.2; Scipy Version: 1.0.0; Cython Version: 0.28.1; Matplotlib Version: 2.2.2; Python Version: 3.4.3; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.4/dist-packages/qutip-4.3.0.dev0+4277eae-py3.4-linux-x86_64.egg/qutip. #I would expect this to have largest terms of order 1e-11 say.; [[-4.24096116e-07+1.00022928e-06j -4.16215462e-09-4.54122270e-07j]; [ 4.16215462e-09-4.54122270e-07j -4.24096116e-07-1.00022928e-06j]]; ```; and here is the result of running with the latest version (note, now difference between the two propagators respects the required tolerances):. ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.3.0.dev0+489fd41; Numpy Version: 1.14.2; Scipy Version: 1.0.0; Cython Version: 0.28.1; Matplotlib Version: 2.2.2; Python Version: 3.4.3; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.4/dist-packages/qutip-4.3.0.dev0+489fd41",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/829#issuecomment-376601387:1117,Install,Installed,1117,https://qutip.org,https://github.com/qutip/qutip/issues/829#issuecomment-376601387,2,['Install'],"['Installation', 'Installed']"
Deployability,"sers\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobje",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:6207,Release,Release,6207,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"sers\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobje",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:11960,Release,Release,11960,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"sers\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobje",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:17878,Release,Release,17878,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"sers\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobje",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:23796,Release,Release,23796,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"seus' ship problem for us if we ever want to re-organise the file that contains this code; after how many modifications is the code no longer NASA's, but QuTiP's? As long as it's not _ours_, we can't separate it out into different files, or mix it with other code (say additional implementations). I'm definitely not a lawyer, but I'm worried that will cause us code organisation problems in the future, and while the licence would give us permission to improve the code, it's the reorganisation I'm worried about. Secondly, about the code itself: this sort of local operation is something I absolutely would like to include, but I'm not certain that the form it's in right now is the best, general way to do it. I think this is part of much larger discussion about how to handle tensor networks - for example, at the moment, `targets` is fine for states and operators, but it won't work for superoperators. I'm not sure that this is solvable in an ergonomic way with QuTiP's current dimensions specifiers, but it's something we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose`, which can be seen as special cases of this exact same type of tensor contraction (not to mention `tensor_contract`!). The other thing from a code perspective is that this doesn't use the data-layer in the intended manner. A lot of this may be because our documentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of rou",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:1693,release,release,1693,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['release'],['release']
Deployability,"site may help for future reference. On Wed, 13 May 2020 at 23:38, Eric Giguère <notifications@github.com> wrote:. > I did some tests and; > 1 - Cause by fortran zheer (lapack eigenvalue solver for complex hermitian; > matrices) (c's version Ok); > 2 - It happen when installing the scipy stack with pip but not when; > installing it with conda.; > 3 - It depend on the problem size, 64 seems particularly bad, usually it; > fails on the second call.; > 4 - I only got it in zheevr which is only used in brmesolve. But Nathan; > got it in other tests which use scipy's eigh.; > 4 - It happen in scipy in the fortan version of lapack:; >; > import numpy as np; > from scipy.linalg import eigh; > H = random_hermitian(64); > eigh(H) # Work fine; > eigh(np.asfortranarray(H)) # segfault after a few try, may need to change H; >; > Possible solutions (for zheevr):; >; > - Installing scipy with conda, the easiest solution, but not in our; > control.; > - Finding a way to link clapack from cython. Linking scipy's one would; > require good knowledge of scipy internals since only one cython interface; > is provided. Linking to another installation of lapack, but it would; > require the user to install lapack or install it with qutip. Both seems; > wrong to me.; > - For mac user, call scipy's eigh from cython i zheevr, slower but; > better than risking segfault.; > - Have the code directly in qutip. We can adapt it from OpenBlas:; > https://github.com/xianyi/OpenBLAS/blob/master/lapack-netlib/LAPACKE/src/lapacke_zheevr.c; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1197#issuecomment-628259492>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADPF67AJF3WTZBCU4YWFY23RRMHMHANCNFSM4LCKXE6A>; > .; >; -- ; Dr. Nathan Shammah; Postdoctoral Research Scientist; Theoretical Quantum Physics Laboratory; RIKEN, Wako, Saitama, Japan; www.nathanshammah.com",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628441264:1386,install,installation,1386,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628441264,3,['install'],"['install', 'installation']"
Deployability,"ssues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed experiment on a small subset of tests, which are more suited to property-based testing, and examining how that affects the test-run-completion time(s) and whether it introduces more failures than what would be desired/cost-efficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:2590,pipeline,pipeline,2590,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['pipeline'],['pipeline']
Deployability,"started looking into QuTiP only very recently, and I'm yet to start familiarising myself with its more intricate details and get to run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another con",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:1664,update,updates,1664,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['update'],['updates']
Deployability,"t of issue #1023, now the times are back to comparable with qutip 4.3.1 for the choice `Average States = False, Store States = True` and the storing doesn't get stuck two minutes. . With the default options, QuTiP 4.4 (both 4.4.0.dev0+e4b2415a and dev0+da029386) is slower than 4.3.1 of a factor 2 (Case 4 below). ; With `Average States = True, Store States = False`, version 4.3.1 is faster than the old patch that is faster than this one. . Here the full cases:; ### Case 1) Average states = False, Store States = True. #### QuTiP 4.3.1:; Total run time: 29.72s; **Real cell time: 30s** . #### QuTiP 4.4 before this patch:; Total run time: 17.49s; **Real cell time: 127.9s** . #### QuTiP 4.4 with this patch:; Total run time: 19.96s; **Real cell time: 28.90908122062683**. ### Case 2) Average states = False, Store States = False; #### QuTiP 4.3.1:; Total run time: 9.55s; real time 10.40579104423523. #### QuTiP 4.4 before this patch:; Total run time: 20.02s; **Real cell time: 21s**. #### QuTiP 4.4 with this patch:; Total run time: 18.61s; **Real cell time: 18.64s**. ### Case 3) Average states = True, Store States = True. #### QuTiP 4.3.1:; Total run time: 35.35s; **Real cell time: 65s**. #### QuTiP 4.4 before this patch:; Total run time: 18.35s; **Real cell time: 21s**. #### QuTiP 4.4 with this patch:; Total run time: 19.52s; **Real cell time: 23s** . ### Case 4) Default options; #### QuTiP 4.3.1:; Total run time: 8s; **Real cell time: 8s**. #### QuTiP 4.4 before this patch:; Total run time: 18s; **Real cell time: 22s**. #### QuTiP 4.4 with this patch:; Total run time: 19s; **Real cell time: 19s** . ### Case 5) Average states = True, Store States = False; #### QuTiP 4.3.1:; Total run time: 8s; **Real cell time: 8s**. #### QuTiP 4.4 before this patch:; Total run time: 19s; **Real cell time: 18s**. #### QuTiP 4.4 with this patch:; Total run time: 19s; **Real cell time: 28s** . I am merging this in any case as it removes the slowing down when storing the states flagged in #1023.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1024#issuecomment-503664663:1051,patch,patch,1051,https://qutip.org,https://github.com/qutip/qutip/pull/1024#issuecomment-503664663,7,['patch'],['patch']
Deployability,"t some point we do `qeye(L.shape[0])` instead of `qeye(L.dims[0])`. There's sometimes quite a bit of that in older code - it used to slip through because we weren't super strict about dimension handling, so in certain cases (like this one), we'd accept bad dimensions. I might try and have a look tonight (UK time), if I have time - I've wanted to break up the large `propagator` monolith into smaller components for quite a while. ---. About numerical precision: if you want to try increasing the precision of the integrators, try passing `options=qutip.Options(nsteps=1_000_000, atol=1e-12, rtol=1e-10)` to `propagator`. `atol` and `rtol` are absolute and relative tolerances respectively, and `nsteps` is the number of subdivisions the integrator is _allowed_ to take (if it reaches its tolerance goals, it won't take all of them). You'll find that `atol` and `rtol` will have only a loose relation to the tolerance of your fidelity value, because there's a _lot_ of floating-point operations between those points in which the errors compound, and there's a hard limit on the tolerances the integrator can achieve, so you might not be able to get a perfect answer. The fidelity calculation involves finding the square root of a density operator, so that's another large possible source of error. About times: if you only care about the state at the last time, setting `tlist = np.linspace(0, x, 201)` is quite inefficient. Instead, set `tlist = [0, x]`, and then pass `options=qutip.Options(nsteps=<very very big integer>)`. It's more efficient because it doesn't need to achieve tolerance goals and construct/store `Qobj` instances at every intermediate timestep. Temporary workaround: this is _very_ temporary, and generally a bad idea in QuTiP, but you can ""flatten"" all your operators into a single space for now, while we implement a fix. To do that:; ```python; # initial setup; H = qutip.tensor(...); c_ops = [qutip.tensor(...)]. original_dimensions = H.dims.copy(); new_dimensions = list(H.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1585#issuecomment-865903199:1147,integrat,integrator,1147,https://qutip.org,https://github.com/qutip/qutip/issues/1585#issuecomment-865903199,1,['integrat'],['integrator']
Deployability,"t]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:5498,Release,Release,5498,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"t]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:11251,Release,Release,11251,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"t]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:17169,Release,Release,17169,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"t]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:23087,Release,Release,23087,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"tbh, the only real use-case for `git cherry-pick` is to backport single bug-fix commits from `master` onto an already existing release branch without merging in additional feature commits. Since `dev.major` is intended to _include_ all of `master` (and `master` will eventually point to the `dev.major` tip), we shouldn't cherry pick from one to the other, but merge all changes. Having both #1289 and #1337 is effectively the same as having cherry-picked the feature onto both branches already, which is why the merge is now a bit tricky. That's not a problem at all (with how we developed it, it's the correct thing to do), it just means that when I joined them back together, I just merged this bit with the (logical - I did it all in one go) strategy `--ours` to tell `git` to keep the `dev.major` version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1289#issuecomment-779258918:127,release,release,127,https://qutip.org,https://github.com/qutip/qutip/pull/1289#issuecomment-779258918,1,['release'],['release']
Deployability,"te` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use other solvers in the new version. If you can point me to any thread-safe solver, I'd love to try that out. As already discussed above, if I can replace [`scipy.integrate.ode`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L312) in Krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) with something that's reentrant so I don't have to [re-initialize the integrator in every time step](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L244) , that might be a significant performance boost already.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:13066,integrat,integrate,13066,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,2,['integrat'],"['integrate', 'integrator']"
Deployability,"thods ... ok; > correlation: comparing spectrum from es and fft methods ... ok; > correlation: comparing spectrum from es and pi methods ... ok; > correlation: comparing TLS emission correlations (str-list td format) ... In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:3537,Release,Release,3537,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"tion_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op; > + )[0]; >; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245592358>:; >; > > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense; > + ); >; > ⬇️ Suggested change; >; > - solver_instance = FLiMESolver(; > - floquet_basis,; > - c_ops,; > - args,; > - time_sense=time_sense; > - ); > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense,; > + options=options,; > + ); >; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245594985>:; >; > > @@ -929,4 +930,5 @@ def run(self, state0, tlist, *, floquet=False, args=None, e_ops=None):; > stats[""run time""] = progress_bar.total_time(); > # TODO: It would be nice if integrator could give evolution statistics; > # stats.update(_integrator.stats); > +; >; > Why a new empty line here?; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245604228>:; >; > > + self.evecs = _data.permute.indices(; > + evecs, col_perm=np.argsort(perm)); >; > This file already has black ran on it and the style is ok as is.; > (But I just learned that black exclude the newline in it's character count; > while pycodestyle include it.); > Since it's not the main part of your PR, please revert it to it's original; > state.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245610200>:; >; > > + total_R_tensor[key] += np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + except KeyError:; > + total_R_tensor[key] = np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + re",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:2933,update,update,2933,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['update'],['update']
Deployability,"tip. However, I did show in the tutorial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for mpi_pmap, but I feel like writing that well would require deeper MPI knowledge than I have. What I did instead is, I tried to make it clear in the documentation that the default value might be unsuitable for MPI applications, and I emit a warning if the default value is used. At the same time, I set `OMPI_MCA_rmaps_base_oversubscribe=true` in the test run, which allows OpenMPI to create more processes t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:1400,install,install,1400,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,1,['install'],['install']
Deployability,"ude/python3.5m -c'; > extra options: '-w -ffast-math -O3 -march=native -funroll-loops'; > gcc: qutip/cy/src/zspmv.c; > qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or; > directory; > #include <complex.h>; > ^; > compilation terminated.; > qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or; > directory; > #include <complex.h>; > ^; > compilation terminated.; > error: Command ""gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall; > -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2; > -O2 -pipe -fPIC -Wformat -Wformat-security -fno-omit-frame-pointer; > -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions; > -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error; > -Wp,-D_REENTRANT -fPIC; > -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/include/python3.5m -c; > qutip/cy/src/zspmv.c -o; > build/temp.linux-x86_64-3.5/qutip/cy/src/zspmv.o -w -ffast-math -O3; > -march=native -funroll-loops"" failed with exit status 1`; >; > Well, all of them seem to fail with a similar issue. Whatever is exit; > status 1. (This; > <http://stackoverflow.com/questions/35991403/python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c> ; >; > is the SO solution I followed, it claims that error code is related to; > operation not permitted or setuptools not being installed. I upgraded; > the setuptools, pip doesn't work with sudo (I'm guessing it shouldn't)); >; > How can I install qutip?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/639>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ABMPqa8lboGo7XZN87m_drojuUNduRRVks5rWiL9gaJpZM4Lv_Q7>.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639#issuecomment-275734243:6433,install,install-gives-command-python-setup-py-egg-info-failed-with-error-c,6433,https://qutip.org,https://github.com/qutip/qutip/issues/639#issuecomment-275734243,4,"['install', 'upgrade']","['install', 'install-gives-command-python-setup-py-egg-info-failed-with-error-c', 'installed', 'upgraded']"
Deployability,"um Control in QuTiP](https://qutip.org/docs/latest/guide/guide-control.html?highlight=grape#optimal-quantum-control-in-qutip), specifically the `TimeslotComputer` (in fact, we looked at whether `TimeslotComputer` could be used for krotov at the time, but couldn't quite figure it out). I elaborated a little bit in https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the docstring of krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://quco",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:2364,update,updated,2364,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['update'],['updated']
Deployability,"um from es and pi methods ... ok; > correlation: comparing TLS emission correlations (str-list td format) ... In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:3648,Release,Release,3648,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"umerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6118,integrat,integrators,6118,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrators']
Deployability,updated on the Wiki GSoC 2020 page. https://github.com/qutip/qutip/wiki/Google-Summer-of-Code-2020,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-591284346:0,update,updated,0,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-591284346,1,['update'],['updated']
Deployability,"usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 261, in build_wheel; return _build_backend().build_wheel(wheel_directory, config_settings,; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 230, in build_wheel; return self._build_with_temp_dir(['bdist_wheel'], '.whl',; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 211, in _build_with_temp_dir; sys.argv = (sys.argv[:1] + setup_command +; TypeError: can only concatenate list (not ""str"") to list. ERROR Backend subproccess exited when trying to invoke build_wheel; ```. The other method; ```; --config-setting=""--build-option=--with-openmp""; ```; appears to work in the sense that it builds successfully. But after installing the package it reports that openmp is still missing; ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0; Numpy Version: 1.21.5; Scipy Version: 1.8.1; Cython Version: 0.29.30; Matplotlib Version: 3.5.2; Python Version: 3.10.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ``",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152:2147,Install,Installed,2147,https://qutip.org,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152,2,['Install'],"['Installation', 'Installed']"
Deployability,v4.7.5 was released a few weeks ago.; It's available on both conda and pypi.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2251#issuecomment-1956630959:11,release,released,11,https://qutip.org,https://github.com/qutip/qutip/pull/2251#issuecomment-1956630959,1,['release'],['released']
Deployability,"ve to completely define an interchange API, and specify quite explicitly what ""commands"" you can tell this sort of `mesolve` state machine to execute. The pattern in your original comment (reproduced here); ```python; for (i, state) in enumerate(; mesolve([H0, [H1, ctrl_array]], state0, list); ):; # assuming `state` is at tlist[i]; new_val = calculate_control_value_for_next_step(state); ctrl_array[i] = new_val; ctrl_array[i+1] = new_val # ignoring IndexError; ```; is probably a little fragile; doing this means we have to guarantee that at _no point_ is the `ctrl_array` object copied. If you wanted to branch off execution part-way through the iterator, you'd have to copy the whole state, and then you'd lose your reference to the control array unless you kept manually walking the structure of the time-dependent object (internally it gets converted into a `QobjEvo` Liouvillian) to retrieve it. The other problem is that `state0` and the `Qobj` parts of the Hamiltonian aren't mutable; the preprocessing of `mesolve` means that none of those objects will exist inside the integrator loop. That's fine for this use-case, but it's not very general. These problems of mutability would apply to callback functions as well. A different way of using `yield` or callback function would be to really lean into a co-routine sort of pattern. So `mesolve` internally would look like; ```python; def mesolve(H, state, times, c_ops, e_ops, options):; # [... set up problem ...]; integrator = scipy.integrate.ode(...); for time in times[1:]:; state = integrator.step_to(time); instructions = yield _mesolve_output_state(state, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be like; ```python; solver = mesolve(H, rho0, times, c_ops); try:; result = next(solver); while True:; next_control = krotov.get_next_control(result.time, result.state); result = solver.send([; ('update-arguments', {'control': next_control}),; ('update-hamilt",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:1436,integrat,integrator,1436,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,1,['integrat'],['integrator']
Deployability,"ve`, but it's certainly less flexible. So even then, an mesolve that can do single steps would still be great. I would also think that being able to do time steps would be exceedingly useful to *any* gradient-based optimal control scheme. Wouldn't it greatly simplify your own GRAPE implementation? I'm referring to the ""Object model"" in [Optimal Quantum Control in QuTiP](https://qutip.org/docs/latest/guide/guide-control.html?highlight=grape#optimal-quantum-control-in-qutip), specifically the `TimeslotComputer` (in fact, we looked at whether `TimeslotComputer` could be used for krotov at the time, but couldn't quite figure it out). I elaborated a little bit in https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the doc",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:2096,update,update,2096,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['update'],['update']
Deployability,"x\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:6906,Release,Release,6906,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"x\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:12743,Release,Release,12743,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"x\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5991:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5997:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:18747,Release,Release,18747,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"x\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseTooManyValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5979:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseNeedMoreValuesError':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5985:18: warning: too many arguments for format [-Wformat-extra-args]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:27:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: At top level:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/__multiarray_api.h:1634:1:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:24751,Release,Release,24751,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,xcode10 with python 3.8 is ~21min. ; `python setup.py install` took ~203s with xcode10 but 385s with xcode12... Compilation seems to be the issue.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1348#issuecomment-680007729:54,install,install,54,https://qutip.org,https://github.com/qutip/qutip/pull/1348#issuecomment-680007729,1,['install'],['install']
Deployability,yes! I installed it using --with-mcf90. Am I supposed to install fortran compiler besides the ones I have on anconda?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/391#issuecomment-154660509:7,install,installed,7,https://qutip.org,https://github.com/qutip/qutip/issues/391#issuecomment-154660509,2,['install'],"['install', 'installed']"
Deployability,you can just build the latest master - the update is there.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/829#issuecomment-377752315:43,update,update,43,https://qutip.org,https://github.com/qutip/qutip/issues/829#issuecomment-377752315,1,['update'],['update']
Deployability,"yrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:2",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:4273,Release,Release,4273,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"yrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:2",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:10026,Release,Release,10026,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"yrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:2",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:15944,Release,Release,15944,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"yrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:2",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:21862,Release,Release,21862,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"yxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expec",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:4130,Release,Release,4130,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"yxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:5481,Release,Release,5481,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"yxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:5336,Release,Release,5336,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"yxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expec",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:9883,Release,Release,9883,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"yxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:11318,Release,Release,11318,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"yxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:11173,Release,Release,11173,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"yxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expec",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:15801,Release,Release,15801,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"yxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:17322,Release,Release,17322,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"yxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5423:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5475:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5537:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5722:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:17177,Release,Release,17177,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"yxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expec",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:21719,Release,Release,21719,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['Release'],['Release']
Deployability,"yxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:23326,Release,Release,23326,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"yxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5411:26: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5463:20: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__pyx_buffmt_parse_array':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5525:25: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_GetBufferAndValidate':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: format '%s' expects argument of type 'char *', but argument 3 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5710:7: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:23181,Release,Release,23181,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['Release'],['Release']
Deployability,"👍 . By the way, here's the pip installs for qutip from PyPI for June 2018, showing Python 2.7 is already dropping off:. | python_version | percent | download_count |; | -------------- | ------: | -------------: |; | 3.6 | 51.53% | 118 |; | 2.7 | 33.19% | 76 |; | 3.5 | 13.97% | 32 |; | 3.4 | 0.87% | 2 |; | 3.7 | 0.44% | 1 |; | Total | | 229 |. Source: `pypinfo --start-date 2018-06-01 --end-date 2018-06-30 --percent --markdown qutip pyversion`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/882#issuecomment-408393466:31,install,installs,31,https://qutip.org,https://github.com/qutip/qutip/issues/882#issuecomment-408393466,1,['install'],['installs']
Energy Efficiency," * all_state[k].dag(); + PsipreX += X * all_state[j] * all_state[k].dag(); ; A = a + a.dag(); L = ((-spre(A * PsipreX)) + (sprepost(A, PsipreX)); diff --git a/qutip/states.py b/qutip/states.py; index 10ac9e32..075eb777 100644; --- a/qutip/states.py; +++ b/qutip/states.py; @@ -405,7 +405,7 @@ shape = [5, 5], type = oper, isHerm = True; if method == 'operator':; beta = np.log(1.0 / n + 1.0); diags = np.exp(-beta * i); - diags = diags / np.sum(diags); + diags /= np.sum(diags); # populates diagonal terms using truncated operator expression; rm = sp.spdiags(diags, 0, N, N, format='csr'); elif method == 'analytic':; diff --git a/qutip/steadystate.py b/qutip/steadystate.py; index 1f60f942..680b04c7 100644; --- a/qutip/steadystate.py; +++ b/qutip/steadystate.py; @@ -873,7 +873,7 @@ def _steadystate_power(L, ss_args):; check)); if check < 0:; raise Exception(""Breakdown in {}"".format(ss_args['method'])); - v = v / la.norm(v, np.inf); + v /= la.norm(v, np.inf); it += 1; if ss_args['method'] == 'power' and ss_args['solver'] == 'mkl':; lu.delete(); @@ -901,7 +901,7 @@ def _steadystate_power(L, ss_args):; trow = v[::rhoss.shape[0]+1]; data = v / np.sum(trow); else:; - data = data / la.norm(v); + data /= la.norm(v); ; data = dense2D_to_fastcsr_fmode(vec2mat(data),; rhoss.shape[0],; diff --git a/qutip/stochastic.py b/qutip/stochastic.py; index 49786aca..b9866527 100644; --- a/qutip/stochastic.py; +++ b/qutip/stochastic.py; @@ -1146,7 +1146,7 @@ def general_stochastic(state0, times, d1, d2, e_ops=[], m_ops=[],; if sso.dW_factors is None:; sso.dW_factors = [1.] * len(sso.m_ops); elif len(sso.dW_factors) == 1:; - sso.dW_factors = sso.dW_factors * len(sso.m_ops); + sso.dW_factors *= len(sso.m_ops); elif len(sso.dW_factors) != len(sso.m_ops):; raise ValueError(""The number of dW_factors must fit"" +; "" the number of m_ops.""); @@ -1318,7 +1318,7 @@ def _sesolve_generic(sso, options, progress_bar):; res.states = res.avg_states = avg_states_list; ; # average; - res.expect = res.expect / nt; +",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:20094,power,power,20094,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['power'],['power']
Energy Efficiency," many many things in the same test function.; > ; > The test seems structured ok to me. Certainly the testing algorithm isn't the major cause of speed loss. You could try timing some ""real-world"" examples of using your measurements, and try running them in a profiler to see if there are any obvious ways to speed things up.; > ; > With any luck the new data-layer tools and the possibility of using dense `Qobj` storage will give you a fair amount of speed-up once they're complete, since I imagine in your small circuit you're paying quite a lot of sparse matrix overhead.; > ; > I'll prefix this last part with: _you should always profile your code before optimising it_. That said, let me wildly break that rule and guess at where I think you'll find big speed-ups: caching and pre-computation. If you know you're going to run the same thing loads and loads of times, then you shouldn't have to call `self.propagators` each time, or build `measurement_ops` inside `measure_comp_basis`. Do those once at the start of `run_statistics`, and save them.; > ; > Minor things that _may_ speed up - check the profiling!; > ; > 1. ""compress"" the output of `self.propagators`: consecutive propagators with no measurements or classical controls inbetween can be pre-multiplied together at the start to make one matrix. This will save you ~3 matrix multiplications per run in the test.; > 2. use more efficient ways to construct large tensor spaces: `qutip.basis`, `qutip.projection` and `qutip.qeye` can all directly constructor product spaces (e.g. `qutip.basis([2, 2, 2], [0, 1, 0])`). `tensor` is a comparatively expensive operation, and tensoring a list of elements internally is effectively `tensor(...(tensor(tensor(els[0], els[1]), els[2]), ...), els[-1])`. Excellent Suggestions ! I already added some of the speed-ups you suggested, just haven't pushed them yet ! However, I think it might just be a better idea to go with Boxi's idea of removing the need for way too many runs in the first place !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640128273:1726,efficient,efficient,1726,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640128273,1,['efficient'],['efficient']
Energy Efficiency," module is small and very focussed. 2. Exactly - it's more of an internal type. Currently `Qobj` converts the underlying data object to dense `ndarray` and prints it for its `repr` method - I don't have any plans to change that, so `Qobj` will still be full and user-facing. My `CSR` repr actually just tells you the same information that `scipy.sparse.csr_matrix` does, just in a slightly more Python-looking form. 3. Yes, in some form or another. Perhaps we could talk about the best way to do that in a future meeting?. 4. `PyDataMem_NEW` isn't actually a Python routine, it's a numpy one, but that's largely irrelevant. The Python equivalent is `cpython.mem.PyMem_Malloc` and family. The reason I don't use the latter in general is because sometimes `PyMem_Malloc` allocates into Python-reserved stack-space, and if we subsequently pass the pointer to numpy, it will try to free it and cause a segfault. The reason for using `malloc` and `free` here is mostly just because there was a comment in the code I copied it from saying that raw `malloc` and `free` were slightly faster for allocating heap space to be released within the same function, so I just did what they did. I can change it - it's not important. When allocating space that _may_ be passed to numpy, I always use `PyDataMem_NEW` (or friends). 5. That's a mistake - I meant to take out that ability in `matmul_csr` because it's just asking for trouble (the user won't know how much space to allocate, and we're basically just asking for a segfault). I did `matmul_csr` first, and I hadn't decided yet exactly what I was doing. 6. Yeah, I'm going to add additional `imul`, `ineg` and `idiv` routines as dispatched operations. 7. LAPACK/BLAS as far as we can. I've no pretense to being able to write faster code than hardware-specific optimised stuff for matrices. I haven't actually written most of the numerical code in this PR either - it's just ported from current `qutip`, with the variable names changed to be more descriptive.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004:2309,allocate,allocate,2309,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004,1,['allocate'],['allocate']
Energy Efficiency," then setting up the dispatcher will be the last item in the `matmul` file. It also means the files stay a bit smaller and easier to manage within themselves - you're less likely to ""lose"" code when each module is small and very focussed. 2. Exactly - it's more of an internal type. Currently `Qobj` converts the underlying data object to dense `ndarray` and prints it for its `repr` method - I don't have any plans to change that, so `Qobj` will still be full and user-facing. My `CSR` repr actually just tells you the same information that `scipy.sparse.csr_matrix` does, just in a slightly more Python-looking form. 3. Yes, in some form or another. Perhaps we could talk about the best way to do that in a future meeting?. 4. `PyDataMem_NEW` isn't actually a Python routine, it's a numpy one, but that's largely irrelevant. The Python equivalent is `cpython.mem.PyMem_Malloc` and family. The reason I don't use the latter in general is because sometimes `PyMem_Malloc` allocates into Python-reserved stack-space, and if we subsequently pass the pointer to numpy, it will try to free it and cause a segfault. The reason for using `malloc` and `free` here is mostly just because there was a comment in the code I copied it from saying that raw `malloc` and `free` were slightly faster for allocating heap space to be released within the same function, so I just did what they did. I can change it - it's not important. When allocating space that _may_ be passed to numpy, I always use `PyDataMem_NEW` (or friends). 5. That's a mistake - I meant to take out that ability in `matmul_csr` because it's just asking for trouble (the user won't know how much space to allocate, and we're basically just asking for a segfault). I did `matmul_csr` first, and I hadn't decided yet exactly what I was doing. 6. Yeah, I'm going to add additional `imul`, `ineg` and `idiv` routines as dispatched operations. 7. LAPACK/BLAS as far as we can. I've no pretense to being able to write faster code than hardware-spec",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004:1618,allocate,allocates,1618,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004,1,['allocate'],['allocates']
Energy Efficiency,"### New changelog. #### <code>test_krylovsolve.py</code>. * [x] We have <code>qutip.rand_herm</code> for a random hamiltonian. --> **Changed**; * [x] Isn't <code>h_sho</code> equivalent to <code>U=qutip.rand_unitary_haar(dim) \ return U* (qutip.num(dim)+0.5)*U.dag()</code> ? --> **We can test it with that one**.; * [x] Clean imports on <code>test_krylovsolve</code>; <code>qeye</code> imported twice, <code>run_module_suite</code> never used, etc.; * [x] Header no longer used. --> **Removed.**; * [x] Why is <code>os.environ['QUTIP_GRAPHICS'] = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:830,efficient,efficiently,830,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['efficient'],['efficiently']
Energy Efficiency,"+1. This looks like a good PR to me. Just a quick note: We have had some side-effect issues when changing how isherm and other cached attributes are handled in the past, in particular with respect to performance. I used to monitor the performance over time with the continous-benchmarking suite in one of the respositories in the project, and that was sometimes useful to find unexpected performance hits. . Hopefully this PR will only improve performance, but it could still be worthwhile to check that for example the unit test suite does not take longer time on this branch than on master.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/359#issuecomment-130549106:223,monitor,monitor,223,https://qutip.org,https://github.com/qutip/qutip/pull/359#issuecomment-130549106,1,['monitor'],['monitor']
Energy Efficiency,"--. Just in the interest of completeness, let me also just bring up some of the sweeping changes we'll bringing in in QuTiP 5.0 as well, which massively overhaul how `Qobj` is constructed, and how its data is stored. These aren't _directly_ applicable to the current discussion, but they're worth keeping in mind since they're a huge overhaul of how things will be handled, and may have some implications for how implementors of this interface might behave. The new `Qobj` will no longer have the same `fast_csr_matrix` type as its `data` attribute, but instead will have an extensible data type. The two that will be distributed with the library will be `Dense` and `CSR` (which simply do what they say on the tin), and all linear algebra operations between multiple `Qobj` are handled by a custom multiple-dispatch system that allows additional specialisations to be added in a similar way to Julia. Say you want to define `matmul` between `Dense` on the left and `CSR` on the right to produce a `CSR` output (a specialisation that we likely won't ship with because it's unlikely to be efficient). You'd write your function; ```python; def matmul_dense_csr_csr(left, right):; ...; return out; ```; and then because unlike Julia it's not built-in, you just manually add it to the dispatch table for `matmul`:; ```python; qutip.data.matmul.add_specialisations(matmul_dense_csr_csr, (Dense, CSR), CSR); ```; QuTiP then knows about it, so it'll get used when appropriate. You can also add entirely new types to the dispatch table by adding them to the ""cast"" table `qutip.data.to`, giving at least one method to convert the new type into an already-known one, and at least one method to convert an already-known type into the new type. QuTiP will then be able to use the entirely new type as `Qobj.data` for every single operation within the library (though it won't be super efficient until you add the linear algebra specialisations you use most). This actually goes a bit beyond what Julia does (at ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:5103,efficient,efficient,5103,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['efficient'],['efficient']
Energy Efficiency,"0: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7f98cc476def are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p: dd dd dd dd dd dd dd dd ... 00 00 00 00 00 00 00 00. Enable tracemalloc to get the memory block allocation traceback. Fatal Python error: bad trailing pad byte; Python runtime state: finalizing (tstate=0x7f98c9d018e0). Current thread 0x0000000109fe85c0 (most recent call first):; <no Python frame>; Abort trap: 6; ```. So these both use `scipy.linalg.eig`, which is suspicious. ## Valgrind checks. To see if I could track it down, I had a go with valgrind. This isn't guaranteed to find everything, because I'm not using a debug build of Python, and Python also typically optimises small allocations by using a custom allocator into some pre-allocated space it manages itself - invalid writes that still fall within this may not get detected by valgrind. Here is the output of `valgrind` running on the `kraus.py` file I wrote in the previous section: [kraus_valgrind.txt](https://github.com/qutip/qutip/files/6370180/kraus_valgrind.txt) (note I filtered out like 30,000 errors that stem from Python's internal memory management - they're nothing to worry about, they're just what happens when you have your own allocator). The important part is. ```; ==54133== Invalid write of size 8; ==54133== at 0x10AFAFA8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54133== by 0xFFFFFFFF: ???; ==54133== by 0x1162E4DEF: ???; ==54133== by 0x1162E3A5F: ???; ==54133== by 0x10550EB3F: ???; ==54133== by 0x3FEFFFFFFFFFFFFF: ???; ```. Obviously I don't have the debugging symbols for MKL, so it's pretty hard to say where exactly it's coming from, but it is at least clearly inside that l",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:5206,allocate,allocated,5206,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['allocate'],['allocated']
Energy Efficiency,"2dd4680 and b6dcc28 fix the occasional segfaults I was getting, I believe. The error in `reshape_csr` was probably the randomly appearing one - I assume that for it to cause a segfault, either the output CSR needed to have been allocated on the edge of allocated memory (and then I probably would have seen it in the stack trace with `faulthandler`), or it needed to be called on a sufficiently small matrix that `mem.PyMem_Malloc` allocated into Python stack memory such that the next byte after `out.row_index` pointed into freed Python memory, causing a checksum error on the next `PyMem_Malloc` that hit it, or `PyMem_Free` on a previously created object. I was able to track down where these were coming from by judicious use of `gcc -fsanitize`, although had we been using Cython's `typedmemoryview`, setting `boundscheck=True` would also have caught it. Likewise, the error in `permute.dimensions_csr` would have been caught by setting `cdivision=False`, but I just didn't think to try that. It's probably not worth swapping to memory views just because of this, though - I was able to find it easily enough with `AddressSanitizer`, and memory views have a very non-trivial overhead on initialisation for our use case.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332#issuecomment-668847474:228,allocate,allocated,228,https://qutip.org,https://github.com/qutip/qutip/pull/1332#issuecomment-668847474,3,['allocate'],['allocated']
Energy Efficiency,"3) # Initial point normalized; > r2 = np.array([1, 0, 0]) # Final point; > t = np.linspace(0,1,100) # Parametrization; > ; > # All the points in this line are contained in the plane defined by r1 and r2.; > line = r1[:, np.newaxis]*t + r2[:, np.newaxis]*(1-t) ; > ; > # This will normalize all the points in the line such that they now have length 1 with respect to the center of the sphere. ; > # Since the points are still contained in the plane defined by r1 and r2, this will be the arc you are looking for.; > arc = line/np.linalg.norm(line, axis=0); > ; > b.add_points([arc[0,:], arc[1,:], arc[2,:]], meth='l'); > b.render(); > ```; > ; > I agree that this is not straightforward and hence QuTiP will benefit from having the method `add_arc`. I would however suggest changing the implementation using an algorithm based on the code I propose in this comment, as it requires far less lines of code and hence it is easier to both understand how it is implemented and to maintain it.; > ; > Regarding to `add_line` I would vote to not include it as a method here. Instead, I would provide an explicit example in the documentation showing how to draw lines with `add_points` to make it more discoverable. I believe that not being able to change the line style easily is a problem that this PR should not tackle. I think it would be great if in the future `add_points` and `add_states` could accept a kwarg that is directly passed to `matplotlib`. This would facilitate drawing with arbitrary styles. Thanks, @AGaliciaMartinez. Also, this is a wonderful suggestion, and it reduces the number of lines of codes by a lot. The only issue that arises is when the points are diagonally opposite but that can be fixed. ; So, is it okay if I take your code above, modify it for the general scenario, make changes to the `add_arc`, and push it again? I'm sorry I haven't contributed before and hence, don't know what is right or what counts as plagiarism. Please suggest @AGaliciaMartinez @hodgestar @BoxiLi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-937556421:2218,reduce,reduces,2218,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-937556421,1,['reduce'],['reduces']
Energy Efficiency,"5, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278052 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: Steady state: Driven cavity - power-gmres solver; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_steadystate.py"", line 490, in test_driven_cavity_power_gmres; use_precond=1); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\steadystate.py"", line 306, in steadystate; return _steadystate_power(A, ss_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\steadystate.py"", line 938, in _steadystate_power; check)); Exception: power-gmres failed to find solution in 1000 iterations. ----------------------------------------------------------------------; Ran 564 tests in 898.617s. FAILED (SKIP=9, errors=57)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:29671,power,power-gmres,29671,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,2,['power'],['power-gmres']
Energy Efficiency,"79 errors and spaces around kwarg equals, were not shown as problematic using PyCharm's PEP8 linter with default inspection profile - can you provide steps to reproduce? However, I think that some bits that PEP8 classifies as problematic shouldn't be changed for notational consistency, such as H = hamiltonian, and my usage of T and W in the code and the notebook to denote number of time bins and waveguides. > Moving `__all__` to after import statements. I declared `__all__` in its current location because almost universally, all (heh) top-level qutip modules declare it before imports. (I actually checked about a dozen of these and can't find any instance of it being after imports.) I think this might be worth changing to comply with PEP8, but I think it should be done after the module is added in a separate commit where all occurrences of this are changed across QuTiP. > Shortening argument / function names. I'll respond to each proposed change individually, but in general I disagree with most of these proposed changes since I think they reduce conceptual clarity. (For example, `temporal_basis_vector` returns a specific vector in the temporal basis; I would expect a function named `temporal_basis` to return an enumeration of all basis vectors.) However, I will try to think of shorter names which don't reduce clarity and will make changes if I come up with any. > Moving temporal_scattered_state, scattering_probability, and temporal_basis_vector into a new class. I think this is the only proposed change worth significant amounts of discussion, and it's actually something I had considered before. I'm conflicted about whether this change would be good or not, and I would value input from everyone involved in this review process (@sahmed95 , @kafischer, @nonhermitian, @ajgpitch). I've outlined my thoughts on the pros and cons of this change below. **Pros:**; - Consolidating these functions to class methods would be convenient in terms of reducing verbosity, since you woul",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384821368:1756,reduce,reduce,1756,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384821368,1,['reduce'],['reduce']
Energy Efficiency,"; > > > warnings.warn(msg); > > > ok; > > > Superoperator: Converting superoperator to Choi matrix and back. ... ok; > > > Superoperator: Test that to_super(q) returns q if q is already a ... ok; > > > Superoperator: Checks that the trace of matrices returned by to_choi ... ok; > > > Superoperator: Checks that iscp, istp and iscptp work in a few different ... ok; > > > Superoperator: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj addition. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 139, in test_QobjAddition; assert_equal(q4.type, ischeck(q4)); NameError: global name 'ischeck' is not defined. # . ## FAIL: Qobj power. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(_self.arg); File ""/usr/local/lib/python2.7/di",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:11578,energy,energy,11578,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['energy'],['energy']
Energy Efficiency,"; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class Processor and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > qutip.qip.noise to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (qutip.qip.circuit). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; > Expected outcomes; >; > - More devices defined in the qutip.qip.device module. At the moment,; > we have two models: spin chain and cavity QED. We would like to include; > some other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in qutip.qip.device and; > qutip.qip.compiler; > - Refactoring the circuit compiler to allow simple pulse scheduling,; > e.g. Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:1871,schedul,schedule,1871,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['schedul'],['schedule']
Energy Efficiency,"> ; > ; > Different platforms have some subtle differences in how multiprocessing works: On linux, processes ""fork"". My basic understanding is that sub-processes are created as copies of the parent process, thus inheriting their entire state (global variables/functions). Windows, and [macOS with Python >= 3.8](https://twitter.com/raymondh/status/1180209729609420800) uses ""spawn"". There, I believe subprocesses start from blank slate, and relevant global state is injected via IPC. Sadly, limitations of the pickle protocol can cause ""spawn""-based multiprocessing to have problems.; > ; > Jupyter notebooks are affected by this: you cannot use multiprocessing-map using functions defined within the notebook.; > ; > Within qutip, this definitely affects the `parallel_map` function: It currently will cause freezes on Windows (See https://qucontrol.github.io/krotov/v1.0.0/notebooks/08_example_ensemble.html). With Python 3.8, macOS is also affected by this. See [qutip/qutip-notebooks#100](https://github.com/qutip/qutip-notebooks/issues/100); > ; > One possible workaround is to use a third-party replacement for multiprocessing. An work-in-progress implementation of this is in #1092, using [loky](https://loky.readthedocs.io).; > ; > In #1197, we also identified a freeze in `mcsolve` when running tests on macOS/Python 3.8. This is suspected to be an issue with spawn-based multiprocessing, although we haven't been able to determine this with complete confidence.; > ; > If the freeze is indeed caused by spawn-multiprocessing, the problem _should_ also show up on Windows. Is anyone running Windows able to reproduce this?. Windows doesn't have 'fork' at all, if we want to make parallel_map work under windows, we have to find ways to 'spawn' efficiently.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1202#issuecomment-683628416:1753,efficient,efficiently,1753,https://qutip.org,https://github.com/qutip/qutip/issues/1202#issuecomment-683628416,1,['efficient'],['efficiently']
Energy Efficiency,"> > Thanks, @AGaliciaMartinez. Also, this is a wonderful suggestion, and it reduces the number of lines of codes by a lot. The only issue that arises is when the points are diagonally opposite but that can be fixed.; > ; > Good point! I did not consider that initially. For this case, since it is not possible to define a single arc but rather there are infinite possibilities, I would suggest to simply raise an exception. What do you think @gaurav-iiser ?. Yes, I think raising an exception is a good idea. > ; > > So, is it okay if I take your code above, modify it for the general scenario, make changes to the add_arc, and push it again?; > ; > I think there is an option somewhere to make someone a coauthor of the code, but do not worry about that, it is not necessary here. You can either push the changes to this pull request or, since this will require significant changes to the code, you could create a new one. I personally prefer creating a new PR since it leaves a cleaner commit history, but both are fine. Thanks again for your advice. :); I will probably create a new PR in a day or two by making respective changes to `add_arc`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-937583899:76,reduce,reduces,76,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-937583899,1,['reduce'],['reduces']
Energy Efficiency,"> Assuming Simon's point isn't just a complete answer to your question: in the general case, this is an impossible question to answer - it touches on many parts of numerical integration, such as tolerance limits and adaptive step-size methods. When you're dealing with completely arbitrary time-dependence, there's not really any one-size-fits-all approach that'll work (despite how RK45 is often taught as a magic bullet in physics courses).; > ; > Here, you will likely find that your RK45 results depend strongly on how many intermediate timesteps you use, whereas QuTiP's results will be (marginally) more stable. This is because QuTiP will internally subdivide the timesteps more to achieve internal precision goals, but then only returns the results at the time points you ask for. You can increase the maximum number of allowed subdivisions by increasing the `nsteps` parameter in a `qutip.Options` object, and with the `options` keyword argument. I addressed Simon's question. Also, I tried different solver options in mesolve including solver type, nsteps, relative and absolute tolerence, etc ... Also for RK45 I tried to change the parameters in order to see if the solutions coincide. They didn't. I don't know if there exists an analytically solvable problem in which both Hamiltonian and dissipation operators are time dependent, but if there is such a problem, then I can use it as a benchmark in order to compare QuTiP and RK45.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986665248:216,adapt,adaptive,216,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986665248,1,['adapt'],['adaptive']
Energy Efficiency,"> However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion. It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format?; > ; > In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. I guess this was mostly because I wasn't explicitly calling steadystate with sparse=False so it was getting converted back to CSR anyway, and slowing things down. Largely I see similar performance between CSR and dense (using sparse=False), unless I use very small systems (16x16 Liouvillians), though this seemed a bit scipy/method dependent. I guess as you said this also raises the question about whether stuff like eigenstates and steadystate() should default to using methods based on the data layer of the object, instead of kwargs? My feeling is not, since eigenstates+sparse can be bad and steadystate+largesystem+dense could be bad, so its worth having some default conversion cost in place. But I still like the idea of what gets returned to the user following default_dtype. but maybe we can see if this turns out to be an issue that people have in using data layers, could just be me!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192:574,allocate,allocated,574,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192,1,['allocate'],['allocated']
Energy Efficiency,"> If it's a known issue, let's leave it for when we switch CI to GitHub Actions (assuming that's the choice we end up making). It's very very difficult to tell, because Travis seem to be aggressively winding down the processing power available to us on Macs - I can't tell if there's a problem in this code, if Travis are over-stuffing their Xcode 12 machines with too many VMs, or even if it's some weird emulation (I think Azure _emulates_ PPC architectures if you ask for them!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1465#issuecomment-801795088:228,power,power,228,https://qutip.org,https://github.com/qutip/qutip/pull/1465#issuecomment-801795088,1,['power'],['power']
Energy Efficiency,"> Looking quickly, the sampling seems too low for the frequency.; > You measure each ~3e-8, but the frequency is ~5e9.; > You will probably get better result with `times=np.linspace(0, 0.00001, 30000)`. This actually was the issue. Turns out scanning over 1GHz range was too much, so I needed to sample more. I reduced to scanning over 1KHz and I could properly plot without increasing the number of sampled points. Thanks so much for your help",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1596#issuecomment-878364619:311,reduce,reduced,311,https://qutip.org,https://github.com/qutip/qutip/issues/1596#issuecomment-878364619,1,['reduce'],['reduced']
Energy Efficiency,"> Mostly I want to know whether I should have been able to do this with `mutually_broadcastable_shapes`. Yes, you should use [`mutually_broadcastable_shapes(signature=)`](https://hypothesis.readthedocs.io/en/latest/numpy.html#hypothesis.extra.numpy.mutually_broadcastable_shapes) for that. The signature syntax is a little different, since Numpy does it with strings, but we already support named dimensions, constant-size dimensions, and optional dims. Should be a bit more efficient too. > I also wouldn't mind a quick check of `qobj_shared_shapes`. Is this a good thing to be doing with shared strategies?. It does technically work? But in such a situation I'd probably just use `st.data()` and draw in the body of the test; see `hypothesis write numpy.matmul` for an example. If you expected to use it in many tests maybe a custom strategy, but for just `test_data_matmul_operator` that doesn't seem worth it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957#issuecomment-1207464240:475,efficient,efficient,475,https://qutip.org,https://github.com/qutip/qutip/pull/1957#issuecomment-1207464240,1,['efficient'],['efficient']
Energy Efficiency,"> Seems to me that the whole thing should first decide the kind of gate, then loop over only the necessary qubits - that'd be both more efficient and easier to read. I feel the same. Indeed it is just something I encountered when writing the doc. I guess this structure to make use of similarity among those gates. Many have one control and one target. Those gates work well. SWAP just happens to not be one of this... Also, ISWAP doesn't work very well if it acts on qubits not next to each other. The gates need to be classified better. Maybe completely rewrite it at some point.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1447#issuecomment-781976727:136,efficient,efficient,136,https://qutip.org,https://github.com/qutip/qutip/pull/1447#issuecomment-781976727,1,['efficient'],['efficient']
Energy Efficiency,"> Thanks @ajgpitch for the comments. I agree that there should be the specific functions but I think for simplifying user experience there should be a simple overarching function. E.g, when you plot Wigner functions in QuTiP you can send it kets or dms or operators and it just works.; > ; > Internally, it still calls specific functions to compute the Wigner function based on efficient methods specific to the inputs. But it is just a small convenience to the average user to have a simpler clean overarching function to do the same. I have now made it so that the measure and measurement_statistics function precisely do this. Should we keep either mode (one mode is of the ""observable"" type and the other with the ""projective"" type) also as a api-exposed function? If that is not the case, what would be the correct way to write doc_strings ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643730389:378,efficient,efficient,378,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643730389,1,['efficient'],['efficient']
Energy Efficiency,"> Thanks, @AGaliciaMartinez. Also, this is a wonderful suggestion, and it reduces the number of lines of codes by a lot. The only issue that arises is when the points are diagonally opposite but that can be fixed. Good point! I did not consider that initially. For this case, since it is not possible to define a single arc but rather there are infinite possibilities, I would suggest to simply raise an exception. What do you think @gaurav-iiser ?. > So, is it okay if I take your code above, modify it for the general scenario, make changes to the add_arc, and push it again? . I think there is an option somewhere to make someone a coauthor of the code, but do not worry about that, it is not necessary here. You can either push the changes to this pull request or, since this will require significant changes to the code, you could create a new one. I personally prefer creating a new PR since it leaves a cleaner commit history, but both are fine.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-937579234:74,reduce,reduces,74,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-937579234,1,['reduce'],['reduces']
Energy Efficiency,"> The `c_ops` argument to `mesolve` expects operators in Lindblad form, but you can also construct your own Liouvillian and pass that as the first argument. To construct the non-Lindblad components you want, you may find `spre` and `spost` useful, which respectively turn an operator into a superoperator which multiplies from the left and from the right. There is also `sprepost`, which is a more efficient way to combine `spre` and `spost`. To construct the operators (if you only work on qubits - if not, you need to do it manually as @quantshah showed), you can use `expand_operator`. So you can do something like; > ; > ```python; > L = qutip.liouvillian(H); > n_qubits = 5; > for n in range(n_qubits - 1):; > c_op_left = qutip.expand_operator(qutip.sigmap(), n_qubits, n); > c_op_right = qutip.expand_operator(qutip.sigmam(), n_qubits, n + 1); > L += qutip.sprepost(c_op_left, c_op_right); > both = -0.5 * c_op_right * c_op_left; > L += qutip.spre(both); > L += qutip.spost(both); > res = qutip.mesolve(L, rho0, times, e_ops=...); > ```; > ; > I've not seen equations in that form myself, but that's how you could go about if that's what you've got. Thank you very very much for your help. As you know, the Liuvillian contains a term like [H,rho]. So if i put my operators in Hamiltonian, as you say, Does not contribute to the commutator?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1435#issuecomment-774022545:398,efficient,efficient,398,https://qutip.org,https://github.com/qutip/qutip/issues/1435#issuecomment-774022545,1,['efficient'],['efficient']
Energy Efficiency,"> This is not a bug in QuTiP _per se_, but an artifact of the Fock space cutoff. In a numerical calculation, we can only use finite matrices, but the ladder operators can not be represented with finite matrices (Stone-von Neumann theorem).; > ; > You can try printing `a * a.dag() - a.dag() * a` for different values of `dim`. You will find that it gives the expected result (identity matrix) except in the very bottom right matrix element. That matrix element however deviates a lot, and the more you increase `dims` the more it will deviate. So if you compute the trace distance of `a * a.dag()` and `a.dag() * a + 1`, you will get a large number instead of zero. In your example, the basic problem is the same.; > ; > Usually this is not a problem because we assume the cutoff is larger than the number of excitations in any state we are looking at. In other words, in vector form, the bottom-most entries of any state are very (exponentially) small, and the deviations in the operators in those entries then don't play a role. However, when calculating a norm (such as the trace distance), entries corresponding to low-energy states or to high-energy states contribute equally, and we can get nonsensical results.; > ; > You could try projecting out high-energy states before calculating the norm:; > ; > ```; > dim = 25; > dim2 = 10; > ; > a = destroy(dim); > D = (a.dag() - a).expm(); > a_displaced = D.dag() * a * D; > ; > proj = sum(projection(dim, i, i) for i in range(dim2)); > diff = a_displaced - (a + 1); > print((proj * diff * proj).norm('tr')); > # 1.3039375636172088e-07; > ```. Hi Paul, thank you very much for your response! It’s really helpful :) From what I tried so far, and if I understand you correctly, as I will eventually calculate their expectation values with respect to some vectors, that abnormal large number at the corner of their matrix would be suppressed and the final results would be the same, or?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2495#issuecomment-2245390570:1123,energy,energy,1123,https://qutip.org,https://github.com/qutip/qutip/issues/2495#issuecomment-2245390570,3,['energy'],['energy']
Energy Efficiency,"> Yes, you should use [`mutually_broadcastable_shapes(signature=)`](https://hypothesis.readthedocs.io/en/latest/numpy.html#hypothesis.extra.numpy.mutually_broadcastable_shapes) for that. The signature syntax is a little different, since Numpy does it with strings, but we already support named dimensions, constant-size dimensions, and optional dims. Should be a bit more efficient too. I tried with `signature=` quite a bit but `(m, k), (k, n)` always produced thing like `(1, 1, 1), (1, 1)` despite setting `max_dims` and `min_dims` to various things.; ; > It does technically work? But in such a situation I'd probably just use `st.data()` and draw in the body of the test; see `hypothesis write numpy.matmul` for an example. If you expected to use it in many tests maybe a custom strategy, but for just `test_data_matmul_operator` that doesn't seem worth it. I expected there to be other use cases. I started with the output of `write numpy.matmul` but ended up playing around with my own strategy (see difficulties with mutually_broadcastable_shapes` above) and liking the idea of not have to unpack `a` and `b` inside the test, and of being able to supply the shapes for `a` and `b` to other strategies (e.g. maybe we will have a strategy for Qobj and QobjEvo objects and want to try various combinations of multiplying things together)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957#issuecomment-1207475361:372,efficient,efficient,372,https://qutip.org,https://github.com/qutip/qutip/pull/1957#issuecomment-1207475361,1,['efficient'],['efficient']
Energy Efficiency,"> also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; > Expected outcomes; >; > - More devices defined in the qutip.qip.device module. At the moment,; > we have two models: spin chain and cavity QED. We would like to include; > some other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in qutip.qip.device and; > qutip.qip.compiler; > - Refactoring the circuit compiler to allow simple pulse scheduling,; > e.g. Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packages; > or commonly used language e.g. through quantum assembly language (qasm); >; > ------------------------------; >; > Also, the last outcomes have some overlap with the last project. Although; > I also find this circuit importation very important, I guess two projects; > should not have overlap if they are both selected.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1184?email_source=notifications&email_token=ADPF67A5MSYZVSDKCZD73LTREGE2LA5CNFSM4KZUPCQ2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPQGYLA>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADPF67E",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:2631,schedul,scheduling,2631,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['schedul'],['scheduling']
Energy Efficiency,"> thanks for the comment, I didn't know about `qutip.propagator`; > ; > > Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple; > ; > cool, can i learn more about this from you?. Sorry, I don't have much experience in it myself - you'll be reading about the methods in papers/lecture note by people smarter than me. We have some tutorial notebooks about optimal control using the QuTiP optimal control package here: http://qutip.org/tutorials.html#optimal-control, which you may be able to adapt to your use case. I believe there are components in there that you can subclass so that the optimiser is RL-based rather than using standard BFGS or something else.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258:570,adapt,adapt,570,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258,1,['adapt'],['adapt']
Energy Efficiency,"@BitesPotatoBacks . > I doesn't seem like powermetrics returns any maximum frequencies, though. It only returns _current_ frequencies. Maybe the maximum frequency can be parsed from the last entry in lines like this one:. ```; P0-Cluster HW active residency: 2.92% (600 MHz: 94% 828 MHz: .04% 1056 MHz: 1.7% 1296 MHz: .24% 1524 MHz: 1.0% 1752 MHz: .32% 1980 MHz: .24% 2208 MHz: .47% 2448 MHz: .35% 2676 MHz: .35% 2904 MHz: .24% 3036 MHz: .11% 3132 MHz: .07% 3168 MHz: .07% 3228 MHz: .81%); ```. but like I said it is cumbersome, plus there is the `sudo` issue...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1754#issuecomment-1009287596:42,power,powermetrics,42,https://qutip.org,https://github.com/qutip/qutip/pull/1754#issuecomment-1009287596,1,['power'],['powermetrics']
Energy Efficiency,"@Chengie6 Thank you for the bug report. Could you post a small snippet of code that demonstrates the issue? Then I can attempt to reproduce the issue. The likely cause is that since operators may now be either sparse or dense, it is possible to accidentally use the kind that is much slower for a particular operation. However, we would like to reduce how often this happens so whatever the cause, we are keen to fix things so that they just work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2115#issuecomment-1463686048:345,reduce,reduce,345,https://qutip.org,https://github.com/qutip/qutip/issues/2115#issuecomment-1463686048,1,['reduce'],['reduce']
Energy Efficiency,"@Ericgig . - docstrings should be fixed. - coveraged increased with . `e_ops = [callable, qobj]; e_ops = [callable, callable]; e_ops = [qobj, qobj]`. - added a more efficient and clear pytest parametrization; - fixed the repeated sparse test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1082333157:165,efficient,efficient,165,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1082333157,1,['efficient'],['efficient']
Energy Efficiency,"@Ericgig @hodgestar, Eric and Simon: unless there's anything else that springs to mind, I'll pencil in the 4.6 release for later this week/weekend after this is merged to `master`?. Simon in particular: there's a couple of accessible places in `correlation` that make deprecated `ode2es` calls. That particular functionality of the solvers isn't being removed in 5.0 (though maybe it should - `mesolve` is faster and better in almost every way), so they aren't themselves deprecated. Right now they don't trigger `DeprecationWarning` popups if a user calls them (since the stacklevel is 2). Despite that, should I _also_ wrap them in a warning filter to catch it? I don't really know best practices here. I kept postponing doing the 4.6 release because I'd keep thinking of little bits and bobs that I thought should go in, but at this point Boxi's (@BoxiLi) new pulse scheduler stuff is in and ready, the packaging and distribution methods are updated, and we'll have issued deprecation warnings for the things that we know are being removed. Anything beyond this can start to form the basis of a 4.7 release in a few months' time, with the Floquet changes (they might be waiting on me at the moment) and possibly some new stuff out of GSoC. Possibly that'll also include some deprecation warnings and other bits and bobs to do with packages getting moved out of qutip/qutip, and the changes to how the data-layer is going to work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1480#issuecomment-814937234:869,schedul,scheduler,869,https://qutip.org,https://github.com/qutip/qutip/pull/1480#issuecomment-814937234,1,['schedul'],['scheduler']
Energy Efficiency,"@Ericgig I am now trying to use pytest's parametrize feature which allows us to parametrize input to test functions variable by variable. I was able to successfully rewrite some tests which use `yield`, but this one (`test_trunc_neg`) in particular throws an error. Could you please run the following self sufficient snippet locally and inform me if there is anything wrong with the values in this example?? Thanks for the tip about yield, that might indeed be what is wrong. ```; from qutip import *; import numpy as np; import pytest; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; run_module_suite). @pytest.mark.parametrize(""method"", ['clip', 'sgs']); @pytest.mark.parametrize(""qobj"", [rand_dm(5), Qobj(np.diag([1.1, -0.1])),; rand_unitary(3)*Qobj(np.diag([1.1, 0, -0.1]))*rand_unitary(3).dag()]); @pytest.mark.parametrize(""expected"", [None, Qobj(np.diag([1.0, 0.0])),; rand_unitary(3)*Qobj(np.diag([1.0, 0.0, 0.0]))*rand_unitary(3).dag()]); def test_trunc_neg(method, qobj, expected):; ""Checks trunc_neg in several different cases.""; pos_qobj = qobj.trunc_neg(method=method); assert(all([energy > -1e-8 for energy in pos_qobj.eigenenergies()])); assert_almost_equal(pos_qobj.tr(), 1); if expected is not None:; assert_almost_equal(pos_qobj.data.todense(), expected.data.todense()); ```. Also, I would like to rewrite all the tests which use `yield` in this format, would that be okay?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-571008013:1118,energy,energy,1118,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-571008013,2,['energy'],['energy']
Energy Efficiency,"@Ericgig I've kept the WIP label, but this is ready for a first review. I think I'm made the HEOM look as much like the base solver as I can without having to modify the base solver a bit. Perhaps we can meet up tomorrow on Discord to discuss options. I'm also happy to merge this as is and adapt the solver more in another PR (assuming tests still pass and documentation still builds with my latest commits).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1101587887:291,adapt,adapt,291,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1101587887,1,['adapt'],['adapt']
Energy Efficiency,"@IIAOPSW : Thanks for the suggestion. I will try that. Nevertheless, it would be nice to have it in the official version of qutip. You can use the following definition from Maslov, Dmitri, and Yunseong Nam. ""Use of global interactions in efficient quantum circuit constructions."" New Journal of Physics (2017). ![image](https://user-images.githubusercontent.com/4205827/36633263-2beff2a2-1960-11e8-83cd-2df60fb8e4da.png). If I may, I would also suggest to add single qubit arbitrary rotation. ![image](https://user-images.githubusercontent.com/4205827/36633286-9c05c65c-1960-11e8-91f7-32c0990eee81.png). In that case we will be able to write complete physical representation of any quantum circuit for trapped ion quantum computer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/819#issuecomment-368246095:238,efficient,efficient,238,https://qutip.org,https://github.com/qutip/qutip/issues/819#issuecomment-368246095,1,['efficient'],['efficient']
Energy Efficiency,"@OliverLunt, ; The problem lies in the adaptative step of the ode solver. Since nothing happen at first, the step become so long that it jump over the change in the on_off signal...; You can do:; ```; opt = qt.Options(); opt.max_step = 0.5; output = mesolve(H, psi0, tlist, c_ops=c_ops, e_ops=e_ops, options=opt); ```; To limit the step size and it will work as expected. . I am not sure why sesolve (used when no c_ops are given) have smaller step size. It seems to be something in the scipy solver.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/898#issuecomment-430306233:39,adapt,adaptative,39,https://qutip.org,https://github.com/qutip/qutip/issues/898#issuecomment-430306233,1,['adapt'],['adaptative']
Energy Efficiency,"@alipedram01 It looks like we've understood the cause of the issue -- i.e. your RK45 solver just doesn't converge for this problem. That's probably not unexpected -- I see to remember reading on Wikipedia that the implicit Runga-Kutta methods have small regions of convergence relative to explicit or adaptive methods. Closing this for now, but thank you for taking a look and please feel free to continue the discussion if needed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-1005605164:301,adapt,adaptive,301,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-1005605164,1,['adapt'],['adaptive']
Energy Efficiency,@cgranade did you test your PR #362 against dick-t example? If so what were the results?; It would seem that dick-t is comparing a method that works with states in general (mixed or pure) with one that assumes states are pure. Do we have some method in qutip that gives the fidelity when states are assumed pure? It would seem more efficient (and less numerical error risk) to compute the fidelity without the sqrtm (as dick-t did in the comparison) if we knew the states were pure.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/361#issuecomment-134927300:332,efficient,efficient,332,https://qutip.org,https://github.com/qutip/qutip/issues/361#issuecomment-134927300,1,['efficient'],['efficient']
Energy Efficiency,"@goerz I think one of Mølmer's papers (maybe the one I have pointed out) addressed the equivalence of the two methods. Sorry, I don't have a definite paper to point out at this moment. I was actually organizing the Julia community to work on this direction (see [JuliaQuantum](http://juliaquantum.github.io)) from scratch, and hence didn't follow up the efforts in the measurement simulation within QuTiP. . When I was writing my paper on continuous measurement ([PRA, 93.023817](http://journals.aps.org/pra/abstract/10.1103/PhysRevA.93.023817)), I came up the argument that the former method may be more appropriate for measurement models. This is because measurements have to happen in evenly spaced time steps determined by the detector's integrating time, so it is intuitive to use a random number to judge if on each measurement step the quantum jump will happen. There may be a way to use the second method to implement the same measurement simulation model, but I didn't think too much on it. In reality, I developed another more efficient method without actually evolving the density operator in my paper to simulate continuous measurement using a set of stochastic equations for squeezing thousands of atoms' state which has not been included in QuTiP yet. Sorry I don't have more useful reference that explains this point in more details at this moment. Good luck!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-220744432:1037,efficient,efficient,1037,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-220744432,1,['efficient'],['efficient']
Energy Efficiency,"@hodgestar I have implemented most of your suggested changes. I reduced the largest spin used in the spin Wigner tests, but left the spin Q function as-is because it was fast enough. I've removed the normalization from the functions themselves and described the normalization criterion in the docstrings.; The spin Wigner is now real.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-917315644:64,reduce,reduced,64,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-917315644,1,['reduce'],['reduced']
Energy Efficiency,"@hodgestar, ; I adapted the `MultiTrajResult` to the new `Result` format, and I have some changes to the `Result` class that I want to do:; - I changed the `Result.__init__` to move setting the `e_ops` in `_post_init`: `MultiTrajResult` can't use them and needed to remove the related state processors.; - `add` was overwritten, but we could use it if we add a `_early_finish_check`: a processor that return the estimated quantity of work remaining. Parallel map will stop computing trajectories when it get under 0. I think we could have it in `Result`: it could be interesting to have with `mesolve` with the options to stop when the steady state is reached, etc. Then if times when added in a state processor, I could use `add` without overloading. Are you Ok with me going for it or do you prefer to keep `Result` as is?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1889#issuecomment-1156962173:16,adapt,adapted,16,https://qutip.org,https://github.com/qutip/qutip/pull/1889#issuecomment-1156962173,1,['adapt'],['adapted']
Energy Efficiency,"@hodgestar. yes my script returns the _current_ cpu frequency....I currently am unaware how to get the maximum on Apple silicon. I'll do some research and test some code to see what I can figure out. @matteoacrossi. > A command that somehow gives info on cpu frequencies is sudo /usr/bin/powermetrics -s cpu_power -n 1 ... Powermetrics does seem to be doing some weird trickery. I'm currently trying to reverse engineer it...I've found a bit of interesting things in the assembly but I'm still not fully sure how it's pulling what it does. > But it requires sudo and is a bit messy to parse the max frequencies. I'm pretty sure powermetrics is accessing some private APIs, which is why it requires `sudo`, which is quite unfortunate. I doesn't seem like powermetrics returns any maximum frequencies, though. It only returns _current_ frequencies.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1754#issuecomment-1009099408:288,power,powermetrics,288,https://qutip.org,https://github.com/qutip/qutip/pull/1754#issuecomment-1009099408,4,"['Power', 'power']","['Powermetrics', 'powermetrics']"
Energy Efficiency,"@jakelishman Sorry -- I forgot we added the TODO. I was speaking from a bigger picture perspective -- having CodeClimate fail all the time means that we might not notice if more failures are added accidentally, which would reduce the value of running CodeClimate in CI.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506#issuecomment-826663656:223,reduce,reduce,223,https://qutip.org,https://github.com/qutip/qutip/pull/1506#issuecomment-826663656,1,['reduce'],['reduce']
Energy Efficiency,"@jakelishman this is great, also thanks @dweigand for this PR. I tried out the function and it is very fast and could be great for specific use cases. My idea was a bit more simple - precomputing the `coherent_dm` operators (using qutip.coherent_dm) and using the `expect` function. But that performs worse that the original `qfunc` as well as this implementation of course. So this is great. I would be happy to merge this but have one thought:. This new implementation is sacrificing the ease-of-understanding of how Q-functions are computed with a very efficient and fast, but complicated class-based implementation. This means that users who want to look under the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_d",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:556,efficient,efficient,556,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['efficient'],['efficient']
Energy Efficiency,"@maij Thanks! The test code looks like a good start. Could you add it to `qutip/tests/test_wigner.py`?. Other tests we could add:. * We could write a more general test that compares the output of spin_q_function to a simpler implementation based on the definition -- something like:; ```python; state = qutip.spin_coherent(spin, theta_prime, phi_prime); direct_q = (state.dag() * qutip.ket2dm(psi) * state).norm() / np.pi; ```; Note: I named the angles `theta_prime` and `phi_prime` to emphasize that we can apply this test to cases where the angles for the state psi and the ones passed to spin_q_function are different. * We should also add a test for passing in arrays of theta and phi (i.e. were we really get out a mesh grid for Q values) since that was the primary use case for which `spin_q_function` was defined. Ideas for future PRs:. * It would be nice to also add tests for `spin_wigner` (I am suspicious of it now because of the problems with spin_q_function). Thank you for looking at these and taking charge of this bit of QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-893326408:1015,charge,charge,1015,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-893326408,1,['charge'],['charge']
Energy Efficiency,@matteoacrossi Oh! I didn't even notice that last entry. :laughing: Good eye. I'll continue my reverse engineering to see if I can find where powermetrics is pulling those values from.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1754#issuecomment-1009327416:142,power,powermetrics,142,https://qutip.org,https://github.com/qutip/qutip/pull/1754#issuecomment-1009327416,1,['power'],['powermetrics']
Energy Efficiency,"@nathanshammah ; I expect it to be easy to use as an integrator:; ` _evolve_krylov_tlist` is essentially the `run`, `time_evolution` is `integrate`.; The interface just need to be adapted.; It would work well with `sesolve` and `mcsolve`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1644#issuecomment-908484939:180,adapt,adapted,180,https://qutip.org,https://github.com/qutip/qutip/pull/1644#issuecomment-908484939,1,['adapt'],['adapted']
Energy Efficiency,"@nonhermitian Hi Paul, I don't think it's super important to necessarily have the most efficient algorithm for allowing non-linear tlists, but I do think it's good to have to avoid tripping up more advanced users. Could you merge this solution and we can always re-visit later?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-245201155:87,efficient,efficient,87,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-245201155,1,['efficient'],['efficient']
Energy Efficiency,"@nonhermitian could you please have a look at _pseudo_inverse_sparse when you have time, and see if you can think of any better way of doing this, from your experience with optimizing the steadystate solver? Would an iterative method make sense here? I basically run into memory problems quite quickly when using splu (which seems to be the most efficient method by far for this particular problem, according to my tests).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/272#issuecomment-67125235:346,efficient,efficient,346,https://qutip.org,https://github.com/qutip/qutip/pull/272#issuecomment-67125235,1,['efficient'],['efficient']
Energy Efficiency,"A simple example of a operator that is traceless and not a dm is the charge operator, e.g. `charge(4)`. How would we know a difference in this case without further info?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/474#issuecomment-219623485:69,charge,charge,69,https://qutip.org,https://github.com/qutip/qutip/issues/474#issuecomment-219623485,2,['charge'],['charge']
Energy Efficiency,"About only storing kets, but not averaging into a dm, we can't do that yet, but it's easy to implement so if useful, we can add the option. The error is not in the `_to_dm`, but in the addition, which is done in the sparse CSR format. No dense conversion are made. But the `proj` operator does not have a tidyup step, so any non-zero are kept, however small they are. This is also an easy fix that could help. The `MemoryError` is also not that helpful, we should improve the error message to tell what size of arrays are allocated. Thank you for reporting these and trying the alpha version. I see you don't have cython, do you have a way to compile the source yourself? ; Once fixed, I would be curious to have you try the development version without waiting for a release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2299#issuecomment-1904338523:522,allocate,allocated,522,https://qutip.org,https://github.com/qutip/qutip/issues/2299#issuecomment-1904338523,1,['allocate'],['allocated']
Energy Efficiency,"Ah, nice catch thanks, and thanks for the super clear repro. We're overhauling the solvers for QuTiP 5.0, which will include a lot more rigorous input checking on entry, but also it uses far safer low-level datatypes that would catch this shape mismatch in the C layer (even though the `dims` _should_ have been checked by `mesolve`). I'll check the other solvers and patch in a sanity test - probably after these lines: https://github.com/qutip/qutip/blob/d5e305513d9186df74beee4fd8da680e89f29d15/qutip/mesolve.py#L259-L261; we can just insert a test; ```python; if rho0.dims[0] != rho0.dims[1]:; raise ValueError(; ""input state must be a pure state or square density matrix""; ); ```. There may also be other segfaults lurking if you use a Python function to generate a time-dependent `Qobj` value in the Liouvillian or the expectation operators, but right now you're unlikely to use that form (because it's slow as anything). The bug slips through because we unsafely pass off a matrix down to C code (where we currently don't have sanity checks) without first verifying that it is a valid shape in Python space - the C code is working as designed, so there shouldn't be problems with correct inputs. Removing `c_ops` causes `mesolve` to delegate to `sesolve` which presumably is better at its type-checking, and I expect that a small dimension size working is likely just `malloc` having slack in the memory it gives us for small sizes or small requests being allocated into the special pre-allocated store.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169:1463,allocate,allocated,1463,https://qutip.org,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169,2,['allocate'],['allocated']
Energy Efficiency,"All the same, I'd very much like to further reduce warnings. I've literally had Firefox crash trying to load the entire Travis logs.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/433#issuecomment-185792948:44,reduce,reduce,44,https://qutip.org,https://github.com/qutip/qutip/issues/433#issuecomment-185792948,1,['reduce'],['reduce']
Energy Efficiency,"Also, there are two codeclimate issues. One on a blank space and one about a long line. Could you please take a look and change them to get the green on this. :-)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1045#issuecomment-511490539:144,green,green,144,https://qutip.org,https://github.com/qutip/qutip/pull/1045#issuecomment-511490539,1,['green'],['green']
Energy Efficiency,"As a note: `qutip.vector_to_operator` is part of the implementation of superoperators. The ""vector"" in the name refers to the idea that a superoperator in a Hilbert space can be represented as a vector on a different Hilbert space which comprises of two copies of the original space tensor-producted together. It doesn't refer to a ""vector"" in the sense of a ""ket"". The difference was introduced in c62a8e9, which is the amalgamated commit encompassing all the discussion in #1098. `qutip.vector_to_operator` expects to receive an argument whose `dims` parameter is of the form `[operator_dims , [1]]`, where `operator_dims` is the dimensions of a regular operator (for example `[[2], [2]]` for a single qubit Hilbert space, or `[[2, 2], [2, 2]]` for an operator acting on a Hilbert space with two qubits in. The exception occurs because `vector_to_operator` attempts to access the two elements of the `operator_dims` array to discover the output shape. Since there is an insufficient number of lists for it to access, it just ends up reading the dimensions of the first two elements of the tensor product, and `np.prod` (used to calculate the output shape) doesn't complain when passed scalars. Notice that running the code with `nb_qubits = 1` will cause an `IndexError`, as there are insufficient tensor-product elements. The immediate solution for your code is to use `qutip.ket2dm`, which converts a ket into a density matrix. I think this is what you're actually trying to do. For a fix, there are two points:; 1. The fix is simply to test that the input dimensions are of the correct form, rather than assuming; this will allow us to provide a more descriptive error.; 2. Perhaps worth considering is moving the super-operator functionality in a sub-module `qutip.super`, and not importing all the functions into the main namespace. This might help reduce user confusion going forwards, especially since most people aren't using the superoperator formalism.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011:1856,reduce,reduce,1856,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011,1,['reduce'],['reduce']
Energy Efficiency,"As it is quite a short (but efficient!) change, we can keep it both in qutip and in qutip-qip. Also, I remember this function is also used in the control module (also for testing I think). So we need it in qutip anyway. Eventually, I think it is best to keep these commonly used function in `qutip.operator` and import it to qutip-qip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1688#issuecomment-942198552:28,efficient,efficient,28,https://qutip.org,https://github.com/qutip/qutip/pull/1688#issuecomment-942198552,1,['efficient'],['efficient']
Energy Efficiency,"Assuming Simon's point isn't just a complete answer to your question: in the general case, this is an impossible question to answer - it touches on many parts of numerical integration, such as tolerance limits and adaptive step-size methods. When you're dealing with completely arbitrary time-dependence, there's not really any one-size-fits-all approach that'll work (despite how RK45 is often taught as a magic bullet in physics courses). Here, you will likely find that your RK45 results depend strongly on how many intermediate timesteps you use, whereas QuTiP's results will be (marginally) more stable. This is because QuTiP will internally subdivide the timesteps more to achieve internal precision goals, but then only returns the results at the time points you ask for. You can increase the maximum number of allowed subdivisions by increasing the `nsteps` parameter in a `qutip.Options` object, and with the `options` keyword argument.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986661136:214,adapt,adaptive,214,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986661136,1,['adapt'],['adaptive']
Energy Efficiency,Build succeeded. Should we merge this? Or should I extend this to perhaps do more builds on 3.8 and reduce 3.7 to just the basic build? Should 3.6 be dropped or kept?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1170#issuecomment-581046004:100,reduce,reduce,100,https://qutip.org,https://github.com/qutip/qutip/pull/1170#issuecomment-581046004,1,['reduce'],['reduce']
Energy Efficiency,"Bumping an old topic with two major new considerations. Number one: Travis is [changing its pricing model for open source software](https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing), and generally it seems like [it's going to become unfeasible for us](https://www.jeffgeerling.com/blog/2020/travis-cis-new-pricing-plan-threw-wrench-my-open-source-works). Over the past month or so, queue times on Linux builds have increased massively (from near-instant to up to 90 minutes), and the number of allowed concurrent builds has already limited the amount of testing we are able to do - we don't even have Windows tests because we couldn't fit them in. In around March 2021 we expect the old travis-ci.org that QuTiP is grandfathered onto to shut down completely, forcing us onto the new model on travis-ci.com. Number two: in November 2019, GitHub released their own CI, GitHub Actions. This is (as best as I can tell) completely free for open source, public repositories like QuTiP, and offers access to a large number of Linux, macOS and Windows containers. This completely free period of GitHub Actions might not last forever (you can imagine maybe they're just trying to drive adoption before increasing the cost), but especially with the new time pressure from Travis, this seems like the right choice for now. Our testing set up is fairly straightforward, so migrating to a new CI shouldn't be too difficult. I just wrote (#1429) a GitHub Actions workflow to build and distribute binary releases of QuTiP on Linux/Mac/Windows, and I'm pretty convinced by the power of their CI. It's got an awful lot of flexibility with a _lot_ of customisation so its initial learning curve is a little steep (or maybe I'm just not used to CI tools), but I'm impressed by what's available. I believe it comes with a degree of reusability as well; I think we can define a test as a single ""action"", and then reuse that in the PR-push workflow and the make-distribution workflow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959#issuecomment-770455542:1572,power,power,1572,https://qutip.org,https://github.com/qutip/qutip/issues/959#issuecomment-770455542,1,['power'],['power']
Energy Efficiency,CodeClimate reported a bunch of places where line lengths were increased to exceed 79 characters. Could we reduce those down again if possible? Maybe do this at the end so that it's not too hard to review the reformatting.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1925#issuecomment-1152508955:107,reduce,reduce,107,https://qutip.org,https://github.com/qutip/qutip/pull/1925#issuecomment-1152508955,1,['reduce'],['reduce']
Energy Efficiency,"Concerning the failed test: I suspect this is because the test temporarily uses almost 1Gb of memory.; Can you confirm this as a potential issue? In that case, I could change the test to reduce memory usage.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-561549347:187,reduce,reduce,187,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-561549347,1,['reduce'],['reduce']
Energy Efficiency,"Cool, that sounds good - I'm sure its much more efficient than what i had proposed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/517#issuecomment-242632529:48,efficient,efficient,48,https://qutip.org,https://github.com/qutip/qutip/pull/517#issuecomment-242632529,1,['efficient'],['efficient']
Energy Efficiency,"Despite discovering the awesome reduce() function in python, generalizing this stuff to arbitrary baths is kinda tedious, and not very practical, so we decided not to do it (I tried for 2 baths a while back and it runs out of memory pretty quickly, as you might expect!). In any case, the hierarchy can do the same thing much more efficiently. Anubhav is working hard on some example notebooks for this RC stuff",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-103778948:32,reduce,reduce,32,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-103778948,2,"['efficient', 'reduce']","['efficiently', 'reduce']"
Energy Efficiency,"Following the closing of #766 and for anyone having issues with the current Floquet codes (which has some bugs, there are open issues about it), here is a gist containing a working version of the Floquet code in qutip, to study Hamiltonian and steady-state behavior of any time-periodic system: https://gist.github.com/Phyks/20bfb5107cbc595f9e54ff92fccd6fb5. Main differences with qutip code is:; * It reworks a bit the code from qutip, to make it more efficient.; * It fixes some known bugs.; * It introduces a function to get the steady-state density matrix without having to do a full time evolution (following a method presented in Grifoni 98). Hope this helps,",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/772#issuecomment-392690645:453,efficient,efficient,453,https://qutip.org,https://github.com/qutip/qutip/issues/772#issuecomment-392690645,1,['efficient'],['efficient']
Energy Efficiency,"Following up, even if an option for drawing matrix elements with a border is added, the thresholded version of Hinton diagrams is much more common, especially in the ML community where it first originated. For example:. - https://matplotlib.org/stable/gallery/specialty_plots/hinton_demo.html; - https://www.mathworks.com/help/deeplearning/ref/plotwb.html (NB: not accessible for red–green color blindness, but thresholded nonetheless); - https://tex.stackexchange.com/questions/155291/generate-a-hinton-diagram-using-pgfplots; - https://mathematica.stackexchange.com/questions/194212/how-to-make-hinton-diagrams. Given those examples, I definitely agree that a border option could be really helpful, but it'd still be nice to be able to generate more traditional Hinton diagrams as well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1595#issuecomment-922114051:384,green,green,384,https://qutip.org,https://github.com/qutip/qutip/issues/1595#issuecomment-922114051,1,['green'],['green']
Energy Efficiency,"For a constant Liouvillian, it seems very reasonable that an eigenseries-based solution would be faster? In the end, that massively reduces the number of matrix-matrix operations to be done. I'm not at all familiar with Matlab, but I wouldn't be shocked if that's what your toolbox there is doing too. Looking at your code, you seem to have 16 cores available. QuTiP at present can't make too much use of multiple cores in `mesolve` or `essolve` (though it can in `correlation`), whereas Matlab may well have some fancy parallelised methods for solving eigenvector problems (if doing that method) - we rely on Scipy for our eigenvector calculations, and I'm pretty sure there's no parallelisation in there. There could also be large timing disparities if you're not being linked to good BLAS/LAPACK/ARPACK implementations in Python space. I'm sure that any distributed version of Matlab will come stuffed with lovely libraries compiled specifically for your processor's instruction set, but Scipy may only be able to find Netlib BLAS or (even worse) Accelerate - if so, they probably won't be making good use of vectorised instructions in your processor, and may not be well-optimised for memory access.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1591#issuecomment-871031472:132,reduce,reduces,132,https://qutip.org,https://github.com/qutip/qutip/issues/1591#issuecomment-871031472,1,['reduce'],['reduces']
Energy Efficiency,"For most of the operations, e.g. +, -, *, numpy will be much faster than fast_csr when the matrix is dense. There is probably a good case for having an option to convert to full to make these operators when one knows that the data will be dense. However it would reduce efficiency to check density each time. Will take some thinking about to make it in a tidy way though. A more general discussion of a dense qobj is in #437",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/818#issuecomment-366222605:263,reduce,reduce,263,https://qutip.org,https://github.com/qutip/qutip/issues/818#issuecomment-366222605,1,['reduce'],['reduce']
Energy Efficiency,"From [this page](https://wiki.freepascal.org/Accessing_macOS_System_Information) it seems that it is mostly used for timing services, so perhaps it is not so relevant here:. ```; hw.tbfrequency - This gives the time base frequency used by the OS and is the basis of all timing services.; In general is is better to use mach's or higher level timing services, but this value; is needed to convert the PPC Time Base registers to real time.; ```. @hodgestar can I ask what the `cpu_freq` is used for in qutip? If it is just for reporting purposes, wouldn't it make sense to put a None or ""N/A""? . A command that somehow gives info on cpu frequencies is `sudo /usr/bin/powermetrics -s cpu_power -n 1`, which gives something like this:. ```; Machine model: MacBookPro18,3; OS version: 21C52; Boot arguments: ; Boot time: Sun Jan 9 11:12:24 2022. *** Sampled system activity (Mon Jan 10 16:05:18 2022 +0200) (5003.97ms elapsed) ***. **** Processor usage ****. E-Cluster Power: 39 mW; E-Cluster HW active frequency: 1027 MHz; E-Cluster HW active residency: 20.50% (600 MHz: 0% 972 MHz: 92% 1332 MHz: 3.1% 1704 MHz: 1.5% 2064 MHz: 3.1%); E-Cluster idle residency: 79.50%; E-Cluster instructions retired: 1.39695e+09; E-Cluster instructions per clock: 0.908186; CPU 0 frequency: 1115 MHz; CPU 0 idle residency: 86.38%; CPU 0 active residency: 13.62% (600 MHz: 0% 972 MHz: 11% 1332 MHz: .78% 1704 MHz: .59% 2064 MHz: 1.1%); CPU 1 frequency: 1103 MHz; CPU 1 idle residency: 86.02%; CPU 1 active residency: 13.98% (600 MHz: 0% 972 MHz: 12% 1332 MHz: .81% 1704 MHz: .77% 2064 MHz: .89%). P0-Cluster Power: 68 mW; P0-Cluster HW active frequency: 680 MHz; P0-Cluster HW active residency: 2.92% (600 MHz: 94% 828 MHz: .04% 1056 MHz: 1.7% 1296 MHz: .24% 1524 MHz: 1.0% 1752 MHz: .32% 1980 MHz: .24% 2208 MHz: .47% 2448 MHz: .35% 2676 MHz: .35% 2904 MHz: .24% 3036 MHz: .11% 3132 MHz: .07% 3168 MHz: .07% 3228 MHz: .81%); P0-Cluster idle residency: 97.08%; P0-Cluster instructions retired: 1.06724e+09; P0-Cluster instr",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1754#issuecomment-1008912273:665,power,powermetrics,665,https://qutip.org,https://github.com/qutip/qutip/pull/1754#issuecomment-1008912273,1,['power'],['powermetrics']
Energy Efficiency,"Further notes: in numpy 1.20 defining `__array__` breaks `np.asarray`, except in the case where the user explicitly defines `np.asarray([qutip.qeye(2)], dtype=object)`. This is actually a very very common function in numpy operations; things like `np.shape` or `np.all` implicitly call `np.asarray` _without_ a `dtype`, which will result in a `TypeError`:; ```python; >>> import qutip; >>> import numpy as np; >>> np.all([qutip.qeye(2)]); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<__array_function__ internals>"", line 5, in all; File ""/Users/jake/.anaconda3/anaconda3/envs/qutip-dev/lib/python3.9/site-packages/numpy/core/fromnumeric.py"", line 2411, in all; return _wrapreduction(a, np.logical_and, 'all', axis, None, out, keepdims=keepdims); File ""/Users/jake/.anaconda3/anaconda3/envs/qutip-dev/lib/python3.9/site-packages/numpy/core/fromnumeric.py"", line 87, in _wrapreduction; return ufunc.reduce(obj, axis, dtype, out, **passkwargs); TypeError: must be real number, not Qobj; ```. I think we may be able to get around this with a suitable definition of `Qobj.__array_function__`, though I am a little worried that we'll keep turning up these knock-on effects of `Qobj.__array__`. One major problem is that I'm not sure how we'll define `__array_function__` to satisfy this case, without having to manually disable every single numpy function. We can't have `np.asarray()` not work on `Qobj` because that would break parity with `np.array(qobj)`, however we also can't implicitly convert ourselves to an array if we're in a nested sequence, because then `np.all([qobj])` will pretty much always be false; it will have implicitly become an element-wise operation, even though the user _probably_ meant to check if every object in the array was not the zero operator. This isn't just `np.all`, it's also `np.shape`, `np.any`, and several more that make up the non-ufunc interface of numpy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-778512258:932,reduce,reduce,932,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-778512258,1,['reduce'],['reduce']
Energy Efficiency,"Good catch, this seems to be a problem with how the arguments are structured in the function signature for brme_solve. For the tensor formation, . `def bloch_redfield_tensor(H, a_ops, spectra_cb=None, c_ops=[], use_secular=True, sec_cutoff=0.1):`. In this case, the spectra_cb is given the [ohmic_spectrum] argument, which is the correct argument. However, for the brme_solve, the signature is . ```; def brmesolve(H, psi0, tlist, a_ops=[], e_ops=[], c_ops=[],. args={}, use_secular=True, sec_cutoff = 0.1,; tol=qset.atol,; spectra_cb=None, options=None,; progress_bar=None, _safe_mode=True, verbose=False):; ```. If you run the same code with . `output = brmesolve(H, psi0, tlist, [sigmax()], e_ops, spectra_cb = [ohmic_spectrum]); `. the code will run perfectly. However, this is an issue we should fix since spectra_cb is a depreciated argument and technically the c_ops list should accommodate arbitrary noise power spectrum functions that spectra_cb handled before. The error seems to be originating because ohmic_spectrum is of type function but the safety checker expects either a Qobj or a tuple. Also, once we fix the documentation/code on how to use c_ops, we also need to add depreciate warning to bloch_redfield_tensor to maintain uniformity.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223#issuecomment-605703993:914,power,power,914,https://qutip.org,https://github.com/qutip/qutip/issues/1223#issuecomment-605703993,1,['power'],['power']
Energy Efficiency,"Having looked at the description of the function, that is it specifically refers to density matrices, then I would say that it does what it promises to do, and that the changes mean that it does it much better. So (now) personally I don't think we need to adapt for a pure vs pure state in this method.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/361#issuecomment-134933420:256,adapt,adapt,256,https://qutip.org,https://github.com/qutip/qutip/issues/361#issuecomment-134933420,1,['adapt'],['adapt']
Energy Efficiency,"Hello Harsh,. Thank for your interest in qutip. The most efficient way for us to interact with code is through Github.; Please attempt a draft PR for this. There are many test functions in our; project that you can use as a template. Assuming that you are interested in GSoC, when assessing candidates, an; ability to work independently is a key criteria. All the best with it, we look forward to reviewing your PR. Alex. On Tue, 21 Mar 2023, 18:06 Harsh Khilawala, ***@***.***>; wrote:. > @Ericgig <https://github.com/Ericgig> Thanks for getting back to me. I; > will refer to pytest tutorials on web but I found some code lines like; > following:; >; > @pytest.mark.parametrize; > @check_pngs_equal; > @pytest.fixture; > @pytest.mark.repeat(10)...; >; > Can you please let me know when and why were these used? Is there a; > resource also for this one?; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/2127#issuecomment-1478364599>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACGFP3MUPPBWDTOQGGBNOTLW5HU2ZANCNFSM6AAAAAAV7J6OKU>; > .; > You are receiving this because you are subscribed to this thread.Message; > ID: ***@***.***>; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127#issuecomment-1478682804:57,efficient,efficient,57,https://qutip.org,https://github.com/qutip/qutip/pull/2127#issuecomment-1478682804,1,['efficient'],['efficient']
Energy Efficiency,"Hello Nathan, in a couple of hours we will perform the final minor docstring improvements, since we reduced the Cognitive Complexity. Tomorrow is finally ready!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-992488933:100,reduce,reduced,100,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-992488933,1,['reduce'],['reduced']
Energy Efficiency,"Hello! As @jakelishman described, you can help debug this issue by trying:. ```python; from qutip.cy.openmp.parfuncs import spmv_csr_openmp; ```. and reading the exception produced. I suspect that the `qutip.cy.openmp.*` packages will simply not have been compiled -- they're only built by QuTiP when ""--with-openmp"" is passed to `setup.py` and I think `conda install ... qutip` will not do that even when OpenMP is already installed. To correct this you will need to install QuTiP from source and pass `--with-openmp` yourself as described in https://qutip.org/docs/latest/installation.html?highlight=openmp#direct-setuptools-source-builds. We probably could make ""openmpi"" and ""no-openmpi"" builds for conda-forge by adapting the pattern in https://conda-forge.org/docs/maintainer/knowledge_base.html#openmp but that would require some work (and be a feature enhancement :).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1378#issuecomment-916822166:718,adapt,adapting,718,https://qutip.org,https://github.com/qutip/qutip/issues/1378#issuecomment-916822166,1,['adapt'],['adapting']
Energy Efficiency,"Hey Eric,. I've been working on improving the underlying structure of FLiMESolve and; making it more efficient. I haven't done another review request yet because; I want to try to address as many things as I can at once. I've been delayed; heavily by a system I'm trying to solve for my paper about this solver, on; which Simon has offered to help such that I'll hopefully be moving forward; again soon. Additionally, there are some changes I want to make that I'm; not sure how to do which I'm going to try to address with Simon when we are; able to meet next. Most of those are in regards to structural things, e.g.; how to filter input ""args"" arguments to pull out the frequency of the; Hamiltonian in the same manner as other solvers in QuTiP are able to filter; arguments. I've been trying to avoid submitting review requests/questions; in the PR comments too much so as not to be a bother. I have definitely not; abandoned this PR, and plan on seeing it through fully, although I; apologize for my relative lack of communication the last few weeks. Thanks!. On Mon, Aug 21, 2023, 11:29 AM Eric Giguère ***@***.***>; wrote:. > @magnamancer <https://github.com/magnamancer> are you waiting for review,; > still working on the PR or abandoned it?; >; > There are still issues I raised here and in magnamancer#4; > <https://github.com/magnamancer/qutip/pull/4>, that you have not been; > addressed and I am waiting for them before the next round of review.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/2186#issuecomment-1686550860>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AV5WL5GN3R6GPKYKYNOWSGDXWN5GDANCNFSM6AAAAAAZWI6GRQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1686607935:101,efficient,efficient,101,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1686607935,1,['efficient'],['efficient']
Energy Efficiency,"Hi @DnMGalan totally forgot this was up!. I think the main code has been iterated on a few times, but can still be improved. Maybe (1) was done already (I think... ). However (2) and (3) are still open. On (2) as a complementary thing, I recently tried the method in appendix A of this paper for calculating finite time moments and cumulants and stuff https://arxiv.org/abs/1012.0750 It works very nicely. . Interestingly, we can also do it a different way with autograd in Jax, taking derivatives of the whole generating function equation of motion directly. also seemed to work pretty well (seemed a little more efficient). I have some basic notebooks of both of these things, can share with you, and we can think about making it generic and robust. (3) I am a little rusty on, we can discuss about it next week. (christian flindt is also visiting, so we can grill him about it!)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/442#issuecomment-2005373020:614,efficient,efficient,614,https://qutip.org,https://github.com/qutip/qutip/issues/442#issuecomment-2005373020,1,['efficient'],['efficient']
Energy Efficiency,"Hi @Ericgig, @jakelishman,. Thanks very much for the very helpful replies! I will try these suggestions in my application Eric!. Jake, when you say the following:; > Oh of course, I had `mcsolve` in mind as to why that couldn't be done (and in that case, my interpolation wouldn't work either because of the separation of the decay channels)... Is it that, this:; ```; def L(t, args):; H = H(t, ...); c_op = C(H, t, ...); return qutip.liouvillian(H, [c_op]). mcsolve(L, ..., c_ops=[]); ```. won't work due to `_funcrhs` treating `h_func` as a Hamiltonian always? If this is the only factor (as far as I can see), then I think I can further hack this to make callbacks work for me locally. I'm not yet sure if the numpy arrays method will work here but this is what I will strive for. Some details of my plans: I am doing dynamics simulations of quantum annealing processes. We use a certain number of qubits (between 4 and 8) biased and coupled in certain ways to produce examples of 'difficult' problems for adiabatic quantum computation, where the instantaneous energy gaps can have very small minima during evolution. The resulting ODEs appear to be 'stiff' and long evolution times are required to observe high probabilities of being in the ground state. The combination of these things appears to make solving for long evolution times very time consuming. I observed a massive speedup using `mcsolve` however. What I wish to do is include various decay channels, which in the physical systems we use, we understand to be in the 'weak coupling limit' defined by T. Albash here:; https://arxiv.org/pdf/1503.08767.pdf. Another note: A number of colleagues have found most useful the RK45 method implemented in what I understand to be 'new' ode solver scipy code `scipy.integrate.solve_ivp`. I notice that the 'dopri5' option for `scipy.integrate.ode` is likely the same thing. This is something I will play with also.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1260#issuecomment-630067552:1064,energy,energy,1064,https://qutip.org,https://github.com/qutip/qutip/issues/1260#issuecomment-630067552,1,['energy'],['energy']
Energy Efficiency,"Hi @MrRobot2211,. indeed that project is still open, see https://github.com/qutip/qutip/wiki/Google-Summer-of-Code-2021#1-error-mitigation-in-qutip. However, compared to last year, the workload is reduced because this year GSoC reduces the required working time (now 175h in total). If you are interested in the part that is removed (e.g. concrete physical model), you are still welcome to draft a proposal according to your interest. It does not have to follow exactly the ideas proposed on the wiki page as long as it is a self-contained project and related to QuTiP. @nathanshammah in case he has comments.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1457#issuecomment-792274551:197,reduce,reduced,197,https://qutip.org,https://github.com/qutip/qutip/issues/1457#issuecomment-792274551,2,['reduce'],"['reduced', 'reduces']"
Energy Efficiency,"Hi guys, thanks for looking at this! I actually made a fork to implement this: https://github.com/lfry512/qutip. In my fork I added some extra type checks and some extra functions in _LiouvillianFromFunc that support a c_ops callback. The way this was done just requires the user to use qt.lindblad_dissipator where appropriate. The use case that isn't implemented is H in list format and c_ops as a callback. @Ericgig thanks for the neat suggestion! This is very pertinent as I then moved on to try the same functionality with mcsolve, which doesn't support a callback for H and c_ops in the master branch. Yesterday I got callback functionality working for H in mcsolve but haven't committed it yet. However it's about 20 times slower than using the equivalent list format in my tests. @jakelishman it sounds like you worked on mcsolve. If you are interested I would love to discuss with you how to make the H callback method for mcsolve more efficient. I'm also trying to figure out if it is possible to make a cython callback builder class that can be used for building the Lindblad operators from instantaneous eigenstates of the Hamiltonian more efficiently. I am not sure how my changes fit in to the overhaul of the solver system, but in mcsolve I did somewhat make use of the SolverSystem instance that is built in place.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1260#issuecomment-629164724:945,efficient,efficient,945,https://qutip.org,https://github.com/qutip/qutip/issues/1260#issuecomment-629164724,2,['efficient'],"['efficient', 'efficiently']"
Energy Efficiency,"Hi the `steadystate` has some problem with optional keyword and scipy/mkl solver.; To have the notebook work, if you have mkl installed, you can change the cell calling `steadystate` to:; ```; solvers = ['direct','eigen','power','iterative-gmres','iterative-bicgstab']; mech_dms = []. for ss in solvers:; if ss in ['iterative-gmres','iterative-bicgstab']:; rho_ss, info = steadystate(H, c_ops, method=ss, use_precond=True, ; use_rcm=True, tol=1e-15, return_info=True); else:; rho_ss, info = steadystate(H, c_ops, method=ss,; use_rcm=False, return_info=True); print(ss,'solution time =',info['solution_time']); rho_mech = ptrace(rho_ss, 1); mech_dms.append(rho_mech); mech_dms = np.asarray(mech_dms); ```; Without mkl installed, skip the 'direct' method. Help Wanted: Some rework of the keywords_args treatment, testing solver/method mixes ('direct' + 'scipy' should work but don't) updating notebooks and docstring, etc. would be appreciated.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1017#issuecomment-501454602:222,power,power,222,https://qutip.org,https://github.com/qutip/qutip/issues/1017#issuecomment-501454602,1,['power'],['power']
Energy Efficiency,"Hi! I am also having trouble at this step. Any (temporary) solution for me?; ; def dot(ais, bis):; """"""; Dot product; """"""; return sum(ai*bi for ai, bi in zip(ais, bis)); fock_trunc = 20; n_modes = len(fs); a = qutip.destroy(fock_trunc); ad = a.dag(); n = qutip.num(fock_trunc); mode_fields = [tensor_out(a + ad, i) for i in range(n_modes)]; mode_ns = [tensor_out(n, i) for i in range(n_modes)]; linear_part = dot(fs, mode_ns). ---------------------------------------------------------------------------; OverflowError Traceback (most recent call last); Cell In[79], line 11; 9 ad = a.dag(); 10 n = qutip.num(fock_trunc); ---> 11 mode_fields = [tensor_out(a + ad, i) for i in range(n_modes)]; 12 mode_ns = [tensor_out(n, i) for i in range(n_modes)]; 13 linear_part = dot(fs, mode_ns). Cell In[79], line 11, in <listcomp>(.0); 9 ad = a.dag(); 10 n = qutip.num(fock_trunc); ---> 11 mode_fields = [tensor_out(a + ad, i) for i in range(n_modes)]; 12 mode_ns = [tensor_out(n, i) for i in range(n_modes)]; 13 linear_part = dot(fs, mode_ns). Cell In[15], line 5, in tensor_out(op, loc); 3 op_list = [qutip.qeye(fock_trunc) for i in range(n_modes)]; 4 op_list[loc] = op; ----> 5 return reduce(qutip.tensor, op_list). File ~\AppData\Local\anaconda3\envs\epr_analysis\Lib\site-packages\qutip\tensor.py:84, in tensor(*args); 82 out.dims = q.dims; 83 else:; ---> 84 out.data = zcsr_kron(out.data, q.data); 86 out.dims = [out.dims[0] + q.dims[0], out.dims[1] + q.dims[1]]; 88 out.isherm = out.isherm and q.isherm. File ~\AppData\Local\anaconda3\envs\epr_analysis\Lib\site-packages\qutip\cy\spmath.pyx:328, in qutip.cy.spmath.zcsr_kron(). File ~\AppData\Local\anaconda3\envs\epr_analysis\Lib\site-packages\qutip\cy\spmath.pyx:673, in qutip.cy.spmath._safe_multiply(). OverflowError: value too large",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/853#issuecomment-1783933236:1176,reduce,reduce,1176,https://qutip.org,https://github.com/qutip/qutip/issues/853#issuecomment-1783933236,1,['reduce'],['reduce']
Energy Efficiency,"Hi, @abhisekupadhyaya nice work! . Usually a high cognitive complexity indicates that the function is too long or too deep for understanding and maintenance, but sometimes it exaggerates a bit, so it's fine as long as everything is clear. To reduce the function length, for example, if the checking part and each gate parsing can be resued (e.g for QASM v2), they can be defined in a separate function. Another minor thing, what about leaving a short warning when ignoring the unsupported code?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1139#issuecomment-562831745:242,reduce,reduce,242,https://qutip.org,https://github.com/qutip/qutip/pull/1139#issuecomment-562831745,1,['reduce'],['reduce']
Energy Efficiency,"Hi, I have updated the interface to make it much much easier to use. And, I added the unit test and now the test will succeed. The test is the following: generate random Hamiltonians and run perturbation and see whether the energy levels match with the exact solutions. I have done all I want to do up to now. So, please review these codes again and consider merging them.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/282#issuecomment-109847098:224,energy,energy,224,https://qutip.org,https://github.com/qutip/qutip/pull/282#issuecomment-109847098,1,['energy'],['energy']
Energy Efficiency,"Hi, interesting, thank you for your detailed description!. > When the transformation is made for DrudeLorentzBath, the result generated differs from that for DrudeLorentzPadeBath (and it is not about the number of frequencies used). First of all, are you sure that either of `DrudeLorentzBath` and `DrudeLorentzPadeBath` give the right solution? Because the `ck_real` / `vk_real` are supposed to be the coefficients / exponents of the real part of the correlation function (and the others the imaginary part), and if you plug in imaginary parameters, then terms that previously were only in the real parts could pick up imaginary parts etc. Perhaps this kind of thing cancels out when you add the two unphysical D-L baths to get the shifted D-L bath?. Regarding your proposed solution -- I would say, in the case where `gamma` is not real, the spectral density is unphysical and there is no *a priori* correct way to handle this case. In other words, in a sense, the code before the change is wrong (or right) and the code after the change is just as wrong (or right). I therefore think it wouldn't hurt to implement this change so that your use case can be supported. However, I would want to be very sure that in the case where the parameters are all real, the results are not affected by the change. Is that so? Only asking because that is not clear to me at first glance. A more ""complete"" and probably more efficient solution would be to add a whole new `ShiftedDrudeLorentzBath`, and to put in analytically derived formulas for the Matsubara / Pade expansion coefficients. (As a first step, you could also calculate these coefficients manually and create a `BosonicBath` object from them directly.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2520#issuecomment-2323132801:1412,efficient,efficient,1412,https://qutip.org,https://github.com/qutip/qutip/issues/2520#issuecomment-2323132801,1,['efficient'],['efficient']
Energy Efficiency,"Hi,; There are many methods for the steadystate solver, some are faster, some are less stable. I would suggest trying other method until your find a good one for your problem.; Available method are: ; `'direct', 'eigen', 'iterative-gmres', 'iterative-lgmres', 'iterative-bicgstab', 'svd', 'power', 'power-gmres', 'power-lgmres', 'power-bicgstab'`. `'direct'` and `'power'` can use mkl as a solver, all can use scipy. You can also try to change some options such as the tolerance and max iteration number. ; The options for each solver are different depending on the solver and not all are documented. ; I list them here if you want to go deeper:. For scipy:; ```; 'sparse': True, ; 'use_rcm': False,; 'use_wbm': False, ; 'weight': None, ; 'use_precond': False,; 'all_states': False, ; 'M': None, ; 'x0': None, ; 'drop_tol': 1e-4,; 'fill_factor': 100, ; 'diag_pivot_thresh': None, ; 'maxiter': 1000,; 'tol': 1e-12, ; 'matol': 1e-15, ; 'mtol': None,; 'permc_spec': 'COLAMD', ; 'ILU_MILU': 'smilu_2',; 'restart': 20, ; 'return_info': False,; 'info': _empty_info_dict(),; 'verbose': False, ; 'solver': 'scipy'; ```. For mkl:; ```; 'max_iter_refine': 10, ; 'scaling_vectors': True, ; 'weighted_matching': True, ; 'return_info': False, ; 'info': _empty_info_dict(), ; 'verbose': False, ; 'solver': 'mkl', ; 'use_rcm': False, ; 'use_wbm': False, ; 'weight': None, ; 'tol': 1e-12, ; 'matol': 1e-15, ; 'mtol': None, ; 'maxiter': 1000; ```. Lastly, most steadystate's method have a logger if you activate debug in setting:; ```; import qutip.settings as settings; settings.debug = True; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1077#issuecomment-527620834:290,power,power,290,https://qutip.org,https://github.com/qutip/qutip/issues/1077#issuecomment-527620834,5,['power'],"['power', 'power-bicgstab', 'power-gmres', 'power-lgmres']"
Energy Efficiency,"Hi. I can only speak for myself, but personally this is not something that I'd be willing to work on, or recommend anyone to work on for that matter. That said, if you or someone else think it is important, work it out, and are willing to maintain it, we could of course consider including it in the qutip project (probably as an extension package or so). However, I think it would be better to spend time on improving qutip itself by identifying where qotoolbox is more efficient and do something about the corresponding code in qutip. What parts of qotoolbox are you interested in using from qutip and how much slower do you experience qutip to be compared to the qotoolbox in those areas?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/48#issuecomment-27611560:471,efficient,efficient,471,https://qutip.org,https://github.com/qutip/qutip/pull/48#issuecomment-27611560,1,['efficient'],['efficient']
Energy Efficiency,"I agree that is is getting a bit unwieldy with all the options to the steadystate function, many of which only have meaning for specific solvers. We should do something about that. I wouldn't favor getting rid of the steadystate function though.. It might break a lot of old code and I think it is nice to have a high-level API that is decoupled from the specific implementation (direct, interative, or something else). Currently steadystate is only dispatching to other functions, and I think that is how it is supposed to be. To solve the problem with diverging options requirements for different solvers I would suggest changing the function signature to. ```; def steadystate(A, c_ops=[], method='direct', **kwargs):; ...; if method == 'direct'; steadystate_direct(A, c_ops, **kwargs); ```. and defer all the specifics about kwargs to specific solvers (including docstrings). That would bring the default values of those options closer to where they are used and reduce duplication. It would also allow us more flexibility in maintaining a backwards compatible api, and future maintainability. It's fine with me to make _steadystate_direct and _steadystate_iterative publicly accessible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/108#issuecomment-41362284:967,reduce,reduce,967,https://qutip.org,https://github.com/qutip/qutip/issues/108#issuecomment-41362284,1,['reduce'],['reduce']
Energy Efficiency,I agree with @Ericgig on the possibility of having no template and adding the suggestions for tests in the template. . I understand now that the changelog in qutip/qutip was a bad idea for the reasons you mention.; I still think it would be nice to somehow automate the way the changelog is compiled (right now by whoever is in charge of the release). Is there a simple and smart way to do this? Otherwise we could just look up the changelog section in each PR as per this template.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1198#issuecomment-602676649:328,charge,charge,328,https://qutip.org,https://github.com/qutip/qutip/pull/1198#issuecomment-602676649,1,['charge'],['charge']
Energy Efficiency,"I always forget about `xrange` versus `range`, sorry about that. Anyway, I used generators as opposed to lists as I didn't need the additional structure of lists, and as the Python 3 style has been to express as much as possible in terms of generators. For example, `range`, `zip` and `map` are all generators now. In that spirit, by making `qubit_clifford_group` a generator, I don't assume that the user needs to remember the entire group, nor that the user wants to store the group in a list as opposed to a more specialized structure. This will be especially important, I think, should there be a need later to introduce a function that enumerates over multi-qubit Clifford groups. In that respect, the current choice is in anticipation of consistency with future features. As for the question of `reduce` versus a triply-nested `for` loop, my intent there was twofold: first, to reflect the mathematical notation more closely and second, to allow for possible generalization to generating other groups. In L758, `partial(reduce, mul)` is a used to express products over the tuples generated by taking Cartesian products over powers of _E_, _X_ and _S_. This approach should allow generalization such that similar groups can be written out in terms of this technique.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128375591:802,reduce,reduce,802,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128375591,3,"['power', 'reduce']","['powers', 'reduce']"
Energy Efficiency,"I am on the side on having 2 `default_dtype` options for the `Qobj` creation functions. I have some question as to how/where to make `default_dtype` more consistent. Applying the default at Qobj creation feels risky to me. In the solver it will end up converting the states before computing the expectation value. It could create strange interactions with operators and unitary transformations (`Qobj[Dense].dag() -> Qobj[CSR]`). `Qobj(scipy_csr)` could be converted to something else... However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion.; It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format? . In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. ps. Should `eigenstates` return the states in one operator instead of a list of kets? I guess the states were used to create the operators fed to `steadystate`, so operator output would be more practical.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1952655861:1056,allocate,allocated,1056,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1952655861,1,['allocate'],['allocated']
Energy Efficiency,"I did some tests and ; 1 - Cause by fortran zheer (lapack eigenvalue solver for complex hermitian matrices) (c's version Ok); 2 - It happen when installing the scipy stack with pip but not when installing it with conda.; 3 - It depend on the problem size, 64 seems particularly bad, usually it fails on the second call.; 4 - I only got it in zheevr which is only used in `brmesolve`. But Nathan got it in other tests which use scipy's `eigh`.; 4 - It happen in scipy in the fortan version of lapack:. ```; import numpy as np; from scipy.linalg import eigh; H = random_hermitian(64); eigh(H) # Work fine; eigh(np.asfortranarray(H)) # segfault after a few try, may need to change H; ```. Possible solutions (for zheevr):. - Installing scipy with conda, the easiest solution, but not in our control.; - Finding a way to link clapack from cython. Linking scipy's one would require good knowledge of scipy internals since only one cython interface is provided. Linking to another installation of lapack, but it would require the user to install lapack or install it with qutip. Both seems wrong to me.; - For mac user, call scipy's eigh from cython i zheevr, slower but better than risking segfault.; - Have the code directly in qutip. We can adapt it from OpenBlas: https://github.com/xianyi/OpenBLAS/blob/master/lapack-netlib/LAPACKE/src/lapacke_zheevr.c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628259492:1238,adapt,adapt,1238,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628259492,1,['adapt'],['adapt']
Energy Efficiency,"I do not think that much can be done for the mesolver. The update here ; just addresses the resetting of the ODE solver, which is not done in the ; mesolver. I still think that spawning ntraj processes is not a very ; efficient thing to do. So I am working on cleaning that up. However, ; you are correct, moving the ODE creation outside of the mc_alg routine ; does have little effect. > Robert Johansson mailto:notifications@github.com; > December 1, 2014 at 13:48; > ; > Nice speed up! Is there anything here that we could also benefit from ; > in mesolve? Or is it specific to mcsolve in that it mostly affect the ; > ODE restart?; > ; > I doubt that the initial setup of an ODE instance before spawning ; > processes would have any significant impact on the performance (note ; > that multiprocessing does not use threads, it uses processes, so there ; > is no sharing of ODE instances between processes). Creating the ODE ; > instance once in the parent processor, or N times in N processes in ; > parallel therefore should not make much difference, if any.; > ; > —; > Reply to this email directly or view it on GitHub ; > https://github.com/qutip/qutip/pull/264#issuecomment-65020496.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-65020643:218,efficient,efficient,218,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-65020643,1,['efficient'],['efficient']
Energy Efficiency,I guess the purpose is to reduce complexity and increase maintainability. I'm not sure how should I reduce this. Separate the input check and use another private method?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1028#issuecomment-505083482:26,reduce,reduce,26,https://qutip.org,https://github.com/qutip/qutip/pull/1028#issuecomment-505083482,2,['reduce'],['reduce']
Energy Efficiency,I have read a bit about the reasons for moving reduce. The main one seems to be that code using it can be unclear. And that in most cases a for loop can be used to achieve the same in a clearer way. I think that may be applicable here. I have spent a while looking at the line that uses it and I am still not sure what it is doing. I think sacrificing a little succinctness for clarity here may be beneficial.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128328061:47,reduce,reduce,47,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128328061,1,['reduce'],['reduce']
Energy Efficiency,"I made up a quick notebook and posted it as qutip/qutip-notebooks#20. In the meantime, I notice I forgot that Python 3 is missing `reduce()`, having moved it to `functools.reduce()`. Is it permissible to import `functools.reduce` conditioned on checking `sys.version_info` so that I can use `reduce`? Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128187262:131,reduce,reduce,131,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128187262,4,['reduce'],['reduce']
Energy Efficiency,"I might try and have a look tonight (UK time), if I have time - I've wanted to break up the large `propagator` monolith into smaller components for quite a while. ---. About numerical precision: if you want to try increasing the precision of the integrators, try passing `options=qutip.Options(nsteps=1_000_000, atol=1e-12, rtol=1e-10)` to `propagator`. `atol` and `rtol` are absolute and relative tolerances respectively, and `nsteps` is the number of subdivisions the integrator is _allowed_ to take (if it reaches its tolerance goals, it won't take all of them). You'll find that `atol` and `rtol` will have only a loose relation to the tolerance of your fidelity value, because there's a _lot_ of floating-point operations between those points in which the errors compound, and there's a hard limit on the tolerances the integrator can achieve, so you might not be able to get a perfect answer. The fidelity calculation involves finding the square root of a density operator, so that's another large possible source of error. About times: if you only care about the state at the last time, setting `tlist = np.linspace(0, x, 201)` is quite inefficient. Instead, set `tlist = [0, x]`, and then pass `options=qutip.Options(nsteps=<very very big integer>)`. It's more efficient because it doesn't need to achieve tolerance goals and construct/store `Qobj` instances at every intermediate timestep. Temporary workaround: this is _very_ temporary, and generally a bad idea in QuTiP, but you can ""flatten"" all your operators into a single space for now, while we implement a fix. To do that:; ```python; # initial setup; H = qutip.tensor(...); c_ops = [qutip.tensor(...)]. original_dimensions = H.dims.copy(); new_dimensions = list(H.shape). H.dims = new_dimensions; for c_op in c_ops:; c_op.dims = new_dimensions. outputs = qutip.propagator(H, times, c_ops=c_ops); for op in outputs:; # the ops are superoperators, so have expanded dimensions; op.dims = [original_dimensions, original_dimensions]; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1585#issuecomment-865903199:1591,efficient,efficient,1591,https://qutip.org,https://github.com/qutip/qutip/issues/1585#issuecomment-865903199,1,['efficient'],['efficient']
Energy Efficiency,"I noticed it because I have a code doing spinor lattice physics; the spinor piece is parameterized by the total angular momentum `F`. All of the operators are written as `tensor(spin_part, lattice_part)`. As part of a Brillouin zone unfolding code, I have reason to accumulate increasing powers of an operator in a loop, like. ```; original_state = tensor(basis(2*F+1, 0), basis(N, 0)); op = tensor(qeye(2*F+1), some_lattice_op); while True:; # ...; if occasionally_do_this:; op = base_op * op; transformed_state = op * original_state; ```. This code works fine, except for `F=0`. Since the `original_state` is a 1xN tensor state with `original_state.dims = [[1, N], [1, 1]]`, the `op * original_state` multiplication fails because `op = base_op * op` has deleted the `1` part of of `op`, leaving `op.dims = [[N],[N]]`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/222#issuecomment-53928646:288,power,powers,288,https://qutip.org,https://github.com/qutip/qutip/issues/222#issuecomment-53928646,1,['power'],['powers']
Energy Efficiency,"I report local tests failing on my MacOS 10.13.6 by running qutip.testing.run(). Tests fail for python 3.7 and 3.6 environments, if QuTiP 4.4. is installed in develop mode (openmp = True). ; Tests fail also for QuTiP 4.3.1 installed with conda. . ### py36; Broken test for python 3.6 with: (1) QuTiP 4.4-dev, with openmp =True and (2) conda install qutip, QuTiP 4.3.1: ; Error Message below: ; ``` ; Metrics: Trace dist. & Fidelity mixed/pure inequality ... ok ; Metrics: Check avg gate fidelities for random ... ; python(35852,0x7fff9757f380) malloc: *** error for object 0x7fe189168a10: incorrect checksum for freed object - object was probably modified after being freed. *** ; set a breakpoint in malloc_error_break to debug ; Abort trap: 6 ---------------------------------------------- ; ``` . Building the dev environment: ; ``` conda create --name qutip-dev-44-py36 ; source activate qutip-dev-44-py36 ; conda install python=3.6 cython numpy scipy nose jupyter matplotlib; python setup.py develop --with-openmp; ``` . ### py37; Broken test for python 3.7 with: (1) QuTiP 4.4-dev, with openmp =True and (2) conda install qutip, QuTiP 4.3.1. Error Message below: ; ``` ; qutip.tests.test_qobj.test_expect_exception ... ok Qobj data ... ok Qobj type ... ok Qobj Hermicity ... ok ; Qobj unitarity ... ok ; Qobj shape ... ok ; Qobj: multiplication w/ non-square qobj.dims ... ok ; Qobj addition ... ok ; Qobj subtraction ... ok ; Qobj multiplication ... ok ; Qobj division ... ok ; Qobj power ... ; python(35379,0x7fff9757f380) malloc: *** error for object 0x7fbf1089fa90: incorrect checksum for freed object - object was probably modified after being freed. *** ; set a breakpoint in malloc_error_break to debug ; Abort trap: 6 ; ``` . Building the dev environment: ; ``` conda create --name qutip-dev-44-py37 ; source activate qutip-dev-44-py37 ; conda install python=3.7 cython numpy scipy nose jupyter matplotlib; python setup.py develop --with-openmp```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-473772867:1490,power,power,1490,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-473772867,1,['power'],['power']
Energy Efficiency,"I see. Okay, for sufficiently large matrices there's no requirement for averages, which will reduce the time execution a lot because of the for loop.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1862#issuecomment-1125927027:93,reduce,reduce,93,https://qutip.org,https://github.com/qutip/qutip/pull/1862#issuecomment-1125927027,1,['reduce'],['reduce']
Energy Efficiency,"I still vote for keeping it as it is, because I think it makes sense to keep Qobj \* Qobj in the space of Qobj. This is now numpy.ndarray, numpy.matrix and scipy,sparse.spmatrix works, and I think that one would expect Qobj to do the same. A simple example: imagine you get a Qobj x as an argument to a function, and you do some computation like x.dag() \* op \* x with some operator op. If x is a ket you will get a Python complex as a result with your suggested behavior. But if x is an operator instead you will get a Qobj. Or if x is a tensor of an operator and a ket (like in the top of this issue) you will get something in between, a reduced dimensionality operator. I think it makes a lot more sense to keep the results of all these cases as Qobj. Then if one for example want to do the trace of the result it should work in all cases, and no special handing of C-numbers would be required since Qobj([1]).tr() would give something reasonable, but (Python complex).tr() would obviously fail. The use-case you are interested in, abs(some_bra \* some_ket), could easily be implemented in Qobj by implementing the **abs** special function. I think that would be a better way.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/28#issuecomment-28302814:641,reduce,reduced,641,https://qutip.org,https://github.com/qutip/qutip/issues/28#issuecomment-28302814,1,['reduce'],['reduced']
Energy Efficiency,"I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. It might be faster already if you evaluate the piecewise varying parts into one ""constant"" part at each point. This isn't guaranteed, because it involves copying rather more data _before_ the call (to construct the constant matrix once), but if the integrator would need to take many intermediate time steps, I expect it would win out. Would something like this work for you?; ```python; times = [0, ...]; # Liouvillians for parts you have control over; control_liouvillians = [qutip.liouvillian(h) for h in control_hamiltonians]; # The time-dependent Hamiltonian for stuff you're not controlling; base_hamiltonian = qutip.QobjEvo([H0, [H1, time_dependence], ...]); # Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:127,efficient,efficiently,127,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['efficient'],['efficiently']
Energy Efficiency,"I tried some experiments with elementwise exp with numpy to see if mkl did any parallel processing. It did not seem to. scipy.linalg.expm claims to use the Pade approximation. There used to be a expm2 (that used diagonalisation) and an expm3 (method?) but these have been deprecated. The scipy docs claim that the method used in expm is ""numerically more robust"". In the control modules we either use a eigendecomp (diagonalisation) method or scipy.linalg.expm_frechet as we typically need to compute propagators (which either uses the eigendecomp or is provided by the frechet deriv) . Frechet also uses some Pade approximation. I think the Pade method uses something like a LU decomp, but would need more research. It would always be more efficient to use the eigendecomp if it has been computed already. My guess is that if parallel LU decomp provides much (x100) faster eigendecomp, then the diagonalisation method would be much faster than expm. However, some experimentation would be needed to verify. . I am told that there are many methods of computing expm, and is there is much numerical research into it. It seems strange that scipy only offer us one method. The spinach control library (http://spindynamics.org/Spinach.php) reputedly has some interesting methods of computing expm. A quick Google search found https://github.com/scipy/scipy/pull/354, which shows that scipy considered adding a method kwarg, but have parked the idea. We currently have multiple methods in qutip based. I assume there must have been some motivation for writing our own sparse matrix functions for expm. It would seem that a pretty thorough investigation would be required determine to value of the various options. Would make a nice self contained project for someone.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/462#issuecomment-207456658:741,efficient,efficient,741,https://qutip.org,https://github.com/qutip/qutip/issues/462#issuecomment-207456658,1,['efficient'],['efficient']
Energy Efficiency,"I understand completely!. I'd probably just go to `int64` with your internal CSR implementation for the moment. Would it be very easy to have the `int32`/`int64` boiled down to a single compile-time flag, for those people that compile QuTiP manually and feel they really need the smaller `int32` matrices? The pre-compiled pip/conda releases could be `int64`. That might be a simple way to provide some support for ""both"". Somehow, I thought that SciPy would put a lot more emphasis on performance, and do things like Kronecker products without conversion. It would seem that SciPy should be the place to really optimize the sparse linear algebra implementation, including all the possible combinations like `CSR * DIA`. Then everyone could build on top of that, making custom sparse-matrix implementation unnecessary. Maybe when someone gets some serious funding for working on QuTiP, encapsulating all of this better would be doable. So, just something to keep in mind before bolting on too many things onto the existing custom implementation (like multiple sparse and full storage formats). Once you open up that can of worms, it just might be better to re-design `Oobj.data` to have a very broad base (e.g. SciPy), and keep the custom CSR as an optional, highly efficient implementation for the special case, maybe in a separate package. Either way, it's going to be a lot of work, and not something for a minor-version release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384094285:1266,efficient,efficient,1266,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384094285,1,['efficient'],['efficient']
Energy Efficiency,"I was claiming that the algorithm from the Molmer paper is different because it relies on small timesteps and it does not use stepping back (or more generally, it does not use any form of root finding). They are probably equivalent, but I did not find the equivalence obvious. Thanks for the reference, I will check it out. Also, for the sake of more efficient root finding (if I understand correctly currently you are just repeating the integration over a smaller interval) you might find this interesting: http://mail.scipy.org/pipermail/scipy-user/2010-March/024890.html",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/344#issuecomment-105091967:351,efficient,efficient,351,https://qutip.org,https://github.com/qutip/qutip/issues/344#issuecomment-105091967,1,['efficient'],['efficient']
Energy Efficiency,"I was just thinking about this again and came up with a good speed up for the truncated Hilbert space. I can't think of any method to get analytic closed-form solutions for the truncated space, though, so this is just a more efficient numerical method. First we take the generator of the displacement operator `G`, such that `exp(G)` is the displacement operator we're looking for. `G` is anti-Hermitian, and so it shares its eigensystem (up to scaling of the eigenvalues) with the Hermitian `i G` and consequently is diagonalised by a unitary formed of its eigenvectors. Now `S = i G / abs(alpha)` is a tridiagonal Hermitian, and with a similarity transformation we can find a _real-symmetric_ tridiagonal `T = P^-1 . S . P` for some diagonal unitary `P` (which is easy to calculate). The reason for scaling out `alpha` here should become clear at the end. The main diagonal of `T` is all zeros, and the first sub- and super-diagonals look like; ```[sqrt(1), -sqrt(2), sqrt(3), -sqrt(4), ...]```; and the diagonal of `P` looks like; ```[i, e^(-1i arg(alpha)), i e^(-2i arg(alpha)), e^(-3i arg(alpha)), ...]```. Now this real-symmetric tridiagonal form is the basis of Hermitian eigenvalue solvers, and has direct entry points in LAPACK (e.g. `?stemr`), which allow us to pass only the main diagonal and the first subdiagonal. Scipy provides convenient wrapped access in Python by `scipy.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equival",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:225,efficient,efficient,225,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['efficient'],['efficient']
Energy Efficiency,"I was thinking something on the same lines as in `__mul__`for `Qobj`:; ```python; coeff_real = all(element.coeff(t).imag==0 for element in self.elements) ; data_herm = all(element.part(t).isherm for element in self.elements); return Qobj(..., isherm=(coeff_real and data_herm) or None); ```; Although I imagine it can be made more efficient by not looping twice in self.elements and probably using the loop in `_call`method. This way you always try to guess the hermeticity of QobjEvo even if it is not constant.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2000#issuecomment-1257265957:331,efficient,efficient,331,https://qutip.org,https://github.com/qutip/qutip/pull/2000#issuecomment-1257265957,1,['efficient'],['efficient']
Energy Efficiency,"I will work on ; plot_wigner_sphere, ; matrix_histogram,; inner functions,; deprecated functions (e.g. energy level diagram),; cmap on qubism and schmidt,; documents",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2170#issuecomment-1596919269:103,energy,energy,103,https://qutip.org,https://github.com/qutip/qutip/pull/2170#issuecomment-1596919269,1,['energy'],['energy']
Energy Efficiency,"I would like CI to check that the documentation builds work, but maybe we can reduce what is built somewhat once we're happy with how ReadTheDocs is set up. I suggest that on ReadTheDocs we build docs for all the active release branches (so currently qutip-4.7.X and qutip-5.0.X) and then yes, we'll have to update which is stable when that changes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2087#issuecomment-1428131345:78,reduce,reduce,78,https://qutip.org,https://github.com/qutip/qutip/pull/2087#issuecomment-1428131345,1,['reduce'],['reduce']
Energy Efficiency,"I would like to have the BEC code be classes that have functions for BEC within QuTiP which can be used for Fluid Dynamics experiments. Specifically for high energy particle physics. ; Could we schedule a time to meet perhaps to discuss further? Maybe a zoom? ; Thank you . Hanah Rahman . > On Apr 19, 2022, at 3:20 PM, Simon Cross ***@***.***> wrote:; > ; > ﻿; > @hrahman12 This sounds very interesting. How much of the idea do you have fleshed out so far?; > ; > If the plan is a very complete package targeting a specific physical system or family of systems, it might be best to have a separate package that used QuTiP. Such a package could however be part of the QuTiP family of packages potentially (e.g. in the same way qutip-qip is a separate package now).; > ; > On the other hand, if you want specific support for a few key classes and functions that might be more widely applicable (e.g. constructors for new quantum states or operators, a new kind of solver, new visualisation) those might well belong in the main QuTiP package (i.e. this repository).; > ; > Keen to facilitate your work if you're keen to do it -- we just need to figure out what is the best plan.; > ; > —; > Reply to this email directly, view it on GitHub, or unsubscribe.; > You are receiving this because you were mentioned.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1872#issuecomment-1103039679:158,energy,energy,158,https://qutip.org,https://github.com/qutip/qutip/issues/1872#issuecomment-1103039679,2,"['energy', 'schedul']","['energy', 'schedule']"
Energy Efficiency,"I'm not entirely sure what's being asked of us here, because the code numba supports is to do with the numba developers, not us? numba is a compiler for Python code accessing NumPy arrays in ways other than internal NumPy compiled C code. The benefit to QuTiP users even if numba _were_ to add support would be minor, because a) we use custom sparse matrices which numba couldn't currently target to a GPU efficiently and b) almost all of our heavy code is compiled C, which is already as the same target as standard numba. We aren't going to convert (e.g.) `Qobj` to a numba `jitclass` because our entire library is written in Cython, and besides, the speed-ups come from the internal `Qobj.data` attributes, which we are already low-level. GPU-based sparse matrix routines are an interesting side-note, but will require very specialised data structures and accesses. This is more possible in the new data-layer added in 5.0, but still would require a huge amount of work. We're not likely to achieve this by using numba, but instead to use specialised GPU-enabled data structures like cupy instead, since that fits into our data model better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/900#issuecomment-809667000:406,efficient,efficiently,406,https://qutip.org,https://github.com/qutip/qutip/issues/900#issuecomment-809667000,1,['efficient'],['efficiently']
Energy Efficiency,"I've just pushed a couple of commits to fix up a little bit of the formatting (it was the squashed lines I meant, rather than the particular level of indent or location of the keyword `or`) and to slightly fix the tolerance of the eigenvalue test. The individual uncertainty in any eigenvalue is allowed to be ~1e-12, so when you sum them all up to compare them, you have to propagrate the uncertainty through. Don't worry about the random test failure you got in a pickle test one time - that wasn't your fault and we know about it and have fixed it for the next major release of QuTiP already. Also don't worry about the speed of the CI tests. You can't reliably benchmark by comparing CI runs because you never know what else was running on the physical hardware at the same time. Travis are ramping down the amount of processing power available to us while they're transition business model. I'll be moving our testing infrastructure elsewhere when I've got a bit more time to sort it out, and have decided what we actually want/need/can get. In the mean time, we just live with the occasional test failure if a Mac Xcode12 machine is overloaded when we get to it. We can rerun them if we need to; it's not worth compromising on our test coverage.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-822688883:833,power,power,833,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-822688883,1,['power'],['power']
Energy Efficiency,I've merged #1752 and scheduled this for inclusion in the 4.6.3 release. Thank you again for reporting this @goerz!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1753#issuecomment-1006012360:22,schedul,scheduled,22,https://qutip.org,https://github.com/qutip/qutip/issues/1753#issuecomment-1006012360,1,['schedul'],['scheduled']
Energy Efficiency,"If they call BLAS functions then they should use threads. It looks like scipy is calling the mkl blas where as numpy is not. A bit odd. . > On Apr 8, 2016, at 09:52, Alexander Pitchford notifications@github.com wrote:; > ; > Yes, I did the mkl.set_num_threads. This is my test script; > ; > import numpy as np; > import timeit; > ; > NUM_THREADS = 1; > ; > try:; > import mkl; > use_mkl = True; > except:; > use_mkl = False; > ; > def timing(f):; > def wrap(_args):; > time1 = timeit.default_timer(); > ret = f(_args); > time2 = timeit.default_timer(); > print('{} function took {:0.3f} ms'.format(f.**name**, (time2-time1)*1000.0)); > return ret; > return wrap; > ; > if use_mkl:; > mkl.set_num_threads(NUM_THREADS); > print(""Number of threads is {}"".format(mkl.get_max_threads())); > else:; > print(""mkl unavailable""); > ; > d = 10000; > n_reps = 10; > A = np.random.random([d, d]); > ; > print(""Starting tests""); > ; > @timing; > def calc_exp(A):; > for i in range(n_reps):; > E = np.exp(A); > ; > calc_exp(A); > Whether I set NUM_THREADS to 1 or 4 I only see one processor active in system monitor, and the processing time is the same.; > ; > This is what starting me looking into whether I should expect numpy / scipy to use multiple cores. The articles I read suggested that numpy and scipy do not contain any intrinsic parallelisation. It may have been out-of-date.; > ; > Now I just tried a similar test with scipy.linalg.expm and it did use multiple processors and was approximately twice as fast with 4 than with 1.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/462#issuecomment-207494345:1094,monitor,monitor,1094,https://qutip.org,https://github.com/qutip/qutip/issues/462#issuecomment-207494345,1,['monitor'],['monitor']
Energy Efficiency,"If you're concerned about the solvers, a) they skip tidyup til the end anyway and b) _technically_ the computational complexity of CSR * dense vector is identical to tidyup (though tidyup is a little more cache efficient), but really it's the constant factors that could kill you for small systems. For example, the ""naive"" way of implementing a relative tolerance would take the absolute value of a complex number, but that involves a floating-point square root, which is a very slow operation. That's likely partly why the current version compares real and imaginary components separately, even though the sparsity structure is only improved if _both_ go to zero. In a two-pass operation you'd sqrt twice for every entry (naively - all the square roots are very avoidable), and I'd start to worry that that really _could_ dominate small system operations. Or maybe you should just ignore me when assigning ""good first issues"" - I'm probably too opinionated about performance characteristics without enough experience at managing other people's code!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349#issuecomment-793991141:211,efficient,efficient,211,https://qutip.org,https://github.com/qutip/qutip/issues/1349#issuecomment-793991141,1,['efficient'],['efficient']
Energy Efficiency,"Indeed you are right, it turns out to be a matter of convention and everything is correct (`spre`, `spost`, `lindblad_dissipator`). For multiple superoperators, I prefer using numpy because of its powerful broadcasting support. Hopefully, this discussion will help anyone else facing a similar situation. Keep doing great!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1285#issuecomment-643321875:197,power,powerful,197,https://qutip.org,https://github.com/qutip/qutip/issues/1285#issuecomment-643321875,1,['power'],['powerful']
Energy Efficiency,"Indeed, it is [in the code](https://github.com/qutip/qutip/blob/2aa51b92df57f995778940815d20d293f00f8a9d/qutip/operators.py#L888-L948). However, I cannot find any reference to them in [the documentation](http://qutip.org/docs/3.1.0/search.html?q=charge&check_keywords=yes&area=default). EDIT: Ok, my bad, documentation and official pip releases are 3.1.0 and it seems to have been added recently :/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/562#issuecomment-263879657:246,charge,charge,246,https://qutip.org,https://github.com/qutip/qutip/issues/562#issuecomment-263879657,1,['charge'],['charge']
Energy Efficiency,"It is likely because finding eigenvalues of non Hermitian systems depends; on the condition number. I think redoing the current code to use the; shifted inverse power method or something similar might be the way to go. On Nov 8, 2016 6:01 AM, ""Gleb Fedorov"" notifications@github.com wrote:. > While simulating the dynamics of a driven non-linear oscillator I; > discovered that with small relaxation and weak driving the steady state; > returned by the propagator_steadystate() function is incorrect compared; > with a state obtained from many successive applications of the propagator; > (see plots below):; > ; > [image: alt text]; > https://cloud.githubusercontent.com/assets/3819012/20099571/a213fb02-a5d2-11e6-92cd-481f0a60667d.png; > Populations of the ground and first excited states for two ways of finding; > the steady state.; > ; > The problem is with numpy.linalg.eig() which fails to find a correct; > eigenvector for U. I don't know if this problem is tractable; instead, I; > suggest adding a function to propagator.py which calculates the steady; > state from U and some initial state using the successive application; > approach. If you think this is useful, I would be happy to implement it.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/qutip/qutip/issues/556, or mute the thread; > https://github.com/notifications/unsubscribe-auth/ABMPqeETpQvlQ6B0GUyajpgnHwt12EVPks5q8HKmgaJpZM4KsZfk; > .",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/556#issuecomment-259147457:161,power,power,161,https://qutip.org,https://github.com/qutip/qutip/issues/556#issuecomment-259147457,1,['power'],['power']
Energy Efficiency,"It looks like your parameters are a bit challenging for the ODE solver (the Rabi frequency Omega is much much smaller than the energy splitting omega). If you change the ODE tolerances using options you will find it gives the expected result, e.g., something like: . ```; options = qt.Options(rtol=1e-8, atol=1e-8); result = qt.mesolve(H, rho0, t, options=options,progress_bar=True); ```. If you use a ket instead of a density operator mesolve() will pass the problem to sesolve(), which I guess for some reason is more robust in this case. It is a little annoying it is just failing silently. I am curious if you tried in v5?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2229#issuecomment-1713056542:127,energy,energy,127,https://qutip.org,https://github.com/qutip/qutip/issues/2229#issuecomment-1713056542,1,['energy'],['energy']
Energy Efficiency,"It seems like 4fa892932b1062b31fcaf2640987c8ecfa7d7a19 fixed the problem with the broken demos(). But if demos application is going to continue to be an official part of qutip, I think it would be better to dispatch each demo in a separate process, using ""fork() and exec()"", instead of the current method of ""compile() and eval()"" which seems not very robust (that is, it crashes the application if something goes wrong in the example script). Also, the text-based demos can probably be dropped because I doubt anyone use that function. . But work on new qutip demos should probably be using ipython notebooks, I think, so I'm not sure how much energy we should spend on the demos application.. But on the other hand not everyone uses the ipython notebook, so the qt demos application probably might still has a role to play.. and some effort to make it more robust might be worthwhile?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/19#issuecomment-18893809:646,energy,energy,646,https://qutip.org,https://github.com/qutip/qutip/issues/19#issuecomment-18893809,1,['energy'],['energy']
Energy Efficiency,"It will convert the `CSR` to `Dense` then use `add_dense`. `iadd` for sparse is not easy. When none-zero entry are not lining up, the array need to be expanded.; Also if the values cancel themselves, there is a need to remove an entry and more the others to fill the gap... Also our dispatcher, the code that allocate `add(Data, Data)` to each specialization `add_dense`, `add_sparse`, does not support inplace operation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2298#issuecomment-1904621660:309,allocate,allocate,309,https://qutip.org,https://github.com/qutip/qutip/issues/2298#issuecomment-1904621660,1,['allocate'],['allocate']
Energy Efficiency,"It's related to #1720 - only Numpy 1.21 has cp310 wheels, but the build system currently requires Numpy <1.20 to build, because when we build QuTiP wheels for general consumption, we need to use Numpy pre-1.20 in order to have runtime support for a range of Numpys (the C ABI changed in 1.20, but they keep it forwards compatible, so things built against older Numpys will work with newer ones). As a quick fix for this issue with 3.10 only, you should be able to changes these lines in `setup.cfg` and `pyproject.toml`:; ```; setup_requires =; numpy>=1.16.6,<1.20; scipy>=1.0; cython>=0.29.20; packaging; ```; to; ```; setup_requires =; numpy>=1.16.6,<1.20 ; python_version<3.10; numpy>=1.21 ; python_version>=3.10; scipy>=1.0; cython>=0.29.20; packaging; ```; (or something like that - I forget the exact syntax). That should let you build on 3.10 (where pre-1.20 Numpy versions aren't an issue), but it doesn't solve the general problem of #1720.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1732#issuecomment-983781212:167,consumption,consumption,167,https://qutip.org,https://github.com/qutip/qutip/issues/1732#issuecomment-983781212,1,['consumption'],['consumption']
Energy Efficiency,"Just a question: If we can use la.sinm and la.cosm in the tests, why not use it in the qobj method? Is the expm based method likely to be more efficient?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/440#issuecomment-187062059:143,efficient,efficient,143,https://qutip.org,https://github.com/qutip/qutip/pull/440#issuecomment-187062059,1,['efficient'],['efficient']
Energy Efficiency,"Just adding my two cents. From my experience, a lot of our users don't know how to efficiently locate the error and find the solution. Simply posting a HOW-TO guide along with the release notes might not be sufficient, because the users may not be aware of its existence. It would help I think if we could; - raise an error or warning message that locates the error as clear as possible and; - if feasible, leave a link in the error/warning message directing the users to the HOW-TO guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053:83,efficient,efficiently,83,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053,1,['efficient'],['efficiently']
Energy Efficiency,"Just adding some minor comments here, not really related to the core discussion; > We could have a warning when matrices over a certain size are allocated. I don't think it is good unless we can read the available memory and derive the warning threshold from that. On the cluster, we sometimes have up to hundreds of GB of memory. The threshold should be different from computer to computer. > Should eigenstates return the states in one operator instead of a list of kets?. I do often want eigenstates to return one operator. Many times I have to get the kets to NumPy array and recreate the unitary operator from them. Maybe we can have an additional argument to the function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1953129675:145,allocate,allocated,145,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1953129675,1,['allocate'],['allocated']
Energy Efficiency,"Just that we also have '_noise_direct()' which does a bit of linear algebra to avoid using the pseudo-inverse. i think it can be a bit more numerically efficient than mucking around with the inverse itself. Maybe doing the pseudo-inverse tends to involve a big large dense matrix, and this avoids it?. iirc, the logic of noise_direct is, since we write the pseudo-inverse like $R=QL^{-1}Q$, the annoying term we have to evaluate in the noise expression is something like:. $$y = I QL^{-1} Q I \rho. $$. so we substitute, for the last few terms. $$x = L^{-1} QI\rho $$. we multiply from the left by L, to get. $$L x = Q I \rho$$. and we can find x using a scipy's solve or something equivalent, and then find y with. $$y = IQ x$$. In the skewness you have this new term,. $$y =I R R I P I \rho$$. which is a bit clunky to manipulate.; maybe we can write something like. $$x = L^{-1}QIPI \rho$$. and again, multiplying by L. $$Lx = QIPI \rho$$. to get x, then the original expression is now. $$y = IQL^{-1}QQx$$. defining a new variable. $$t = L^{-1}QQx$$. we can again, multiply by L. $$Lt = QQx$$,. solve for t, then we get . $$y= IQ t$$. ? i probably made a mistake, so take with a grain of salt!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2435#issuecomment-2138882230:152,efficient,efficient,152,https://qutip.org,https://github.com/qutip/qutip/pull/2435#issuecomment-2138882230,1,['efficient'],['efficient']
Energy Efficiency,"Just to add that we also have operator evolution in the form. $$ \partial_t \begin{pmatrix} U \\\\ U' \end{pmatrix} = -i \begin{pmatrix} H & 0 \\\\ H' & H \end{pmatrix} \begin{pmatrix} U \\\\ U' \end{pmatrix}, $$. and similar with $U$ switched for a map and $H$ for some Lindblad superoperator, in goat, which seems to work fine in terms of the multiplication during the ODE update step. So, as suggested, it would seem that mainly we just want a nice, efficient method for constructing / extracting these objects.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2384#issuecomment-2046601871:453,efficient,efficient,453,https://qutip.org,https://github.com/qutip/qutip/issues/2384#issuecomment-2046601871,1,['efficient'],['efficient']
Energy Efficiency,Looks good to me. @bastikr could you please explain the difference between the green and orange lines. And what is the red line that seems to trump all?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/683#issuecomment-292923784:79,green,green,79,https://qutip.org,https://github.com/qutip/qutip/pull/683#issuecomment-292923784,1,['green'],['green']
Energy Efficiency,"Nah, don't disparage yourself - your code is good and you've done well to copy the style of the rest of the files. Typically consistency is better than having ""the one true style""; code's read more than it's written, and having a module which is clearly written by four different people makes the logic very very difficult to follow, which in turns makes it much harder to spot bugs. If it were up to me (which is isn't, really), I would say that your changes are good as they are. I didn't mean for the comments to be changes you _had_ to make. You can't reduce the number of merge conflicts that are going to happen with #1181 anyway, because that PR is a massive refactor of large swathes of the testing suite. You've done a good job to keep your work consistent with the rest of the file, so it will be very easy to merge in your logical changes. Merge conflicts are pretty much just par for the course; just the fact that we're discussing this here shows that logically, there _is_ a conflict between two pieces of work being done at the same time. I'd suggest merging this as-is. We'll handle the problems caused by the refactor elsewhere.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1224#issuecomment-607971891:556,reduce,reduce,556,https://qutip.org,https://github.com/qutip/qutip/pull/1224#issuecomment-607971891,1,['reduce'],['reduce']
Energy Efficiency,"Nonlinear functions on the density matrix need to be evaluated on each block by factoring in its degeneracy, given by `state_degeneracy(N,j)` for each block `j` for an ensemble of `N` two-level systems. Working on efficient functions and a notebook to highlight this feature.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/993#issuecomment-510891449:214,efficient,efficient,214,https://qutip.org,https://github.com/qutip/qutip/issues/993#issuecomment-510891449,1,['efficient'],['efficient']
Energy Efficiency,"Not sure if this is a conda issue now as I can run the test script in the windows powershell terminal with `python .\qutiptest.py` where qutiptest.py is; ```python; import qutip; b=qutip.Bloch(); b.show(); ```; and I get the same behaviour as when I run throught the VS code debugger, where the matplotlib window flashes briefly. I can also recreate the rest of the VS code behaviour like this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1616#issuecomment-883541243:82,power,powershell,82,https://qutip.org,https://github.com/qutip/qutip/issues/1616#issuecomment-883541243,1,['power'],['powershell']
Energy Efficiency,"Nothing too clever here. As in cached flag cleared whenever unitarity threatened; The check could probably be more efficient, but as not expected to be used intensively, then this would seem acceptable.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817#issuecomment-364163769:115,efficient,efficient,115,https://qutip.org,https://github.com/qutip/qutip/pull/817#issuecomment-364163769,1,['efficient'],['efficient']
Energy Efficiency,"Now it gives me one other error and a failure (and I have the impression the I can deal with the prior errors better than with the new one):. > > > import qutip.testing as qt; > > > qt.run(); > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > > > Qobj addition ... ERROR; > > > Qobj subtraction ... ok; > > > Qobj multiplication ... ok; > > > Qobj division ... ok; > > > Qobj power ... FAIL; > > > Qobj negation ... ok; > > > Qobj equals ... ok; > > > Qobj getitem ... ok; > > > Qobj multiplication type ... ok; > > > Qobj conjugate ... ok; > > > Qobj adjoint (dagger) ... ok; > > > Qobj diagonals ... ok; > > > Qobj eigenenergies ... ok; > > > Qobj eigenstates ... ok; > > > Qobj expm ... ok; > > > Qobj full ... ok; > > > Qobj ket type ... ok; > > > Qobj bra type ... ok; > > > Qobj operator type ... ok; > > > Qobj superoperator type ... ok; > > > Sparse: Symmetric Permute ... ok; > > > Sparse: Nonsymmetric Permute ... ok; > > > Sparse: Symmetric Reverse Permute ... ok; > > > Sparse: Nonsymmetric Reverse Permute ... ok; > > > Sparse: Bandwidth ... ok; > > > Transform 2-level to eigenbasis and back ... ok; > > > Transform 10-level real-values to eigenbasis and back ... ok; > > > Transform 10-level to eigenbasis and back ... ok; > > > Transform 10-level imag to eigenbasis and back ... ok; > > > Check diagonalization via eigenbasis transformation ... ok; > > > brmesolve: harmonic oscillator, finite temperature ... ok; > > > brmesolve: harmonic oscillator, finite temperature, states ... ok; > > > brmesolve: harmonic oscillator, zero temperature ... ok; > > > brmesolve: Jaynes-Cummings model, zero temperature ... ok; > > > brmesolve: qubit ... ok; > > > correlation: comparing me and es for oscillator in coherent initial state ... ok; > > > correlation: comparing me and es for oscillator in steady state ... ok; > > > correlation: compare spectrum from eseries and pseudo-inverse methods ... ok; > > > Diagonalization of random two-",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:429,power,power,429,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['power'],['power']
Energy Efficiency,"OK, I see. `complex_array_to_rgb` could be useful in other contexts as well. I am not aware of any standard way of doing this, but if you are interested in this kind of mapping you might want to have a look at a similar mapping of complex values to color that we have in the function `matrix_histogram_complex`. In that case we map only the phase to the color, and the magnitude is shown by the bar heights, but if you map the magnitude to the alpha channel or the overall intensity you get something the is similar to what you use. For example, with the code from `matrix_histogram_complex` you get something like. ```; x = np.linspace(-5, 5, 100); X, Y = np.meshgrid(x,x); Z = X + 1j * Y; cdict = {'blue': ((0.00, 0.0, 0.0),; (0.25, 0.0, 0.0),; (0.50, 1.0, 1.0),; (0.75, 1.0, 1.0),; (1.00, 0.0, 0.0)),; 'green': ((0.00, 0.0, 0.0),; (0.25, 1.0, 1.0),; (0.50, 0.0, 0.0),; (0.75, 1.0, 1.0),; (1.00, 0.0, 0.0)),; 'red': ((0.00, 1.0, 1.0),; (0.25, 0.5, 0.5),; (0.50, 0.0, 0.0),; (0.75, 0.0, 0.0),; (1.00, 1.0, 1.0))}. cmap = mpl.colors.LinearSegmentedColormap('phase_colormap', cdict, 256); norm = mpl.colors.Normalize(-pi, pi); colors = cmap(norm(np.angle(Z))); colors[:,:,3] = sqrt(abs(Z)) / sqrt(abs(Z)).max(). plt.imshow(colors, interpolation='none');; ```. which produces the following map of the complex plane:. ![complex-plane-2](https://cloud.githubusercontent.com/assets/1198183/2809239/c3f6c3cc-cd61-11e3-83a1-cc4fff3f303c.png). compared to. ```; plt.imshow(complex_array_to_rgb(Z), interpolation='none');; ```. which produces. ![complex-plane-1](https://cloud.githubusercontent.com/assets/1198183/2809256/29caad3e-cd63-11e3-8e7a-3187afc2744f.png). Either mapping is fine of course, but I think a nice property of the first one is that real numbers and imaginary numbers are mapped to simple colors (real positive->blue, negative->red and imaginary positive green, imaginary negative turquoise), and complex number with both real and imaginary part are mapped to colors that are relatively simp",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41473950:806,green,green,806,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41473950,1,['green'],['green']
Energy Efficiency,"Oh yeah, I totally agree with that perspective - it's in part why I've gone on my little crusade over the past couple of weeks to remove all the warnings and errors from all the build processes. What do you think a sensible strategy is for handling bug fixes that touches code that issues complaints? CodeClimate will typically restate its complaint if you change a line that contributes to it (e.g. here I changed a ""return"" statement in a function that has too many). I guess there's either ""maintainers state whether any particular PR is acceptable with a failing warning""; ""write a [skip ci] commit message"" (or whatever it's called); or ""any PR that touches complained-about code must fix the error"". Without any experience, to my mind it seems like points 1 and 2 are basically the same, but point 1 gives the power to override to maintainers, and point 2 to contributors - seems like version 2 works well in a business where ""everyone"" is trusted to modify the code, but in the distribued opensource world, maybe not? Point 3 seems ideal in principle, but it seems like it would make it very hard to have first-time contributors do anything with older parts of the library - there'd be a huge onus to completely overhaul functionality, even just to fix small stuff. I really don't know what recommended practices are here - I was roughly working under the assumption that we'd have maintainers be allowed to override complexity failures on occasion, but we've never really discussed it as far as I know, and I do recognise the problems with it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506#issuecomment-826673175:816,power,power,816,https://qutip.org,https://github.com/qutip/qutip/pull/1506#issuecomment-826673175,1,['power'],['power']
Energy Efficiency,"Ok, I think I may have some more information. I am fairly sure that this is the same bug as #1120, #963 and #944 (which I believe was not actually ever fixed). I'm going to put the information here. My working theory is currently that this is a MKL bug on Mac. For posterity, let me just dump out some information. ## Things you should know if you've not worked with segfaults before. - `Abort trap 6`, `Segmentation fault` and a few other points can all be from the same cause; - Segmentation faults are typically caused by reading or writing to memory that isn't owned by our process. These often occur by reading/writing too much data to an allocated pointer, or trying to read/write a memory location where the location was read from uninitialised memory.; - Segfaults will not always reliably occur. It's _very_ difficult to prove that swapping tools ""fixes"" a segfault; it can often just move around enough allocations to mask the problem, not fix it.; - Python stack traces are likely to be almost entirely unreliable in these cases, because the segfault may often occur while the garbage collector is running, and that will happen at seemingly non-deterministic times.; - Running files in a slightly different interpreter, running within a test runner with differing numbers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation comp",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:644,allocate,allocated,644,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['allocate'],['allocated']
Energy Efficiency,"Ok, so I did some benchmarking at https://nbviewer.ipython.org/gist/goerz/34af142b78d7e344417d838bbea78aaf/06_example_3states_benchmark.ipynb ([gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf)), based on [one of the example notebooks from the Krotov package](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). I'll be referring to the numbered cells in that notebook in the discussion below. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:. > I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. That's certainly worth trying: when calling `mesolve` in a loop over the time grid, I did indeed see a significant speedup when summing the Lindbladian into a single constant `Qobj`, see `In [21]` vs `In [24]`. On the other hand, it doesn't always give a speedup: in the low-level [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) it actually makes the propagation slower, see `In [29]` vs `In [32]`. It's a bit surprising, but then, as you say:. > [...] This isn't guaranteed, because it involves copying rather more data _before_ the call. So that's ok. > Would something like this work for you? [...]; >; > By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately. To be clear, I personally never use collapse operators (and the Krotov documentation heavily discourages it). Inst",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:653,efficient,efficiently,653,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['efficient'],['efficiently']
Energy Efficiency,"Ok. Wouldn't it be possible for qutip to have an efficient `overlap` method when the states are dense as well? Like, fallback to the `numpy` version?. Otherwise, I guess adding a note in the doc about this particular use case, when computing overlaps with dense states might be useful. I did not find anything like this, and it would help make code using qutip more efficient. This could be [here](http://qutip.org/docs/4.0.2/apidoc/classes.html?highlight=overlap#qutip.Qobj.overlap) for instance.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/818#issuecomment-364947296:49,efficient,efficient,49,https://qutip.org,https://github.com/qutip/qutip/issues/818#issuecomment-364947296,2,['efficient'],['efficient']
Energy Efficiency,"Operation `oper @ ket` is a lot faster for `CSR @ Dense` than `CRS @ CSR`. Also for ket, csr matrices still need to have one entry per row, making them not that much more efficient than dense. (A well optimised `COO` would be nice here.). But it is only a good choice when they are used as kets, not when used as building tools for operators... We have functions to create such operators that I thought were more known that are set to use the appropriate sparse default:; `fock_dm(N, n)` is equivalent to `basis(N, n) * basis(N, n).dag()`.; `projection(N, n, m)` is equivalent to `basis(N, n) * basis(N, m).dag()`. For now I added an entry for this case in the migration guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-2028969439:171,efficient,efficient,171,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-2028969439,1,['efficient'],['efficient']
Energy Efficiency,"Our tests could still be shortened, but right now the `pytest.mark.slow` marker does allow for a reasonable run time without sacrificing too much, and we have reduced our Travis load to only 5 concurrent tests by merging MKL and OpenMP tests. With `Coefficient` on `dev.major` we have a lot more scope for re-using compiled coefficients, which are typically the slow parts, but for now I think our testing is much faster than it was when this issue was first opened.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-809323357:159,reduce,reduced,159,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-809323357,1,['reduce'],['reduced']
Energy Efficiency,"Perhaps a bit more computationally efficient solution (although, it probably wouldn't make more than a marginal difference, at any reasonable order of number of indices, at which insertion is to be performed): insert at an index `i + k` , where `i` is the original index as per the `index` list, and `k` is the number of insertions performed so far, as part of the insertion loop. I'll raise a PR with the proposed fix. **Update:** The PR in question is https://github.com/qutip/qutip/pull/1892.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1497#issuecomment-1123990033:35,efficient,efficient,35,https://qutip.org,https://github.com/qutip/qutip/issues/1497#issuecomment-1123990033,1,['efficient'],['efficient']
Energy Efficiency,"Perhaps keeping just clang, if we wanted to keep one of the two, would be a good way to go. If we never mess with the compiler flags again there should be no problems. . > On Feb 21, 2015, at 08:03, Dominic Meiser notifications@github.com wrote:; > ; > Sounds good. Would you like me to amend the pull request to get rid of the additional travis builds or at least reduce them? Might be nice to have a least one build with gcc 4.4 and clang.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/318#issuecomment-75338104:365,reduce,reduce,365,https://qutip.org,https://github.com/qutip/qutip/pull/318#issuecomment-75338104,1,['reduce'],['reduce']
Energy Efficiency,"Perhaps someone else can give a more concrete answer, but I guess the driving frequency is too high for the number of time-steps? Try tweaking the ODE solver with options like the following:. `; options = Options(nsteps=15000, atol=1e-13, rtol=1e-13) ; `. and passing it to mesolve. `result1 = mesolve(Ha, psi0, times, [np.sqrt(T1)*sig01, np.sqrt(T2)*sig02, np.sqrt(gamma*(nth + 1))*a, np.sqrt(gamma*nth)*a.dag()], [a.dag()*a, sig00, sig11, sig22], progress_bar=True, options=options); `. More practically speaking, for the problem you are solving I guess explicitly including the time dependence is unneccessary, since you have already made a RWA on the drive and the coupling? . Moving to an interaction picture in w1, w2 and wph, and removing the explicit time-dependence might simplify the problem and might give you equivalent results, and in the process make your code much simpler and more efficient?. In other words just set w1=w2=wph=0, and put the drive as a time-independent term in the hamiltonian . `; H01 = g*(sig12*a.dag() + sig21*a) + pump1*(sig01 + sig01.dag()); `",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514:897,efficient,efficient,897,https://qutip.org,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514,1,['efficient'],['efficient']
Energy Efficiency,"Picking a new random number at each time step would be an expensive way to do the computation since each call to the random number generator is costly. One could pre-generate a large array of random numbers before hand, but there is no way to know if you generated enough since we are using an adaptive step size ODE method. You are correct about the way mcsolve does its calculations. The other array you are talking about [1,10,11] is an array that tells the solver about the time-depdendence of the Hamiltonian and/or collapse terms. These arguments could be clearer, however since it is an internal thing, we have not bothered to mess with it. Regards,. Paul; On May 3, 2014, at 9:24 AM, Qi notifications@github.com wrote:. > Sorry, I made some mistakes in my previous post, and you are right on the paper. I think I can summarize the two MC simulation strategies into two kinds: one is that we generate a random number at each time step, and then compare it with the jumping probability (1-P(no jump)), and decide which jump to make using the jumping operators; the other one is that we generate a random number, and let it to be the no-jumping probability, and let the system evolve until it ends at the so-called waiting time by judging if the probability of no-jumping reaches the generated random number, and then decide which state to jump. My hope is that our mcsolve function can allow users to choose which strategy to employ in the simulation, as both of the strategies are valuable for different purposes, as I have claimed in my earlier thread. This is the feature I am looking for. Is that feasible and reasonable?; > ; > I read over the mcsolve code a little bit. From my understanding, the core algorithm of the MC simulation is in the ODE's single-trajectory definition part (_mc_alg_evolve...). Looks like the code is applying the second strategy I mentioned before. But I am not totally sure, as I am confused and got lost on many variables. Like, what does the RHS of the ODE me",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-42092984:294,adapt,adaptive,294,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-42092984,1,['adapt'],['adaptive']
Energy Efficiency,"Pure numerically speaking, the last `diss_coeff` is a way larger than the others.; ```python; >>>diss_coeff; [0.19836061612310207j,; 0.25470007277190326j,; 0.223606797519535j,; 4925.267477050309j]; ```; With this large frequency, if you want to solve the dynamics using ODE, I don't think there is a way to make it faster. You have to either simplify your model mathematically, or, because there is no time dependency in your system, use the (deprecated) `essolve` that computes the dynamics using eigenvalues. Thinking about the physics, the T2 time is much smaller than your `tlist`, the system has already fully decohered. PS: @jakelishman It seems that the `essolve` does have some use-cases? Like in small systems for verification perpose. I remember there is another PR that also mentions it. As we deprecated it, I'm wondering if there is an efficient alternative in QuTiP?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1623#issuecomment-886175452:849,efficient,efficient,849,https://qutip.org,https://github.com/qutip/qutip/issues/1623#issuecomment-886175452,1,['efficient'],['efficient']
Energy Efficiency,"Quick example is below. To add a bit more, the ''slowness'''of the standard brmesolve() run in this example depends on whether I install mkl or not. without mkl, its >10 mins, with mkl, about one minute. The run with converting the tensor to sparse always takes around 30-40 seconds, and doesn't depend too much on mkl. ```; import qutip as qt; import numpy as np. #spectral density; def Jw(w): ; return lam**2 * gamma * w / ((w0**2 - w**2)**2 + (gamma**2) * (w**2)); ; ; #power spectrum; def J_power_spectrum(w):; """""" The Ohmic bath power spectrum as a function of w; (and the bath parameters).; """"""; return (; Jw(w) * 2 * (w>0); ); def Ising_solve(N, g0, J0, gamma, tlist, options, use_csr=True):; # N : number of spins; # g0 : splitting; # J0 : couplings. #Setup operators for individual qubits; sx_list, sy_list, sz_list = [], [], []; for i in range(N):; op_list = [qt.qeye(2)] * N; op_list[i] = qt.sigmax(); sx_list.append(qt.tensor(op_list)); op_list[i] = qt.sigmay(); sy_list.append(qt.tensor(op_list)); op_list[i] = qt.sigmaz(); sz_list.append(qt.tensor(op_list)). # Hamiltonian - Energy splitting terms; H = 0.; for i in range(N):; H += g0 * sz_list[i]. # Interaction terms; for n in range(N - 1):; H += -J0 * sx_list[n] * sx_list[n + 1]. # Initial state; state_list = [qt.basis(2, 1)] * (N-1); state_list.append(qt.basis(2, 0)); psi0 = qt.tensor(state_list); fx = 1; fy = 1.1; fz = 0.9; coup = (fx * (sx_list[N-1]) ; + fy * (sy_list[N-1]); + fz * (sz_list[N-1])). ; if use_csr:; R = qt.bloch_redfield_tensor(H, [[coup, J_power_spectrum]], fock_basis=True, sparse_eigensolver=True,br_dtype = 'sparse', sec_cutoff=-1); R = R.to('csr').tidyup(); result = qt.mesolve(R,psi0, tlist, options=options); else:; result = qt.brmesolve(H, psi0, tlist, a_ops = [[coup, J_power_spectrum]], e_ops=sz_list, options=options, sec_cutoff=-1); return result. #bath sd params; lam = 5; w0 = 10; gamma = 5; . #system params; N = 5; g0 = 1; J0 = 5. tlist = np.linspace(0, 100, 1000); options ={""nsteps"": 15000, ""s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2530#issuecomment-2403834583:473,power,power,473,https://qutip.org,https://github.com/qutip/qutip/issues/2530#issuecomment-2403834583,2,['power'],['power']
Energy Efficiency,"Re tidyup dispatcher: I think this should still exist:. * It's useful for implementing efficient explicity tidyup calls on the different data layers.; * It's useful for specializations on data layer implementations if they want to do, e.g., `__matmul__(self, other): other = other.tidyup() ...` at the start of an operation (not 100% sure this is a good example -- probably other.tidyup() and conversion to sparse needs to happen in one step to happen efficiently, but I feel like there are cases like this out there).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1615#issuecomment-883256980:87,efficient,efficient,87,https://qutip.org,https://github.com/qutip/qutip/pull/1615#issuecomment-883256980,2,['efficient'],"['efficient', 'efficiently']"
Energy Efficiency,"Removing list and forcing dict does not feels making things nicer... Being forced to use dict is mostly a nuisance for me. Presently we support both list ans dict output without much issues, there are very few place that would have issue supporting multiple interfaces. (I can only think of `plot_expectation`.). But how about using `namedtuple`?. It act as a list for loop and numpy, but elements can be called by both the number and name, and I like having result's output somewhat immutable. The biggest issue is that we must provide field names for list inputs... For MC, if e_ops callable return weird things, they will have to choose the option to store all trajectories instead of averaging the result. If they ask for the average or standard derivation of a dict, they will and should get an error, the best we should do is making this error message useful. Custom reduce function could be doable, but probably be a mess, especially if we need one for both `mean` and `std`... So unless someone present a good use case for it, I don't plan going that way.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1141402988:873,reduce,reduce,873,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1141402988,1,['reduce'],['reduce']
Energy Efficiency,"Repeat the test 20 times and accept if at least 19 pass?. I remember adapting the tests when numpy's rng changed. 1~2 where failing. I believe that the tests pass over 99% with a random seed, but with the number of tests, it's not enough. I did not realize the test tolerance was smaller than the test one. But the solver tolerance is for the state itself, not expectation values and other scalars obtained from them. The test is not to check numerical error. When there is an mistake in the code, the error is orders of magnitude greater. Not sure if using the sovler's tol is right, but probably better than using a number that just seems to work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-625307705:69,adapt,adapting,69,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-625307705,1,['adapt'],['adapting']
Energy Efficiency,Running it through the profiler suggests that cy_expect_psi_csr is only responsible for a small part of the time (accumulative time 4.2 sec as compared to total run time of 148 sec). ```; Wed Nov 26 15:04:59 2014 profile.out; 5155120 function calls (5143582 primitive calls) in 148.280 seconds; Ordered by: cumulative time; List reduced from 3097 to 100 due to restriction <100>; ncalls tottime percall cumtime percall filename:lineno(function); 441/1 0.014 0.000 148.283 148.283 {built-in method exec}; 1 0.001 0.001 148.283 148.283 mcsolve-performance.py:1(<module>); 2 0.000 0.000 147.463 73.732 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:69(mcsolve); 2 0.000 0.000 147.411 73.706 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:446(run); 2 0.000 0.000 147.411 73.705 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:423(parallel); 2 0.011 0.006 147.411 73.705 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:415(serial); 1000 8.867 0.009 147.340 0.147 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:757(_mc_alg_evolve); 453518 1.543 0.000 130.497 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:376(integrate); 453518 127.846 0.000 128.245 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:859(run); 395940 0.709 0.000 74.413 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:747(step); 171960 4.219 0.000 4.219 0.000 {built-in method cy_expect_psi_csr}; ```,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-64519867:329,reduce,reduced,329,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-64519867,1,['reduce'],['reduced']
Energy Efficiency,"Shall we schedule a 4.6.1 patch release for later this week? Perhaps I should email the others and set up a video call so I can demonstrate the release procedures. I can think of a few little patches that can be backported to 4.6.0, and then hopefully we can make 4.6.2 with new patches we get from Unitary Hack. The Floquet changes (currently on my desk - we've swapped to dealing by email a bit more) and the changes in Wigner will likely be part of the 4.7 release, of stuff I know right now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1541#issuecomment-831237284:9,schedul,schedule,9,https://qutip.org,https://github.com/qutip/qutip/pull/1541#issuecomment-831237284,1,['schedul'],['schedule']
Energy Efficiency,"So I decided to reinstall Python (Anaconda specifically) to get a fresh slate as in my own debugging and trying to update packages other code started to behave weirdly. Here is my current qutip.about():; QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. I am using the Qt5Agg matplotlib backend, and changing to the TkAgg backend gives the same behaviour. However, running the code you pasted in a separate (command line) console I am able to view the sphere with even the b.show() command.; I still have this behaviour in my editor however (Visual Studio Code) so I think the problem is something to so with my debug environment, this code even behaves as it should in the powershell window in VS code. ; I know this isnt the VS code issue page but if you have any suggestions I'd much appreciate it",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1616#issuecomment-883428764:955,power,powershell,955,https://qutip.org,https://github.com/qutip/qutip/issues/1616#issuecomment-883428764,1,['power'],['powershell']
Energy Efficiency,"So, now tests fail for Qobj subtraction, when running `nose.run(defaultTest=""qutip.tests"", argv=['nosetests', '-v'])` but they run just fine when running `nose.run(defaultTest=""qutip.tests.test_qobj"", argv=['nosetests', '-v'])`. Note that before, for the metrics, the error was occuring even if only `nose.run(defaultTest=""qutip.tests.test_metrics"", argv=['nosetests', '-v'])` was run. It might be something ill allocated due to the order of how tests are run. . I also wonder if there is an issue with pycache. Also, in my folder there are both py36.pyc and py37.pyc files. Here there is a discussion that might be related (?); https://github.com/pytest-dev/pytest/issues/200#issuecomment-395816011",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-496376661:412,allocate,allocated,412,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-496376661,1,['allocate'],['allocated']
Energy Efficiency,"Sorry for such a long delay... @QuantumFall This issue somehow escaped from my email list and I never noticed it. This is actually a situation often encountered when testing just one gate. If Hamiltonian acts trivially on the state for a few time steps, the adaptive solver may decide on a step size so large that all the reaming pulses are skipped. Set the max step size fixes it:; ```python; options = qutip.Options(max_step=0.05); processor_state = processor.run_state(init_state, options=options).states[-1].tidyup(1.0e-6); ```. Usually, this is because the Hamiltonian is 0 at the first few steps. This example is actually slightly different. The first pulse is a non-trivial (sxsx+sysy) (swap-like). Maybe it is because it has no effect on the initial state `(0,0,0,1)`. But `(1,0,0,0)` seems to work well. It seems really necessary to adaptively choose a step size for the simulators. BTW, new updates will most likely only be added to the separate package [`qutip-qip`](https://github.com/qutip/qutip-qip). Please feel free to check there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2003#issuecomment-1343478054:258,adapt,adaptive,258,https://qutip.org,https://github.com/qutip/qutip/issues/2003#issuecomment-1343478054,2,['adapt'],"['adaptive', 'adaptively']"
Energy Efficiency,"Sorry for the delay on the docstrings and so on, I think all suggestions should be incorporated now. However, thanks to Paul's suggestion of adapting the tutorial 1e. I realized that I made a ""mistake from the very beggining"", namely the function used to fit the correlation function is only good if the imaginary part of the spectral density is 0 at t=0, because I'm using. $C(t)=\sum_{k}a_{k}e^{-b_{k} t}e^{i c_{k} t}$. so . $C_{R}(t)=\sum_{k}a_{k}e^{-b_{k} t}cos(c_{k} t)$. $C_{I}(t)=\sum_{k}a_{k}e^{-b_{k} t}sin(c_{k} t)$. No matter how many terms I take $C_{I}(0)=0$. I should have realized before but this can be bypassed by excluding $t=0$ from the fit, and starting at a small t, you get a decent fit, as long as you don't look at C(0), and I never check for these situations before. The results of doing this are pretty decent, but updating tutorial 1e I realized it required higher calculation times for the HEOMSolver when compared to using another ansatz for the correlation function, since solving is the expensive bit then I changed the code use another function for fitting. $C(t)=\sum_{k}(a_{k}+i d_{k})e^{-b_{k} t}e^{i c_{k} t}$. The downside is that since this function has 4 parameters, it required changing other functions as well, luckily only functions starting with _, hopefully this won't delay the PR too much. I updated the tutorials with this as well, and added a bit so that passing the parameters for the fitting is easier (after this comment), if the change is not desirable we can just go back to the commit before this comment",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2260#issuecomment-1925945764:141,adapt,adapting,141,https://qutip.org,https://github.com/qutip/qutip/pull/2260#issuecomment-1925945764,1,['adapt'],['adapting']
Energy Efficiency,Sounds good. Would you like me to amend the pull request to get rid of the additional travis builds or at least reduce them? Might be nice to have a least one build with gcc 4.4 and clang.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/318#issuecomment-75335776:112,reduce,reduce,112,https://qutip.org,https://github.com/qutip/qutip/pull/318#issuecomment-75335776,1,['reduce'],['reduce']
Energy Efficiency,"Thank you for your answer @Ericgig !. So, even though we are not using any quotes in our code, this internally maps to the string approach ?; I am trying to understand how to do what I want using callbacks instead, I could use a bit of help.; This is what the original code I shared here reads:. ```; # list of variational parameters ""a[]""; a=[]; for i in range(numite):; a.append(0.01*i). # define energy function by using variational parameters; def energy(a):; psi = initial_H.eigenstates(sparse=False)[1][0]; t = np.linspace(0, 1, timesteps+1); for i in range(numite):; 	H=[[initial_H,1-a[i]*t],[final_H,a[i]*t]]; 	result= qt.mesolve(H, psi, t, [], []); 	psi=result.states[timesteps]. E = qt.expect(final_H,psi); return E; ```. I tried to understand the documentation here: http://qutip.org/docs/latest/modules/qutip/mesolve.html; What I think I need to do is the following:. - I need to just pass callbacks instead of formulas / strings for the coefficients when defining the operators.; - these callbacks must have a signature with the format `(t, *args)` and should return an np.array; - `t` and `args` values are passed as arguments to mesolve. . I am a bit unclear whether or not ""args"" is a list or a dictionary and how I can access it inside my callbacks. I made an attempt but it returns errors: maybe it would be easy for you to fix some lines of this example and tell me if I am on the right track? Or do you have a link to an example, maybe ?; I am just targeting the innermost portion of the code, here:. ```; mesolve_args = ... # a dictionary ? a list? Something that lets me access the variable ""a""; def h_t1(t, *args):; return np.array(1-a[i]*t) # how do I retrieve a[i] by accessing args?; def h_t2(t, *args):; return np.array(a[i]*t) # same. H=[ [initial_H, h_t1], [final_H, h_t2] ]; result= qt.mesolve(H, psi, t, c_ops=[], e_ops=[], args=mesolve_args) # is this correct ?; psi=result.states[timesteps]; ```. Thank you for your help !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/966#issuecomment-474154477:399,energy,energy,399,https://qutip.org,https://github.com/qutip/qutip/issues/966#issuecomment-474154477,2,['energy'],['energy']
Energy Efficiency,"Thanks @ajgpitch for the comments. I agree that there should be the specific functions but I think for simplifying user experience there should be a simple overarching function. E.g, when you plot Wigner functions in QuTiP you can send it kets or dms or operators and it just works. . Internally, it still calls specific functions to compute the Wigner function based on efficient methods specific to the inputs. But it is just a small convenience to the average user to have a simpler clean overarching function to do the same.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-641961716:371,efficient,efficient,371,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-641961716,1,['efficient'],['efficient']
Energy Efficiency,Thanks @sahmed95 for doing this fix. It seems that there is an issue with the Python3 running. You have to import reduce with using Python3,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/795#issuecomment-357753951:114,reduce,reduce,114,https://qutip.org,https://github.com/qutip/qutip/pull/795#issuecomment-357753951,1,['reduce'],['reduce']
Energy Efficiency,"Thanks Nathan. Lets see if the tests pass. Meanwhile, perhaps you could do `black -l 79` to keep the lines only 79 characters long. Also there are some trailing white spaces and spaces in a blank line which seem not to be picked up by black. Could you please quickly check that so that we get the code climate green check? If not then we can still merge this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1046#issuecomment-529472381:310,green,green,310,https://qutip.org,https://github.com/qutip/qutip/pull/1046#issuecomment-529472381,1,['green'],['green']
Energy Efficiency,"Thanks for the reply on generators. Seems like a good policy going forward. Your implementation seems very neat. Thanks for explaining the thinking behind it. Having looked a bit more into reduce. It seems that from Python2.7 (min req for qutip) reduce exists in functools. Therefore, I think you can import and use it with having to check version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128384062:189,reduce,reduce,189,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128384062,2,['reduce'],['reduce']
Energy Efficiency,"Thanks for the useful feedback, both here and in PR #1611 ! From the discussion in PR #1611 it seems that the second option with the modifications proposed by Jake in this issue seems to be the most sensible approach. Hence, if there are no objections, I will open a PR (which I will probably do tomorrow) where I implement the following changes (adapted from Simon's comment in PR #1611):. - `Qobj.__mul__(self, other) ` ; - dispatch to `data.matmul` if `other` is a `Qobj`; - dispatch to `data.mul` otherwise which will return `NotImplemented` if it does not know how to handle `other`. ; - `Qobj.__rmul__(self, other) `:; - Dispatch to `data.mul` (`other` will never be a Qobj): Notice that in this way both left and right multiplication will behave in the same way. This would also ""solve"" the inconsistency PR #1611 was trying to solve but this time `data.mul` will handle it and will raise NotImplemented whenever required. . - `mul_dense` and `mul_csr`:; - Use a thin wrapper that returns `NotImplemeneted` if input is not a complex python scalar. There are a few things I would like to discuss before opening a PR:; 1) These changes will break backwards compatibility as:; ```python; matrix = np.random.random((2, 2)); qobj = qutip.Qobj(array). qobj * matrix # With the changes this also returns NotImplemented.; matrix * qobj # With the changes this also returns NotImplemented; ```; will now behave consistently (""fixes"" PR #1611). Is this acceptable? I would say yes given that we are doing a major version change. However, it may be a good idea to start raising a deprecation warning in QuTiP 4 if these changes go forward. 2) `data.add` has a similar behaviour to `data.mul` in that it accepts `scale` which is not a `Data` (there are a few more specialisations that also accept an argument that is not a `Data`). Should these specialisations behave in the same way allowing arbitrary python objects as ""scale"" and raise NotImplemented when required or should they just allow a complex py",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473:347,adapt,adapted,347,https://qutip.org,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473,1,['adapt'],['adapted']
Energy Efficiency,"Thanks to some pointer from @nonhermitian I think I now understand this better; I will illustrate with some pseudo code. What we want to do is: M_out = (L_1 + L_2 + ... + L_i)*M; where L_i are sparse matrices and M is a dense matrix.; So one option (A) could be; ```; for L in L_list:; M = spmm(L, M); ```; which would seem more efficient than option B:; ```; for col in M:; for L in L_list:; col = spmv(L, col); ```; but as `spmm(L, M)` would effectively be:; ```; for col in M:; col = spmv(L, col); ```; Then options A & B would be the same efficiency wise.; As option B is much easier for us to implement within our existing codes, then this is what I will do. Just one note: M actually starts are sparse, but has to converted to a dense column stacked vector as it is used as the variable in the ODE solver",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/877#issuecomment-395350256:329,efficient,efficient,329,https://qutip.org,https://github.com/qutip/qutip/issues/877#issuecomment-395350256,1,['efficient'],['efficient']
Energy Efficiency,"Thanks!. I haven't thought about python3 (is it about divisions `//` and `reduce`, or did you spot other problems?). `numpy.prod` - I guess I should rather use it, since `numpy` is already there; (a second thought: at least in python2 for lists of few elements `reduce` is significantly faster; I am not sure though, it in this particular case it makes a difference). ```; from numpy import prod; from operator import mul. prod([1,2,3]) # 22.6 µs; reduce(mul, [1,2,3]) # 737 ns; ```. `plot_qubism` for density matrix it is a different plot. In any case, I will think about it when I doing it (and I will adopt to QuTiP guidelines).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-43737566:74,reduce,reduce,74,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-43737566,3,['reduce'],['reduce']
Energy Efficiency,"Thanks, I'm glad to be of service! I missed that about `functools.reduce` in 2.7, will amend the PR to use that, fix the `xrange` thing and try to make the use of `reduce` a bit more clear. Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128407473:66,reduce,reduce,66,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128407473,2,['reduce'],['reduce']
Energy Efficiency,"The CI is still running but have you tried to align with other qutip API docs like this?; ```; .. automodule:: qutip.core.operators; :members: charge, commutator, create, destroy, displace, fcreate, fdestroy, jmat, num, qeye, identity, momentum, phase, position, qdiags, qutrit_ops, qzero, sigmam, sigmap, sigmax, sigmay, sigmaz, spin_Jx, spin_Jy, spin_Jz, spin_Jm, spin_Jp, squeeze, squeezing, tunneling, qeye_like, qzero_like; ```; I am not sure if autosummary is fully configured in qutip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2148389068:143,charge,charge,143,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2148389068,1,['charge'],['charge']
Energy Efficiency,"The RK45 code here has no notion of error associated with it; you have no way of saying whether a particular step size `dt` is actually good. It ideally should converge to something as the step size goes to zero. QuTiP has an adaptive solver that modifies the step size to keep the error below the supplied tolerances. For time-dependent problems one could run into issues with very narrow pulses, but that is not the case here. Writing ones own ODE solver is not really the best thing to do outside of a learning exercise for reasons along these lines.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508:226,adapt,adaptive,226,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508,1,['adapt'],['adaptive']
Energy Efficiency,"The `c_ops` argument to `mesolve` expects operators in Lindblad form, but you can also construct your own Liouvillian and pass that as the first argument. To construct the non-Lindblad components you want, you may find `spre` and `spost` useful, which respectively turn an operator into a superoperator which multiplies from the left and from the right. There is also `sprepost`, which is a more efficient way to combine `spre` and `spost`. To construct the operators (if you only work on qubits - if not, you need to do it manually as @quantshah showed), you can use `expand_operator`. So you can do something like; ```python; L = qutip.liouvillian(H); n_qubits = 5; for n in range(n_qubits - 1):; c_op_left = qutip.expand_operator(qutip.sigmap(), n_qubits, n); c_op_right = qutip.expand_operator(qutip.sigmam(), n_qubits, n + 1); L += qutip.sprepost(c_op_left, c_op_right); both = -0.5 * c_op_right * c_op_left; L += qutip.spre(both); L += qutip.spost(both); res = qutip.mesolve(L, rho0, times, e_ops=...); ```. I've not seen equations in that form myself, but that's how you could go about if that's what you've got.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1435#issuecomment-773936300:396,efficient,efficient,396,https://qutip.org,https://github.com/qutip/qutip/issues/1435#issuecomment-773936300,1,['efficient'],['efficient']
Energy Efficiency,The bug fix is scheduled to be included in numpy 1.22.0 -- https://github.com/numpy/numpy/milestone/93.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1694#issuecomment-990380859:15,schedul,scheduled,15,https://qutip.org,https://github.com/qutip/qutip/pull/1694#issuecomment-990380859,1,['schedul'],['scheduled']
Energy Efficiency,"The compulsive renaming continues.; I also reduced the number of time steps in the test to speed things up, and set to ignore the IntegrationWarning",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455#issuecomment-194836741:43,reduce,reduced,43,https://qutip.org,https://github.com/qutip/qutip/pull/455#issuecomment-194836741,1,['reduce'],['reduced']
Energy Efficiency,"The documentation is wrong here. When `e_ops` is a function, `result.expect` is not empty, but a list of all outputs for that function. So the results is the transposed of what you propose here. For the energy, you would need to do `result.expect[t][3]`. ; The alternative could be a good options.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1238#issuecomment-621485756:203,energy,energy,203,https://qutip.org,https://github.com/qutip/qutip/issues/1238#issuecomment-621485756,1,['energy'],['energy']
Energy Efficiency,"The easiest would be to make special integrators for HEOM which take a dict of `QobjEvo`: `system = {(from, to): H0,}` and list of states. Then we loop over the items: `drho[from] = QobjEvo(t) @ rho[to]`. As long as the state can be represented in an array, every ODE from scipy, jax, etc can be used. We have tools to stack, unstack, split columns, etc, so the conversion between array and list of `Dense` is easy and efficient. For scipy integrators, that would only need to change 3 methods. Would that work on the HEOM side?; This mean we would need specialised integrator in JAX etc, but would be a lot easier than the stochastic ones so I don't think it's an issue. Changing the `QobjEvo` would be more work, but doable.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2384#issuecomment-2310307934:419,efficient,efficient,419,https://qutip.org,https://github.com/qutip/qutip/issues/2384#issuecomment-2310307934,1,['efficient'],['efficient']
Energy Efficiency,"The green line is after the first commit of this pull request where I used a for loop. The orange line is after the second commit when I switched to using numpy.cumprod.; The red line is from the quantum optics framework written in julia that I'm currently working on (https://github.com/bastikr/QuantumOptics.jl). While doing some benchmarks I realized that for large N qutips coherent function failed which is why I wrote this patch. I don't know where the constant offset in the benchmark originates from but I think the speed is fine now, creating coherent states is probably never a bottleneck anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/683#issuecomment-292929031:4,green,green,4,https://qutip.org,https://github.com/qutip/qutip/pull/683#issuecomment-292929031,1,['green'],['green']
Energy Efficiency,"The original purpose behind the files was to aid debugging, firstly of the library, then of implementations. Now it turns out that some of the 'test out files' are useful in terms of analysis, e.g. the iteration log, and so I generally have this turned on. Often the optimisation can take a long time, and hence having the files written out during the process can be useful to monitor progress. Also, sometimes the processing is terminated early (by the scheduler on the cluster we use), and so having some filesystem output can mean that some kind of result can be extracted. All this being said, I can see your point that some kind of 'run data' container object would be a better method, as the data could be used interactively. Perhaps users could then optionally chose to save this at the end or during the run, whichever suits them. I can add this to my todo list.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/313#issuecomment-73030236:377,monitor,monitor,377,https://qutip.org,https://github.com/qutip/qutip/pull/313#issuecomment-73030236,2,"['monitor', 'schedul']","['monitor', 'scheduler']"
Energy Efficiency,"The particular example that was given as an MKL error, is a tricky problem. Seems that the MKL cannot solve for it in the `power` steady mode. As such, I have implemented a 'solver' kwarg that allows for picking the solver that is used in the direct and power methods. The default is SciPy, which could be the usual SuperLU solver, or UMFPACK, if installed via scikits.umfpack. The 'mkl' option can be passed to do the mkl library. I will see what the Intel people have to say about solving the particular matrix that was given:. https://groups.google.com/d/msg/qutip/axGZ-7vtnhI/2Rlsl7ExAgAJ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/720#issuecomment-315449568:123,power,power,123,https://qutip.org,https://github.com/qutip/qutip/pull/720#issuecomment-315449568,2,['power'],['power']
Energy Efficiency,"The reason is the same as for https://github.com/qutip/qutip/issues/1265. The pulse starts with 0 for a long time and the adaptive solver skips the real part of the pulse. You need to set `max_step` in `qutip.Options`. You can see this by setting a very small but none-zero value:; ```python; def func(t, *args):; omega_R = 2e-3; if t <100:; return 0.00001; elif t>600:; return 0.00001; else:; return 2*np.pi*omega_R; ```; The result is correct. I'll close it for now but please feel free to ask further questions if there are any.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1945#issuecomment-1168748566:122,adapt,adaptive,122,https://qutip.org,https://github.com/qutip/qutip/issues/1945#issuecomment-1168748566,1,['adapt'],['adaptive']
Energy Efficiency,"The state you defined is a pure state, so even if you write it as a density matrix it has zero entropy.; So that output is correct. The entropy being 1 for a Bell state is true when you trace out one of the two systems, so that the reduced state is now mixed,; e.g., ; ```; RR2=ptrace(RR,0); print(entropy_vn(RR2, base=2, sparse=False)). ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1078#issuecomment-526821321:232,reduce,reduced,232,https://qutip.org,https://github.com/qutip/qutip/issues/1078#issuecomment-526821321,1,['reduce'],['reduced']
Energy Efficiency,"There are two return values, as indicated. Ground state energy and ground state itself.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/805#issuecomment-360856097:56,energy,energy,56,https://qutip.org,https://github.com/qutip/qutip/issues/805#issuecomment-360856097,1,['energy'],['energy']
Energy Efficiency,"There is nothing in the heom ode solve that is not in the mesolve. mesolve can take superop L, that is solve dp/dt = L(t) p, just so long as L(t) = f1(t)L1 + f2(t)L2 ...; I have given some thought to how we can have a more general L(t), in the context of the heom, where for instance we might want to have time-dependent Matsubara terms. These would then occur many times in elements of the L, and so could potentially be solved efficiently. I'll add it to my list of things to discuss with @Ericgig when we meet in a few weeks. The new `QobjEvo` may perhaps have gone some way in this direction already.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-461018021:429,efficient,efficiently,429,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-461018021,1,['efficient'],['efficiently']
Energy Efficiency,"There's another interesting technique that's sometimes applicable in these sort of repeating cases. Rather than passing a list of the same elements to `tensor`, you can also consider building up the tensor product manually, going up in powers of two. So you go along with something like:; ```python; out, tmp = H, H; for i in n.bit_length():; tmp = tensor(tmp, tmp); if n & (1 << i):; out = tensor(out, tmp); ```; (very very approximately - I've almost certainly got the indexing wrong). The idea is that you only perform `lg(n)` tensor products. Now, this might not actually give you much of a speed up in this case, because the calculation is still going to be dominated by the final tensor product, since the output matrix keeps getting larger. But in things like integer matrix powers, bigint calculations, or binomial expansions, this type of thing can be super useful! QuTiP 5 uses an algorithm like this for matrix powers. (I imagine SciPy does too, but for all the normal reasons, we don't use their implementation.). *edit*: here it is: https://github.com/qutip/qutip/blob/559387e68eb2b07064d2ae6099fbdc81ea96d67c/qutip/core/data/pow.pyx#L17-L39",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1688#issuecomment-942580997:236,power,powers,236,https://qutip.org,https://github.com/qutip/qutip/pull/1688#issuecomment-942580997,3,['power'],['powers']
Energy Efficiency,"These failing tests are different from those random failing we've been seeing before. I also have this in my scheduler PR, but it is completely unrelated to the PR. It starts to appear yesterday, but nothing was merged in the last three weeks. Does anyone have a clue?. The error seems to come from the core data part @jakelishman @Ericgig. Scipy made a release 4 days ago and we are using one of the private attributes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-649280292:109,schedul,scheduler,109,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-649280292,1,['schedul'],['scheduler']
Energy Efficiency,"This is not a bug in QuTiP _per se_, but an artifact of the Fock space cutoff. In a numerical calculation, we can only use finite matrices, but the ladder operators can not be represented with finite matrices (Stone-von Neumann theorem). You can try printing `a * a.dag() - a.dag() * a` for different values of `dim`. You will find that it gives the expected result (identity matrix) except in the very bottom right matrix element. That matrix element however deviates a lot, and the more you increase `dims` the more it will deviate. So if you compute the trace distance of `a * a.dag()` and `a.dag() * a + 1`, you will get a large number instead of zero. In your example, the basic problem is the same. Usually this is not a problem because we assume the cutoff is larger than the number of excitations in any state we are looking at. In other words, in vector form, the bottom-most entries of any state are very (exponentially) small, and the deviations in the operators in those entries then don't play a role. However, when calculating a norm (such as the trace distance), entries corresponding to low-energy states or to high-energy states contribute equally, and we can get nonsensical results. You could try projecting out high-energy states before calculating the norm:; ```; dim = 25; dim2 = 10. a = destroy(dim); D = (a.dag() - a).expm(); a_displaced = D.dag() * a * D. proj = sum(projection(dim, i, i) for i in range(dim2)); diff = a_displaced - (a + 1); print((proj * diff * proj).norm('tr')); # 1.3039375636172088e-07; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2495#issuecomment-2245373244:1107,energy,energy,1107,https://qutip.org,https://github.com/qutip/qutip/issues/2495#issuecomment-2245373244,3,['energy'],['energy']
Energy Efficiency,"Update: I managed to find the propagator in a somewhat makeshift manner by sending an identity matrix to mesolve (although with reduced dimensions than in the code above):. ```shell; results = mesolve(H, psi_0, t, c_ops = c_ops) ### Dimensions here are [2,2,2] as compared to [3,3,7] above; plt.plot(t, expect(a_u.dag() * a_u, results.states), label=""mesolve""); for i in range(len(t)):; rho_vec = mat2vec(ρ0.full()); rho_T = Qobj(vec2mat(U_me.states[i].data * rho_vec), dims = ρ0.dims); plt.plot(t[i], expect(a_u.dag() * a_u, rho_T), ""x"", color=""orange""); plt.ylabel(""Population""); plt.xlabel(""Time""); plt.legend(); plt.show(); ```. ![image](https://github.com/user-attachments/assets/f65f25df-db91-49d6-a92a-77c3dced0900). If there's a better way of doing it, please let me know!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2532#issuecomment-2357056333:128,reduce,reduced,128,https://qutip.org,https://github.com/qutip/qutip/issues/2532#issuecomment-2357056333,1,['reduce'],['reduced']
Energy Efficiency,We do have the charge operator.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/562#issuecomment-263789028:15,charge,charge,15,https://qutip.org,https://github.com/qutip/qutip/issues/562#issuecomment-263789028,1,['charge'],['charge']
Energy Efficiency,"We don't use the same code for the sparse addition as in `v4`. v5 sparse addition is quite faster. But I expect it to be slower for 100 additions of 50 elements since you need to allocate memory for the 100 intermediate results, while for 1 addition with 5000 elements, there is only one memory allocation. But if you want to have a go at optimizing our basic operations, we will welcome any improvements.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2298#issuecomment-1904497811:179,allocate,allocate,179,https://qutip.org,https://github.com/qutip/qutip/issues/2298#issuecomment-1904497811,1,['allocate'],['allocate']
Energy Efficiency,"We ran into the ""Illegal Instruction"" problem too when using the conda qutip package (4.2.0-np113py36_2). Building qutip from source within the same conda environment produced a working qutip. Details of the processor on which the failure was observed:. model name	: Intel(R) Core(TM)2 Duo CPU E8400 @ 3.00GHz; flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good nopl aperfmperf pni dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm sse4_1 xsave lahf_lm dtherm tpr_shadow vnmi flexpriority. $ uname -a; Linux plantain 3.16.0-4-amd64 #1 SMP Debian 3.16.43-2+deb8u2 (2017-06-26) x86_64 GNU/Linux",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-318765815:525,monitor,monitor,525,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-318765815,1,['monitor'],['monitor']
Energy Efficiency,"Well, unitarity just doesn't come into it, and conjugating with non-unitary operators is a very natural thing to do for most qutip users. So I have thought a quite a bit about this, and this is ultimately @jrjohansson and @nonhermitian's decision, but I don't think assuming ""conjugation"" is a good idea, for the following reasons:. 1) It is inconsistent with the behavior of `tensor()`, which interprets `tensor(O,psi)`, where `O` is an operator and `psi` a ket, in dirac notation. This is actually a very powerful functionality, and follows the general idea that coding in qutip should be as similar to writing in dirac notation as possible (within reason). As an example, here is how you can do a partial trace:. ```; In [14]: rho = rand_dm(4,dims=[[2,2],[2,2]]). In [15]: out = Qobj(). In [16]: for i in range(2):; out += tensor(qeye(2),basis(2,i).dag())*rho*tensor(qeye(2),basis(2,i)); ....:. In [17]: out; Out[17]:; Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isherm = True; Qobj data =; [[ 0.39666875+0.j 0.13801792+0.01223399j]; [ 0.13801792-0.01223399j 0.60333125+0.j ]]. In [18]: rho.ptrace(0); Out[18]:; Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isherm = True; Qobj data =; [[ 0.39666875+0.j 0.13801792+0.01223399j]; [ 0.13801792-0.01223399j 0.60333125+0.j ]]; ```. Of course you can do far more general things than that.. you can pretty much do anything you can write in dirac notation. Similar behavior on the level of super-operators and operator-vectors, as suggested by @jrjohansson, earlier in this thread, would be similarly very powerful. For example, in the language of tensor networks, it would allow you to do arbitrary wire-bending operations using the maximally entangled state, as in the [paper](http://arxiv.org/abs/1111.6950) by Chris Wood et al., that @cgranade mentioned in relation to #238. As of now there is no convenient (i.e., ""index free"") way to do this (correct me if I am wrong), except explicitly performing the correspo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-58035991:507,power,powerful,507,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-58035991,1,['power'],['powerful']
Energy Efficiency,"What do you think is more efficient than doing; ```python; states = [qutip.basis(2, 0), qutip.basis(2, 1)]; results = [qutip.sesolve(H, state, times) for state in states]; ```; ?. I'm saying that to do each state independently, `mesolve` and `sesolve` have to independently integrate each state, so even if we added this functionality into those functions directly, it would be little more than that loop I just wrote if you have used the tools I described in the first comment. If you want the entire system propagator, `qutip.propagator` can calculate that for you. Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple, but if you have very specific domain knowledge of your system, you often will be able to write an integrator which is faster for your cases, rather than the full general-purposes ones in QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465:26,efficient,efficient,26,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465,1,['efficient'],['efficient']
Energy Efficiency,"What's wrong with just using a loop? Adding the `combine` statement is already extra work for you, and using the solver in a loop will be much clearer about what's going on. The `Qobj` object container is not meant to a vector of objects itself - use a list for that, or a numpy array if you're only going to do simple mathematical operations that you want broadcasting for (numpy will broadcast `*`, `/`, `+`, `-` and `**` correctly). The calculational complexity of the solver isn't helped by knowing you're going to do it a few times, but there are some setup costs that QuTiP already gives you the tools to alleviate. `mesolve` constructs a Liouvillian out the Hamiltonian and collapse operators; if you want to reuse the result of this, you should use `qutip.liouvillian` and `qutip.QobjEvo`, and use the `compile` method of the latter. You can pass the result of this directly as the `H` parameter of `mesolve` and it'll skip all the setup. There is some work going on about making a class-based interface to the solvers, which allows easier use of the tools to reduce setup time, but those likely won't be released for some time yet. In the meantime, just use a loop here. There will not be a notable slow down (unlike numpy maths operations) because the Python iteration over elements takes a negligible amount of time compared to single numerical intergration. As a side note, in this particular case you're doing unitary dynamics with state vectors, so this call to `mesolve` is actually translated into one to `sesolve`, which does not need to construct the Liouvillian.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774:1068,reduce,reduce,1068,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774,1,['reduce'],['reduce']
Energy Efficiency,"When I ran against @dick-t's example, it still violated the bound F ≤ 1, but by significantly less than before, as can be confirmed by the [success of `test_fidelity_bounded_purepure`](https://github.com/qutip/qutip/pull/362/files#diff-3e3c19be6d013d22c4823607e07cd240R106), introduced by #362. That PR doesn't fully adapt to the pure vs pure case that @dick-t lists, but it does avoid `sqrtm` in that case. I can fully specialize to that case, if you like, by using the inner product of the two pure states.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/361#issuecomment-134930346:317,adapt,adapt,317,https://qutip.org,https://github.com/qutip/qutip/issues/361#issuecomment-134930346,1,['adapt'],['adapt']
Energy Efficiency,"Yeah, I would think so too. Most of the times the energy gap is quite large compared to calculation errors.; But I'm really a newbie, so I'm not sure what the day-to-day users need. It would be great if a contributor could pitch in if this is a good idea.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1800#issuecomment-1103429187:50,energy,energy,50,https://qutip.org,https://github.com/qutip/qutip/issues/1800#issuecomment-1103429187,1,['energy'],['energy']
Energy Efficiency,"Yeah, `create` isn't fully done - it's basically the last resort for turning user input into a data-layer type, so it's not very important that it's efficient. We'll say in the documentation that it's preferable to create a `Dense` or `CSR` instance and pass that it, but have `data.create` as the backup to allow everything to ""just work"", albeit slowly. It will probably have an `add_creators` method, which will be similar to `add_specialisations` and `add_conversions`, but it'll only take an output type, a function and a priority. Then it'll probably just be a loop of `try: create(input); except: pass` until a creator succeeds. About the `*_csr` still used in `Qobj`: yes, these are deliberately left as-is in this PR, so as not to bulk up the files changed. There'll be a new PR to add those, and others to add more specialisations between `Dense` and `CSR`. Right now I'm writing a completely orthogonal PR updating the `pytest`, `coverage` and Coveralls support for `dev.major`. I'm not yet backporting that to the 4.X branch because the `sparse_routines.pxi` file complicates matters for the coverage, apparently...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338#issuecomment-679246318:149,efficient,efficient,149,https://qutip.org,https://github.com/qutip/qutip/pull/1338#issuecomment-679246318,1,['efficient'],['efficient']
Energy Efficiency,"Yeah, auto-tidyup should be a function of CSR matrices only. It doesn't make sense for dense matrices to have it, that's just burning cycles. As Asier mentioned, you already can't rely on floating-point operations being exactly identical between different matrix types, so there's no particular problem there. The point about auto-differentiation is an excellent reason that it must be allowed to vary between types as well. To be honest, I'm not sure how many cases the auto-tidyup operation actually helps in keeping things efficient. It may well be worth us having a proper investigation, and seeing how often it actually helps. I can tweak the addition and matrix-multiplication sparse algorithms to automatically tidy up when generating their output (if they don't already...), in which case we could probably entirely remove all ""automatic"" tidyup, and just have it be a manual operation?. `isherm_csr_full` is actually explicitly meant to handle all cases, _especially_ those involving matrices that have not been tidied up. The logic is actually sound (it's been deployed in `master` for a while now), but looks like there's a typo made when I handled the merge up, and the data-layer is missing a few of its mathematical tests so it didn't get spotted. I'll fix that now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1610#issuecomment-882040752:526,efficient,efficient,526,https://qutip.org,https://github.com/qutip/qutip/pull/1610#issuecomment-882040752,1,['efficient'],['efficient']
Energy Efficiency,"Yeah, definitely there's no point running tests that aren't really testing the package properly. I would hope that if we're much more aggressive about converting time-dependent lists into QobjEvo objects inside `mesolve`, `mcsolve` and `sesolve` (or the class-based versions of them), we could significantly reduce the amount of testing that needs to be done with them. Most of the tests of time-dependent formats would then occur in the QobjEvo tests. We could still test all the configurations of the solvers without too heavy a time penalty. If we only use a small number of different time-dependent operators, we can compile them all only once, and have `pytest` manage the resources through shared fixtures. That would really cut down the run times, especially for the current ""slow"" tests. Another avenue for cutting down run time is if we could merge say the MKL and OpenMP tests into one Travis job - the setup time for one job is about 2.5 minutes, and that's before any tests have run at all. I would hazard a guess that having MKL but not OpenMP is a pretty rare case (maybe more common on high-performance clusters where people submit single-cpu jobs?).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604348182:308,reduce,reduce,308,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604348182,1,['reduce'],['reduce']
Energy Efficiency,"Yeah, in the context of #850, I was only thinking of a global switch for the storage format. But #437 makes a good point about using full storage. I'd add to that the [Lapack banded storage format](http://www.netlib.org/lapack/lug/node124.html) which is extremely efficient for diagonal or tri-diagonal operators (or scipy's [DIA](https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_matrix.html#scipy.sparse.dia_matrix), which I think is mostly equivalent). I've actually had to solve the equivalent problem of allowing multiple internal formats in the [Fortran QDYN package](https://www.qdyn-library.net), so I'm not sure why I didn't think of that in the first place ;-). I can definitely vouch for the efficiency gained by being able to switch internal sparse representations. So yeah, you'd definitely have the most flexible solution by allowing `Qobj.data` to use varying storage classes from object to object. Maybe the ""protocol"" could be for `Qobj.data` to be any subclass of the [scipy `spmatrix` base class]( https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.spmatrix.html#scipy.sparse.spmatrix)? Then the `Qobj` constructor would probably need an additional parameter `format` for the class that should be used to convert the `inpt` argument to the `data` attribute. The onus would then be on Scipy to provide a full matrix that is a subtype of `scipy.spmatrix` (just to keep the interface contract), and also to have `int64` versions of all their existing sparse classes. From a community standpoint, it would seem like one would get much more bang for the buck to have this problem solved inside SciPy, instead of doing a lot of low-level stuff in QuTiP -- at least if they're amenable to pull requests, but worst case you can still define necessary new `scipy.spmatrix` subclasses externally. Take all of my musings with a little grain of salt... I never really looked too deep into QuTiP's low-level internals, specifically where QuTiP is using Cython.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-383937610:264,efficient,efficient,264,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-383937610,1,['efficient'],['efficient']
Energy Efficiency,Yes I would agree that this is not something that we will add to qutip at least not directly. Of course if someone wants to add such features then more power to them. Like Rob I think that time is better spent optimizing qutip.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/48#issuecomment-27613005:152,power,power,152,https://qutip.org,https://github.com/qutip/qutip/pull/48#issuecomment-27613005,1,['power'],['power']
Energy Efficiency,"Yes, I did the mkl.set_num_threads. This is my test script. ```; import numpy as np; import timeit. NUM_THREADS = 1. try:; import mkl; use_mkl = True; except:; use_mkl = False. def timing(f):; def wrap(*args):; time1 = timeit.default_timer(); ret = f(*args); time2 = timeit.default_timer(); print('{} function took {:0.3f} ms'.format(f.__name__, (time2-time1)*1000.0)); return ret; return wrap. if use_mkl:; mkl.set_num_threads(NUM_THREADS); print(""Number of threads is {}"".format(mkl.get_max_threads())); else:; print(""mkl unavailable""). d = 10000; n_reps = 10; A = np.random.random([d, d]). print(""Starting tests""). @timing; def calc_exp(A):; for i in range(n_reps):; E = np.exp(A). calc_exp(A); ```. Whether I set NUM_THREADS to 1 or 4 I only see one processor active in system monitor, and the processing time is the same. This is what starting me looking into whether I should expect numpy / scipy to use multiple cores. The articles I read suggested that numpy and scipy do not contain any intrinsic parallelisation. It may have been out-of-date. Now I just tried a similar test with scipy.linalg.expm and it did use multiple processors and was approximately twice as fast with 4 than with 1.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/462#issuecomment-207490289:781,monitor,monitor,781,https://qutip.org,https://github.com/qutip/qutip/issues/462#issuecomment-207490289,1,['monitor'],['monitor']
Energy Efficiency,"Yes, perhaps there is room for making this easier and more efficient. I see that in the non-markovian methods like qutip.nonmarkov.heom, this is possible by constructing a superoperator L(t) and then using the standard ODE solver. Do you think we can tweak mesolve somehow to do this?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-461000423:59,efficient,efficient,59,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-461000423,1,['efficient'],['efficient']
Energy Efficiency,"Yes, these are the implementation issues I discussed. Calling the ode solver of course takes small steps, with the step size based on the requested tolerance level. Our root finding is trivial in this case. We linearize the evolution and then find the intercept. It almost always works in a single step, and is quite efficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/344#issuecomment-105092235:317,efficient,efficient,317,https://qutip.org,https://github.com/qutip/qutip/issues/344#issuecomment-105092235,1,['efficient'],['efficient']
Energy Efficiency,"Yes. I will change it. It's recommended to use a loop instead of reduce in; python3. On Tue 16 Jan, 2018, 9:21 AM Neill Lambert, <notifications@github.com>; wrote:. > Might need to import mul as well. I think its; >; > from operator import mul; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/795#issuecomment-357818629>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AGpUBEgg2l0XCXLVol-x-Npy16LF3j_iks5tK-uMgaJpZM4Rdnnh>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/795#issuecomment-357826970:65,reduce,reduce,65,https://qutip.org,https://github.com/qutip/qutip/pull/795#issuecomment-357826970,1,['reduce'],['reduce']
Energy Efficiency,[![Coverage Status](https://coveralls.io/builds/36512426/badge)](https://coveralls.io/builds/36512426). Coverage increased (+0.05%) to 63.454% when pulling **9e080a769cf147c31de25cb7e219168cdb631689 on BoxiLi:scheduler** into **c719cbe13c69b18741c67578e720b654984afd7c on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1273#issuecomment-650731854:209,schedul,scheduler,209,https://qutip.org,https://github.com/qutip/qutip/pull/1273#issuecomment-650731854,1,['schedul'],['scheduler']
Energy Efficiency,"`auto-tidyup` exist to remove 0s stored in sparse matrices. `auto-tidyup` is quite messy, rounding all values under 1e-12 to 0 per default after each matrix operation can only cause problems. . As for the benchmark, why ask for dense operations to add an extra step to increase their outputs error to the same level as sparse operations so their benchmark do not look to good in comparisons. I think it is fair that the sparse operation's timing include the time needed to manage it's structure. . For auto-differentiation, if operations included are done with `Qobj`, it would have to differentiate tidy-up steps after each operation. But since the tidy-up operation does not have a clean derivative (`out[out < 1e-12] = 0`) it will make the auto-differentiation very inefficient. I see `auto-tidyup` more as a necessary evil to keep sparse matrix efficient. I would argue that we should not have `auto-tidyup` in `Qobj` and have sparse matrix operation clean themselves instead.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1610#issuecomment-881709826:849,efficient,efficient,849,https://qutip.org,https://github.com/qutip/qutip/pull/1610#issuecomment-881709826,1,['efficient'],['efficient']
Energy Efficiency,"`general_stochastic` is very manual, halfway to scipy's ode solver. It can be used for both open and closed system and does not correspond to any particular physics equation. It the function that you use if you do weird stuff that does not fit already available template and I would discourage it's use. ; If other type of stochastic evolution are commonly used, it would be better to make a new specialized function than use `general_stochastic`. Old example should be adapted to `smesolve` as much as possible. The solver does not know if it is solving an close or open system (or something else). So e_ops are not touched. ; d1, d2 are working in array for performance issue. We could easily have them work in Qobj, but I would expect a significant slowdown. These function, taking no args, and being call many time at each step could benefit from being compiled with numba.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1115#issuecomment-546958283:470,adapt,adapted,470,https://qutip.org,https://github.com/qutip/qutip/pull/1115#issuecomment-546958283,1,['adapt'],['adapted']
Energy Efficiency,"antum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class `Processor` and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > `qutip.qip.noise` to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (`qutip.qip.circuit`). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; >; > ### Expected outcomes; > - More devices defined in the `qutip.qip.device` module. At the moment, we; > have two models: spin chain and cavity QED. We would like to include some; > other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in `qutip.qip.device` and; > `qutip.qip.compiler`; > - Refactoring the circuit compiler to allow simple pulse scheduling, e.g.; > Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other soft",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:2023,schedul,schedule,2023,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['schedul'],['schedule']
Energy Efficiency,"are you saying . ```python; states = [qutip.basis(2, 0), qutip.basis(2, 1)]; results = [qutip.sesolve(H, state, times) for state in states]; ```. is **most** efficient?. even more efficient than. ```python; U = qutip.propagator(H, times); states = [qutip.basis(2, 0), qutip.basis(2, 1)]; results = [U*state for state in states]; ```. ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660472577:158,efficient,efficient,158,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660472577,2,['efficient'],['efficient']
Energy Efficiency,"cal. ; (And in quantum mechanics negative values is not much different from any other complex value.). On 26 Apr 2014, at 18:55, Robert Johansson notifications@github.com wrote:. > OK, I see. complex_array_to_rgb could be useful in other contexts as well. I am not aware of any standard way of doing this, but if you are interested in this kind of mapping you might want to have a look at a similar mapping of complex values to color that we have in the function matrix_histogram_complex. In that case we map only the phase to the color, and the magnitude is shown by the bar heights, but if you map the magnitude to the alpha channel or the overall intensity you get something the is similar to what you use. For example, with the code from matrix_histogram_complex you get something like; > ; > x = np.linspace(-5, 5, 100); > X, Y = np.meshgrid(x,x); > Z = X + 1j \* Y; > cdict = {'blue': ((0.00, 0.0, 0.0),; > (0.25, 0.0, 0.0),; > (0.50, 1.0, 1.0),; > (0.75, 1.0, 1.0),; > (1.00, 0.0, 0.0)),; > 'green': ((0.00, 0.0, 0.0),; > (0.25, 1.0, 1.0),; > (0.50, 0.0, 0.0),; > (0.75, 1.0, 1.0),; > (1.00, 0.0, 0.0)),; > 'red': ((0.00, 1.0, 1.0),; > (0.25, 0.5, 0.5),; > (0.50, 0.0, 0.0),; > (0.75, 0.0, 0.0),; > (1.00, 1.0, 1.0))}; > ; > cmap = mpl.colors.LinearSegmentedColormap('phase_colormap', cdict, 256); > norm = mpl.colors.Normalize(-pi, pi); > colors = cmap(norm(np.angle(Z))); > colors[:,:,3] = sqrt(abs(Z)) / sqrt(abs(Z)).max(); > ; > plt.imshow(colors, interpolation='none');; > which produces the following map of the complex plane:; > ; > compared to; > ; > plt.imshow(complex_array_to_rgb(Z), interpolation='none');; > which produces; > ; > Either mapping is fine of course, but I think a nice property of the first one is that real numbers and imaginary numbers are mapped to simple colors (real positive->blue, negative->red and imaginary positive green, imaginary negative turquoise), and complex number with both real and imaginary part are mapped to colors that are relatively simple to ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41480460:1410,green,green,1410,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41480460,1,['green'],['green']
Energy Efficiency,"ctionality, and follows the general idea that coding in qutip should be as similar to writing in dirac notation as possible (within reason). As an example, here is how you can do a partial trace:. ```; In [14]: rho = rand_dm(4,dims=[[2,2],[2,2]]). In [15]: out = Qobj(). In [16]: for i in range(2):; out += tensor(qeye(2),basis(2,i).dag())*rho*tensor(qeye(2),basis(2,i)); ....:. In [17]: out; Out[17]:; Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isherm = True; Qobj data =; [[ 0.39666875+0.j 0.13801792+0.01223399j]; [ 0.13801792-0.01223399j 0.60333125+0.j ]]. In [18]: rho.ptrace(0); Out[18]:; Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isherm = True; Qobj data =; [[ 0.39666875+0.j 0.13801792+0.01223399j]; [ 0.13801792-0.01223399j 0.60333125+0.j ]]; ```. Of course you can do far more general things than that.. you can pretty much do anything you can write in dirac notation. Similar behavior on the level of super-operators and operator-vectors, as suggested by @jrjohansson, earlier in this thread, would be similarly very powerful. For example, in the language of tensor networks, it would allow you to do arbitrary wire-bending operations using the maximally entangled state, as in the [paper](http://arxiv.org/abs/1111.6950) by Chris Wood et al., that @cgranade mentioned in relation to #238. As of now there is no convenient (i.e., ""index free"") way to do this (correct me if I am wrong), except explicitly performing the corresponding partial transpose directly on the underlying matrix data. 2) In the absence of this functionality it is a bad idea to assume something else. Assuming conjugation is unexpected behavior, and besides it is something the user can easily do him/herself by using `to_super()`. It is way better to ""force"" the user to be explicit about things by throwing an `Exception`, than assuming something that might be unexpected. It enforces good coding style, giving more readable code, and avoids code that will break if the f",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-58035991:1590,power,powerful,1590,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-58035991,1,['power'],['powerful']
Energy Efficiency,"ded in a similar way to Julia. Say you want to define `matmul` between `Dense` on the left and `CSR` on the right to produce a `CSR` output (a specialisation that we likely won't ship with because it's unlikely to be efficient). You'd write your function; ```python; def matmul_dense_csr_csr(left, right):; ...; return out; ```; and then because unlike Julia it's not built-in, you just manually add it to the dispatch table for `matmul`:; ```python; qutip.data.matmul.add_specialisations(matmul_dense_csr_csr, (Dense, CSR), CSR); ```; QuTiP then knows about it, so it'll get used when appropriate. You can also add entirely new types to the dispatch table by adding them to the ""cast"" table `qutip.data.to`, giving at least one method to convert the new type into an already-known one, and at least one method to convert an already-known type into the new type. QuTiP will then be able to use the entirely new type as `Qobj.data` for every single operation within the library (though it won't be super efficient until you add the linear algebra specialisations you use most). This actually goes a bit beyond what Julia does (at least as far as I know), because QuTiP's new system ""completes"" the dispatch table for all known types automatically; when it's asked to do say `kron` on two types it doesn't have a specialisation for, it'll cast the inputs through a path of least weight into a specialisation it _does_ know, and then use that. The desired casting rules and preferred output types can be altered dynamically at run-time as well. While I put a lot of effort into making this as fast as possible (and naturally a constant-time operation with respect to the number of known types and specialisations), of course the penalty we pay is a small run-time cost of type look-ups and dispatch (<1µs, but that's dwarfed by the cost of the operations themselves). We will have a hook for creating ""data-layer types"" out of arbitrary inputs, but we weren't heavily focussing on this at all; it seems r",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:5889,efficient,efficient,5889,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['efficient'],['efficient']
Energy Efficiency,"e, scaling, Pade, then squaring. The SciPy dense and sparse expm uses the same Higham algorithm as Matlab, so it should be good.; - Paul. > On Apr 8, 2016, at 08:38, Alexander Pitchford notifications@github.com wrote:; > ; > I tried some experiments with elementwise exp with numpy to see if mkl did any parallel processing. It did not seem to.; > ; > scipy.linalg.expm claims to use the Pade approximation. There used to be a expm2 (that used diagonalisation) and an expm3 (method?) but these have been deprecated. The scipy docs claim that the method used in expm is ""numerically more robust"".; > ; > In the control modules we either use a eigendecomp (diagonalisation) method or scipy.linalg.expm_frechet as we typically need to compute propagators (which either uses the eigendecomp or is provided by the frechet deriv) . Frechet also uses some Pade approximation. I think the Pade method uses something like a LU decomp, but would need more research. It would always be more efficient to use the eigendecomp if it has been computed already.; > ; > My guess is that if parallel LU decomp provides much (x100) faster eigendecomp, then the diagonalisation method would be much faster than expm. However, some experimentation would be needed to verify.; > ; > I am told that there are many methods of computing expm, and is there is much numerical research into it. It seems strange that scipy only offer us one method. The spinach control library (http://spindynamics.org/Spinach.php http://spindynamics.org/Spinach.php) reputedly has some interesting methods of computing expm.; > ; > A quick Google search found scipy/scipy#354 https://github.com/scipy/scipy/pull/354, which shows that scipy considered adding a method kwarg, but have parked the idea.; > ; > We currently have multiple methods in qutip based. I assume there must have been some motivation for writing our own sparse matrix functions for expm. It would seem that a pretty thorough investigation would be required determine to valu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/462#issuecomment-207466362:1542,efficient,efficient,1542,https://qutip.org,https://github.com/qutip/qutip/issues/462#issuecomment-207466362,1,['efficient'],['efficient']
Energy Efficiency,"e, the qutip.qip module now contains the noisy quantum circuit simulator (which was a GSoC project) providing enhanced features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `qutip.qip.device` and `qutip.qip.compiler`; - Refactoring the circuit compiler to allow simple pulse scheduling, e.g. Restriction one pulses that can be turned on at the same time.; - Features to perform error mitigation techniques in QuTiP, such as zero-error extrapolation.; - APIs to allow import quantum circuits from other software packages or commonly used language e.g. th",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:1374,schedul,schedule,1374,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['schedul'],['schedule']
Energy Efficiency,"ed features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `qutip.qip.device` and `qutip.qip.compiler`; - Refactoring the circuit compiler to allow simple pulse scheduling, e.g. Restriction one pulses that can be turned on at the same time.; - Features to perform error mitigation techniques in QuTiP, such as zero-error extrapolation.; - APIs to allow import quantum circuits from other software packages or commonly used language e.g. through quantum assembly language (qasm); ----------------------------------------------------------------. Best; Boxi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:2107,schedul,scheduling,2107,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['schedul'],['scheduling']
Energy Efficiency,"elog. #### <code>test_krylovsolve.py</code>. * [x] We have <code>qutip.rand_herm</code> for a random hamiltonian. --> **Changed**; * [x] Isn't <code>h_sho</code> equivalent to <code>U=qutip.rand_unitary_haar(dim) \ return U* (qutip.num(dim)+0.5)*U.dag()</code> ? --> **We can test it with that one**.; * [x] Clean imports on <code>test_krylovsolve</code>; <code>qeye</code> imported twice, <code>run_module_suite</code> never used, etc.; * [x] Header no longer used. --> **Removed.**; * [x] Why is <code>os.environ['QUTIP_GRAPHICS'] = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:1010,efficient,efficiently,1010,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['efficient'],['efficiently']
Energy Efficiency,"emal eigenvalues: that is, eigenvalues with large magnitudes. In particular, using which = 'SM' may lead to slow execution time and/or anomalous results. A better approach is to use shift-invert mode."". See also the example on that page. I tried using the 'shift-invert mode' as suggested, and that gave better results. But, they are still pretty bad for the problem I want to solve: I'm trying to find the low lying spectrum for a very large Liouvillian, as I vary a single external Hamiltonian parameter. The smallest one (in magnitude) is always zero, and all others are negative. Supposedly, the vanishing of the real part of the eigenvalue with the second largest (closest to zero) real part can be useful for characterizing phase transitions, see, for example, this recent paper: http://prl.aps.org/abstract/PRL/v110/i15/e150401. I attach a plot where I have computed the eigenvalue with second largest real part (which is also the one with second smallest magnitude; the two criteria coincide) using 1) scipy.linalg.eigvals (green line) and 2) scipy.sparse.linalg.eigs (blue line): https://dl.dropboxusercontent.com/u/6042643/liouvspec.png. As you can see, the results from the sparse solver are pretty poor (I assume the dense solver results are correct). . As far as the physics goes: Another thing to notice is that the system goes through phase transitions at -2.0, 0.5 and 2.0 for the parameter along the x-axis, and there are no signs of that in the plot. On a side note, I also wasn't able to reproduce Fig 2(a), middle panel, of the PRL paper I linked to, although I got qualitative agreement if I tried with different parameters than what is quoted in the figure caption. Do you by any chance happen to have any experience with this way of characterizing dynamical phase transitions?. I might try to make a simpler example illustrating the problem later. The Liouvillian I am considering now is too big to use as an example, as using the dense solver requires a huge amount of memory.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/16#issuecomment-16416062:1363,green,green,1363,https://qutip.org,https://github.com/qutip/qutip/issues/16#issuecomment-16416062,1,['green'],['green']
Energy Efficiency,"er than a hard limit, but it's a good rule of thumb for testing one piece of functionality. [Here's a (slightly out-dated) list of our current longest tests](https://github.com/qutip/qutip/issues/1217#issuecomment-604116373), bearing in mind that some of those ones actually test many many things in the same test function. The test seems structured ok to me. Certainly the testing algorithm isn't the major cause of speed loss. You could try timing some ""real-world"" examples of using your measurements, and try running them in a profiler to see if there are any obvious ways to speed things up. With any luck the new data-layer tools and the possibility of using dense `Qobj` storage will give you a fair amount of speed-up once they're complete, since I imagine in your small circuit you're paying quite a lot of sparse matrix overhead. I'll prefix this last part with: _you should always profile your code before optimising it_. That said, let me wildly break that rule and guess at where I think you'll find big speed-ups: caching and pre-computation. If you know you're going to run the same thing loads and loads of times, then you shouldn't have to call `self.propagators` each time, or build `measurement_ops` inside `measure_comp_basis`. Do those once at the start of `run_statistics`, and save them. Minor things that _may_ speed up - check the profiling!; 1. ""compress"" the output of `self.propagators`: consecutive propagators with no measurements or classical controls inbetween can be pre-multiplied together at the start to make one matrix. This will save you ~3 matrix multiplications per run in the test.; 2. use more efficient ways to construct large tensor spaces: `qutip.basis`, `qutip.projection` and `qutip.qeye` can all directly constructor product spaces (e.g. `qutip.basis([2, 2, 2], [0, 1, 0])`). `tensor` is a comparatively expensive operation, and tensoring a list of elements internally is effectively `tensor(...(tensor(tensor(els[0], els[1]), els[2]), ...), els[-1])`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640127213:1688,efficient,efficient,1688,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640127213,1,['efficient'],['efficient']
Energy Efficiency,"er the hood will not fully understand how this is working. I believe the crux of this implementation is a fast computation of the tensors of `coherent_dm` operators for all the alpha values at (x + iy). Personally, on many occasions, I have looked at qutip implementations of quantum operations just to understand what is happening under the hood and I believe several users have often done this to hack around. If someone were to try and understand Q-function computation from this code, it seems simple enough with the call:. ```; np.abs(np.dot(alphas, (self._g*0.5)*vector))**2; ```. for state vectors, or decomposing a density matrix into state vectors and then running the above call. Or . ```; out = np.polyval(; (0.5*g * vector / np.sqrt(scipy.special.factorial(ns)))[::-1],; alpha.conj,; ); ```. But the object `alpha` now constructed with `_qfunc_alpha_matrix` class is a bit difficult to understand. The variable `self.conj = np.empty(x.shape, dtype=np.complex128)` creates a tensor and sets it to a mesh grid (x, -y), but then what does the `__call__()` return? The tensor of `coherent_dm(x+iy)` for each x and y coordinate? But how is it computing it without knowing the Hilbert space dim for the state, which I think is computed on the fly by `ns = np.arange(first, last).reshape(1, 1, -1)`. It seems it caches the `coherent_dm` computed upto `current_size` and then extends it to `size` for new Hilbert space dimensions. . I am sorry if I am being a bit thick here because I understand the overall idea of the code but somehow I am not confident it will be easy for others to understand on first read. Do you think we can make it a bit more transparent how the `_qfunc_alpha_matrix` works and that the crux of the method is computing the operators `coherent_dm` in an efficient way and saving them? If I have understood the code correct, I could try to document it a bit more and simplify it. . Let me know your thoughts and correct me if I misunderstood something @jakelishman @Ericgig",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762:2444,efficient,efficient,2444,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-877241762,1,['efficient'],['efficient']
Energy Efficiency,"ever, this also implies that `Qobj` should fulfil the numpy ufunc interface; `Qobj` would be a container for data such that operations like `np.sin` is the elementwise sin, or (most notably) `np.multiply` is the *elementwise* multiplication. Our `Qobj` _does not_ fulfil the ufunc interface:; 1. elementwise operations don't make sense on quantum objects, which are arrays only as an implementation detail - the `Qobj` class is meant to represent an abstract linear algebra object, not specifically a matrix.; 2. we don't honour the `shape` guarantees of numpy as we test compatibility based on `dims`, which are not 1D (superoperators) so cannot follow numpy's broadcasting rules; 3. we treat multiplication as matrix multiplication, violating how `np.multiply` should behave. My main concern is point 1: I don't think that `Qobj` provides a similar object to an `ndarray` at all. Right now we _do_ use matrices underneath, but proposed additions to QuTiP such as symbolic `Qobj` and adaptive Hilbert spaces are compatible with the idea of ""abstract linear algebra objects"", but do not necessarily have a backing array. Point 2 is mostly an extension of that: I'm not sure there is a sensible way for numpy's broadcasting rules to be applied to quantum objects as they exist now, even without extensions. ## More control over dispatch: `__array_ufunc__` and `__array_function__`. See [NEP 13](https://numpy.org/neps/nep-0013-ufunc-overrides.html), [NEP 18](https://numpy.org/neps/nep-0018-array-function-protocol.html) and [NEP 35](https://numpy.org/neps/nep-0035-array-creation-dispatch-with-array-function.html). Later versions of numpy allowed greater control over how ufuncs get implemented, which was most recently extended in 1.16 to cover non-ufuncs like `tensordot`. These functions are intended for classes to define how ufuncs operate on their data, but implementors should still follow the `ufunc` spec for broadcasting rules, and a given ufunc should have the same conceptual behaviour (m",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:4838,adapt,adaptive,4838,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['adapt'],['adaptive']
Energy Efficiency,"ex_array_to_rgb` could be useful in other contexts as well. I am not aware of any standard way of doing this, but if you are interested in this kind of mapping you might want to have a look at a similar mapping of complex values to color that we have in the function `matrix_histogram_complex`. In that case we map only the phase to the color, and the magnitude is shown by the bar heights, but if you map the magnitude to the alpha channel or the overall intensity you get something the is similar to what you use. For example, with the code from `matrix_histogram_complex` you get something like. ```; x = np.linspace(-5, 5, 100); X, Y = np.meshgrid(x,x); Z = X + 1j * Y; cdict = {'blue': ((0.00, 0.0, 0.0),; (0.25, 0.0, 0.0),; (0.50, 1.0, 1.0),; (0.75, 1.0, 1.0),; (1.00, 0.0, 0.0)),; 'green': ((0.00, 0.0, 0.0),; (0.25, 1.0, 1.0),; (0.50, 0.0, 0.0),; (0.75, 1.0, 1.0),; (1.00, 0.0, 0.0)),; 'red': ((0.00, 1.0, 1.0),; (0.25, 0.5, 0.5),; (0.50, 0.0, 0.0),; (0.75, 0.0, 0.0),; (1.00, 1.0, 1.0))}. cmap = mpl.colors.LinearSegmentedColormap('phase_colormap', cdict, 256); norm = mpl.colors.Normalize(-pi, pi); colors = cmap(norm(np.angle(Z))); colors[:,:,3] = sqrt(abs(Z)) / sqrt(abs(Z)).max(). plt.imshow(colors, interpolation='none');; ```. which produces the following map of the complex plane:. ![complex-plane-2](https://cloud.githubusercontent.com/assets/1198183/2809239/c3f6c3cc-cd61-11e3-83a1-cc4fff3f303c.png). compared to. ```; plt.imshow(complex_array_to_rgb(Z), interpolation='none');; ```. which produces. ![complex-plane-1](https://cloud.githubusercontent.com/assets/1198183/2809256/29caad3e-cd63-11e3-8e7a-3187afc2744f.png). Either mapping is fine of course, but I think a nice property of the first one is that real numbers and imaginary numbers are mapped to simple colors (real positive->blue, negative->red and imaginary positive green, imaginary negative turquoise), and complex number with both real and imaginary part are mapped to colors that are relatively simple to interpret.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41473950:1865,green,green,1865,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41473950,1,['green'],['green']
Energy Efficiency,"first look it's looking great! I've been working a lot on the stochastic solvers the last few months, but it is still very much under development. The milstein method has been on my todo list for a long time, but I've not gotten around to work on it yet, so your contribution is very timely and most welcome!. I have tried to design the API in the most general way I could think of while still keeping the complexity from growing too much. Defining an SME with its RHS function, D1 and D2 functions has worked for most problems I considered so far, but I'd be happy to discuss further if this could be changed to something more flexible, like a function for calculating rho_{n+1} like you suggest. We hope to have the stochastic solver API ready and mature enough to include in the next qutip release sometime this fall, so it would be good to have these things tested and thoroughly discussed before then. But until the stochastic module is officially in the QuTiP API we still have a lot of freedom to shake things up if necessary. Also, to keep complexity and code duplication down I wanted to follow the pattern. smesolve (choose solver by argument) -> smesolve_generic -> specific method and SDE by rhs, d1, d2 selection. So it would be good if smesolve_mil and smesolve_impl in your code could be combined with smesolve, and if smesolve_implicit and smesolve_milstein could be combined with smesolve_generic, etc. That would reduce a lot of code duplication I think. Of course, if smesolve_generic needs to be changed to accommodate this that would be totally fine with me. It would be great if you could do a pull request of this to the qutip master, then we could discuss details in the PR. You'd need to rebase your branch to the current master tip though, because things already changed a bit since the version you based your additions on. If you have troubles with this or no not know how to do it I could also try to merge your modifications into the qutip master, it's totally up to you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22011953:1618,reduce,reduce,1618,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22011953,1,['reduce'],['reduce']
Energy Efficiency,"ge of T and W in the code and the notebook to denote number of time bins and waveguides. > Moving `__all__` to after import statements. I declared `__all__` in its current location because almost universally, all (heh) top-level qutip modules declare it before imports. (I actually checked about a dozen of these and can't find any instance of it being after imports.) I think this might be worth changing to comply with PEP8, but I think it should be done after the module is added in a separate commit where all occurrences of this are changed across QuTiP. > Shortening argument / function names. I'll respond to each proposed change individually, but in general I disagree with most of these proposed changes since I think they reduce conceptual clarity. (For example, `temporal_basis_vector` returns a specific vector in the temporal basis; I would expect a function named `temporal_basis` to return an enumeration of all basis vectors.) However, I will try to think of shorter names which don't reduce clarity and will make changes if I come up with any. > Moving temporal_scattered_state, scattering_probability, and temporal_basis_vector into a new class. I think this is the only proposed change worth significant amounts of discussion, and it's actually something I had considered before. I'm conflicted about whether this change would be good or not, and I would value input from everyone involved in this review process (@sahmed95 , @kafischer, @nonhermitian, @ajgpitch). I've outlined my thoughts on the pros and cons of this change below. **Pros:**; - Consolidating these functions to class methods would be convenient in terms of reducing verbosity, since you would have to specify fewer arguments when calling these functions; - This would allow for a small performance increase, since maintaining a class-wide Evolver would mean that propagators would be precomputed for later simulations. However, this performance increase would be small and would be nearly un-noticeable for simula",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384821368:2025,reduce,reduce,2025,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384821368,1,['reduce'],['reduce']
Energy Efficiency,"h was a GSoC project) providing enhanced; > > features for a pulse-level description of quantum circuits and noise; > > models. A new class Processor and several subclasses are added to; > > represent different platforms for quantum computing. They can transfer a; > > quantum circuit into the corresponding control sequence and simulate the; > > dynamics with QuTiP solvers. Different noise models can be added to; > > qutip.qip.noise to simulate noise in a quantum device.; > >; > > This module is still young and many features can be improved, including; > > new device models, new noise models and integration with the existing; > > general framework for quantum circuits (qutip.qip.circuit). There are; > > also possible applications such as error mitigation techniques [1-3].; > >; > > The tutorial notebooks can be found at; > > http://qutip.org/tutorials.html#nisq. A recent presentation on the; > FOSDEM; > > conference may help you get an overview (; > > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > > Github Project page for a collection of related issues and ongoing Pull; > > Requests.; > > Expected outcomes; > >; > > - More devices defined in the qutip.qip.device module. At the moment,; > > we have two models: spin chain and cavity QED. We would like to include; > > some other commonly used planform such as Superconducting system, Ion; > trap; > > system or silicon system. Each model will need a new set of control; > > hamiltonian and a compiler that find the control pulse of a quantum gate.; > > This part is gonna involve some physics and study of commonly used; > hardware; > > platforms. The related code can be found in qutip.qip.device and; > > qutip.qip.compiler; > > - Refactoring the circuit compiler to allow simple pulse scheduling,; > > e.g. Restriction one pulses that can be turned on at the same time.; > > - Features to perform error mitigation techniques in QuTiP, such as; > > zero-error extrapolation.; > > - APIs to allow import qu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:5529,schedul,schedule,5529,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['schedul'],['schedule']
Energy Efficiency,"ing it. Essentially `pytest` goes through a few stages when you run `pytest` on the command line: discovery, generation, running, reporting, and it has lots of hook functions we can define to modify the state inbetween and during each of them. Default discovery is as you say: files in alphabetic order (I _think_ it's strictly shell globbing order, but generally that's alphabetical), then the contents of each file in order defined by the shared fixtures used. We tend not to need large amounts of state to be held in fixtures, so our files largely just run top-to-bottom. We can add in some logic into the collection-time hooks to re-order the tests. There's a `pytest` plugin called [`pytest-ordering`](https://github.com/ftobia/pytest-ordering), but it looks like it's not really actively maintained any more and the logic is pretty straightforwards, so perhaps not a terrible idea just to do it ourselves. Maybe I'm not javascript enough to enjoy a good micro-dependency?. It would also be quite nice if we could define the whole logical structure of the `qutip` package, to help keep everything in order as the package grows larger. By that I generally just mean the internal structure, though cutting down the amount of global names exported could also be done in a sort of organisation like this: we could get a little more aggressive at not exporting things like `enr_*` or `three_level_*` to the global namespace, but instead put them in submodules. While I think this isn't what you were asking, it's also quite easy to just run specific parts of the testing suite if you're doing it from the command line. You can do `pytest file.py` to run only those in a specific file, or `pytest -m ""mark logic""` (e.g. `pytest -m ""not slow""`) to hit specifically marked tests. Perhaps most powerfully, and one I use a lot when writing these, you can do `pytest -k ""substring logic""` to run every test (potentially in the specified file(s)) that contains the elements specified in `""substring logic""`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386:3042,power,powerfully,3042,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386,1,['power'],['powerfully']
Energy Efficiency,"ion to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial value, as in `args = {'psi:state':psi0}`, seems fairly arbitrary, as I guess we can just just set the t=0 value anyway. I think you also implemented `expect` as a special_value_kind. I guess maybe the value of the element is the e_op, or maybe you use the `e_ops` param?. So, when there are special_value_kind args given, these are replaced with an arg `{name:value}` with the `value` being the value of the special_value_kind at time t. We should use internal flags (attribs) to control the special_value_kind processing, This will be more efficient than checking the args dict at every time step for special_value_kind keys, e.g.; - `_state_vec_key`: default `None`, or string key to the arg element. So, unless I have missed something regarding the importance of `**args`, then I think this plan covers what we need and makes everything a bit simpler, which is always good.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:2542,efficient,efficient,2542,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,1,['efficient'],['efficient']
Energy Efficiency,"ip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expect: operator and density matrix ... ok; expect: operator and ket ... ok; expect: operator list and state ... ok; expect: operator list and state list ... ok; expect: operator and state list ... ok; fastsparse: fast_csr_matrix operations ... ok; fastsparse: transpose operations ... ok; fastsparse: adjoint operations ... ok; Read and write complex valued decimal formatted data ... ok; Read and write complex valued default formatted data ... ok; Read and write complex valued exp formatted data ... ok; Read and write real valued decimal formatted data ... ok; Read and write real valued default formatted data ... ok; Read and write real valued exp formatted data ... ok; Read and write with automatic separator detection ... ok; qsave/qload ... ok; Floquet: test unitary evolution of time-dependent two-level system ... ok; gates: expand 1 to N ... ok; gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; gates: expand",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:7677,power,power,7677,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['power'],['power']
Energy Efficiency,ist ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > > > Qobj addition ... ok; > > > Qobj subtraction ... ok; > > > Qobj multiplication ... ok; > > > Qobj division ... ok; > > > Qobj power ... ok; > > > Qobj negation ... ok; > > > Qobj equals ... ok; > > > Qobj getitem ... ok; > > > Qobj multiplication type ... ok; > > > Qobj conjugate ... ok; > > > Qobj adjoint (dagger) ... ok; > > > Qobj diagonals ... ok; > > > Qobj eigenenergies ... ok; > > > Qobj eigenstates ... ok; > > > Qobj expm ... ok; > > > Qobj full ... ok; > > > Qobj norm ... ok; > > > Qobj permute ... ok; > > > Qobj ket type ... ok; > > > Qobj bra type ... ok; > > > Qobj operator type ... ok; > > > Qobj superoperator type ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops pre,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:6697,power,power,6697,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['power'],['power']
Energy Efficiency,"looks green!. **Edit**: wait, adding that comment is making it restart the testing... Here's the one that passed https://travis-ci.org/qutip/qutip/builds/19623192",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/76#issuecomment-36083074:6,green,green,6,https://qutip.org,https://github.com/qutip/qutip/pull/76#issuecomment-36083074,1,['green'],['green']
Energy Efficiency,"m [this page](https://wiki.freepascal.org/Accessing_macOS_System_Information) it seems that it is mostly used for timing services, so perhaps it is not so relevant here:. ```; hw.tbfrequency - This gives the time base frequency used by the OS and is the basis of all timing services.; In general is is better to use mach's or higher level timing services, but this value; is needed to convert the PPC Time Base registers to real time.; ```. @hodgestar can I ask what the `cpu_freq` is used for in qutip? If it is just for reporting purposes, wouldn't it make sense to put a None or ""N/A""? . A command that somehow gives info on cpu frequencies is `sudo /usr/bin/powermetrics -s cpu_power -n 1`, which gives something like this:. ```; Machine model: MacBookPro18,3; OS version: 21C52; Boot arguments: ; Boot time: Sun Jan 9 11:12:24 2022. *** Sampled system activity (Mon Jan 10 16:05:18 2022 +0200) (5003.97ms elapsed) ***. **** Processor usage ****. E-Cluster Power: 39 mW; E-Cluster HW active frequency: 1027 MHz; E-Cluster HW active residency: 20.50% (600 MHz: 0% 972 MHz: 92% 1332 MHz: 3.1% 1704 MHz: 1.5% 2064 MHz: 3.1%); E-Cluster idle residency: 79.50%; E-Cluster instructions retired: 1.39695e+09; E-Cluster instructions per clock: 0.908186; CPU 0 frequency: 1115 MHz; CPU 0 idle residency: 86.38%; CPU 0 active residency: 13.62% (600 MHz: 0% 972 MHz: 11% 1332 MHz: .78% 1704 MHz: .59% 2064 MHz: 1.1%); CPU 1 frequency: 1103 MHz; CPU 1 idle residency: 86.02%; CPU 1 active residency: 13.98% (600 MHz: 0% 972 MHz: 12% 1332 MHz: .81% 1704 MHz: .77% 2064 MHz: .89%). P0-Cluster Power: 68 mW; P0-Cluster HW active frequency: 680 MHz; P0-Cluster HW active residency: 2.92% (600 MHz: 94% 828 MHz: .04% 1056 MHz: 1.7% 1296 MHz: .24% 1524 MHz: 1.0% 1752 MHz: .32% 1980 MHz: .24% 2208 MHz: .47% 2448 MHz: .35% 2676 MHz: .35% 2904 MHz: .24% 3036 MHz: .11% 3132 MHz: .07% 3168 MHz: .07% 3228 MHz: .81%); P0-Cluster idle residency: 97.08%; P0-Cluster instructions retired: 1.06724e+09; P0-Cluster instruc",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1754#issuecomment-1008912273:964,Power,Power,964,https://qutip.org,https://github.com/qutip/qutip/pull/1754#issuecomment-1008912273,1,['Power'],['Power']
Energy Efficiency,"m any other complex value.). On 26 Apr 2014, at 18:55, Robert Johansson notifications@github.com wrote:. > OK, I see. complex_array_to_rgb could be useful in other contexts as well. I am not aware of any standard way of doing this, but if you are interested in this kind of mapping you might want to have a look at a similar mapping of complex values to color that we have in the function matrix_histogram_complex. In that case we map only the phase to the color, and the magnitude is shown by the bar heights, but if you map the magnitude to the alpha channel or the overall intensity you get something the is similar to what you use. For example, with the code from matrix_histogram_complex you get something like; > ; > x = np.linspace(-5, 5, 100); > X, Y = np.meshgrid(x,x); > Z = X + 1j \* Y; > cdict = {'blue': ((0.00, 0.0, 0.0),; > (0.25, 0.0, 0.0),; > (0.50, 1.0, 1.0),; > (0.75, 1.0, 1.0),; > (1.00, 0.0, 0.0)),; > 'green': ((0.00, 0.0, 0.0),; > (0.25, 1.0, 1.0),; > (0.50, 0.0, 0.0),; > (0.75, 1.0, 1.0),; > (1.00, 0.0, 0.0)),; > 'red': ((0.00, 1.0, 1.0),; > (0.25, 0.5, 0.5),; > (0.50, 0.0, 0.0),; > (0.75, 0.0, 0.0),; > (1.00, 1.0, 1.0))}; > ; > cmap = mpl.colors.LinearSegmentedColormap('phase_colormap', cdict, 256); > norm = mpl.colors.Normalize(-pi, pi); > colors = cmap(norm(np.angle(Z))); > colors[:,:,3] = sqrt(abs(Z)) / sqrt(abs(Z)).max(); > ; > plt.imshow(colors, interpolation='none');; > which produces the following map of the complex plane:; > ; > compared to; > ; > plt.imshow(complex_array_to_rgb(Z), interpolation='none');; > which produces; > ; > Either mapping is fine of course, but I think a nice property of the first one is that real numbers and imaginary numbers are mapped to simple colors (real positive->blue, negative->red and imaginary positive green, imaginary negative turquoise), and complex number with both real and imaginary part are mapped to colors that are relatively simple to interpret.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41480460:2270,green,green,2270,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41480460,1,['green'],['green']
Energy Efficiency,"or: Checks that randomly generated superoperators are ... ok; > > > Superoperator: Randomized comparison of standard and optimized ... ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test unitary transformation with operators and superoperators. ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > qutip.tests.test_superoperator.TestMatrixVector.test_reshuffle ... ok; > > > utilities: energy unit conversions ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. ket ... ok; > > > Wigner: Compare Wigner fft and iterative for rand. dm ... ok. # . ## ERROR: Qobj addition. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 139, in test_QobjAddition; assert_equal(q4.type, ischeck(q4)); NameError: global name 'ischeck' is not defined. # . ## FAIL: Qobj power. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(_self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_Qobj.py"", line 225, in test_QobjPower; assert_equal(all(q3.data.todense() - matrix(data) *_ 3), 0); File ""/usr/lib/python2.7/dist-packages/numpy/testing/utils.py"", line 317, in assert_equal; raise AssertionError(msg); AssertionError: ; Items are not equal:; ACTUAL: True; DESIRED: 0. ---. Ran 221 tests in 256.712s. FAILED (SKIP=1, errors=1, failures=1)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:12406,power,power,12406,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['power'],['power']
Energy Efficiency,"ospection to decide which has been specified by the user, as the sig is clearly distinguishable by the number of args. So effectively we can ignore the `rhs_with_state` option, but I think we should give a deprecation warning that the `f(t, state, args)` signature will be removed in the next version. So, I think this means we can keep the new method of passing the state in the args dict. I would suggest we make it a bit more simple though. I notice that the processing of the option is a bit involved. So I suggest that any element of the `args` dict where the key is of the form `name:special_value_kind` be considered some kind of special value. If `special_value_kind` is not recognised then it should throw a `ValueError`. For now we will have the `special_value_kind` of:; - `state`: Qobj of the state at time `t`, with the correct dimensions; - `state_vec`: ndarray of state as a vector; - `expect`: I can't remember exactly what you did here. The `state_vec` will clearly be much more efficient, as this is what the ODE solver maintains. However, for completeness I think we should have the `state` option. The initial value, as in `args = {'psi:state':psi0}`, seems fairly arbitrary, as I guess we can just just set the t=0 value anyway. I think you also implemented `expect` as a special_value_kind. I guess maybe the value of the element is the e_op, or maybe you use the `e_ops` param?. So, when there are special_value_kind args given, these are replaced with an arg `{name:value}` with the `value` being the value of the special_value_kind at time t. We should use internal flags (attribs) to control the special_value_kind processing, This will be more efficient than checking the args dict at every time step for special_value_kind keys, e.g.; - `_state_vec_key`: default `None`, or string key to the arg element. So, unless I have missed something regarding the importance of `**args`, then I think this plan covers what we need and makes everything a bit simpler, which is always ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162:1867,efficient,efficient,1867,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562523162,1,['efficient'],['efficient']
Energy Efficiency,"ossible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; >; > ### Expected outcomes; > - More devices defined in the `qutip.qip.device` module. At the moment, we; > have two models: spin chain and cavity QED. We would like to include some; > other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware; > platforms. The related code can be found in `qutip.qip.device` and; > `qutip.qip.compiler`; > - Refactoring the circuit compiler to allow simple pulse scheduling, e.g.; > Restriction one pulses that can be turned on at the same time.; > - Features to perform error mitigation techniques in QuTiP, such as; > zero-error extrapolation.; > - APIs to allow import quantum circuits from other software packages or; > commonly used language e.g. through quantum assembly language (qasm); > ----------------------------------------------------------------; >; > Best; > Boxi; >; > From: Nathan Shammah<mailto:notifications@github.com>; > Sent: Tuesday, February 25, 2020 8:36 AM; > To: qutip/qutip<mailto:qutip@noreply.github.com>; > Cc: Boxi Li<mailto:etamin1201@gmail.com>; Author<mailto:; > author@noreply.github.com>; > Subject: Re: [qutip/qutip] More detailed information for GSoC 2020 project; > (#1184); >; > Hi Boxi,; >; > Can you please modify the projects of the Wiki page as you deem best?; > All: we can also think of changing the order of them. It may be that; > project #3 is deemed the most important.; >; > Best wi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:2793,schedul,scheduling,2793,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['schedul'],['scheduling']
Energy Efficiency,"qutip\stochastic.py"", line 1302, in _sesolve_generic; task_args, task_kwargs, **map_kwargs). File ""c:\program files\python37\lib\site-packages\qutip\parallel.py"", line 189, in serial_map; result = task(value, *task_args, **task_kwargs). File ""c:\program files\python37\lib\site-packages\qutip\stochastic.py"", line 1358, in _single_trajectory; result = ssolver.cy_sesolve_single_trajectory(i)#, sso). File ""qutip\cy\stochastic.pyx"", line 540, in qutip.cy.stochastic.StochasticSolver.cy_sesolve_single_trajectory. File ""c:\program files\python37\lib\site-packages\qutip\qobj.py"", line 303, in __init__; if not np.any(dims):. File ""<__array_function__ internals>"", line 6, in any. File ""c:\program files\python37\lib\site-packages\numpy\core\fromnumeric.py"", line 2330, in any; return _wrapreduction(a, np.logical_or, 'any', axis, None, out, keepdims=keepdims). File ""c:\program files\python37\lib\site-packages\numpy\core\fromnumeric.py"", line 87, in _wrapreduction; return ufunc.reduce(obj, axis, dtype, out, **passkwargs). VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences ; (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. ; If you meant to do this, you must specify 'dtype=object' when creating the ndarray; ```. The second problem is more serious, and I think it was the same in the my original version. The expectation values returned in `res.expect` are not the same as those computed manually from `res.states`. The values in `res.expect` gradually (but quickly) diverge away from the correct manual values that agree with theory. It is not a small error. (Note that I'm using a single trajectory so no problem of averaging over trajectories.). I would expect complete equality between the two. I would suspect that it's something to do with normalization (?) Passing kwarg `normalize=True` doesn't change anything, nor does the solver. This is how I compute the expectations:; ```; rho_list = [[vector_to_opera",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1379#issuecomment-727043128:1426,reduce,reduce,1426,https://qutip.org,https://github.com/qutip/qutip/issues/1379#issuecomment-727043128,1,['reduce'],['reduce']
Energy Efficiency,"r a bit more context. Qutip currently contains in the HEOM module ""BosonicBath / FermionicBath"" classes that describe a bath with a multi-exponential decomposition of the correlation function. This new environment module is supposed to be a more general framework to characterize thermal environments. Environments with multi-exponential decompositions are included as `ExponentialBosonicEnvironment`; this class is supposed to mostly replace the old HEOM `BosonicBath`. We now use the term ""environment"" instead of ""bath"" mostly to avoid having the same name for the new classes as in the HEOM module. There is a little difference between the old and the new class, namely that the system coupling operator is a part of BosonicBath (i.e., an attribute of BosonicBath and required in the constructor), but we have decided for the new module that system operators should not be part of the environment. This means that to create a HEOM solver, one will need to specify environments and coupling operators, somewhat similar to the `brmesolve` solver where one specifies both power spectrum and `a_op`. (Currently, one just specifies a list of ""baths"" in the HEOM solver). This will require some small changes to the HEOM solver interface that we still have to implement before merging this PR. Note that we are also making sure that existing code continues to work without changes. Another thing missing from this PR are fermionic environments. I would have liked to have them, but it was becoming too much work and a too large PR, so fermionic environments will have to be added a bit later. Some more advantage of our changes are:; * The new environment classes could be used directly as inputs for solvers other than the HEOM solver, for example for `mesolve` or `brmesolve`. These solvers could compute their jump operators and rates from the environment power spectrum and system operators. (That is however also left for a future PR, since it would require some thinking about how environments ca",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2534#issuecomment-2359719525:1120,power,power,1120,https://qutip.org,https://github.com/qutip/qutip/pull/2534#issuecomment-2359719525,1,['power'],['power']
Energy Efficiency,"ream libraries to implement qutip's interface you'd want not to increase their loading times. That would easily be achieved by defining the `__qutip_qobj__` as the entry point of this API. A drawback of this implementation is that it requires the conversion method to be defined on the object itself.; The dispatch-like solution, as was proposed by @hodgestar, is easier to play with, can be defined in a separate file, can be added to a separate package like `netket_qutip_interop` or even using setuptools entry points, though that would add complexity. Again, I'm personally not biased. I would go with option 1 because it's simpler, but I do like the organisational beauty of option 2 (that is used throughout the jax ecosystem). 2. About implicit conversion; - Assume we can distinguish two level of APIs exposed by qutip, similar in spirit to the distinction there is between BLAS and LAPACK. ; - There are low level (BLAS-like) operations on Qobjs such as addition, kron, sum, ecc that are performed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qutip itself. All I stated was that `I played around with auto-converting input hamiltonians and jump operators in qutip.sesolve and mesolve to Qobj if they ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:1181,efficient,efficiently,1181,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['efficient'],['efficiently']
Energy Efficiency,"rget_state); print('Correct: {}'.format(numpy_fidelity)); print('Still correct: {}'.format(qutip_good_fidelity)); print('Wrong: {}'.format(qutip_bad_fidelity)). # Correct: 0.9999999999849929; # Still correct: 0.9999999999849929; # Wrong: 1.0000000026189553; ```. The problem is clearly in the fact that you compute the fidelity of ket states by converting them into density matrices and using the general formula:; https://github.com/qutip/qutip/blob/564c987bdca385ae179730d0aad7b0d1e624e14d/qutip/metrics.py#L88-L113. This is fine in general, but can be very inefficient for large states, and is less numerically stable. An easy solution is to just compute the fidelity as the inner product when both states are kets. Moreover, the general formula might also be improvable: consider the following example (which uses the variables defined in the previous snippet):. ```; final_dm = qutip.ket2dm(final_state); target_dm = qutip.ket2dm(target_state); sqrt_final_dm = final_dm.sqrtm(); sqrt_target_dm = target_dm.sqrtm(); eig_vals = (sqrt_final_dm * target_dm * sqrt_final_dm).eigenenergies(); bad_fid = np.sqrt(eig_vals[eig_vals > 0]).sum(). prod_sqrt = (sqrt_final_dm * sqrt_target_dm); better_fid = scipy.linalg.svdvals(prod_sqrt.full()).sum(). print('bad fid: {}'.format(bad_fid)); print('better fid: {}'.format(better_fid)). # bad fid: 1.000000072436338; # better fid: 0.9999999999849937; ```; Here, I'm proceeding similarly to what qutip currently does, by converting to dms and then applying the general formula. However, I compute the general fidelity by summing the singular values of $\sqrt\rho \sqrt\sigma$, instead of summing the square roots of the eigenvalues of $\sqrt\sigma \rho \sqrt\sigma$. Mathematically, this is equivalent, and in this particular case does at least give a physical fidelity. It does however require to compute the square root of both matrices (though it saved one matrix product), so I honestly don't know whether it would work better/be more efficient in general.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/925#issuecomment-542318121:2596,efficient,efficient,2596,https://qutip.org,https://github.com/qutip/qutip/issues/925#issuecomment-542318121,1,['efficient'],['efficient']
Energy Efficiency,"rs to real time.; ```. @hodgestar can I ask what the `cpu_freq` is used for in qutip? If it is just for reporting purposes, wouldn't it make sense to put a None or ""N/A""? . A command that somehow gives info on cpu frequencies is `sudo /usr/bin/powermetrics -s cpu_power -n 1`, which gives something like this:. ```; Machine model: MacBookPro18,3; OS version: 21C52; Boot arguments: ; Boot time: Sun Jan 9 11:12:24 2022. *** Sampled system activity (Mon Jan 10 16:05:18 2022 +0200) (5003.97ms elapsed) ***. **** Processor usage ****. E-Cluster Power: 39 mW; E-Cluster HW active frequency: 1027 MHz; E-Cluster HW active residency: 20.50% (600 MHz: 0% 972 MHz: 92% 1332 MHz: 3.1% 1704 MHz: 1.5% 2064 MHz: 3.1%); E-Cluster idle residency: 79.50%; E-Cluster instructions retired: 1.39695e+09; E-Cluster instructions per clock: 0.908186; CPU 0 frequency: 1115 MHz; CPU 0 idle residency: 86.38%; CPU 0 active residency: 13.62% (600 MHz: 0% 972 MHz: 11% 1332 MHz: .78% 1704 MHz: .59% 2064 MHz: 1.1%); CPU 1 frequency: 1103 MHz; CPU 1 idle residency: 86.02%; CPU 1 active residency: 13.98% (600 MHz: 0% 972 MHz: 12% 1332 MHz: .81% 1704 MHz: .77% 2064 MHz: .89%). P0-Cluster Power: 68 mW; P0-Cluster HW active frequency: 680 MHz; P0-Cluster HW active residency: 2.92% (600 MHz: 94% 828 MHz: .04% 1056 MHz: 1.7% 1296 MHz: .24% 1524 MHz: 1.0% 1752 MHz: .32% 1980 MHz: .24% 2208 MHz: .47% 2448 MHz: .35% 2676 MHz: .35% 2904 MHz: .24% 3036 MHz: .11% 3132 MHz: .07% 3168 MHz: .07% 3228 MHz: .81%); P0-Cluster idle residency: 97.08%; P0-Cluster instructions retired: 1.06724e+09; P0-Cluster instructions per clock: 3.04315; CPU 2 frequency: 2166 MHz; CPU 2 idle residency: 97.99%; CPU 2 active residency: 2.01% (600 MHz: .02% 828 MHz: 0% 1056 MHz: .29% 1296 MHz: .10% 1524 MHz: .33% 1752 MHz: .10% 1980 MHz: .08% 2208 MHz: .12% 2448 MHz: .12% 2676 MHz: .30% 2904 MHz: .18% 3036 MHz: .08% 3132 MHz: .04% 3168 MHz: .07% 3228 MHz: .20%); ...; ```. But it requires `sudo` and is a bit messy to parse the max frequencies.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1754#issuecomment-1008912273:1586,Power,Power,1586,https://qutip.org,https://github.com/qutip/qutip/pull/1754#issuecomment-1008912273,1,['Power'],['Power']
Energy Efficiency,"s tests on all platforms. They pass for all besides Mac OS (similar error as for other PR). With `python setup.py install`, with `install` instead of `develop`, things seem to work. What it is unclear to me is why it reads that the QuTiP Version is `4.4.0.dev0+1a639d7a`, when I could not find this hash in here (or maybe I am confused). Now, after some tries with install and develop, I am on that version of qutip-dev. . To begin with, I am running the contents of the [development notebooks](https://github.com/qutip/qutip-notebooks/tree/master/development). Some comments below are relevant to the PR of the notebooks, https://github.com/qutip/qutip-notebooks/pull/71. * `development-qobjevo.ipynb`: Runs fine. ; * `development-qobjevo-adv.ipynb`: Runs fine. ; * `development-qobjevo-timing.ipynb`: Runs fine. * The notebook [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb) could be re-adapted to be among other tutorials, with some title like ""Time-dependent `Qobj` with `QobjEvo`"". There could be much more commentary of the basics of `QobjEvo`. Some could be copy-pasted from the introductory comment in `qobjevo.py`. You are the best person to explain, with basic examples, of increasing complexity, what QobjEvo can do. Possibly taking a known physics problem, e.g., the damped harmonic oscillator with `mesolve`, could help the user. . * In [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb), block 22 has the first check set to False, but this is both in the notebook I run locally and in the one online. So probably that's the expected behaviour. . In [development-qobjevo-adv.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-adv.ipynb), block 20 has a comment that is an unfinished sentence. In general, I think that examples could be much more descriptive, with comments, about the tests that are being ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:984,adapt,adapted,984,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['adapt'],['adapted']
Energy Efficiency,"s_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the docstring of krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). To get very technical, Krotov's requirements are laid out in the documentation of the [`Propagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L125) abstract base class, [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162) being a particular example. In particular, the interface we define there is strictly for a single time step, makes no reference to `tlist` and we use ``H=[H0, [H1, u]]`` where `u` is a scalar for that particular timestep. However, I can easily write a wrapper around an `mesolve` that would work something along the lines of the pseudo-code from https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563:. ~~~; for (i, state) ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:3243,adapt,adapt,3243,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['adapt'],['adapt']
Energy Efficiency,"site may help for future reference. On Wed, 13 May 2020 at 23:38, Eric Giguère <notifications@github.com> wrote:. > I did some tests and; > 1 - Cause by fortran zheer (lapack eigenvalue solver for complex hermitian; > matrices) (c's version Ok); > 2 - It happen when installing the scipy stack with pip but not when; > installing it with conda.; > 3 - It depend on the problem size, 64 seems particularly bad, usually it; > fails on the second call.; > 4 - I only got it in zheevr which is only used in brmesolve. But Nathan; > got it in other tests which use scipy's eigh.; > 4 - It happen in scipy in the fortan version of lapack:; >; > import numpy as np; > from scipy.linalg import eigh; > H = random_hermitian(64); > eigh(H) # Work fine; > eigh(np.asfortranarray(H)) # segfault after a few try, may need to change H; >; > Possible solutions (for zheevr):; >; > - Installing scipy with conda, the easiest solution, but not in our; > control.; > - Finding a way to link clapack from cython. Linking scipy's one would; > require good knowledge of scipy internals since only one cython interface; > is provided. Linking to another installation of lapack, but it would; > require the user to install lapack or install it with qutip. Both seems; > wrong to me.; > - For mac user, call scipy's eigh from cython i zheevr, slower but; > better than risking segfault.; > - Have the code directly in qutip. We can adapt it from OpenBlas:; > https://github.com/xianyi/OpenBLAS/blob/master/lapack-netlib/LAPACKE/src/lapacke_zheevr.c; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1197#issuecomment-628259492>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADPF67AJF3WTZBCU4YWFY23RRMHMHANCNFSM4LCKXE6A>; > .; >; -- ; Dr. Nathan Shammah; Postdoctoral Research Scientist; Theoretical Quantum Physics Laboratory; RIKEN, Wako, Saitama, Japan; www.nathanshammah.com",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628441264:1662,adapt,adapt,1662,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628441264,1,['adapt'],['adapt']
Energy Efficiency,"ssues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed experiment on a small subset of tests, which are more suited to property-based testing, and examining how that affects the test-run-completion time(s) and whether it introduces more failures than what would be desired/cost-efficient.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:3310,efficient,efficient,3310,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['efficient'],['efficient']
Energy Efficiency,"t to think that the unphysical part goes away when two baths are added [1], one with $+i\Omega$ and the other with $-i\Omega$. > However, I would want to be very sure that in the case where the parameters are all real, the results are not affected by the change. Is that so? Only asking because that is not clear to me at first glance. You are very much in the right to be absolutely sure before making a change. As far as I understand and have tested, it will not change the real case because the changes are as follows (I have removed all the other lines in between for clarity):. ```python; - ck_real = [np.real(eta) for eta in eta_p]; + ck_real = [eta for eta in eta_p]. - ck_imag = [np.imag(eta_p[0])]; + ck_imag = [-lam*gamma]. - eta_p = [lam * gamma * (self._cot(gamma * beta / 2.0) - 1.0j)]; + eta_p = [lam * gamma * (self._cot(gamma * beta / 2.0))]; ```; if `gamma` is real, `lam * gamma * self._cot(gamma * beta / 2.0)` would be real, and hence `ck_real` would stay the same as before, and the same can be said for `ck_imag`. After all, this is how it is done for `DrudeLorentzBath`, so it should not impact anything. > A more ""complete"" and probably more efficient solution would be to add a whole new ShiftedDrudeLorentzBath, and to put in analytically derived formulas for the Matsubara / Pade expansion coefficients. (As a first step, you could also calculate these coefficients manually and create a BosonicBath object from them directly.). This is what I have been using locally. I have made a `ShiftedDrudeLorentzBath` and have done exactly what you said. I raised this issue to point out a possible extension of use cases with `DrudeLorentzPadeBath`. [2] T. Kramer, M. Noack, A. Reinefeld, M. Rodríguez, and Y. Zelinskyy, “Efficient calculation of open quantum system dynamics and time-resolved spectroscopy with distributed memory HEOM (DM-HEOM),” Journal of Computational Chemistry, vol. 39, no. 22, p. 1779, Jun. 2018, doi: [10.1002/jcc.25354](https://doi.org/10.1002/jcc.25354).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274:2315,efficient,efficient,2315,https://qutip.org,https://github.com/qutip/qutip/issues/2520#issuecomment-2358685274,2,"['Efficient', 'efficient']","['Efficient', 'efficient']"
Energy Efficiency,"this example depends on whether I install mkl or not. without mkl, its >10 mins, with mkl, about one minute. The run with converting the tensor to sparse always takes around 30-40 seconds, and doesn't depend too much on mkl. ```; import qutip as qt; import numpy as np. #spectral density; def Jw(w): ; return lam**2 * gamma * w / ((w0**2 - w**2)**2 + (gamma**2) * (w**2)); ; ; #power spectrum; def J_power_spectrum(w):; """""" The Ohmic bath power spectrum as a function of w; (and the bath parameters).; """"""; return (; Jw(w) * 2 * (w>0); ); def Ising_solve(N, g0, J0, gamma, tlist, options, use_csr=True):; # N : number of spins; # g0 : splitting; # J0 : couplings. #Setup operators for individual qubits; sx_list, sy_list, sz_list = [], [], []; for i in range(N):; op_list = [qt.qeye(2)] * N; op_list[i] = qt.sigmax(); sx_list.append(qt.tensor(op_list)); op_list[i] = qt.sigmay(); sy_list.append(qt.tensor(op_list)); op_list[i] = qt.sigmaz(); sz_list.append(qt.tensor(op_list)). # Hamiltonian - Energy splitting terms; H = 0.; for i in range(N):; H += g0 * sz_list[i]. # Interaction terms; for n in range(N - 1):; H += -J0 * sx_list[n] * sx_list[n + 1]. # Initial state; state_list = [qt.basis(2, 1)] * (N-1); state_list.append(qt.basis(2, 0)); psi0 = qt.tensor(state_list); fx = 1; fy = 1.1; fz = 0.9; coup = (fx * (sx_list[N-1]) ; + fy * (sy_list[N-1]); + fz * (sz_list[N-1])). ; if use_csr:; R = qt.bloch_redfield_tensor(H, [[coup, J_power_spectrum]], fock_basis=True, sparse_eigensolver=True,br_dtype = 'sparse', sec_cutoff=-1); R = R.to('csr').tidyup(); result = qt.mesolve(R,psi0, tlist, options=options); else:; result = qt.brmesolve(H, psi0, tlist, a_ops = [[coup, J_power_spectrum]], e_ops=sz_list, options=options, sec_cutoff=-1); return result. #bath sd params; lam = 5; w0 = 10; gamma = 5; . #system params; N = 5; g0 = 1; J0 = 5. tlist = np.linspace(0, 100, 1000); options ={""nsteps"": 15000, ""store_states"": True, ""progress_bar"": True} . #standard; result_ising = Ising_solve(N, g0, J0, ga",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2530#issuecomment-2403834583:1089,Energy,Energy,1089,https://qutip.org,https://github.com/qutip/qutip/issues/2530#issuecomment-2403834583,1,['Energy'],['Energy']
Energy Efficiency,"tigation techniques [1-3].; > >; > > The tutorial notebooks can be found at; > > http://qutip.org/tutorials.html#nisq. A recent presentation on the; > FOSDEM; > > conference may help you get an overview (; > > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > > Github Project page for a collection of related issues and ongoing Pull; > > Requests.; > > Expected outcomes; > >; > > - More devices defined in the qutip.qip.device module. At the moment,; > > we have two models: spin chain and cavity QED. We would like to include; > > some other commonly used planform such as Superconducting system, Ion; > trap; > > system or silicon system. Each model will need a new set of control; > > hamiltonian and a compiler that find the control pulse of a quantum gate.; > > This part is gonna involve some physics and study of commonly used; > hardware; > > platforms. The related code can be found in qutip.qip.device and; > > qutip.qip.compiler; > > - Refactoring the circuit compiler to allow simple pulse scheduling,; > > e.g. Restriction one pulses that can be turned on at the same time.; > > - Features to perform error mitigation techniques in QuTiP, such as; > > zero-error extrapolation.; > > - APIs to allow import quantum circuits from other software packages; > > or commonly used language e.g. through quantum assembly language (qasm); > >; > > ------------------------------; > >; > > Also, the last outcomes have some overlap with the last project. Although; > > I also find this circuit importation very important, I guess two projects; > > should not have overlap if they are both selected.; > >; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > <; > https://github.com/qutip/qutip/issues/1184?email_source=notifications&email_token=ADPF67A5MSYZVSDKCZD73LTREGE2LA5CNFSM4KZUPCQ2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IPQGYLA; > >,; > > or unsubscribe; > > <; > https://g",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:6321,schedul,scheduling,6321,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['schedul'],['scheduling']
Energy Efficiency,"tonian. --> **Changed**; * [x] Isn't <code>h_sho</code> equivalent to <code>U=qutip.rand_unitary_haar(dim) \ return U* (qutip.num(dim)+0.5)*U.dag()</code> ? --> **We can test it with that one**.; * [x] Clean imports on <code>test_krylovsolve</code>; <code>qeye</code> imported twice, <code>run_module_suite</code> never used, etc.; * [x] Header no longer used. --> **Removed.**; * [x] Why is <code>os.environ['QUTIP_GRAPHICS'] = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:1112,efficient,efficiently,1112,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['efficient'],['efficiently']
Energy Efficiency,"w the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landscape) is that - depending on how some Hypothesis tests are set up - there might be a cost incurred in that, eventually, one might have to implement guards against inputs, that would be virtually impossible (or very close to that) to occur in practical scenarios. In any case, I'd strongly recommend performing a time-boxed exper",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:2123,power,powerful,2123,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['power'],['powerful']
Energy Efficiency,"y ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... ok; > > > Steady state: Thermal harmonic oscillator ... ok; > > > Steady state: Driven cavity ... ok; > > > Stochastic: smesolve: photo-current ... ok; > > > Stochastic: smesolve: homodyne ... ok; > > > Stochastic: smesolve: heterodyne ... ok; > > > Stochastic: ssesolve: photo-current ... ; > > > ok; > > > Stochastic: ssesolve: homodyne ... ok; > > > Stochastic: ssesolve: heterodyne ... ok; > > > Composite system, operator on Hilbert space. ... ok; > > > Superoperator: Efficient numerics and reference return same result, ... ok; > > > Non-composite system, operator on Hilbert space. ... ok; > > > Non-composite system, operator on Liouville space. ... ok; > > > Superoperator: Converting superoperator to Choi matrix and back. ... ok; > > > Superoperator: Test that to_choi(q) returns q if q is already Choi. ... ok; > > > Superoperator: Test that converting a two-qubit superoperator through ... /usr/local/lib/python2.7/dist-packages/qutip/qobj.py:412: UserWarning: Multiplying superoperators with different representations; > > > warnings.warn(msg); > > > ok; > > > Superoperator: Converting superoperator to Choi matrix and back. ... ok; > > > Superoperator: Test that to_super(q) returns q if q is already a ... ok; > > > Superoperator: Checks that the trace of matrices returned by to_choi ... ok; > > > Superoperator: Checks that iscp, istp and iscptp work in a few different ... ok; > > > Superoperator: Checks that randomly generated superoperators are ... ok; > > > Super",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:10021,Efficient,Efficient,10021,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['Efficient'],['Efficient']
Energy Efficiency,"y replace the old HEOM `BosonicBath`. We now use the term ""environment"" instead of ""bath"" mostly to avoid having the same name for the new classes as in the HEOM module. There is a little difference between the old and the new class, namely that the system coupling operator is a part of BosonicBath (i.e., an attribute of BosonicBath and required in the constructor), but we have decided for the new module that system operators should not be part of the environment. This means that to create a HEOM solver, one will need to specify environments and coupling operators, somewhat similar to the `brmesolve` solver where one specifies both power spectrum and `a_op`. (Currently, one just specifies a list of ""baths"" in the HEOM solver). This will require some small changes to the HEOM solver interface that we still have to implement before merging this PR. Note that we are also making sure that existing code continues to work without changes. Another thing missing from this PR are fermionic environments. I would have liked to have them, but it was becoming too much work and a too large PR, so fermionic environments will have to be added a bit later. Some more advantage of our changes are:; * The new environment classes could be used directly as inputs for solvers other than the HEOM solver, for example for `mesolve` or `brmesolve`. These solvers could compute their jump operators and rates from the environment power spectrum and system operators. (That is however also left for a future PR, since it would require some thinking about how environments can best be passed to those solvers.) Similarly, QuTiP could automatically compute Markovian embeddings with pseudomodes or reaction coordinates.; * The module provides a framework for the idea of approximating one environment by another (multi-exponential) one, and more approximation methods could be added in the future. For example, Gerardo has been working on a method fitting the power spectrum using the so-called AAA algorithm.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2534#issuecomment-2359719525:1904,power,power,1904,https://qutip.org,https://github.com/qutip/qutip/pull/2534#issuecomment-2359719525,2,['power'],['power']
Integrability," + Periodic system Hamiltonian as :class:`QobjEvo`. List of; > + [:class:`Qobj`,:class:`Coefficient`] or callable that; > + can be made into :class:`QobjEvo` are also accepted.; > +; > + rho0 / psi0 : :class:`qutip.Qobj`; > + Initial density matrix or state vector (ket).; > +; > + Taulist:*list* / *array*; >; > ⬇️ Suggested change; >; > - Taulist:*list* / *array*; > + tlist: *list* / *array*; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245610938>:; >; > > + H : :class:`Qobj`,:class:`QobjEvo`,:class:`QobjEvo` compatible format.; > + Periodic system Hamiltonian as :class:`QobjEvo`. List of; > + [:class:`Qobj`,:class:`Coefficient`] or callable that; > + can be made into :class:`QobjEvo` are also accepted.; > +; > + rho0 / psi0 : :class:`qutip.Qobj`; > + Initial density matrix or state vector (ket).; > +; > + Taulist:*list* / *array*; > + List of times for :math:`t`.; > +; > + T : float; > + The period of the time-dependence of the hamiltonian.; > +; > + c_ops_and_rates : list of :class:`qutip.Qobj`.; > + List of lists of [collapse operator,collapse operator rate] pairs; >; > ⬇️ Suggested change; >; > - List of lists of [collapse operator,collapse operator rate] pairs; > + List of lists of [collapse operator, collapse operator rate] pairs; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245611168>:; >; > > +; > + e_ops : list of :class:`qutip.Qobj` / callback function; > + List of operators for which to evaluate expectation values.; > + The states are reverted to the lab basis before applying the; > +; > + args : *dictionary*; > + Dictionary of parameters for time-dependent Hamiltonian; > +; > + time_sense : float; > + Experimental. Value of the secular approximation (in terms of system; > + frequency 2*np.pi/T) to use when constructing the rate matrix R(t).; > + Default value of zero uses the fully time-i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:5425,depend,dependence,5425,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['depend'],['dependence']
Integrability," 2020 project ""Error mitigation; > in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > Wiki page. I post it here so if anyone finds it nice could copy it to the; > Wiki page.; >; > I add some details based on the original description:; > ------------------------------; > 1. Error mitigation in QuTiP; >; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class Processor and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > qutip.qip.noise to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (qutip.qip.circuit). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; > Expected outcomes; >; > - More devices defined in the qutip.qip.device module. At the moment,; > we have two models: spin chain and cavity QED. We would like to include; > some other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used hardware",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:1501,integrat,integration,1501,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['integrat'],['integration']
Integrability," Could this issue perhaps be broken into sub-tasks in some way, perhaps, in order to enable work starting on it a bit more feasible?. Also, I can see it's been labelled as a ""good first issue"" but it seems to me the definition of done (i.e., what would a PR - or a set of PRs - that would successfully address the problem entail?), with respect to the entire issue, could be clarified a bit further, and the breakdown into sub-tasks (which itself might result organically from some further discussion) might help a bit in that direction. Regarding possible approaches for handling randomness - I have to admit I've started looking into QuTiP only very recently, and I'm yet to start familiarising myself with its more intricate details and get to run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on tho",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:1176,depend,depend,1176,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['depend'],['depend']
Integrability," Monte-carlo: Time-dependent H (func format) ... ok; > > > Monte-carlo: Time-dependent H (str format) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementation",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5383,depend,dependence,5383,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['depend'],['dependence']
Integrability," Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately, you've already done most of its setup, so the time penalties should be much less than the current system (i.e. you avoid several Kronecker products and safety checks on the time-dependence terms because you've done them once at the start). In theory, that should already work from at least 4.5 onwards, and likely most of it will work from 4.4. In the 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internally). One thing you pay a nasty penalty for right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:2229,depend,dependence,2229,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['depend'],['dependence']
Integrability," `/qutip/tests` (I originally didn't like it, but I now see more and more benefits of the `/src` (or `/lib`) convention in Python projects).; - the current `qutip/tests` should entirely become `/test/qutip`; - a new `/src/qutip/test` becomes a fully-supported _public_ module, including base classes (such as the data-layer mixins) and things like that. We'd need to be careful, because reducing your possibilities for flexibility in testing generally sounds like a bad idea to me, but if we take care to be very limited, it could work. I suspect you won't be able to import the test suite from inside `qutip.core.data` because of cyclical dependencies, which is probably a good thing - it'll force us to put the structure the right way round immediately. For an idea pretty far out of left field:; - the data layer tests should really _discover_ the specialisations rather than us needing to specify them (this is true regardless of this PR); - if so, in the new form, we _could_ directly export this part of the test suite from `qutip.test` (our test suite would import this as well), and add a little bit of logic to allow filtering of which tests need to be run (class decorators, probably); - downstream packages could then test just by importing our classes and disabling any specialisations that are only on internal data-layer objects. I'm not 100% sure how I feel about this, but it's plausible - we'd still be able to add extra methods in our own test suite if we wanted them, because we could just derive from the classes, rather than defining the names into the test suite in those cases. ---. About us breaking downstream CI: having been a maintainer of QuTiP and now Qiskit, I have a deep-rooted hatred for any upstream package that forces CI failures on its dependents, because it _requires_ the lower packages to move ""fix CI"" way up to the top of their priority list; you can't merge _anything_ until CI is running again, which is very frustrating. It messes with all your workflows.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-979917075:2033,depend,dependents,2033,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-979917075,1,['depend'],['dependents']
Integrability," add the linear algebra specialisations you use most). This actually goes a bit beyond what Julia does (at least as far as I know), because QuTiP's new system ""completes"" the dispatch table for all known types automatically; when it's asked to do say `kron` on two types it doesn't have a specialisation for, it'll cast the inputs through a path of least weight into a specialisation it _does_ know, and then use that. The desired casting rules and preferred output types can be altered dynamically at run-time as well. While I put a lot of effort into making this as fast as possible (and naturally a constant-time operation with respect to the number of known types and specialisations), of course the penalty we pay is a small run-time cost of type look-ups and dispatch (<1µs, but that's dwarfed by the cost of the operations themselves). We will have a hook for creating ""data-layer types"" out of arbitrary inputs, but we weren't heavily focussing on this at all; it seems rather too special a case to have _another_ magic interface for, and we can basically just reuse `__array__` for it - ""data-layer types"" are essentially just ""matrix-like"" objects. It also isn't appropriate for the situation you're describing here, because your own objects have additional ""quantum-specific"" attributes associated with them, similar to the extra stuff that `Qobj` contains. If you want to see more of this, it's in the `dev.major` branch. ---. Defining an interoperable new public interface I think is quite a big task, since it's inherently got to be future-proof. I'm definitely +1 on us having one, and having some discussion about it before a 5.0 release. I'm most concerned with how we can do it in a manner that's useful without stymieing our own ability to iterate and improve. It's harder for downstream packages to support multiple versions of a magic interface than it is for them to changing call QuTiP library functions; with deprecation warnings we can have multiple valid methods for doing t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:6936,interface,interface,6936,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['interface'],['interface']
Integrability," can't separate it out into different files, or mix it with other code (say additional implementations). I'm definitely not a lawyer, but I'm worried that will cause us code organisation problems in the future, and while the licence would give us permission to improve the code, it's the reorganisation I'm worried about. Secondly, about the code itself: this sort of local operation is something I absolutely would like to include, but I'm not certain that the form it's in right now is the best, general way to do it. I think this is part of much larger discussion about how to handle tensor networks - for example, at the moment, `targets` is fine for states and operators, but it won't work for superoperators. I'm not sure that this is solvable in an ergonomic way with QuTiP's current dimensions specifiers, but it's something we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose`, which can be seen as special cases of this exact same type of tensor contraction (not to mention `tensor_contract`!). The other thing from a code perspective is that this doesn't use the data-layer in the intended manner. A lot of this may be because our documentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of li",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:1895,interface,interface,1895,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['interface'],['interface']
Integrability," compare the expectation value at the end of the simulation which is at time t = 1. . #First code:. import qutip; import numpy as np; options = qutip.Options(); options.nsteps = 100000; args = {'omega':1000}; time_grid = 1000; timelist = np.linspace(0, 1, time_grid); omegatlist = np.cos(args['omega']*timelist); H = qutip.QobjEvo([qutip.sigmax(),omegatlist], tlist= np.array(np.linspace(0, 1, time_grid), dtype=np.float64)); state = qutip.basis(2, 0).proj(); times = np.linspace(0, 1, 2); result = qutip.mesolve(H,state,times,[],qutip.sigmaz(),args=args,options=options); print(result.expect[0][1]). #Second code: ; import qutip; import numpy as np; options = qutip.Options(); options.nsteps = 100000; args = {'omega':1000}; time_grid = 1000; tlist = np.linspace(0, 1, time_grid); omegatlist = np.cos(args['omega']*tlist); H = [qutip.sigmax(),omegatlist]; state = qutip.basis(2, 0).proj(); times = tlist; result = qutip.mesolve(H,state,times,[],qutip.sigmaz(),args=args,options=options); print(result.expect[0][999]). The first code gives a value of 0.9999989185418086 and the second one returns a value of 0.9999989289570258. So, the two results are not exactly the same. For the above analytic Hamiltonian, the result seems to differ by a small decimal number. However for the non-analytic Hamiltonian that I am actually using, the result can differ by six orders of magnitude. May I know why there is a difference in the results obtained from the two methods above? Is it because when QobjEvo is used, the mesolve routine actually does not sample enough time grid points when it evolves the Hamiltonian (i.e., it does not sample all the time_grid points which is time_grid = 1000 as provided above)? If so, may you kindly tell me how to rectify this problem?. As per my original question, I would like the first code to give the same the expectation value of the operator at the final time as is in the second code but without having to evaluate the expectation value of the operator at all time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-808726734:1859,rout,routine,1859,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-808726734,1,['rout'],['routine']
Integrability," excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expect: operator and density matrix ... ok; expect: operator and ket ... ok; expect: operator list and state ... ok; expect: operator list and state list ... ok; expect: operator and state list ... ok; fastsparse: fast_csr_matrix operations ... ok; fastsparse: transpose operations ... ok; fastsparse: adjoint operations ... ok; Read and write complex valued decimal formatted data ... ok; Read and write complex valued default formatted data ... ok; Read and write complex valued exp formatted data ... ok; Read and write real valued decimal formatted data ... ok; Read and write real valued default formatted data ... ok; Read and write real valued exp formatted data ... ok; Read and write with automatic separator detection ... ok; qsave/qload ... ok; Floquet: test unitary evolution of time-dependent two-level system ... ok; gates: expand 1 to N ... ok; gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; gates: expand 2 to N (using swap) ... ok; gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; gates: expand 3 to 3 with permuTation (using toffoli) ... ok; gates: swap gate ... ok; qutip.tests.test_gates.TestGates.test_are_cliffords ... ok; qutip.tests.test_gates.TestGates.test_clifford_group_len ... ok; Graph: Graph Degree ... ok; Graph: Breadth-First Search ... ok; Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:8532,depend,dependent,8532,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['depend'],['dependent']
Integrability," in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > > Wiki page. I post it here so if anyone finds it nice could copy it to the; > > Wiki page.; > >; > > I add some details based on the original description:; > > ------------------------------; > > 1. Error mitigation in QuTiP; > >; > > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > > quantum circuit simulator (which was a GSoC project) providing enhanced; > > features for a pulse-level description of quantum circuits and noise; > > models. A new class Processor and several subclasses are added to; > > represent different platforms for quantum computing. They can transfer a; > > quantum circuit into the corresponding control sequence and simulate the; > > dynamics with QuTiP solvers. Different noise models can be added to; > > qutip.qip.noise to simulate noise in a quantum device.; > >; > > This module is still young and many features can be improved, including; > > new device models, new noise models and integration with the existing; > > general framework for quantum circuits (qutip.qip.circuit). There are; > > also possible applications such as error mitigation techniques [1-3].; > >; > > The tutorial notebooks can be found at; > > http://qutip.org/tutorials.html#nisq. A recent presentation on the; > FOSDEM; > > conference may help you get an overview (; > > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > > Github Project page for a collection of related issues and ongoing Pull; > > Requests.; > > Expected outcomes; > >; > > - More devices defined in the qutip.qip.device module. At the moment,; > > we have two models: spin chain and cavity QED. We would like to include; > > some other commonly used planform such as Superconducting system, Ion; > trap; > > system or silicon system. Each model will need a new set of control; > > hamiltonian and a compiler that find the control pulse of a quantum gate.; > > This part is gonna involve some p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:5142,integrat,integration,5142,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['integrat'],['integration']
Integrability," is ok when all operations are like `matmul(CSR, CSR) -> CSR`, but which file should the operation `matmul(CSR, Dense) -> COO` go into? Much easier to find what you're looking for if all `matmul` functions are together, and then setting up the dispatcher will be the last item in the `matmul` file. It also means the files stay a bit smaller and easier to manage within themselves - you're less likely to ""lose"" code when each module is small and very focussed. 2. Exactly - it's more of an internal type. Currently `Qobj` converts the underlying data object to dense `ndarray` and prints it for its `repr` method - I don't have any plans to change that, so `Qobj` will still be full and user-facing. My `CSR` repr actually just tells you the same information that `scipy.sparse.csr_matrix` does, just in a slightly more Python-looking form. 3. Yes, in some form or another. Perhaps we could talk about the best way to do that in a future meeting?. 4. `PyDataMem_NEW` isn't actually a Python routine, it's a numpy one, but that's largely irrelevant. The Python equivalent is `cpython.mem.PyMem_Malloc` and family. The reason I don't use the latter in general is because sometimes `PyMem_Malloc` allocates into Python-reserved stack-space, and if we subsequently pass the pointer to numpy, it will try to free it and cause a segfault. The reason for using `malloc` and `free` here is mostly just because there was a comment in the code I copied it from saying that raw `malloc` and `free` were slightly faster for allocating heap space to be released within the same function, so I just did what they did. I can change it - it's not important. When allocating space that _may_ be passed to numpy, I always use `PyDataMem_NEW` (or friends). 5. That's a mistake - I meant to take out that ability in `matmul_csr` because it's just asking for trouble (the user won't know how much space to allocate, and we're basically just asking for a segfault). I did `matmul_csr` first, and I hadn't decided yet exac",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004:1415,rout,routine,1415,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004,1,['rout'],['routine']
Integrability," it is in the scope of qutip to try and make that easier, or guide users to do that. The philosophy here is, if the user can get the `mpi4py.futures.MPIPoolExecutor` to work, then they can also use `mpi_pmap` in qutip. However, I did show in the tutorial notebook explicitly as an example how it works on the RIKEN cluster, and I refer to the mpi4py users guide. That being said, we do want to set up an automated test for this, and we do want to understand what went wrong in our initial attempts to set up those tests. The two main problems we encountered were (a) if mpi4py is installed with pip, all mpi_pmap calls hang; (b) if it is installed with conda, test_map_pass_error hangs sometimes.; The difference between pip and conda comes from the fact that mpi4py requires an MPI implementation. If we use mpi4py's GH workflow to install it with pip, it installs MPICH, and with conda, it installs OpenMPI by default. I noticed that in both cases where mpi_pmap hangs, there *are* error messages, but they are captured by pytest and then never printed because the program hangs... Regarding problem (a), in short, it looks like an MPICH bug to me. I thus decided to use OpenMPI instead, and added `conda install ""openmpi<5"" mpi4py` to just one of our test runs (the python 3.12 one). Regarding problem (b), the problem was that we requested more processes than the default number of slots available. With OpenMPI, the default number of slots available is the number of physical cpu cores (which seems to be 2 on the machine running our tests, leaving only one slot for a worker process). In the `parallel` module, if num_cpus is not provided, it defaults to `available_cpu_count()` (which is 4 on this machine, since there are 4 logical cpus). We could try to find a better default value for num_cpus for mpi_pmap, but I feel like writing that well would require deeper MPI knowledge than I have. What I did instead is, I tried to make it clear in the documentation that the default value might be ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432:1183,message,messages,1183,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1923102432,1,['message'],['messages']
Integrability," module is small and very focussed. 2. Exactly - it's more of an internal type. Currently `Qobj` converts the underlying data object to dense `ndarray` and prints it for its `repr` method - I don't have any plans to change that, so `Qobj` will still be full and user-facing. My `CSR` repr actually just tells you the same information that `scipy.sparse.csr_matrix` does, just in a slightly more Python-looking form. 3. Yes, in some form or another. Perhaps we could talk about the best way to do that in a future meeting?. 4. `PyDataMem_NEW` isn't actually a Python routine, it's a numpy one, but that's largely irrelevant. The Python equivalent is `cpython.mem.PyMem_Malloc` and family. The reason I don't use the latter in general is because sometimes `PyMem_Malloc` allocates into Python-reserved stack-space, and if we subsequently pass the pointer to numpy, it will try to free it and cause a segfault. The reason for using `malloc` and `free` here is mostly just because there was a comment in the code I copied it from saying that raw `malloc` and `free` were slightly faster for allocating heap space to be released within the same function, so I just did what they did. I can change it - it's not important. When allocating space that _may_ be passed to numpy, I always use `PyDataMem_NEW` (or friends). 5. That's a mistake - I meant to take out that ability in `matmul_csr` because it's just asking for trouble (the user won't know how much space to allocate, and we're basically just asking for a segfault). I did `matmul_csr` first, and I hadn't decided yet exactly what I was doing. 6. Yeah, I'm going to add additional `imul`, `ineg` and `idiv` routines as dispatched operations. 7. LAPACK/BLAS as far as we can. I've no pretense to being able to write faster code than hardware-specific optimised stuff for matrices. I haven't actually written most of the numerical code in this PR either - it's just ported from current `qutip`, with the variable names changed to be more descriptive.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004:2508,rout,routines,2508,https://qutip.org,https://github.com/qutip/qutip/pull/1296#issuecomment-648270004,1,['rout'],['routines']
Integrability," not ideal as a Dense, but I don't think we should raise an error for other type... It doesn't actually restrict the RHS to CSR -- it only *constructs* the RHS as a CSR initially. The base solver will convert the RHS to the correct format for the integrator if needed. It might be possible one day to avoid constructing the RHS as a CSR but it might be tricky to make it not horribly slow, so I'd like to leave this as potential enhancement rather than work on it right now. > There is no `heomsolve` to go with `HEOMSolver`. I've added `heomsolve`. It has more parameters than `sesolve` or `mesolve`, which is not great, but I'm not sure how to avoid it. The bath and the max_depth are not really optional for the HEOM, and there aren't reasonably default values. > With other solvers, they accept `H` as a `Qobj` or `QobjEvo` only, list format is accepted by the __solve function. I changed HEOMSolver to only support `Qobj` or `QobjEvo`. I allowed `HSolverDL` to continue to support other objects since `HSolverDL` exists only for backwards compatibility. Perhaps we should remove it at some point, but the amount of code in it is also tiny. > `bofin_*.py` does not have a `__all__`, even if they are not supposed to be imported directly, it would be better if they had. I've added `__all__`.; ; > The test coverage does not include time-dependent Hamiltonian. Are those too slow to include in automated tests?. The tests don't include a truly time-dependent case because it's hard to solve one analytically. Previously I tested the time-dependent logic by supplying `[H]` as the system (i.e. fooling the code into using the time-dependent path) but that broke when I switched to using `QobjEvo.isconstant`. I fixed it by using `[H, lambda t: 1.0]` instead, which would be very hard to determine as constant. Thank for picking this up. Me might be able to do a truly time-dependent test by running with a memory-less bath and comparing with mesolve, but I'd also like to leave that as future work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1165701845:1518,depend,dependent,1518,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1165701845,5,['depend'],['dependent']
Integrability," of `__qutip_qobj_interface__`, as in the conversion it might be necessary to copy anyway so the downstream implementor is responsible for taking care of the copy if requested. ```python; class QobjMetaclass(type):; def __call__(cls, inpt=None, dims=None, shape=None,; type=None, isherm=None, copy=True,; fast=False, superrep=None, isunitary=None):. if isinstance(inpt, Qobj):; pass; elif hasattr(inpt, ""__qutip_qobj_interface__""):; inpt_data = inpt.__qutip_qobj_interface__(copy=copy). inpt = inpt_data['matrix']; dims = inpt_data['dims']; copy = False. obj = cls.__new__(cls, inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); obj.__init__(inpt, dims, shape, type, isherm, copy, fast,; superrep, isunitary); return obj. class Qobj(object, metaclass=QobjMetaclass):; ...; ```; I'm quite sure this implementation can be improved, however. On the NetKet side, the implementation is very simple. At the moment we only support operators from H->H.; ```python; class AbstractOperator:; ... ; def __qutip_qobj_interface__(self, dims, copy=True):; return {'matrix': stacked_rows_to_stacked_cols(self.hilbert, self.to_sparse()),; 'dims': [list(self.hilbert.shape), list(self.hilbert.shape)]}; ```. This already is quite nice and allows for quick and simple interoperability. Some comments/questions:; - Qutip uses stacked columns (column major) ordering for the tensor products, as opposed to NumPy `kron` ordering that is stacked rows, right? ; - To signal that an object is a super-operator (Liouvillian) is it sufficient to pass a correctly constructed `dims` or I should also provide `superrep`?; - Is there a reason you don't accept tuples as inputs to `basis(dims, x)` and other similar functions, but only lists? ; - I played around with auto-converting input hamiltonians and jump operators in `qutip.sesolve` and `mesolve` to `Qobj` if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601:1668,interoperab,interoperability,1668,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-829966601,2,"['interface', 'interoperab']","['interface', 'interoperability']"
Integrability," passed `type` - nothing else is overwritten if passed explicitly - you could achieve all the same effects at approximately the same speed with correct application of the kwargs, such as; ```python; Qobj(data, dims=dims, copy=False, type='oper', isherm=...); ```; providing `data` is actually of a valid (`fast_csr_matrix`) format. Technically the `Qobj.data` attribute will be a new object that wraps the same numpy arrays as was passed, rather than the same `fast_csr_matrix`. In various forms, `expect` already does check the Hermicity, that's why `mc-dm` is careful to set it to avoid recalculating it. The expect functions in `qutip.expect` do this directly, and aren't aware of column-stacked density matrices - they'll just raise a TypeError. `mesolve` and `mcsolve` now bypass the `Qobj` stage and go direct to Cython - in 5.0 it might not be a terrible idea to route everything back through the `Qobj` form, since the performance issues there are solved (a column-stacked dense matrix can be directly wrapped by an f-ordered `Dense` type), and it's the natural central point of the code (and those parts are called from Python-space anyway, so no C concerns). Here though, the problem is actually that the expectation generator in `mesolve` correctly calculates the dtype of the output expectation array using both the state and the expectation operator, but then it does it incorrectly in the loop, and passes the hermicity down to Cython using only the expectation operator, which promptly throws out the complex part. So setting `fast='mc-dm'` in `Qobj` is a symptom of the same root cause as the problem here, rather than the cause itself. At the start of `mesolve` we don't assume that the state is Hermitian, but then inside the integration loop we do. We can still keep the speedup - if the output was created with a complex dtype, we can always safely say that we're passing in non-Hermitian operators, even if coincidentally at one timestep they happen to be anyway. See https://gith",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1460#issuecomment-796835048:1102,rout,route,1102,https://qutip.org,https://github.com/qutip/qutip/issues/1460#issuecomment-796835048,2,"['rout', 'wrap']","['route', 'wrapped']"
Integrability," right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:3823,interface,interface,3823,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,4,"['integrat', 'interface']","['integrator', 'integrators', 'interface']"
Integrability," says that its argument should be; > An array, any object exposing the array interface, an object whose `__array__` method returns an array, or any (nested) sequence. and `__array_wrap__` is like the reverse - it's for coercing numpy arrays back into this class. If we were to keep `__array__` in `Qobj`, we should also implement `__array_wrap__` for coercion back (something that isn't currently implemented). At the time and up to inclusively 1.19, the presence of `__array__` caused otherwise scalar types passed alone to `np.array` to return the output of `input.__array__(*args, **kwargs)`, instead of becoming a 0D numpy array (like `np.array(1)` does). Taken purely alone, that could make sense as something we implement. However, this also implies that `Qobj` should fulfil the numpy ufunc interface; `Qobj` would be a container for data such that operations like `np.sin` is the elementwise sin, or (most notably) `np.multiply` is the *elementwise* multiplication. Our `Qobj` _does not_ fulfil the ufunc interface:; 1. elementwise operations don't make sense on quantum objects, which are arrays only as an implementation detail - the `Qobj` class is meant to represent an abstract linear algebra object, not specifically a matrix.; 2. we don't honour the `shape` guarantees of numpy as we test compatibility based on `dims`, which are not 1D (superoperators) so cannot follow numpy's broadcasting rules; 3. we treat multiplication as matrix multiplication, violating how `np.multiply` should behave. My main concern is point 1: I don't think that `Qobj` provides a similar object to an `ndarray` at all. Right now we _do_ use matrices underneath, but proposed additions to QuTiP such as symbolic `Qobj` and adaptive Hilbert spaces are compatible with the idea of ""abstract linear algebra objects"", but do not necessarily have a backing array. Point 2 is mostly an extension of that: I'm not sure there is a sensible way for numpy's broadcasting rules to be applied to quantum objects as the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:4134,interface,interface,4134,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['interface'],['interface']
Integrability," since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent ch",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5991,integrat,integrate,5991,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrate']
Integrability," surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatever `mesolve` does internally for a particular case. > We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:9901,integrat,integrator,9901,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,2,['integrat'],"['integrator', 'integrators']"
Integrability," there are; 1. objects which compare equal with `__eq__` have the same hash; 2. the hash of an object cannot change after instantiation (no mutable types). Unfortunately we fail on both points. `Qobj.__eq__` is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs and your cached function is computationally expensive, this may be a way to achieve what you want. Also note that this is not infallible: the floating-point tolerance used in `__eq__` means that `Qobj` does not satisfy transitive equality (i.e. `",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:1239,wrap,wraps,1239,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,1,['wrap'],['wraps']
Integrability," this solver? It seems to be able to produce states which trace is not one, which seems strange. Thank you for your detailed comments! We are here at RIKEN working together with the authors of the paper linked above to try and add this functionality to qutip. So far, this PR is just a starting point for the collaboration, but proper documentation and examples are high on our priority list. To add some very quick explanation here: the master equation describing a general completely positive (but not necessarily CP-divisible) map can involve rate functions that become negative at some times. The usual Monte-Carlo algorithm cannot be applied in this case, but Donvil et al. describe [here](https://www.nature.com/articles/s41467-022-31533-8) and [here](https://arxiv.org/abs/2209.08958) a workaround where states are weighted with an ""influence martingale"". Including this weight, the involved states are indeed not normalized; however, the state that results from an average over sufficiently many trajectories is normalized. (Checking *how well* the average is normalized could maybe be used as an indicator of how good the convergence is, as noted at the top.). > I am not too sure about adding the time parameter to `_restore_state`. In floquet, the state produced need a basis change depending on time, but it was put in the `Result` so the state before and after the transformation can be stored. Maybe something like this would be useful, it would allow the `mu` to be saved in results. Putting this calculation into the `Result` instead does sound reasonable to me. I am unsure how to achieve that in practice though, since the result class used for a single trajectory is hard-coded in mcsolve:; ```; result = Result(e_ops, {**self.options, ""normalize_output"": False}); ```; Note that in principle, we could also get the time from the integrator in _restore_state without adding it as a function parameter. Tagging @hodgestar who suggested adding the time parameter to `_restore_state`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1414634007:1342,depend,depending,1342,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1414634007,2,"['depend', 'integrat']","['depending', 'integrator']"
Integrability," time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equat",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:7069,integrat,integrate,7069,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrate']
Integrability," trying to work towards a PR. Indeed. I was just trying to play around with this. . > If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries. I completely agree with your approach. I’m simply trying to push for this to be something that will come out in a reasonable timeframe and not be something forgotten. > We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment without using them together, but can't even have them coexist because of version incompatibilities in optional conversion features?. I do understand your point, and I see how you want to be backward and forward compatible, however I don’t think that my proposal would break different tools in the same environment. What I propose would simply prevent `qutip.Qobj(otherlibraryobject)` from working (with an explicative error message) if `otherlibrary` does not support the same qobj interface version. Everything else would work the same. You can still import and use the two libraries independently without issues. It’s indeed possible to design around this and supporting at the same time different versions of the interface, however, and there’s value in doing so. > To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. I don't know enough of the history behind numpy current api, but I see your point. however I'd like to reiterate that this is not what I am proposing. ; I think there is considerable difference between supporting arbitrary operations `new_obj = Qobj + netket_operator*5` (though if you are going to export dispatch hooks in `5.0`, this would be possible in a consistent way, I think) and `qutip.mesolve(netket_operator, ...)`. ; In the first, I do agree with your point that the nature python's `__add__/__radd__` is not commutative, leading",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:1969,message,message,1969,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,2,"['interface', 'message']","['interface', 'message']"
Integrability," x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```. However if I run it within valgrind:; ```; jake@tauros$ valgrind --suppressions=valgrind-python.supp python -Xfaulthandler eig.py; ==54530== Memcheck, a memory error detector; ==54530== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==54530== Using Valgrind-3.17.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info; ==54530== Command: python -Xfaulthandler eig.py; ==54530==; ==54530== Invalid write of size 8; ==54530== at 0x10ABF7A8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54530== by 0xFFFFFFFF: ???; ==54530== by 0x103124AFF: ???; ==54530== by 0x10312376F: ???; ==54530== by 0x10550F0BF: ???; ==54530== by 0x3FEFFFFFFFFFFFFF: ???; ```; the exact same. ## Further steps. I'm now reasonably convinced that this isn't directly an issue with QuTiP. I suspect it isn't an issue with `scipy` either, but I'm not sure - it looks like a slight overwrite in MKL on macOS, though it's also possible that `scipy` passes some invalid pointers when dropping down to BLAS/LAPACK. I get the impression that the next steps involve dropping down a level of abstraction, down to Cython to directly call scipy's wrappers, or even fully down to C and link directly against MKL. I _may_ have a look in the future, but I've had enough of it today for sure.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:8331,wrap,wrappers,8331,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['wrap'],['wrappers']
Integrability,"#1651 create a time-dependent bloch redfield tensor, but do not create a new `brmesolve` using it and remove the `br_codegen.py` etc. that uses it. So it won't solve it yet.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1727#issuecomment-980026178:20,depend,dependent,20,https://qutip.org,https://github.com/qutip/qutip/pull/1727#issuecomment-980026178,1,['depend'],['dependent']
Integrability,"**Summary of what was done:**. - Changes in floquet_master_equation_rates to make it faster.; - Corrected transposition errors in _floquet_master_equation_tensor_ and changes to make it faster. I also removed a line so that the ME is solved in the interaction picture, this implies a different basis change in the _floquet_markov_mesolve_ function.; - Correction in _floquet_markov_mesolve_. As explained in the point above, the Floquet-Markov ME was not being solved in the interaction picture, therefore I modified _floquet_master_equation_tensor_ and modified the basis change in _floquet_markov_mesolve_. This modification requires an additional variable in the entry of _floquet_markov_mesolve_ which can not be chosen by default. For the moment, if this variable is not given and _floquet_basis=False_, then the density matrix or expectation values are returned in the interaction picture, in the computational basis, and a warning message is sent. ; - Added integration options in: _floquet_modes, floquet_modes_t, floquet_modes_table, floquet_states_t, floquet_modes_t, floquet_wavefunction_t, fsesolve, floquet_master_equation_rates, fmmesolve_; - Added test functions to verify the dissipative dynamics:; a) Compare _fmmesolve_ and _mesolve_ for the cases: (NO drive but dissipation) and (Drive but NO dissipation); b) Compare numerical and analytical matrix elements for a driven-dissipative TLS with RWA. There are some places where the code could be modified to optimize the running time, especially in the basis change in _floquet_markov_mesolve_.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1248#issuecomment-740126949:938,message,message,938,https://qutip.org,https://github.com/qutip/qutip/pull/1248#issuecomment-740126949,2,"['integrat', 'message']","['integration', 'message']"
Integrability,"+ self.Rt_timedep_pairs = []; > + for idx, key in enumerate(RateDic.keys()):; > + if key != 0.0:; > + self.Rt_timedep_pairs.append(list([Rate_Qobj_list[idx],; > + 'exp(1j*' + str(; > + key * list(Hargs.values())[0]); > + + '*t)'])); > + self.Rt_timedep_pairs = [list([Rate_Qobj_list[idx],; >; > This is defined twice...; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245675791>:; >; > > + time_sense=0,; > + quicksolve=False,; > + options=None):; > + """"""; > + Parameters; > + ----------; > +; > + H : :class:`Qobj`,:class:`QobjEvo`,:class:`QobjEvo` compatible format.; > + Periodic system Hamiltonian as :class:`QobjEvo`. List of; > + [:class:`Qobj`,:class:`Coefficient`] or callable that; > + can be made into :class:`QobjEvo` are also accepted.; > +; > + rho0 / psi0 : :class:`qutip.Qobj`; > + Initial density matrix or state vector (ket).; > +; > + Taulist:*list* / *array*; >; > Since time dependent c_ops not being supported is the exception, it would; > be nice to have a note in this regard.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245633903>:; >; > > + List of lists of [collapse operator,collapse operator rate] pairs; > +; > + e_ops : list of :class:`qutip.Qobj` / callback function; > + List of operators for which to evaluate expectation values.; > + The states are reverted to the lab basis before applying the; > +; > + args : *dictionary*; > + Dictionary of parameters for time-dependent Hamiltonian; > +; > + time_sense : float; > + Experimental. Value of the secular approximation (in terms of system; > + frequency 2*np.pi/T) to use when constructing the rate matrix R(t).; > + Default value of zero uses the fully time-independent/most strict; > + secular approximation.; > +; > + quicksolve: Boolean; >; > The function does not seems to use it...; >; > —; > Reply to this email directly, view it on GitHub; > <ht",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:14691,depend,dependent,14691,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['depend'],['dependent']
Integrability,", but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density ma",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6359,integrat,integrator,6359,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Integrability,", hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:7364,integrat,integrate,7364,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrate']
Integrability,"- I agree that renaming the _inner_point_color variable is a good idea. - The case you mention of black point_color with style 'l' also occurs in V4 and is solved by defining the variable as a list, e.g., ['black'] (which also works with the changes I proposed). So basically I assumed it was an expected use case. - I asked this question about style 's' plotting two colors in issue #1974, since we are given the same colors for style 's' and 'm', and Neil suggested leaving it as is. The docstring in the add_points function already tells you to give a single color for style 's' and a list of colors for style 'm'. - The error you get using style 'm' with two colors is that you need to specify a color for each point (you have to pass to the function a list of colors of the same length as the length of the points). In view of this, I don't know which approach you prefer to apply, as it depends on the expected use case. Given that the code works, perhaps the priority would be to specify the expected use while defining as part of issue #1913 the modifications you consider appropriate (although maybe someone will catch it earlier if you define it as a new issue).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2308#issuecomment-1916739672:893,depend,depends,893,https://qutip.org,https://github.com/qutip/qutip/pull/2308#issuecomment-1916739672,1,['depend'],['depends']
Integrability,"- [ ] Document new user-modifiable settings (`log_handler`, `colorblind_safe`).; - [ ] Document new `.qutiprc` format, OS-dependent location.; - [ ] Document new unmodifiable settings (`fortran`, `umfpack`, `ipython`).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1524#issuecomment-191622423:122,depend,dependent,122,https://qutip.org,https://github.com/qutip/qutip/issues/1524#issuecomment-191622423,1,['depend'],['dependent']
Integrability,". We can also fix QuTiP library code by removing all times we try and put `Qobj` inside numpy arrays on our end, which would also be a fix. I've actually mellowed on my total opposition to `Qobj.__array__`. Thinking more, I'm not actually super unhappy with the idea of deprecating `Qobj.full()` in QuTiP 5.0 (not removing until at least 6.0, since it's such a major function) and promoting `np.array(qobj)` to be the de jure method of getting the dense array out of a `Qobj`. Qiskit recently (Qiskit/qiskit-terra#5402) changed their behaviour to do something very similar to this. You still wouldn't be able to put `Qobj` into numpy arrays except by doing something like; ```python; qobjs = np.empty(3, dtype=object); qobjs[:] = [qutip.qeye(2), qutip.qeye(2), qutip.qeye(2)]; ```; but probably that's not _too_ much of a big deal. Leaving QuTiP as it is right now would require that anyway. My main problem is actually just with allowing ufuncs and other numpy interfaces to act directly on `Qobj` without an explicit conversion step, because it promotes the idea that it's ok to act elementwise on a `Qobj`. I don't think we should allow ufuncs at all - `Qobj` is not meant to be like an `ndarray` and ufunc semantics don't make sense. We can set `Qobj.__array_ufunc__ = None` and `Qobj.__array_function__ = None` to disable numpy functions acting on `Qobj` directly. Example with this in place:; ```python; >>> import qutip; >>> import numpy as np; >>> np.array(qutip.qeye(2)); array([[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]]); >>> np.array([qutip.qeye(2), qutip.qeye(2)]) # Not ideal, but not our fault.; array([[[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]],. [[1.+0.j, 0.+0.j],; [0.+0.j, 1.+0.j]]]); >>> np.sin(qutip.qeye(2)); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; TypeError: operand 'Qobj' does not support ufuncs (__array_ufunc__=None); >>> np.sin(np.array(qutip.qeye(2))); array([[0.84147098+0.j, 0. +0.j],; [0. +0.j, 0.84147098+0.j]]); ```; Alternatively, if people _r",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:1256,interface,interfaces,1256,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['interface'],['interfaces']
Integrability,".. ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Qobj) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (OO) ... ok; control.pulseoptim: Hadamard",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:2859,depend,dependent,2859,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['depend'],['dependent']
Integrability,"/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54133== by 0xFFFFFFFF: ???; ==54133== by 0x1162E4DEF: ???; ==54133== by 0x1162E3A5F: ???; ==54133== by 0x10550EB3F: ???; ==54133== by 0x3FEFFFFFFFFFFFFF: ???; ```. Obviously I don't have the debugging symbols for MKL, so it's pretty hard to say where exactly it's coming from, but it is at least clearly inside that library. I ran `valgrind` on the `Malloc.py` file above, and get the exact same invalid write, which is promising. So the most likely public Python call is `scipy.linalg.eig`. ## Minimal reproducer. Ok, so now let me cut it down to a minimum `eig.py`:. ```python; import numpy as np; import scipy.linalg. x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```. However if I run it within valgrind:; ```; jake@tauros$ valgrind --suppressions=valgrind-python.supp python -Xfaulthandler eig.py; ==54530== Memcheck, a memory error detector; ==54530== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==54530== Using Valgrind-3.17.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info; ==54530== Command: python -Xfaulthandler eig.py; ==54530==; ==54530== Invalid write of size 8; ==54530== at 0x10ABF7A8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54530== by 0xFFFFFFFF: ???; ==54530== by 0x103124AFF: ???; ==54530== by 0x1031237",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:6794,message,message,6794,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['message'],['message']
Integrability,"1. Don't worry, those aren't problems. A problem would just say ""FAIL"". ""XFAIL"" means ""expected to fail"", which in this case is because those tests were written for an older testing framework and haven't been updated yet.; 2. No, you don't need to worry. If it's installed, you'll get a message at the end which says something like; ```====== 1000 passed, 50 skipped, 10 xfailed in 120s ======```; where the numbers and times will be different, but there won't be any red text saying ""10 failed"" (""xfailed"" is fine). If you've installed `qutip` from `conda` following the [recommended instructions here](http://qutip.org/docs/latest/installation.html#platform-independent-installation), then you should have a valid installation without any issues, and Cython should have sorted itself out. The general principle is that installing `qutip` is as easy as running; ```conda install qutip```; if you've got the `conda-forge` channel activated.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1222#issuecomment-606166596:287,message,message,287,https://qutip.org,https://github.com/qutip/qutip/issues/1222#issuecomment-606166596,1,['message'],['message']
Integrability,"14798043-0.36381018j, 0.19057482+0.j ]],. [[ 0.74030166+0.j , -0.42252924+0.11715014j],; [-0.42252924-0.11715014j, 0.25969834+0.j ]],; [[ 0.76627252+0.j , 0.14479804+0.39765874j],; [ 0.14479804-0.39765874j, 0.23372748+0.j ]],; [[ 0.69965345+0.j , 0.4260361 -0.16920917j],; [ 0.4260361 +0.16920917j, 0.30034655+0.j ]],; [[ 0.80355468+0.j , 0.36706718-0.15204028j],; [ 0.36706718+0.15204028j, 0.19644532+0.j ]]]) . predictions=[mesolve(H,; Qobj(estados_val[i]),; time,list_Jump_op,options=Options(nsteps=1000000000)) for i in range(len(estados_val))]`. ```; `---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-26-ef5799d8412d> in <module>; 26 [ 0.36706718+0.15204028j, 0.19644532+0.j ]]]) ; 27 ; ---> 28 predictions=[mesolve(H,; 29 Qobj(estados_val[i]),; 30 time,list_Jump_op,options=Options(nsteps=1000000000)) for i in range(len(estados_val))]. <ipython-input-26-ef5799d8412d> in <listcomp>(.0); 26 [ 0.36706718+0.15204028j, 0.19644532+0.j ]]]) ; 27 ; ---> 28 predictions=[mesolve(H,; 29 Qobj(estados_val[i]),; 30 time,list_Jump_op,options=Options(nsteps=1000000000)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 progress_bar, dims=rho0.dims); 274 res.num_collapse = len(c_ops). ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 515 ; 516 if not r.successful():; --> 517 raise Exception(""ODE integration error: Try to increase ""; 518 ""the allowed number of substeps by increasing ""; 519 ""the nsteps parameter in the Options class.""). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class.`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605#issuecomment-879127553:2117,integrat,integration,2117,https://qutip.org,https://github.com/qutip/qutip/issues/1605#issuecomment-879127553,2,['integrat'],['integration']
Integrability,"31 manager.canvas.draw_idle(). File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/backend_bases.py:1919, in FigureCanvasBase.draw_idle(self, *args, **kwargs); 1917 if not self._is_idle_drawing:; 1918 with self._idle_draw_cntx():; -> 1919 self.draw(*args, **kwargs). File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/backends/backend_agg.py:387, in FigureCanvasAgg.draw(self); 384 # Acquire a lock on the shared font cache.; 385 with (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar; 386 else nullcontext()):; --> 387 self.figure.draw(self.renderer); 388 # A GUI class may be need to update a window using this draw, so; 389 # don't forget to call the superclass.; 390 super().draw(). File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/artist.py:95, in _finalize_rasterization.<locals>.draw_wrapper(artist, renderer, *args, **kwargs); 93 @wraps(draw); 94 def draw_wrapper(artist, renderer, *args, **kwargs):; ---> 95 result = draw(artist, renderer, *args, **kwargs); 96 if renderer._rasterizing:; 97 renderer.stop_rasterizing(). File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/artist.py:72, in allow_rasterization.<locals>.draw_wrapper(artist, renderer); 69 if artist.get_agg_filter() is not None:; 70 renderer.start_filter(); ---> 72 return draw(artist, renderer); 73 finally:; 74 if artist.get_agg_filter() is not None:. File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/figure.py:3155, in Figure.draw(self, renderer); 3152 # ValueError can occur when resizing a window.; 3154 self.patch.draw(renderer); -> 3155 mimage._draw_list_compositing_images(; 3156 renderer, self, artists, self.suppressComposite); 3158 renderer.close_group('figure'); 3159 finally:. File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/image.py:132, in _draw_list_compositing_images(renderer, pare",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2400#issuecomment-2142000903:1798,wrap,wraps,1798,https://qutip.org,https://github.com/qutip/qutip/issues/2400#issuecomment-2142000903,1,['wrap'],['wraps']
Integrability,"4-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:8659,message,message,8659,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['message'],['message']
Integrability,"; >; > This is defined twice...; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245675791>:; >; > > + time_sense=0,; > + quicksolve=False,; > + options=None):; > + """"""; > + Parameters; > + ----------; > +; > + H : :class:`Qobj`,:class:`QobjEvo`,:class:`QobjEvo` compatible format.; > + Periodic system Hamiltonian as :class:`QobjEvo`. List of; > + [:class:`Qobj`,:class:`Coefficient`] or callable that; > + can be made into :class:`QobjEvo` are also accepted.; > +; > + rho0 / psi0 : :class:`qutip.Qobj`; > + Initial density matrix or state vector (ket).; > +; > + Taulist:*list* / *array*; >; > Since time dependent c_ops not being supported is the exception, it would; > be nice to have a note in this regard.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245633903>:; >; > > + List of lists of [collapse operator,collapse operator rate] pairs; > +; > + e_ops : list of :class:`qutip.Qobj` / callback function; > + List of operators for which to evaluate expectation values.; > + The states are reverted to the lab basis before applying the; > +; > + args : *dictionary*; > + Dictionary of parameters for time-dependent Hamiltonian; > +; > + time_sense : float; > + Experimental. Value of the secular approximation (in terms of system; > + frequency 2*np.pi/T) to use when constructing the rate matrix R(t).; > + Default value of zero uses the fully time-independent/most strict; > + secular approximation.; > +; > + quicksolve: Boolean; >; > The function does not seems to use it...; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/2186#pullrequestreview-1502921416>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AV5WL5AGKQRG75CR5YOQUD3XNSCP7ANCNFSM6AAAAAAZWI6GRQ>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:15278,depend,dependent,15278,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,4,"['Message', 'depend']","['Message', 'dependent']"
Integrability,"; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Qobj) ... ok; control.pulseoptim: Hadamard gate with linear",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:2803,depend,dependent,2803,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['depend'],['dependent']
Integrability,"=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278046 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: rhs_reuse : pyx filenames match for rhs_reus= True; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:1924,depend,depends,1924,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278047 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: sesolve: state with td list str H; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", lin",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:6353,depend,depends,6353,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278048 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: sesolve: unitary operator with td list str H; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximpo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:10855,depend,depends,10855,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278049 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: sesolve: state with td interp H; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:15402,depend,depends,15402,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278050 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: sesolve: unitary operator with td interp H; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:19900,depend,depends,19900,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278051 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: sesolve: compare state and unitary operator evo - list str td; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:24442,depend,depends,24442,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278052 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: Steady state: Driven cavity - power-gmres solver; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_steadystate.py"", line 490, in test_driven_c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:29031,depend,depends,29031,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_rhs_reuse.py"", line 53, in test_rhs_reuse; out1 = qt.mesolve(H, psi0,tlist, e_ops=e_ops); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\mesolve.py"", line 336, in mesolve; e_ops, args, options, progress_bar); File ""C:\",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:3815,depend,depends,3815,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 190, in test_04_1_state_with_list_str_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 64, in check_evolution; args=td_args); File ""C:\Users\MTS-144\Ana",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:8227,depend,depends,8227,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 207, in test_04_2_unitary_with_list_func_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 67, in check_evolution; output = sesolve(H, U0, tlist, args=td",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:12740,depend,depends,12740,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 226, in test_05_1_state_with_interp_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 64, in check_evolution; args=td_args); File ""C:\Users\MTS-144\Anaco",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:17274,depend,depends,17274,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 245, in test_05_2_unitary_with_interp_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 67, in check_evolution; output = sesolve(H, U0, tlist, args=td_ar",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:21783,depend,depends,21783,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 354, in test_06_4_compare_state_and_unitary_list_str; normalize=False, td_args=td_args, tol=5e-5); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 255, in compare_evolution",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:26344,depend,depends,26344,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"> #1651 create a time-dependent bloch redfield tensor, but do not create a new `brmesolve` using it and remove the `br_codegen.py` etc. that uses it. So it won't solve it yet. I don't think we need to rush -- we can finish #1651 and then do the next one, and then hopefully come back to this one. At least coefficients seem to work now, so hopefully people who are keen can try out this branch in the mean time if they want to.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1727#issuecomment-980042116:22,depend,dependent,22,https://qutip.org,https://github.com/qutip/qutip/pull/1727#issuecomment-980042116,1,['depend'],['dependent']
Integrability,"> * We have added a Users Guide for the new solver, as a new subsection of the ""Monte Carlo Solver"" guide. On my machine, I can build the documentation without problems (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?. The error in the documentation (HTTP Error 403) is unrelated the the actual build. It happen from time to time randomly... you can ignore it.; However the documentation build will fail on warnings. > * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; ; qutip-notebook is no longer used, we migrated to qutip-tutorial. Please open a new PR there. > * The _run_one_traj function now exists 3 times, with practically identical code:; > https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; > https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; > https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; > Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. There is a fourth `_run_one_traj` coming for the stochastic solver with also almost the same code...; Yes, some cleaning is needed and having a swap-able trajectory result class would be nice.; I looked at your implementation and it look fine.; I would just rename `trajectoryclass` to `trajectory_result_class` or something similar, otherwise it make me think it refer to the removed `TrajectorySolver`. > I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](h",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702:295,message,message,295,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702,1,['message'],['message']
Integrability,"> * What is the reason that the time-dependent weights are still part of the trajectory result? That seems a bit inconsistent to me and I wonder if the `TrajectoryResult` class could perhaps just be removed?. The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I will look into it this week.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851:37,depend,dependent,37,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851,2,['depend'],['dependent']
Integrability,"> 1 - we can't have proper namespacing, but let's at least make the magic name __qutip_qobj__ so we realistically prevent any chance of a clash. I think this is a good idea. Indeed jax uses the same trick (they define the `__jax_array__` interface). While I think that Qobj is a very qutip-like principle, I see no problems in namespacing. > 2- having the check in __init__ . Again, I think that your observation is right. I thought about it only after I submitted the post above. The way numpy does it is that `__array__(self, dtype)` takes only one argument, but I think we can do better and better respect the API set by qutip. ; That is why I was suggesting that `object.__qutip_qobj__` should not return a Qobj directly, but rather the data needed by QuTiP to construct a Qobj, and qutip should be free to re-organize it afterwards as he likes. . > 3 - we need to take care to do this in a way that still allows QuTiP to iterate and improve Qobj.__init__ between major versions. You could for example require that `__qutip_qobj__(self, version, *kwargs)` takes in a version of the API? I believe that is what numpy does in `__array_interface__`. And it's on implementers of the interface the burden of checking the api version and throwing an error if it's not supported. Or the inverse, where implementers return whatever data they return and a version of the API they are using, and qutip can throw an error if that is an older version. The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip. I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. -- ; About keyword handling: copy-pasting the list of kwargs of `Qobj`...; ```python; inpt : arra",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810:238,interface,interface,238,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810,1,['interface'],['interface']
Integrability,"> ; > ; > @thangleiter can you try with the dependencies (cython numpy scipy nose matplotlib)? What Python are you using and what OS?. I am building (and running) the Docker image from Windows 10 1803 Education. The image itself is based on Alpine Linux (see [https://github.com/ContinuumIO/docker-images/tree/master/miniconda3](url)) and runs Python 3.7.1 (or lower, depending on the qutip version's requirements). Explicitly installing the dependencies also results in an `Illegal Instruction`. The dockerfile for reference:; ```dockerfile; FROM continuumio/miniconda3. RUN conda config --append channels conda-forge && conda update -y --quiet conda && conda install -y --quiet qutip cython numpy scipy nose matplotlib; ```. Edit: Some further investigation revealed that the crash also happens in the WSL Ubuntu shell with miniconda manually installed and Python 3.6 and 3.7. It doesn't crash with the same setup and Python 3.5, however. Edit 2: Installing via pip or from source works with Python 3.7 and qutip 4.3.1, so the problem is definitely the conda package.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-480771908:44,depend,dependencies,44,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-480771908,3,['depend'],"['dependencies', 'depending']"
Integrability,"> ; > ; > Different platforms have some subtle differences in how multiprocessing works: On linux, processes ""fork"". My basic understanding is that sub-processes are created as copies of the parent process, thus inheriting their entire state (global variables/functions). Windows, and [macOS with Python >= 3.8](https://twitter.com/raymondh/status/1180209729609420800) uses ""spawn"". There, I believe subprocesses start from blank slate, and relevant global state is injected via IPC. Sadly, limitations of the pickle protocol can cause ""spawn""-based multiprocessing to have problems.; > ; > Jupyter notebooks are affected by this: you cannot use multiprocessing-map using functions defined within the notebook.; > ; > Within qutip, this definitely affects the `parallel_map` function: It currently will cause freezes on Windows (See https://qucontrol.github.io/krotov/v1.0.0/notebooks/08_example_ensemble.html). With Python 3.8, macOS is also affected by this. See [qutip/qutip-notebooks#100](https://github.com/qutip/qutip-notebooks/issues/100); > ; > One possible workaround is to use a third-party replacement for multiprocessing. An work-in-progress implementation of this is in #1092, using [loky](https://loky.readthedocs.io).; > ; > In #1197, we also identified a freeze in `mcsolve` when running tests on macOS/Python 3.8. This is suspected to be an issue with spawn-based multiprocessing, although we haven't been able to determine this with complete confidence.; > ; > If the freeze is indeed caused by spawn-multiprocessing, the problem _should_ also show up on Windows. Is anyone running Windows able to reproduce this?. Windows doesn't have 'fork' at all, if we want to make parallel_map work under windows, we have to find ways to 'spawn' efficiently.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1202#issuecomment-683628416:466,inject,injected,466,https://qutip.org,https://github.com/qutip/qutip/issues/1202#issuecomment-683628416,2,"['inject', 'protocol']","['injected', 'protocol']"
Integrability,> ; > ; > Seems interesting but tests are failing... Hi Ericgig!. Thank you very much for looking into this! I haven't been able to figure out why the build is failing; the error messages quote parts of the code that I didn't even modify. Could you assist me in finding out why?. Thanks a bunch!; Nithin,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/912#issuecomment-466180105:179,message,messages,179,https://qutip.org,https://github.com/qutip/qutip/pull/912#issuecomment-466180105,1,['message'],['messages']
Integrability,"> @cgranade When we initially talked about this, we also spoke about storing Kraus superoperators with it, but it's not completely clear to me whether this route covers that case. ""No"" is fine (we don't have to make this work for everything) but if the answer is ""Yes"" or ""Maybe"", what would that look like?. At the moment, no. Following our discussion, it sounded like separating the two features may make the most sense such that I wanted to focus first on representing instruments. > > I've played around with using if_ to compute the noisy channel one gets for state teleportation when operations are perfect but classical outcomes get scrambled; would that be useful, perhaps?; > ; > That sounds like a great example!. Awesome, I'll go add that as a draft PR to the notebooks repo, then, so as to develop both in parallel. > > Fair enough, easy to drop that as well. Would you want everything dropped, or would some things like the core type QInstrument itself be reasonable to keep in qutip.**all**; > ; > Let's keep QInstrument in since that feels at the same level as Qobj and QobjEvo and we can think about other things on a case by case basis (and see what v5 is doing). Sounds good, will do!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-951361876:156,rout,route,156,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-951361876,1,['rout'],['route']
Integrability,"> @hodgestar I gave it a first read. Thank you!. > I would suggest the split the `bofin.py` file and move out the `Bath` to make it less heavy. I've been thinking of splitting the file up a bit too but have been waiting until I was ready to replace heom.py. The Bath and Bath exponent classes could possibly be separated from the solver and solver support classes. > The interface for `Bath` seems quite hard to use. An expansion of the correlation function is useful for the solving, but I feel we should have more helper function for the user. There are three tiers of bath classes:. * Bath: Low-level. One gets to specify exactly the exponents one wants by hand.; * BosonicBath and FermionicBath: Mid-level. Flexible but one has to specify the expansion coefficients.; * DrudeLorentzBath and DrudeLorentzPadeBath: High-level. Support for specific bath models. I discussed having a class that would automatically fit a correlation function with Niell, and he has experiment with that but it's bit tricky to make it work well in a generic way. E.g. For the DrudeLorentz bath there is a divergence in the exponent series at t = 0 which makes it hard to fit numerically. We'd like to add more generic support in future, but the current approach provides all the functionality of the existing HSolverDL and is sufficiently flexible to implement many more higher-level Bath classes easily in the future.; ; > Are `BathExponent` needed? I don't see why there is one object for each term and not one object for the whole decomposition. BathExponent its just a holder for all of the information associated with an expansion term. Three issues with treating whole expansions as one object are:. * some exponents contribute to two expansions (e.g. the RI exponent type); * some exponents are paired (e.g. the + and - types); * having exponents within expansions makes dealing with the hierarchy a mess because one has to have lists of lists of exponents with relationships between them and ADO labels would ha",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1601#issuecomment-964982005:371,interface,interface,371,https://qutip.org,https://github.com/qutip/qutip/pull/1601#issuecomment-964982005,1,['interface'],['interface']
Integrability,"> According to the error message; > ; > ```; > WARNING: invalid signature for automodule ('qutip.core.gates\n :members:\n :show-inheritance:\n :imported-members:'); > WARNING: don't know which module to import for autodocumenting 'qutip.core.gates\n :members:\n :show-inheritance:\n :imported-members:' (try placing a ""module"" or ""currentmodule"" directive in the document, or giving an explicit module name); > ```; > ; > That should be the error source. Lets use; > ; > ```; > .. automodule:: qutip.core.gates; > :members: ...; > ```; > ; > first and see if it works. Thank you, lets try that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2148458661:25,message,message,25,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2148458661,1,['message'],['message']
Integrability,"> Assuming Simon's point isn't just a complete answer to your question: in the general case, this is an impossible question to answer - it touches on many parts of numerical integration, such as tolerance limits and adaptive step-size methods. When you're dealing with completely arbitrary time-dependence, there's not really any one-size-fits-all approach that'll work (despite how RK45 is often taught as a magic bullet in physics courses).; > ; > Here, you will likely find that your RK45 results depend strongly on how many intermediate timesteps you use, whereas QuTiP's results will be (marginally) more stable. This is because QuTiP will internally subdivide the timesteps more to achieve internal precision goals, but then only returns the results at the time points you ask for. You can increase the maximum number of allowed subdivisions by increasing the `nsteps` parameter in a `qutip.Options` object, and with the `options` keyword argument. I addressed Simon's question. Also, I tried different solver options in mesolve including solver type, nsteps, relative and absolute tolerence, etc ... Also for RK45 I tried to change the parameters in order to see if the solutions coincide. They didn't. I don't know if there exists an analytically solvable problem in which both Hamiltonian and dissipation operators are time dependent, but if there is such a problem, then I can use it as a benchmark in order to compare QuTiP and RK45.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986665248:174,integrat,integration,174,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986665248,4,"['depend', 'integrat']","['depend', 'dependence', 'dependent', 'integration']"
Integrability,"> Could you send the equation for the case where `time_sense` is not `0`.; > ; > When I try it with a period of `1.0` it give extra term with very low frequencies:; > ; > ```; > dict_keys([0.0, 4.304872064735899e-09, 1.0157988986038049e-08, 1.1379302858450767e-08, -2.9820390185456766e-09, -4.304872064735899e-09, 5.8531169213021495e-09, 7.074430793714867e-09, -7.286911083281576e-09, -1.0157988986038049e-08, -5.8531169213021495e-09, 1.2213138724127176e-09, -1.3140028004583725e-08, -1.1379302858450767e-08, -7.074430793714867e-09, -1.2213138724127176e-09, -1.4361341876996443e-08, 2.9820390185456766e-09, 7.286911083281576e-09, 1.3140028004583725e-08, 1.4361341876996443e-08]); > ```; > ; > Is it normal? You did not include any test using `time_sense`.; > ; > ​. The relaxation of the secular approximation isn't by direct time-dependence. It was originally, but this was later changed to relax the secular approximation according to the ""importance"" of each term, which is dictated by a quotient. The numerator of the quotient is the product of the FFT coefficients that make up a certain element of the rate matrix super operator, and the denominator is the difference of frequencies between the two elements multiplied by the system frequency omega. When `time_sense` is `0`, the rate matrix is constructed using only the product of FFT coefficients for which the frequency arguments completely cancel. When `timesense` isn't `0`, however, is when that quotient comes into play. In a nutshell, this ends up dividing the rate at which a certain element changes the system by the frequency at which that rate rotates in the Floquet Basis. If the result of the quotient is small, the frequency is much higher than the collapse operator elements actually affect the system, such that it averages out on longer timescales. If the result of the quotient is large, then the collapse operator elements appreciably change the system on a shorter timescale than they rotate, such that their contribution t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1631503788:831,depend,dependence,831,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1631503788,1,['depend'],['dependence']
Integrability,"> Does anyone know how we would give some kind of deprecation warning when `from qutip import *` is made to say that only core functions will be imported from v5 onwards?. @ajgpitch . I know I'm resurrecting a dead thread, but I have a way of detecting star imports if you can cope with a fairly gross hack. The only internal difference in `from qutip import *` (that I know about) from `import qutip` is that in the former, the import system access the `qutip.__all__` list to see which names it should import. This is intended to be a list of names, so the star import doesn't _have_ to import every single name, i.e. so you can manually set what's public to a module; the star import is designed for use within packages, and the user importing a package like that is strongly recommended against (though in scientific code, I'm 100% sure that's a losing battle). So, what if we make `__all__` _look_ like a list, but a list that injects a warning whenever anyone tries to see what items it has? An example:; ```python; import warnings as _warnings. x = 2. class _all_wrapper(list):; def __iter__(self, *args, **kwargs):; _warnings.warn(""You star-imported!""); return super().__iter__(*args, **kwargs). __all__ = _all_wrapper(['x']); ```; I put that in a package called ""test"".; ```python; >>> from test import x; >>> x; 2; ```; or; ```python; >>> from test import *; /Users/jake/code/tmp/test/__init__.py:7: UserWarning: You star-imported!; _warnings.warn(""You star-imported!""); >>> x; 2; ```. I won't complain if you want to scream after that...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1071#issuecomment-605502925:932,inject,injects,932,https://qutip.org,https://github.com/qutip/qutip/issues/1071#issuecomment-605502925,1,['inject'],['injects']
Integrability,"> Don't put a link on a word if it doesn't specifically refer to the object you're linking to. Yeah, I was worried if linking words like ket, bra were needed or not. I'll remove them. . > The ""Raises"" section should only be for very non-obvious errors; > Don't put the error message in the description of a ""Raises"" section. No problem. I will remove errors created due to incorrect parameters and other obvious errors + error messages. I will add a parameters section if needed to clarify over ValueError. . > I saw a few places where changes in the formatting accidentally deleted a word, or hid some extra meaning. I think the accidental deletes might have been due to getting caught in some cut/copy/paste flow. . > Do you have the docs building correctly?. Yes, I do. I was a bit confused about how to try to format to functions not in API doc. So, I still tried to link a `ref` to them so that they are formatted similar to hyperlinks. I think a couple of these appear as italics.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1499#issuecomment-832138853:275,message,message,275,https://qutip.org,https://github.com/qutip/qutip/pull/1499#issuecomment-832138853,2,['message'],"['message', 'messages']"
Integrability,"> From what I understand, on intel, brmesolve seems to work correctly, but not on M1. This look like an issue with the eigensolver. Exactly. > Could you run the test suite to see if it fails the eigen and bloch redfield related tests: `pytest path_to_qutip/qutip/tests`. (Tests can take >30min). Yes it is failing these (and some others), but in particular it does fail everything in test_brmesolve.py and test_brmesolve_td.py. All failures I find seem to be related to the `Exception: ODE integration error` as mentioned in the original post.; On an emulated Intel terminal, the tests are all passing as expected.; This is strange, since I seem to find way more tests failing than reported in #1755.; Perhaps this is an issue with my installation, rather than qutip itself. I installed it in the standard way using conda (using the Apple Silicon version at 4.13). > Also could you look at the tensor directly:; > ; > ```; > R, H_eigenvector = bloch_redfield_tensor(sigmax(), a_ops=[[sigmax(), psd]]); > ```; > ; > If the tensor is wrong on M1, this would explain the error. Actually, that looks fine surprisingly enough (agrees with the Intel version). Thanks for the quick response. If I figure anything out, i'll let you know.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965#issuecomment-1203341063:490,integrat,integration,490,https://qutip.org,https://github.com/qutip/qutip/issues/1965#issuecomment-1203341063,1,['integrat'],['integration']
Integrability,"> General comment about plotting on the Bloch sphere:; > ; > QuTiP currently supports drawing either ""points"" or ""vectors"" (i.e. arrows). Both are specified as `(x, y, z)` coordinates and these are _not_ required to lie on the surface of the sphere. Lying outside the sphere is perhaps a bit odd, but lying inside the sphere is a common occurrence -- e.g. when plotting sub-components of a density matrix.; > ; > There is a method `add_states` that converts states into `(x, y, z)` coordinates and adds them as either points or vectors as requested.; > ; > I would thus recommend being able to specify lines and arcs using either `(x, y, z)` coordinates or states and not introducing spherical coordinates right now.; > ; > I'm not against duplicating some of the functionality of `add_points(..., meth=""l"")` in the new functions we add here. For one, the `meth=""l""` is not particular intuitive when looking for a function to draw lines, and, secondly, it doesn't provide particularly flexible styling.; > ; > My vote is to keep the old method interfaces fairly consistent with how they are now so as not to disrupt existing uses (adding some new optional parameters or tweaking things to look better is fine), and to add a couple of new methods. Let's try not to make the internals of `Bloch` more messy though. Thanks a lot, Simon (@hodgestar). My modification to the bloch.py follows what you have suggested. ; Also, the code can plot arcs inside and outside the bloch sphere too, and the line segment can be drawn between any two points. And the inputs have to be in cartesian coordinates.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-934360018:1044,interface,interfaces,1044,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-934360018,1,['interface'],['interfaces']
Integrability,"> Hi @hodgestar, thanks for chiming in!; > ; > What you posted here looks exactly like what I initially asked, so I am very much in favour of it.; > ; > I'm just slightly confused about what `_call_qutip_qobj` should return: in your example I assume `.data` is just a numpy/scipy matrix, so the `dims` data` is completely lost?. `_call_qutip_qobj` should return an instance of `qutip.core.data.Data` (i.e. an object that implements QuTiP 5's data layer protocol). > QuTiP's `dims` attribute is our `hilbert.shape` attribute, but of course the matrix representation has a different shape.; > If I am not mistaken in your example above this would result in the hilbert shape information being lost?. Correct.; ; > Is there no way we can preserve this information in some way?. My proposal is we should allow this information to be preserved. Some possible options I can see:. 1. Allow returning `dims` in addition to the `Data` object from the create function (bit ugly, only solves this one issue).; 2. Give the `Data` object a `dims` attribute that is usually `None` (probably not feasible because what should the dims of the result of `matmul(data_with_dims_none, data_with_dims_set)` be).; 3. Allow the creator function to return either `Data` or a full `Qobj` (requires some checking on all the places a `Qobj` is used).; 4. Add another creator (e.g. `create_qobj`) that only returns `Qobj`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908360109:453,protocol,protocol,453,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908360109,1,['protocol'],['protocol']
Integrability,"> Hi, `tesnor` takes a list of Qobj, not a nested list. For example: `tensor([destroy(2), destroy(2)])`. The nested list you are referring to is the time dependent operator who's tensor product I am taking. The argument is,; [destroy(2),[Qobj(np.array([[0,complex(0,-1)*np.conj(H_a01)],[0,0]]),dims=[[2],[2]]), u_t]]; Which is a time dependent operator in the H = [H0, [H1, py_coeff1]] format. Here; H0 =destroy(2) , H1=Qobj(np.array([[0,complex(0,-1)*np.conj(H_a01)],[0,0]]) and py_coeff1=u_t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1183#issuecomment-588771589:154,depend,dependent,154,https://qutip.org,https://github.com/qutip/qutip/issues/1183#issuecomment-588771589,2,['depend'],['dependent']
Integrability,"> However if `default_dtype` can be seen as _running in that mode_, it certainly could cause confusion. It's not clear how it is understood in some places. In `eigenstates`, if we run in `CSR` mode, then does that mean that we use the sparse eigen solver? It's a lot worst than the dense one. Or should only the returned ket be in CSR format?; > ; > In my tries, the dense steadystate was faster that the sparse one. Could it be an issue that some matrices where too big to fit in RAM forcing to use swap space? We could have a warning when matrices over a certain size are allocated. I guess this was mostly because I wasn't explicitly calling steadystate with sparse=False so it was getting converted back to CSR anyway, and slowing things down. Largely I see similar performance between CSR and dense (using sparse=False), unless I use very small systems (16x16 Liouvillians), though this seemed a bit scipy/method dependent. I guess as you said this also raises the question about whether stuff like eigenstates and steadystate() should default to using methods based on the data layer of the object, instead of kwargs? My feeling is not, since eigenstates+sparse can be bad and steadystate+largesystem+dense could be bad, so its worth having some default conversion cost in place. But I still like the idea of what gets returned to the user following default_dtype. but maybe we can see if this turns out to be an issue that people have in using data layers, could just be me!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192:918,depend,dependent,918,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1953388192,1,['depend'],['dependent']
Integrability,"> I added ipython to the testing workflow. Let me know if it should have been included somewhere else. Hmm. I don't like adding random dependencies into the workflow config. On the other hand, this is specific to IPython. Maybe we can add an ""ipython"" section in `setup.cfg` and add that to `full`?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1918#issuecomment-1146092238:135,depend,dependencies,135,https://qutip.org,https://github.com/qutip/qutip/pull/1918#issuecomment-1146092238,1,['depend'],['dependencies']
Integrability,"> I discussed having a class that would automatically fit a correlation function with Niell, and he has experiment with that but it's bit tricky to make it work well in a generic way. E.g. For the DrudeLorentz bath there is a divergence in the exponent series at t = 0 which makes it hard to fit numerically. Yeah, for the fitting stuff, we kept it for the example notebooks, since as simon said it's very problem dependent. hence having a very generic bath interface helps for inputting these low-level cases. . For high-level interface stuff, we can also add the underdamped (brownian-motion) bath example (matsubara + pade as well). We can also add the equivalent for the fermionic case. Simon's setup makes it easy to do.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1601#issuecomment-965101829:414,depend,dependent,414,https://qutip.org,https://github.com/qutip/qutip/pull/1601#issuecomment-965101829,3,"['depend', 'interface']","['dependent', 'interface']"
Integrability,"> I don't want to straight up say ""QuTiP is correct"", because as I mentioned, the field of numerical computing is incredibly tricky, but it _probably_ is more accurate in this situation. I just tried doing what I suggested in my previous post (increase the number of time-steps), and found QuTiP was stable, but your RK45 implementation started differing. This is strongly suggestive that your RK45 isn't fully converging for this problem. I don't think you are right. As I mentioned I also did the same but the results are stable. I edited [my question on quantum computing stack exchange](https://quantumcomputing.stackexchange.com/questions/22187/qutip-vs-rk45-which-one-gives-the-correct-results-for-time-dependent-systems) if you are interested. There is no convergence issue. And I don't think it is ""impossible"" to figure out what is causing this difference or to understand which one is closer to the actual answer. If there exists a system with time-dependent Hamiltonian under a time-dependent dissipation which is analytically solvable, we can compare these two methods. I am not aware of such a problem.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986683310:709,depend,dependent-systems,709,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986683310,3,['depend'],"['dependent', 'dependent-systems']"
Integrability,"> I don’t know. It worked for me when I tried to install QuTiP from source —with-openmp. The error was a different and I am on a different MacOS (I also tried a conda install llvm, but what worked was gcc for me, with openmp). I understand that you trying to install QuTiP? If so, how? conda / source / pip? Consider doing it via conda if you are interested in the stable version release (4.3), by activating the conda-forge channel as detailed in the documentation. If QuTiP is installed and you receive this error while doing a specific task, can you copy paste the message of qutip.about() here?; > […](#); > On Sat, 9 Mar 2019 at 14:37, Xiao ***@***.***> wrote: Try conda install gcc. Does that mean I should use gcc from the Anaconda directory? — You are receiving this because you commented. Reply to this email directly, view it on GitHub <[#965 (comment)](https://github.com/qutip/qutip/issues/965#issuecomment-471148065)>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AN5ffFcanH6qaCezLIKtW4SflaVsZ63Aks5vU0iCgaJpZM4bmfhd> . I am installing QuTip from compiling the source code, because I want to use MKL. I didn't use the --with-openmp option as MKL is already openmp threaded. . After ""conda install gcc"" the compilation is passed and QuTip can be so far used without problems. Thanks for your help.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/965#issuecomment-471155651:568,message,message,568,https://qutip.org,https://github.com/qutip/qutip/issues/965#issuecomment-471155651,1,['message'],['message']
Integrability,"> I left some suggestions here for the higher-level interface.; > ; > My misgiving about my own suggestions is that they diverges from the interface style used already in the `Bloch` class for plotting colours and styles, but adding all the arrays for colours and styling for the new lines and arcs, or stuffing more things into the list of points seemed worse. :). Thanks, Simon @hodgestar for your review. Will make the respective changes soon.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1690#issuecomment-952921700:52,interface,interface,52,https://qutip.org,https://github.com/qutip/qutip/pull/1690#issuecomment-952921700,2,['interface'],['interface']
Integrability,"> I ran some comparisons to the old version, and everything looks good. There seems to be some speedup both to the RHS construction and the ODE solver for most cases. Thanks! I've now streamlined things a little more, so they might be slightly faster still. > Since each individual ADO is naturally a Qobj, having HierarchyADOsState store them an array or list of Qobjs makes sense I guess. I've put this down in the v5 TODO list (just to draw a line under this PR). > 2. How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). I ended up always calling `e_ops` functions with `f(t, ado_state)`. This is a bit different to other solvers, but makes what the HEOMSolver considers the evolution state consistent. The density matrix part of the state is available as `ado_state.rho` so it's not a big hardship to retrieve just the system state. >> 3. Recheck the time dependent case.; > ; > From what I can see it looks good! Seems like basically you treat the entire RHS as an effective qobjevo? I ran through various > examples, and couldn't find any issues!. I simplified things a bit further. In the time-dependent case the RHS matrix is calculated without adding the Liouvillian to the diagonal and then the kron of the Liouvillian is added to the RHS at the end, resulting in a simpler QobjEvo. >> 4. The HEOM can't really take new QObjEvo arguments each time run is called because calculating the RHS again is quite expensive. Maybe something can be done?. Arguments are supported now because the full RHS is a QobjEvo!. >> 5. Compare performance to the HEOM in 4.7.; > ; > On the fermionic examples, with very-large system Hilbert space, there was a little slowdown in the RHS construction. Maybe the slowdown has gone away now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1145125739:1003,depend,dependent,1003,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1145125739,2,['depend'],['dependent']
Integrability,"> I suspect the method of using QobjEvo that was suggested above only use two time steps (initial and final time) in evolving the Hamiltonian as the seed and interpolate the Hamiltonian at the time between the initial and final time using some interpolation function. This is not the case. The answer to your question is to use `QobjEvo` as suggested. For example, here is a simple example using a fast-oscillating array function in a `QobjEvo` and a much shorter `tlist` in `mesolve`. You may need to set the solver options `nsteps`, `atol` and `rtol` to suitable values, as I have done here. ```python; import qutip; import numpy as np. fast_ts = np.linspace(0, 1, 1001); fast_xs = 2.9e3*np.pi * np.cos(2*np.pi * 2.91e2 * fast_ts); # This is the behaviour you were suggesting is happening.; bad_interpolation_xs = np.array([fast_xs[0], fast_xs[-1]]). H = qutip.QobjEvo([[qutip.sigmax(), fast_xs]], tlist=fast_ts); H_bad = [[qutip.sigmax(), bad_interpolation_xs]]; rho = qutip.basis(2, 0).proj(); times = np.array([0., 1]); e_ops = [qutip.sigmay()]; options = qutip.Options(nsteps=10_000_000, atol=1e-14, rtol=1e-12). two_times = qutip.mesolve(H, rho, times, e_ops=e_ops, options=options); many_times = qutip.mesolve(H, rho, fast_ts, e_ops=e_ops, options=options); bad_times = qutip.mesolve(H_bad, rho, times, e_ops=e_ops, options=options). assert len(two_times.expect[0]) == 2; assert len(many_times.expect[0]) == 1001. print(two_times.expect[0][-1]) # -0.59736575; print(many_times.expect[0][-1]) # -0.59736575; print(bad_times.expect[0][-1]) # -4.5466086e-08; ```. You can see that I was able to do a successful integration with only 2 times in `mesolve`, but many in a fast-oscillating Hamiltonian. Clearly the `bad_times` version (which only has the start and end points so misses all the fast oscillation behaviour) is completely different to the other two versions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525:1616,integrat,integration,1616,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525,1,['integrat'],['integration']
Integrability,"> I think the `.integrate(t, step=....)` interface is currently way too complex, as evidenced by the difficulty of implementing it and the hard to resolve issues.; > ; > SciPy has a much simpler ODE interface -- see https://github.com/scipy/scipy/blob/v1.7.1/scipy/integrate/_ivp/base.py#L25-L214. Essentially a single `.step()` function.; > ; > Is there a reason we could not implement something similar here, and just have one `.step()` method and then implement `.integrate()` on top of that?. The `.step()` is essentially `.integrate(self.t)`, sot there would be no need for both.; If you mean having `step()` always advance one internal integrator step, we don't always have that possibility, `dop853` cannot advance only one step. And it would require to safe `self.back` each time even when not needed.; If you want a method to just advance to the time `t`, what ever it is as `scipy` seems to do, it will crush `mcsolve` speed. `mcsolve` has a root finding step that require a some back and forth and ode schemes all have their quirks when doing this. For actual use `integrate`, `step` and `backstep` can be 3 methods. I had this in the evolver PR but was told to merge them... The complexity could be split: have `integrate` for normal evolution (`sesovle`, `mesolve`), and `step` or `mcstep` for `mcsolve`.; This would also make it easier to create new Integrator for special use, it is easier to choose not to support `mcsolve` if the logic is split.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667:16,integrat,integrate,16,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667,10,"['Integrat', 'integrat', 'interface']","['Integrator', 'integrate', 'integrator', 'interface']"
Integrability,"> If I understand correctly it refers to line 300 in test_metrics, which has a new hellinger metric test by @wrzadkow . Could it be that using ""for _ in range(10):"" is a problem?. The following observations:; - `for _ in range(10)` is already in [line 128](https://github.com/qutip/qutip/blob/master/qutip/tests/test_metrics.py#L128) in `test_metrics.py` ; - [line 300](https://github.com/qutip/qutip/blob/master/qutip/tests/test_metrics.py#L300) is the end of docstring of `test_hellinger_monotonicity()` ; - the presence of `invalid escape sequence \o` in the error message; - this thread https://stackoverflow.com/questions/52335970/how-to-fix-string-deprecationwarning-invalid-escape-sequence-in-python. make me think that the issue may be caused by `\otimes` that I used in the docstring explanations. Don't have a Mac to reproduce and check whether removing this will help, though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-496497028:568,message,message,568,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-496497028,1,['message'],['message']
Integrability,"> If this is supposed to be displayed in the Sphinx-rendered HTML instead of markdown. I think you need double backticks for the monospace font? E.g. `` ``Qobj`` ``. Yes, I do. Fixed.; ; > Does this also serve as a `guide on migrating from v4 to v5` or do we plan to have it separately somewhere else? It would be nice if we could summarize some common Error messages that one may see along with the solution/possible reasons. The error messages are what people usually type into Google search. This does serve as an initial guideline of what to expect, but I think we do also need a proper porting document like the one you mention.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2076#issuecomment-1419933633:359,message,messages,359,https://qutip.org,https://github.com/qutip/qutip/pull/2076#issuecomment-1419933633,2,['message'],['messages']
Integrability,"> Just another small issue, I found that if I use UnderDampedEnvironment.spectral_density() with brmesolve(), it fails in numpy 2.1.1 unless I wrap the SD function in another function. Strangely works without needing to wrap it in numpy 1.26.4. Seems to some difference in the way zero-dimensional arrays are treated, but not super sure. I noticed that as well,.I didn't fix it because we are not integrating with the solvers yet, but could check if the argument of correlation function is an array, and if it's not do the .item() bit, just so that brmesolve works smoothly",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2534#issuecomment-2372966464:143,wrap,wrap,143,https://qutip.org,https://github.com/qutip/qutip/pull/2534#issuecomment-2372966464,3,"['integrat', 'wrap']","['integrating', 'wrap']"
Integrability,"> Let's remove the `known_solvers` and the solver `name` from the SolverOptions and instead have the base solver pass the allowed options with defaults in to the SolverOptions constructor directly. If the allowed options list is `None`, then we can allow all options (for the convenience of users who really want to make their own SolverOptions instances). Users who makes their own SolverOptions are the base case. Using the `??solve` function with an `Options` instance and with documentation for the options items in the `Options` class, is the way in v4 and will probably stay that way for a while. ; Having a options not knowing about the solver let it accept bad options and typos. Also it hides the options documentation: solver's options could be in the `??solve` function, but not integrator options. The integrator was merged into the solver in v4 and is not made to be used directly by the average user. So the user should not need to know they exist to use qutip, nor refer to them directly to see which options are supported. > For convenience, when passing options as a dictionary, one should be able to use `{""ode.method"": ""vern9""}` or `{""ode"": {""method"": ""vern9""}`. Not sure I understand why this would be convenient, flat seems a easier to use and less confusing. Ideally the user should not need to know that there are 2 levels of options.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1173856276:790,integrat,integrator,790,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1173856276,2,['integrat'],['integrator']
Integrability,"> Looks like I did mess up with the floquet.py versus flimesolve.py. I think; > I forgot at some point that I was to include all my new stuff in just the; > flimesolve.py, and then forgot about that script altogether. I apologize; > for this, and I'll fix it.; >; > I'll also go back through and fix style issues. As with above, I think I; > forgot to keep the proper styling at a certain point.; >; > I tried to keep my changes to correlation.py to a minimum, and contained; > to simply adding in the new solver in the make_solver function, as well as; > adding in some inputs as options to that solver, but I'll go through and; > review to see what's wrong.; >; > Thanks for your feedback, and I'll try to get this all fixed up as soon as; > I can.; >; >; > On Mon, Jun 26, 2023, 4:49 PM Eric Giguère ***@***.***>; > wrote:; >; >> ***@***.**** requested changes on this pull request.; >>; >> Something is strange in floquet.py, did you include change not meant to; >> be here?; >> Both floquet.py and flimesolve.py have the original fmesolve and the new; >> flimesolve...; >>; >> Tests should pass.; >> Right now, scipy 1.11 breaks cvxpy which we use so this breaks a few; >> tests, but the changes you made to correlation.py also break the tests.; >> We will want tests for the new solver.; >>; >> Could you also review the style (pep8).; >>; >> - There are some very long line, we use the official 80 characters; >> width.; >> - space are not uniform, sometime they are doubled, other time; >> missing.; >> - There are rules for empty lines, there should not be 3 empty lines; >> in a function.; >>; >> —; >> Reply to this email directly, view it on GitHub; >> <https://github.com/qutip/qutip/pull/2140#pullrequestreview-1499406717>,; >> or unsubscribe; >> <https://github.com/notifications/unsubscribe-auth/AV5WL5EA3UU23BHDUONIEN3XNHYVNANCNFSM6AAAAAAWLGP4AU>; >> .; >> You are receiving this because you authored the thread.Message ID:; >> ***@***.***>; >>; >. -- ; Best Regards,; Fenton Clawson",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805:3257,Message,Message,3257,https://qutip.org,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805,1,['Message'],['Message']
Integrability,"> Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple. For those you worked on, do they include QOC via RL ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660474276:88,protocol,protocols,88,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660474276,1,['protocol'],['protocols']
Integrability,"> Matplolib is surely used for the visualization but most runtime modules can do without it. There is syntax for optional dependencies in ```setup.py```, you should consider using it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/892#issuecomment-403715814:122,depend,dependencies,122,https://qutip.org,https://github.com/qutip/qutip/issues/892#issuecomment-403715814,1,['depend'],['dependencies']
Integrability,"> My issue is that in these cases, we still set the `isherm` flag while not having any ideas what the user is trying to do:; > ; > We don't set the flag when the input are super operators? We try to check if the Liouvillian preserve hermiticity (not easy for time dependant operator)? Junk in, junk out?. A problem can also happen if the input is not a superoperator:. ```; H = qt.sigmaz() + 1j * qt.sigmax(); initial = qt.ket2dm(qt.basis(2, 0)); qt.mesolve(H, initial, [0, 1], c_ops=[qt.sigmam()]).final_state; > Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=True; > Qobj data =; > [[ 0.51118445+0.j -0.11358048+0.24945183j]; > [ 0.11358048+0.24945183j 0.32517255+0.j ]]; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2408#issuecomment-2078385711:264,depend,dependant,264,https://qutip.org,https://github.com/qutip/qutip/pull/2408#issuecomment-2078385711,1,['depend'],['dependant']
Integrability,"> Not sure how to make a test for this. The file name is random and it's not always reliable when the `__del__` is called which is where the file is erased. You could create a coefficient and check that the last entry of `coeff_files.file_list` looks correct and exists. The wouldn't check the deletion but would check that the filename is correct. You can do `del qutip.qobjevo.coeff_files` to trigger the clean-up of the object, but that is a bit GC dependent and implementing it properly would require calling `gc.collect()`. Not sure if that is worth the hassle.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2251#issuecomment-1781948773:452,depend,dependent,452,https://qutip.org,https://github.com/qutip/qutip/pull/2251#issuecomment-1781948773,1,['depend'],['dependent']
Integrability,"> Oh, a thought: perhaps I should modify the commit messages of PRs in the old qutip-doc to make them link correctly. For example, instigate a rewrite rule of #xxx goes to qutip/qutip-doc#xxx?. That sounds great, but I don't think it's required if it turns into a rabbit hole.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513#issuecomment-829623558:52,message,messages,52,https://qutip.org,https://github.com/qutip/qutip/pull/1513#issuecomment-829623558,1,['message'],['messages']
Integrability,"> Overall, it look good as a way to make HEOM solvers work on v5. Woot. > But the use of data layer seems not ideal, why is the rhs fixed to `csr`. With it's size, it's probably not ideal as a Dense, but I don't think we should raise an error for other type... It doesn't actually restrict the RHS to CSR -- it only *constructs* the RHS as a CSR initially. The base solver will convert the RHS to the correct format for the integrator if needed. It might be possible one day to avoid constructing the RHS as a CSR but it might be tricky to make it not horribly slow, so I'd like to leave this as potential enhancement rather than work on it right now. > There is no `heomsolve` to go with `HEOMSolver`. I've added `heomsolve`. It has more parameters than `sesolve` or `mesolve`, which is not great, but I'm not sure how to avoid it. The bath and the max_depth are not really optional for the HEOM, and there aren't reasonably default values. > With other solvers, they accept `H` as a `Qobj` or `QobjEvo` only, list format is accepted by the __solve function. I changed HEOMSolver to only support `Qobj` or `QobjEvo`. I allowed `HSolverDL` to continue to support other objects since `HSolverDL` exists only for backwards compatibility. Perhaps we should remove it at some point, but the amount of code in it is also tiny. > `bofin_*.py` does not have a `__all__`, even if they are not supposed to be imported directly, it would be better if they had. I've added `__all__`.; ; > The test coverage does not include time-dependent Hamiltonian. Are those too slow to include in automated tests?. The tests don't include a truly time-dependent case because it's hard to solve one analytically. Previously I tested the time-dependent logic by supplying `[H]` as the system (i.e. fooling the code into using the time-dependent path) but that broke when I switched to using `QobjEvo.isconstant`. I fixed it by using `[H, lambda t: 1.0]` instead, which would be very hard to determine as constant. Thank for pi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1165701845:424,integrat,integrator,424,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1165701845,1,['integrat'],['integrator']
Integrability,"> QuTiP doesn't have one built in at the moment, but [`toqito`](https://vprusso.github.io/toqito/) can do it as numpy arrays, which you can just wrap in `Qobj`. There's no scope for `density` there, though (and it would be very difficult to do so, I think!). Thanks :)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1642#issuecomment-905717962:145,wrap,wrap,145,https://qutip.org,https://github.com/qutip/qutip/issues/1642#issuecomment-905717962,1,['wrap'],['wrap']
Integrability,"> So as a user on Windows, having installed QuTiP through Anaconda, I can't do any time propagation? . So what is certain is that if you use string type time-dependence then this needs a compiler, this is implied by the string type. Also, at present, giving an ndarray (and I think qutip CubicSpline) also means the RHS will be compiled, because it is much faster. Clearly we could make this optional, but it is not at present. @Ericgig is working on new versions of the solvers at the moment, I think he could easily include this in the design.; You should not need a compiler for using func type time-dependence, so you could make a function that encapsulates this array and spline behaviour. If I have not covered what it is that you to achieve, then please be explicit here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-466739255:158,depend,dependence,158,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-466739255,2,['depend'],['dependence']
Integrability,"> String format coefficients (`'sin(w * t)' ` in H) which use cython for compilation often fails on windows. Using functions instead work better.; > ; > ```; > def f(t,args):; > return sin(args[""w""]*t); > H = [H0, [H1, f]]; > ```; > ; > Here there is also an error in the error message, we will fix that bug soon. Thanks this worked. > import numpy as np; > from qutip import *; > import matplotlib.pyplot as plt; > ; > delta = 0.2 * 2*np.pi; eps0 = 1.0 * 2*np.pi; A = 2.5 * 2*np.pi; omega = 1.0 * 2*np.pi; > H0 = - delta/2.0 * sigmax() - eps0/2.0 * sigmaz(); > H1 = A/2.0 * sigmaz(); > args = {'w': omega}; > H = [H0, [H1, 'sin(w * t)']]; > T = 2*np.pi / omega; > f_modes_0, f_energies = floquet_modes(H, T, args); > f_energies. This didnt' work for me. I'm also running it on a Mac",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1207#issuecomment-603977040:278,message,message,278,https://qutip.org,https://github.com/qutip/qutip/issues/1207#issuecomment-603977040,1,['message'],['message']
Integrability,"> The new commits look good! Was wondering whether we should add support for array-like alpha values so that something like `add_vectors([[0,0,1],[1,0,0]], alpha=[0.75,0.60])` would work. Right now it's already possible to do using multiple `add_vector` methods, each with a different alpha value but the other option might be a bit cleaner for the user. I think a single alpha is fine if we take the view that each call to `add_vectors` is one set of related vectors that share some common properties (although they already rotate colours, which is sometimes helpful and sometimes a bit weird :). We need to rethink the `Bloch` interface for version 5 though, so keep ideas like this in mind for then. P.S. Thank you for checking the new commits.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1837#issuecomment-1094727740:629,interface,interface,629,https://qutip.org,https://github.com/qutip/qutip/pull/1837#issuecomment-1094727740,1,['interface'],['interface']
Integrability,"> The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I do think it would be good to keep the `trace` property on the trajectories, but for the purpose of calculating the weighted averages, it could perhaps be treated like the other types of weights that we have.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958:11,depend,dependent,11,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958,1,['depend'],['dependent']
Integrability,"> Then out about removing dict expect? Dictionary support was not tested and supported only for some solver for a long time. It ; > would be strange to have it become the default. Well, this is v5 -- we are trying to make things nicer. The issue with lists of e_ops is that often the e_ops have no sensible ordering. E.g. if the e_ops are, say, the number operator and projectors on to two different bases of interest then `[qutip.num(N), proj1, proj2]` are later accessed as `.expect[0]`, `.expect[1]` and `.expect[2]` which are then unreadable and fairly arbitrary and unmemorable numbers. Having `.expect[""num""]`, `.expect[""proj1""]` and `.expect[""proj2""]` is much more readable and will result in fewer mistakes. I *really* like the dict interface because it gives this readability to results. I'm happy to accept that others may prefer lists, but providing multiple interfaces creates a problem for any code working with results. So it is a bit of tricky question to resolve. > For MC result, it has little impact, dict are a little more annoying to work with compared to list, but it need the expect as ndarray; not list or dict anyway. The MC result classes already have to work around these things in awkward ways, and probably need to be a lot more careful -- e.g. e_ops functions can return strange things like Qobjs or perhaps even stranger things like strings or dicts which can't be averaged over. > There are a some differences for the user. Code using `np.array(result.expect)` or `for expect in result.expect:` will break. Agreed, although unless `result.expect` contains a uniform set of things, this are probably not sensible things to be doing. I have some other ideas but I think they make more of a mess -- e.g. keep `.expect` a list but provide `.expect_d` which is a dict. If one needs to write v4 compatible code one can always pass a list of e_ops and then work with `.expect` a bit carefully (i.e. as a dict). Thoughts?. I have added tests now, so it's just the `.expect` issu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1141326041:741,interface,interface,741,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1141326041,2,['interface'],"['interface', 'interfaces']"
Integrability,"> There is no agreement on how this should be handled yet. It's been removed from `dev.major` with the plan to restore it before the release, but the exact interface is not fixed. It certainly will not be some special keyword in args. It could be a special value, or a special parameter / method for the solver class. Actually having a method in the solver class seems better, I suppose this is why we are going towards Solvers from the simple `mesolve` function. I am going to try and rewrite my example using the Solver class. We can probably get away with having this functionality only in the new Solver class --- benefit of a major release I guess.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1142213362:156,interface,interface,156,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1142213362,1,['interface'],['interface']
Integrability,"> This also means that adding `qutip-qip` as an optional package right now does not make much sense. Probably we can drop this.; > ; > To test it on GitHub action we need to install `qutip-qip@master` for now and test the importation. @hodgestar Is that ok? Otherwise, I can try to get out a new release of `qutip-qip` in a day or so. Just to update the change log and click the button. Completely up to you, of course! If you choose to drop the optional dependency for now, I can also just put those changes on another PR to be merged when the time is right.; I'll stand by for your decision regarding the CI tests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1920#issuecomment-1147629930:455,depend,dependency,455,https://qutip.org,https://github.com/qutip/qutip/pull/1920#issuecomment-1147629930,1,['depend'],['dependency']
Integrability,"> This error message suggests to me that one of the things you're trying to add might be a numpy array:; > ; > ```; > TypeError: operand 'Qobj' does not support ufuncs (__array_ufunc__=None); > ```. Yes, you are right, sorry. I am closing the issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2326#issuecomment-1961079240:13,message,message,13,https://qutip.org,https://github.com/qutip/qutip/issues/2326#issuecomment-1961079240,1,['message'],['message']
Integrability,"> This randomly failing test appears again. It is really getting annoying. I copied the error message from Travis bellow:; > ; > ```; > =================================== FAILURES ===================================; > ___________________________ test_MCSimpleConstStates ___________________________; > @pytest.mark.slow; > def test_MCSimpleConstStates():; > ""Monte-carlo: Constant H with constant collapse (states)""; > N = 10 # number of basis states to consider; > a = destroy(N); > H = a.dag() * a; > psi0 = basis(N, 9) # initial state; > kappa = 0.2 # coupling to oscillator; > c_op_list = [np.sqrt(kappa) * a]; > tlist = np.linspace(0, 10, 100); > mcdata = mcsolve(H, psi0, tlist, c_op_list, [], ntraj=ntraj,; > options=Options(average_states=True)); > assert_(len(mcdata.states) == len(tlist)); > assert_(isinstance(mcdata.states[0], Qobj)); > expt = expect(a.dag() * a, mcdata.states); > actual_answer = 9.0 * np.exp(-kappa * tlist); > avg_diff = np.mean(abs(actual_answer - expt) / actual_answer); > > assert_equal(avg_diff < mc_error, True); > E AssertionError: ; > E Items are not equal:; > E ACTUAL: False; > E DESIRED: True; > ../../../../miniconda/envs/test-environment/lib/python3.7/site-packages/qutip-4.5.0.dev0+4512014-py3.7-macosx-10.9-x86_64.egg/qutip/tests/test_mcsolve.py:240: AssertionError; > ----------------------------- Captured stdout call -----------------------------; > 10.0%. Run time: 2.25s. Est. time left: 00:00:00:20; > 20.0%. Run time: 4.93s. Est. time left: 00:00:00:19; > 30.0%. Run time: 6.67s. Est. time left: 00:00:00:15; > 40.0%. Run time: 8.10s. Est. time left: 00:00:00:12; > 50.0%. Run time: 10.13s. Est. time left: 00:00:00:10; > 60.0%. Run time: 12.40s. Est. time left: 00:00:00:08; > 70.0%. Run time: 14.97s. Est. time left: 00:00:00:06; > 80.0%. Run time: 16.57s. Est. time left: 00:00:00:04; > 90.0%. Run time: 18.81s. Est. time left: 00:00:00:02; > 100.0%. Run time: 20.29s. Est. time left: 00:00:00:00; > Total run time: 20.34s; > ---------- covera",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-607478896:94,message,message,94,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-607478896,1,['message'],['message']
Integrability,"> Users who makes their own SolverOptions are the base case. Using the `??solve` function with an `Options` instance and with documentation for the options items in the `Options` class, is the way in v4 and will probably stay that way for a while. Having a options not knowing about the solver let it accept bad options and typos. Also it hides the options documentation: solver's options could be in the `??solve` function, but not integrator options. The integrator was merged into the solver in v4 and is not made to be used directly by the average user. So the user should not need to know they exist to use qutip, nor refer to them directly to see which options are supported. I'm not sure I am quite following, but my thought was that options would be checked by the solver class when they are passed in. The mechanism the solver class would use for doing the check, would be to pass the description of the allowed options to the SolverOptions class, along with the options themselves. > Not sure I understand why this would be convenient, flat seems a easier to use and less confusing. Ideally the user should not need to know that there are 2 levels of options. The reason for nesting the ode options a little, is to make it clear which options might change if the ODE method changes. If one hides the structure completely, there is nothing to guide the user as to which options are related to what. E.g. If ODE method ""A"" took option ""opt1"" and method ""B"" took ""opt2"" then it's much clearer what is happening if one has to pass `""ode"": {""method"": ""A"", ""opt1"": 1}` and `""ode"": {""method"": ""B""}` than `""method"": ""A"", ""opt1"": 1"" and `""method"": ""B"", ""opt2"": 2`. In the flat case, one might accidentally have `""method"": ""B"": ""opt1"": 1` and ""opt1"" would be ignored. I am not too hung up on the exact approach for this bit though -- I just want it to be clear to the user what is going wrong, and for it to be a little be hard to options for different ODE methods clash with each other or other solve",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174214647:433,integrat,integrator,433,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174214647,2,['integrat'],['integrator']
Integrability,"> What if we rethink the approach from the beginning:; > ; > ```; > QobjEvo([op, func], args={""state"": Solver.StateFeedback(default=psi0)}); > QobjEvo([op, func], args={""e1"": SESolver.ExpectFeedback(e_op)}); > QobjEvo([op, func], args={""state"": MESolver.StateFeedback(raw_data=True)}); > QobjEvo([op, func], args={""collapse"": MCSolver.CollapseFeedback()}); > QobjEvo([op, func], args={""W"": SMESolver.WeinerFeedback()}); > ```; > ; > And we remove the `add_feedback` method. This looks great. I really like that it makes it clearer where the feedback comes from and that it is solver dependent. Removing the need to specify the feedback in two places when constructing a `QobjEvo` is really nice too. Let's do it in a separate PR though (unless you strongly want to update this one). I have a slight concern that it might be a bit complicated for users to find the feedback classes (e.g. they have to know to import the right solver) but I'm sure we can make that nice the PR itself.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1839582984:583,depend,dependent,583,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1839582984,1,['depend'],['dependent']
Integrability,"> Would it be okay to use `_path_from_env(""XDG_CONFIG_HOME"", ` / "".config"")`. That would probably be fine. `XDG_CONFIG_HOME` is not normally set as an environment variable, but you're suggesting the same code that the xdg package itself uses, so the result will be the same, using ~/.config. . xdg seems to be pure Python, indifferent to operating system. So it would just use whatever `Path.home()` returns on Windows. Some frameworks take it a step further and use an Organization/Application subdir underneath ~/.config. That's what Qt does with [`QStandardPaths::ConfigLocation`](https://doc.qt.io/qt-6/qstandardpaths.html#StandardLocation-enum). So Qt would use these XDG paths where supported (Linux systems, maybe MacOS) and assign equivalent paths in the case of Windows. No point overengineering it though (unless you want to switch to QtPy6 as a framework!), so using `_path_from_env` will get the job done if you're trying to avoid the extra xdg dependency.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1876#issuecomment-1219870649:957,depend,dependency,957,https://qutip.org,https://github.com/qutip/qutip/issues/1876#issuecomment-1219870649,1,['depend'],['dependency']
Integrability,"> You see, the gate Gate(RY, targets=[0, 1], controls=None) is clearly wrong because RY acts only on one qubits. Yep ! That's what I thought as well..for all the single qubit gate outputs with two targets. I knew I was getting an error but was not sure why it was not the same error as both of you. It was because I was using the released version (like you predicted). . I was trying to put off installing from source for as long as I could because I would have to install conda and other dependencies manually. Now, I did get `ValuError`. Thanks !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555:489,depend,dependencies,489,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810592555,1,['depend'],['dependencies']
Integrability,"> `result.measurement` is not the same as `result.expect`, the measurement is an expectation value, but not of the `e_ops` but `m_ops` which are usually automatically generated from the `c_ops` and noise is added to the computed expectation value of the state of the trajectory. The noise is usually larger than the signal and makes it hard to see, but it should converge to mesolve's solution eventually.; > ; > `smesolve`'s `expect` are just the expectation value of the state of each trajectories (averaged or not depending on options) and should average to the master equation solutions with enough trajectories. Plot in cell 8 show the match is quite good. Even with enough trajectories, the numerical error from `smesolve` will be visible.; > ; > The equation solved are those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5. Thank you very much for your reply, but I still don't quite understand `smesolve`'s `expect` are just the expectation value of the state of each trajectories”. In my understanding, solving for 'smesolve' gives the corresponding 'ρ(t)' and then 'expect'. But 'smesolve' provides **[ntraj [int] number of trajectors]**, which means that there are _ntraj_ 'ρ(t)' (`expect`). If I want to show all _ntraj_ ‘s 'expect', how can I do it?. Can I understand `result.measurement` as measuring(POVM) the `smesolve.result` (where ρ(t) was given by solving the stochastic master equation) .$\hat{\rho}_{f}=\frac{\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}}{\mathrm{Tr}[\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}]}$。If this is the case, I don't understand the point of doing the measurement again here, because the stochastic master equation itself has a continuous measurement. What I want to do is simply solve the stochastic master equation to get enough trajectories **ρ(t)** and solve the relevant expected value **Tr[ρ(t)A]**. On the one hand, I want to see the expectations of a",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206:517,depend,depending,517,https://qutip.org,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206,2,"['depend', 'integrat']","['depending', 'integration']"
Integrability,"> actually my real Hamiltonian is a time-dependent non-analytic function which has to be represented by an array. @IamSeti May I ask if your Hamiltonian can be written in the following form `sum a_i(t)*H_i` with a few different constant `H_i`, i.e. the time-dependence can be represented by a complex coefficient; Or is your Hamiltonian completely non-analytic and time-dependent?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-808693608:41,depend,dependent,41,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-808693608,3,['depend'],"['dependence', 'dependent']"
Integrability,"> thanks for the comment, I didn't know about `qutip.propagator`; > ; > > Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple; > ; > cool, can i learn more about this from you?. Sorry, I don't have much experience in it myself - you'll be reading about the methods in papers/lecture note by people smarter than me. We have some tutorial notebooks about optimal control using the QuTiP optimal control package here: http://qutip.org/tutorials.html#optimal-control, which you may be able to adapt to your use case. I believe there are components in there that you can subclass so that the optimiser is RL-based rather than using standard BFGS or something else.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258:160,protocol,protocols,160,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660475258,1,['protocol'],['protocols']
Integrability,> thanks. can you also please run:; > ; > ```; > import qutip; > qutip.about(); > ```; > ; > and copy here the message?; Here is the message; ![e38](https://user-images.githubusercontent.com/71458593/97535388-96024800-19e1-11eb-991e-2c2a578da368.PNG),MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1374#issuecomment-718402166:111,message,message,111,https://qutip.org,https://github.com/qutip/qutip/issues/1374#issuecomment-718402166,2,['message'],['message']
Integrability,"> you can see that when it runs conda uninstall cython, it downgrades numpy to 1.14.2. This is really strange. > This would not be a problem in a conda-forge release build, because the numpy API dependency is pinned in the feedstock, but it is a potential problem on pip source builds. I was setting up a GitHub Action test for `qutip_qip` https://github.com/qutip/qutip-qip/pull/6. `pip installation` works well there, but it could be that I don't use any run-time compiling.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1448#issuecomment-782174452:195,depend,dependency,195,https://qutip.org,https://github.com/qutip/qutip/pull/1448#issuecomment-782174452,1,['depend'],['dependency']
Integrability,"@AGaliciaMartinez @gaurav-iiser Since you are looking at the Bloch sphere code too, I'd appreciate some more eyes / trying out of these changes if you have time. We don't have great tests for these plotting functions and the behaviour is rather environment dependent (Python console vs IPython console vs Jupyter notebook vs Spyder).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1619#issuecomment-950309855:257,depend,dependent,257,https://qutip.org,https://github.com/qutip/qutip/pull/1619#issuecomment-950309855,1,['depend'],['dependent']
Integrability,"@AGaliciaMartinez,; I already made an integrator for jax in qutip/qutip-jax#14 and made and an example for auto-differentiation in `sesolve` using it.; There is still some polishing to do, but half of the deliverable are there. We should ask the student to use it to makes new tools with it and improve the interface.; Using it for quantum control is impractical since `jax.grad` only support real scalar output and our inputs are also complex.; We need to find an user friendly a way to tell which part of the result are subject to the derivation and how to expand to jacobians, etc.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2064#issuecomment-1408690839:38,integrat,integrator,38,https://qutip.org,https://github.com/qutip/qutip/pull/2064#issuecomment-1408690839,2,"['integrat', 'interface']","['integrator', 'interface']"
Integrability,"@Akhikar I know the error message is the same, but could you open a new issue for this and follow the issue template? This bug was addressed awhile ago, and if you open a new issue we'll know what versions of all the installed software you're using. Usually this issue arises when something went wrong while installing QuTiP, or because you have a script whose name conflicts with an existing package name.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1396#issuecomment-1220411689:26,message,message,26,https://qutip.org,https://github.com/qutip/qutip/issues/1396#issuecomment-1220411689,1,['message'],['message']
Integrability,"@ArchieB151 The output is very strange. No new version of QuTiP was released in the last month. The ODE integration error you received would only appear if the problem being solved changed somehow. The initial state in your plot doesn't match the psi0 defined in the code (i.e. both expectation values are zero). Could you try do everything from scratch again? Start with a completely fresh download of the notebook, restart the Jupyter kernel entirely run everything from the top?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1987#issuecomment-1229018060:104,integrat,integration,104,https://qutip.org,https://github.com/qutip/qutip/issues/1987#issuecomment-1229018060,1,['integrat'],['integration']
Integrability,"@BoxiLi . Yes, how to include gates in qutip is not clear to me. Many of them seems specialized so I don't think we should keep them all. Keeping only some of them could be fine but I am not well placed to choose a subset of commonly used gates and the `target` made them quite specialized. It also means that some gates will be defined in both qutip and qutip-qip. I also want all function that create `Qobj` in qutip the follow an common interface (they should all support `dtype`) and if we want these functions to also follow the qip signature, it could get somewhat complex. I think removing them and having the private functions for tests will make it easier for us on the long run. I see the use of `expand_operator` now that you explain it. I would prefer to have it in dimension.py and having users call it manually than being included in the `Qobj` creation function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1890#issuecomment-1121155262:440,interface,interface,440,https://qutip.org,https://github.com/qutip/qutip/pull/1890#issuecomment-1121155262,1,['interface'],['interface']
Integrability,"@EmilianoG-byte; Not too sure... When using spline interpolation for time dependent systems, I would recommend to create them before using the solver as to not link the spline times with the solver output times. Which is probably what you are doing with v4 and what you should keep doing for v5. In the next version, the `QobjEvo` is somewhat more user facing and we will probably just document better that this is the way to do it. As for when we plan to release v5, we had to push back the planned release time a few time already so it's hard to say...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2167#issuecomment-1578707335:74,depend,dependent,74,https://qutip.org,https://github.com/qutip/qutip/pull/2167#issuecomment-1578707335,1,['depend'],['dependent']
Integrability,"@EricGig thank you for the extensive investigation. What do you think of; adding (even with a temporarily note) this information in the QuTiP Docs? I; feel like the fix may take long and having something written up under some; official section on the website may help for future reference. On Wed, 13 May 2020 at 23:38, Eric Giguère <notifications@github.com> wrote:. > I did some tests and; > 1 - Cause by fortran zheer (lapack eigenvalue solver for complex hermitian; > matrices) (c's version Ok); > 2 - It happen when installing the scipy stack with pip but not when; > installing it with conda.; > 3 - It depend on the problem size, 64 seems particularly bad, usually it; > fails on the second call.; > 4 - I only got it in zheevr which is only used in brmesolve. But Nathan; > got it in other tests which use scipy's eigh.; > 4 - It happen in scipy in the fortan version of lapack:; >; > import numpy as np; > from scipy.linalg import eigh; > H = random_hermitian(64); > eigh(H) # Work fine; > eigh(np.asfortranarray(H)) # segfault after a few try, may need to change H; >; > Possible solutions (for zheevr):; >; > - Installing scipy with conda, the easiest solution, but not in our; > control.; > - Finding a way to link clapack from cython. Linking scipy's one would; > require good knowledge of scipy internals since only one cython interface; > is provided. Linking to another installation of lapack, but it would; > require the user to install lapack or install it with qutip. Both seems; > wrong to me.; > - For mac user, call scipy's eigh from cython i zheevr, slower but; > better than risking segfault.; > - Have the code directly in qutip. We can adapt it from OpenBlas:; > https://github.com/xianyi/OpenBLAS/blob/master/lapack-netlib/LAPACKE/src/lapacke_zheevr.c; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1197#issuecomment-628259492>, or; > unsubscribe; > <",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628441264:609,depend,depend,609,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628441264,1,['depend'],['depend']
Integrability,"@Ericgig ,@jakelishman thanks for reviews and the comments. I agree with Jake, the default `'jet'` colormap isn't very nice and I believe choosing the right colormap depends on the problem and values of the input matrix `M`. Personaly I love to have 0s in white and the others colored and that's because non-zeros elements maybe important and should catch the attention.; I thinks the code (in docs) producing the input matrix should be changed and that's because:; 1- it has lots of off-diagonal elements which raises the renown problem of overlaping bars. ; 2- maximum value and minum value of input matrix are very different and nearly non of the colormaps makes the results nice. Showing a thermal state's density matrix maybe a good option:; ```python; from qutip import thermal_dm, matrix_histogram. rho_th = thermal_dm(6,2); options = {'cmap':'hot_r',; 'stick': True,; 'cbar_pad':.0,; 'zticks':[0, 0.365, 0.5],; 'azim':65,; 'elev':35,; 'shade': False}; matrix_histogram(rho_th, limits=[0,0.5],options=options); ```; ![anim1](https://user-images.githubusercontent.com/24582081/123172512-7cdb6980-d492-11eb-9133-e3492e73d948.gif). **the old one:**. ![anim2](https://user-images.githubusercontent.com/24582081/123172639-a5636380-d492-11eb-98e0-75da9ad6f96e.gif). I agree that because the function returns `fig` and `ax` the user can modify nearly everything, but most of them may not be easy to implement for everyone. If we want the colors to be less flashy we have to set `shade` to `True` and there are 2 problems with turning on the shading:; 1- bars with nearly equal values have different colors (like 0s); 2- in some azimuthal viewing angle the `lightsource` produces shadows. ![mat_hist_new_azim=30](https://user-images.githubusercontent.com/24582081/123178802-37706980-d49d-11eb-97ca-afb3539c69eb.jpg); **turing around by 180°:**; ![mat_hist_new_azim=210](https://user-images.githubusercontent.com/24582081/123178811-3d664a80-d49d-11eb-991d-17b3179a784e.jpg). the second one can be solved",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1573#issuecomment-867217699:166,depend,depends,166,https://qutip.org,https://github.com/qutip/qutip/pull/1573#issuecomment-867217699,1,['depend'],['depends']
Integrability,"@Ericgig @hodgestar, Eric and Simon: unless there's anything else that springs to mind, I'll pencil in the 4.6 release for later this week/weekend after this is merged to `master`?. Simon in particular: there's a couple of accessible places in `correlation` that make deprecated `ode2es` calls. That particular functionality of the solvers isn't being removed in 5.0 (though maybe it should - `mesolve` is faster and better in almost every way), so they aren't themselves deprecated. Right now they don't trigger `DeprecationWarning` popups if a user calls them (since the stacklevel is 2). Despite that, should I _also_ wrap them in a warning filter to catch it? I don't really know best practices here. I kept postponing doing the 4.6 release because I'd keep thinking of little bits and bobs that I thought should go in, but at this point Boxi's (@BoxiLi) new pulse scheduler stuff is in and ready, the packaging and distribution methods are updated, and we'll have issued deprecation warnings for the things that we know are being removed. Anything beyond this can start to form the basis of a 4.7 release in a few months' time, with the Floquet changes (they might be waiting on me at the moment) and possibly some new stuff out of GSoC. Possibly that'll also include some deprecation warnings and other bits and bobs to do with packages getting moved out of qutip/qutip, and the changes to how the data-layer is going to work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1480#issuecomment-814937234:621,wrap,wrap,621,https://qutip.org,https://github.com/qutip/qutip/pull/1480#issuecomment-814937234,1,['wrap'],['wrap']
Integrability,"@Ericgig After reading the following comment in `setup.cfg`; ```; ; This uses ConfigParser's string interpolation to include all the above; ; dependencies into one single target, convenient for testing full builds.; ```; I changed my mind a bit about the role of `full`. It seems that the intention of full is to install everything for testing and development, so it makes sense for the ipython dependency to be included there. After I changed my mind, I just cherry-picked Asier's merge commit for #1918 to master.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1970#issuecomment-1207180169:142,depend,dependencies,142,https://qutip.org,https://github.com/qutip/qutip/pull/1970#issuecomment-1207180169,2,['depend'],"['dependencies', 'dependency']"
Integrability,"@Ericgig Do you have examples of where integrators are used?. Some of the interface choices seem inconsistent -- e.g. `system` is a `QobjEvo` instance (so it has dims) but the states are `data` (which don't have dims, type, etc). Perhaps this makes sense given how things are used, but it would be good to be consistent (especially given that accessing `.data` is very fast and would allow the integrator access to the dims and various high-level operations). Perhaps one solution is to have two levels of interface -- i.e. a low-level one (`get_state`, `set_state`, `integrate`) and a high-level one (`run`) where the signature of `run` changes to `run(initial_qobj, tlist) -> final_qobj` and `run` calls `get_state`, `set_state` and `integrate`?. I will also do a more line by line review shortly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925113187:39,integrat,integrators,39,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925113187,6,"['integrat', 'interface']","['integrate', 'integrator', 'integrators', 'interface']"
Integrability,"@Ericgig I have completed all the testing now. Everything looks good.; This truly looks like an awesome piece of work. The `QobjEvo` looks like it has great potential in many applications.; On behalf of all qutip users, thank you very much for taking on this mammoth task and doing such an excellent job. It is probably best if you squash and merge this yourself, as you can then edit the merged commit message.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815#issuecomment-459375419:403,message,message,403,https://qutip.org,https://github.com/qutip/qutip/pull/815#issuecomment-459375419,1,['message'],['message']
Integrability,@Ericgig I think these are mishaps. I found them when experimenting with the time-dependence options.; Maybe merge these into #1082 ?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1083#issuecomment-529844660:82,depend,dependence,82,https://qutip.org,https://github.com/qutip/qutip/pull/1083#issuecomment-529844660,1,['depend'],['dependence']
Integrability,"@Ericgig `.step(...)` looks like a great solution. We should definine more precisely what one is allowed to modify in between calls to `.step` and document that. Aside regarding things we have already implemented: I know -- my point is that there are many such things and we have only implemented one kind of each (for example, what kind of progress bar is appropriate is highly dependent on the environment the code is running in -- if the code is running on a server without a terminal it might be some kind of logging, inside a hypothetical QuTiP UI GUI application it might be a progress bar provided by the GUI toolkit being used, etc).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859578358:379,depend,dependent,379,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859578358,1,['depend'],['dependent']
Integrability,"@Ericgig b7cd10a creates a new `qutip.solve` package, and I moved all the solvers and most of their utilities into there. I put Cython utility modules into the same directory, and just prefixed their names with underscores to mark them as internal, rather than making another new `cy` directory. I also moved the tests of the solvers into their own `tests/solve` directory, so we can consider having `pytest` run the tests in order at some point as well. All the names are still imported properly into the `qutip` namespace, so you can still do `qutip.mesolve` and so on. This PR is already way too long. I could put the solver package commit into a different PR if it's helpful, but to be honest, I'm not sure entirely what benefit is derived - my commit messages are usually quite descriptive (please don't squash them!), so it's not like the history will be missing in `git log`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332#issuecomment-671526504:756,message,messages,756,https://qutip.org,https://github.com/qutip/qutip/pull/1332#issuecomment-671526504,1,['message'],['messages']
Integrability,"@Ericgig good idea about the tests, I'll implement them in this way. now there seems to be some problem with continuous integration, it fails on. ```; ERROR: Failure: ImportError (libgfortran.so.1: cannot open shared object file: No such file or directory); ```. I attempted to fix it by installing `libgfortran` using `conda`, however it didn't fix the issue. https://github.com/travis-ci/travis-ci/issues/4816#issuecomment-148789525; https://github.com/menpo/landmarkerio-server/issues/23#issuecomment-278361601. I don't want to mess up too much with continous integration as it takes long time to rebuild it, any suggestions on that?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/917#issuecomment-427726780:120,integrat,integration,120,https://qutip.org,https://github.com/qutip/qutip/pull/917#issuecomment-427726780,2,['integrat'],['integration']
Integrability,"@Ericgig sure I will be happy to fix the linting errors, I seem to have missed your previous message about codeclimate, sorry about that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1655#issuecomment-926628157:93,message,message,93,https://qutip.org,https://github.com/qutip/qutip/pull/1655#issuecomment-926628157,1,['message'],['message']
Integrability,"@Ericgig we verified the code also for spins.; The code is consistent with previous versions and it seems to run slightly faster when `e_ops` is given.; I checked the results with `mcsolve` from Qutip 4.3.1, also I checked the density matrix with respect to `mesolve` and `steadystate `. However, when the `e_ops` are not given, and the option `average_states=True`, the `mcsolve` in your version requires much more time than in the 4.3.1 case.; Please, check that this is not a machine dependent bug. ; I wrote a code which does that for a simple three spin system:; https://gist.github.com/fminga/c3e75a75dc528cb509c7d82d3eb9823b. There is, moreover, a minor inconsistency: when the option `average_states=False` and `store_final_state=True`, one would expect to obtain a set of wavefunctions, instead the code returns the density matrix at the last time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/991#issuecomment-497925627:487,depend,dependent,487,https://qutip.org,https://github.com/qutip/qutip/pull/991#issuecomment-497925627,1,['depend'],['dependent']
Integrability,"@Ericgig: I see you've been on a merging spree!. If you're about to merge, please don't squash this - I've taken care to have good commit messages and modular commits, and I'll have to rebase all the other PRs if this one gets squashed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-633698798:138,message,messages,138,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-633698798,1,['message'],['messages']
Integrability,"@Ericgig: yeah, it's not a perfect naming choice. Can you think of a better one? It ended up like that because I started off just calling in `_qfunc_alpha_matrix`, then realised about halfway through that I was actually constructing the conjugate of the matrix formed by stacking coherent states (since that's how it's used), but the name isn't really ideal. @quantshah: I'm just thinking now you might want to have a look at this - you had some thoughts about user interfaces for class-based creation schemes last year, with regards to the displacement operator, which I'll build up into a proper PR at some point as well. Don't worry if you've no time, though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-872207526:466,interface,interfaces,466,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-872207526,1,['interface'],['interfaces']
Integrability,"@HarshBabla99 I'm guessing based on the error message that you are running QuTiP on Windows. Do you have a C compiler installed? The compiler is needed to compile the strings. The Windows installation instructions are outlined at https://qutip.org/docs/latest/installation.html#installation-on-windows. I would recommend installing everything using conda if you can (see higher up on the install documentation page). If the compiler is installed, perhaps it is an issue with the compiler not being present in the `PATH`. Either way, this appears to be not an issue with QuTiP itself, but let's keep this issue open for a bit so that we can help you resolve things as best we can. I would also recommend upgrading your Python, QuTiP and numpy to more recent versions if possible. If you use conda, you should get the latest versions unless you explicitly request otherwise.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1914#issuecomment-1143281384:46,message,message,46,https://qutip.org,https://github.com/qutip/qutip/issues/1914#issuecomment-1143281384,1,['message'],['message']
Integrability,"@Krastanov I don't quite understand. Are you use the **nested-list method**? If so, can you tell me how you expanding and rewriting/reordering by hand of the c_ops so that you can list them one by one in the nested-list method? If you can rewriting/reordering them, why cannot you do the same thing for `mcsolve`?. @jrjohansson In the first reply you mentioned that. > Yes, it is not the same thing. You need to rewrite it manually so that each collapse operator contribute on standard lindblad form. . May I ask how to rewrite it manually so that each collapse operator contribute on standard lindblad form so that I can implement complicated time-dependent collapse operator in the **nested-list method**?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/223#issuecomment-223872353:649,depend,dependent,649,https://qutip.org,https://github.com/qutip/qutip/issues/223#issuecomment-223872353,1,['depend'],['dependent']
Integrability,"@Leo-am @Ericgig I originally marked this PR for inclusion in 4.7, but I'd like to suggest we skip this PR and clean things up for QuTiP 5. My reasoning is as follows:. - To be included in 4.7.X this PR would have to be included in 4.7.0 now and there is still quite a bit of work to do (writing tests, cleaning up _check_dims, handling some edges cases better) and I'd rather not rush those changes.; - If we make this change now, we will have to break user code *again* for 5.0 because the interface being introduced here is not the one proposed for 5.0 in #1838. Let's rather only break user code once.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1846#issuecomment-1092820030:492,interface,interface,492,https://qutip.org,https://github.com/qutip/qutip/pull/1846#issuecomment-1092820030,1,['interface'],['interface']
Integrability,"@Phyks Thanks for the suggestion. I made the qutip.cite() function to print and generate a bibtex file. Perhaps this is sufficient. With a message during install mentioning that you can invoke""; ```; from qutip.about import cite; cite(""path_to_generate_bibtex""); ```; to get the bibtex file and printing the output on the screen. @ajgpitch Should I add this to the setup.py file. Can we move this PR forward?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/752#issuecomment-356861565:139,message,message,139,https://qutip.org,https://github.com/qutip/qutip/pull/752#issuecomment-356861565,1,['message'],['message']
Integrability,"@Siddhant9868 Hi, thanks for looking into this. We want to essentially parse the whole project and generate the names of all the functions and classes. This could also be done directly by running a parser on the qutip folder using ideas similar to . https://stackoverflow.com/questions/15256509/parsing-class-and-function-dependencies-from-a-project. In this case, `sphinx-apidoc -o <output dir> <code dir>` does this for us and generates the RST which is used to build the docs. But maybe you can do it directly without having to parse the RST files. Once you find a way to parse all the parts of QuTiP then try to implement one of the two visualizations that @nathanshammah shared. I think in both, there is a case where you don't even need a json file and can just do away with a .csv. After that, we can think of where to put this in the docs as I am currently in the process of redoing the whole documentation building. . As a first step, you don't even need to use the QuTiP functions and could just try to get the D3 js examples work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525#issuecomment-469793487:322,depend,dependencies-from-a-project,322,https://qutip.org,https://github.com/qutip/qutip/issues/1525#issuecomment-469793487,1,['depend'],['dependencies-from-a-project']
Integrability,"@ajgpitch yes, the solver does raise an error... but not always. I was able to get it to integrate a few times but it was very inconsistent. The other error it sometimes raises is ""too much accuracy was requested for the precision of the machine"". When I realized the issue, I was very surprised it even got that far and I still don't know how it could ever run the calculation with a bad `rho0`. @nonhermitian yes, I see the point in the code where `mesolve` digs down into various types of `H` input. I'll work on something for the easy Qobj cases first, and think about how to handle the function case. Should be able to test the size of what the function returns.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/479#issuecomment-221595850:89,integrat,integrate,89,https://qutip.org,https://github.com/qutip/qutip/issues/479#issuecomment-221595850,1,['integrat'],['integrate']
Integrability,"@ajgpitch, I think that instance method picking is still somewhat of an issue in python 3, (which is what I use primarily) although I could be wrong. Either way, since the current QuTiP version supports 2.7, we would need to make this backward compatible to do multiprocessing correctly, so I'm glad you agree that option 3 is best. As to dropping python2 support, I think that this would be a good idea for v5.0, since [python is dropping support for 2.7 in two years](https://legacy.python.org/dev/peps/pep-0373/), which could be close to the time that QuTiP v5 is released (depending on how long the changes take). @sahmed95, thanks for making those final changes - sorry, I had forgotten to make the docstring capitalization changes. I'm happy with the state of the module now, so go ahead and merge it. There haven't been any functional changes made to how anything works, so none of my other pull requests ([[1]](https://github.com/qutip/qutip-notebooks/pull/58), [[2]](https://github.com/qutip/qutip-doc/pull/59), [[3]](https://github.com/qutip/qutip.github.io/pull/51)) should need to be updated. In the qutip-docs PR, for the moment I've only added auto-doc documentation, but I'll add more extensive documentation before version 4.3 is released (when is the expected time frame for this?) so that people will have more to refer to when this new feature is announced. . Thanks to everyone involved in this review process for their constructive feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-386413620:577,depend,depending,577,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-386413620,1,['depend'],['depending']
Integrability,"@araza6 thank you. Tests in continuous integration are failing. There seem to be too many PEP8 changes (from `black`?) in this PR, unrelated to the changed files. I am not so sure about the constraints put on the use of the `fidelity` function. I had left it as this to keep as much freedom as possible and not spoon feed the user. It is basically a shortcut for Tr(x^2), not much else.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-613052212:39,integrat,integration,39,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-613052212,1,['integrat'],['integration']
Integrability,"@cgranade When we initially talked about this, we also spoke about storing Kraus superoperators with it, but it's not completely clear to me whether this route covers that case. ""No"" is fine (we don't have to make this work for everything) but if the answer is ""Yes"" or ""Maybe"", what would that look like?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-949031114:154,rout,route,154,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-949031114,1,['rout'],['route']
Integrability,"@goerz I think one of Mølmer's papers (maybe the one I have pointed out) addressed the equivalence of the two methods. Sorry, I don't have a definite paper to point out at this moment. I was actually organizing the Julia community to work on this direction (see [JuliaQuantum](http://juliaquantum.github.io)) from scratch, and hence didn't follow up the efforts in the measurement simulation within QuTiP. . When I was writing my paper on continuous measurement ([PRA, 93.023817](http://journals.aps.org/pra/abstract/10.1103/PhysRevA.93.023817)), I came up the argument that the former method may be more appropriate for measurement models. This is because measurements have to happen in evenly spaced time steps determined by the detector's integrating time, so it is intuitive to use a random number to judge if on each measurement step the quantum jump will happen. There may be a way to use the second method to implement the same measurement simulation model, but I didn't think too much on it. In reality, I developed another more efficient method without actually evolving the density operator in my paper to simulate continuous measurement using a set of stochastic equations for squeezing thousands of atoms' state which has not been included in QuTiP yet. Sorry I don't have more useful reference that explains this point in more details at this moment. Good luck!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/111#issuecomment-220744432:742,integrat,integrating,742,https://qutip.org,https://github.com/qutip/qutip/issues/111#issuecomment-220744432,1,['integrat'],['integrating']
Integrability,"@haoyudoingthings It looks from your error messages that they are caused not by the import cells, but by later cells, and are the result of having modified the notebook. For example, `H = qt.qobj_list_evaluate(h_t, tau, args)` is a modified line from cell 13 of the original notebook. I would suggest starting again from the original notebook and continuing from there. Some of the notebooks are out of date. We're setting up automated tests to correct that as part of this year's Google Summer of Code, but that has only just started so it might be a few months before we have everything set up. I'm closing this for now, but please feel free to update the issue if you encounter more problems.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1930#issuecomment-1153919964:43,message,messages,43,https://qutip.org,https://github.com/qutip/qutip/issues/1930#issuecomment-1153919964,1,['message'],['messages']
Integrability,@hodgestar . I removed the `_rhs` by changing it so the rhs is built when making the integrator instead of in `__init__`. I also simplified the way options are updated so brmesolve no longer need to overwrite `_apply_options`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2173#issuecomment-1681331940:85,integrat,integrator,85,https://qutip.org,https://github.com/qutip/qutip/pull/2173#issuecomment-1681331940,1,['integrat'],['integrator']
Integrability,"@hodgestar ; I added default values to options and a default `mcstep`. I added a doc-string entry for `integrator_options`, but please check it. About `mcstep` optimization for scipy's `ode`, I tested both the methods and there can be a factor 2 in timing between both, but it can be in both ways depending on the conditions. So I used `mcsolve`'s method for `zvode` and the new method for `lsoda`. This way, the default will run like `v4`, but you have an alternative when it's not ideal.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-933862294:297,depend,depending,297,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-933862294,1,['depend'],['depending']
Integrability,"@hodgestar I've added some tests for the spin_q_function. At the moment it tests a random density matrix for three different spin values. I'm not very familiar with qutip's style for writing tests, I would normally write a test function that would also take arguments but that doesn't seem to be the norm here. We could also do something similar to the `TestHusimiQ` class of tests. I've had a look at the `spin_wigner` function as well, and I believe that had the same issue of density matrix indexing.; I've re-implemented it (and the `_rho_kq` function) and I've added details to the docstrings including relevant references.; Should I create a separate PR for this or should I expand the scope of this PR?. NB: At the moment I can't think of an easy way to test the spin Wigner function because there is no simpler/alternative definition that I am aware of to verify the implementation against.; There are simple tests such as if the imaginary part is less than some threshold (currently true), does it integrate to 1 (currently not true, not sure why).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617:1007,integrat,integrate,1007,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617,1,['integrat'],['integrate']
Integrability,"@hodgestar, I fixed the codeclimat issues and improved the error message. If your still fine with it, let's merge.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1778#issuecomment-1017814632:65,message,message,65,https://qutip.org,https://github.com/qutip/qutip/pull/1778#issuecomment-1017814632,1,['message'],['message']
Integrability,"@hodgestar: those comments lines you've highlighted were a careless mistake - they shouldn't have been removed, but it's a function of how I implemented the automated removal. I didn't notice them when I checked it through. I've restored them. The `cython: language_level=3` lines in particular are especially important to maintain, so that was very careless of me. That said, utf-8 is the default encoding for Python 3, so those lines aren't actually necessary at all any more. That wasn't the case with Python 2 (which assumed ASCII), but it's no longer an issue. Regardless, I've restored them because this PR wasn't meant to remove that sort of thing. Similarly, since I had to go through everything anyway, I've excluded the whitespace-only changes within files (though I left the normalisation of whitespace specifically at the ends of files). Apologies, I've force-pushed it back rather than applying it as a new commit, so it probably won't render these changes as nicely in the GitHub interface - it was rather easier for me to modify the commit than to make a ""partial reversion"" commit (and it's better for the logs).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-867019111:994,interface,interface,994,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-867019111,1,['interface'],['interface']
Integrability,@hodgestar; I changed the interface.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1843594542:26,interface,interface,26,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1843594542,1,['interface'],['interface']
Integrability,@jakelishman I would vote for not wrapping them right now. We should stop using `ode2es` from the correlation functions (or continue to use it but no longer expose it to users). The DeprecationWarnings will hopefully help remind us to do that.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1480#issuecomment-815311257:34,wrap,wrapping,34,https://qutip.org,https://github.com/qutip/qutip/pull/1480#issuecomment-815311257,1,['wrap'],['wrapping']
Integrability,"@jakelishman, about the two issues you raised:. 1. Import time related to `import qutip`; I agree with you that in order to make it frictionless for downstream libraries to implement qutip's interface you'd want not to increase their loading times. That would easily be achieved by defining the `__qutip_qobj__` as the entry point of this API. A drawback of this implementation is that it requires the conversion method to be defined on the object itself.; The dispatch-like solution, as was proposed by @hodgestar, is easier to play with, can be defined in a separate file, can be added to a separate package like `netket_qutip_interop` or even using setuptools entry points, though that would add complexity. Again, I'm personally not biased. I would go with option 1 because it's simpler, but I do like the organisational beauty of option 2 (that is used throughout the jax ecosystem). 2. About implicit conversion; - Assume we can distinguish two level of APIs exposed by qutip, similar in spirit to the distinction there is between BLAS and LAPACK. ; - There are low level (BLAS-like) operations on Qobjs such as addition, kron, sum, ecc that are performed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:191,interface,interface,191,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['interface'],['interface']
Integrability,"@maij The code is looking good to me. I've requested some changes and after that I'd like to do a final review, but I think we're in good shape. My thoughts on the remaining questions:. > Decide if the spin_wigner function should return only real values be default (as is currently done for the spin_q_function). I'm +1 on returning real values since the Wigner function is real valued and this is more consistent (unless you're aware of any strange cases where it might somehow not be?). > Decide whether to integrate the W function normalization in _rho_kq rather than at the top level. We divide all terms by (2*j + 1) only to end up multiplying it back out at the end which is a waste of time (_rho_kq is called d**2 times, d=2*j+1) . The benefit of leaving it as-is is that it reads like most definitions in literature. I'm +1 on sticking to the definitions in literature unless there is a measured speed penalty. `2*j + 1` likely can't be that big and the small number of arithmetic operations required is probably dwarfed by the matrix multiplications happening. . > Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). Here I would try stick as closely as possible to the previous behaviour of these functions (i.e. cases which worked before should hopefully return the same answer now) and then document clearly what the normalization factor is and how it should be added or removed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-904598186:509,integrat,integrate,509,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-904598186,2,['integrat'],"['integrate', 'integration']"
Integrability,"@matteoacrossi Thanks! I don't know that I have much particular advice, other than ""let's try debug the failing tests one at a time"". Maybe pick one of the `test_driven_cavity` ones, because I'm not quite sure how `ValueError: Invalid preconditioning method` can get raised when it succeeds on other platforms. Maybe it is a bug that isn't completely related to the M1?. Are you familiar with pdb? Running just the one test using pytest and `pytest --pdb` will allow to explore the stack trace and see the values of variables in each stack frame, and hopefully figure out what went wrong. Another first step is just to fix the line `raise ValueError(""Invalid preconditioning method."")` to be `raise ValueError(f""Invalid preconditioning method: {ss_args['method']!r}."")` so that the error messages gives more of a hint of what the invalid method name was.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755#issuecomment-1007285325:788,message,messages,788,https://qutip.org,https://github.com/qutip/qutip/issues/1755#issuecomment-1007285325,1,['message'],['messages']
Integrability,"@nathanshammah ; I expect it to be easy to use as an integrator:; ` _evolve_krylov_tlist` is essentially the `run`, `time_evolution` is `integrate`.; The interface just need to be adapted.; It would work well with `sesolve` and `mcsolve`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1644#issuecomment-908484939:53,integrat,integrator,53,https://qutip.org,https://github.com/qutip/qutip/pull/1644#issuecomment-908484939,3,"['integrat', 'interface']","['integrate', 'integrator', 'interface']"
Integrability,"@nathanshammah ; That was a lot more than 1 commit but it's now ready.; - I added a test suite without cython. It only skip brmesolve time dependent tests. ; - Error is raised when trying to use brmesolve without cython, but not at qutip import.; - Every other features works without cython. I tested without cython with both conda and pip. It work with both when done properly but conda is not as stable: uninstalling cython can change numpy, scipy, etc.'s versions which break qutip. So I am not sure if it will work properly we downloaded as binaries from conda. But this error should already be present for conda installation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1082#issuecomment-535188336:139,depend,dependent,139,https://qutip.org,https://github.com/qutip/qutip/pull/1082#issuecomment-535188336,1,['depend'],['dependent']
Integrability,"@nathanshammah I changed the precision limit in ""assert_(np.max(abs(val_kns-Ana_val_kns)) < 1.0E-13)"" since I noticed it depends on the machine I run it on. I pushed a new commit.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1066#issuecomment-575498008:121,depend,depends,121,https://qutip.org,https://github.com/qutip/qutip/pull/1066#issuecomment-575498008,1,['depend'],['depends']
Integrability,"@nathanshammah This seems like an important issue, unsure why this is dormant. Let me know your opinion, please. Danny (former student of mine) could turn this into a pull request, if you tell us that that's the appropriate route.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1905#issuecomment-1426945641:224,rout,route,224,https://qutip.org,https://github.com/qutip/qutip/issues/1905#issuecomment-1426945641,1,['rout'],['route']
Integrability,"@nonhermitian mentioned something about being able to move the pyximport bit to somewhere in the dynamic C building workflow. Now that would be a real bonus. Say we have some (probably Windows) users who have not managed to configure a working C compiler, but have installed from a conda package or some other wheel like thing, then they would be able to use everything except the string format time-dependent stuff. ; This is also discussed in #448",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-269725490:400,depend,dependent,400,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-269725490,1,['depend'],['dependent']
Integrability,@nwlambert ; I think it depends on whether `sqrtm()` or `eigenenergies()` performs better (or less issues in general case) in `Qobj`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2371#issuecomment-2042763610:24,depend,depends,24,https://qutip.org,https://github.com/qutip/qutip/pull/2371#issuecomment-2042763610,1,['depend'],['depends']
Integrability,"@nwlambert I have already made the pull request. The docstring was already updated specifing the needs of the colors you give to the add_points function depending of the style you proposed. I would like to ask two more questions:. -Is it necessary to create a changelog file if the change is small? I was reviewing the documentation and it tells you to create one but reviewing the ones that are created, they are few and all seem to be related to major code updates, so I assumed that one should only be created when the change in the project is significant. Am I right or should I add one?. -The other point I'd like to ask is if there are any open issues related to a plotting problem with the 'l' style. I believe I have found a bug related to plotting with this style due to the way the script orders the points before plotting, but I have not found any issues reporting it. . Plotting in V4:; ![Figure 2024-01-25 211444](https://github.com/qutip/qutip/assets/78165605/329291ec-195c-443f-8bf4-727fde7cdd24). Plottin in V5:; ![Figure_1](https://github.com/qutip/qutip/assets/78165605/ece1143f-d367-40db-b808-f573332b8d0a). I think I know how to solve it, but I'm not sure if someone has already reported it, if I should open a new issue or just solve it as part of this issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1974#issuecomment-1910952439:153,depend,depending,153,https://qutip.org,https://github.com/qutip/qutip/issues/1974#issuecomment-1910952439,1,['depend'],['depending']
Integrability,"@nwlambert Would you mind giving this a try with some bigger realistic HEOM examples you have lying around? Eric's recent improvements to CSR `mul` and `imul` also help HEOM RHS construction since there is a lot of `c * op` happening. The 3.5x improvement from this branch is on top of that. @Ericgig Would you mind giving your thoughts on the Cython interface both from a ""is this good from a technical point of view"" and from a ""do we want this point of view"". I guess we could also name it `_from_csr_blocks` if we don't want to expose it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2128#issuecomment-1476648533:351,interface,interface,351,https://qutip.org,https://github.com/qutip/qutip/pull/2128#issuecomment-1476648533,1,['interface'],['interface']
Integrability,@nwlambert didn't we fix this by natively allowing time dependent Hamiltonians in our solver? Maybe we should mention the repo here since it's relevant.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1377#issuecomment-721813998:56,depend,dependent,56,https://qutip.org,https://github.com/qutip/qutip/issues/1377#issuecomment-721813998,1,['depend'],['dependent']
Integrability,"@pmenczel I've worked on this quite a bit, mostly focusing on putting initial tests in place, supporting the full set of coefficient functions supported by the other solvers for the rates, shifting the martingale calculations into the integrator and moving the rate shift calculations to Cython to avoid the overhead of Python function calls and loops. @Ericgig I ended up doing some odd things because QobjEvo doesn't seem like natural fit for these rate functions and coefficients are a bit awkward to use directly inside solvers. @pmenczel & @Ericgig Could you take a look at everything again and let me know what you think?. Some of the bigger todo items I have in mind at the moment:. - How do we tell that the negative rate case is really working correctly? I added a test but it doesn't match mesolve well and I'm unhappy with that.; - Can we strengthen any of the existing tests with more assertions?; - Now that the discrete and continuous martingale calculations are mostly handled when collapses happen, we could expose them on the result along with `col_which` and `col_time`. Should we?; - Are the new martingale and rate shift calculations correct?; - The way the shared coefficients are used inside `RateSet` and exposed to `MCSolve` required a lot of careful thinking, did I get the design of that right?; - How do we test whether this works when using `parallel_map`? Being able to run in parallel is a key strength of the Monte Carlo method, so it would be good to have tests that show that that works.; - Can we drop the number of trajectories in the docs to make the doc build faster?; - Using the SciPy integrator is a bit awkward. Is there anything we can replace it with? If not, should we expose more of its options? I exposed the `limit` option because I kept having the integration fail during testing.; - Add tests for the `nm_mcsolve` Cython classes. There is also a bunch of general cleaning up still to do, but lets try get the big picture happy first.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1493417354:235,integrat,integrator,235,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1493417354,3,['integrat'],"['integration', 'integrator']"
Integrability,"@quantshah @BoxiLi @hodgestar I have wrapped up the two measurement functions in the `measure` and `measurement_statistics` function which calls the required functions based on whether `ops` is a `list of Qobjs` or a `Qobj`. Do we want the individual functions (especially POVM) to be more granular? Moreover, the docstring for the wrapper function is really clunky (given the case-wise output types). Any ideas on how to make that simpler ?(one idea is to not specify return types and only have parameters given it's bound to be clunky!). ps. I'll fix the tests all at once after we decide on the api",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-650337844:37,wrap,wrapped,37,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-650337844,2,['wrap'],"['wrapped', 'wrapper']"
Integrability,"@quantshah I really like your option B idea, but for now I think we should do whatever is quickest to get something in the dev branch that can be used in some notebook to accompany your paper. I am also **very** much behind the Solver class. I think we have some work to do to convince @Ericgig , who is currently re-writing all the solvers. Perhaps we should start a discussion about this on Slack. There are lots of methods that could be used across solvers. I think the main interface can still be function based, but the code structured in classes",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/962#issuecomment-470571697:478,interface,interface,478,https://qutip.org,https://github.com/qutip/qutip/pull/962#issuecomment-470571697,1,['interface'],['interface']
Integrability,"@riccameng Hi!. I think this is very achievable. Depending a bit on your time scales, it might make sense to work with QuTiP 5, which is currently under development in the `dev.major` branch. Version 5 includes much better QobjEvo support, much cleaner and more pluggable solvers (which should be merged into `dev.major` later this week), and a pluggable data layer. Some of these might be very helpful to you. For the rest of the discussion I will assume we are targeting QuTiP 5 unless you tell me otherwise. Some questions and thoughts from my side:. * As a first step you might be able to use v5s sparse (csr) data layer and write a custom ODE solver that performs the low-level evolution across multiple cores.; * If that works nicely, it could be extended to work across multiple nodes.; * For quantum circuit simulation, I think you can just ask @BoxiLi in a separate issue in https://github.com/qutip/qutip-qip about adding support for sparse unitaries in circuit simulation. I'm not sure if there are reasons why this might be difficult, but let's open an issue there and see.; * If the operators or states are too big to be stored in main memory even when they're sparse, we'll also need to figure out how to store them. Possibly this would involve a new data layer of some sort, but let's cross that road when we get to it.; * One of the challenges with HPC support is how to ensure we don't break it while continuing to evolve QuTiP. There are two challenges here. The first is to make sure that the code runs correctly -- I'm guessing there is some way to run MPI nicely on a single machine in our unit tests. The second is to make sure that performance isn't negatively impacted by changes. Do you have any thoughts on either of these?. It's exciting to see QuTiP being used on really big hardware. Looking forward to working with you however we can.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1671#issuecomment-927737428:49,Depend,Depending,49,https://qutip.org,https://github.com/qutip/qutip/issues/1671#issuecomment-927737428,1,['Depend'],['Depending']
Integrability,"@shemian29 Did this issue occur after you upgraded QuTiP or one of it's dependencies? And how did you install QuTiP? The IPython kernel crash suggests that maybe the installation is broken somehow (e.g. mismatched C libraries, etc). I can't reproduce your error on my side.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1705#issuecomment-959146334:72,depend,dependencies,72,https://qutip.org,https://github.com/qutip/qutip/issues/1705#issuecomment-959146334,1,['depend'],['dependencies']
Integrability,@tamakoshi2001 I suspect the issue is that the argument `V` is a numpy array. It should be a data instance. You can wrap the numpy array with `_data.Dense(V)` to convert it.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2109#issuecomment-1458460315:116,wrap,wrap,116,https://qutip.org,https://github.com/qutip/qutip/issues/2109#issuecomment-1458460315,1,['wrap'],['wrap']
Integrability,@thangleiter can you try with the dependencies (cython numpy scipy nose matplotlib)? What Python are you using and what OS?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-480766019:34,depend,dependencies,34,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-480766019,1,['depend'],['dependencies']
Integrability,@wrzadkow thank you. It sounds good to me. Could [detect](https://stackoverflow.com/questions/5376837/how-can-i-do-an-if-run-from-ipython-test-in-python) whether the environment is `IPython`. ; If you can write a test too for it to avoid environment-dependent errors that would be great.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/989#issuecomment-493725091:250,depend,dependent,250,https://qutip.org,https://github.com/qutip/qutip/issues/989#issuecomment-493725091,1,['depend'],['dependent']
Integrability,A chat app for devs that integrates nicely with github. It us how we discuss things.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/738#issuecomment-320977143:25,integrat,integrates,25,https://qutip.org,https://github.com/qutip/qutip/issues/738#issuecomment-320977143,1,['integrat'],['integrates']
Integrability,"A check on macOS wasn’t successful, but I don’t see how that error message could have any relation with krylovsolve",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1084513982:67,message,message,67,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1084513982,1,['message'],['message']
Integrability,"A final overall sugession which can be considered is encapsulation of the two main functions `temporal_scattered_state` and `scattering_probability` into a single class. It is a major design change of course. @bencbartlett If you think it is a good idea to bundle both methods into a single class called `PhotonScattering`, I can help with that. In the spirit of your excellent notebook example, you can add the Hamiltonian generating function which can be passed to a `PhotonScattering` class. Each time you call the `scattering_probability` method of this class, you supply the arguments for the particular Hamiltonian, i.e., pulse_length, area, `n_emission` etc. This is similar to the wrapping function that you wrote for your `pool` processes in the notebook. I need to understand the physics a little bit more to ascertain which are the quantitites that would form the arguments for the scattering_probability function and which ones would be fixed for an experiment (hamiltonian for instance). But the overall idea is that you make a class for a particular scattering experiment, give it a fixed Hamiltonian function and keep the calculations flexible wrt to the parameters of interest (pulses, gamma etc). A prototype example would then be:; ```; from qutip.scattering import PhotonScattering; from qutip.scattering import hamiltonian_tls, hamiltonian_rft; ...; scatter = PhotonScattering(hamiltonian_tls, tlist, c_ops, zero_state = psi0, effective_hamiltonian = True); prob_scatter = scatter.scattering_probability(n_emissions, gamma, pulse_length, pulse_area); ```; For a different hamiltonian, the example would be:; ```; scatter = PhotonScattering(hamiltonian_spdc, tlist, c_ops_spdc, zero_state = psi0); prob_scatter = scatter.scattering_probability(n_emissions, pulse_length=pulse_len); ```; I will be happy to help with this and discuss if you are interested, @bencbartlett. Adding these small changes from your notebook example into the main code could make your module more general an",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384566684:689,wrap,wrapping,689,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384566684,1,['wrap'],['wrapping']
Integrability,"A recent Python package using QuTiP as a dependency, `qptomographer`, addresses the diamond norm distance. See: https://qptomographer.readthedocs.io/en/latest/figures_of_merit/#the-diamond-norm-distance. Also, [ArXiv:1808.00358](https://arxiv.org/abs/1808.00358).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/874#issuecomment-489439521:41,depend,dependency,41,https://qutip.org,https://github.com/qutip/qutip/issues/874#issuecomment-489439521,1,['depend'],['dependency']
Integrability,"About only storing kets, but not averaging into a dm, we can't do that yet, but it's easy to implement so if useful, we can add the option. The error is not in the `_to_dm`, but in the addition, which is done in the sparse CSR format. No dense conversion are made. But the `proj` operator does not have a tidyup step, so any non-zero are kept, however small they are. This is also an easy fix that could help. The `MemoryError` is also not that helpful, we should improve the error message to tell what size of arrays are allocated. Thank you for reporting these and trying the alpha version. I see you don't have cython, do you have a way to compile the source yourself? ; Once fixed, I would be curious to have you try the development version without waiting for a release.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2299#issuecomment-1904338523:482,message,message,482,https://qutip.org,https://github.com/qutip/qutip/issues/2299#issuecomment-1904338523,1,['message'],['message']
Integrability,"About your future 'dispatch like' system:; I personally like dispatch because it makes everything more easily extensible (and/or hackable) if package authors agree on a common denominator and they are careful to rely only on that interface and on nothing else. As all our operators are lazy, we already implement lazy operator*dense and operator*sparse multiplication. ; It might be interesting for us, in the future, to define dispatch rules for our operators, so that we don't even need to convert them to Qobj. But for now I'd focus on having an easy and extensible way to convert our objects to qutip format. . (Ideally, it would be nice if we could give qutip solvers our operators, which are not Qobj, provided they define the right dispatch rules, but I imagine that this would be complex and require significant effort on your part).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825714680:230,interface,interface,230,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825714680,1,['interface'],['interface']
Integrability,"According to the error message; ```; WARNING: invalid signature for automodule ('qutip.core.gates\n :members:\n :show-inheritance:\n :imported-members:'); WARNING: don't know which module to import for autodocumenting 'qutip.core.gates\n :members:\n :show-inheritance:\n :imported-members:' (try placing a ""module"" or ""currentmodule"" directive in the document, or giving an explicit module name); ```; That should be the error source. Lets use; ```; .. automodule:: qutip.core.gates; :members: ...; ```; first and see if it works.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2441#issuecomment-2148414542:23,message,message,23,https://qutip.org,https://github.com/qutip/qutip/pull/2441#issuecomment-2148414542,1,['message'],['message']
Integrability,"Actually it probably doesn't shake out to a single time-dependent operator like I thought it might at the start. You can still do the Taylor expansion to try (you can find a similar result for 3x3 spin matrices to the 2x2 case), but there's not going to be a cancellation I thought there might have been. Right now, QuTiP doesn't support arbitrary time-dependence in collapse operators, so if you can't find a way to write it in that form, you might have to do the integration manually yourself until we've added it - the QuTiP guide [explains how QuTiP does the integration](http://qutip.org/docs/latest/guide/dynamics/dynamics-monte.html).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1308#issuecomment-739883642:56,depend,dependent,56,https://qutip.org,https://github.com/qutip/qutip/issues/1308#issuecomment-739883642,4,"['depend', 'integrat']","['dependence', 'dependent', 'integration']"
Integrability,"Actually let's also leave it open until I can determine if it is indeed scipy. After installing scipy with pip as the scipy folks suggested, the example I had in that issue is now working, but I get the same integration error with qutip and same tests failing. When I get time, i'll try to distill down the qutip error to a scipy error and post an update. Hopefully the main issue is just a scipy error, but would be good to confirm.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965#issuecomment-1205435786:208,integrat,integration,208,https://qutip.org,https://github.com/qutip/qutip/issues/1965#issuecomment-1205435786,1,['integrat'],['integration']
Integrability,"Added optional argument `integrator` to choose between `propagator` or `mesolve` (also a `parallel={True,False}` argument). Realized there is probably not much to gain from `mesolve` returning a sparse matrix for large systems, however. This is because in the memorycascade method there is some postprocessing of the propagator using the `tensor_contract` method (written by @cgranade) which does not support sparse matrices, so it gets converted to dense anyway. Still `mesolve` actually performs a bit faster for small systems and small times, so still useful to be able to choose the method I guess.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/502#issuecomment-230115449:25,integrat,integrator,25,https://qutip.org,https://github.com/qutip/qutip/pull/502#issuecomment-230115449,1,['integrat'],['integrator']
Integrability,"Adding a constant Hamiltonian did also not help. In my most recent code I even removed all the atomic states degeneracies and it still won't work. I post my code below. Could you run it on your machine and let me know, whether you get more than constant lines as an output.; ```; import numpy as np; import pylab as plt; import scipy as scipy; from qutip import *. #System parameters; Omega = 1; Gamma = 0.25. #Single atom states; g = basis(3,0); e = basis(3,2); s = basis(3,1). #Single atom operators; sgg = g * g.dag() #ground state population; see = e * e.dag() #excited state population; sss = s * s.dag(); sge = g * e.dag() #atomic coherence sigma_ge; #Composed atomic operators; A1sgg = tensor(sgg, qeye(3)); A1see = tensor(see, qeye(3)); A1sge = tensor(sge, qeye(3)); A1sss = tensor(sss, qeye(3)); A2sgg = tensor(qeye(3), sgg); A2see = tensor(qeye(3), see); A2sss = tensor(qeye(3), sss). #Time independent part of the Hamiltonian; H0 = -1 * A1sgg + 0.5 * A1sss + 1 * A1see - 0.5 * A2sgg + 0.1 * A2sss + 1.2 * A2see; #Driving atom A1; H1 = Omega * (A1sge + A1sge.dag()); #Time dependence of the driving; def H1_coeff(t,args):; return 0.5 * (np.tanh(100.0*(t-np.pi/2.0))-np.tanh(100.0*(t-np.pi))); #Complete Hamiltonian; H = [H0, [H1, H1_coeff]]. #Time; tspan = np.linspace(0,3.5,550); #initial state; psi0 = tensor(g,g); #calculated expectation values; e_ops = [A1sgg, A1see, A2sgg, A2see]. results = mesolve(H, psi0, tspan, np.sqrt(Gamma) * A1sge, e_ops, options=Options(atol=1e-9,rtol=1e-9)). #plotting the results; fig, ax = plt.subplots(1,1); ax.plot(tspan, results.expect[0], lw=2, label=r'$\sigma_{gg}^{A1}$'); ax.plot(tspan, results.expect[1], lw=2, label=r'$\sigma_{ee}^{A1}$'); ax.plot(tspan, results.expect[2], lw=2, label=r'$\sigma_{gg}^{A2}$'); ax.plot(tspan, results.expect[3], lw=2, label=r'$\sigma_{ee}^{A2}$'); ax.set_xlabel(r'Time $[\Omega^{-1}]$'); ax.legend(); plt.show(); ```; Again changing the number of time steps in `tspan` to 500 gives the right result.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/771#issuecomment-338356312:1083,depend,dependence,1083,https://qutip.org,https://github.com/qutip/qutip/issues/771#issuecomment-338356312,1,['depend'],['dependence']
Integrability,"Additionally, from looking through your comments it appears that something; definitely went weird with formatting and/or merging. I'll comb back; through and make to fix any of these issues before I request a re-review. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839:698,integrat,integration,698,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839,2,['integrat'],"['integration', 'integrator']"
Integrability,"After setting atol=1e-9 it works now for 500 time steps. But increasing the number of time steps to 550 causes the program to fail again. It also doesn't help to decrease atol further, I went up to 1e-15, neither does decreasing the relative tolerance rtol. Shouldn't actually increasing the number of time steps improve the precision? Also, why does it depend on the dimension of the dm? I'm just curious now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/771#issuecomment-338105892:354,depend,depend,354,https://qutip.org,https://github.com/qutip/qutip/issues/771#issuecomment-338105892,1,['depend'],['depend']
Integrability,Agreed that it is tricky to test. I mostly wanted the tests because the nice error messages might contain bugs. Happy to let this slide for now though.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2304#issuecomment-1908915742:83,message,messages,83,https://qutip.org,https://github.com/qutip/qutip/pull/2304#issuecomment-1908915742,1,['message'],['messages']
Integrability,"Ah no, never mind - time dependence would mess you up, and actually the sort of tri-diagonal systems I had in mind aren't so low-rank anyway. Maybe I'll look into it, but it won't be anywhere near as good as I had first thought.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1585#issuecomment-865915323:25,depend,dependence,25,https://qutip.org,https://github.com/qutip/qutip/issues/1585#issuecomment-865915323,1,['depend'],['dependence']
Integrability,"Ah, nice catch thanks, and thanks for the super clear repro. We're overhauling the solvers for QuTiP 5.0, which will include a lot more rigorous input checking on entry, but also it uses far safer low-level datatypes that would catch this shape mismatch in the C layer (even though the `dims` _should_ have been checked by `mesolve`). I'll check the other solvers and patch in a sanity test - probably after these lines: https://github.com/qutip/qutip/blob/d5e305513d9186df74beee4fd8da680e89f29d15/qutip/mesolve.py#L259-L261; we can just insert a test; ```python; if rho0.dims[0] != rho0.dims[1]:; raise ValueError(; ""input state must be a pure state or square density matrix""; ); ```. There may also be other segfaults lurking if you use a Python function to generate a time-dependent `Qobj` value in the Liouvillian or the expectation operators, but right now you're unlikely to use that form (because it's slow as anything). The bug slips through because we unsafely pass off a matrix down to C code (where we currently don't have sanity checks) without first verifying that it is a valid shape in Python space - the C code is working as designed, so there shouldn't be problems with correct inputs. Removing `c_ops` causes `mesolve` to delegate to `sesolve` which presumably is better at its type-checking, and I expect that a small dimension size working is likely just `malloc` having slack in the memory it gives us for small sizes or small requests being allocated into the special pre-allocated store.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169:776,depend,dependent,776,https://qutip.org,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169,1,['depend'],['dependent']
Integrability,"Ah, you are right! It seems to be all tests using the ODE solvers are failing.; Indeed mesolve and sesolve tests are also failing (with the same integration error).; There are lots of tests which fail, I think most likely every test that calls a solver... I just did some basic testing with scipy's integrate.ode and this seems to have the same kind of issues, so I think as you mention, the issue lies with the solver...meaning it probably isn't installed correctly.; Similar issues seem to have been raised for scipy previously (e.g. https://github.com/scipy/scipy/issues/15077), though I don't see any currently open. I also updated scipy today and it didn't change anything unfortunately. I guess this issue can be closed, if it's just a scipy problem?; Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965#issuecomment-1204170858:145,integrat,integration,145,https://qutip.org,https://github.com/qutip/qutip/issues/1965#issuecomment-1204170858,2,['integrat'],"['integrate', 'integration']"
Integrability,"All builds pass, besides the build on Python 3.7 without Cython. I would still merge this PR and focus on that issue separately. . Now we need to update places where `nose` is mentioned, I found these in `qutip-doc`; - the [changelog](https://github.com/qutip/qutip-doc), ; - the instructions on the dependencies in the documentation [installation instructions](https://github.com/qutip/qutip-doc/blob/402ec10de7a314ba9f124ddac7514621e92496df/installation.rst), ; - and [development guidelines](https://github.com/qutip/qutip-doc/blob/2ffd6d1cc581e858674d43fe97a9297e9476a278/qutip_dev_contrib.md).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-560280938:300,depend,dependencies,300,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-560280938,1,['depend'],['dependencies']
Integrability,All of the individual terms in the dense version of the time-dependent BR solver are now tested and working. Now I need to write the codegen module. A sparse version is just a simple extension once the codegen is done.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/676#issuecomment-295576774:61,depend,dependent,61,https://qutip.org,https://github.com/qutip/qutip/pull/676#issuecomment-295576774,1,['depend'],['dependent']
Integrability,"Also, I used a piece-wise-constant approximation to a time-dependent hamiltonian with the bloch-redfield solver lately (here http://arxiv.org/abs/1409.6014) - it was useful, but I'm not really sure if it was the most elegant approach. It was just what I could figure out on a short notice... so I'm conflicted as to whether or not it would be a feature useful to add, do you have any thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/258#issuecomment-63407763:59,depend,dependent,59,https://qutip.org,https://github.com/qutip/qutip/pull/258#issuecomment-63407763,1,['depend'],['dependent']
Integrability,"Also, could you give me a realistic example of an instance in which `qutip.squeeze` can be used? I'm still puzzled when I think that its entries depend on the cutoff.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286313605:145,depend,depend,145,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286313605,1,['depend'],['depend']
Integrability,"Also, instead of adding a third entry to the nested list characterizing the time-dependence, I think the real and imag parts should be in the [1] list entry as a tuple. That way, all of the time-dependence is in a single list item. We may in the future want to add additional items to the list (e.g. on-off times for the time-dependent terms.). I also think that we should get some feedback from @ajgpitch and @cgranade. Chris has some experience with opencl, and he probably is bette suited for feedback than myself. . Another question would be the issue of maintainability. If, for some reason, you are unable to address bug issues or incompatibilities with future QuTiP versions, then can we support this large code submission without having authored it ourselves. For instance, the mcsolve_f90 routine has largely been non-maintained since Arne added it years ago.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/554#issuecomment-259879928:81,depend,dependence,81,https://qutip.org,https://github.com/qutip/qutip/pull/554#issuecomment-259879928,4,"['depend', 'rout']","['dependence', 'dependent', 'routine']"
Integrability,An IPython notebook example should be provided for using this time-dependent option.; A test should also be added.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/396#issuecomment-155855645:67,depend,dependent,67,https://qutip.org,https://github.com/qutip/qutip/pull/396#issuecomment-155855645,1,['depend'],['dependent']
Integrability,"Another approach, if your system size is not too large, is to express your time-dependent operator a time-dependent linear combination of the basis operators on the system's Hilbert space. For example if you were looking at a qubit, you would write `expm(f(t)) = sum a_i(t) * sigma_i`. Then you can pass vectorized coefficients in the form `[[a_i_list,sigma_i],...]`. This should be much faster. It's ideal if you can do this analytically, but it would be sufficient to pre-compute the collapse operator at each timestep (which will be expensive for large systems) and then project them onto your operator basis. The relaxation generators are usually Hermitian, so you can find the projections onto the Pauli basis by examining the matrix elements, rather than computing lots of inner products.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1398#issuecomment-1681460936:80,depend,dependent,80,https://qutip.org,https://github.com/qutip/qutip/issues/1398#issuecomment-1681460936,2,['depend'],['dependent']
Integrability,"Any update on the failing tests, @araza6?; This is the print message from CI build:; ```; ==================================== ERRORS ====================================; _____________ ERROR collecting tests/test_basis_transformation.py ______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/_pytest/python.py:513: in _importtestmodule; mod = self.fspath.pyimport(ensuresyspath=importmode); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:176: in <module>; from qutip.qobj import *; E File ""/home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/qobj.py"", line 2026; E """"""; E Checks whether qobj is a valid density matrix; E """"""; E ; E ; E ^; E IndentationError: expected an indented block; ___________________ ERROR collecting tests/test_brmesolve.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_brmesolve_td.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __I",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:61,message,message,61,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['message'],['message']
Integrability,"Apologies for another long delay. I'd be happy to hop on a video call sometime to discuss the design. I think the `__qutip_qobj__` interface is likely to remain fairly simple and be just:; ```python; def __qutip_qobj__(self, copy=True):; """""" Return a Qobj representation of this object. Parameters; ---------------; copy : {True, False}, default True; If True, a new independent Qobj should be returned. If False, a reference to an existing Qobj; may be returned. Returns; ----------; Qobj; The Qobj representation of this object.; """""" ; return qutip.Qobj(self._stuff, copy=copy); ```; and we can figure out how to make that work on our side. How that looks under the hood depends quite a bit on whether the `Data` object will grow `dims` support or not. We have another use case for `dims` on the data layer (a tensor network data backend that we're starting work on) but it is a bit of a philosophical shift in what the `Data` layer is, so we'll need to think carefully (e.g. all `Data` operations would have to keep track of `dims` which is a big change; and it's also a bit strange because the operations themselves are just 2D matrix operations, where dims are meaningless). @PhilipVinc I'm not sure if we discussed this before, but do you have some short code snippets showing how you see this Qobj support being used in user code? Apologies if I missed such examples elsewhere in the discussion already.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-951087841:131,interface,interface,131,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-951087841,2,"['depend', 'interface']","['depends', 'interface']"
Integrability,"Apply your squeeze operator to a state vector and check the norm of the; output. Is the operator really unitary?. -P. On Mar 13, 2017 11:48 AM, ""ziofil"" <notifications@github.com> wrote:. > When I tried to use the qutip.squeeze function for my simulations I; > noticed that something was off. Upon further investigation I found out that; > the output is not a truncated version of the single-mode squeezing unitary,; > but rather the matrix exponential of the truncated generator. These are; > *very* different things!; >; > Am I right in assuming that the most useful matrix would be the truncated; > unitary? If that's the case, the current method to compute it is wrong. To; > compute the right matrix one can use the disentangling formula for SU(1,1); > (formula (31) here <http://aip.scitation.org/doi/pdf/10.1063/1.3413923>):; >; > def squeeze(n,z):; > s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); > s1 = -2*np.log(np.cosh(abs(z))); > s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); >; > L = s0*0.5*(qt.create(n)*qt.create(n)); > K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); > R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); >; > return (L.expm())*(K.expm())*(R.expm()); >; > As you can see, this definition does *not* depend on the truncation; > parameter. Specifically, the upper-left portion of the matrix that; > qutip.squeeze outputs converges to my squeeze function for large n.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/661>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ABMPqdPPw6WOAYMpYw_kA9pRxVhgVyxIks5rlYF9gaJpZM4MbmLX>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286216795:1217,depend,depend,1217,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286216795,1,['depend'],['depend']
Integrability,"As I mentioned in #853, I wonder if it's possible to completely encapsulate any use of sparse matrices to allow for different implementations, assuming a common interface. This would support both int32 and int64, as well as any other specialized implementation anyone might want to use. Obviously, this falls into the ""quite a bit of work"" category, assuming it's possible at all. Personally, I also want to clarify that in #853, I wasn't thinking clearly when I titled it ""moderately big tensor products"" (obviously, it was an insanely large product). I don't actually foresee needing anything bigger than int32. Is there a CPU-time penalty for switching to int64? If so, I would consider that more of a downside than an increase in memory usage.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-382528173:161,interface,interface,161,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-382528173,1,['interface'],['interface']
Integrability,"As a comparison, here's the output of `matrix_histogram` from [the example in the _current_ build of the docs](https://qutip.org/docs/latest/guide/guide-visualization.html#visualizing-operators) (QuTiP 4.6.2):. ![QuTiP 4.6.2 guide-visualization-8](https://user-images.githubusercontent.com/5968590/122970595-06e9dc00-d386-11eb-9905-ad65f9254c0a.png). compared to the version produced by this PR:. ![this PR guide-visualization-8](https://user-images.githubusercontent.com/5968590/122970672-19641580-d386-11eb-973b-39423e53637c.png). The original certainly isn't great, but I think its defaults have produced a somewhat better result in this case. It might be worth having a look at some of the defaults here, particularly with regards to the z-axis tic labelling. While we're at it, the rainbow colour scheme is not a good choice - it'd be much better to use a diverging colourmap, and preferably something a bit more perceptually uniform. ---. I'm not completely sold on the idea that our functions should take so many different optional arguments. We return the figure and axes instances, which means anything the user can do anything that's basic matplotlib commands - we don't need to reimplement their interface. Things like the figure size, azimuth and elevation are particular examples of this - it's very simple to set them using matplotlib's interface, and we don't really provide any added benefit by having the options here. Another is the truncated colourbars: why not only accept a `cmap` argument, and allow the user to pass anything that `matplotlib.pyplot.plot` would accept? Then the interface to our function is much simplified, and the user has as much (more, even) control over the colouring.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1573#issuecomment-866187912:1207,interface,interface,1207,https://qutip.org,https://github.com/qutip/qutip/pull/1573#issuecomment-866187912,3,['interface'],['interface']
Integrability,"As mentioned previous I have patched out the cython check and installs in **init** in the (windows, qutip-3.1.0) conda package that I built. I have put cython as a build requirement, but not a runtime requirement. I install in an environment without cython and then run tests:; 289 tests in 690s; 7 skip, 6 errors, 1 fail. Then I install cython and mingwpy and run tests again:; 320 tests 2371s; 7 skip, 10 errors, 1 fail. I think the time dependent string format tests fail. Not sure, and will not investigate further at the moment. Would only make if they also fail in GitHub version, for which I have not tested on Windows. At no point do the extensions in qutip/cy get built again. So I think it is not necessary to pyximport.install in the **init**.py; I think we should change the message to a warning, like we have for matplotlib, to say something like 'no Cython, string type time-dependent solvers will not run'. It seems to make sense to allow people to install and use parts of the library even if they can't get a C compiler working for them. I don't understand why some tests do not run without cython. For instance, no mcsolve tests run without cython installed. I can't see cython imported in the mcsolve file. I will look into this further.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/448#issuecomment-192570921:440,depend,dependent,440,https://qutip.org,https://github.com/qutip/qutip/issues/448#issuecomment-192570921,3,"['depend', 'message']","['dependent', 'message']"
Integrability,"Assuming Simon's point isn't just a complete answer to your question: in the general case, this is an impossible question to answer - it touches on many parts of numerical integration, such as tolerance limits and adaptive step-size methods. When you're dealing with completely arbitrary time-dependence, there's not really any one-size-fits-all approach that'll work (despite how RK45 is often taught as a magic bullet in physics courses). Here, you will likely find that your RK45 results depend strongly on how many intermediate timesteps you use, whereas QuTiP's results will be (marginally) more stable. This is because QuTiP will internally subdivide the timesteps more to achieve internal precision goals, but then only returns the results at the time points you ask for. You can increase the maximum number of allowed subdivisions by increasing the `nsteps` parameter in a `qutip.Options` object, and with the `options` keyword argument.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986661136:172,integrat,integration,172,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986661136,3,"['depend', 'integrat']","['depend', 'dependence', 'integration']"
Integrability,"Assuming you have Anaconda 2.5 installed (so that you can use the Intel MKL on all platforms), the default number of threads is one. Therefore, you don't get much benefit. To change the number of threads used you can do:. ``` python; import mkl; mkl.set_num_threads(N); ```. or in QuTiP it is easy to set using:. ``` python; n_threads = hardware_info()['cpus']; mkl.set_num_threads(n_threads); ```. One can not access the spare MKL routines directly as there is no support in the scipy.sparse library. However, you can get to all of the functions using ctypes. An example of complex SpMV is here:. https://gist.github.com/nonhermitian/74c3ddbbd006b2f8d306. The only issue with the attached method, is that finding the MKL runtime library is platform dependent (maybe should file an issue with the Anaconda people?). Therefore, it is a bit cumbersome to work with. Moreover, it is not possible to access these routines via Cython as they do not have any of the development stuff available. That may not really be an issue at the end of the day though as one needs quite a large system to get any benefit, and at large Hilbert dimensions, the overhead from calling Python funcs. directly is not an issue. I will be chatting with the [Intel Python](https://software.intel.com/en-us/python-distribution) people tomorrow to give them some suggestions and talk about our project. Hopefully we can hash out some plan to make our life a bit easier, and take advantage of the MKL tools. Their parallel direct sparse solver may also be of interest.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/438#issuecomment-186864518:432,rout,routines,432,https://qutip.org,https://github.com/qutip/qutip/issues/438#issuecomment-186864518,3,"['depend', 'rout']","['dependent', 'routines']"
Integrability,Bleh -- build error: `ERROR: Some build dependencies for file:///project conflict with the backend dependencies: numpy==1.13.3 is incompatible with numpy>=1.16.6.`; Probably I need to loosen the build dependencies in setup_requires.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1735#issuecomment-990081489:40,depend,dependencies,40,https://qutip.org,https://github.com/qutip/qutip/pull/1735#issuecomment-990081489,3,['depend'],['dependencies']
Integrability,"But again, we use runtime code generation for the time-dependent stuff. Cython is in every Python dist, so I see little in the way of having that as a requirement. Getting a compiler is also trivial on every supposed platform.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/580#issuecomment-271109100:55,depend,dependent,55,https://qutip.org,https://github.com/qutip/qutip/issues/580#issuecomment-271109100,1,['depend'],['dependent']
Integrability,"By the way, if you're organising your next major release right now, I wouldn't wait for us before you release it - we certainly won't define any interface until at least QuTiP 5.0, and we don't expect to even be in the first alpha until around September.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830021551:145,interface,interface,145,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830021551,1,['interface'],['interface']
Integrability,"Can you please say something about result.photocurrent? I can see it contains all the jumps from all the trajectories, but what is the meaning of the value associated with each jump? It believe it goes down when I increase the number of trajectories or timesteps, so I think it is perhaps dividing by those numbers? But I don't know what else it might depend on. Thanks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2539#issuecomment-2400213467:352,depend,depend,352,https://qutip.org,https://github.com/qutip/qutip/issues/2539#issuecomment-2400213467,1,['depend'],['depend']
Integrability,Closing this for now. Will get back with a new PR implementing a time-dependent implementation as well as general spectral densities for the HEOM method.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/793#issuecomment-384165413:70,depend,dependent,70,https://qutip.org,https://github.com/qutip/qutip/pull/793#issuecomment-384165413,1,['depend'],['dependent']
Integrability,"Coming soon! I did more digging and modified the sphinx_rtd_theme to add this warning message. ![screenshot 2019-02-27 17 11 28](https://user-images.githubusercontent.com/6968324/53504756-d003a400-3ab2-11e9-9578-87761dddfce2.png). @ajgpitch At this moment, do we rebuild the old docs or add this message manually to them? . Also, for the future docs, how are we going to make sure that everytime we make a new release, the old documentation gets this warning message? Maybe we make some release-documentation notes similar to the release notes, and add this as one of the steps. When you build new documentation, you also have to rebuild the older version and change the conf.py file to include the warning message. I poked around a bit and could change the sphinx_rtd_theme so that we can have something like . ```; version = 4.2; is_latest = False; ```. and the documentation inserts this message based on this value.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1516#issuecomment-468017470:86,message,message,86,https://qutip.org,https://github.com/qutip/qutip/issues/1516#issuecomment-468017470,5,['message'],['message']
Integrability,"Copying here the message of the failed build, as I cannot find the message of the successful one in the build history (since it refers to the same PR, it looks like it was not kept). . ```; QuTiP Version: 4.4.0.dev0+109c09d; Numpy Version: 1.16.2; Scipy Version: 1.2.1; Cython Version: 0.29.7; Matplotlib Version: None; Python Version: 3.7.3; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/travis/miniconda/envs/test-environment/lib/python3.7/site-packages/qutip-4.4.0.dev0+109c09d-py3.7-macosx-10.7-x86_64.egg/qutip; ```; from https://travis-ci.org/qutip/qutip/builds/521534881",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/961#issuecomment-484740433:17,message,message,17,https://qutip.org,https://github.com/qutip/qutip/pull/961#issuecomment-484740433,2,['message'],['message']
Integrability,"Could you comment on the difference between. ```; qt.tensor_contract(qt.to_super(qt.cnot()), (1, 3)) * s_prep; ```. and. ```; s_prep.dag() * qt.to_super(qt.cnot()) * s_prep; ```. ? These does not give the same results, and I'm not saying that they should, I just wonder about the physical interpretation doing a tensor contraction on a superoperator. Can it be thought of as a projection on the superoperator level, in analogy to projecting an operator using something like `P.dag() * O * P` ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/268#issuecomment-65368470:319,contract,contraction,319,https://qutip.org,https://github.com/qutip/qutip/pull/268#issuecomment-65368470,1,['contract'],['contraction']
Integrability,Could you please post the code snippet and the traceback of the error message ? Thank you.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/682#issuecomment-292698585:70,message,message,70,https://qutip.org,https://github.com/qutip/qutip/issues/682#issuecomment-292698585,1,['message'],['message']
Integrability,"Dear @Coxious, thanks for opening the issue. At the moment, I can see only a method to return the propagators for a given quantum circuit in [qutip.qip.circuit](https://github.com/qutip/qutip/blob/master/qutip/qip/circuit.py#L892). I am guessing that you would be interested in implementing something there to return the full time dependent Hamiltonian for the circuit and then use mesolve to simulate this Hamiltonian with some collapse operators?. If you have any prototype code, please do share and we can discuss more. @nwlambert and @ajgpitch are on board with this too and this seems very relevant.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-460813617:331,depend,dependent,331,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-460813617,1,['depend'],['dependent']
Integrability,"Dear @hodgestar and @AGaliciaMartinez , I have made the changes as Simon suggested -- modified the `add_arc` and `add_line` function to include `Qobj` inputs. By default, have set the arc to be solid blue and the line segment to be solid black, which the user can change as per their wish. Also, have removed the dependency of `add-arc` on `add_points`. Have also included `plot_arc` and have updated `plot_line`. ; Whenever you guys find time, please review the code. Below, I am attaching an image containing a variety of ways we can now change the appearance of arcs and lines. The code used is:. ```; b = Bloch( fig= None, figsize=[10,10]). ... b.add_line([x,y,z],[z,x,y],'m--') ; b.add_line([x,y,z],[y,z,x],'r') ; b.add_line([z,x,y],[y,z,x]). b.add_arc([0.5,0,0],[0,.5,0]); b.add_arc([1,0,0],[0,1,0],'r'); b.add_arc([0,0,1], [1,0,0],'g:'); b.add_arc([0,1,0],[0,0,1],'y--'). b.add_arc([x,y,z],[z,x,y]) ; b.add_arc([x,y,z],[y,z,x]) ; b.add_arc([z,x,y],[y,z,x]) ; ```; where `[x,y,z] = [1/np.sqrt(2), 1/np.sqrt(2), 0]`; ![qutip_bloch](https://user-images.githubusercontent.com/33507538/145733327-80f71c48-7401-4e06-a55e-9cd0378c66b4.png)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1690#issuecomment-991988829:313,depend,dependency,313,https://qutip.org,https://github.com/qutip/qutip/pull/1690#issuecomment-991988829,1,['depend'],['dependency']
Integrability,"Dear @spmvg, It could be interesting to look into implementing something along this line in QuTiP, even a small snippet. Or looking into possible integrations with [QuSpin](https://github.com/weinbe58/QuSpin) and [OpenFermion](https://github.com/quantumlib/OpenFermion), which implement fermionic commutation relations, although generally looking at other applications. If you develop on this, please feel free to get in touch. Cheers, Nathan",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/863#issuecomment-394585029:146,integrat,integrations,146,https://qutip.org,https://github.com/qutip/qutip/issues/863#issuecomment-394585029,1,['integrat'],['integrations']
Integrability,"Dear Alex, this can be reviwed by you. I implemented your single line; comments (I thought pep8 recommends wrapping top level functions with two; newlines but I understand that it's just for new classes). In addition, I; changed some bits and added some more tests to make the test coverage 92%. On Tue 6 Mar, 2018, 7:38 PM Alexander Pitchford, <notifications@github.com>; wrote:. > Are we ready for me to check this again?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/753#issuecomment-370738864>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AGpUBASWPWSKscWoJuJ4YyVn3xeC9jlrks5tbmcfgaJpZM4PgbIo>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-370741295:107,wrap,wrapping,107,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-370741295,1,['wrap'],['wrapping']
Integrability,"Dear Qutip admin,. Thank you for your fast reply. I tried the above method. However, it doesn't work. It gives me an error message saying that ""Time list does not match"". Here is one sample on how I applied it. import qutip; import numpy as np; options = qutip.Options(); options.nsteps = 100000; hamiltonian = qutip.sigmax(); args = {'omega':1000}; timelist = np.linspace(0, 1, 1000); omegatlist = np.cos(args['omega']*timelist); H = qutip.QobjEvo([qutip.sigmax(),[qutip.sigmax(),omegatlist]], tlist=1000); state = qutip.basis(2, 0).proj(); times = np.linspace(0, 1, 2); qutip.mesolve(H,state,times,[],qutip.sigmax(),args=args,options=options). Although in the above, I used an analytic function for my Hamiltonian, actually my real Hamiltonian is a time-dependent non-analytic function which has to be represented by an array. Your comment on how to solve the problem associated with the above code will be much appreciated.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-808615925:123,message,message,123,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-808615925,2,"['depend', 'message']","['dependent', 'message']"
Integrability,"Dear Qutip admin,. Thank you for your fast reply. Unfortunately, my hamiltonian is a time-dependent function which is nonanalytic. So I need to use a large number of tgrid (on the order of 1000000 grid size) for my hamiltonian. Is there a way that you can add a feature to mesolve so that it can store only the final_state without storing the states at all time even for the case where my tlist has a large grid size. Or is there a way for mesolve to evaluate the expectation operator at the final time only without having to evaluate it at all time?. Your help will be well appreciated.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-808459933:90,depend,dependent,90,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-808459933,1,['depend'],['dependent']
Integrability,"Dear all,. I'm trying to install the latest release of QuTip on Ubuntu system. Since; our workstation hasn't been connected to internet, I; downloaded Anaconda3-2019.03-Linux-x86_64 and qutip-4.3.1.tar, and attempt; to install from source code. Firstly I successfully installed Anaconda with the command:; bash ~/Downloads/Anaconda3-2019.03-Linux-x86_64.sh. Then in the conda environment I typed the command:; python setup.py install. I get the following error message:. gcc -pthread -B /home/pz/anaconda3/compiler_compat -Wl,--sysroot=/; -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -Iqutip/cy; -I/home/pz/anaconda3/lib/python3.7/site-packages/numpy/core/include; -I/home/pz/anaconda3/lib/python3.7/site-packages/numpy/core/include; -I/home/pz/anaconda3/include/python3.7m -c qutip/cy/spmatfuncs.cpp -o; build/temp.linux-x86_64-3.7/qutip/cy/spmatfuncs.o -w -O3 -march=native; -funroll-loops; gcc: error trying to exec 'cc1plus': execvp: No such file or directory; error: command 'gcc' failed with exit status 1. It seems the gcc compiler isn't correctly located? Or what else problem. I checked the gcc version on the workstation:; gcc --version; gcc (Ubuntu 8.3.0-6ubuntu1~18.10) 8.3.0; Copyright (C) 2018 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. whereis gcc; gcc: /usr/bin/gcc /usr/lib/gcc /usr/share/man/man1/gcc.1.gz. How can I direct the installer to find the gcc compiler?. Thanks!; Best regards, Pu Zhang; --; Faculty at School of Physics, Huazhong University of Science and Technology; Room 819 (N.), Yifu Science and Technology Building; 1037 Luoyu Road, Wuhan, China; E-mail: puzhang0702@hust.edu.cn <puzha@fotonik.dtu.dk>; Homepage: www.researchgate.net/profile/Pu_Zhang4; Phone: +86 18871860394",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-501605757:461,message,message,461,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-501605757,1,['message'],['message']
Integrability,"Deleting the pycache and running nosetests gives the following warning messages; ```; /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjCte size changed, may indicate binary incompatibility. Expected 344 from C header, got 352 from PyObject; return f(*args, **kwds); /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjEvoTd size changed, may indicate binary incompatibility. Expected 560 from C header, got 568 from PyObject; return f(*args, **kwds); /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjEvoTdMatched size changed, may indicate binary incompatibility. Expected 1344 from C header, got 1352 from PyObject; return f(*args, **kwds); /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo_factor.CoeffFunc size changed, may indicate binary incompatibility. Expected 32 from C header, got 40 from PyObject; return f(*args, **kwds); /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo_factor.StrCoeff size changed, may indicate binary incompatibility. Expected 40 from C header, got 488 from PyObject; return f(*args, **kwds); /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjEvo size changed, may indicate binary incompatibility. Expected 288 from C header, got 296 from PyObject; return f(*args, **kwds); /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjCteDense size changed, may indicate binary incompatibility. Expected 496 from C header, got 504 from PyObject; return f(*args, **kwds); /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-496378866:71,message,messages,71,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-496378866,1,['message'],['messages']
Integrability,"Dicke class does not support list based time-dependent Hamiltonian.; But if the Hamiltonian is a `QobjEvo`, it should work: `qutip.piqs.Dicke(N, hamiltonian=qutip.QobjEvo(H_td), emission=...)`; Otherwise you can use the Dicke class to compute the dissipation part and use `mesolve`:; ```; dicke = qutip.piqs.Dicke(N, hamiltonian=None, emission=...); qutip.mesolve(H_td, ..., c_ops =dicke.liouvillian()); ```; For more help, please use the google groupe: https://groups.google.com/g/qutip.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1928#issuecomment-1153908260:45,depend,dependent,45,https://qutip.org,https://github.com/qutip/qutip/issues/1928#issuecomment-1153908260,1,['depend'],['dependent']
Integrability,"Directly in VS code. My launch.json looks like; ```json; 	""version"": ""0.2.0"",; 	""configurations"": [; 		{; 			""name"": ""Python: Current File"",; 			""type"": ""python"",; 			""request"": ""launch"",; 			""program"": ""${file}"",; 			""console"": ""integratedTerminal""; 		}; 	]; }; ```; When using the plt.show() command, the second window only appears after a b.render() command, but thats also necessary for any vectors I want to draw to appear.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1616#issuecomment-883458011:230,integrat,integratedTerminal,230,https://qutip.org,https://github.com/qutip/qutip/issues/1616#issuecomment-883458011,1,['integrat'],['integratedTerminal']
Integrability,Documentation builds looks good. Thank you @dependabot. *botsnack*,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767#issuecomment-1016299366:44,depend,dependabot,44,https://qutip.org,https://github.com/qutip/qutip/pull/1767#issuecomment-1016299366,1,['depend'],['dependabot']
Integrability,"Every routine that uses multiple processes has a kwarg to change the number and if this is not set then it falls back on qutip.settings.num_cpus which is set in **init**.py. On May 2, 2014, at 1:04 PM, Robert Johansson notifications@github.com wrote:. > You can use it to select number of processes to use, right? I think it is useful if you don't want to use all processors for a calculation, although I usually use the .qutiprc configuration file for this rather than environment variables. I guess it is not really necessary but could be useful I guess.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/119#issuecomment-41985338:6,rout,routine,6,https://qutip.org,https://github.com/qutip/qutip/issues/119#issuecomment-41985338,1,['rout'],['routine']
Integrability,"Except for setting the type of the `Qobj` (which is deleted at the end of `Qobj.__init__`), there's no need for the 'mc' or 'mc-dm' fast-paths to exist in `Qobj.__init__` at all, even in `master`. If we were to fix the handling of a passed `type` - nothing else is overwritten if passed explicitly - you could achieve all the same effects at approximately the same speed with correct application of the kwargs, such as; ```python; Qobj(data, dims=dims, copy=False, type='oper', isherm=...); ```; providing `data` is actually of a valid (`fast_csr_matrix`) format. Technically the `Qobj.data` attribute will be a new object that wraps the same numpy arrays as was passed, rather than the same `fast_csr_matrix`. In various forms, `expect` already does check the Hermicity, that's why `mc-dm` is careful to set it to avoid recalculating it. The expect functions in `qutip.expect` do this directly, and aren't aware of column-stacked density matrices - they'll just raise a TypeError. `mesolve` and `mcsolve` now bypass the `Qobj` stage and go direct to Cython - in 5.0 it might not be a terrible idea to route everything back through the `Qobj` form, since the performance issues there are solved (a column-stacked dense matrix can be directly wrapped by an f-ordered `Dense` type), and it's the natural central point of the code (and those parts are called from Python-space anyway, so no C concerns). Here though, the problem is actually that the expectation generator in `mesolve` correctly calculates the dtype of the output expectation array using both the state and the expectation operator, but then it does it incorrectly in the loop, and passes the hermicity down to Cython using only the expectation operator, which promptly throws out the complex part. So setting `fast='mc-dm'` in `Qobj` is a symptom of the same root cause as the problem here, rather than the cause itself. At the start of `mesolve` we don't assume that the state is Hermitian, but then inside the integration loop we do. W",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1460#issuecomment-796835048:628,wrap,wraps,628,https://qutip.org,https://github.com/qutip/qutip/issues/1460#issuecomment-796835048,1,['wrap'],['wraps']
Integrability,Failure in doc builds was `ipython 8.10.0 depends on prompt-toolkit<3.1.0 and >=3.0.30` so we likely just need to bump the version of prompt-toolkit.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085#issuecomment-1426687909:42,depend,depends,42,https://qutip.org,https://github.com/qutip/qutip/pull/2085#issuecomment-1426687909,1,['depend'],['depends']
Integrability,"First of all I'm glad you could get it to run under OSX. Which OpenCL environment are you using?; - Is the failure of `test_mcsolve_cl_time_dep_h` reproducible?; - You can probably ignore the compiler warning. I assume it is related to the pragma statement. Some OpenCL implementations refuse to work without it, others give you a warning that it is unnecessary. Maybe we can omit the statement based on the platform version and hide some warning, but that would require more testing (on different platforms). At the moment there is a lot of debug information to ease testing.; - The AttributeError you get is something I have not encountered yet. If you do consider merging this branch, it is a good idea to get more people involved in testing. The code has not been reviewed and probably contains some bugs. The questions you raised concerning the maintainability are all valid. On top of that setting up OpenCL is somewhat troublesome, which makes `mcsolve_cl` a kind of experimental feature. Ultimately it is up to the maintainers of qutip to decide whether such a feature should be included. The advantage `mcsolve_cl` has over `mcsolve_f90` is that it supports some time-dependence and introduces no build dependencies. If, for some reason `mcsolve_cl` does not work, the user can always fall back to `mcsolve`. By the way, is it wise to rebase this branch all the time or only when necessary?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/554#issuecomment-260134503:1177,depend,dependence,1177,https://qutip.org,https://github.com/qutip/qutip/pull/554#issuecomment-260134503,2,['depend'],"['dependence', 'dependencies']"
Integrability,"Firstly, just to underline @jakelishman comment. We *cannot* change the public interface unless we make a new major release. I also don't like the `.N` property, but it snuck in before my time. We could look to change this in v.5, but not before. . It seems this PR does contain some enhancements that are not part of #1209. However, @mlaguna10 did seem to make quite clear that they were already working on the issue. I believe #1209 is ready to merge, but we'll wait for @BoxiLi to confirm. . So what I suggest is that we merge #1209. @MartinSandeCosta can then merge the master into this PR and see what is left that adds to enhancement request outlined #1208. Assuming (with good reason) that there are valuable additions, then we will merge this too. Thanks everyone for contributing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1212#issuecomment-605881345:79,interface,interface,79,https://qutip.org,https://github.com/qutip/qutip/pull/1212#issuecomment-605881345,1,['interface'],['interface']
Integrability,"Fixed some causes of travis tests not succeeding. In particular e303b0e fixes use of `round` in the function `_td_wrap_array_str` in rhs_generate.py. This function uses `round` to get an integer number that is then passed as an array index. Since `round` returns a float, this causes the deprecation warning ""DeprecationWarning: using a non-integer number instead of an integer will result in an error in the future"". I therefore wrapped the call to `round` with a call to `int`. The travis tests now pass succesfully for this pull request.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404#issuecomment-162598230:430,wrap,wrapped,430,https://qutip.org,https://github.com/qutip/qutip/pull/404#issuecomment-162598230,1,['wrap'],['wrapped']
Integrability,"For 3 I meant to point that `c_ops` can be complex time-dependent systems by using 3 layers of list in its definition. We only test for list in this situation, but having the last layer as a tuple should work in `mesolve`. Tuple are not tested for nested time dependent system anywhere. If they give a different result, it's probably the wrong one.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2065#issuecomment-1410542360:56,depend,dependent,56,https://qutip.org,https://github.com/qutip/qutip/issues/2065#issuecomment-1410542360,2,['depend'],['dependent']
Integrability,"For clarity: I ran your code with 1,000 timesteps and 10,000 timesteps and found a linalg norm difference in the outputs of 4.4e-4 (compared to QuTiP's 6.5e-8), which is what I meant. I considered that difference ""not fully convergent"" in part because QuTiP's default tolerance goals have an absolute tolerance of ~1e-8 (that's per-element, not the full norm). Here's a couple more things to look at:; - if you're using QuTiP objects without our solvers like this, we tidy up sparse matrices at every operation. You probably don't want that - you might get different results if you convert your RK method to work on raw Numpy arrays.; - your RHS isn't accurate - it takes `sqrt(gamma)`, but your time-dependent function already does that. This is perhaps a mistake, and very likely the source of the discrepancy? Also, while it's irrelevant here, your Lindbladian has `c_op * c_op.dag() * rho` as the last term, but it should be `c_op.dag() * c_op * rho`.; - your RK method isn't using updated versions of the Hamiltonian or the collapse operator at the intermediate timesteps.; - you say you're using RK45, but you've only got 4 different evaluations? That looks like an RK4 method to me (not that it should matter).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986723762:701,depend,dependent,701,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986723762,1,['depend'],['dependent']
Integrability,"For jax, the issue is with `isherm`, not the casting. We cannot call it in jitted functions since they cannot branch depending on the input data. The casting itself cause issues with tensorflow. The `isherm_jax` could be set to always return `False`, but returning `False` only inside jitted function is too hacky and could break with jax release. When applied everywhere, it will have strange side effect such as `qeye(n) *2` is hermitian but `qeye(n)+qeye(n)` is not. Don't want that. If the `Qobj` are always the inputs of the function, then we could probably compute the hermiticity in `qobj_tree_flatten`, but it would not be any help when the object is build inside the function. I am somewhat at a lost of idea other than that... I see a helper function like `qutip_jax.set_as_default()` that would set all the settings for the user for the session in one go. Not have them manually updated.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2329#issuecomment-1953261235:117,depend,depending,117,https://qutip.org,https://github.com/qutip/qutip/pull/2329#issuecomment-1953261235,1,['depend'],['depending']
Integrability,"For large matrices (`dim > ~500`), the dense matrix dot product is still a pretty large cost, but you're still saving a fair amount. That said, at that kind of dimension, the analytical formula may do you well enough. If you want derivatives wrt alpha, you should be able to get analytic ones from my method - there's no ""black box"" numerical work that goes on in `__call__`, everything is just matrix multiplication. Given that it appears non-linearly in a possibly large multiplication, though, and I would imagine the derivatives are pretty smooth, you may well just be faster just numerically approximating it with finite differences (I don't know anything about autodifferentiation). If you're so inclined, you can sacrifice some speed for higher accuracy in the eigenvector calculations, as we can find the eigenvalues semi-analytically. There are a few places in numpy and scipy that can find the roots of the Hermite polynomials for you (i.e. get the eigenvalues), which will be found exactly wrt double precision (I believe). You can then call out to the LAPACK routine `dstein` to get the eigenvectors from the eigenvalues. `dstein` is slower than `dstemr`/`dsteqr` (which is what scipy uses, I think), but it allows us to supply the eigenvalues, removing some numerical error. I didn't test that very thoroughly though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646100632:1071,rout,routine,1071,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646100632,1,['rout'],['routine']
Integrability,"For point 2: adding marks right now will cause conflicts, but if #1181 gets merged then it'll be much simpler. The main issue is that a lot of the testing structure has changed for tests up to `test_mcsolve.py` alphabetically, and so in general the tests are just not the same. The principle is pretty straightforwards - just like #1181 introduces a `requires_cython` mark, we would add `uses_cython`, `uses_mkl` and `uses_openmp` marks. These would be even simpler to add than `requires_cython` because unlike it, they don't require any test-generation logic at all. The change would simply be to add them to `pytest.ini`, mark the requisite functions and then change the pytest invocation of the specialised test to `pytest -m ""uses_cython""` or whatever. As far as I'm aware, the only parts of their codebase which modify their behaviour based on whether `Cython` is available is `QobjEvo`. The other parts (like `brmesolve`) just don't work if Cython isn't there. The MKL tests would become very short; by my reckoning, MKL is only used by `steadystate` and `countstat`. OpenMP is much more pervasive, as `sesolve`, `mesolve` and `brmesolve` all use it, and parts which depend on those are generally the slowest tests. The short tests could just become `pytest -m ""not slow""`? That's not super speedy, but it takes about half the time, maybe. If you want more, then a good starting point is `pytest --durations=0` which will tell us which tests are the slowest (perhaps that was what you already did when marking the slow ones?).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776:1173,depend,depend,1173,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776,1,['depend'],['depend']
Integrability,"For v5, to use time dependent `c_ops`, you would need to make the `QobjEvo` first:; ```; c_ops = [QobjEvo(op, tlist=t) for op in c_ops]; ```; and pass `tlist=t` to the propagator function. `H` taking list format but `c_ops` only prebuild `QobjEvo` is bad design. We will fix. But for the spline times, I believe it's better to keep it independent on the output times. It is useful be able to have different times for the output and input pulse sampling. So I improve the documentation for that issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2532#issuecomment-2400426686:20,depend,dependent,20,https://qutip.org,https://github.com/qutip/qutip/issues/2532#issuecomment-2400426686,1,['depend'],['dependent']
Integrability,"Formally you need to check U*U.dag and U.dag*U. There is a more optimal way of doing this by slighly modifying the zcsr_mult routine, but may not be worth the effort.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817#issuecomment-364167424:125,rout,routine,125,https://qutip.org,https://github.com/qutip/qutip/pull/817#issuecomment-364167424,1,['rout'],['routine']
Integrability,"Further notes: in numpy 1.20 defining `__array__` breaks `np.asarray`, except in the case where the user explicitly defines `np.asarray([qutip.qeye(2)], dtype=object)`. This is actually a very very common function in numpy operations; things like `np.shape` or `np.all` implicitly call `np.asarray` _without_ a `dtype`, which will result in a `TypeError`:; ```python; >>> import qutip; >>> import numpy as np; >>> np.all([qutip.qeye(2)]); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""<__array_function__ internals>"", line 5, in all; File ""/Users/jake/.anaconda3/anaconda3/envs/qutip-dev/lib/python3.9/site-packages/numpy/core/fromnumeric.py"", line 2411, in all; return _wrapreduction(a, np.logical_and, 'all', axis, None, out, keepdims=keepdims); File ""/Users/jake/.anaconda3/anaconda3/envs/qutip-dev/lib/python3.9/site-packages/numpy/core/fromnumeric.py"", line 87, in _wrapreduction; return ufunc.reduce(obj, axis, dtype, out, **passkwargs); TypeError: must be real number, not Qobj; ```. I think we may be able to get around this with a suitable definition of `Qobj.__array_function__`, though I am a little worried that we'll keep turning up these knock-on effects of `Qobj.__array__`. One major problem is that I'm not sure how we'll define `__array_function__` to satisfy this case, without having to manually disable every single numpy function. We can't have `np.asarray()` not work on `Qobj` because that would break parity with `np.array(qobj)`, however we also can't implicitly convert ourselves to an array if we're in a nested sequence, because then `np.all([qobj])` will pretty much always be false; it will have implicitly become an element-wise operation, even though the user _probably_ meant to check if every object in the array was not the zero operator. This isn't just `np.all`, it's also `np.shape`, `np.any`, and several more that make up the non-ufunc interface of numpy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-778512258:1910,interface,interface,1910,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-778512258,1,['interface'],['interface']
Integrability,"General comment about plotting on the Bloch sphere:. QuTiP currently supports drawing either ""points"" or ""vectors"" (i.e. arrows). Both are specified as `(x, y, z)` coordinates and these are *not* required to lie on the surface of the sphere. Lying outside the sphere is perhaps a bit odd, but lying inside the sphere is a common occurrence -- e.g. when plotting sub-components of a density matrix. There is a method `add_states` that converts states into `(x, y, z)` coordinates and adds them as either points or vectors as requested. I would thus recommend being able to specify lines and arcs using either `(x, y, z)` coordinates or states and not introducing spherical coordinates right now. I'm not against duplicating some of the functionality of `add_points(..., meth=""l"")` in the new functions we add here. For one, the `meth=""l""` is not particular intuitive when looking for a function to draw lines, and, secondly, it doesn't provide particularly flexible styling. My vote is to keep the old method interfaces fairly consistent with how they are now so as not to disrupt existing uses (adding some new optional parameters or tweaking things to look better is fine), and to add a couple of new methods. Let's try not to make the internals of `Bloch` more messy though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1685#issuecomment-934332552:1008,interface,interfaces,1008,https://qutip.org,https://github.com/qutip/qutip/pull/1685#issuecomment-934332552,1,['interface'],['interfaces']
Integrability,Going to merge this now so that I can start to embed it into the time-dependent stuff.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/517#issuecomment-242631394:70,depend,dependent,70,https://qutip.org,https://github.com/qutip/qutip/pull/517#issuecomment-242631394,1,['depend'],['dependent']
Integrability,"Good points. I suggest to simply remove the comment in `test_qobj`, and change to pytest in the `setup.py`. Something like what's [here](https://doc.pytest.org/en/3.0.4/goodpractices.html#integrating-with-setuptools-python-setup-py-test-pytest-runner) should work (basically changing `nose` with `pytest`). It seems however that testing it's a thorny [issue](https://github.com/pypa/setuptools/issues/1684), but these changes for the time being make the whole package at least consistent.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587:188,integrat,integrating-with-setuptools-python-setup-py-test-pytest-runner,188,https://qutip.org,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587,1,['integrat'],['integrating-with-setuptools-python-setup-py-test-pytest-runner']
Integrability,"Good to hear that it is working. There are classical nonlinear systems where the state can reach different limit cycles depending on the initial state. I have not investigated any of these in the quantum regime, and I not think that limit cycles would satisfy the steady state formula. So, in short, I have not seen or heard of multiple steady states.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/556#issuecomment-259241227:120,depend,depending,120,https://qutip.org,https://github.com/qutip/qutip/issues/556#issuecomment-259241227,1,['depend'],['depending']
Integrability,"Hahaha, thanks! One of the earlier things I did on Qiskit was to get the docs building with current Sphinx (4, at the time) too - we had found a couple of bugs in extensions that I then patched, and we needed to be on latest Sphinx to use them. You'll be ahead of us if you're up to Sphinx 6 - we still have a UI toolkit dependency that limits us (unnecessarily) to Sphinx 5 right now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2149#issuecomment-1494605382:321,depend,dependency,321,https://qutip.org,https://github.com/qutip/qutip/pull/2149#issuecomment-1494605382,1,['depend'],['dependency']
Integrability,"Half related to this, what do you think about having data-layer's data _mostly_ immutable? We could ignore the tracking of copies of the states, which are sometime done by the integrator or solver (normalization in `Solver._restore_state` ?). There are some gains to work in-place: stochastic evolution is 30% faster inplace. But I see ways around it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1141474154:176,integrat,integrator,176,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1141474154,1,['integrat'],['integrator']
Integrability,"Having `Qobj * matrix` work at the moment is to make it easier to transition to the 5.x branch when it releases, since it's the current behaviour of 4.x. Once we've had a bit of time for people to make the transition, I think we should be completely removing this ""functionality"". To me, matrices aren't quantum objects; if you're working with a Numpy array, you should expect Numpy semantics to occur, i.e. Numpy should see `Qobj` as a scalar type, and broadcast against it like that. It's an implementation detail that the backing data is a matrix; the linear algebra theory certainly doesn't demand it. Raising-and-catching is slower than just having the `mul` functions return `NotImplemented`. The only implementations that would need a wrapper are our Cython-based ones, and they can both be wrapped in something like; ```python; class only_allow_numeric:; def __init__(self, inner):; self.inner = inner; def __call__(self, other):; if not isinstance(other, numbers.Number):; return NotImplemented; return self.inner(complex(other)); ; mul.add_specialisations([; (CSR, CSR, only_allow_numeric(mul_csr)),; (Dense, Dense, only_allow_numeric(mul_dense)),; ]); ```. I'm generally fine with `Variable * Qobj` only working sometimes; I think the general intent is that you'd configure the dispatchers to only allow TensorFlow data output, so it would always work for you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1611#issuecomment-880850027:742,wrap,wrapper,742,https://qutip.org,https://github.com/qutip/qutip/pull/1611#issuecomment-880850027,2,['wrap'],"['wrapped', 'wrapper']"
Integrability,"Having any callable as a time-dependent components is good but the way here breaks the tests.; Moving the callable check after the check for `Cublic_Spline`, should fix the problem. `Cublic_Spline` is callable but not treated as a function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1107#issuecomment-543197728:30,depend,dependent,30,https://qutip.org,https://github.com/qutip/qutip/pull/1107#issuecomment-543197728,1,['depend'],['dependent']
Integrability,"Hello Harsh,. Thank for your interest in qutip. The most efficient way for us to interact with code is through Github.; Please attempt a draft PR for this. There are many test functions in our; project that you can use as a template. Assuming that you are interested in GSoC, when assessing candidates, an; ability to work independently is a key criteria. All the best with it, we look forward to reviewing your PR. Alex. On Tue, 21 Mar 2023, 18:06 Harsh Khilawala, ***@***.***>; wrote:. > @Ericgig <https://github.com/Ericgig> Thanks for getting back to me. I; > will refer to pytest tutorials on web but I found some code lines like; > following:; >; > @pytest.mark.parametrize; > @check_pngs_equal; > @pytest.fixture; > @pytest.mark.repeat(10)...; >; > Can you please let me know when and why were these used? Is there a; > resource also for this one?; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/2127#issuecomment-1478364599>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACGFP3MUPPBWDTOQGGBNOTLW5HU2ZANCNFSM6AAAAAAV7J6OKU>; > .; > You are receiving this because you are subscribed to this thread.Message; > ID: ***@***.***>; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127#issuecomment-1478682804:1182,Message,Message,1182,https://qutip.org,https://github.com/qutip/qutip/pull/2127#issuecomment-1478682804,1,['Message'],['Message']
Integrability,"Here is [sesolve](https://github.com/Ericgig/qutip/blob/solver.integrator/qutip/solver/sesolve.py) using it. And here is the [base solver](https://github.com/Ericgig/qutip/blob/solver.integrator/qutip/solver/solver_base.py).; I planned to do the dimension check in the solver. So `Sesolve.step(t)` and will call will `Integrator.integrate` and build the `Qobj`.; Likewise `SeSolver.run` call `Integrator.run`, there the `Result` object create the `Qobj`. I want the solver to copy the state only if it stores it, not if it only compute the expectation values. ; All the physics, which I consider the dims check to be part of, is done at the `Solver` level. We also don't have a no dims `QobjEvo`. . I made the `Integrator` to focus more on the ODE mathematics, but the creation of `Qobj` is quite fast so I don't mind either ways for the input types, but the dims check will still be done at the `Solver` level, not `Integrator`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925137656:63,integrat,integrator,63,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925137656,7,"['Integrat', 'integrat']","['Integrator', 'integrate', 'integrator']"
Integrability,"Hey Eric,. I've been working on improving the underlying structure of FLiMESolve and; making it more efficient. I haven't done another review request yet because; I want to try to address as many things as I can at once. I've been delayed; heavily by a system I'm trying to solve for my paper about this solver, on; which Simon has offered to help such that I'll hopefully be moving forward; again soon. Additionally, there are some changes I want to make that I'm; not sure how to do which I'm going to try to address with Simon when we are; able to meet next. Most of those are in regards to structural things, e.g.; how to filter input ""args"" arguments to pull out the frequency of the; Hamiltonian in the same manner as other solvers in QuTiP are able to filter; arguments. I've been trying to avoid submitting review requests/questions; in the PR comments too much so as not to be a bother. I have definitely not; abandoned this PR, and plan on seeing it through fully, although I; apologize for my relative lack of communication the last few weeks. Thanks!. On Mon, Aug 21, 2023, 11:29 AM Eric Giguère ***@***.***>; wrote:. > @magnamancer <https://github.com/magnamancer> are you waiting for review,; > still working on the PR or abandoned it?; >; > There are still issues I raised here and in magnamancer#4; > <https://github.com/magnamancer/qutip/pull/4>, that you have not been; > addressed and I am waiting for them before the next round of review.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/2186#issuecomment-1686550860>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AV5WL5GN3R6GPKYKYNOWSGDXWN5GDANCNFSM6AAAAAAZWI6GRQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1686607935:1771,Message,Message,1771,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1686607935,1,['Message'],['Message']
Integrability,"Hi @Ericgig , could you be a little more specific about what reworking the kwargs treatment would entail? Also if you could emphasize more concretely what you're looking for in updates to the notebooks and docs, that would be great. I do have some other observations.; 1. I do not get the KeyError message if I run the same jupyter notebook locally with the same versions of code as specified by version_table( ). I get another error instead, which actually seems more reasonable to me (something along the lines of 'use_precond' wasn't found in the keys of the dict, which clearly indicates that there's something off with the optional args thing).; 2. Also using mech_dms = np.asarray(mech_dms) fails, I think because it sees a Qobj instead of a real number.; 3. The direct patch to the KeyError mentioned above, based on my understanding of the code, would simply be to nest the assignment to 'max_iter_refine' in the 'info' dictionary inside a condition that checks if the solver is 'scipy'?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1017#issuecomment-539805676:298,message,message,298,https://qutip.org,https://github.com/qutip/qutip/issues/1017#issuecomment-539805676,1,['message'],['message']
Integrability,"Hi @Ericgig, @jakelishman,. Thanks very much for the very helpful replies! I will try these suggestions in my application Eric!. Jake, when you say the following:; > Oh of course, I had `mcsolve` in mind as to why that couldn't be done (and in that case, my interpolation wouldn't work either because of the separation of the decay channels)... Is it that, this:; ```; def L(t, args):; H = H(t, ...); c_op = C(H, t, ...); return qutip.liouvillian(H, [c_op]). mcsolve(L, ..., c_ops=[]); ```. won't work due to `_funcrhs` treating `h_func` as a Hamiltonian always? If this is the only factor (as far as I can see), then I think I can further hack this to make callbacks work for me locally. I'm not yet sure if the numpy arrays method will work here but this is what I will strive for. Some details of my plans: I am doing dynamics simulations of quantum annealing processes. We use a certain number of qubits (between 4 and 8) biased and coupled in certain ways to produce examples of 'difficult' problems for adiabatic quantum computation, where the instantaneous energy gaps can have very small minima during evolution. The resulting ODEs appear to be 'stiff' and long evolution times are required to observe high probabilities of being in the ground state. The combination of these things appears to make solving for long evolution times very time consuming. I observed a massive speedup using `mcsolve` however. What I wish to do is include various decay channels, which in the physical systems we use, we understand to be in the 'weak coupling limit' defined by T. Albash here:; https://arxiv.org/pdf/1503.08767.pdf. Another note: A number of colleagues have found most useful the RK45 method implemented in what I understand to be 'new' ode solver scipy code `scipy.integrate.solve_ivp`. I notice that the 'dopri5' option for `scipy.integrate.ode` is likely the same thing. This is something I will play with also.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1260#issuecomment-630067552:1771,integrat,integrate,1771,https://qutip.org,https://github.com/qutip/qutip/issues/1260#issuecomment-630067552,2,['integrat'],['integrate']
Integrability,"Hi @Phenix00, I could reproduce the issue and this looks like an issue of pip messing up the dependencies in the requirements for QuTiP. The workaround is to install numpy, cython and scipy manually before running pip install qutip. Please let me know if this works. Also, I am assuming the complete error message that you got was something like the error message below. Thank you for bringing this to notice.; ```; (qtest) air:qtest shahnawaz$ pip install qutip; Collecting qutip; Downloading qutip-4.1.0.tar.gz (1.9MB); 100% |████████████████████████████████| 1.9MB 523kB/s; Complete output from command python setup.py egg_info:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/private/var/folders/yp/zkfwkv252nl6jtzqy2_tt88m0000gn/T/pip-build-7Mg7bn/qutip/setup.py"", line 54, in <module>; from Cython.Build import cythonize; ImportError: No module named Cython.Build. ----------------------------------------; Command ""python setup.py egg_info"" failed with error code 1 in /private/var/folders/yp/zkfwkv252nl6jtzqy2_tt88m0000gn/T/pip-build-7Mg7bn/qutip/; ```; @ajgpitch ; I am looking into why this is happening and how it can be resolved. Relevant issues - https://github.com/h5py/h5py/issues/535, https://github.com/bayespy/bayespy/issues/14, https://github.com/pypa/pip/issues/988",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/739#issuecomment-321727923:93,depend,dependencies,93,https://qutip.org,https://github.com/qutip/qutip/issues/739#issuecomment-321727923,3,"['depend', 'message']","['dependencies', 'message']"
Integrability,"Hi @VolodyaCO, thanks for reporting this!; I think the reason for `tlist` being overridden is because the result will be independent of `tlist` when the input is a steady-state. This can be seen in the following equations:; ![image](https://user-images.githubusercontent.com/57414022/121327018-5d313680-c913-11eb-9760-ca6004daca18.png); where rho is the initial state (`state0`) and H is the Hamiltonian of the system. I use the fact that rho is a steady-state to remove its temporal dependence. This derivation is simplified assuming unitary evolution (no collapse operators) but the same applies in the most general case where we include the collapse operators. This is my guess on why `tlist=[0]` is employed when using `state0=None`: the result does not depend on `tlist`. Hence, this is probably not a bug as the result should be mathematically correct. That being said, I would also expect the same output shape for the cases shown above unless explicitly mentioned in the docstring of the function. Thus, I think the way to go here is to document this behaviour in the docstring (as well as removing the t appearing in correlation_..._1t docstring) as any change in the output shape will break backwards compatibility. However, it may be worth considering whether this is the intended behaviour for QuTiP 5. I would suggest removing `state0=None` as possible input for simplicity in the maintenance and testing or at least I would make the example shown by @VolodyaCO to be consistent and have the same output. Let us see what the QuTiP admin team thinks :smile:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1566#issuecomment-857532355:484,depend,dependence,484,https://qutip.org,https://github.com/qutip/qutip/issues/1566#issuecomment-857532355,2,['depend'],"['depend', 'dependence']"
Integrability,"Hi @christian512, thanks for the help! I've increased `nsteps` for that particular simulation and the integration runs fine without any errors. One caveat is I have not checked the correctness of the result. . On the other hand, as soon as I tried `mesolve` on a simple Larmor precession problem, `mesolve` started either (1) throwing the typical ODE integration error or (2) integrating but producing a manifestly incorrect result (the final state is not on the Bloch sphere). The code I am using is ; ```; from qutip import * ; import numpy as np. sz = sigmaz(). init_ket = 2 ** (-1/2) * Qobj([[1], [1]]) # Bloch vector is unit x; init_dm = init_ket * init_ket.dag(). b_0 = 1; gam = 1; h_zeem = gam * b_0 * sz; h = [h_zeem]. larmor_freq = gam * b_0 ; period = 2 * np.pi / (larmor_freq); t = np.linspace(0, period / 2, 100). print(mesolve(h, init_dm, t, options=Options(nsteps=1e6)).states[-1]); ```. Which produces ; ```; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[ 0.5 +0.j -263.5988765-267.24047092j]; [ -2.1425229 +0.49907152j 0.5 +0.j ]]; ```; Edit: I have also tried playing around with `atol` and `rtol` without any success.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1896#issuecomment-1140305503:102,integrat,integration,102,https://qutip.org,https://github.com/qutip/qutip/issues/1896#issuecomment-1140305503,3,['integrat'],"['integrating', 'integration']"
Integrability,"Hi @dweigand, this looks interesting. It would you be nice to push this forward, adding some tests for this and integrating @Ericgig suggested changes. I am wondering whether there is a more intuitive (explicit) option than `qfunc_amat `. Something like a Boolean `precompute`?. Writing some documentation for this, in https://github.com/qutip/qutip-doc, would allow users to discover this option more easily at http://qutip.org/docs/latest/guide/guide-visualization.html#husimi-q-function, it's very nice you have some performance checks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-536368295:112,integrat,integrating,112,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-536368295,1,['integrat'],['integrating']
Integrability,"Hi @epelofske-LANL. This behaviour in QuTiP is intentional for the following reason: If the dims of the system are `[2, 2]` then it's unambiguous how the system should be partitioned into two parts because the dims specify what the two parts. If the dims are `[4]` then one could divide the system in multiple ways depending on how one considers the four basis vectors. If one knows that the four basis states are `00`, `01`, `10`, `11`, one can override the dims by writing `dm.dims = [[2, 2], [2, 2]]` or `qutip.Qobj(dm, dims=[[2, 2], [2, 2]])`. Hope this helps. I agree this could be made more intuitive. Perhaps `maximally_mixed_dm` should allow specifying `dims` too instead of just `N`. I'm closing this issue for now, but please feel free to continue the discussion in the comments.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2058#issuecomment-1384473486:315,depend,depending,315,https://qutip.org,https://github.com/qutip/qutip/issues/2058#issuecomment-1384473486,1,['depend'],['depending']
Integrability,"Hi @jakelishman you were right about the contraction, I changed the indexes as in http://qutip.org/docs/latest/guide/guide-tensor.html so that it represents a trace-like channel. On the other hand I find that mixed dimensions operator `[[m,n], [m,n ]]` appear in some of the tests that were already in place, I will try to write my thoughts on their meaning later. I am still going to refactor this a little bit more, and tell you when it is ready for review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-831049708:41,contract,contraction,41,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-831049708,1,['contract'],['contraction']
Integrability,"Hi @jakelishman, I like your implementation but this will sometimes return a Qobj and other times a class instance when you call `displace()`. I am not in favour of that just out of the principle that functions should be simple and do one thing only as you also point out. . I would say if we do not want to break the user-interface, we keep the same implementation as `displace()` returning a `Qobj` (even if internally it calls the faster private `_Displace` method). . Users who want to use the class anyway can dig in and find `_Displace`. The use case here for moving to classes is rather specific and related to optimisation/control. We want to compute this operator very fast with multiple values of `alpha`, independently, on multiple cores (this was why we needed the faster implementation to run a GPU optimisation routine). Of course for sigmax(), or sigmay() we do not have any parameters to optimise and it is overkill to make them into classes. I do not suggest that at all. . I understand the inclination to be `functional`. It is how QuTiP was written and is supposed to be used, mostly. But one of the arguments for classes is that for some solvers, or operations we needed to re-use information, eg. qutip.piqs or the heom solvers where we had to make classes anyways. . I would propose just having a private `_Displace` method which is called by `displace` but not changing the output to be conditioned on `alpha`. Later on, if we incline a bit more towards classes we can make `Displace` public. Any other thoughts and opinions? @qutip/core-workers",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646667559:323,interface,interface,323,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646667559,2,"['interface', 'rout']","['interface', 'routine']"
Integrability,"Hi @lzawbrito, I guess that choosing `nsteps=1e6` is a pretty big value and that it leads to problems in the ODE integration. However, again running on my system, I get a reasonable output even with these high `nsteps`: . ``` ; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0.5 +0.00000000e+00j 0.49999938-4.02511613e-06j]; [0.49999938+4.02511613e-06j 0.5 +0.00000000e+00j]]; ``` ; I guess that this is a problem with SciPy's integrator and your system. I don't have enough experience with QuTiP to give a more detailed analysis. Maybe someone else knows about this? @BoxiLi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1896#issuecomment-1140428420:113,integrat,integration,113,https://qutip.org,https://github.com/qutip/qutip/issues/1896#issuecomment-1140428420,2,['integrat'],"['integration', 'integrator']"
Integrability,"Hi @sarsid, if you are going to play with it. It would be very helpful if you could give some feedback ;) Like if the doc is clear or if the interface is reasonable, or if there are any bugs. Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1273#issuecomment-661857844:141,interface,interface,141,https://qutip.org,https://github.com/qutip/qutip/pull/1273#issuecomment-661857844,1,['interface'],['interface']
Integrability,"Hi @tehruhn.; The call to steadystate take different kwargs depending on whether scipy of mkl is solved. It make an error if you give it a keyword not belonging to the right solver. I believe it should be better to accept all keyword and ignore the unused one. If you want to rework it, I would suggest to set the most stable solver/method as a default. I heard the default method sometime fails (#1077). . 2. Since a few version back, when we added a `__array__` method to Qobj. We need to do `np.asarray(mech_dms, dtype=object)`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1017#issuecomment-540010694:60,depend,depending,60,https://qutip.org,https://github.com/qutip/qutip/issues/1017#issuecomment-540010694,1,['depend'],['depending']
Integrability,Hi @yurivict. Could you give more detail?; I can't reproduce the issue and the error messages are not enough to understand what is happening.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190#issuecomment-1622081465:85,message,messages,85,https://qutip.org,https://github.com/qutip/qutip/issues/2190#issuecomment-1622081465,1,['message'],['messages']
Integrability,"Hi Alex. Nice to see your PR!. It is looking very good indeed, but deeper integration with qutip's frameworks for representing of operators and its evolution solvers would be nice. I'll test it for a few days and code review with inline comments in the code. You can make changes and push commits to your repository, and they will be automatically added to PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/246#issuecomment-61043885:74,integrat,integration,74,https://qutip.org,https://github.com/qutip/qutip/pull/246#issuecomment-61043885,1,['integrat'],['integration']
Integrability,"Hi Arne. Thanks a lot for the bug report. I'll go through the code fix it so that the qutip_gui = NONE flag is handled consistently. In the long run I think we need to refactor the code a little bit, so that GUI dependent module aren't imported at all if qutip_gui = NONE, rather that having a lot of if-else statements scattered around, but for now I'll try to make a quick fix by adding more if statements.. Rob",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/24#issuecomment-18720853:212,depend,dependent,212,https://qutip.org,https://github.com/qutip/qutip/issues/24#issuecomment-18720853,1,['depend'],['dependent']
Integrability,"Hi Ben. Thanks a lot for your contribution. It's looking great!. A couple of small things:; - We try to make qutip python3 compatible, so please use python3 compatible print(...) function calls instead of print ... statements.; - Functions super_to_choi and choi_to_super seems to do the same thing, while the function names suggest complementary conversion. Is this intentional?; - I think it would be better if you move the test code from within the if **name** == '**main**' to a separate file in the examples directory, or even better as unit tests in qutip/tests/; - Avoid global import of qutip ""from qutip import *"" by only selectively importing the functions that you need (we try to do this internally in qutip to avoid circular module dependencies).; - Make relative import of qutip functions (for example from qutip.super_to_choi import super_to_choi). This is also required for python3 compatibility.; - Add an import of the main functions (for example subsystem_apply) to qutip/**init**.py ; - I would probably prefer the super_to_choi.py module be called something more general, like choi_decomposition,py (or something like that), which would reflect that it does not only contain the super_to_choi function but other related functions as well.; - Avoid printouts in choi_to_kraus function. If you want to enable debugging or diagnostic info, consider adding an optional function argument debug=False or verbose=False and print the vals and vecs variables only if the user explicitly asks for it. Otherwise, one could get an excessive amount of printouts if your code is used in a loop.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/22#issuecomment-18592742:745,depend,dependencies,745,https://qutip.org,https://github.com/qutip/qutip/pull/22#issuecomment-18592742,1,['depend'],['dependencies']
Integrability,"Hi Bilal,. The conda-forge qutip package should install without VS-15. Most of qutip; functions should still work. This was certainly the intention when we; worked on it. I can't remember now though how well we tested without VS-15,; as the main focus was getting it to work with VS-15. The string type time-dependence needs a C++ compiler, so those functions; won't work. This means a lot of tests will fail. So, give it a go and let us know how you get on. Alex. On 26 February 2018 at 04:07, Bilal Riaz <notifications@github.com> wrote:. > Thanks for suggesting Linux subsystem, but it is not good enough to run; > simulations, it is slower for even day to day file manipulations, so from; > your comment and documentation you shared I come to conclusion that there; > is no alternative of VS to run Qutip in windows 10.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/826#issuecomment-368384720>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7ZQXPfD6q0cVTq1mY17St18hseO5ks5tYi4agaJpZM4SSlE1>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/826#issuecomment-368824556:308,depend,dependence,308,https://qutip.org,https://github.com/qutip/qutip/issues/826#issuecomment-368824556,1,['depend'],['dependence']
Integrability,"Hi Filippo,. On Wed, Apr 28, 2021 at 6:03 PM Filippo Vicentini ***@***.***>; wrote:. > However, our foundations do not prevent us to work with time-dependent; > objects.; >; > We simply will need to write the relevant class.; >; Perhaps slightly off-topic: How similar will this class look to QobjEvo? Or; do you not know yet?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-828711218:148,depend,dependent,148,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-828711218,1,['depend'],['dependent']
Integrability,"Hi Fillipo,. Are any of netket's operators time-dependent? I.e. is there a need to; support something similar for QobjEvo?. Yours sincerely,; Simon Cross",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-827902600:48,depend,dependent,48,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-827902600,1,['depend'],['dependent']
Integrability,"Hi Kevin. I think that would be very interesting! Since we don't have any support for time-dependent systems in the Bloch-Redfield master equation at the moment, I think it would be a nice addition. With time-dependent systems one would have to diagonalize the Hamiltonian at each time-step, so I can't think of a better way of doing this than to consider a piecewise-constant approximation. How did you implement it? Did you for example put additional logic in brmesolve? I think that the ""array-based"" time-dependent format (see mesolve) could be suitable for defining piecewise constant problems for brmesolve.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/258#issuecomment-63427565:91,depend,dependent,91,https://qutip.org,https://github.com/qutip/qutip/pull/258#issuecomment-63427565,3,['depend'],['dependent']
Integrability,"Hi Paul, I have some free time so I was thinking that if you're not currently working on this I'll try to put it together (the full time-dependent solver). Thanks",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/525#issuecomment-290627908:137,depend,dependent,137,https://qutip.org,https://github.com/qutip/qutip/pull/525#issuecomment-290627908,1,['depend'],['dependent']
Integrability,"Hi Paul,; How do you use openblas from python? I found that some blas routines are exposed in numpy but not all of them. Are there some examples of sparse blas calls from python? ; EPD and Anaconda python include MKL so I would like to play a bit with sparse blas routines.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/55#issuecomment-25367184:70,rout,routines,70,https://qutip.org,https://github.com/qutip/qutip/issues/55#issuecomment-25367184,2,['rout'],['routines']
Integrability,"Hi Robert. I think the bug is still there for the sparse solver. Also, just by looking at the code, I think there is some bug in the sparse routine in terms of what the eigenvalues are sorted by for sort='high'. It appears that if sparse=True, sort='high' and op.isherm=False, then eigenvalues are sorted by largest magnitude (which='LM' argument to sp.linalg.eigs), whereas in non-sparse solver they are sorted by largest real part (which='LR'). Cheers, Arne.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/16#issuecomment-16361728:140,rout,routine,140,https://qutip.org,https://github.com/qutip/qutip/issues/16#issuecomment-16361728,1,['rout'],['routine']
Integrability,"Hi Simon,. No we do not have time-dependent operators at the moment and focus on ground state/steady-state/dynamics of fixed hamiltonians or liouvillians. Actually nobody has (yet) studied with neural networks time-dependent systems as far as i know. However, our foundations do not prevent us to work with time-dependent objects. ; We simply will need to write the relevant class.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-828576313:34,depend,dependent,34,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-828576313,3,['depend'],['dependent']
Integrability,"Hi Subimal,. This happens because of the truncation of the Fock space. You can see a related discussion here ; https://groups.google.com/g/qutip/c/DD6z8kYUU1I/m/k48XZS1AAgAJ. But in short, with truncation there is always an error in the commutators, so for truncating the Fock states at N photons, I think you find that [a,a.dag()] = \sum_{n=0}^(N-1) |n><n| - N|N><N| (you can check this by writing out these operators as projectors onto fock states, you will notice a*a.dag() is missing a term due to the truncation that should cancel with a term in a.dag()*a). Similarly putting the creation and annihilation operators into the position/momentum definition of the Hamiltonian, you find H = sum_{n=0}^(N-1)(n+0.5) |n><n| + N/2 |N><N|. Hence, since you truncated at 9 photons in your example, there is a degeneracy of the 4.5 eigenvalue. I am not sure if there is much can be done about this in general, perhaps the discussion I linked above might be useful. The main message I suppose is always take a larger cut-off than you think you might need, particularly if you are relying on the commutation relations to simplify things for you (which, given your example, can be a bad idea some times!). . I guess there is an interesting question about what is the best practice in these things, e.g., if you have a non-linear model, what form is it best to put it in before moving to a truncated basis? given your example, I would expect something like normal ordering to be better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1587#issuecomment-869408770:968,message,message,968,https://qutip.org,https://github.com/qutip/qutip/issues/1587#issuecomment-869408770,1,['message'],['message']
Integrability,"Hi again. I've looked at your notebook and code in some more detail now, and I have attempted to make the change in how the rhs function behaves. I had not seen an example where the contributions form different stochastic collapse operators depended on each other before, but I now see the need for having this possibility from looking at your implementation of the Milstein implementation with multiple Wiener processes. I have created a new branch in qutip called sme-rhs-restructuring (see commit 0b4a1a7a6591aca27ff6cb71310cf73af7ae2d7f and https://github.com/qutip/qutip/tree/sme-rhs-restructuring) where I have experimented with rhs functions that internally loop through the A_ops list. In simple cases it only loops through the list and calculates a contribution for each stochastic collapse operator, but now it is also possible to do something more sophisticated, like in your milstein solver. I've edited your notebook so that it uses the standard (now modified) smesolve and your rhs functions for the milstein methods. http://nbviewer.ipython.org/6153688. Note that I still only use the rhs function for the contributions due to the stochastic collapse operators (both the deterministic and stochastic part), and it does not include the unitary part or the deterministic collapse operators (if those are given as well), so it is not quite what you suggested when proposing that the rhs should calculate \rho_{n+1}. Do you think this approach is reasonable, or do you see any problems with it?. Regarding your milstein implementation, it seems that it is only valid for homodyne detection, since your have hardcoded the d1 and d2 function into the rhs function. I've tried to separate the definition of the SDE (d1 and d2) from the implementation of the SDE integrator (rhs), and naively it seems like you could use the d1 and d2 functions in rhs_milstein to make it possible to use it with hetrodyne detection as well. Is there any difficulties in generalizing the milstein method and par",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22088170:241,depend,depended,241,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22088170,1,['depend'],['depended']
Integrability,"Hi all, I have three questions.; Q1. ; As mentioned in the API doc [http://qutip.org/docs/3.1.0/apidoc/functions.html](url) ; Under the section of master equation solver . > Time-dependent operators; > ; > For time-dependent problems, H and c_ops can be callback functions that takes two arguments, time and args, and returns the Hamiltonian or Liouvillian for the system at that point in time (callback format).; > ; > Alternatively, H and c_ops can be a specified in a nested-list format where each element in the list is a list of length 2, containing an operator (qutip.qobj) at the first element and where the second element is either a string (list string format), a callback function (list callback format) that evaluates to the time-dependent coefficient for the corresponding operator, or a NumPy array (list array format) which specifies the value of the coefficient to the corresponding operator for each value of t in twist. It seems that **in the version 3.1.0**, c_ops can be implemented as a callback functions in `mesolve`. Is this true? . Q.2; As mentioned in [https://groups.google.com/forum/#!topic/qutip/aIxxnbQ56W4](url), the callback function has not been developed for `mesolve` at the time of that post. But . > you have a callback function that is called for each time step and which constructs the system Liouvillian Here you are free to construct the collapse operators or Liouvillian in whichever way you want. From this, I think I can use the callback function to define the c_ops and integrate them in **Liouvillian** for `mesolve`. If I am interpreting it right, this can be done for c_ops with some complicated time dependence. Is that right? . _(However it is mentioned in [https://groups.google.com/forum/#!searchin/qutip/time$20dependent/qutip/S0IskSRy2M0/_2L6BzqAKTEJ](url) that I can use a callback function for `mesolve`?)_. Q.3; I know that I cannot use callback functions to define the c_ops directly in `mcsolve`. Can I use the callback functions to define the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/223#issuecomment-223873117:179,depend,dependent,179,https://qutip.org,https://github.com/qutip/qutip/issues/223#issuecomment-223873117,3,['depend'],['dependent']
Integrability,"Hi and thanks for the PR. This seems like reasonable functionality, however time dependence using arrays is already supported if you use scipy.interp to create a function for the array. I have used that method myself (see PR #109 for an example), and at that time decided that it was not necessary with a new time-dependence format in qutip for that functionality. But there could be performance advantages with your method. I will test and compare the two methods and get back to you. . Regarding the implementation: I would preferably avoid using global variables. Can you not use the args argument to store the values instead of using globals() ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-44495147:81,depend,dependence,81,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-44495147,2,['depend'],['dependence']
Integrability,"Hi guys,; yeah, the conflicts are because of the now merged #1224, which we knew about when we merged that one. It's a simple fix, but I'm hesitant to do it directly on this PR, depending on how we want to merge it. The simplest way is that I make the required changes, fix the merge conflict, and we keep going until this whole behemoth merges in one go. This ends up in the commit history being a bit of a mess, and it'll take ages. Instead, I think it might be better if I instead split this PR into a few different ones:; 1. add `pytest` markers and other test niceties; 2. the test files that Eric is checking; 3. the QIP-related ones so that Boxi can check those; 4. `brmesolve` tests; 5. trivially changed files; 6. whatever's left. This has the advantage that I can rebase them all individually to neaten them up with any changes suggested, and we can get parts merged in faster. PRs 2 to 6 will depend on PR 1, so this would require getting that first one merged ASAP, then the others will all be modular and can be merged in any order at any speed. If you're happy with that plan, I'll cherry-pick/rebase out the necessary bits of the history and form the new PRs. The end result will be 6 PRs, which, when merged, will have no conflicts, and will leave the repository in the exact same state it would be if this PR was merged in one lump (with the relevant conflict fixed). For each PR, then we just have a simple process:; 1. you review files; 2. I make suggested changes; 3. repeat until happy; 4. I rebase the PR to squash it into a logical form; 5. you merge",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-619434033:178,depend,depending,178,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-619434033,2,['depend'],"['depend', 'depending']"
Integrability,Hi! How did you import the function `read_qasm`? Could also include your `import qutip ...` or `from qutip.qip import ...` statements? Does any warning or error message show up during the execution of the import?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2334#issuecomment-1962937455:161,message,message,161,https://qutip.org,https://github.com/qutip/qutip/issues/2334#issuecomment-1962937455,1,['message'],['message']
Integrability,"Hi!. About the comments: yes, absolutely I'll leave more. It's a bit silly that I haven't yet, since one thing that was frustrating me previously was not understanding what was trying to be done! I think as time goes by I'm getting a bit better about being clearer in the code - some of the earlier parametrizations I did were too aggressive because I wasn't used to the tools yet. The `test_control_pulseoptim` parts are very complex, in part because the underlying calling convention of that code is complex too. I'll try and add more comments to it to ease that along, especially in the part where I just defined a load of systems to test. That certainly should have been commented. There are general comments about what I was using the `pytest` tooling for in the commit messages, but I didn't necessarily want to leave ""intro to pytest"" comments throughout, because it would mostly crowd out the actual tests, and the `pytest` documentation online is probably going to be a better explanation than what I can do. I'm also learning `pytest` by doing this (I'd not used it before I opened the first PR)!. About the PRs: I'm happy with whatever workflow works best for you guys - I don't have any control over when the PR gets merged. It might be a little difficult for me to maintain two branches at once (i.e. if the first PR with ~10 tests is awaiting merging), because there's likely to be conflicts in `conftest.py` (in particular). Even if I branched the new PR off the previous one on the expectation that it would be merged, I'd have to keep adding merge commits into (or force-rebasing) the other branch to keep it up-to-date, which wouldn't be completely ideal in that it would make a bit of a mess in the git log. If you want to merge this one (after I've gone through and put some more comments in), I'm happy to start a new one. I can also start a new one on a new branch, I think it might just make a bit more of a mess than it solves. I think this one only got big because I had a goo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241:775,message,messages,775,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-591413241,1,['message'],['messages']
Integrability,"Hi, I get many errors while running the test code, and at the end, I came up with a nitification that says (Failed(errors=12)). here are the errors:. td_brmesolve: passes all brmesolve tests ... ERROR; td_brmesolve: time-dependent a_ops ... ERROR; td_brmesolve: time-dependent a_ops tuple of strings ... ERROR; td_brmesolve: time-dependent a_ops tuple interp ... ERROR; td_brmesolve: time-dependent a_ops & c_ops interp ... ERROR; td_brmesolve: non-Hermitian e_ops check ... ERROR; td_brmesolve: states check ... ERROR; td_brmesolve: split ops #1 ... ERROR; td_brmesolve: split ops #2 ... ERROR; td_brmesolve: split ops, Cubic_Spline td-terms ... ERROR; td_brmesolve: split ops, multiple ... ERROR; td_brmesolve: Hamiltonian args ... ERROR. Please let me know how to fix it. thanks in advance",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1039#issuecomment-524421315:221,depend,dependent,221,https://qutip.org,https://github.com/qutip/qutip/issues/1039#issuecomment-524421315,4,['depend'],['dependent']
Integrability,"Hi, I have updated the interface to make it much much easier to use. And, I added the unit test and now the test will succeed. The test is the following: generate random Hamiltonians and run perturbation and see whether the energy levels match with the exact solutions. I have done all I want to do up to now. So, please review these codes again and consider merging them.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/282#issuecomment-109847098:23,interface,interface,23,https://qutip.org,https://github.com/qutip/qutip/pull/282#issuecomment-109847098,1,['interface'],['interface']
Integrability,"Hi, I was reading about builder patterns and came across this [discussion](https://stackoverflow.com/questions/11977279/builder-pattern-equivalent-in-python) which seems to suggest that builder patterns are not necessarily needed in Python. Instead, all the functions could probably be bundled into a single ```PulseOptimizer``` class and whatever the wrapper functions are doing right now can be methods of this class. The input arguments can be initialised in the __init__ of this class. This you could have something like. ```; from qutip.control.pulseoptim import PulseOptimizer. optimizer = PulseOptimizer(drift="""", ctlr="""", ....); crab = optimizer.opt_pulse_crab(args, ...); unitary_crab = optimizer.opt_pulse_crab_unitary(args,...); ```. @MichalKononenko - if you are suggesting something like [this](https://sourcemaking.com/design_patterns/builder/python/1) then perhaps it is that same as what I suggested on top.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/692#issuecomment-313407939:352,wrap,wrapper,352,https://qutip.org,https://github.com/qutip/qutip/issues/692#issuecomment-313407939,1,['wrap'],['wrapper']
Integrability,"Hi, just to clarify: the intention here is to have the two behaviours mediated by a `settings` flag or just an in-place version check?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1502#issuecomment-823238444:70,mediat,mediated,70,https://qutip.org,https://github.com/qutip/qutip/issues/1502#issuecomment-823238444,1,['mediat'],['mediated']
Integrability,"Hi, matplotlib is an optional dependency and there is a warning on import.; You should install them separately. On Thu, Jun 7, 2018, 2:47 PM Tejas Shetty <notifications@github.com> wrote:. > Doesn't install matplotlib when installing on windows.; > And then produces errors; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/878>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AGpUBD8arMQpOQc40gQMwSImZ3fq6Cm7ks5t6L57gaJpZM4Udxhh>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/878#issuecomment-395303939:30,depend,dependency,30,https://qutip.org,https://github.com/qutip/qutip/issues/878#issuecomment-395303939,1,['depend'],['dependency']
Integrability,"Hi, sorry for coming late to the party. This is a very nice PR and I have a couple of comments on the naming of the functions. Instead of having three different measurement functions - `measurement_ket`, `measurement_density` and `measurement_comp_basis` why not have a single `measure` function that has the same signature as `qutip.measurement.measure`, i.e., measure(op, state) where internally you check if the state is a ket or dm and just apply the operation internally? You could also have a `basis='computational`` keyword if you need to specify the basis. But I do not see why you make that distinction? . Also, in a real experiment you will not be able to make multiple measurements on the same state which seems to be possible now in your PR. We need to either not allow this or leave a warning message.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640714799:806,message,message,806,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640714799,1,['message'],['message']
Integrability,"Hi, thank you very much for the quick responses and linking the other issues. . > But your making sparse matrices dense. Yes, I agree. But I was trying to just work out a simple problem which looks like. `dp[n]/dt = spre(Q)*p[n-1] + spost(Q)*p[n+1]. where p is a list of flattened density matrices. I understand that a better version of this would be to completely flatten p and write the RHS as a large `L` as Alex points out and then use `cy_ode_rhs`. But here is the issue, in the HEOM case, building `L` runs out of memory if we consider a large size for the set of auxiliary density matrices `p`. As such, I cannot completely build the `L` for the cases I am looking into. The approach that I was trying to take was to keep building the p's as we integrate. In this case, each RHS computation is a small dense matrix-vector computation and I can choose to keep or discard it depending on the max value of its elements. This gives the flexibility to truncate how many auxiliary density matrices I keep. The motivation is that in some papers on the Heom method, there is a dynamic filtering of the auxiliary matrices and it has been shown that with just a few 100s of auxiliary matrices, you can get a reasonable result. But the way we have the code in QuTiP now pre-computes the `L` and gets stuck due to memory limitations. @agpitch Thanks for the suggestions. I am trying to make the HEOM work without building the `L`. Perhaps I will still run into memory issues if I try to initialize the full set of `p` but if the dynamic filtering approach works out, then I can escape the memory problem by only building a few of the `p`'s and deciding to append them or not based on some conditions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/831#issuecomment-368980965:752,integrat,integrate,752,https://qutip.org,https://github.com/qutip/qutip/issues/831#issuecomment-368980965,2,"['depend', 'integrat']","['depending', 'integrate']"
Integrability,"Hi, the first part for this is ready for review. A typical use case would be to generate the matrix M.; @nathanshammah I made some small changes in the names of functions.; @ajgpitch Please suggest any changes if necessary for pep8, function naming, testing or the API in general. We have the examples and ipynb notebooks that @nathanshammah wrote. Where do they go ? . Once, this is merged, there are additional helper functions to calculate operator expectations, thermal states etc which can be added. However, this forms the core of the module.; ```; from qutip.pim.dicke import *; import numpy as np; from scipy.integrate import odeint. # system parameters. N = 10; gS, gL, gD, gP, gCP = .1, .1, .1, .1, .1. # define the model; model = Pim(N, emission=gS, loss=gL, dephasing=gD, pumping=gP, collective_pumping=gCP). M = model.generate_M(). # Evolve the system according to dp/dt = M.p. rho0 = initial_dicke_state(N, (5, 5)); t = np.linspace(0, 10, 100). def generate_rhs(rho, M):; return M.dot(rho). p = odeint(generate_rhs, rho0, t, args=(M,)); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-332110217:617,integrat,integrate,617,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-332110217,1,['integrat'],['integrate']
Integrability,"Hi, this was discussed before in https://github.com/qutip/qutip/issues/702. You may be missing some LateX packages or other dependencies:; pdflatex, pdfcrop, pdf2svg, imagemagick (convert). Also you may be missing the following latex packages:. \usepackage{xy}; \xyoption{matrix}; \xyoption{frame}; \xyoption{arrow}; \xyoption{arc}; \usepackage{ifpdf}",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/754#issuecomment-331759789:124,depend,dependencies,124,https://qutip.org,https://github.com/qutip/qutip/issues/754#issuecomment-331759789,1,['depend'],['dependencies']
Integrability,"Hi,. I notice that there are cases that the Python version of QuTIP is slower; than the QOToolbox written in Matlab. I naively think, for those cases, can; you make an interface so that users can call the corresponding Matlab; programs from Python? Seems PyMat, Pymatbridge, Mlabwrap and maybe other; programs can do this job. Have you considered this option to make QuTIP; better at this stage? Thanks. Kind regards,; Qi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/48#issuecomment-27609676:168,interface,interface,168,https://qutip.org,https://github.com/qutip/qutip/pull/48#issuecomment-27609676,1,['interface'],['interface']
Integrability,"Hi,; I had a similar issue recently. See; https://stackoverflow.com/questions/11912878/gcc-error-gcc-error-trying-to-exec-cc1-execvp-no-such-file-or-directory. The second suggestion. sudo apt-get update; sudo apt-get install --reinstall build-essential. worked for me. Best of luck with it. Alex. On Thu, 13 Jun 2019 at 09:32, PZJuly <notifications@github.com> wrote:. > Dear all,; >; > I'm trying to install the latest release of QuTip on Ubuntu system. Since; > our workstation hasn't been connected to internet, I; > downloaded Anaconda3-2019.03-Linux-x86_64 and qutip-4.3.1.tar, and attempt; > to install from source code.; >; > Firstly I successfully installed Anaconda with the command:; > bash ~/Downloads/Anaconda3-2019.03-Linux-x86_64.sh; >; > Then in the conda environment I typed the command:; > python setup.py install; >; > I get the following error message:; >; > gcc -pthread -B /home/pz/anaconda3/compiler_compat -Wl,--sysroot=/; > -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -Iqutip/cy; > -I/home/pz/anaconda3/lib/python3.7/site-packages/numpy/core/include; > -I/home/pz/anaconda3/lib/python3.7/site-packages/numpy/core/include; > -I/home/pz/anaconda3/include/python3.7m -c qutip/cy/spmatfuncs.cpp -o; > build/temp.linux-x86_64-3.7/qutip/cy/spmatfuncs.o -w -O3 -march=native; > -funroll-loops; > gcc: error trying to exec 'cc1plus': execvp: No such file or directory; > error: command 'gcc' failed with exit status 1; >; > It seems the gcc compiler isn't correctly located? Or what else problem.; >; > I checked the gcc version on the workstation:; > gcc --version; > gcc (Ubuntu 8.3.0-6ubuntu1~18.10) 8.3.0; > Copyright (C) 2018 Free Software Foundation, Inc.; > This is free software; see the source for copying conditions. There is NO; > warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; >; > whereis gcc; > gcc: /usr/bin/gcc /usr/lib/gcc /usr/share/man/man1/gcc.1.gz; >; > How can I direct the installer to find the gcc compiler?; >; > Thanks!; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-501609220:863,message,message,863,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-501609220,1,['message'],['message']
Integrability,"Hi,; There are many methods for the steadystate solver, some are faster, some are less stable. I would suggest trying other method until your find a good one for your problem.; Available method are: ; `'direct', 'eigen', 'iterative-gmres', 'iterative-lgmres', 'iterative-bicgstab', 'svd', 'power', 'power-gmres', 'power-lgmres', 'power-bicgstab'`. `'direct'` and `'power'` can use mkl as a solver, all can use scipy. You can also try to change some options such as the tolerance and max iteration number. ; The options for each solver are different depending on the solver and not all are documented. ; I list them here if you want to go deeper:. For scipy:; ```; 'sparse': True, ; 'use_rcm': False,; 'use_wbm': False, ; 'weight': None, ; 'use_precond': False,; 'all_states': False, ; 'M': None, ; 'x0': None, ; 'drop_tol': 1e-4,; 'fill_factor': 100, ; 'diag_pivot_thresh': None, ; 'maxiter': 1000,; 'tol': 1e-12, ; 'matol': 1e-15, ; 'mtol': None,; 'permc_spec': 'COLAMD', ; 'ILU_MILU': 'smilu_2',; 'restart': 20, ; 'return_info': False,; 'info': _empty_info_dict(),; 'verbose': False, ; 'solver': 'scipy'; ```. For mkl:; ```; 'max_iter_refine': 10, ; 'scaling_vectors': True, ; 'weighted_matching': True, ; 'return_info': False, ; 'info': _empty_info_dict(), ; 'verbose': False, ; 'solver': 'mkl', ; 'use_rcm': False, ; 'use_wbm': False, ; 'weight': None, ; 'tol': 1e-12, ; 'matol': 1e-15, ; 'mtol': None, ; 'maxiter': 1000; ```. Lastly, most steadystate's method have a logger if you activate debug in setting:; ```; import qutip.settings as settings; settings.debug = True; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1077#issuecomment-527620834:549,depend,depending,549,https://qutip.org,https://github.com/qutip/qutip/issues/1077#issuecomment-527620834,1,['depend'],['depending']
Integrability,"Hi. I replaced scipy wrapper with _data.solve. I ran pytest and error occurred. Does anybody know how to solve this? Thank you. File ""qutip/core/data/dispatch.pyx"", line 582, in qutip.core.data.dispatch.Dispatcher.__call__; raise TypeError(""unknown types to dispatch on: "" + str(dispatch)) from None; TypeError: unknown types to dispatch on: [<class 'scipy.sparse._csr.csr_matrix'>, <class 'numpy.ndarray'>]; Traceback (most recent call last):; File ""/root/opt/qutip/qutip/solver/countstat.py"", line 83, in _solve; return _data.solve(A, V, ""splu"")",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2109#issuecomment-1458453064:21,wrap,wrapper,21,https://qutip.org,https://github.com/qutip/qutip/issues/2109#issuecomment-1458453064,1,['wrap'],['wrapper']
Integrability,"Hi. OK, I see. For implicit SDE solvers there is and advantage in having the rhs function calculating the state at the next time-step. I hesitated doing it like that, because I didn't want to mix up the definition of the stochastic SDE contribution with the deterministic part, which sometime in the future should use qutip's existing framework for time-dependent hamiltonian and collapse operators. Having the stochastic rhs function exposed to all that is a bit unnecessary and makes things more complicated than it needs to be. However, I think I found a reasonable compromise in that I created new _rhs_psi_deterministic and _rhs_rho_deterministic where the current deterministic contributions are calculated. These functions can now be called from a stochastic rhs implementation, like this. ```; dpsi_t = _rhs_psi_deterministic(H, psi_t, t, dt, args); ```. In this way the implementation of a stochastic rhs function is relatively isolated from how the deterministic part is calculated (which right now is trivial, but which could become more complex when time-dependent systems are implemented). However, it also gives all the flexibility needed in the rhs function, and these deterministic rhs functions do not need to be used if it is not suitable in a particular stochastic rhs implementation. . I've added the changes to the rhs behavior to the https://github.com/qutip/qutip/tree/sme-rhs-restructuring and updated the gist with the variant of your notebook. http://nbviewer.ipython.org/6153688. Note that a few other things, like the rhs function signature, had to change in the process. I hope that this updated API will be flexible enough to let you implement implicit solver. Regards rhs implementation and d1,d2 function: Yes, I understand that not all possible rhs schemes might be compatible with the parameterization with d1 and d2 functions, but when it is possible it has the great advantage that the user do not need to worry about how the rhs is implemented, only define the SDE",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22156426:354,depend,dependent,354,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22156426,2,['depend'],['dependent']
Integrability,"Hi. Thanks for reporting this problem. I'm not sure if I'd call it a bug or not, but I understand that this behavior can be a bit confusing. With odeOpts.rhs_reuse = True the same function will be use until rhs_clear() is called, which in your case would be. qtp.rhs_clear(); qtp.propagator([H0, [Hint, '1-w*t']], 5, [], {'w':1/5.}, opt=odeOpts). when yo change the time-dependency function strings. . Maybe this needs to be emphasized more in the documentation, or perhaps rhs_clear() could be called automatrically from within propagator, but this could prevent one from really reusing the rhs function for several propagators with the same rhs function (for example with different H0 or Hint). . I'll leave this ticket open for now so we'll remember to think some more about how this issue should be handled in the best way. . Thanks again for your feedback!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/18#issuecomment-17106896:371,depend,dependency,371,https://qutip.org,https://github.com/qutip/qutip/issues/18#issuecomment-17106896,1,['depend'],['dependency']
Integrability,"Hi. Thanks, but I am now getting a new error. If the code is-. `from qutip import *. import numpy as np. import matplotlib.pyplot as plt. print(Qobj())`. Then there is no error whatsoever. If the code is-. `from qutip import *. import numpy as np. import matplotlib.pyplot as plt. print(Qobj()). print(Qobj([[1],[2],[3],[4],[5]]))`. Then it gives expected result if I run it first thing after launching spyder. But if I have already run any qutip code and then try to run this code, then I get the following error-. File ""/home/premkr/.local/lib/python3.7/site-packages/scipy/sparse/base.py"", line 283, in __bool__; raise ValueError(""The truth value of an array with more than one "". ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all(). The full error message is-. runfile('/home/premkr/Dropbox/work/python/qutip/gksl_learning.py', wdir='/home/premkr/Dropbox/work/python/qutip'); Traceback (most recent call last):. File ""<ipython-input-2-af424448e75a>"", line 1, in <module>; runfile('/home/premkr/Dropbox/work/python/qutip/gksl_learning.py', wdir='/home/premkr/Dropbox/work/python/qutip'). File ""/usr/lib/python3/dist-packages/spyder_kernels/customize/spydercustomize.py"", line 678, in runfile; execfile(filename, namespace). File ""/usr/lib/python3/dist-packages/spyder_kernels/customize/spydercustomize.py"", line 106, in execfile; exec(compile(f.read(), filename, 'exec'), namespace). File ""/home/premkr/Dropbox/work/python/qutip/gksl_learning.py"", line 19, in <module>; print(Qobj([[1],[2],[3],[4],[5]])). File ""/home/premkr/.local/lib/python3.7/site-packages/qutip/qobj.py"", line 256, in __init__; _tmp = sp.csr_matrix(data, dtype=complex). File ""/home/premkr/.local/lib/python3.7/site-packages/scipy/sparse/compressed.py"", line 86, in __init__; self._set_self(self.__class__(coo_matrix(arg1, dtype=dtype))). File ""/home/premkr/.local/lib/python3.7/site-packages/scipy/sparse/compressed.py"", line 86, in __init__; self._set_self(self.__class__(c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2121#issuecomment-1469601223:804,message,message,804,https://qutip.org,https://github.com/qutip/qutip/issues/2121#issuecomment-1469601223,1,['message'],['message']
Integrability,"Hi; Lambda is diagonal matrix that describes repopulation in atomic system; and not act on density matrix in master equation ; You can see more details in chapter 5 of book:; Optically polarized atoms; By Simon M. Rochester. Thanks again . Sent from my iPhone. > On Sep 20, 2021, at 11:47 PM, Eric Giguère ***@***.***> wrote:; > ; > I cannot give an example without knowing what lambda is.; > If the lambda term does not depend on rho, I would not use mesolve but just build the matrix using numpy and scipy.; > The other terms can be represented as qutip.liouvillian(H) - (qutip.spre(T) - qutip.spost(T))/2.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or unsubscribe.; > Triage notifications on the go with GitHub Mobile for iOS or Android.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1665#issuecomment-923607868:421,depend,depend,421,https://qutip.org,https://github.com/qutip/qutip/issues/1665#issuecomment-923607868,1,['depend'],['depend']
Integrability,"Hi; String coefficient do not work in parallel on windows. ; There are no other windows specific bug reported, so if you stick to function coefficient for time dependent system, you should be fine.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1084#issuecomment-531317211:160,depend,dependent,160,https://qutip.org,https://github.com/qutip/qutip/issues/1084#issuecomment-531317211,1,['depend'],['dependent']
Integrability,"Hmm, it still seems to use the old travis ci configuration, where I tried to install numpy/scipy with pip without wheels. But took too long to install the dependencies that way, and the tests will probably timeout and get cancelled. In the current travis ci configuration uses pip with wheels to install numpy/scipy much faster.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/76#issuecomment-36083480:155,depend,dependencies,155,https://qutip.org,https://github.com/qutip/qutip/pull/76#issuecomment-36083480,1,['depend'],['dependencies']
Integrability,"Hmm, this would add a run-time dependency on distutils... which probably in normal cases would not be an issue, but we would have to add it as a dependency in the deb package and perhaps also in macports etc.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/207#issuecomment-50951673:31,depend,dependency,31,https://qutip.org,https://github.com/qutip/qutip/issues/207#issuecomment-50951673,2,['depend'],['dependency']
Integrability,"Hopefully `sin(t) if t > 4 else cos(t)` should work for you?. Internally the relevant data structures either compile standard Python to code objects or go native via Cython, so the rule of thumb is ""would `eval(my_string)` give me what I want?"". QuTiP provides some basic wrapping of the scoping rules so things like `t` are available, and the standard numpy functions `sin`, `cos`, etc., are available without needing the namespace, but it's not got a full DSL for specifying time-dependence - it just uses regular Python.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1240#issuecomment-620486072:272,wrap,wrapping,272,https://qutip.org,https://github.com/qutip/qutip/issues/1240#issuecomment-620486072,2,"['depend', 'wrap']","['dependence', 'wrapping']"
Integrability,How can I use QobjEvoFunc to write collapse operator with time dependent operator?could you give an example?; @Ericgig,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1398#issuecomment-740542623:63,depend,dependent,63,https://qutip.org,https://github.com/qutip/qutip/issues/1398#issuecomment-740542623,1,['depend'],['dependent']
Integrability,"I agree that unifying the interface would be ideal for QuTiP 5.0. I was aiming to do so with Bloch and also clean-up the code on my way. For tomography, visualization and distribution, we may be able to include them in the Unitary Hack if we make a more detailed issue with the requirements (provided there is still enough room for new bounties).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1910#issuecomment-1142357617:26,interface,interface,26,https://qutip.org,https://github.com/qutip/qutip/issues/1910#issuecomment-1142357617,1,['interface'],['interface']
Integrability,I agree with @jakelishman's general principle (and maybe we should even move the tests out of the `qutip` package for v5 still) but it's also really important to have an easy way for data layer implementations to run a comprehensive test suite *that is defined by the data layer*. I suspect that if anyone is running tests against master (i.e. what is currently dev.major) they will *want* tests to break if we add new methods. I have a slightly different proposal:. What if we create `qutip.core.data.testing` which is an explicitly exported suite of pytest classes that we intentionally expose for data layers to use? Initially the file can just import test classes from `qutip.tests.core.data`. I would also not use `__all__` in the individual test packages but instead import the test classes explicitly in `qutip.core.data.testing` so that it's 100% clear by reading just that file what the exported interface is (and adding new tests requires explicitly adding them into the exposed package).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874:905,interface,interface,905,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874,1,['interface'],['interface']
Integrability,"I agree with this, with some additional points:; 1. `QobjEvo` also needs to be handled by `__matmul__`, but this should be handled by returning `NotImplemented`, and letting `QobjEvo.__rmul__` dispatch it to `QobjEvo.__rmatmul__`.; 1. however we choose to do this, `__mul__` should return `NotImplemented` if the other element can't be handled correctly; it shouldn't raise an exception by itself. The ""Pythonic"" way is to try/catch an exception in handling, but this just means we need to be sure that all `__mul__` methods do proper error checking, and _do_ reject invalid input rather than just silently doing weird stuff.; 1. what do we want to do in response to being multiplied with Numpy arrays? We have to be careful, because otherwise we might do very different things depending on whether we're being multiplied from the left or right by the Numpy array, which isn't really desirable. My first instinct is to say we should make ourselves appear as a scalar type to Numpy, so it broadcasts the multiplication over the scalar values in its array. To do that, we may need to play a little with `__array__`, `__array_ufunc__` and `__array_function__`, and return `NotImplemented` from `Qobj.__mul__(array)`. I think this maybe gives the most useful behaviour? I can't imagine a situation where it would make sense for a data-layer type to accept a Numpy array in a scalar-multiplication routine, and doing things this way allows people to use the broadcasting support of Numpy for convient looping. Just for posterity, I'm really strongly against any automatic promotion to `Qobj`, with the exception of handling scalar numbers in `__add__` and `__sub__`, where mathematical convention is that they mean the relevant identity operator scaled by the scalar. Having that is also necessary to have `sum()` work with `Qobj` ergonomically. I know that's not the suggestion here, just thought I'd mention it again!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1611#issuecomment-882613672:778,depend,depending,778,https://qutip.org,https://github.com/qutip/qutip/pull/1611#issuecomment-882613672,2,"['depend', 'rout']","['depending', 'routine']"
Integrability,"I also come across these questions on time-dependent evolutions where the time-dependent part of the Hamiltonian does not look like what QuTiP asks, i.e., A f(t), where A is an operator and f(t) some time-dependent function giving the coefficients. In those cases, I suggest directly moving to a superoperator picture and solving the equation,. dp/dt = L(t) p where L(t) now contains the superoperator representation of the full Hamiltonian. @nonhermitian could you please comment if the QuTiP TD stuff was made only for Hamiltonians which can be written in this A f(t) form only?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-460973144:43,depend,dependent,43,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-460973144,3,['depend'],['dependent']
Integrability,"I also got some wrong result with mesolve, which uses ZVODE integration method. The mesolve raises no warning. But I was able to get the right result with ISODA method. . The situation was applying a Pi pulse(~50 ns) to the qubit and wait about 1000 ns and then apply another Pi pulse. The second Pi pulse had no effect for the final state.; I was using [qobj, func] pairs for the time dependent Hamiltonian, where func is the self-defined gate envelope.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1038#issuecomment-607315509:60,integrat,integration,60,https://qutip.org,https://github.com/qutip/qutip/issues/1038#issuecomment-607315509,2,"['depend', 'integrat']","['dependent', 'integration']"
Integrability,"I also just tried an mesolve simulation after removing the collapse operators (in Qutip 4.7) and now the propagator results seem to match; ```shell; results = mesolve(H, psi_0, t, c_ops = []); U = propagator(H, t, c_ops=[]); plt.plot(t, expect(a_u.dag() * a_u, results.states), label=""mesolve""); for i in range(len(t)):; plt.plot(t[i], expect(a_u.dag() * a_u, U[i]*psi_0), ""x"", color=""orange""); plt.ylabel(""Population""); plt.xlabel(""Time""); plt.legend(); plt.show()```. ![image](https://github.com/user-attachments/assets/ae1f3097-044e-419b-98f1-1f0462edb9f2). It makes me think that the propagator is not using a time-dependent collapse operator possibly?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2532#issuecomment-2356706508:619,depend,dependent,619,https://qutip.org,https://github.com/qutip/qutip/issues/2532#issuecomment-2356706508,1,['depend'],['dependent']
Integrability,"I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:; - I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; - I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:194,interface,interface,194,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462,5,"['Integrat', 'integrat', 'interface']","['Integrator', 'integration', 'integrator', 'interface']"
Integrability,"I am checking out Azure pipelines, which seems to have some (preferential?) integration with GitHub https://azure.microsoft.com/en-us/services/devops/pipelines/. Cc @tehruhn also for the previous comments.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959#issuecomment-540523107:76,integrat,integration,76,https://qutip.org,https://github.com/qutip/qutip/issues/959#issuecomment-540523107,1,['integrat'],['integration']
Integrability,I am happy with the changes and explanations. ; I see the Python2.7 check has failed though. I am not sure what the error message implies. @cgranade do you have any idea?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128688035:122,message,message,122,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128688035,1,['message'],['message']
Integrability,"I am using `mesolve` in the test now. I am not sure if that is considered a good style, since the test also depends on this function. I could also just hardcode the expected output. What do you think is better, @AGaliciaMartinez ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1843#issuecomment-1086200210:108,depend,depends,108,https://qutip.org,https://github.com/qutip/qutip/pull/1843#issuecomment-1086200210,1,['depend'],['depends']
Integrability,"I am using spyder. When I run the code once by pressing F5 button, then I get expected behaviour. But when I press F5 again, then I get error. If I modify the code and press F5, same error. If I restart spyder, then again I do not get any error on the first run, but the error repeats on subsequent runs. Yes, just running `import qutip` also gives the same error. I guess you are asking for the full error message and not just the last two lines. Here it is for `import qutip` for two subsequent runs.-. IN [1]: runfile('/home/premkr/Dropbox/work/python/qutip/gksl_learning.py', wdir='/home/premkr/Dropbox/work/python/qutip'). IN [2]: runfile('/home/premkr/Dropbox/work/python/qutip/gksl_learning.py', wdir='/home/premkr/Dropbox/work/python/qutip'); Traceback (most recent call last):. File ""<ipython-input-2-af424448e75a>"", line 1, in <module>; runfile('/home/premkr/Dropbox/work/python/qutip/gksl_learning.py', wdir='/home/premkr/Dropbox/work/python/qutip'). File ""/usr/lib/python3/dist-packages/spyder_kernels/customize/spydercustomize.py"", line 678, in runfile; execfile(filename, namespace). File ""/usr/lib/python3/dist-packages/spyder_kernels/customize/spydercustomize.py"", line 106, in execfile; exec(compile(f.read(), filename, 'exec'), namespace). File ""/home/premkr/Dropbox/work/python/qutip/gksl_learning.py"", line 11, in <module>; import qutip. File ""/home/premkr/.local/lib/python3.7/site-packages/qutip/__init__.py"", line 106, in <module>; from qutip.qobj import *. File ""/home/premkr/.local/lib/python3.7/site-packages/qutip/qobj.py"", line 2526, in <module>; import qutip.superop_reps as sr. File ""/home/premkr/.local/lib/python3.7/site-packages/qutip/superop_reps.py"", line 74, in <module>; _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigmaz()). File ""/home/premkr/.local/lib/python3.7/site-packages/qutip/operators.py"", line 278, in sigmax; return 2 * jmat(1 / 2, 'x'). File ""/home/premkr/.local/lib/python3.7/site-packages/qutip/operators.py"", line 80, in jmat; A ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2121#issuecomment-1469319817:407,message,message,407,https://qutip.org,https://github.com/qutip/qutip/issues/2121#issuecomment-1469319817,1,['message'],['message']
Integrability,I believe a bad call to the integrate command was responsible.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-64521594:28,integrat,integrate,28,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-64521594,1,['integrat'],['integrate']
Integrability,"I believe that all permutation are run with `parametrize`. So the input (`qobj`) is compared to each outputs `(expected`), not just the matching one. Also the rotation matrix (`U = rand_unitary(3)`) must be constant. Here, at least 4 different random operators are created. Instead of `parametrize` and `yield` simply calling the function `case` would work:; ```; yield case(""Test Qobj: trunc_neg works for positive opers.""), \; rand_dm(5), method; ```; to; ```; case(rand_dm(5), method, None); ```; To keep the message, `assert_almost_equal` has a `err_msg` keyword to raise if the test fails. I do not believe the `yield` is the cause of the no cython fails. ps. I will make a branch of this PR and will add `mark` to prepare a subset of tests for faster testing #1147.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-571198523:512,message,message,512,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-571198523,1,['message'],['message']
Integrability,I believe the detailed comments from [pmenczel](https://github.com/pmenczel) is sufficient to wrap up this case.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2501#issuecomment-2250974952:94,wrap,wrap,94,https://qutip.org,https://github.com/qutip/qutip/issues/2501#issuecomment-2250974952,1,['wrap'],['wrap']
Integrability,"I believe the issue is on lines 833-835:. ``` python. if ODE.t > tlist[k]:; ODE.set_initial_value(y_prev, t_prev); ODE.integrate(tlist[k], step=0); ```. removing these lines gives similar performance.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-64523119:119,integrat,integrate,119,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-64523119,1,['integrat'],['integrate']
Integrability,"I believe this is the only `-march=native` we have. It will cause problem if left here so it's better to remove it. . However it may create a bigger slowdown than expected. If you look at [qutip/cy/src/zspmv.cpp](https://github.com/qutip/qutip/blob/master/qutip/cy/src/zspmv.cpp), you will see low level optimization that only activate on certain cpus. This is the main function used in solver (mat*vec) and can be 30% slower or faster than than scipy's version depending on the situation. Without this low level optimization, we are essentially doing the same thing as scipy so should get similar times.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/949#issuecomment-463470158:462,depend,depending,462,https://qutip.org,https://github.com/qutip/qutip/pull/949#issuecomment-463470158,1,['depend'],['depending']
Integrability,"I can move a part of the changes in coefficient to another PR, but not all of them.; I removed `shift` and `norm` from `Coefficient`, they become unused only with the new `QobjEvo`.; I will move the immutable `Coefficient` changes to another PR. The signature of `_BaseElement._call` would be `cdef (double complex, Qobj) _call(self, double t, dict function_qobj)`.; `_EvoElement` would return `(coefficient(t), qobj)` with `qobj` fixed.; `_FuncElement` would return `(1., func(t, args))` with `func` a function based time dependant system.; I also keep a copy of the `Data` instead of reading it from the `Qobj` each time, since it's a python object. For example, in `expect` I do:; ```; element._call(t, ...); out += expect(element.data, state) * element.coeff; ```; If another call to `_call` arrive between the commands, the output would be wrong.; But this call all be solved by splitting `_call`...; `out += expect(element.data(t, ...), state) * element.coeff(t, ...)`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481#issuecomment-822857273:523,depend,dependant,523,https://qutip.org,https://github.com/qutip/qutip/pull/1481#issuecomment-822857273,1,['depend'],['dependant']
Integrability,I can reproduce it with matplotlib `3.9` but actually I am not sure if it is a qutip problem. The error message seems pure matplotlib,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2400#issuecomment-2146968944:104,message,message,104,https://qutip.org,https://github.com/qutip/qutip/issues/2400#issuecomment-2146968944,1,['message'],['message']
Integrability,"I can't merge it if you close the pull request (well technically i can, but not using the github web interface).. Please reopen the PR and I'll try to merge it tomorrow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/246#issuecomment-64207826:101,interface,interface,101,https://qutip.org,https://github.com/qutip/qutip/pull/246#issuecomment-64207826,1,['interface'],['interface']
Integrability,"I cannot give an example without knowing what lambda is.; If the lambda term does not depend on rho, I would not use `mesolve` but just build the matrix using `numpy` and `scipy`.; The other terms can be represented as `qutip.liouvillian(H) - (qutip.spre(T) - qutip.spost(T))/2`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1665#issuecomment-923207818:86,depend,depend,86,https://qutip.org,https://github.com/qutip/qutip/issues/1665#issuecomment-923207818,1,['depend'],['depend']
Integrability,"I cannot reproduce this on either Ubuntu or Windows... `nstep` only sets the maximally allowed number of time steps. That exception is a quite general one. It only says that the ODE integrator fails. But the Larmor example is really a trivial one and if it fails then something very important must have been contaminated. If resinstalling in a fresh environment does not work, I can only suggest to debug at the scipy level.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1896#issuecomment-1140440000:182,integrat,integrator,182,https://qutip.org,https://github.com/qutip/qutip/issues/1896#issuecomment-1140440000,1,['integrat'],['integrator']
Integrability,"I changed back the default integration method to `taylor1.5` for `smesolve` and `platen` for `ssesolve`.; The property that the state stay physical of `rouchon` is actually problematic since even when the `dt` is too large, the state still look fine but is totally wrong. Whereas other methods will get negative eigenvalues or Nan.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2131#issuecomment-1481913534:27,integrat,integration,27,https://qutip.org,https://github.com/qutip/qutip/pull/2131#issuecomment-1481913534,1,['integrat'],['integration']
Integrability,"I closed the issue; it is too vague, sorry about that. From: hrahman12 ***@***.***>; Sent: Wednesday, April 20, 2022 5:16 PM; To: qutip/qutip ***@***.***>; Cc: Anna Naden ***@***.***>; Author ***@***.***>; Subject: Re: [qutip/qutip] Details of QuTiP user's guide (Issue #1759). Hi Anna, thank you for replying can you please give some more information about which particular part/s of the user guides you are finding these errors?. —; Reply to this email directly, view it on GitHub<https://github.com/qutip/qutip/issues/1759#issuecomment-1104512322>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AN2AJU6X7MKML5BRRV4IWHLVGB62PANCNFSM5LYUHNQA>.; You are receiving this because you authored the thread.Message ID: ***@***.******@***.***>>",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1759#issuecomment-1104665213:720,Message,Message,720,https://qutip.org,https://github.com/qutip/qutip/issues/1759#issuecomment-1104665213,1,['Message'],['Message']
Integrability,"I did some tests and ; 1 - Cause by fortran zheer (lapack eigenvalue solver for complex hermitian matrices) (c's version Ok); 2 - It happen when installing the scipy stack with pip but not when installing it with conda.; 3 - It depend on the problem size, 64 seems particularly bad, usually it fails on the second call.; 4 - I only got it in zheevr which is only used in `brmesolve`. But Nathan got it in other tests which use scipy's `eigh`.; 4 - It happen in scipy in the fortan version of lapack:. ```; import numpy as np; from scipy.linalg import eigh; H = random_hermitian(64); eigh(H) # Work fine; eigh(np.asfortranarray(H)) # segfault after a few try, may need to change H; ```. Possible solutions (for zheevr):. - Installing scipy with conda, the easiest solution, but not in our control.; - Finding a way to link clapack from cython. Linking scipy's one would require good knowledge of scipy internals since only one cython interface is provided. Linking to another installation of lapack, but it would require the user to install lapack or install it with qutip. Both seems wrong to me.; - For mac user, call scipy's eigh from cython i zheevr, slower but better than risking segfault.; - Have the code directly in qutip. We can adapt it from OpenBlas: https://github.com/xianyi/OpenBLAS/blob/master/lapack-netlib/LAPACKE/src/lapacke_zheevr.c",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628259492:228,depend,depend,228,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628259492,2,"['depend', 'interface']","['depend', 'interface']"
Integrability,I do not get a build failure under NumPy 1.10.1. What was the particular error message? Any changes would also have to be backward compatible with earlier NumPy versions.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/392#issuecomment-154863591:79,message,message,79,https://qutip.org,https://github.com/qutip/qutip/issues/392#issuecomment-154863591,1,['message'],['message']
Integrability,"I do not have much time to look into this until Monday. However, attached is a time-dependent three-level system, driven by a cavity , that works just fine. Maybe some clues can be found there. ```python; #; # Single photon source based on a three level atom strongly coupled to a cavity; #; # We follow the treatment presented in Kuhn et al.,; # Appl. Phys. B 69, 373-377 (1999),; # http://www.mpq.mpg.de/qdynamics/publications/library/APB69p373_Kuhn.pdf,; # for more details see M. Hennrich's thesis,; # http://mediatum2.ub.tum.de/node?id=602970.; #; # We study the following lambda system,; #; # |e>; # --------; # / \; # Omega / \ g; # / \; # / -------; # ------- |g>; # |u>; #; # where |u> and |g> are the ground states and |e> is the exicted state.; # |u> and |e> are coupled by a classical laser field with Rabi frequency; # Omega, and |g> and |e> by a cavity field with 2g being the single-photon; # Rabi frequency.; #; from qutip import *; from pylab import *. # Define atomic states. Use ordering from paper; ustate = basis(3, 0); excited = basis(3, 1); ground = basis(3, 2). # Set where to truncate Fock state for cavity; N = 2. # Create the atomic operators needed for the Hamiltonian; sigma_ge = tensor(qeye(N), ground * excited.dag()) # |g><e|; sigma_ue = tensor(qeye(N), ustate * excited.dag()) # |u><e|. # Create the photon operator; a = tensor(destroy(N), qeye(3)); ada = tensor(num(N), qeye(3)). # Define collapse operators; c_op_list = []; # Cavity decay rate; kappa = 1.5; c_op_list.append(sqrt(kappa) * a). # Atomic decay rate; gamma = 6; # Use Rb branching ratio of 5/9 e->u, 4/9 e->g; c_op_list.append(sqrt(5 * gamma / 9) * sigma_ue); c_op_list.append(sqrt(4 * gamma / 9) * sigma_ge). # Define time vector; t = linspace(-15, 15, 100); # Define pump strength as a function of time; wp = lambda t: 9 * exp(-(t / 5) ** 2). # Set up the time varying Hamiltonian; g = 5; H0 = -g * (sigma_ge.dag() * a + a.dag() * sigma_ge). H1 = (sigma_ue.dag() + sigma_ue). H = [H0, [H1, '-9 * exp(-",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/771#issuecomment-338360375:84,depend,dependent,84,https://qutip.org,https://github.com/qutip/qutip/issues/771#issuecomment-338360375,1,['depend'],['dependent']
Integrability,"I do not think that much can be done for the mesolver. The update here ; just addresses the resetting of the ODE solver, which is not done in the ; mesolver. I still think that spawning ntraj processes is not a very ; efficient thing to do. So I am working on cleaning that up. However, ; you are correct, moving the ODE creation outside of the mc_alg routine ; does have little effect. > Robert Johansson mailto:notifications@github.com; > December 1, 2014 at 13:48; > ; > Nice speed up! Is there anything here that we could also benefit from ; > in mesolve? Or is it specific to mcsolve in that it mostly affect the ; > ODE restart?; > ; > I doubt that the initial setup of an ODE instance before spawning ; > processes would have any significant impact on the performance (note ; > that multiprocessing does not use threads, it uses processes, so there ; > is no sharing of ODE instances between processes). Creating the ODE ; > instance once in the parent processor, or N times in N processes in ; > parallel therefore should not make much difference, if any.; > ; > —; > Reply to this email directly or view it on GitHub ; > https://github.com/qutip/qutip/pull/264#issuecomment-65020496.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-65020643:352,rout,routine,352,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-65020643,1,['rout'],['routine']
Integrability,"I doc [http://qutip.org/docs/3.1.0/apidoc/functions.html](url) ; Under the section of master equation solver . > Time-dependent operators; > ; > For time-dependent problems, H and c_ops can be callback functions that takes two arguments, time and args, and returns the Hamiltonian or Liouvillian for the system at that point in time (callback format).; > ; > Alternatively, H and c_ops can be a specified in a nested-list format where each element in the list is a list of length 2, containing an operator (qutip.qobj) at the first element and where the second element is either a string (list string format), a callback function (list callback format) that evaluates to the time-dependent coefficient for the corresponding operator, or a NumPy array (list array format) which specifies the value of the coefficient to the corresponding operator for each value of t in twist. It seems that **in the version 3.1.0**, c_ops can be implemented as a callback functions in `mesolve`. Is this true? . Q.2; As mentioned in [https://groups.google.com/forum/#!topic/qutip/aIxxnbQ56W4](url), the callback function has not been developed for `mesolve` at the time of that post. But . > you have a callback function that is called for each time step and which constructs the system Liouvillian Here you are free to construct the collapse operators or Liouvillian in whichever way you want. From this, I think I can use the callback function to define the c_ops and integrate them in **Liouvillian** for `mesolve`. If I am interpreting it right, this can be done for c_ops with some complicated time dependence. Is that right? . _(However it is mentioned in [https://groups.google.com/forum/#!searchin/qutip/time$20dependent/qutip/S0IskSRy2M0/_2L6BzqAKTEJ](url) that I can use a callback function for `mesolve`?)_. Q.3; I know that I cannot use callback functions to define the c_ops directly in `mcsolve`. Can I use the callback functions to define the c_ops and integrate them in **Liouvillian** for `mcsolve` ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/223#issuecomment-223873117:1514,integrat,integrate,1514,https://qutip.org,https://github.com/qutip/qutip/issues/223#issuecomment-223873117,3,"['depend', 'integrat']","['dependence', 'integrate']"
Integrability,"I don't get any error in both cases. ; What is your `qutip.about()` message? ; By the way, QuTiP does not support anymore Python 2.7, see #882. ; My specifications are; ```; QuTiP Version: 4.3.1; Numpy Version: 1.16.2; Scipy Version: 1.2.1; Cython Version: 0.28.5; Matplotlib Version: 2.2.3; Python Version: 3.6.7; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/796#issuecomment-497299113:68,message,message,68,https://qutip.org,https://github.com/qutip/qutip/issues/796#issuecomment-497299113,1,['message'],['message']
Integrability,"I don't know if it is relevant, but I copy-pasted the block in the first [post](https://github.com/qutip/qutip/issues/932#issue-378533309) of the thread and I do not get an error message by running it on OS High Sierra 10.13.6 in a Jupyter notebook. There is a clang warning ; ```; libstdc++ is deprecated; move to libc++ with a minimum deployment target of OS X 10.9 [-Wdeprecated]; ```; Other details. ```; QuTiP Version: 4.3.1; Numpy Version: 1.14.2; Scipy Version: 1.1.0; Cython Version: 0.28.5; Matplotlib Version: 2.2.3; Python Version: 3.6.7; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-466251384:179,message,message,179,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-466251384,1,['message'],['message']
Integrability,I don't know what the `continuous-integration/travis-ci/push` failing means...,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1188#issuecomment-593098940:34,integrat,integration,34,https://qutip.org,https://github.com/qutip/qutip/pull/1188#issuecomment-593098940,1,['integrat'],['integration']
Integrability,"I don't know, since jax is developed by google I expect it to work well with gpus it provide through collab... We don't use schur decomposition for mesolve directly. I think it's the integrator from diffrax that does, if not it could be the norm (it's using trace norm which call sqrtm instead of trace, fixed in #2408). Maybe trying other ODE solver or not normalizing would work. Neill seems to have run most of his test using dopri:. ```; from diffrax import Dopri5, PIDController. options = {; ""method"": ""diffrax"",; ""normalize_output"": False,; ""stepsize_controller"" : PIDController(rtol=1e-8, atol=1e-6), # This is now the default.; ""solver"": Dopri5(),; }; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2320#issuecomment-2090722078:183,integrat,integrator,183,https://qutip.org,https://github.com/qutip/qutip/issues/2320#issuecomment-2090722078,1,['integrat'],['integrator']
Integrability,"I don't think either ""missing"" or ""full"" should be used much with pure qutip. Only with plugins like qutip-jax it makes any sense to me. With ""missing"", you could set it so it will end up all in jax format and not have too much issues. . ""full"" will probably break HEOM, some steadystate feature, slow down scipy integrators, etc. ""missing? should be safe. Ok for `default_dtype_scope`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2519#issuecomment-2407529422:313,integrat,integrators,313,https://qutip.org,https://github.com/qutip/qutip/pull/2519#issuecomment-2407529422,1,['integrat'],['integrators']
Integrability,"I don't think it breaks the functional API at all - in fact it almost makes it stronger, since everything is a ""function"" at every stage. This kind of partial application is classic part of functional programming. Perhaps I don't understand _why_ you want to move to a class-based API? I'd be quite strongly against having the user have to instantiate classes to do very simple parts like creating operators. Certainly in Python programming, I don't think a class-based interface is de facto the right sort to aim for, and procedural is much more ""Pythonic"". For one, it's a lot of unnecessary boilerplate for simple operations. It adds cognitive complexity for the advanced user to decide ""should I use `displace` or `Displacer`?"", and in the strong majority of use-cases, the operator creation is not a computational bottleneck so we'd be adding it for no gain. A lot of operators have no meaningful reason to live in a class, like `sigmax` and so on, so now you have a split between operators that need a class and operators that don't, or you do something really crazy like requiring the user to do; ```python; sx_builder = qutip.operators.SigmaX(); sx = sx_builder.get_operator(); sy_builder = qutip.operators.SigmaY(); sy = sy_builder.get_operator(); sz_builder = qutip.operators.SigmaZ(); sz = sz_builder.get_operator(); ```; when all they wanted was `qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()`. Obviously that example is a bit facetious, but what benefit does the user derive from having to write boilerplate to access simple functionality?. All the operators already share a class in `Qobj`, and things like `displace` and `sigmax` are factory methods of `Qobj`. What shared functionality do the factory methods possess that means they should be classes?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332:470,interface,interface,470,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332,1,['interface'],['interface']
Integrability,"I don't think it's your code, but I haven't looked in to it in sufficient detail yet. As it stands installing qutip is fine but importing it fails, as it is unable to find the C headers, and is spitting out multiple errors of the form ""distutils.errors.CompileError: command '/usr/bin/clang' failed with exit status 1"". I can provide the full error messages sometime tomorrow if I'm still unable to solve the problem.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/552#issuecomment-260194878:349,message,messages,349,https://qutip.org,https://github.com/qutip/qutip/issues/552#issuecomment-260194878,1,['message'],['messages']
Integrability,"I don't think we should print the whole bibtex content to screen by default when calling about(). I think a message to say.; ""Please cite QuTiP in your publication - for you convenience a bibtex file was saved to:\n"".join(filepath). I think really we should provide some way to turn off the saving of the bibtex file in settings as well",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/752#issuecomment-357751449:108,message,message,108,https://qutip.org,https://github.com/qutip/qutip/pull/752#issuecomment-357751449,1,['message'],['message']
Integrability,"I don't want the way to catch error depend on the map, `serial_map` and `loky_map` both return the error of the first failing iteration and stop there. Having `parallel_map` failing differently will mean that every time we want to catch an error in `mcsolve`, etc. we will have to catch both the expected error and the custom `ParallelMapException`. It also hide the kind of error and prevent us to act on it. I still think that stopping the map and returning the first error is the best options. It will ensure that all map functions fail the same way. In our case, the raised exceptions should be consistent so we should not need run all iteration to see every ways it can fail. And we don't waste computing time to compute result that will not be returned. Another options would to not raise any error and return the finished iteration. For mcsolve, we could have a result returning 99% of the asked trajectories with the note that 1% failed because of overwork from the solver. Trowing away all the work done for one error feels bad. However I can see this not being safe, so it would be a solver options for the user to set.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1969#issuecomment-1209406180:36,depend,depend,36,https://qutip.org,https://github.com/qutip/qutip/pull/1969#issuecomment-1209406180,1,['depend'],['depend']
Integrability,"I don’t know. It worked for me when I tried to install QuTiP from source; —with-openmp. The error was a different and I am on a different MacOS (I; also tried a conda install llvm, but what worked was gcc for me, with; openmp). I understand that you trying to install QuTiP? If so, how? conda / source /; pip? Consider doing it via conda if you are interested in the stable; version release (4.3), by activating the conda-forge channel as detailed in; the documentation. If QuTiP is installed and you receive this error while doing a specific; task, can you copy paste the message of qutip.about() here?. On Sat, 9 Mar 2019 at 14:37, Xiao <notifications@github.com> wrote:. > Try conda install gcc.; >; > Does that mean I should use gcc from the Anaconda directory?; >; > —; > You are receiving this because you commented.; >; >; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/965#issuecomment-471148065>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AN5ffFcanH6qaCezLIKtW4SflaVsZ63Aks5vU0iCgaJpZM4bmfhd>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/965#issuecomment-471153754:573,message,message,573,https://qutip.org,https://github.com/qutip/qutip/issues/965#issuecomment-471153754,1,['message'],['message']
Integrability,"I ended up here while implementing a Lyapunov-based control algorithm that uses the state to generate time dependent controls as some thing like:. f(t, args) = sin(args[""A""]*t)*(args[""current_state""]).tr() . It was a bit difficult to understand how to setup the solver to use this feature. I kind of got it to work and have a nice example that I can make into a tutorial. Will post soon. But we should definitely write some documentation about it both in the Qobj evo part, options section as well as mesolve. Is there an agreement on how this should be handled? Are we happy with passing it as an ""args""? I still am not sure why I have to use the ""state_as_Qobj=Qobj"" key in the args initialization to get this working. . In any case this should be documented well. In future versions of the Solvers, I suppose this problem would be easier to handle with stepping through the solver.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1141501061:107,depend,dependent,107,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1141501061,1,['depend'],['dependent']
Integrability,"I find Python's `collections` module a good example (https://docs.python.org/3/library/collections.html). Python moved Collections Abstract Base Classes like `Iterable` to the `collections.abc` submodule. In python3.7, . The following code still works but there will be a deprecation warning; ```; from collections import Iterable; ```; ```; import collections; collections.Iterable; ```. It won't disturb other users since there is no warning when; ```; import collections; ```; ```; from collections import *; ```. But the following will give an error, ; ```; >>> from collections import *; >>> Iterable; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; NameError: name 'Iterable' is not defined; ```; So for those who use ``from qutip import *``, they still don't know what happens. I'm not sure if it is possible to add a deprecation warning for this case separately. Maybe we can modify the top-level __init__.py so that we `qip` function is imported directly with the `qutip` namespace, it is wrapped with a deprecation warning. In this way, the warning only shows when the functions are called. Not sure if this is practical, though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1071#issuecomment-520506756:1023,wrap,wrapped,1023,https://qutip.org,https://github.com/qutip/qutip/issues/1071#issuecomment-520506756,1,['wrap'],['wrapped']
Integrability,"I find the discussion here relevant to a question I asked in QuTip mail; list. (Hope it doesn't interrupt your discussions:p). My previous question with the title ""Possible to realize a decay rate; depending on state occupation?"" can be seen here; https://groups.google.com/forum/#!topic/qutip/BqUZQEQN1c4. Paul Nation; kindly gave me some directions there. He suggested me define a Liouvillian with a Python function and; use rhs_with_state for solving. But unfortunately I didn't figure out how; this should be done. In case you are familiar with this approach, would you; please enlighten me? Thanks a lot!. Best regards, Pu Zhang; --; Faculty at School of Physics, Huazhong University of Science and Technology; Room 819 (N.), Yifu Science and Technology Building; 1037 Luoyu Road, Wuhan, China; E-mail: puzhang0702@hust.edu.cn <puzha@fotonik.dtu.dk>; Homepage: www.researchgate.net/profile/Pu_Zhang4; Phone: +86 18871860394. On Wed, Feb 6, 2019 at 6:56 PM Paul Nation <notifications@github.com> wrote:. > It is. But what is the use case where that cannot be done?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/946#issuecomment-460981727>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AGc5W_SnXDRo3hWJnnYT1BjkhC5A3Rvsks5vKrTNgaJpZM4agDjP>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-461354069:198,depend,depending,198,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-461354069,1,['depend'],['depending']
Integrability,"I had a quick play with the feature, for the cases I had stumbled on before, with `eigenstates()' ignoring default_dtype, using the scope of 'full' covers it now. I understand having this work with just 'creation' scope is problematic because you want to make sure the dtype is not used on results lists. heom+full breaks with dia and dense, as expected!. speaking of heom, manually converting the RHS to jaxdia and doing stuff it worked fine. i think generalizing the RHS construction in heom away from csr is probably very difficult without huge performance drop in the construction, so perhaps some kind of wrapper or option to do conversion of types after construction would be fine?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2519#issuecomment-2418554815:610,wrap,wrapper,610,https://qutip.org,https://github.com/qutip/qutip/pull/2519#issuecomment-2418554815,1,['wrap'],['wrapper']
Integrability,"I have added the unit tests and moved the old ptrace to a new 'legacy' folder. . The permute method for Qobj's has a similar routine to those for selecting indices in ptrace. I have switched that code to the new ptrace functions as well, but there is some additional cleanup that needs to be done.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/634#issuecomment-272784039:125,rout,routine,125,https://qutip.org,https://github.com/qutip/qutip/pull/634#issuecomment-272784039,1,['rout'],['routine']
Integrability,"I have added this to 3.3, but it can likely be squeezed into the 3.2 branch, depending on the release timeframe.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/470#issuecomment-216433792:77,depend,depending,77,https://qutip.org,https://github.com/qutip/qutip/pull/470#issuecomment-216433792,1,['depend'],['depending']
Integrability,"I have an updated version of this using our new spmv code. Should be coming in the next couple of days. Lots of underlying stuff needs to be done for this to be integrated, and turned on automatically. Checked on Win using mingwpy and it works as well. Since the clang with OSX does not have openmp support, that is the only platform where some work needs to be done.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/438#issuecomment-277362135:161,integrat,integrated,161,https://qutip.org,https://github.com/qutip/qutip/issues/438#issuecomment-277362135,1,['integrat'],['integrated']
Integrability,"I have commented out numba. I agree with you that grape.py is not suitable, but I couldn't really wrap my head around the pulseoptim class. Hence, the code. I will have a look at https://github.com/lifeishard/PADQOC",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1031#issuecomment-542520840:98,wrap,wrap,98,https://qutip.org,https://github.com/qutip/qutip/issues/1031#issuecomment-542520840,1,['wrap'],['wrap']
Integrability,I have found the issue. The wrapper to zvode provided by scipy does not allow for setting itask=5 in the single step mode. This mode does not overshoot the endpoint of the interval like mode 2 which is the fixed mode in scipy. One must also bypass much of the scipy code to efficently reset the integrator. I will begin working on both and work on sending a pull to the scipy people. In the mean time we could probably overload the builtin class to get what we want before scipy gets around to it.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-64601865:28,wrap,wrapper,28,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-64601865,2,"['integrat', 'wrap']","['integrator', 'wrapper']"
Integrability,I have just successfully installed qutip using pip into a fresh conda env (python=3.6) on Linux Mint. I believe this Mint is pretty much identical to Ubuntu.; All dependencies were installed automatically. qutip tests run fine.; So I don't think that there is anything wrong with our setup configuration.; Note we do not recommend installing qutip into a system python env - especially on Linux.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/739#issuecomment-323319515:163,depend,dependencies,163,https://qutip.org,https://github.com/qutip/qutip/issues/739#issuecomment-323319515,1,['depend'],['dependencies']
Integrability,"I have noticed some performance benefits with openblas but nothing noticeable for the sparse matrix routines. Multithreading gets some extra performance but the scaling is sublinear for sure. Just a couple of percent. From what I understand many sparse routines are limited by memory bandwidth. This is usually discussed in the context of the spmv. The biggest benefit when going to openblas is the removal of the umfpack out of memory errors. I dont think this has anything to do with the actual openblas functions but somewhere in the build process (suitesparse, metis, or something) the memory limitation is removed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/55#issuecomment-25365509:100,rout,routines,100,https://qutip.org,https://github.com/qutip/qutip/issues/55#issuecomment-25365509,2,['rout'],['routines']
Integrability,"I haven't checked, but I'd bet it's because we construct a new Liouvillian `QobjEvo` on entry to `mesolve` with collapse operators. If so, this is definitely a bug - we should have detected that the collapse operators have no time-dependence, so don't need to overwrite the `tlist`. As a temporary work-around, you can construct the Liouvillian directly and pass it to `mesolve`:; ```python; liouvillian = qutip.liouvillian(ham, collapse); qutip.mesolve(liouvillian, rho, eval_times); ```; which should work fine for now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1560#issuecomment-849604641:231,depend,dependence,231,https://qutip.org,https://github.com/qutip/qutip/issues/1560#issuecomment-849604641,1,['depend'],['dependence']
Integrability,"I just ran locally:; `make latexpdf SPHINXOPTS=""-W --keep-going -T""`; And got `build succeeded` message.; The error on the project pipeline shows:; `Unknown interpreted text role ""cls"".` for the `me_solver`. Do you have an idea of why could this be happening?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2167#issuecomment-1567334034:96,message,message,96,https://qutip.org,https://github.com/qutip/qutip/pull/2167#issuecomment-1567334034,1,['message'],['message']
Integrability,"I just signed up. Let me know if you need anything else. On Sat, Jun 25, 2022, 6:12 AM Nathan Shammah ***@***.***>; wrote:. > @trentfridey <https://github.com/trentfridey> we cannot find your contact; > details on unitaryHACK, please sign up; > https://airtable.com/shrJeycewBFqdot2B to be able to claim your bounty!; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/1927#issuecomment-1166247981>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AC4OOFYJ47HU6VQVYITDIULVQ3LQ3ANCNFSM5YMIBCDQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1927#issuecomment-1166314030:623,Message,Message,623,https://qutip.org,https://github.com/qutip/qutip/pull/1927#issuecomment-1166314030,1,['Message'],['Message']
Integrability,"I made a custom exception class that depend on all the raised exceptions classes so we can catch it.; It feel somewhat hacky, `ExceptionGroup` would work a lot better, but we won't be able to use it for a few years.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1969#issuecomment-1208599699:37,depend,depend,37,https://qutip.org,https://github.com/qutip/qutip/pull/1969#issuecomment-1208599699,1,['depend'],['depend']
Integrability,"I mean the motivation behind the np array format itself. And indeed, the spline assumes equidistant points. > On Aug 24, 2016, at 12:04, kafischer notifications@github.com wrote:; > ; > I'm a bit confused by your comment: Are asking about the purpose of the np array format itself or did you mean why it should accept non-linear tlists?; > ; > The reason it should accept non-linear tlists is because such a thing is good to have when you simulate rapid dynamics followed by slow dynamics. This currently works for all other types of time-dependent formats, so it should also work for this one to avoid confusion. The cubic spline would indeed be nicer here, except it seems to me like it assumes the x values are linear?; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub https://github.com/qutip/qutip/pull/520#issuecomment-242156352, or mute the thread https://github.com/notifications/unsubscribe-auth/ABMPqQvb7gOJPOTVk9VN5KseYyslkRUTks5qjIe8gaJpZM4JpQHD.; > ; > Untracked with Trackbuster https://trackbuster.com/?sig",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-242156997:539,depend,dependent,539,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-242156997,1,['depend'],['dependent']
Integrability,I need to fix (or hide) some warning given out by the integrator during the test. I will do that before I merge,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455#issuecomment-194686130:54,integrat,integrator,54,https://qutip.org,https://github.com/qutip/qutip/pull/455#issuecomment-194686130,1,['integrat'],['integrator']
Integrability,"I observed something strange after your update. On windows, with Jupyter Notebook, the kernel crashes every time when I try to plot the circuit. No error message. Does it run normally on your OS?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605285010:154,message,message,154,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605285010,1,['message'],['message']
Integrability,"I prefer 2 in for openmp, it is fixed at install. It could be in `setup.py` or in a cython file with conditional compilation. The mkl flag depends on numpy's blas python interface. Cython use of blas/lapack is independent of it. . (Yes, since this week, I did not know this existed before)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1282#issuecomment-638966604:139,depend,depends,139,https://qutip.org,https://github.com/qutip/qutip/pull/1282#issuecomment-638966604,2,"['depend', 'interface']","['depends', 'interface']"
Integrability,"I quickly ran the problem, and it is still the slope is too large. Going from 100->50 in tanh resolves the issue. In order to look like a step pulse, you want the rate of change of the pulse to be much higher than the system time-scales. In your case, the system is on the time-scale of O(1), while, for tanh(100) the rate is ~60 at front and back, where as for tanh(50), it is ~30. In both cases, your system will see an effective step pulse. . My thinking is that if the argument of tanh is too large, then there is a big separation of time-scales in the problem. The ODE solver is trying to capture both the slow system dynamics, and the rapid step terms, and it is finding it difficult. This is a common issue with multiple, wide-ranging time scales. > On Oct 20, 2017, at 21:44, nlphysics <notifications@github.com> wrote:; > ; > Thanks. It's not that urgent. I'm just curious what the reason for that behavior might be. It's puzzling; > why does it apparently depend on the dimensions of dm as well as on the number of time steps.; > ; > —; > You are receiving this because you were assigned.; > Reply to this email directly, view it on GitHub <https://github.com/qutip/qutip/issues/771#issuecomment-338361319>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABMPqbL-dF5jtatZLSmpxx_RYASR_2zEks5suWiugaJpZM4P__42>.; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/771#issuecomment-338362826:966,depend,depend,966,https://qutip.org,https://github.com/qutip/qutip/issues/771#issuecomment-338362826,1,['depend'],['depend']
Integrability,"I rechecked the equations:; The stochastic integration has the general form:; ![image](https://user-images.githubusercontent.com/17770236/140782543-9d8ff092-b9cb-4b17-98e8-85ab0254b425.png); For `ssesolve`:; ![image](https://user-images.githubusercontent.com/17770236/140783379-72e48698-4f2d-4ebc-bfac-95630e8724b1.png). And for `smesolve`:; ![image](https://user-images.githubusercontent.com/17770236/140784174-e9fdb33b-2fee-4795-a93d-e7d1abe32ddd.png). The liouvillian use both the `sc_ops` and `c_ops` for collapse, but the `d_2` part only use `sc_ops`. In heterodyne detection, each `sc_ops` is split into 2 parts computed individually: ; ![image](https://user-images.githubusercontent.com/17770236/140784227-39e67d38-33bf-47c8-ab57-afd41c23afa6.png). `m_ops` for homodyne:; ![image](https://user-images.githubusercontent.com/17770236/140784715-a7861965-6b30-4a47-a7a6-e19d4dd8b430.png). `m_ops` for heterodyne:; ![image](https://user-images.githubusercontent.com/17770236/140784760-5adb2535-ff63-4b2d-bba8-b10b6422b5db.png). In both case the `dW`'s default is `1`. In the heterodyne case, the `sqrt(2)` is expected to be included inside `dW_factor` when it's length is the same as `m_ops`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1706#issuecomment-963395778:43,integrat,integration,43,https://qutip.org,https://github.com/qutip/qutip/issues/1706#issuecomment-963395778,1,['integrat'],['integration']
Integrability,"I remember we also encountered this os dependency before. `np.int` is also not the same on Windows and Linux, which has its root in C long.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1313#issuecomment-655137114:39,depend,dependency,39,https://qutip.org,https://github.com/qutip/qutip/pull/1313#issuecomment-655137114,1,['depend'],['dependency']
Integrability,"I report local tests failing on my MacOS 10.13.6 by running qutip.testing.run(). Tests fail for python 3.7 and 3.6 environments, if QuTiP 4.4. is installed in develop mode (openmp = True). ; Tests fail also for QuTiP 4.3.1 installed with conda. . ### py36; Broken test for python 3.6 with: (1) QuTiP 4.4-dev, with openmp =True and (2) conda install qutip, QuTiP 4.3.1: ; Error Message below: ; ``` ; Metrics: Trace dist. & Fidelity mixed/pure inequality ... ok ; Metrics: Check avg gate fidelities for random ... ; python(35852,0x7fff9757f380) malloc: *** error for object 0x7fe189168a10: incorrect checksum for freed object - object was probably modified after being freed. *** ; set a breakpoint in malloc_error_break to debug ; Abort trap: 6 ---------------------------------------------- ; ``` . Building the dev environment: ; ``` conda create --name qutip-dev-44-py36 ; source activate qutip-dev-44-py36 ; conda install python=3.6 cython numpy scipy nose jupyter matplotlib; python setup.py develop --with-openmp; ``` . ### py37; Broken test for python 3.7 with: (1) QuTiP 4.4-dev, with openmp =True and (2) conda install qutip, QuTiP 4.3.1. Error Message below: ; ``` ; qutip.tests.test_qobj.test_expect_exception ... ok Qobj data ... ok Qobj type ... ok Qobj Hermicity ... ok ; Qobj unitarity ... ok ; Qobj shape ... ok ; Qobj: multiplication w/ non-square qobj.dims ... ok ; Qobj addition ... ok ; Qobj subtraction ... ok ; Qobj multiplication ... ok ; Qobj division ... ok ; Qobj power ... ; python(35379,0x7fff9757f380) malloc: *** error for object 0x7fbf1089fa90: incorrect checksum for freed object - object was probably modified after being freed. *** ; set a breakpoint in malloc_error_break to debug ; Abort trap: 6 ; ``` . Building the dev environment: ; ``` conda create --name qutip-dev-44-py37 ; source activate qutip-dev-44-py37 ; conda install python=3.7 cython numpy scipy nose jupyter matplotlib; python setup.py develop --with-openmp```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-473772867:377,Message,Message,377,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-473772867,2,['Message'],['Message']
Integrability,"I said above):. > Oh, one thing that I'd like to suggest we _don't_ do: use this interface to _implicitly_ create `Qobj` inside our functions.; ; To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. You can see that it didn't work as intended, because they've had to add `__array_function__` and other additional methods on top to start to make it work, and it's still not perfect - even `scipy.sparse` have/had problems implementing them. While it might work in your particular case, making sure that nothing funny happens in the abstract across _all_ possible implementors of the interface while still having it do something useful is a very tricky problem, as evidenced by Numpy. Any conversion is going to be lossy for some people (perhaps not you, but it will be for others), and that means the behaviour for users will be surprising in some cases. In my opinion, if we're going to have a `__qutip_qobj__` interface, the interface should be defined for one operation only, and should never be called implicitly. I'm not entirely close-minded to alternate views here, but given the problems Numpy had (whose team I have no doubt are much smarter than I am), I'm really not enthusiastic about any implicit conversions. I really do appreciate the interest, and I _am_ keen to let us have better compatibility with the rest of the community, but there are a lot of design concerns that we're going to want to work on our side first - I just want to caution you in case you're trying to work towards a PR, because I'm not close to being happy to accept one, yet. If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries, and we'll want to write out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:2630,interface,interface,2630,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,2,['interface'],['interface']
Integrability,"I see, `tensor` does not support this. You need to use `tensor` for each `Qobj` and then construct the time-dependent format.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1183#issuecomment-588902598:108,depend,dependent,108,https://qutip.org,https://github.com/qutip/qutip/issues/1183#issuecomment-588902598,1,['depend'],['dependent']
Integrability,"I see, the docs look very nice indeed!; @sahmed95 Go ahead and merge this when the tests pass. Better if you do it, as you can tidy the commit message during the squash.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/861#issuecomment-396895055:143,message,message,143,https://qutip.org,https://github.com/qutip/qutip/pull/861#issuecomment-396895055,1,['message'],['message']
Integrability,I see. `propagator` performed better with a system of d=2^5 in a simple test. I better do some testing of even larger systems then before merging this. Any thoughts on why `propagator` might be slower also for small systems and short integration times? Some overhead related to parallelization? Thanks for the info.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/502#issuecomment-230108497:234,integrat,integration,234,https://qutip.org,https://github.com/qutip/qutip/pull/502#issuecomment-230108497,1,['integrat'],['integration']
Integrability,I slightly edited the question to make the code easier to read. You should probably consider using the array-based format https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#methods-for-writing-time-dependent-operators. Precompute the `q_0` and `q_02` as NumPy arrays with respect to each `t` in the `t_list` using `np.gradient`. Then give them to the solver.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1834#issuecomment-1065163266:211,depend,dependent-operators,211,https://qutip.org,https://github.com/qutip/qutip/issues/1834#issuecomment-1065163266,1,['depend'],['dependent-operators']
Integrability,"I started to look into pypi a while ago and plan to add qutip there before the next release. However qutip depends on a C compiler and optionally fortran compiler, and some changes in our setup.py file is required to get it to work with pip, so it hasn't been done yet. It's on the todo list though. As for homebrew, it doesn't seem to have many of the requirements that qutip needs, such as numpy and scipy etc. For some reason they are in a separate homebrew repository.. Without these it wouldn't make much sense to submit a qutip formula to the official homebrew repository.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/62#issuecomment-27491906:107,depend,depends,107,https://qutip.org,https://github.com/qutip/qutip/issues/62#issuecomment-27491906,1,['depend'],['depends']
Integrability,"I think it should be possible to do this within the pytest framework without touching the package `setup.py` or `MANIFEST`. [`pytest.fixture`](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data) seems a natural choice for loading data. For file accessibility, [this](https://stackoverflow.com/questions/46019170/how-do-you-properly-integrate-unit-tests-for-file-parsing-with-pytest) might help. Porbably @jakelishman knows more about the natural way of doing this with pytest?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1291#issuecomment-655970508:346,integrat,integrate-unit-tests-for-file-parsing-with-pytest,346,https://qutip.org,https://github.com/qutip/qutip/pull/1291#issuecomment-655970508,1,['integrat'],['integrate-unit-tests-for-file-parsing-with-pytest']
Integrability,"I think it should work if lines 398 - 405 are replaced with this:. ```; if not args_new:; args_new = args; elif isinstance(args, dict):; args_new.update(args); else:; raise ValueError(""Time-dependent array format requires args to "" +; ""be a dictionary""); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/199#issuecomment-49743536:190,depend,dependent,190,https://qutip.org,https://github.com/qutip/qutip/issues/199#issuecomment-49743536,1,['depend'],['dependent']
Integrability,"I think it was indeed a version problem, but I can't tell exactly why it happened. Re-installing dependencies from scratch seems to have solved the issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2468#issuecomment-2186847059:97,depend,dependencies,97,https://qutip.org,https://github.com/qutip/qutip/issues/2468#issuecomment-2186847059,1,['depend'],['dependencies']
Integrability,"I think it would be great to have a fast implementation of tensor contraction. However, QuTiP has moved on since this PR and I think the right way to implement this now would be to add a new specialization to the data layer for tensor contraction (maybe something like einsum) and to implement that instead (or even just to re-implement methods for the new CSR representation). @IIAOPSW If you're up for giving that a try, that would be awesome. If not, I might close this PR and we can revisit it after QuTiP v5 alpha has been released. @IIAOPSW Separately, I've read through the code the PR, but I'd still like to get a high-level summary of the algorithm you're implementing (or a reference). Quite a lot of work has been done in optimizing these contractions in recent years, and it would be nice to implement a good algorithm in QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/883#issuecomment-983852684:66,contract,contraction,66,https://qutip.org,https://github.com/qutip/qutip/pull/883#issuecomment-983852684,3,['contract'],"['contraction', 'contractions']"
Integrability,"I think it's okay for the integrator options to be described in the documentation for the integration -- it can't really go anywhere else. The solver documentation can then point to the documentation for the built-in integrators, and mention that it is possible for third-party packages to provide additional integrators.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174444894:26,integrat,integrator,26,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174444894,4,['integrat'],"['integration', 'integrator', 'integrators']"
Integrability,"I think that this is the correct solution though, so big bonus points for hunting this down! At work, we have no use for OSX, and would love py3 on win, so I can fiddle around to get something working. Having two separate sources may be the route we need to go. It wouldn't be the end of the world, but should be avoided unless absolutely necessary.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/647#issuecomment-279727419:241,rout,route,241,https://qutip.org,https://github.com/qutip/qutip/issues/647#issuecomment-279727419,1,['rout'],['route']
Integrability,"I think the best solution for this might be to set logging level to DEBUG by default in get_logger, and only actually log debug messages if qutip.settings.debug is True. This is anyways the way it should be done, because calling logger.debug(...) gives an overhead that we don't want if the debug flag is set to false. So the usage pattern should be. ```; if qutip.settings.debug:; logger.debug(....); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/261#issuecomment-63601461:128,message,messages,128,https://qutip.org,https://github.com/qutip/qutip/pull/261#issuecomment-63601461,1,['message'],['messages']
Integrability,"I think the code ciuld be simplified for the user. The interface should be like the other solvers. E.g. no need to call odeint by hand, etc..",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-332188600:55,interface,interface,55,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-332188600,1,['interface'],['interface']
Integrability,"I think the current behaviour is fine, it just depends on the way the kronecker product is done in QuTiP. Pinging @nwlambert.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1285#issuecomment-643272712:47,depend,depends,47,https://qutip.org,https://github.com/qutip/qutip/issues/1285#issuecomment-643272712,1,['depend'],['depends']
Integrability,"I think the module should really be `qutip.testing` (or `qutip.test` if the name's already taken), not `qutip.core.data.testing`, if you're going to add one. It's very likely to be the case in the future (if it isn't already) that you'll need additional dependencies to define the tests, and you don't want to force _all_ runtime users to have them to install QuTiP. If you put the package in a separate top-level module, it's _far_ easier to separate out all the code, and have `qutip/__init__.py` not import `qutip.testing`, so things won't break. Also, tests generally need to work with a fully imported version of the module. If we start putting testing infrastructure in the core, we're going to encode a whole lot of cyclical dependencies right away, or end up with `testing` modules scattered all across the codebase, for no real gain. For discovery: that would only happen during test generation, which comes after importing the modules and defining the classes, so you'd still be able to define tolerances and influence how the tests ran. The problem with _not_ having discovery is that it becomes very easy to forget to test a function, and with so much of the machinery automated, it's also easy to forget it when reviewing a PR. That's particularly true once you have external contributors writing these sorts of things - we have it in Qiskit, where people add things to our ""standard equivalence library"", and new contributors and new reviewers don't know where all the different tests are, so our discovery tests have helped catch bugs. That happens even with super experienced team members. I'd argue that code coverage metrics are possibly a better way of detecting missing tests - that fails safe if you add broken code and forget to test it, whereas having to specify the tests explicitly means you can accidentally add broken code to a dispatcher and not know, if you forgot to add the test.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-981562735:254,depend,dependencies,254,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-981562735,2,['depend'],['dependencies']
Integrability,"I think the renaming is fine for 4.6.3, it is called by `expect` of the python interface, but the cython interface is not expected to be used by the users.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1784#issuecomment-1027982472:79,interface,interface,79,https://qutip.org,https://github.com/qutip/qutip/pull/1784#issuecomment-1027982472,2,['interface'],['interface']
Integrability,I think there are some optimized Cython routines which for some of the solvers which need cython in run-time. Not completely sure about it. Let me check.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/893#issuecomment-403675579:40,rout,routines,40,https://qutip.org,https://github.com/qutip/qutip/issues/893#issuecomment-403675579,1,['rout'],['routines']
Integrability,"I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. It might be faster already if you evaluate the piecewise varying parts into one ""constant"" part at each point. This isn't guaranteed, because it involves copying rather more data _before_ the call (to construct the constant matrix once), but if the integrator would need to take many intermediate time steps, I expect it would win out. Would something like this work for you?; ```python; times = [0, ...]; # Liouvillians for parts you have control over; control_liouvillians = [qutip.liouvillian(h) for h in control_hamiltonians]; # The time-dependent Hamiltonian for stuff you're not controlling; base_hamiltonian = qutip.QobjEvo([H0, [H1, time_dependence], ...]); # Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:322,depend,dependent,322,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,3,"['depend', 'integrat']","['dependent', 'integrator']"
Integrability,"I thought we had resolved the installation issues with the Fortran side by making the MC solver a optional (default to False).; I am not that I have fully digested everything in this thread, but @zerothi seems confident that there is just some small change that we need to improve integration with the latest Numpy. Its not clear to me what are the risks or other downsides.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/392#issuecomment-155040632:281,integrat,integration,281,https://qutip.org,https://github.com/qutip/qutip/issues/392#issuecomment-155040632,1,['integrat'],['integration']
Integrability,"I tried to solve this issue. It seems like this is known, and expected, behavior of `plt.show()`, described e.g. here https://stackoverflow.com/questions/50452455/plt-show-does-nothing-when-used-for-the-second-time/51005555. The workaround depends on the user environment. For Ipython one uses `display()` function from `IPython.display`, while in other cases using `fig.show()` instead of `plt.show(fig)` works. This would however make the code more involved and environment-dependent, so I didn't decide to submit a PR right away, but I can do with the above fix if somebody from qutip team agrees.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/989#issuecomment-493659601:240,depend,depends,240,https://qutip.org,https://github.com/qutip/qutip/issues/989#issuecomment-493659601,2,['depend'],"['dependent', 'depends']"
Integrability,"I wanted to follow up on the previous message. Are there indeed important performance reasons why basis(N, n) is by default implemented densely:. `dtype = dtype or settings.core[""default_dtype""] or _data.Dense`. as opposed to . `dtype = dtype or settings.core[""default_dtype""] or _data.CSR` ?. I similarly have run into issues where much of my existing code using collapse operators of the form `basis(N, n) * basis(N, n).dag()` takes significantly longer to run (or runs out of memory) in 5.0.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-2028822978:38,message,message,38,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-2028822978,1,['message'],['message']
Integrability,"I was claiming that the algorithm from the Molmer paper is different because it relies on small timesteps and it does not use stepping back (or more generally, it does not use any form of root finding). They are probably equivalent, but I did not find the equivalence obvious. Thanks for the reference, I will check it out. Also, for the sake of more efficient root finding (if I understand correctly currently you are just repeating the integration over a smaller interval) you might find this interesting: http://mail.scipy.org/pipermail/scipy-user/2010-March/024890.html",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/344#issuecomment-105091967:438,integrat,integration,438,https://qutip.org,https://github.com/qutip/qutip/issues/344#issuecomment-105091967,1,['integrat'],['integration']
Integrability,"I was imagining something much simpler for the exception class. There is a backport of the exceptiongroup stuff to older Pythons that we could use if we wanted to: https://pypi.org/project/exceptiongroup/. It's another dependency, but it will mean that on Python 3.11 people could start using ExceptionGroup and `except*` immediately if they wanted to. Users on Python 3.10 and below would have to catch ExceptionGroup or use the backport's ugly `with catch(...)` mechanism. . Then, many years from now when Python 3.10 is obsolete, we could drop the backport entirely. Personally I'm in favour of the simpler `ParallelMapException` that doesn't inherit from all the other exceptions. Then when 3.11 is out we can make `ParallelMapException` inherit from `ExceptionGroup` and 3.11 users will be able to use `except*`. People supporting 3.10 and below will have to use `except ParallelMapException`, but that will work just as well on 3.11.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1969#issuecomment-1209370437:219,depend,dependency,219,https://qutip.org,https://github.com/qutip/qutip/pull/1969#issuecomment-1209370437,1,['depend'],['dependency']
Integrability,"I will update my contribution as soon as I come back from holidays. Best, Jérôme. -------- Message original --------; Objet : Re: [qutip/qutip] Update steadystate.py (#1275); De : Simon Cross ; À : qutip/qutip ; Cc : NS2 group at LPS ,Mention . @NS2LPS Apologies for the slow reviews. Would you be up for updating this PR and then we can review it properly? It would be good to somehow add tests to these cases, but I'm not sure how easy that is to do. -- ; You are receiving this because you were mentioned.; Reply to this email directly or view it on GitHub:; https://github.com/qutip/qutip/pull/1275#issuecomment-893440155",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1275#issuecomment-893447309:91,Message,Message,91,https://qutip.org,https://github.com/qutip/qutip/pull/1275#issuecomment-893447309,1,['Message'],['Message']
Integrability,"I wonder if there is something wrong with your new QuTiP install? Since I can't reproduce the issue locally it might be difficult to suggest solutions, but I can give some debugging advice:. - Try reducing the code used to produce the issue as much as possible (perhaps just a single cell that calls the solver without any c_ops and checks the initial and final expectation values, without plots).; - Check all the inputs to the solver (psi0, etc).; - If a solver prints the ""ODE Integration Error"" warning it usually means that the solver has not converged to an output it trusts, so the solution returned is likely wrong.; ; If you manage to find a smaller reproducer of the error, report it here with as much information about your setup as possible (you can start with the output of `qutip.about()`).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1987#issuecomment-1229174846:480,Integrat,Integration,480,https://qutip.org,https://github.com/qutip/qutip/issues/1987#issuecomment-1229174846,1,['Integrat'],['Integration']
Integrability,"I would be more keen to keep the internal drift as either single operator (array / Qobj) or a list for when working with time-dependent drift dynamics. This would then mean that methods such as combine_dyn_gen would need to check if the drift is a list or single object.; Two reasons for this:; 1. In the vast majority of cases the drift will be fixed, and in may be confusing for new users as to why it is a list; 2. In cases where users set the drift directly using the dynamics object (like the test that you had to change) this change would not be backwards compatible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/396#issuecomment-155855251:126,depend,dependent,126,https://qutip.org,https://github.com/qutip/qutip/pull/396#issuecomment-155855251,1,['depend'],['dependent']
Integrability,"I would have preferred if the squeez function was called squeeze... but that's just a personal preference. There are many very generic symbol names in qutip, such as tensor, create, etc. These could easily appear in some other package, such as scipy or numpy sometime in the future, and then become a conflict, so I tend to prefer not relying on distorting the function names to make them more unique. For example, identity seems more readable to qeye, which is why i prefer it. What is your suggestion? That we remove identity again? If you think that's the best thing to do that I'm ok with that. However, if best practices python programming is followed, either by not importing into the global namespace or by importing packages in dependency order (for example numpy, matplotlob, scipy. followed by qutip), then this isn't really a problem.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/25#issuecomment-18952812:736,depend,dependency,736,https://qutip.org,https://github.com/qutip/qutip/issues/25#issuecomment-18952812,1,['depend'],['dependency']
Integrability,"I would like to try to build the solution for this. **Task 1:** For chrome, the error seems to be due to the CORS (Cross-origin Resource Sharing) policy of google chrome.; `Access to XMLHttpRequest at 'file:///C:/Users/Sid/Desktop/qutip-doc/QuTiP_tree_plot/d3_data/qutip.json' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.`. To fix this, I created a local server (on port 8080) from the `../qutip-doc/QuTiP_tree_plot` folder and then ran the URL `http://localhost:8082/qutip_org.html` on chrome.; Egde doesn't seemed to have any problem in running `qutip-doc.html`. **Task 2:** ; Clarification - We would right a new script to generate `qutip.json` from `apidoc/functions.rst`, just like `QuTiP_tree_plot/qutip-structure.py`. Am I right?. **Task 4:** ; Can you please elaborate on task 4 as to link to which API docs. **Task 5:**; The script written in Task 2 can be made to run for `classes.rst` and a json file would be created which would be used to generate a tree, right?; Where would we put it in the docs? guide-overview?. PS: I'm sorry if I've asked or stated an obvious thing, I am new to this community and am still trying to fimiliarize myself. Thanks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525#issuecomment-469209588:374,protocol,protocol,374,https://qutip.org,https://github.com/qutip/qutip/issues/1525#issuecomment-469209588,1,['protocol'],['protocol']
Integrability,"I would write it as two separate collapse operators, just like you would do for a Hamiltonian with a constant and time-dependent term i.e. c_ops=[Op1,[Op2,’f(t)’]]. See the docs here,. http://qutip.org/docs/3.0.1/guide/dynamics/dynamics-time.html. for more info. Paul; On Sep 3, 2014, at 12:00 AM, Stefan Krastanov notifications@github.com wrote:. > What is the appropriate way to implement a colapse operator in mesolve that can not be expressed as time_dependent_function \* constant_operator (for instance Op1 + Op2*f(t))?; > ; > Is it only possible through rewriting the equation to be solved?; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/223#issuecomment-54382667:119,depend,dependent,119,https://qutip.org,https://github.com/qutip/qutip/issues/223#issuecomment-54382667,1,['depend'],['dependent']
Integrability,"I wouldn't fracture the user-interface like that, personally. Instead, make the `alpha` parameter in `qutip.displace` optional, such that `qutip.displace` now effectively supports partial application:. ```python; class _displace:; def __init__(self, n):; [same as before]; def __call__(self, alpha):; [same as before]. def displace(N, alpha=None):; out = _displace(N); return out if alpha is None else out(alpha); ```. Now there's a single entry point for the user, but you get all the same benefits as before. The user can now do `qutip.displace(100)` and get a reusable partially applied object, or do `qutip.displace(100, 0.5j)` if they only need the one number.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646616290:29,interface,interface,29,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646616290,1,['interface'],['interface']
Integrability,I'd agree on dropping the try-catch as well. The about.py is dependant on a successful hardware_info() call. So there's little use on catching an error just to invoke another one with an empty array one level higher. Shall I make a new clean pull request with a more sophisticated commit message?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/780#issuecomment-348168206:61,depend,dependant,61,https://qutip.org,https://github.com/qutip/qutip/pull/780#issuecomment-348168206,2,"['depend', 'message']","['dependant', 'message']"
Integrability,I'd be happy to help on the future improvements (e.g. chi and Stinespring) and integrating these changes with other parts of qutip. The more piecemeal we can make the changes the easier it will be to review.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1098#issuecomment-570133990:79,integrat,integrating,79,https://qutip.org,https://github.com/qutip/qutip/pull/1098#issuecomment-570133990,1,['integrat'],['integrating']
Integrability,"I'd be interested in providing these changes. I have a few points to ask/consider:; 1. which function is meant by `zero_oper()`? I can't find any reference to it in the code, and judging by the name, I'd guess it's equivalent to `qzero()`, which already supports this.; 2. should we extend the automatic tensoring to other operators, e.g. `create()`, `destroy()`, and so forth? I can't necessarily think of any particular use-case, but _not_ having it causes an odd inconsistency with `qeye()`.; 3. for `projection()` and `basis()` in particular: should the interface allow only scalar `m` and `n`, which must be the same for all dimensions, or should there be broadcasting rules? The latter seems like a more useful choice to me, with the rules for all arguments being:; - if `m` is a list, then `max_len == len(m)`; - if `m` is a scalar, then `m = [m] * max_len`. For example, this would provide `tensor(basis(2, 0), basis(2, 1)) == basis(2, [0, 1]) == basis([2,2], [0, 1])`, which seems the ""least surprising"" to me.; 4. should there be error-checking that supplied scalars/lists are the correct format? For lists in particular, the current behaviour is to silently flatten nested lists, though this is presumably a user error.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/363#issuecomment-575273170:558,interface,interface,558,https://qutip.org,https://github.com/qutip/qutip/issues/363#issuecomment-575273170,1,['interface'],['interface']
Integrability,I'll give that a shot. Are there any other hidden dependencies that could be at fault?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/508#issuecomment-237678785:50,depend,dependencies,50,https://qutip.org,https://github.com/qutip/qutip/issues/508#issuecomment-237678785,1,['depend'],['dependencies']
Integrability,"I'll go on and do that, then. Just to summarize, this came up in finding a channel that represents tensoring a state with a preparation of an ancilla, evolving according to a larger channel, then partial tracing out the ancilla. That last step can be written down as a contraction of the indices of a superoperator, giving a rectangular supermatrix representation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/268#issuecomment-65021685:269,contract,contraction,269,https://qutip.org,https://github.com/qutip/qutip/pull/268#issuecomment-65021685,1,['contract'],['contraction']
Integrability,"I'll have to trust you mostly on actual operation of the code, but it looks like you've covered everything I could see as particular problems. I don't use this part of QuTiP, so I'm really not the best placed person to talk about how natural the APIs seem or anything like that. I'm still a fan of fixing the issues CodeClimate is complaining about because I think the cognitive complexity tests are a semi-decent indicator of maintainability, but at the end of the day, you're the code owner and that's your call. The other seemingly major potential headache is the dependence on that internal `_EvoElement` API in `QobjEvo` - I know for sure that that's going to go to hell in 5.0 - but I get that this PR didn't really cause this, so that's maybe a problem for another time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1444#issuecomment-815033004:567,depend,dependence,567,https://qutip.org,https://github.com/qutip/qutip/pull/1444#issuecomment-815033004,1,['depend'],['dependence']
Integrability,"I'll take a look at the merge. It seems like it might have gone bad. I'll add in some tests once I fix the merge, as well. I'll look into the diag method and try to move everything over to separate; everything as you described. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:706,integrat,integration,706,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['integrat'],"['integration', 'integrator']"
Integrability,"I'm a bit confused by your comment: Are asking about the purpose of the np array format itself or did you mean why it should accept non-linear tlists?. The reason it should accept non-linear tlists is because such a thing is good to have when you simulate rapid dynamics followed by slow dynamics. This currently works for all other types of time-dependent formats, so it should also work for this one to avoid confusion. The cubic spline would indeed be nicer here, except it seems to me like it assumes the x values are linear?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-242156352:347,depend,dependent,347,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-242156352,1,['depend'],['dependent']
Integrability,"I'm a bit confused on that and I'm sure it will make sense after you write this, but would you mind explaining how that works - are you diagonalizing the time-dependent bloch-redfield tensor in the cythonized version of the function?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/525#issuecomment-249343829:159,depend,dependent,159,https://qutip.org,https://github.com/qutip/qutip/pull/525#issuecomment-249343829,1,['depend'],['dependent']
Integrability,"I'm a fan of the CodeClimate complexity tests, but I wouldn't be averse to removing its complaints about ""TODO"" comments - I'm not sure what we really gain from that in this sort of open-source development. In a business where people are working full-time then I imagine it can be worth preventing a merge to finalise some details, but in our very decentralised development, really in some cases (especially in the next major release), we do need to merge in parts of code we know to be imperfect. That said, we probably should make an effort to clear out some of the TODOs and FIXMEs that are in the codebase already. Pushed fix-up changes since last review:; - wrapped the steadystate SciPy linalg functions so they're simplified at the point of call, and unknown keywords in old SciPy versions are just silently ""eaten"" (this is the same behaviour that the file used to have, just formalised a little more).; - added `TODO` in a comment in `qutip.cy.pyxbuilder`; - changed the static class attributes in `test_superoper.py` into a `setup_method` function. *edit*: oh yeah, forgot that there were still errors in some old SciPy bits in the control module as well. I'll push a fix to that before this needs reviewing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305:663,wrap,wrapped,663,https://qutip.org,https://github.com/qutip/qutip/pull/1506#issuecomment-826074305,1,['wrap'],['wrapped']
Integrability,"I'm also using Anaconda on Macbook M1 and ran into 2 errors today when importing qutip. . 1. With the M1 chip, qutip had a problem with hardware detection and as @jakelishman said, commenting lines 48 and 49 on `qutip/hardware_info.py` fixed this error. 2. Then I got the same error message with ""IPYTHON not defined"" and ""'qutip' has no attribute 'settings'."" I thought my conda environment must have been missing the ipython package somehow(?) so I tried `conda install ipython` and importing qutip again and it worked! (I then ran qutip.testing.run() to test out all functions and everything worked perfectly).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1396#issuecomment-759733240:283,message,message,283,https://qutip.org,https://github.com/qutip/qutip/issues/1396#issuecomment-759733240,1,['message'],['message']
Integrability,"I'm not at all a fan of making tests part of the public interface like this. It's something that we make absolutely no stability guarantees about, and coupling downstream packages to our own tests just sounds like a recipe for disaster - if we find a bug in main QuTiP and need to change tests or add methods (which we should be able to do completely freely), we're going to inject a ton of extra code into downstream packages, and may completely break them. To be honest, I'm not even wild about how we distribute our tests as part of the module code at all, but that's what we've got. It _could_ be ok if you import the test case base, and redefine your tests from there. We still don't make any stability guarantees about that, but it's conceivable that we could (though of course, the problem of ""what if we need to add methods"" persists). That would also solve your problems about saying you can't import individual tests. You can import individual tests anyway, you just need to rename them to things like `_TestAdd`, or use one of the pytest hooks in your local `conftest.py` to reject tests whose `__module__` isn't your local module, or do one of the other methods of filtering.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-976540355:56,interface,interface,56,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-976540355,2,"['inject', 'interface']","['inject', 'interface']"
Integrability,"I'm not entirely sure what's being asked of us here, because the code numba supports is to do with the numba developers, not us? numba is a compiler for Python code accessing NumPy arrays in ways other than internal NumPy compiled C code. The benefit to QuTiP users even if numba _were_ to add support would be minor, because a) we use custom sparse matrices which numba couldn't currently target to a GPU efficiently and b) almost all of our heavy code is compiled C, which is already as the same target as standard numba. We aren't going to convert (e.g.) `Qobj` to a numba `jitclass` because our entire library is written in Cython, and besides, the speed-ups come from the internal `Qobj.data` attributes, which we are already low-level. GPU-based sparse matrix routines are an interesting side-note, but will require very specialised data structures and accesses. This is more possible in the new data-layer added in 5.0, but still would require a huge amount of work. We're not likely to achieve this by using numba, but instead to use specialised GPU-enabled data structures like cupy instead, since that fits into our data model better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/900#issuecomment-809667000:766,rout,routines,766,https://qutip.org,https://github.com/qutip/qutip/issues/900#issuecomment-809667000,1,['rout'],['routines']
Integrability,"I'm not sure about any of these options:; 1. this absolutely should not happen. Trying to detect ""magic"" behaviour based on size is counterintuitive, and breaks other behaviour; it makes it impossible for `Qobj` to correctly handle 1x1 Hilbert spaces. While very infrequently used in practice, trying to backdoor different behaviour through something because it's already there is a nightmare to maintain, and prevents any other use. We've had large problems with 1x1 Hilbert spaces in the past, and 5.x is very strict about handling them safely now.; 2. `mul` should not be defined between two instances of `Data`, because `Data` represents a matrix, and `mul` is between a scalar and a matrix. Still, this seems closest to the correct solution to me, but instead, perhaps the `mul` dispatcher might take an arbitrary Python object as the scalar, and the inner function is responsible for returning `NotImplemented` if it can't handle it? This would require a couple of wrappers around the existing `csr` and `dense` methods, but that's not a huge deal, since the dispatchers are meant to be called from Python space anyway.; 3. same argument as the start of 2: `mul` is already defined as ""scalar \* matrix"", and there's no need for ""matched-shape elementwise multiplication"" to be a defined operation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1607#issuecomment-880740863:971,wrap,wrappers,971,https://qutip.org,https://github.com/qutip/qutip/issues/1607#issuecomment-880740863,1,['wrap'],['wrappers']
Integrability,"I'm not sure solution 3 will work as easily as this - if the user's `scipy.linalg.eigh` is broken, then calling it doesn't help, surely?. Also, I can reproduce the segfaults with both `np.ascontiguousarray` and `np.asfortranarray` on my machine, but it is a size of 64 that seems to reliably do me in. Script to reproduce:; ```python; import numpy as np; from scipy.linalg import eigh. def random_hermitian(n):; h = np.random.rand(n, n) + 1j*np.random.rand(n, n); return h + np.conj(h.T). for n in range(1, 101):; print(n); for _ in [None]*100:; x = eigh(np.ascontiguousarray(random_hermitian(n))); ```; and this segfaults on `n=64` reliably with the `pip` version of `scipy` (linked against OpenBLAS 0.3.7), and always succeeds with the `conda` version (linked against MKL 2019.4). Both `scipy` versions are 1.4.1 here. I did the most bare-bones install to test this:; ```; $ conda create -n blastest python; $ conda activate blastest; $ pip install scipy; $ python blas.py; ```; where `blas.py` is the repro script above. Doing this, `pip` pulls me OpenBLAS 0.3.7. Looking at the source of OpenBLAS, the whole heavy-lifting implementation is in Fortran - there's the classic LAPACKe C wrapper around the core Fortran LAPACK, but everything eventually goes down to the Fortran. If it helps, it's an out-of-bounds access error that causes the segfault for me, and the address it's trying to access doesn't look like dummy nonsense (`0x101b95010`). I'm pretty sure it's a nasty Mac/OpenBLAS bug. If the problem is particularly in `zheevr` we could swap the call to `eig` (instead of `eigh`) for Mac only, which should hopefully sidestep the problem, because it'll call `zgeev` instead. All recent pip installs of `scipy` link against OpenBLAS, so there's not much that can sidestep it there, other than mandating `conda` usage, because you can't relink `scipy` to decent libraries without compiling from source.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628780955:1187,wrap,wrapper,1187,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628780955,1,['wrap'],['wrapper']
Integrability,"I'm not sure, I've never used MKL, but I don't think it give much (or any) improvement for sparse matrix products since it probably doesn't use BLAS routines. Perhaps @nonhermitian knows something about it, or perhaps if sparse matrix products is any faster with OpenBLAS?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/55#issuecomment-25364351:149,rout,routines,149,https://qutip.org,https://github.com/qutip/qutip/issues/55#issuecomment-25364351,1,['rout'],['routines']
Integrability,"I'm sorry I don't have a huge amount of time at the moment, but just to add an extra point (that it looks like I didn't think about before): if we _do_ add this, then any method that requires an unconditional `import qutip` in downstream packages probably isn't a suitable solution - `import qutip` already takes far too long (though a lot of this is importing various parts of `scipy`, which another library might do on our behalf), and it means that they'd have to do their own import checking to handle optional dependencies. In that sense, (ab)using Python's duck-typing with a magic method might be the best way to break the dependency/import problem. I'm definitely still against implicit conversion to `Qobj` in pretty much any situation - I can imagine we could define a safe, fairly forward-compatible interface for letting people do `qutip.Qobj(x)`, but as it stands, that's the limit that I'd want the interface to be used for. I particularly am really against the idea of implicit conversion. I don't see an advantage to allowing QuTiP functions to act implicitly on other objects; it means our own functions are slower (because we have to explicitly test inputs on _everything_), and it restricts us more from improving `Qobj`'s internals, because we have to maintain compatibility with the interface. We'd never really be able to output anything _other_ than a `Qobj` without this, so there's no reason not to just have the user convert the inputs to `Qobj` explicitly themselves - that isolates the efficiency penalty so you only pay it if you need it, and it'll likely be clearer in the end anyway, because explicit is better for following the logic than implicit.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301:515,depend,dependencies,515,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-908380301,5,"['depend', 'interface']","['dependencies', 'dependency', 'interface']"
Integrability,"I'm very surprised to see that there is a failing test on qutip.qip, which is pure python and is unlikely to be platform dependent. I have a guess that this one may have something to do with pytest parameterization. I had a problem with that on Mac OS (not M1) before, which I still don't fully understand and I left a comment back then:; https://github.com/qutip/qutip/blob/3ff3f42d2cd950c99af8936b12d9221ed79de5e3/qutip/tests/test_scheduler.py#L92-L94; If I split the test and run them (`test_scheduling_gates2` and `test_scheduling_gates3`) one by one, it is fine. But if I use pytest parameterization to initialize several of them, it fails. And now this time it happens at exactly the same place. If you would like to, you can copy that failing test and run it (without using pytest parameterization but giving the input explicitly) in a Python console. If it works well, then my guess should be right. But it doesn't apply to all other failing tests I think.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755#issuecomment-1007367078:121,depend,dependent,121,https://qutip.org,https://github.com/qutip/qutip/issues/1755#issuecomment-1007367078,1,['depend'],['dependent']
Integrability,"I've done some simple benchmarks and indeed there seems to be a nice speedup. http://nbviewer.ipython.org/gist/jrjohansson/e63daeb3a41f95f163ad. so it definitely seems worthwhile to add support for this type of time-dependence in QuTiP. But string part of the definition of H is your example can be automatically generated knowning the times array, as I did in the notebook linked above. Therefore, I wonder if it may not be even more convenient if one simply could do. ```; >>> H = [H1, [H2, pulse]]; ```. It would require a few more changes in mesolve/sesolve and in _ode_check.py, but would give a nice clean API for using arrays to define time-dependences. How do you feel about that?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-44613285:216,depend,dependence,216,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-44613285,2,['depend'],"['dependence', 'dependences']"
Integrability,"I've had a thorough look. Simplifying the SolverOptions class is an excellent idea, but I think the PR currently doesn't go far enough and ends up with the solver classes, the integrator classes and the solver option classes required to share too much internal state with each other. As a next step to try untangle things, I suggest the following:. - Let's remove the `known_solvers` and the solver `name` from the SolverOptions and instead have the base solver pass the allowed options with defaults in to the SolverOptions constructor directly. If the allowed options list is `None`, then we can allow all options (for the convenience of users who really want to make their own SolverOptions instances).; - Having the options able to notify a listener of changes seems great -- let's keep that.; - When a solver is created, let's have the base solver create a new SolverOptions instance, either from a dictionary or another SolverOptions instance, but with the allowed options and defaults now specified.; - To deal with the integrator options, let's go back to having a single option named `ode`, but have the value of `ode` have type `SolverOptions`, and be a child of the solver options (if the child has a value modified, it should notify the parent of the change).; - For convenience, when passing options as a dictionary, one should be able to use `{""ode.method"": ""vern9""}` or `{""ode"": {""method"": ""vern9""}`. I think that should be enough to disentangle things from each other. The base solver would need to update the integrator if integrator options change and deal with any changes to the base options. It's not completely clear to me whether the result options should also be sub-options or just be included in the solver options. I'm happy for them to be included in the solver options, as long as the solver options are passed to the result class constructor. That keeps things a bit simpler and if solver needs new result options it can always create its own result sub-class and just pr",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945:176,integrat,integrator,176,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945,1,['integrat'],['integrator']
Integrability,"I've just pushed an extra commit purely to keep CodeClimate happy - I had to touch a line in a logic block that CodeClimate already didn't like, so it moaned that I hadn't fixed it. This just separates out the logic to make it a bit easier to read. As a side-effect, it allows iterable type to be used inside the time-dependent object list of `QobjEvo` (only - doesn't affect anywhere that doesn't use `QobjEvo`), so; ```python; qutip.QobjEvo([qutip.sigmax(), (qutip.sigmay(), '1')]); ```; is now a valid specifier (note the tuple in the list).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1561#issuecomment-849750278:318,depend,dependent,318,https://qutip.org,https://github.com/qutip/qutip/pull/1561#issuecomment-849750278,1,['depend'],['dependent']
Integrability,"I've lost the plot a bit with a whole load of changes to `Coefficient` now merged into this PR. Is there a chance we can split that out into its own PR?. I would expect `QobjEvo.__call__` to be thread-safe/re-entrant. The fact that coefficients seemingly don't support this immediately is worrying to me. A simple call like that changing ""global"" state of the object is dangerous; it has a habit of leaking out even in single-threaded applications, just like the bug I described previously with a call to `mesolve` modifying an existing `QobjEvo` in place. In this case I don't see an immediate bug, but it's very non-obvious behaviour and it would be easy to accidentally introduce one in it in the future (or maybe I just can't think of one now). Having `_BaseElement` be mutable makes all time-dependent operations of `QobjEvo` unresolvably thread-unsafe without copying on every operation. That said, looking again, I'm not sure I understand `_BaseElement`: it seems like `_EvoElement` and `_FuncElement` do entirely different things on `call`? What's the purpose of it, and if we put all speed considerations aside what would the signature and behaviour of `_BaseElement._call` be?. Could you write some docstrings on all the elements to explain their use-cases as well, so we've got it all stored for the future?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481#issuecomment-822817122:797,depend,dependent,797,https://qutip.org,https://github.com/qutip/qutip/pull/1481#issuecomment-822817122,1,['depend'],['dependent']
Integrability,"If it helps in the future, you can use `pycodestyle` (available in `pip` and `conda`) to check pep8 compliance on your end before pushing a commit. As to the actual command, we might not actually want to remove the usage of `convert` - it's quite possible that a lot of people are still using ImageMagick 6, since for most people it's just a dependency that got installed by something else, and isn't frequently updated. `qutip` doesn't list it as an official dependency, so it wouldn't get updated on our behalf. We could catch which version of `ImageMagick` to use with something like; ```python; def _magick_comamnd():; for command in ['magick', 'convert']:; try:; subprocess.run((command, '--version'), capture_output=True); return command; except OSError:; pass; raise FileNotFoundError(""Couldn't locate system ImageMagick""); ```; and cache the result on import (below into the variable `_magick`). There could also be logic based on OS if needed. The convert command would become; ```python; subprocess.run((_magick, ""-density"", 100, filename + "".pdf"", filename + "".png"")); ```; or something like that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1179#issuecomment-585236473:342,depend,dependency,342,https://qutip.org,https://github.com/qutip/qutip/pull/1179#issuecomment-585236473,2,['depend'],['dependency']
Integrability,"If it's something we want to support, we'll need a bit of a rewrite of the data-layer testing infrastructure, but nothing too major. I'd be in favour of a bit of a larger restructure:; - rearrange the repo root to have `/src/qutip` and `/test/qutip` instead of `/qutip/tests` (I originally didn't like it, but I now see more and more benefits of the `/src` (or `/lib`) convention in Python projects).; - the current `qutip/tests` should entirely become `/test/qutip`; - a new `/src/qutip/test` becomes a fully-supported _public_ module, including base classes (such as the data-layer mixins) and things like that. We'd need to be careful, because reducing your possibilities for flexibility in testing generally sounds like a bad idea to me, but if we take care to be very limited, it could work. I suspect you won't be able to import the test suite from inside `qutip.core.data` because of cyclical dependencies, which is probably a good thing - it'll force us to put the structure the right way round immediately. For an idea pretty far out of left field:; - the data layer tests should really _discover_ the specialisations rather than us needing to specify them (this is true regardless of this PR); - if so, in the new form, we _could_ directly export this part of the test suite from `qutip.test` (our test suite would import this as well), and add a little bit of logic to allow filtering of which tests need to be run (class decorators, probably); - downstream packages could then test just by importing our classes and disabling any specialisations that are only on internal data-layer objects. I'm not 100% sure how I feel about this, but it's plausible - we'd still be able to add extra methods in our own test suite if we wanted them, because we could just derive from the classes, rather than defining the names into the test suite in those cases. ---. About us breaking downstream CI: having been a maintainer of QuTiP and now Qiskit, I have a deep-rooted hatred for any upstream package",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-979917075:900,depend,dependencies,900,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-979917075,1,['depend'],['dependencies']
Integrability,"If they call BLAS functions then they should use threads. It looks like scipy is calling the mkl blas where as numpy is not. A bit odd. . > On Apr 8, 2016, at 09:52, Alexander Pitchford notifications@github.com wrote:; > ; > Yes, I did the mkl.set_num_threads. This is my test script; > ; > import numpy as np; > import timeit; > ; > NUM_THREADS = 1; > ; > try:; > import mkl; > use_mkl = True; > except:; > use_mkl = False; > ; > def timing(f):; > def wrap(_args):; > time1 = timeit.default_timer(); > ret = f(_args); > time2 = timeit.default_timer(); > print('{} function took {:0.3f} ms'.format(f.**name**, (time2-time1)*1000.0)); > return ret; > return wrap; > ; > if use_mkl:; > mkl.set_num_threads(NUM_THREADS); > print(""Number of threads is {}"".format(mkl.get_max_threads())); > else:; > print(""mkl unavailable""); > ; > d = 10000; > n_reps = 10; > A = np.random.random([d, d]); > ; > print(""Starting tests""); > ; > @timing; > def calc_exp(A):; > for i in range(n_reps):; > E = np.exp(A); > ; > calc_exp(A); > Whether I set NUM_THREADS to 1 or 4 I only see one processor active in system monitor, and the processing time is the same.; > ; > This is what starting me looking into whether I should expect numpy / scipy to use multiple cores. The articles I read suggested that numpy and scipy do not contain any intrinsic parallelisation. It may have been out-of-date.; > ; > Now I just tried a similar test with scipy.linalg.expm and it did use multiple processors and was approximately twice as fast with 4 than with 1.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/462#issuecomment-207494345:453,wrap,wrap,453,https://qutip.org,https://github.com/qutip/qutip/issues/462#issuecomment-207494345,2,['wrap'],['wrap']
Integrability,"If you click into ""Files changed"" you can just tick the files as you've looked at them. To make it easier for you, I'd suggest having a copy of the old version next to them and reading the full commit message, because I usually explain what I'm doing in them and why I'm doing it that way. If you're worried about the size of the PR in total, then I'd strongly recommend _not_ squashing this PR if/when it's merged, but instead just rebasing it onto `master` or doing a direct merge. That way it doesn't look huge, it looks like a series of commits which each change one file, which is what you'd get if the PR was initially split. The review doesn't end at the point the code is merged - somebody in the future may very well want to see why I made certain changes. I know I've spent a long time looking through the old `git` logs to work out why tests were the way they were, and it's always much much more difficult when you've got one of those squash commits with like 30 sub-parts. The commits in this PR are already modular, and with the exception that 7a0d6e6 could be squashed into ; 1d60b46, they all represent an isolated unit of progression and there aren't any ""work in progress"" commits. I didn't perform that squash locally because I would have had to force-push over 10+ commits. Squashing the PR does make sense when there are a lot of wip commits for a small unit of work, but for a very large unit of work like this one, it's much better to interactive rebase to keep it neat locally (I've already done that for the most part), and never push wip commits in the first place.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-605494875:201,message,message,201,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-605494875,1,['message'],['message']
Integrability,"If you have extra_link_args in the site.cfg, then a double keyword argument; happens when reading the options for the blas library. If you use openblas, add this to your site.cfg; [openblas]; extra_link_args = ... whatever ... and the error will happen.; The error is this. TypeError: config.add_extension() got multiple values for keyword argument; 'extra_link_args'. 2015-11-08 21:12 GMT+01:00 Paul Nation notifications@github.com:. > I do not get a build failure under NumPy 1.10.1. What was the particular; > error message? Any changes would also have to be backward compatible with; > earlier NumPy versions.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/qutip/qutip/issues/392#issuecomment-154863591. ## . Kind regards Nick",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/392#issuecomment-154867711:519,message,message,519,https://qutip.org,https://github.com/qutip/qutip/issues/392#issuecomment-154867711,1,['message'],['message']
Integrability,"If you only need the final state and you don't need any intermediate times, your `tlist` should only have two elements in it. So; ```python; import qutip; hamiltonian = qutip.sigmax(); state = qutip.basis(2, 0).proj(); times = [0, 10]; qutip.mesolve(hamiltonian, state, times); ```; should give the correct result. If you want to integrated for a long time, you might get errors about the integration not converging. If so, you will need to increase the `nsteps` solver option, such as; ```; options = qutip.Options(nsteps=10_000_000); qutip.mesolve(..., options=options); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-808417826:330,integrat,integrated,330,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-808417826,2,['integrat'],"['integrated', 'integration']"
Integrability,"If you would like another item for the todo list, I'd really like to see the matplotlib aspects of the interface cleaned up. When we added the new lines and arcs features, we allowed passing arbitrary matplotlib plotting arguments as additional parameters. Perhaps we can do the same for the other functions and remove the old means of setting colours, etc?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1913#issuecomment-1142616351:103,interface,interface,103,https://qutip.org,https://github.com/qutip/qutip/issues/1913#issuecomment-1142616351,1,['interface'],['interface']
Integrability,"In general in pytest we use the bare keyword `assert` for almost everything. All the functions in `np.testing` are from the ""before times"", when test tooling wasn't as good as it is nowadays - they were a big improvement on available warning messages back before 2015. Nowadays, though, `pytest` does introspection on assertion failures, so it has even better message reporting than the `np.testing` functions, and it lets you write much clearer code. For example, `assert_equal(x, y)` is much better spelled in pytest as `assert x == y`, because it's much faster to read and pytest does better error reporting for it. Similarly, testing for exceptions is better with; ```python; with pytest.raises(ValueError):; call_that_raises(1, ""hello, world""); ```; as opposed to the numpy form `np.testing.assert_raises(ValueError, call_that_raises, 1, ""hello, world"")` - the pytest one is much easier to read, and the error message is better. The only numpy one we still use is `np.testing.assert_allclose` when we're comparing several numpy arrays. That's just because `pytest` doesn't have a good function that's aware of multidimensional arrays (at least not one that I know). This file still has a load of old numpy testing code in it (e.g. `np.testing.assert_equal`) because it was written quite a long time ago, when that was the recommended way of doing things. We're changing over slowly, so we can take advantage of all the nice features of pytest. In this case, I changed `np.testing.assert_allclose(x, y, atol=tol)` to `assert abs(x - y) < tol`. I removed `np.testing.assert_allclose`, because that gives the mistaken impression that we're comparing arrays (we're not, we're comparing two scalars). I could have changed it to `assert x == pytest.approx(y, tol=tol)`, except in this case the test file hasn't been converted to `pytest` style yet, and I wanted to keep the total change of this PR as small as possible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671:242,message,messages,242,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-822737671,3,['message'],"['message', 'messages']"
Integrability,"In general the biggest thing you should consider is readability, and to be fair, that's a little subjective. You're welcome to comment on my PR if you think I've done anything that's unreadable. You can scope fixtures at whatever level is appropriate. In this particular case, I scoped the `dimension` fixture at the module level, because there's loads of places that needed to test varying dimensions, and it's very convenient to define it just once. In the few cases where we needed to override that (e.g. in `dnorm`), I overrode it by providing a definition in a tighter scope - either at class level or per-function (via `pytest.mark.parametrize` directly). The correct scoping just depends a lot on the type of tests you're writing - if you're going to have to overwrite something constantly then module scoping isn't good, but if you have lots of different functions to test, and every test for a given function will want the same parametrisation, then class scoping might be a good choice. If you only need the parametrisation once, then it's best to put it right next to the place it's used (like in the case of mine that you've highlighted). It means that if you've opened that file to read the tests, then everything you need to understand `Test_fidelity.test_known_cases` will be on your screen if you just scroll to it. That makes it much easier for the next person who has to come along to edit your code. I used a couple of temporary variables in that case just to aid readability - my cases wouldn't have nicely fit on one line if I'd shoved the `qutip.basis(2, 0)` stuff inside the `pytest.param` constructors, and it would be hard to read. This way you can easily verify that the code is correct bit-by-bit; you can see clearly that the names are descriptive and match exactly what they say, and that means you can trust them when they then appear in the parametrisation. I won't pretend to be perfect at any part of coding, and particularly testing. I rewrote all the testing files s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706:687,depend,depends,687,https://qutip.org,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706,1,['depend'],['depends']
Integrability,"In my tries yesterday, I did not have problem with `scipy.linalg.eigh` for C array. Since `scipy` does not use the same lapack interface for C and Fontran continuous array, I though it was fine. I guess I did not run enough tests. . Using `eig` and `zgeev` seems a good idea. I don't have any error with it yet.; It would then be good to change all the `eigh` in the code, not just the `zheevr` call in cython. ; And probably raise an issue in `scipy`. @jakelishman since most computation of eigenvalue in Qutip go through the `Qobj` could you fix that call this summer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628833918:127,interface,interface,127,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628833918,1,['interface'],['interface']
Integrability,"In the current code there is no automatic generation of the bibtex files but a polite message to cite qutip and use the cite function to generate the same. I hope that is okay. ```; print(""Please cite QuTiP in your publication - for you convenience a bibtex file can be easily generated using `qutip.about.cite()`""; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/752#issuecomment-357853478:86,message,message,86,https://qutip.org,https://github.com/qutip/qutip/pull/752#issuecomment-357853478,1,['message'],['message']
Integrability,"In the documentation, qutip is build with `pip install qutip[full]`, while in test it is installed with `pip install qutip[$QUTIP_TARGET]`, with the target changing depending on the test. We don't have any test using extra yet... The mpi4py team made a GitHub Actions workflow to run it in test: https://github.com/mpi4py/setup-mpi. You can add that workflow and the `extra` to have every test run with mpi:; ```; - uses: actions/checkout@v3; - uses: mpi4py/setup-mpi@v1; ```. `QUTIP_TARGET=""tests,graphics,semidefinite,ipython,extra"" `. By I am not sure it would work for windows. Also if installing mpi is slow, we may not want it in all test.; But conditional workflow are tricky so lets see want if it just works first. Yes, the test failures are related to last weekend scipy release, not this code.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1904189729:165,depend,depending,165,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1904189729,1,['depend'],['depending']
Integrability,"Interesting... You see, the gate `Gate(RY, targets=[0, 1], controls=None)` is clearly wrong because RY acts only on one qubits. I guess you are probably using a released version of QuTiP (4.5.2/3 maybe) and not the master branch. This error was hidden before in those released version. If you try to install from source (http://qutip.org/docs/latest/installation.html#installing-from-source) (which you have to if you want to contribute anyway), you will probably see this error message.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275:479,message,message,479,https://qutip.org,https://github.com/qutip/qutip/issues/1330#issuecomment-810554275,1,['message'],['message']
Integrability,Internal note: `bloch_redfield_solve` quit without raising an error when ode integration fails.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965#issuecomment-1203283104:77,integrat,integration,77,https://qutip.org,https://github.com/qutip/qutip/issues/1965#issuecomment-1203283104,1,['integrat'],['integration']
Integrability,"Internally all `Qobj` use sparse matrices, no matter what type of data you give them. Whether your density matrix stays sparse during the time evolution depends on the Hamiltonian. In general, especially if there's any environmental interaction, it likely won't, but that's just down to the physics.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1737#issuecomment-990055735:153,depend,depends,153,https://qutip.org,https://github.com/qutip/qutip/issues/1737#issuecomment-990055735,1,['depend'],['depends']
Integrability,"Is six used in qutip now? If so then go ahead and add it as a dependency, I'd say. Personally I don't like use six, and prefer to write idiomatic Python 3 code that also work for Python 2, but I don't see any problems with anyone else using it. It is a pretty standard dependency for Python 2 and 3 compatibility needs.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/378#issuecomment-145859036:62,depend,dependency,62,https://qutip.org,https://github.com/qutip/qutip/issues/378#issuecomment-145859036,2,['depend'],['dependency']
Integrability,"It appears that the coefficients in your Hamiltonian are large, and the time-dependent part of the Hamiltonian oscillates very rapidly, The result is that the solver does not by default take small enough time steps when evolving the state. You can fix this by specifying a `max_step` to the `Options`:; ```python; max_step = 1. / (100 * gamma); options = Options(max_step=max_step, nsteps=10000); ```; With this max_step the solver correctly evolves the system for me. Closing this for now, but please feel free to continue the discussion here as needed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2051#issuecomment-1366076677:77,depend,dependent,77,https://qutip.org,https://github.com/qutip/qutip/issues/2051#issuecomment-1366076677,1,['depend'],['dependent']
Integrability,"It depend how far you are into 4.5. If it is too late for 4.5.0 then master, if not then both.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-580206455:3,depend,depend,3,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-580206455,1,['depend'],['depend']
Integrability,"It depends on how many states you have, and what precision you require. Constructing the whole propagator will always have a lower precision than evolving each state individually, but if you are working with a single qubit system and need to evaluate the evolution of many many different qubits under the same Hamiltonian, then using `propagator` will be faster. Really, getting the fastest speeds depends a lot on your system Hamiltonian. Typically the more you can do analytically, the better. For example, if you plan to use a piecewise-constant Hamiltonian, then you will be most accurate if you consider the individual components of the evolution and multiply them together.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660473253:3,depend,depends,3,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660473253,2,['depend'],['depends']
Integrability,"It depends on the size of the row and column indices. If they cant fit in int32, the matrix must use int64 indices. . As with most things, someone just has to find the time .",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-383744977:3,depend,depends,3,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-383744977,1,['depend'],['depends']
Integrability,It is just a way to get at the internal data without going through extra checks. It is specific to the ode solver interface.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/503#issuecomment-242744689:114,interface,interface,114,https://qutip.org,https://github.com/qutip/qutip/issues/503#issuecomment-242744689,1,['interface'],['interface']
Integrability,"It is likely because finding eigenvalues of non Hermitian systems depends; on the condition number. I think redoing the current code to use the; shifted inverse power method or something similar might be the way to go. On Nov 8, 2016 6:01 AM, ""Gleb Fedorov"" notifications@github.com wrote:. > While simulating the dynamics of a driven non-linear oscillator I; > discovered that with small relaxation and weak driving the steady state; > returned by the propagator_steadystate() function is incorrect compared; > with a state obtained from many successive applications of the propagator; > (see plots below):; > ; > [image: alt text]; > https://cloud.githubusercontent.com/assets/3819012/20099571/a213fb02-a5d2-11e6-92cd-481f0a60667d.png; > Populations of the ground and first excited states for two ways of finding; > the steady state.; > ; > The problem is with numpy.linalg.eig() which fails to find a correct; > eigenvector for U. I don't know if this problem is tractable; instead, I; > suggest adding a function to propagator.py which calculates the steady; > state from U and some initial state using the successive application; > approach. If you think this is useful, I would be happy to implement it.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/qutip/qutip/issues/556, or mute the thread; > https://github.com/notifications/unsubscribe-auth/ABMPqeETpQvlQ6B0GUyajpgnHwt12EVPks5q8HKmgaJpZM4KsZfk; > .",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/556#issuecomment-259147457:66,depend,depends,66,https://qutip.org,https://github.com/qutip/qutip/issues/556#issuecomment-259147457,1,['depend'],['depends']
Integrability,"It is not only the number of calls to expect that changes. It seems like the key difference in your example is the number of calls to ode.integrate, which are doubled in numbers and account for an additional 60 sec of wall time, out of which at most 3.7 is spent for calculating expectation values. Maybe the following can provide some additional clues. For `tlist = linspace(0, 10, 10)`. ```; ncalls tottime percall cumtime percall filename:lineno(function); ...; 500 2.669 0.005 39.053 0.078 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:757(_mc_alg_evolve); 163354 0.476 0.000 35.217 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:376(integrate); 163354 34.360 0.000 34.477 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:859(run); 157186 0.265 0.000 28.734 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:747(step); 533/1 0.004 0.000 0.761 0.761 <frozen importlib._bootstrap>:2234(_find_and_load); ```. For `tlist = linspace(0, 10, 100)`. ```; ncalls tottime percall cumtime percall filename:lineno(function); ...; 500 6.320 0.013 108.141 0.216 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:757(_mc_alg_evolve); 290347 0.887 0.000 95.006 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:376(integrate); 290347 93.419 0.000 93.705 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:859(run); 238940 0.414 0.000 45.467 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:747(step); 153438 3.721 0.000 3.721 0.000 {built-in method cy_expect_psi_csr}; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-64520821:138,integrat,integrate,138,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-64520821,9,['integrat'],['integrate']
Integrability,"It is strange. The failure is not dependent on the changes that you made here since the failure is due to some missing header files in Numpy. I am at a loss on what is happening. But your other PRs are going through so I am sure, it is something small. I will try restarting the builds for this PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/883#issuecomment-398284232:34,depend,dependent,34,https://qutip.org,https://github.com/qutip/qutip/pull/883#issuecomment-398284232,1,['depend'],['dependent']
Integrability,"It is there because one has to build all the cython modules in the cy folder. Since cython is used for time dependent stuff, we stopped packaging the c code itself and just let the user build it since cython is a required package. > On Mar 4, 2016, at 10:05, Alexander Pitchford notifications@github.com wrote:; > ; > There is a section in qutip/init.py that checks the cython version, then re cythonizes all the pyx. It prints a warning if cython is not found. So after install, during which all the cython modules get built, during the first import of qutip all the building happens again. This seems unnecessary, and is actually an issue if we are making a pre-built package. I have patched out this section in the conda-forge feedstock. All but 7 of the tests are successful.; > ; > Cython is not actually needed at run time for most of QuTiP. Why is it sometimes needed at runtime?; > ; > Should we look remove this section from the init.py, and put some warning in the methods that use cython at runtime?; > ; > —; > Reply to this email directly or view it on GitHub.; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/448#issuecomment-192387820:108,depend,dependent,108,https://qutip.org,https://github.com/qutip/qutip/issues/448#issuecomment-192387820,1,['depend'],['dependent']
Integrability,"It looks like we are going to just go with installing dependencies with macports and do a pip install for qutip itself from here on out. This is already the procedure listed in the 3.1 docs. Therefore, I am going to close this issue if there are no other thoughts on the matter.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/283#issuecomment-67802461:54,depend,dependencies,54,https://qutip.org,https://github.com/qutip/qutip/issues/283#issuecomment-67802461,1,['depend'],['dependencies']
Integrability,"It probably depends on the C++ environment I guess? I just reinstalled qutip `dev.major`, ran the above script and saw; ```; cl : Command line warning D9025 : overriding '/W3' with '/w'; cl : Command line warning D9025 : overriding '/O2' with '/O1'; cqobjevo_compiled_coeff_117945645340.cpp; E:\Miniconda3\envs\qutip5\lib\site-packages\numpy\core\include\numpy\npy_1_7_deprecated_api.h(14) : Warning Msg: Using deprecated NumPy API, disable it with #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; Creating library C:\Users\Boxi\.pyxbld\temp.win-amd64-cpython-39\Release\Users\Boxi\.pyxbld\temp.win-amd64-cpython-39\Release\pyrex\cqobjevo_compiled_coeff_117945645340.cp39-win_amd64.lib and object C:\Users\Boxi\.pyxbld\temp.win-amd64-cpython-39\Release\Users\Boxi\.pyxbld\temp.win-amd64-cpython-39\Release\pyrex\cqobjevo_compiled_coeff_117945645340.cp39-win_amd64.exp; Generating code; Finished generating code; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1190#issuecomment-1171712449:12,depend,depends,12,https://qutip.org,https://github.com/qutip/qutip/issues/1190#issuecomment-1171712449,1,['depend'],['depends']
Integrability,"It seems like this routine is geared toward a specific problem, rather than a general input. Regardless, I think a notebook explaining this method is required, including better examples on the usage. This can be added to the documentation once it is converted to IPython notebooks. A few things I noticed are given below:; - The output is not a list, but a Result class object.; - Why is it not possible to directly calculate expectation values other than the coupling term?; - Why are the default input values what they are?; - The print statement at the end should be optional depending on the setting of the debugger.; - The call to Odeoptions in mesolve needs to be user accessible.; - tlist should not be the last input argument and should probably not be a kwarg.; - The call to eigenstates should also have an optional argument to call the sparse eigenstates solver if needed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-103712771:19,rout,routine,19,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-103712771,2,"['depend', 'rout']","['depending', 'routine']"
Integrability,"It sounds great, thank you @wrzadkow. I am going to look into it. . * It would be great to add some details about it in the Users Guide, so that they show up in the [States](http://qutip.org/docs/latest/guide/guide-states.html#density-matrices) part. To do so you would need to make an .rst file in [qutip-doc](https://github.com/qutip/qutip-doc). . What actually would be much needed in a broader view is a (short) Metric subsection in the Users Guide, showing which equations are implemented in LaTeX. This is beyond this PR but your expertise might be very helpful. . Also, recently some advanced functionalities relative to metrics were developed in [Qptomographer](https://qptomographer.readthedocs.io/) @phfaist. This library optimally implements the diamond norm and uses QuTiP's classes https://qptomographer.readthedocs.io/en/latest/figures_of_merit/. It would be great to see if this can be used to address an open issue of non-maintained dependencies that @ajgpitch has been assessing, issue #874.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/998#issuecomment-494625047:949,depend,dependencies,949,https://qutip.org,https://github.com/qutip/qutip/pull/998#issuecomment-494625047,1,['depend'],['dependencies']
Integrability,"It will be useful for solver feedback.; In v4 we can define Hamiltonian to depend on the state: `H(t, args, psi/rho)`.; We don't have it working in v5, but we will need to restore it before release.; This `_prepare` catch the time and state at the start of `matmul` and `expect` and update the arguments according to feedback.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2016#issuecomment-1302681575:75,depend,depend,75,https://qutip.org,https://github.com/qutip/qutip/pull/2016#issuecomment-1302681575,1,['depend'],['depend']
Integrability,"It would be good to include the zenodo bib reference that relates to the specific version that is being used. It would be good if users included this zenodo reference, as this pinpoints a version, which could be important for people trying to repeat the results. In the same vein it could be a good idea to automatically output a file into the cwd that contains the `qutip.about()` output. We could include a citation reminder in the `qutip.about()` and also a message that explains that bib files have also be produced for their convenience. In order to placate those who may object to all of this, we should provide some setting that allows users to turn off this bib and about() output. We should mention this setting in the `about()`. We also need to handle file errors that may occur.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/752#issuecomment-330591675:461,message,message,461,https://qutip.org,https://github.com/qutip/qutip/pull/752#issuecomment-330591675,1,['message'],['message']
Integrability,"It would be much better to thoroughly code review this pull request before merging rather than merging sooner and make additional PRs later. You can keep working on the PR while getting feedback on it without merging now. Things like model names and API is better to sort out once and for all before the first merge. . With this PR, I think the ossolve modeule name is not very appropriate. Most of qutip is related to open system solvers. I think rcsolve (reaction coordinate solver) is a more accurate name for this module. Also, depending on how much code you have in mind to include in this module, it might be more appropriate to put all of it in a file called rcsolve rather than creating a new module directory like you propose here. Also, don't use underscores in module names (rc_model -> rcmodel or better yet rcsolve).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-102566203:532,depend,depending,532,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-102566203,1,['depend'],['depending']
Integrability,"It's interesting to see how my style of writing tests changes and matures. It's being particularly influenced at the moment, because on Qiskit we use a fairly thin wrapper around raw `unittest`, rather than `pytest`, so I'm being exposed to writing in other styles as well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1614#issuecomment-882516763:164,wrap,wrapper,164,https://qutip.org,https://github.com/qutip/qutip/pull/1614#issuecomment-882516763,1,['wrap'],['wrapper']
Integrability,"It's really too early to know, and I know little of the structure of QobjEvo.; From the little i know you keep a sum of standard operators with a time dependent prefactor, right?. We will probably go for something similar. Since we are storing the single operators in an hamiltonian (like \sigma_x*\sigma_y) and their domains, we can easily insert a time dependence in front of every operator for a negligible cost.; However this representation is very different from the dense/sparse representation in QuTiP, as we need to support hilbert spaces with order of 100s spins and have a very different usage of the matrix elements during the computations.; ; But again, this is very premature... I doubt we'll get to time-dependent objects before an year or so. ; Higher on our priority is representing circuits.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-828730210:151,depend,dependent,151,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-828730210,3,['depend'],"['dependence', 'dependent']"
Integrability,"Just adding my two cents. From my experience, a lot of our users don't know how to efficiently locate the error and find the solution. Simply posting a HOW-TO guide along with the release notes might not be sufficient, because the users may not be aware of its existence. It would help I think if we could; - raise an error or warning message that locates the error as clear as possible and; - if feasible, leave a link in the error/warning message directing the users to the HOW-TO guide.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053:335,message,message,335,https://qutip.org,https://github.com/qutip/qutip/issues/1949#issuecomment-1179740053,2,['message'],['message']
Integrability,"Just another small issue, I found that if I use UnderDampedEnvironment.spectral_density() with brmesolve(), it fails in numpy 2.1.1 unless I wrap the SD function in another function. Strangely works without needing to wrap it in numpy 1.26.4. Seems to some difference in the way zero-dimensional arrays are treated, but not super sure.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2534#issuecomment-2372823795:141,wrap,wrap,141,https://qutip.org,https://github.com/qutip/qutip/pull/2534#issuecomment-2372823795,2,['wrap'],['wrap']
Integrability,"Last review re-request, hopefully. I think everything's correct and ready now. 1. I had forgotten to build the sdist here, so it would have been missing from the pip package. That's fixed now.; 2. It's harder than you might expect to quickly fail all jobs in a GitHub Actions workflow right now. It seems that they expect you to try and continue for as long as possible for jobs on different runners, so I had to make everything depend on the confirmation verification to get the fail-fast behaviour.; 3. Hopefully neatened up the language we've been talking about.; 4. Removed installation of unnecessary VC++ tools for Python 2.7 on Windows.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1465#issuecomment-807184002:429,depend,depend,429,https://qutip.org,https://github.com/qutip/qutip/pull/1465#issuecomment-807184002,1,['depend'],['depend']
Integrability,Leaving the full error message here:. ```; anaconda3/lib/gcc/x86_64-apple-darwin11.4.2/4.8.5/include-fixed/limits.h:168:61: fatal error: limits.h: No such file or directory; #include_next <limits.h> /* recurse down to the real one */; ```,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1030#issuecomment-505449699:23,message,message,23,https://qutip.org,https://github.com/qutip/qutip/issues/1030#issuecomment-505449699,1,['message'],['message']
Integrability,"Let me look at this tonight. I have uploaded the spline interp method, and just need to integrate it with the solvers. I have done something similar elsewhere so it should be straightforward (provided I find the time). The nonlinear list is also easy to incorporate, for SciPy 0.18+, so I think that there interp methods will replace the array based format in the future.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-245346539:88,integrat,integrate,88,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-245346539,1,['integrat'],['integrate']
Integrability,"List format time dependant Hamiltonian:; ```; def f(t, args):; return np.sin(args['w']*t). H = [H0, [H1, f]]; ```; would give the same Hamiltonian and work with `mcsolve`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1368#issuecomment-704945305:17,depend,dependant,17,https://qutip.org,https://github.com/qutip/qutip/issues/1368#issuecomment-704945305,1,['depend'],['dependant']
Integrability,"Looks cool, you can make the PR against the master branch. We do not have a; dev branch. On Mon, 22 Jul 2019 at 19:14, Michael Goerz <notifications@github.com>; wrote:. > Sorry.. got a little distracted, and wanted to check the contributing; > guidelines on what branch to make the pull request against. Currently it’s; > master. Is that ok? If yes, I’ll undraft it.; >; > Draft PRs are pretty new, and a very nice way to kick off the Continuous; > Integration. Like in this case, I wanted to check if any of the tests; > involve that message. As they don’t, this actually is ready to go.; >; > —; > You are receiving this because you were mentioned.; >; >; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/1049?email_source=notifications&email_token=ABVFIBCN7YWP77NBJVTZA2LQAXTJDA5CNFSM4IEC7VHKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2QRIRA#issuecomment-513872964>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ABVFIBHWIDKPIYAU6NMZXILQAXTJDANCNFSM4IEC7VHA>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1049#issuecomment-513873973:449,Integrat,Integration,449,https://qutip.org,https://github.com/qutip/qutip/pull/1049#issuecomment-513873973,2,"['Integrat', 'message']","['Integration', 'message']"
Integrability,"Looks interesting! Possibly a bit out of scope for qutip? In principle you could put this progress bar in a separate module and still use it with qutip (as long as it supports qutip's basic progressbar interface). Then it could also be used in non-qutip related projects. . If its to be included in qutip, I think it should not be added to qutip/ui/progressbar, but as an module of its own that would not be loaded by default, so a user would have to load it explicitly when using it, like the way the current ipynbtools and picloud modules work. . Perhaps it would make sense to move these ""extras"" or ""extensions"" modules to a subdirectory of their own, say ""qutip/extensions"" or ""qutip/ext"" to keep the import paths manageable. In that case I think that qutip.picloud should be moved to that directory as well. I think this would keep these extensions reasonably isolated for the core qutip modules, which I think we should prioritize if we are to allow these kind of peripheral modules to increase in number in the future. @nonhermitian any opinions on this?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255#issuecomment-63268318:202,interface,interface,202,https://qutip.org,https://github.com/qutip/qutip/pull/255#issuecomment-63268318,1,['interface'],['interface']
Integrability,"Looks like it's resolved now (unless documentation should be updated on how to use the --with-openmp option with the new build method. I'm not sure if end users should now be using wheels builds). Both `--config-setting=""--global-option=--with-openmp""` and `--config-setting=""--build-option=--with-openmp""` achieve a wheels (PEP517) build and `python -c ""import qutip; qutip.about()""` reports `OPENMP Installed: True` for both python3.10 and python 3.11. `--global-option` gets a warning message:; ```; $ python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /projects/misc/build/qutip/.pybuild/cpython3_3.10_qutip --config-setting=""--global-option=--with-openmp""; * Building wheel...; /usr/lib/python3/dist-packages/setuptools/build_meta.py:307: SetuptoolsDeprecationWarning: ; The arguments ['--with-openmp'] were given via `--global-option`.; Please use `--build-option` instead,; `--global-option` is reserved to flags like `--verbose` or `--quiet`.; ; warnings.warn(msg, SetuptoolsDeprecationWarning); ...; ```; So it's saying we should be using `--build-option` not `--global-option`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875#issuecomment-1368866726:488,message,message,488,https://qutip.org,https://github.com/qutip/qutip/issues/1875#issuecomment-1368866726,2,"['depend', 'message']","['dependency-check', 'message']"
Integrability,"Many thanks for your kind reply. Unfortunately, I can not do that, because there is cases in my hamiltonian in which that matrix is not diagonal, I am just trying from the simplest case, actually my goal is to have a term ""S_vector * D_matrix *S_vector"" . Could you please explain how I am using Qobj incorrectly and how to used right. The error message states that since S_vector is a Qobj I can not multiply it with the D_matrix. If I put Qobj(D_matrix) then I can not multiply them because all terms are Qobj.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1848#issuecomment-1093795266:346,message,message,346,https://qutip.org,https://github.com/qutip/qutip/issues/1848#issuecomment-1093795266,1,['message'],['message']
Integrability,Maybe `Qobjevo` can be of help. See this [notebook at this point](https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/qobjevo.ipynb#String-time-dependence) by @ericgig and @jakelishman,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1308#issuecomment-654285852:171,depend,dependence,171,https://qutip.org,https://github.com/qutip/qutip/issues/1308#issuecomment-654285852,1,['depend'],['dependence']
Integrability,Maybe a wrapper (like we have for spmv) can replace every sp.kron in qutip,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/530#issuecomment-243506780:8,wrap,wrapper,8,https://qutip.org,https://github.com/qutip/qutip/pull/530#issuecomment-243506780,1,['wrap'],['wrapper']
Integrability,"Mine will be done in a week or so, depending on time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/525#issuecomment-290628674:35,depend,depending,35,https://qutip.org,https://github.com/qutip/qutip/pull/525#issuecomment-290628674,1,['depend'],['depending']
Integrability,"Most of it is already in qutip or in development:; - We already have a progress bar.; - We have feedback to support solvers where parameters are changed depending on the current state. Those should not updated at each time-step, but included in the rhs. Otherwise, it will increase runtime and often the numerical error. We mostly use multistep method (Adams and BDF) which are particularly sensible to that.; - In my rework of `mcsolve`, I'm including the capacity to stop after a certain time, (already merged) and after the error bar gets under a certain tolerance. I have not though an equivalent for `me/sesolve` would be needed but it would be simple enough to add. We could have function that takes the expect value and tell the solver to stop or continue. ; - I was thinking of adding the ability to step through the evolution (draft in #1455):; ```; solver = MeSolver(H, c_ops, options=opt); solver.start(t0, rho0); for t in [t1,t2, ...]:; rho_t = solver.step(t, args=new_args); ```; Which would work like a `yield`:; ```; solver = MeSolver(H, c_ops, options=opt); for rho_t in solver.yield_run(rho0, tlist):; if needed:; solver.update_parameter(args=new_args); ```; I prefer using steps since you don't have do define `tlist` first, you could use it in a `while True` loop or interactively.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451:153,depend,depending,153,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-858740451,1,['depend'],['depending']
Integrability,"My current understanding is that if NumPy is installed but not Cython, then when `egg-info` is called, NumPy distutils will happily follow `add_subpackage` to pull in `qutip/cy/setup.py`, then choke on the missing Cython dependency. On the other hand, if both are missing, the new fallbacks introduced in this PR will be tripped, such that the `add_subpackage` call will not happen, and `qutip/cy/setup.py` will not get called. I'll readily admit that NumPy but not Cython is an edge case, but it's one that we can probably deal with by trying to import Cython at the top and letting the `ImportError` branch us onto the fallback path. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/489#issuecomment-225778916:221,depend,dependency,221,https://qutip.org,https://github.com/qutip/qutip/pull/489#issuecomment-225778916,1,['depend'],['dependency']
Integrability,"My guess is it is a side effect of using the step function time-dependence. Instead, try a tanh, or other continuous and differentiable approximation, and see if that works.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/771#issuecomment-338078907:64,depend,dependence,64,https://qutip.org,https://github.com/qutip/qutip/issues/771#issuecomment-338078907,1,['depend'],['dependence']
Integrability,My problem may be more serious. I cannot execute the demo of time-dependent in LZ transition. I guess it is the problem of OS. My platform is MAC OS 10.14 and GCC is 4.2.1. I don't have MS VS 2015. May the environment is not satisfied.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1038#issuecomment-536151814:66,depend,dependent,66,https://qutip.org,https://github.com/qutip/qutip/issues/1038#issuecomment-536151814,1,['depend'],['dependent']
Integrability,"Nevermind, sorry I was being stupid. Changed the integrator tolerance and it work :/.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1492#issuecomment-815315471:49,integrat,integrator,49,https://qutip.org,https://github.com/qutip/qutip/issues/1492#issuecomment-815315471,1,['integrat'],['integrator']
Integrability,"No problem. I would suggest that at merge time, this PR is _not_ squashed but is simply rebased onto or merged into master. A merge would ensure that the PR number is included in the git history if that's desired, but all the relevant explanations are also already in the commit messages. It's a very large change, there's a lot of exposition in the commit messages, and each commit is a modular unit of work already, while the PR title won't actually be true (since not all of the tests are converted). I know that the commit messages are all combined on github, but it's much more difficult to search for the small bit you need out of several pages of writing, rather than having only the relevant parts presented to you.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-603938885:279,message,messages,279,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-603938885,3,['message'],['messages']
Integrability,"Nope, my point is that we should have a full-blown time dependent brsolver before we have approximate versions. If anything just for comparison, and if someone wants to do the whole sim. I can write it, but time is the issue. I am trying to have a bunch of these things done before I go meet everyone in Japan to work on the PRX paper and what not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/525#issuecomment-249343664:56,depend,dependent,56,https://qutip.org,https://github.com/qutip/qutip/pull/525#issuecomment-249343664,1,['depend'],['dependent']
Integrability,"Not in list format, but some solvers (`sesolve`, `mesolve` ) accept time-dependant Hamiltonian as a function returning a `Qobj`:; ```; H = lambda t, args: qutip.Qobj(my_array(t)); qutip.mesolve(H, ...); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1801#issuecomment-1034893883:73,depend,dependant,73,https://qutip.org,https://github.com/qutip/qutip/issues/1801#issuecomment-1034893883,1,['depend'],['dependant']
Integrability,"Not in that way. `0` is the right value when the system is constant or the time dependence is always active (`sin(w*t)`, `exp(-t)`, etc.) In these case, it is best to let the solver decide the right step length. Also pulse shorter that 5% of `tlist` could still be missed. Lastly. in some cases, the `tlist` may not be available to the solver. We certainly need to be better documentation of this. Maybe a notebook showing this trap could be useful. But without being able to look into the coefficient, I don't see an easy fix.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1945#issuecomment-1168820859:80,depend,dependence,80,https://qutip.org,https://github.com/qutip/qutip/issues/1945#issuecomment-1168820859,1,['depend'],['dependence']
Integrability,"Not sure if I can answer your specific question but I have used QUTIP GRAPE before. I would first suggest opening a pull request or linking to your fork, so it's easier to compare your modifications to the original code.; I have briefly looked at your code and I would suggest dropping numba as qutip doesn't currently have numba as a dependency. I am confused about why you choose the cnot notebook as your example? There is an example of quantum optimal control using open quantum systems, control-pulseoptim-Lindbladian.ipynb .; Nonetheless, I believe grape.py is definitely not the place to place your additional support for open quantum systems. Grape is an optimization method, you should be looking extending support for open quantum systems in the pulseoptim class.; If you are interested you can also take a look at the quantum optimal control tool I built, QUTIP's quantum optimal control didn't satisfy my needs. ; https://github.com/lifeishard/PADQOC",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1031#issuecomment-541810845:335,depend,dependency,335,https://qutip.org,https://github.com/qutip/qutip/issues/1031#issuecomment-541810845,1,['depend'],['dependency']
Integrability,"Not sure if it's that simple.; ```; --config-setting=""--global-option=--with-openmp""; ```; actually gives me a build error:; ```shell; $ python3.10 -m build --skip-dependency-check --no-isolation --wheel --config-setting=""--global-option=--with-openmp""; * Building wheel...; Traceback (most recent call last):; File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 363, in <module>; main(); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 345, in main; json_out['return_val'] = hook(**hook_input['kwargs']); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 261, in build_wheel; return _build_backend().build_wheel(wheel_directory, config_settings,; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 230, in build_wheel; return self._build_with_temp_dir(['bdist_wheel'], '.whl',; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 211, in _build_with_temp_dir; sys.argv = (sys.argv[:1] + setup_command +; TypeError: can only concatenate list (not ""str"") to list. ERROR Backend subproccess exited when trying to invoke build_wheel; ```. The other method; ```; --config-setting=""--build-option=--with-openmp""; ```; appears to work in the sense that it builds successfully. But after installing the package it reports that openmp is still missing; ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0; Numpy Version: 1.21.5;",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152:164,depend,dependency-check,164,https://qutip.org,https://github.com/qutip/qutip/issues/1875#issuecomment-1219841152,1,['depend'],['dependency-check']
Integrability,Note that int_argsort uses the c++ sort routine that does not guarantee that the array remains unchanged if sorting is not necessary. Thus the bucky test had to be removed as the returned perm array was compiler specific.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/654#issuecomment-285196142:40,rout,routine,40,https://qutip.org,https://github.com/qutip/qutip/pull/654#issuecomment-285196142,1,['rout'],['routine']
Integrability,"Note: in theory you can install QuTiP from the test PyPI server right now by doing; ```; pip install -i https://test.pypi.org/simple qutip-jakelishman; ```; (that's just the name - you still do `import qutip`) but since it's on the ""wrong"" server, you first have to manually install `numpy` and `scipy`. When it's released properly on PyPI it'll handle the dependencies correctly - this is only an artifact of being on the testing server. Running that command will install a binary version with no compilation, and should work on any (reasonable) Linux machine, Mac (possibly not M1 chips) and Windows. It's possible you may get an error about `ndarray size changed ... this may indicate binary incompatibility` - if so, either force `numpy` up to the new 1.20 or down to 1.19 (whichever one you don't have). This was a breaking change in numpy 1.20. Per my reading of the release notes, it won't be an issue provided in the future we always build against `numpy>=1.20` (even when using lower `numpy` at runtime) because the new version updates a certain C-API macro to take into account the possibility of runtime variability. I have pushed an additional change to the build requirements to ensure this always happens. This has another knock-on effect: numpy 1.20 only supports Python 3.7+ (released June 2017). Currently, officially QuTiP supports Python 3.6, but I think it's reasonable to follow numpy's footsteps and **drop support for python 3.6 from qutip 5.0**. It's offset by gaining support for 3.9. (Apologies for all the force-pushing - whenever I want to re-run a test release on my own branch I have to temporarily add an extra commit to swap to the testing server, then force-push a rewind of this PR's branch.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519:357,depend,dependencies,357,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-770459519,1,['depend'],['dependencies']
Integrability,"Note: the reported changes (other than the deletion of the licence from each source file) are all whitespace-only, or simply a reflow of the hard-wrapped text in `LICENSE.txt`. I didn't change the licence at all, other than the holder. I've also checked this with the same tool that GitHub uses, and it will definitely recognise the licence correctly after this. The whitespace-only changes in other files weren't actually 100% intended, but it was a function of how I did the licence detection - I normalised the whitespace at the ends of lines first. Looking through, I guess I only did that when changing the `doc` folder, not the main source code (I had to handle those two cases separately).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-863997684:146,wrap,wrapped,146,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-863997684,1,['wrap'],['wrapped']
Integrability,Nothing at all. IPython also crushes. None of them leaves any message... Let me try to make some breakpoints to locate it.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605322812:62,message,message,62,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605322812,1,['message'],['message']
Integrability,"OK, I see. If you are refactoring the parallelization of the mcsolve (which is currently tightly integrated in the mc code and quite messy) I would strongly recommend and lobby for using the new parallel_map API, and do away with all multiprocessing code in the mcsolve module and not using the callback function. I think this could make the mcsolve module vastly more readable and easier to maintain.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-65020826:97,integrat,integrated,97,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-65020826,1,['integrat'],['integrated']
Integrability,"OK, I think I understand. But it would be great with more info on this in the notebook as you suggest. Looking forward to that. Yes, to keep the tutorial notebook clean I think it would a good idea to add the plotting functions to qutip.visualization, if they are reasonably general purpose. Also, we have a version of the hinton graph i qutip.visualization, so if you can use it (or fix it up so that you can use it) you can remove the dependency on mpl_tools in the notebook, if you wish.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/268#issuecomment-65413267:437,depend,dependency,437,https://qutip.org,https://github.com/qutip/qutip/pull/268#issuecomment-65413267,1,['depend'],['dependency']
Integrability,"OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. If you change your mind, just re-open this PR and I'll resolve any conflicts on it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085#issuecomment-1426693519:204,depend,dependabot,204,https://qutip.org,https://github.com/qutip/qutip/pull/2085#issuecomment-1426693519,2,['depend'],['dependabot']
Integrability,"Oh man, yeah, that's embarrassing. Yeah, that's exactly what I _meant_ to put. I dunno how I screwed up the patch that badly!. I'll rebase these commits onto `master` and squash them into one or two nice modular commits. I think a little bit of the development here is worth preserving in the commit history for if someone looks at it in the future (there's no guarantee that this PR discussion will _always_ be up, but commit messages are forever). I'll force-push to this branch, so you'll have to force-pull a copy (or just delete your copy of this branch). Not the best practice, but better for keeping the `master` commit history neat.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605528198:427,message,messages,427,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605528198,1,['message'],['messages']
Integrability,"Oh yeah, I totally agree with that perspective - it's in part why I've gone on my little crusade over the past couple of weeks to remove all the warnings and errors from all the build processes. What do you think a sensible strategy is for handling bug fixes that touches code that issues complaints? CodeClimate will typically restate its complaint if you change a line that contributes to it (e.g. here I changed a ""return"" statement in a function that has too many). I guess there's either ""maintainers state whether any particular PR is acceptable with a failing warning""; ""write a [skip ci] commit message"" (or whatever it's called); or ""any PR that touches complained-about code must fix the error"". Without any experience, to my mind it seems like points 1 and 2 are basically the same, but point 1 gives the power to override to maintainers, and point 2 to contributors - seems like version 2 works well in a business where ""everyone"" is trusted to modify the code, but in the distribued opensource world, maybe not? Point 3 seems ideal in principle, but it seems like it would make it very hard to have first-time contributors do anything with older parts of the library - there'd be a huge onus to completely overhaul functionality, even just to fix small stuff. I really don't know what recommended practices are here - I was roughly working under the assumption that we'd have maintainers be allowed to override complexity failures on occasion, but we've never really discussed it as far as I know, and I do recognise the problems with it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506#issuecomment-826673175:603,message,message,603,https://qutip.org,https://github.com/qutip/qutip/pull/1506#issuecomment-826673175,1,['message'],['message']
Integrability,"Oh yeah, that's a good point we should push out the change sooner rather than later. With how the data-layer classes are implemented, ufunc handling on them wouldn't actually add any memory footprint, but it does add complexity whenever someone wants to implement a new data-layer class. It's hard to fit general ufunc machinery into the Dispatcher spec, because the ufunc interface is rather general, and we don't want to entirely reimplement numpy. You also can't dispatch on ""unary"" / ""binary"" / ""arbitrary"" ufuncs as groups (could have been an alternative), because (e.g.) `sin` has very different performance characteristics to `cos` on sparse matrices. If the dispatchers aren't in use, then having a separate function (`apply_ufunc`) doesn't make a performance difference over defining `__array_ufunc__` in a Cython class in speed or memory, but it does make it harder for a user. Class functions like that in Cython are actually implemented as separate C-backed functions - you can't override them on an instance-by-instance basis, so the instances aren't carrying around extra vtables or anything like that. One option for user convenience there could be to allow unary ufuncs on data-layer objects and forbid binary+ ones. We can do that with `__array_ufunc__`. It's not so difficult to keep track of the few numpy ufuncs that have f(0) = 0 so different sparse structures can optimise based on that. *Edit*: oh, I think I misunderstood what you were saying about ""lightness"" - do you mean the spec of what they have to support is light, or their memory impact is light?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-774106830:373,interface,interface,373,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-774106830,1,['interface'],['interface']
Integrability,"Oh, I didn't see that this issue existed. I was able to rebuild the image for 4.6 without the pain being _too_ excruciating, but it was a very manual process. In qutip/qutip-doc#137 I completely rewrote the `qutip-structure.py` file to map out arbitrary Python packages by importing it (not ideal if you're running it on untrusted code, but I assume we trust `qutip`!) and recursing through every known name and reference. That fixes the concerns people had above about the structure; you can see in the latest version of the docs that the visualisation isn't just a single layer any more. Right now, the main issue is getting `d3.js` to give us a proper image file without running it through an entire browser. If we're commited to using `d3.js`, then the right solution is presumably to use Node in CI with a small JS wrapper to dump out the correct SVG file. However, the new `qutip-structure.py` produces a pretty standard `dict`-tree representation of every name in the package and its parent, so it'd probably not be too difficult to use a Python visualisation package to do it for us. This is the only really difficult bit of the procedure now - once we've got a reproducible step to retrieve a vector image, automating both vector conversions and rasterisation is trivial.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525#issuecomment-828488287:820,wrap,wrapper,820,https://qutip.org,https://github.com/qutip/qutip/issues/1525#issuecomment-828488287,1,['wrap'],['wrapper']
Integrability,"Oh, I just noticed that if I do this in a jupyter notebook, I get a somewhat useful error message from the server: ; ~~~; /Users/goerz/.pyxbld/temp.macosx-10.6-x86_64-3.5/pyrex/rhs72670.cpp:541:10: fatal error: 'complex' file not found; #include <complex>; ~~~",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-436875871:90,message,message,90,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-436875871,1,['message'],['message']
Integrability,"Oh, a thought: perhaps I should modify the commit messages of PRs in the old qutip-doc to make them link correctly. For example, instigate a rewrite rule of #xxx goes to qutip/qutip-doc#xxx?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513#issuecomment-829621066:50,message,messages,50,https://qutip.org,https://github.com/qutip/qutip/pull/1513#issuecomment-829621066,1,['message'],['messages']
Integrability,"Oh, and I haven't exactly decided how the dispatchers will store their ""constructed"" methods yet. It'll depend a little on if there are major speed implications one way or the other (I'm especially concerned with the speed of binding to arbitrary function signatures), and whether they will require a huge amount of memory. I suspect that memory won't ever be too much concern - at their hearts, the dispatchers will mostly need a couple of `dict` attributes and a whole bunch of references to pre-existing objects. All that stuff is pretty light-weight.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338#issuecomment-672881468:104,depend,depend,104,https://qutip.org,https://github.com/qutip/qutip/pull/1338#issuecomment-672881468,1,['depend'],['depend']
Integrability,"Oh, one thing that I'd like to suggest we _don't_ do: use this interface to _implicitly_ create `Qobj` inside our functions. `__array__` was also originally meant as a method for allowing Numpy's ufuncs to act on other types. This actually caused us rather annoying problems in QuTiP when they decided to change up its semantics a little bit in version 1.20, which is in part is why I'm very cautious around this topic. Since we weren't super careful when we introduced `Qobj.__array__`, we allowed things like `np.sin(qutip.sigmax())` which we shouldn't have, and then the Numpy 1.20 changes completely altered how `ndarray(dtype=object)` arrays behaved when containing objects that all implemented `__array__`. To get around _some_ of these problems, they've introduced `__array_function__` and `__array_ufunc__`, though to me at best these are bandages. Those two concerns aren't immediately applicable in QuTiP, but they're sort of indicative of potential problems when using a `__qutip_qobj__` method implicitly in functions like `Qobj.__add__`. These are where it becomes very evident that Julia-style programming doesn't apply in the same way in Python. Python is only a single-dispatch language, so `a + b` will dispatch using the table of `a` predominantly, whereas `b + a` will dispatch on `b`. In a proper multiple-dispatch library the rules are separate to the classes, so neither class is called preferentially, there's just one rule and either library can define it. My point with this is that if `Qobj.__add__` has a case where it handles Qobj-like types, then we prevent the other library from overriding the method. Multi-methods like this simply don't work the same in Python as they do in Julia, so even if `Qobj` implements interfaces from a variety of other libraries, we'd never get good consistent behaviour with functions like this. Operations that ought to be commutative like `+` would become dependent on operand order. To some degree, implementing the interface would be a ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825646108:63,interface,interface,63,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825646108,1,['interface'],['interface']
Integrability,"Ok no worries, lets merge it in there. -P. On Jul 14, 2017 06:36, ""Denis Vasilyev"" <notifications@github.com> wrote:. > The problem is that at the moment this error crashes the entire python; > kernel unexpectedly for a user without any messages. It can be very; > frustrating for a newbie.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/699#issuecomment-315348946>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ABMPqYXiiBT-6u_46schRBDuTuOPQ-isks5sN2C3gaJpZM4Nr1OC>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/699#issuecomment-315354193:237,message,messages,237,https://qutip.org,https://github.com/qutip/qutip/pull/699#issuecomment-315354193,1,['message'],['messages']
Integrability,"Ok, I think I understand now. The QObjEvo class is well documented. The `cqobjevo` classes are not really exposed to the user, and so they don't need full documentation.; I would suggest that any new files added by this PR have a short file level docstring that explains the purpose of the classes / functions that it defines. Consider these as messages to developers rather than users.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815#issuecomment-454724726:345,message,messages,345,https://qutip.org,https://github.com/qutip/qutip/pull/815#issuecomment-454724726,1,['message'],['messages']
Integrability,"Ok, I'll merge it for now, but I'll try and return to look at `dnorm` in more detail in the future, and particularly its tests; I'm also not a huge fan of having a secondary test dependence, but for the most part that's not really an issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490#issuecomment-815673461:179,depend,dependence,179,https://qutip.org,https://github.com/qutip/qutip/pull/1490#issuecomment-815673461,1,['depend'],['dependence']
Integrability,"Ok, I've updated all PR links. It was no harder than basically running `sed s_#_qutip/qutip-doc#_g` on the commit messages - I checked that nothing untoward got changed as well. I've also updated the PR template - thanks Eric, I never would have thought of that (not sure how I missed it while using `grep` though!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513#issuecomment-829953403:114,message,messages,114,https://qutip.org,https://github.com/qutip/qutip/pull/1513#issuecomment-829953403,1,['message'],['messages']
Integrability,"Ok, cool. I don't think there's any situation we should be mutating the `Options` class we're passed in though - I'd consider that a bug no matter what, since that leaks like your print statement shows. We can just duplicate it on entry, then modify that. To me it's not clear that passing several items in `tlist` should override an explicit `store_states=False` - as long as we allow you to pass an array as time-dependence, there is a sensible reason to pass more items in `tlist` than you need results for. Sure, you may also be able to use `Cubic_Spline`, but if we punish you for using arrays by swapping your options, why do we provide them? I think we should only warn and change the settings if _nothing_ is going to be stored - `store_final_state` should be enough to suppress it and not store the intermediate states, even if that implies the user might not be doing the fastest possible thing. I don't necessarily think we should try to promote ideal usage through runtime warnings if that's more verbose to type - that's what documentation is for, and some people will do stuff because it's faster to type, since they work interactively.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775332513:415,depend,dependence,415,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775332513,1,['depend'],['dependence']
Integrability,"Ok, great! I'll work on adding it in too, then. I actually just implemented it outside brmesolve, but in a way that should be easy to put back in. I'll check out the array-based time-dependent format (I actually haven't used it yet, still behind the times!)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/258#issuecomment-63558912:183,depend,dependent,183,https://qutip.org,https://github.com/qutip/qutip/pull/258#issuecomment-63558912,1,['depend'],['dependent']
Integrability,"Ok, it turns out I got the numpy release notes the wrong way round; we have to build our binaries with `1.16.6 <= numpy < 1.20` to maintain ABI compatibility no matter the numpy version. I have updated the compiler infrastructure to take this into account - this is in some ways a temporary restriction until two or three years in the future when we can drop support for all numpy versions less than 1.20. This is ready for final review. If you're fast, you can also try installing from the test PyPI server to see if the wheels work for you. While it's on the temporary server, you need to install `numpy` and `scipy` manually yourself (as they don't exist on test.pypi.org), but pip will do the dependencies correctly for you once it's publishing to the full repo.; ```bash; conda create -n pypi-test; conda install python pip numpy scipy; pip install -i https://test.pypi.org/simple qutip-jakelishman; python -c 'import qutip; qutip.about()'; ```. @hodgestar, @nathanshammah: perhaps you could just glance over this again and make sure everything looks right to you? Simon, I know you already looked over it once, so if you've not got time again, no problem - barely anything has changed since you last saw it. Nathan: in theory once we're in a position where deployments push to PyPI I think I can write an action for qutip/qutip.github.io to push a commit updating the website with the new information too. However, with the docs currently using a completely separate build process in a different repo, they can't really be triggered by a release here. I wrote this PR against `dev.major`, but I suppose in theory I could backport it to the 4.x branch if that's absolutely required. I think some parts of the setup changed for `dev.major`, which is why I didn't originally try to make it to the current version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158:697,depend,dependencies,697,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-774353158,1,['depend'],['dependencies']
Integrability,"Ok, let's drop the tensor thing then. I'll make a new patch which includes the time-dependence syntax that you suggest, indeed a more convenient way. Do you think it would be necessary to perform linear interpolation as I did or would just rounding to the nearest point be ok. It looks like I'll need to add code to sesolve and mesolve, and these files seem to have some duplicate code already, do you think it would be useful to make a new file with some shared helper functions (mostly for generating the cython code)?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-44796169:84,depend,dependence,84,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-44796169,1,['depend'],['dependence']
Integrability,"Ok, my bad, I specified the wrong folder. It works for me on windows (except for some tests that are known to be failing), although it takes a bit longer to solve the dependency. It might be very useful for downstream packages since these issues kept popping up.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1309#issuecomment-654983411:167,depend,dependency,167,https://qutip.org,https://github.com/qutip/qutip/pull/1309#issuecomment-654983411,1,['depend'],['dependency']
Integrability,"Ok, so I did some benchmarking at https://nbviewer.ipython.org/gist/goerz/34af142b78d7e344417d838bbea78aaf/06_example_3states_benchmark.ipynb ([gist](https://gist.github.com/goerz/34af142b78d7e344417d838bbea78aaf)), based on [one of the example notebooks from the Krotov package](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). I'll be referring to the numbered cells in that notebook in the discussion below. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:. > I think you might be able to achieve a lot of what you want already. The pseudo-code looks like it's not using `mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. That's certainly worth trying: when calling `mesolve` in a loop over the time grid, I did indeed see a significant speedup when summing the Lindbladian into a single constant `Qobj`, see `In [21]` vs `In [24]`. On the other hand, it doesn't always give a speedup: in the low-level [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) it actually makes the propagation slower, see `In [29]` vs `In [32]`. It's a bit surprising, but then, as you say:. > [...] This isn't guaranteed, because it involves copying rather more data _before_ the call. So that's ok. > Would something like this work for you? [...]; >; > By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately. To be clear, I personally never use collapse operators (and the Krotov documentation heavily discourages it). Inst",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:848,depend,dependent,848,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,2,"['depend', 'integrat']","['dependent', 'integrator']"
Integrability,"Ok. I wrote a test for it. The error message can be seen below. I will open a PR to resolve this. Thank you very much for raising the issue.; ```; qc = QubitCircuit(3); qc.add_gate(""CNOT"", targets=[1], controls=[0]); test_gate = Gate(""RZ"", targets=[1], arg_value = 1.570796,; arg_label=""P""); qc.add_gate(test_gate); qc.reverse_circuit(); ```. ```; ERROR: Reverse a circuit; ----------------------------------------------------------------------; Traceback (most recent call last):; dev/qutip/qutip/qip/circuit.py"", line 371, in reverse_circuit; temp.append(self.gates[self.N - i - 1]); AttributeError: 'QubitCircuit' object has no attribute 'append'; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/682#issuecomment-292698877:37,message,message,37,https://qutip.org,https://github.com/qutip/qutip/issues/682#issuecomment-292698877,1,['message'],['message']
Integrability,"On a subsequent run, the build on Travis CI failed. . The two runs were prompted by the same branch, minutes apart, but differed for the version of Python that Travis CI picked up (3.72 working, 3.73 failing) and some minor decimal difference in release version of one dependency (Cython if I remember correctly). . Making a branch with a special .travis.yml file with additional osx_image instructions for the Mac OS build might help to sort this out. Two days ago Travis switched to Python 3 as default installation language and unexpectedly yesterday I noticed that some of the failing builds on previous branches were successful. We are always building with Python 3, as it says in the change log, I am just wondering if some dependency was doing something incorrectly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/961#issuecomment-484739775:269,depend,dependency,269,https://qutip.org,https://github.com/qutip/qutip/pull/961#issuecomment-484739775,2,['depend'],['dependency']
Integrability,One idea was to randomly print a message on `import qutip`. I am not sure on whether this would go against established etiquette. Anyone have a view on this?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/664#issuecomment-286357609:33,message,message,33,https://qutip.org,https://github.com/qutip/qutip/issues/664#issuecomment-286357609,1,['message'],['message']
Integrability,"Our diamond norm calculation in [QPtomographer](https://github.com/Tomographer/QPtomographer/) is written in C++ in the file [QPtomographer/cxx/diamond_norm_scs.h](https://github.com/Tomographer/QPtomographer/blob/master/cxx/diamond_norm_scs.h) (see [QPtomographer/test/test_diamond_norm.cxx](https://github.com/Tomographer/QPtomographer/blob/master/test/test_diamond_norm.cxx) for an example usage) and uses the C interface of [the SCS solver](https://github.com/cvxgrp/scs). The way it stands, it also depends on [Eigen C++ header library](http://eigen.tuxfamily.org/), but it should be easy to remove this dependency as it is only used to specify the input matrices. Other minor dependencies are easily removed. I'm not sure what underlying mechanism you use in QuTiP, but it should be relatively straightforward to reformat the whole class into a C implementation with only SCS as a dependency. Unfortunately the python `scs` package does not install C headers, so that dependency might turn out to be something to worry about. Perhaps SCS itself can be integrated in the QuTiP source?. I'd be happy if our code is useful for you, and let me know if you'd like any clarifications about our implementation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/874#issuecomment-494716341:415,interface,interface,415,https://qutip.org,https://github.com/qutip/qutip/issues/874#issuecomment-494716341,7,"['depend', 'integrat', 'interface']","['dependencies', 'dependency', 'depends', 'integrated', 'interface']"
Integrability,"Perhaps an example will help:. Say that I want to squeeze the vacuum with z=1. What I should do is compute the vector S(z)|0> for z=1. What I would expect is that the amplitudes of the result shouldn't depend on whether I decide to truncate at dimension 10 or 20 or 30, but with the current implementation of `qutip.squeeze` it does:; ```python; (qt.squeeze(5,1)*qt.basis(5,0)); ```; tells me that (for instance) the 5-photon state has amplitude 0.453, while according to ; ```python; (qt.squeeze(10,1)*qt.basis(10,0)); ```; the same state has amplitude 0.310. This is a physically relevant difference, so how do I answer the question: what's the probability of detecting n photons in the S(z)-squeezed vacuum? With the current implementation of `qutip.squeeze` I cannot. Do you see the problem?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286262389:202,depend,depend,202,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286262389,1,['depend'],['depend']
Integrability,"Perhaps someone else can give a more concrete answer, but I guess the driving frequency is too high for the number of time-steps? Try tweaking the ODE solver with options like the following:. `; options = Options(nsteps=15000, atol=1e-13, rtol=1e-13) ; `. and passing it to mesolve. `result1 = mesolve(Ha, psi0, times, [np.sqrt(T1)*sig01, np.sqrt(T2)*sig02, np.sqrt(gamma*(nth + 1))*a, np.sqrt(gamma*nth)*a.dag()], [a.dag()*a, sig00, sig11, sig22], progress_bar=True, options=options); `. More practically speaking, for the problem you are solving I guess explicitly including the time dependence is unneccessary, since you have already made a RWA on the drive and the coupling? . Moving to an interaction picture in w1, w2 and wph, and removing the explicit time-dependence might simplify the problem and might give you equivalent results, and in the process make your code much simpler and more efficient?. In other words just set w1=w2=wph=0, and put the drive as a time-independent term in the hamiltonian . `; H01 = g*(sig12*a.dag() + sig21*a) + pump1*(sig01 + sig01.dag()); `",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514:586,depend,dependence,586,https://qutip.org,https://github.com/qutip/qutip/issues/1038#issuecomment-508634514,2,['depend'],['dependence']
Integrability,"Please feel free to contribute improvements upstream! You can blame me for the scipy implementations of those functions, I'm just a postdoc who needed them for some computational biology calculations. Sorry if they are bad. Also they may be bit-rotting further due to the questionable 'LinearOperator' situation in scipy and the inconsistencies among the np.ndarray, np.matrix, scipy.sparse, and linear operator interfaces.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/464#issuecomment-210592220:412,interface,interfaces,412,https://qutip.org,https://github.com/qutip/qutip/pull/464#issuecomment-210592220,1,['interface'],['interfaces']
Integrability,"Please update this pull to the latest master so that we can check if it passes with all of the new changes. Also, your last correlation pull did not clean up the *.pyx files generated for the time-dependent code. Please check that no *.pyx files are left hanging around in this pull.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-272532379:197,depend,dependent,197,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-272532379,1,['depend'],['dependent']
Integrability,"Pure numerically speaking, the last `diss_coeff` is a way larger than the others.; ```python; >>>diss_coeff; [0.19836061612310207j,; 0.25470007277190326j,; 0.223606797519535j,; 4925.267477050309j]; ```; With this large frequency, if you want to solve the dynamics using ODE, I don't think there is a way to make it faster. You have to either simplify your model mathematically, or, because there is no time dependency in your system, use the (deprecated) `essolve` that computes the dynamics using eigenvalues. Thinking about the physics, the T2 time is much smaller than your `tlist`, the system has already fully decohered. PS: @jakelishman It seems that the `essolve` does have some use-cases? Like in small systems for verification perpose. I remember there is another PR that also mentions it. As we deprecated it, I'm wondering if there is an efficient alternative in QuTiP?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1623#issuecomment-886175452:407,depend,dependency,407,https://qutip.org,https://github.com/qutip/qutip/issues/1623#issuecomment-886175452,1,['depend'],['dependency']
Integrability,Python 2.7 builds failed. Assuming this is because the blas module does not exist.; See commit message for details of this new attempt,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/876#issuecomment-394758248:95,message,message,95,https://qutip.org,https://github.com/qutip/qutip/pull/876#issuecomment-394758248,1,['message'],['message']
Integrability,"QuTiP doesn't have one built in at the moment, but [`toqito`](https://vprusso.github.io/toqito/) can do it as numpy arrays, which you can just wrap in `Qobj`. There's no scope for `density` there, though (and it would be very difficult to do so, I think!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1642#issuecomment-905715259:143,wrap,wrap,143,https://qutip.org,https://github.com/qutip/qutip/issues/1642#issuecomment-905715259,1,['wrap'],['wrap']
Integrability,"QuTiP: Quantum Toolbox in Python. ================================. Copyright (c) QuTiP team 2011 and later. Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed,; Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross, Asier; Galicia, Paul Menczel, and Patrick Hopf. Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco; Nori and Will Zeng. Original developers: R. J. Johansson & P. D. Nation. Previous lead developers: Chris Granade & A. Grimsmo. Currently developed through wide collaboration. See https://github.com/qutip; for details. QuTiP Version: 5.0.4. Numpy Version: 1.24.3. Scipy Version: 1.14.1. Cython Version: None. Matplotlib Version: 3.7.2. Python Version: 3.11.5. Number of CPUs: 16. BLAS Info: INTEL MKL. INTEL MKL Ext: False. Platform Info: Windows (AMD64). Installation path: C:\Users\sabhy\anaconda3\Lib\site-packages\qutip. ================================================================================. Please cite QuTiP in your publication. ================================================================================. For your convenience a bibtex reference can be easily generated using; `qutip.cite()`. On Wed, Sep 25, 2024 at 4:09 AM Paul ***@***.***> wrote:. > Could you please include the output of the command qutip.about()? Because; > your code does not give an error on my setup.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/2536#issuecomment-2372741589>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AJVIYE6VAXW7QIVMRM4WQTDZYILLZAVCNFSM6AAAAABOYAR32CVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGNZSG42DCNJYHE>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2536#issuecomment-2373078683:1744,Message,Message,1744,https://qutip.org,https://github.com/qutip/qutip/issues/2536#issuecomment-2373078683,1,['Message'],['Message']
Integrability,"Quick example is below. To add a bit more, the ''slowness'''of the standard brmesolve() run in this example depends on whether I install mkl or not. without mkl, its >10 mins, with mkl, about one minute. The run with converting the tensor to sparse always takes around 30-40 seconds, and doesn't depend too much on mkl. ```; import qutip as qt; import numpy as np. #spectral density; def Jw(w): ; return lam**2 * gamma * w / ((w0**2 - w**2)**2 + (gamma**2) * (w**2)); ; ; #power spectrum; def J_power_spectrum(w):; """""" The Ohmic bath power spectrum as a function of w; (and the bath parameters).; """"""; return (; Jw(w) * 2 * (w>0); ); def Ising_solve(N, g0, J0, gamma, tlist, options, use_csr=True):; # N : number of spins; # g0 : splitting; # J0 : couplings. #Setup operators for individual qubits; sx_list, sy_list, sz_list = [], [], []; for i in range(N):; op_list = [qt.qeye(2)] * N; op_list[i] = qt.sigmax(); sx_list.append(qt.tensor(op_list)); op_list[i] = qt.sigmay(); sy_list.append(qt.tensor(op_list)); op_list[i] = qt.sigmaz(); sz_list.append(qt.tensor(op_list)). # Hamiltonian - Energy splitting terms; H = 0.; for i in range(N):; H += g0 * sz_list[i]. # Interaction terms; for n in range(N - 1):; H += -J0 * sx_list[n] * sx_list[n + 1]. # Initial state; state_list = [qt.basis(2, 1)] * (N-1); state_list.append(qt.basis(2, 0)); psi0 = qt.tensor(state_list); fx = 1; fy = 1.1; fz = 0.9; coup = (fx * (sx_list[N-1]) ; + fy * (sy_list[N-1]); + fz * (sz_list[N-1])). ; if use_csr:; R = qt.bloch_redfield_tensor(H, [[coup, J_power_spectrum]], fock_basis=True, sparse_eigensolver=True,br_dtype = 'sparse', sec_cutoff=-1); R = R.to('csr').tidyup(); result = qt.mesolve(R,psi0, tlist, options=options); else:; result = qt.brmesolve(H, psi0, tlist, a_ops = [[coup, J_power_spectrum]], e_ops=sz_list, options=options, sec_cutoff=-1); return result. #bath sd params; lam = 5; w0 = 10; gamma = 5; . #system params; N = 5; g0 = 1; J0 = 5. tlist = np.linspace(0, 100, 1000); options ={""nsteps"": 15000, ""s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2530#issuecomment-2403834583:108,depend,depends,108,https://qutip.org,https://github.com/qutip/qutip/issues/2530#issuecomment-2403834583,2,['depend'],"['depend', 'depends']"
Integrability,"Qutip use Scipy's Ode solvers. The interface of scipy solvers chaged in recent version, but we are still using [ode](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.ode.html#scipy.integrate.ode). We are using zvode integrator and adams method per default. Most of qutip's solver accept an options arguments which can change the method to 'bdf' but cannot be changed to Isoda or dopri. Mpi is not supported but multiprocessing is used by mcsolve and the stochastic solvers. If you [compile qutip](http://qutip.org/docs/latest/installation.html?highlight=openmp) yourself, we have a openmp parallelized matrix-vector product which can be used to speed up problem with large Hamiltonian.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1101#issuecomment-542843153:35,interface,interface,35,https://qutip.org,https://github.com/qutip/qutip/issues/1101#issuecomment-542843153,4,"['integrat', 'interface']","['integrate', 'integrator', 'interface']"
Integrability,"Regarding the suggestions in the TODO list:. > Have qutip-qip be an optional dependency. I'm wondering about this. Having `pip install qutip[qip]` is nice, but what should happen with `pip install qutip[full]`? Should that also install `qutip_qip`? If not should we then leave `qutip_qip` out of `full`? And should we have `qutip[full-family]`?. > Add installation of qutip-qip to the CI workflow. This we should not do -- we don't want anything in core qutip to accidentally require qutip_qip (that was sort of the point of the family packages).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1920#issuecomment-1147715338:77,depend,dependency,77,https://qutip.org,https://github.com/qutip/qutip/pull/1920#issuecomment-1147715338,1,['depend'],['dependency']
Integrability,"Regarding your questions:. - It's the same in QuTiP 5 currently. I am creating a PR also for that version, but I will include support for multiple coupling operators to the PR.; - Yes, I will add a test for this.; - This parameter is only relevant for `fmmesolve` ( master equation solver ). There is already the parameter `kmax` which sets the truncation of sidebands to be considered for the integration of the coupling operator. The integral to solve reads as:. $$ \frac{1}{T} \int_0^T dt e^{-ik\Omega t} f(t) $$. where $k \in \[-k_{max}, k_{max} \]$ and $f(t)$ is a $T$-periodic function. Hence, we know the frequency of the integrand and therefore the required number of grid points for the numerical integration can be set based on `kmax`.; I think, we don't need to create another parameter for `nT`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1961#issuecomment-1198959790:394,integrat,integration,394,https://qutip.org,https://github.com/qutip/qutip/pull/1961#issuecomment-1198959790,2,['integrat'],['integration']
Integrability,"Related to this, the qutip User Guide mentions that the (function) ""callback format"" for input of time-dependent operators works for _both_ Hamiltonians and jump operators (bottom of pg. 148). If I put a function into the Ham input, I am fine. But putting the same function into the list of jumps throws:. ```; AttributeError: 'function' object has no attribute 'issuper'; ```. I guess the Note 2 on pg. 149 sort of implies this only works for Hams.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/223#issuecomment-54542286:103,depend,dependent,103,https://qutip.org,https://github.com/qutip/qutip/issues/223#issuecomment-54542286,1,['depend'],['dependent']
Integrability,"Removing list and forcing dict does not feels making things nicer... Being forced to use dict is mostly a nuisance for me. Presently we support both list ans dict output without much issues, there are very few place that would have issue supporting multiple interfaces. (I can only think of `plot_expectation`.). But how about using `namedtuple`?. It act as a list for loop and numpy, but elements can be called by both the number and name, and I like having result's output somewhat immutable. The biggest issue is that we must provide field names for list inputs... For MC, if e_ops callable return weird things, they will have to choose the option to store all trajectories instead of averaging the result. If they ask for the average or standard derivation of a dict, they will and should get an error, the best we should do is making this error message useful. Custom reduce function could be doable, but probably be a mess, especially if we need one for both `mean` and `std`... So unless someone present a good use case for it, I don't plan going that way.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1141402988:258,interface,interfaces,258,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1141402988,2,"['interface', 'message']","['interfaces', 'message']"
Integrability,"Right now there's no way to make `Qobj` use a dense representation, but that is something that's been discussed elsewhere. If you just want to use `qutip` functions to build up a system then do the heavy lifting using `numpy`, you can convert a `Qobj` to a dense array with `Qobj.full` (e.g. `qutip.qeye(10000).full()`). Your question certainly did spot a place where the error message could be improved, though!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-601795001:378,message,message,378,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-601795001,1,['message'],['message']
Integrability,"Right now, QuTiP doesn't support passing `c_ops` as an arbitrary function to `mcsolve`. @Ericgig might have more ideas for other things you may try, but in general to us `mcsolve` you need to have your collapse operators as constant matrices multiplied by time-dependent scalars. Depending on your collapse operators, you may be able to move to an interaction picture such that the collapse operators lose their time-dependence, or move to being scalars multiplied by constant matrices. Otherwise, if your system size and available memory permit, you can use `mesolve` to directly solve the Lindblad master equation for the full density matrix rather than single trajectories.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1398#issuecomment-739026681:261,depend,dependent,261,https://qutip.org,https://github.com/qutip/qutip/issues/1398#issuecomment-739026681,3,"['Depend', 'depend']","['Depending', 'dependence', 'dependent']"
Integrability,Running it through the profiler suggests that cy_expect_psi_csr is only responsible for a small part of the time (accumulative time 4.2 sec as compared to total run time of 148 sec). ```; Wed Nov 26 15:04:59 2014 profile.out; 5155120 function calls (5143582 primitive calls) in 148.280 seconds; Ordered by: cumulative time; List reduced from 3097 to 100 due to restriction <100>; ncalls tottime percall cumtime percall filename:lineno(function); 441/1 0.014 0.000 148.283 148.283 {built-in method exec}; 1 0.001 0.001 148.283 148.283 mcsolve-performance.py:1(<module>); 2 0.000 0.000 147.463 73.732 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:69(mcsolve); 2 0.000 0.000 147.411 73.706 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:446(run); 2 0.000 0.000 147.411 73.705 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:423(parallel); 2 0.011 0.006 147.411 73.705 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:415(serial); 1000 8.867 0.009 147.340 0.147 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/qutip/mcsolve.py:757(_mc_alg_evolve); 453518 1.543 0.000 130.497 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:376(integrate); 453518 127.846 0.000 128.245 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:859(run); 395940 0.709 0.000 74.413 0.000 /home/rob/py-envs/py3-devel/lib/python3.4/site-packages/scipy/integrate/_ode.py:747(step); 171960 4.219 0.000 4.219 0.000 {built-in method cy_expect_psi_csr}; ```,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-64519867:1249,integrat,integrate,1249,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-64519867,4,['integrat'],['integrate']
Integrability,"So I pushed two commits here - one which makes the changes to `setup.py`, and another which doesn't just remove the commented reference to `nose`, it completely overhauls `test_qobj.py` into a more `pytest`-friendly format. I found that removing the comment would have left a very odd function that was used to decorate test cases, which isn't necessary in `pytest` so much because you can use parametrisation, more description function names, and grouping in `Test*` classes to achieve the same goal with less custom wrappers. Once I was on that, I kind of got carried away changing the rest of the file. Let me know if that's too much - I could rebase this PR (and resubmit it) to split up the commits if you'd rather, or I can I just remove that last commit which makes all those changes. At the time of writing, the CI tests haven't run, and I'm a little worried that they'll fail due to the added dependency on `pytest-runner` in `setup.py`, when I haven't modified `.travis.yml`. Even if the CI tests don't fail, I think there might be some knock-on effects for documentation or packaging from that change?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1161#issuecomment-576056085:518,wrap,wrappers,518,https://qutip.org,https://github.com/qutip/qutip/pull/1161#issuecomment-576056085,2,"['depend', 'wrap']","['dependency', 'wrappers']"
Integrability,"So, I did a lot of digging around trying to add the banner for all the older documentation to point towards the latest. But it was a pain to modify and add manually a message on each page to point towards the latest docs. However, for future releases, we could use the `cannonical_url` option of `sphinx_rtd_theme` which makes search engines index the latest links to the documentations. https://docs.readthedocs.io/en/stable/canonical.html",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1516#issuecomment-467538074:167,message,message,167,https://qutip.org,https://github.com/qutip/qutip/issues/1516#issuecomment-467538074,1,['message'],['message']
Integrability,"So, in summary, this issue affects only MacOS running Python 3.8. As it is not possible to handle seg faults (because Python crashes), then I think we should, for now, identify which tests we know will seg fault and fail them with a message to say something like ""known fault with Python 3.8 on MacOS"". This way the rest of the tests will complete. We can they work on a proper fix, for which we should raise another issue. I am working on creating a MacOS test platform for myself. In the meantime, if anyone can isolate which tests will cause a seg fault, that would be great.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-598830257:233,message,message,233,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-598830257,1,['message'],['message']
Integrability,"Solvers: absolutely the solvers should always be packaged with the main `qutip`. I had sort of envisaged that we'd put them in a `solve` package, which would be exported into the main namespace just like `core` is. This way is more just for greater separation, so that the full core isn't entangled with the solvers themselves - I think separating them like this will help us ensure that we specify the data layer API much more cleanly if the solvers aren't referenced within it. (i.e. there's no reference to any solver within `core`, but the API is built sufficiently cleanly that they can still access all the internals). OpenMP check: I think there's two neater ways:; 1. perhaps `settings` should just be in `core` too? I avoided putting the check in `core/__init__.py` because I'm really trying to avoid bi-directional dependencies between the packages, but moving `settings.py` into `core` would solve that.; 2. alternatively, we could just write `settings.py` as part of `setup.py` - determine whether we built against OpenMP/MKL at compile-time, and then just write it in? We can still choose whether or not to use it in various runtime situations. As for the current test - yeah, the comparative complexity is kind of indicative that this isn't the right way to do it. It's a relatively straightforward use of `importlib`, but still it's more difficult. (By the way: are you and @ajgpitch getting notified when I post in [the discussion board](https://github.com/orgs/qutip/teams/data-layer-devs)?)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1282#issuecomment-638730654:825,depend,dependencies,825,https://qutip.org,https://github.com/qutip/qutip/pull/1282#issuecomment-638730654,1,['depend'],['dependencies']
Integrability,Some updates:. 1. All measurements (except the one in the computational basis) have now been moved to qutip/measurement.py. The interface for the previous measurement style (using observables and eigenstates) remains the same. The only difference is that the `measure` and `measurement_statistics` functions now act as dispatch functions that can carry out projective measurements instead when the `op : list of projection operators` ; 2. I have moved all measurement tests to qutip/tests/test_measurement.py as well as moved all measurement tests to pytest style,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643731499:128,interface,interface,128,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643731499,1,['interface'],['interface']
Integrability,Something is way off about that test failure again... Is it possible Travis isn't cleaning up properly? I can't reproduce the failure (it's also clearly nothing to do with this change) and the error message doesn't match up. If anything it looks like the error message is coming from a hash collision inside QobjEvo _maybe_?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672:199,message,message,199,https://qutip.org,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672,2,['message'],['message']
Integrability,Sorry for not getting back to this earlier and thanks a lot for putting the array-based time-dependence in. It works like a charm.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-47146087:93,depend,dependence,93,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-47146087,1,['depend'],['dependence']
Integrability,"Sorry for the delay in getting involved in this.; @bencbartlett Thank you for what looks like an excellent contribution.; @sahmed95 Thanks a lot for reviewing this. Personally I am ambivalent about 1 or 2 lines between functions. I just pick people up on it, as I was picked up on it by Rob with my first contribution. I thought pep8 says 1 between function and 2 between classes, but I happy to go with either. Regarding classes...; Yes, class objects could broadly fall into two categories: ; 1. data containers; 2. processing objects. QuTiP has historically used only the first kind.; Personally I am a big believer in the benefits of object-oriented (OO) programming. As can be seen in the control modules I contributed. I won't write an essay on it here, but being able to pass around processors of different kinds, with similar interfaces, has a many benefits. I would like to see all the solvers in QuTiP move to a class structure, as this would allow for some more code re-use, and this helps with maintainability.; Some of the more recent contributions have started using processor type classes, these I think @sahmed95 has already highlighted. If @sahmed95 has recommended an significant advantage of using some class object, then I support this. If it's not a lot of work, then I suggest implement it now. Otherwise I suggest merge now and consider a PR to implement in the near future, as @bencbartlett has waited patiently for us to look at this PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-385964143:834,interface,interfaces,834,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-385964143,1,['interface'],['interfaces']
Integrability,"Sorry for the noise, I got what was wrong, it was basically a mistake from my part. I was using a time-dependent hamiltonian written with strings, such as. ```python; H = [H_0, [H_1, 'sin(t)']; ```. and `H_0` and `H_1` had incompatible shapes… :/ Maybe it would be worth adding an extra check on this, to ease debugging? Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/761#issuecomment-333949911:103,depend,dependent,103,https://qutip.org,https://github.com/qutip/qutip/issues/761#issuecomment-333949911,1,['depend'],['dependent']
Integrability,"Sorry for the slow response... It seems to me like @Ericgig summed it up pretty concisely. Although I'm not sure I understand how #1123 fits in: what is the plan for `Qobjevofunc`, and how would it fit in to specifying time-dependent Hamiltonians?. The only thing that's ever really bothered me was the mandatory `args` as part of the signature, even if it's not used. That's lead to the need for workarounds like the `allow_args` parameter in; https://github.com/qucontrol/qdynpylib/blob/f7b54af3e586683cdfd9b3dd666c5cf540d843e1/src/qdyn/pulse.py#L555. If there's a future `f(t)` option, I should be happy. In the abstract, `f(t, **args)` and `f(t, state_vec, **args)` would be the most elegant, but if there's a severe performance hit, that could be a problem. I'm surprised, though: I would have thought that `f(t, **args)` and `f(t, args)` should be almost the same thing in the Python internals, since you can modify `args` inside of `f` and pass it to lowerlevel function as `**args` again. Even from the user's perspective any current code with signature `f(t, args)` could have its signature replaced with `f(t, **args)` without requiring any change to the function body. But I'm clearly missing something. Can you point me to lines in the code where this becomes a bottleneck?. I'm also quite in favor of introspection to accept a wide variety of signatures: you can even introspect argument names, so the possibilities are endless. The introspection is probably slow, but if it only has to be done in a very high level function, that might be alright.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136#issuecomment-562812696:224,depend,dependent,224,https://qutip.org,https://github.com/qutip/qutip/issues/1136#issuecomment-562812696,1,['depend'],['dependent']
Integrability,"Sorry.. got a little distracted, and wanted to check the contributing guidelines on what branch to make the pull request against. Currently it’s master. Is that ok? If yes, I’ll undraft it. Draft PRs are pretty new, and a very nice way to kick off the Continuous Integration. Like in this case, I wanted to check if any of the tests involve that message. As they don’t, this actually is ready to go.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1049#issuecomment-513872964:263,Integrat,Integration,263,https://qutip.org,https://github.com/qutip/qutip/pull/1049#issuecomment-513872964,2,"['Integrat', 'message']","['Integration', 'message']"
Integrability,"Sounds good to me. Yeah, even if `packaging` _were_ in `setuptools`, it'd still be an explicit dependency of ours, so you're right to put it in, thanks. Yeah, that coveralls thing just looked like a network timeout on their side. Not the fault of this PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1715#issuecomment-973127486:95,depend,dependency,95,https://qutip.org,https://github.com/qutip/qutip/pull/1715#issuecomment-973127486,1,['depend'],['dependency']
Integrability,"String format coefficients (`'sin(w * t)' ` in H) which use cython for compilation often fails on windows. Using functions instead work better.; ```; def f(t,args):; return sin(args[""w""]*t); H = [H0, [H1, f]]; ```; Here there is also an error in the error message, we will fix that bug soon.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1207#issuecomment-600826564:256,message,message,256,https://qutip.org,https://github.com/qutip/qutip/issues/1207#issuecomment-600826564,1,['message'],['message']
Integrability,"Supporting both int32 and int64 requires modifying much of the QuTiP internals. Not difficult, but will requires a lot of work. . What your willing to accept depends on you. I would look at what the output density matrices look like. If they are mainly non-zeros, then there is not much to do. One could write a lower-order ODE at makes fewer copies. If the density matrices are mostly sparse, then there might be some benefit of having a ODE solver with sparse vector. That would not be as general, and would need to be written by hand.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/845#issuecomment-379746564:158,depend,depends,158,https://qutip.org,https://github.com/qutip/qutip/issues/845#issuecomment-379746564,1,['depend'],['depends']
Integrability,"Sure, but I suppose I meant: are you planning to integrate that process in the ODE passed to the scipy integrator?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/525#issuecomment-249344184:49,integrat,integrate,49,https://qutip.org,https://github.com/qutip/qutip/pull/525#issuecomment-249344184,2,['integrat'],"['integrate', 'integrator']"
Integrability,"Thank you Eric, this must have been a lot of work. I haven't had time yet to look at it in full detail, but I have a few preliminary comments / questions:; * Having the no-jump trajectory not count towards the `ntraj` seems like a good idea to me. In particular the handling of the seeds becomes much more sane.; * Also the change of having the weights part of the multi-result instead of the the trajectory-results makes a lot of sense in hindsight.; * What is the reason that the time-dependent weights are still part of the trajectory result? That seems a bit inconsistent to me and I wonder if the `TrajectoryResult` class could perhaps just be removed?; * We now have three names for more-or-less the same concept, ""no jump"", ""deterministic"" and ""absolute"". I guess the ""no jump"" name is used within the mcsolve module, which is fine. In the multitrajresult module, perhaps we could use either ""deterministic"" or ""absolute"" always? (Out of those, I would probably prefer ""deterministic"")",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2295659950:487,depend,dependent,487,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2295659950,1,['depend'],['dependent']
Integrability,"Thank you Jake for taking a quick look!; I checked once more and the following produces an error (used in an ""empty"" virtual environment):; ```; > pip install setuptools wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; > python setup.py develop. Traceback (most recent call last):; File ""/home/kaladin/Documents/git/qutip/qutip4/setup.py"", line 13, in <module>; import packaging.version; ModuleNotFoundError: No module named 'packaging'; ```; So I think `packaging` it is not included with `setuptools`. . > `requirements.txt` has no special meaning at all so it doesn't really matter,; Lets not add wheels and setuptools to the requirements then. Updating it with the latest dependency versions in setup.cfg dependencies should be fine though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1715#issuecomment-973123214:687,depend,dependency,687,https://qutip.org,https://github.com/qutip/qutip/pull/1715#issuecomment-973123214,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Thank you for doing this quickly, I guess you did until quite late. Yes, tests in `test_integrator` are parameterized over all integrators registered in `sesolve_integrators`, etc.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925428011:127,integrat,integrators,127,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925428011,1,['integrat'],['integrators']
Integrability,"Thank you for reporting.; The feedback interface changed a few times (and will change in future version.); The documentation in guide is wrong, but the apidoc should be up to date.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1538#issuecomment-1398778915:39,interface,interface,39,https://qutip.org,https://github.com/qutip/qutip/issues/1538#issuecomment-1398778915,1,['interface'],['interface']
Integrability,"Thank you for reporting.; There seems to be an issue with our detection of mkl for a while.; Since it's an optional dependancy, the related tests have been quietly skipped for a while... You could probably manually import it until we make a patch:; ```; from ctypes import cdll; import sys; import os. qutip.settings._mkl_lib = cdll.LoadLibrary( os.path.dirname(sys.executable) + r'\Library\bin\mkl_rt.dll' ); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2496#issuecomment-2243309367:116,depend,dependancy,116,https://qutip.org,https://github.com/qutip/qutip/issues/2496#issuecomment-2243309367,1,['depend'],['dependancy']
Integrability,"Thank you for the comments! . Also, as someone who uses QuTip on a daily basis as part of my work, I was really happy with the changes and restructuring of the solver module. Thank you for the work 😄 . If I may take this opportunity to ask two things:; * I have been looking on Qutip 4.7 for ways to speed up the mc solver simulations, and one of them was to not compute the average density matrix for all times, but only for the last time. Since the behaviour at 4.7 of `mcsolve` was to average the state anyways (despite what I passed on the options object), I found a workaround by having an independent list to create my time dependant Hamiltonian and the `tlist` argument of the solver. Is this something achievable more straightforwardly/differently in Qutip 5.0?; * (shorter): Is there a roadmap for when will Qutip 5.0 be released?. Thank you for your time, and I hope its fine me asking here 😆",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2167#issuecomment-1571077559:630,depend,dependant,630,https://qutip.org,https://github.com/qutip/qutip/pull/2167#issuecomment-1571077559,1,['depend'],['dependant']
Integrability,"Thank you for the explanation @phfaist. I don't know the answer unfortunately. There are upcoming developments in quantum tomography with QuTiP, including recently added [notebooks](https://github.com/qutip/qutip-notebooks/pull/79), that warrant looking into this library integration further. . Besides this, regarding cvxpy, the package is now actively maintained also on conda forge https://anaconda.org/cvxgrp/cvxpy/files?page=1, we could add a check in the test failures to the to-do list...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/874#issuecomment-500419184:272,integrat,integration,272,https://qutip.org,https://github.com/qutip/qutip/issues/874#issuecomment-500419184,1,['integrat'],['integration']
Integrability,Thank you for the fix! I tested it locally and I was able to reproduce the error in #1753 and confirm it is fixed with this PR. `qutip.about()` also returns same message locally (not sure where it is tested if it is tested). It seems that CI was not complaining because we do not test for numpy 1.22 yet (although build requirements do install latest numpy version) but I think @hodgestar plans to include numpy 1.22 in the CI soon (see comments in #1747). I hope this PR can be merged soon as tests in PR qutip/qutip-tensornetwork#10 are failing due to `qutip.about()` not working with numpy 1.22.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1752#issuecomment-1005999347:162,message,message,162,https://qutip.org,https://github.com/qutip/qutip/pull/1752#issuecomment-1005999347,1,['message'],['message']
Integrability,"Thank you for your prompt reply. @sahmed95. QuTip was installed on Windows; ```; pyhton 3.6.4; ```; We download anaconda and install QuTip from conda-forge with; ```; conda install -c conda-forge qutip; ```; but when run ; ```; import qutip.testing as qt; qt.run(); ```; the following message occurred:; ```; QuTiP: Quantum Toolbox in Python; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transf",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:285,message,message,285,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['message'],['message']
Integrability,"Thank you!, it does work. But there is another problem regarding solving time-dependent Hamiltonian evolution in qutip-jax:; ```; import qutip as qt; import numpy as np; import qutip_jax; import jax; from math import pi; from diffrax import diffeqsolve, ODETerm, Dopri5, PIDController; sequence = np.linspace(0, 100, 100); wq = 2. * 2 * pi; g = 0.05 * 2 * pi. with qt.CoreOptions(default_dtype=""jaxdia""):; H0 = -0.5 * 2. * qt.sigmaz() + g * qt.sigmax(); H = [H0, [-0.5 * qt.sigmaz(), sequence]]; psi0 = qt.basis(2, 0); psi1 = qt.basis(2, 1); proj0 = psi0 @ psi0.dag(); proj1 = psi1 @ psi1.dag(); expect_ops = [proj1]; times = np.linspace(0, 100, 100); psi_init = psi1; options = {; ""method"": ""diffrax"", ; ""normalize_output"": False,; ""stepsize_controller"" : PIDController(rtol=1e-5, atol=1e-5),; ""solver"": Dopri5(); }; # result = mesolve(H, psi_init, times, e_ops=expect_ops); result = mesolve(H, psi_init, times, e_ops=expect_ops, options=options); ```; And this will give:; ```; TypeError Traceback (most recent call last); [<ipython-input-63-2fb6110bc952>](https://localhost:8080/#) in <cell line: 21>(); 19 }; 20 # result = mesolve(H, psi_init, times, e_ops=expect_ops); ---> 21 result = mesolve(H, psi_init, times, e_ops=expect_ops, options=options). 20 frames; [... skipping hidden 15 frame]. [... skipping hidden 1 frame]. [... skipping hidden 14 frame]. [... skipping hidden 1 frame]. [... skipping hidden 9 frame]. [... skipping hidden 2 frame]. [... skipping hidden 1 frame]. [... skipping hidden 1 frame]. [... skipping hidden 5 frame]. [/usr/local/lib/python3.10/site-packages/jax/_src/api_util.py](https://localhost:8080/#) in _shaped_abstractify_slow(x); 586 dtype = dtypes.canonicalize_dtype(x.dtype, allow_extended_dtype=True); 587 else:; --> 588 raise TypeError(; 589 f""Cannot interpret value of type {type(x)} as an abstract array; it ""; 590 ""does not have a dtype attribute""). TypeError: Cannot interpret value of type <class 'qutip.core.cy.coefficient.InterCoefficient'> as an abstr",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2320#issuecomment-2092884561:78,depend,dependent,78,https://qutip.org,https://github.com/qutip/qutip/issues/2320#issuecomment-2092884561,1,['depend'],['dependent']
Integrability,Thank you. The checks fail with this message `ERROR: Husimi Q: Compare with/without precomputation for rand. ket`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-541546142:37,message,message,37,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-541546142,1,['message'],['message']
Integrability,Thanks @PierreGuilmin!. I made the changelog message a bit more detailed and will merge now.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1964#issuecomment-1200402896:45,message,message,45,https://qutip.org,https://github.com/qutip/qutip/pull/1964#issuecomment-1200402896,1,['message'],['message']
Integrability,"Thanks @nonhermitian for taking a look. I understand that the general way of doing things in QuTiP would be something like; ```python; mesolve(H, rho0, tlist, c_ops, e_ops, ..); ```; which returns a `Result` object:; ```; An instance of the class :class:`qutip.Result`, which contains; either an *array* `result.expect` of expectation values for the times; specified by `tlist`, or an *array* `result.states` of state vectors or; density matrices corresponding to the times in `tlist` [if `e_ops` is; an empty list], or nothing if a callback function was given in place of; operators for which to calculate the expectation values.; ```; So, we could probably have a new solver wrapper called `pisolve` which works as:; ```; model = Pim(N, emmision, pumping); pisolve(model, rho0, tlist, ...); ```; The Hamiltonian does not change here I think, so instead of passing that, the user could pass an instance of a Pim object describing the particular system (N, emission, ...) and this new solver could return a `Result` object. I will discuss this with @nathanshammah and get back on how we can have the API similar to the other QuTiP solvers as this is slightly different from the standard master equation solving.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-332424552:677,wrap,wrapper,677,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-332424552,1,['wrap'],['wrapper']
Integrability,Thanks @nonhermitian. I will add the other check.; Its not immediately apparent to me what I can do with zcsr_mult to optimise things. Do you mean have a routine like (pseudo code?):; ```; zcsr_mult_adj(A):; return A*A.dag(). ```,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817#issuecomment-364409039:154,rout,routine,154,https://qutip.org,https://github.com/qutip/qutip/pull/817#issuecomment-364409039,1,['rout'],['routine']
Integrability,"Thanks Chris,; This seems like a useful addition. I have taken a quick look at the code, and it seems like it is fairly independent, and so could be merged with little risk. The interface seems good, so I can't see any issues immediately. . Are you planning to do a notebook example?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-127953580:178,interface,interface,178,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-127953580,1,['interface'],['interface']
Integrability,"Thanks Jake this is brilliant. This conveniently lets us construct the displacement operator repeatedly for new alphas with the one-time cost incurred in the beginning to solve the eigenvector problem. I think if we fix the Hilbert space cutoff in the beginning of a calculation, this should be fine. Actually, the reason why my colleagues (and even myself) are interested in this is to let optimisation routines run on a series of displacement operations. I suppose now it will become easier to compute gradients wrt ""alpha"" using some automatic differentiation tool such as Jax which was previously kind of complicated : https://github.com/google/jax/pull/2062",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646090490:404,rout,routines,404,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646090490,1,['rout'],['routines']
Integrability,"Thanks all, I am new to this and I apologise for the extra help required. Here is the plot. Just FYI, the function ""matrix_histogram"" is much more robust than; ""matrix_histogram_complex"", and has cbar_pad as an option. It may be better; in the long run to base the complex version on the ""matrix_histogram""; function.; [image: image.png]. On Wed, 28 Jun 2023 at 09:00, Yuji TAMAKOSHI ***@***.***>; wrote:. > @SJUW <https://github.com/SJUW> Hi. Can you show me a plot? I want to see; > that your change is better.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/2181#issuecomment-1610330125>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/A3KQ4AJKUOCE7MJK42H7APDXNNQYLANCNFSM6AAAAAAZTS45QQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2181#issuecomment-1610360194:825,Message,Message,825,https://qutip.org,https://github.com/qutip/qutip/pull/2181#issuecomment-1610360194,1,['Message'],['Message']
Integrability,"Thanks both @jakelishman and @hodgestar for your comments! I agree that I may be depending too much on the classes in `qutip.tests.core.data` to do the testing both in qutip-tensorflow and qutip-tensornetwork. I myself was worried of ""who is going to tests the tests"" if this trend continued with other packages. Reusing the `qutip.tests.core.data`'s code though helps to speed things up in the development process and also allows QuTiP to strictly define what each specialisation is meant to do. . As you mentioned above, I think it would be best to create a `qutip.core.data.testing` module where all the classes for testing are implemented. Then these classes could be tested to ensure that the proper tests are created and these classes ca be used by both QuTiP and downstream packages. I do not have time for this now but I will come to this later, so lets keep this PR open to discuss any ideas!. ----. > the data layer tests should really discover the specialisations rather than us needing to specify them (this is true regardless of this PR). I am not sure about this one. Automatic discovery of tests for specialisations seems to lead to very restricted flexibility in how tests are parametrized. For instance, I needed to change the `rtol` to accommodate the tests for the complex64 data layer in qutip-tensorflow and I am not sure how this could be added automatically. . Also, as @hodgestar mentioned today, you probably want to be explicit on adding tests so that you are confident that those tests are running. Otherwise you need to constantly check the log to ensure the proper tests are running. . Another thing is that by being explicit on what is tested, you could assert if the tested specialisation has not been registered (which actually happened to both qutip-cupy and qutip-tensorflow before: specialisations where being tested but, surprisingly, they were not registered).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-981550356:81,depend,depending,81,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-981550356,1,['depend'],['depending']
Integrability,"Thanks for looking deeply into it. It's good to know the cause. We shouldn't remove support for SciPy 1.4 unless we _absolutely_ have to. Most users won't use matrices that large so won't be affected, and SciPy 1.5 is only a year old which is too recent to be a requirement in an academic setting. We should maintain at least a 2-year dependency window (like NumPy). Any constraints we make on allowable versions affect any packages downstream of us as well, so we want to try and stay as permissive as possible, as long as there's not new features that we absolutely must have. We already have mechanisms for working around an unstable `eigh` implementation because of problems with mac OpenBLAS `zheevr` in some cases, so we can add in this additional test when setting `eigh_unsafe` in our initialisation. The principle is that we decay to using the general-purpose `eig`, and include a specific orthonormalisation step to stabilise the eigensystem afterwards. This code is already in `qutip/sparse.py`, so it shouldn't be too hard to add an extra condition in `qutip/__init__.py`. Could you also test if the issue is also confined to MKL, or if it persists in OpenBLAS with SciPy 1.4 as well? We lose precision when swapping down to `eig` in place of `eigh`, so it's good to confine the switch to the minimum known-bad set.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-818719109:335,depend,dependency,335,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-818719109,1,['depend'],['dependency']
Integrability,"Thanks for pointing this out.. I had a quick play around, this seems to be some overhead from the normalization flag in mesolve. In v5 if I use ` options = {""normalize_output"": False}` I see basically same runtimes as v4.7. we should probably think about making this default to false if its having such a big cost. To make it really ""like for like"" you can also wrap it so that it uses CSR format for everything . ```; with qt.CoreOptions(default_dtype=""csr""):; kwargs = init(); options = {""normalize_output"": False}; %timeit qt.mesolve(**kwargs, options = options); ```. Which data-type is best for is a bit problem dependent. let us know if this gives you comparable results!. On the topic of dynamiqs, you might be interested in trying out the jax/jaxdia data layer, there's some examples here ; https://github.com/nwlambert/QuTiP-Jax-GPU-example. We also tried this example with dynamiqs (with its double precision setting), I think you guys came out slightly ahead speed-wise because I think you dont vectorize/use superoperators, which seems to suit jax/diffrax! though if i did that manually with qutip we essentially get the same, which I guess makes sense. The jaxdia data layer lets us go to a few more spins (more with sesolve, not so many with mesolve!)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2406#issuecomment-2074966338:362,wrap,wrap,362,https://qutip.org,https://github.com/qutip/qutip/issues/2406#issuecomment-2074966338,2,"['depend', 'wrap']","['dependent', 'wrap']"
Integrability,"Thanks for reporting this. This is actually a bit of a concern - as far as I know none of the developers have the new ARM chips (or even macOS 11) and I don't know how long it'll be until CI servers have them, so there may be more bugs lurking for you. Please let us know if you have any more problems, especially building from source or string-format time-dependence - I'd expect those to be the most fragile to new kernel and hardware changes. @ajgpitch This is actually going to be a nuisance for distributing wheels too. I _think_ GH actions will have the necessary Xcode 12 support, but I'm not sure the multi-wheel tool I'm using does - the new Apple silicon is ARM not x86 so it needs different compilation. We may not be able to support M1 macs in binary releases initially.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1395#issuecomment-735863085:357,depend,dependence,357,https://qutip.org,https://github.com/qutip/qutip/issues/1395#issuecomment-735863085,1,['depend'],['dependence']
Integrability,"Thanks for testing it. Macports still have some advantages over pip, since it supports dependencies on non-python packages. I'm not sure if installing qutip via pip from on a fresh system will resolve all dependencies properly (will have to test this more carefully before next qutip release). Homebrew looks interesting from this point of view (I don't like that everything has to be built from source with macports..) but it is a bit unfortunate that not all qutip dependencies are in the standard homebrew repository.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/62#issuecomment-27496281:87,depend,dependencies,87,https://qutip.org,https://github.com/qutip/qutip/issues/62#issuecomment-27496281,3,['depend'],['dependencies']
Integrability,"Thanks for the bug report and the detailed look into it! As a temporary work-around, in file `qutip/cy/piqs.pyx`, change lines 431 to 433 https://github.com/qutip/qutip/blob/2aaae75d3ba52067f747dd928d67d66307fc5de9/qutip/cy/piqs.pyx#L431-L433 to; ```cython; cdef lindblad_matrix = csr_matrix((lindblad_data,; (lindblad_row, lindblad_col)),; shape=(nds**2, nds**2),; dtype=np.complex128); ```; and recompile. If you want to make a PR of something similar against QuTiP, I'll accept it. I would actually file this against `scipy.sparse` - I think our usage is completely in line with the contract of `scipy.sparse.csr_matrix` and they've got a bug in their dtype handling. You currently can't construct a CSR matrix using the COO triplet format for complex data, unless the dtype is made explicit _somewhere_, but the constructor is meant to correctly infer a suitable dtype if one is not passed. Basic Scipy reproducer to illustrate the problem:; ```python; >>> import scipy.sparse; >>> scipy.__version__; '1.6.1'; >>> scipy.sparse.csr_matrix(([1+1j], ([0], [0])), shape=(2, 2)); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/site-packages/scipy/sparse/compressed.py"", line 54, in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/site-packages/scipy/sparse/coo.py"", line 161, in __init__; self.data = np.array(obj, copy=copy, dtype=data_dtype); TypeError: can't convert complex to float; ```. This can be fixed either by passing `dtype=np.complex128` to the constructor, or passing the data inside a NumPy array, since that'll also fix the dtype. I imagine with their implicit conversions, SciPy may also need to test the special cases where all list elements are things like `1+0j`, which have type `complex` but can be safely represented by reals - the Python call `float(1 + 0j)` is forbidden even though the imaginary part is 0. I actually ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1451#issuecomment-784265398:586,contract,contract,586,https://qutip.org,https://github.com/qutip/qutip/issues/1451#issuecomment-784265398,1,['contract'],['contract']
Integrability,"Thanks for the clue, it was helpfull.; The source of problem is localization of `lscpu` util, which used by `_linux_hardware_info()` function.; The function expects `'Socket(s)'`, `'Core(s) per socket'`, etc in `lscpu` output, but in my system it actually `'Потоков на ядро'`, `'Сокетов'`, etc.; I think, maybe better less system dependent ways to calculate cpu count, for example, we could use `multiprocessing` module and it's `cpu_count` function. Or `len(os.sched_getaffinity(0))`for computers with dynamic cpu management (see [this](https://stackoverflow.com/questions/31346974/portable-way-of-detecting-number-of-usable-cpus-in-python) for details).; Or show exception/error, if we try to use lscpu and `LANG` is not english (or we couldn't found mentioned above `'Socket(s)'`).; Ideas?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045:330,depend,dependent,330,https://qutip.org,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045,1,['depend'],['dependent']
Integrability,Thanks for the comment and sorry for the typo. I corrected it. The issue still persists. I also updated [the question](https://quantumcomputing.stackexchange.com/questions/22187/qutip-vs-rk45-which-one-gives-the-correct-results-for-time-dependent-systems) on stack exchange.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986660625:237,depend,dependent-systems,237,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986660625,1,['depend'],['dependent-systems']
Integrability,"Thanks for the interest! To be clear, I wasn't trying to suggest that the whole thing is in scope for QuTiP per se; this PR concerns calling a small one-file [client library](https://github.com/cgranade/tskmon-client) from QuTiP. Given the similarity with that and the PiCloud functionality's goal (integrate QuTiP with third-party web services), maybe a good architecture would be something like a `qutip.services` package, where the expectation is that each submodule would require some additional client library?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/255#issuecomment-63312872:299,integrat,integrate,299,https://qutip.org,https://github.com/qutip/qutip/pull/255#issuecomment-63312872,1,['integrat'],['integrate']
Integrability,"Thanks for the quick reply! . > Should it raise a warning for users that tries to access each trajectories? Or add a note in the docstring? The trajectories would look strange if you don't read the documentation.; > ; Maybe, though I'm not sure why they would look strange? It's possible a user could get confused if they don't see any no-jump trajectories other than the first one, but hopefully they wouldn't be confused if they set the flag to use this algorithm. > I am wondering if `MCSolverImprovedSampling` could be merged in `MCSolver`. I am not a fan of having `mcsolve` use 2 different solvers and it should be accessing by the new class interface. Another options would be that make `MCSolverImprovedSampling` public and add a new function to call it `mcissolve`?; > ; Yeah this might be the way to go. I only had it the way I did to have `MultiTrajSolverImprovedSampling` get inherited before `MCSolver` so that the functionality there gets used and also have `resultclass = McResultImprovedSampling`. We could do a conditional inheritance in `MCSolver`, but I'm worried that might be messy/ugly?. > I would prefer that you revert the changes made by black. It add a lot of changes that are unrelated to the new feature and makes reviewing the PR annoying. Also we use the pep8 line width of 80 instead of black's 88. For now, we mostly use black in new code and adding black to existing file should be their own PR.; >; Sorry about that, will revert",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2218#issuecomment-1687054681:648,interface,interface,648,https://qutip.org,https://github.com/qutip/qutip/pull/2218#issuecomment-1687054681,1,['interface'],['interface']
Integrability,"Thanks for the quick reply.; Will this error affect other examples and notebooks present on the website where a spectra_cb is needed? Because right now I'm trying to run this example ( https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/brmesolve-time-dependent-Liouvillian.ipynb ) and the code hungs on the 8th cell, from the Jupyter terminal I get the following message; ```AttributeError: Can't get attribute 'brme_step' on <module '__main__' (built-in)>```. Conda env is the same as the above.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223#issuecomment-605704959:279,depend,dependent-Liouvillian,279,https://qutip.org,https://github.com/qutip/qutip/issues/1223#issuecomment-605704959,2,"['depend', 'message']","['dependent-Liouvillian', 'message']"
Integrability,"Thanks for the quick response @bencbartlett. . Feel free to ignore the comments regarding the shortening of arguments. That was just a suggestion to make things shorter. But as you said clarity is more important. I will not change `waveguide` to `wg` and I think you should leave the others as they are if you can't think of shorter ones. Same applies to the `temporal_basis_vector`. I think you can even add a `temporal_basis` as you mentioned. Regarding the double line breaks wrapping top-level functions, I know the pep8 standard is two newlines but some other QuTiP modules follow just a single line break, e.g., [floquet](https://github.com/qutip/qutip/blob/master/qutip/floquet.py). But again some other modules in QuTiP follow the pep8 standard and wrap two newlines for top-level functions. I am in favor of the pep8 standard and have two newlines. @ajgpitch what do you suggest?. Please remove the helper function `count_filled` without the test if it is not required. We aim to test as much as possible and remove redundancy in code. About `__all__`, I will shift all the rest in a new PR and we can keep yours as it is now. Coming to the more important discussion regarding the `class` based implementation, I have started pushing for similar approaches in newer modules such as [qutip.models.piqs](https://github.com/qutip/qutip/blob/master/qutip/models/piqs.py). I am also working on a new non-Markovian method which requires a class. Something of that sort is already used in `qutip.nonmarkov.heom`. I understand that many of qutip's solvers are written to be isolated functions but that should not mean that we should not write code to fully use the object oriented framework Python provides. Moreover, I noticed that you have to rewrite wrappers for the functions anyways to deal with repeatedly calculating things such as `scattering_probability` which clearly can be made much more compact if we use a class based approach. I am not making this suggestion just for the minor perform",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384860713:479,wrap,wrapping,479,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384860713,2,['wrap'],"['wrap', 'wrapping']"
Integrability,"Thanks for the quick review. I hadn't seen the scipy.interp1d approach to time-dependence yet, and it seems a good way. However, it still involves a (potentially costly?) python function callback which is not required in my approach. Not sure how much that matters, so it would be very nice to compare speed. As for tensor, I would expect it to do the same as tensor([Qobj(...)]), which I _think_ is what it used to do.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-44606063:79,depend,dependence,79,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-44606063,1,['depend'],['dependence']
Integrability,"Thanks for the review!. > * Should we stop the user from passing a list of kets to `mcsolve` directly?; > Presently it work but it's not documented (and list `ntraj` don't.). You are right, done. Of course we could also allow the same arguments for `mcsolve` as for `run`, but I thought it might be good to keep the `mcsolve` interface simpler. > * It would be nice to have the trajectories per initial state information stored in the result somewhere. I have added that information and checking it in a test. Edit: I forgot that I still haven't updated the docs. Will do that. Edit 2: Done",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143:326,interface,interface,326,https://qutip.org,https://github.com/qutip/qutip/pull/2437#issuecomment-2149017143,1,['interface'],['interface']
Integrability,"Thanks for the useful feedback, both here and in PR #1611 ! From the discussion in PR #1611 it seems that the second option with the modifications proposed by Jake in this issue seems to be the most sensible approach. Hence, if there are no objections, I will open a PR (which I will probably do tomorrow) where I implement the following changes (adapted from Simon's comment in PR #1611):. - `Qobj.__mul__(self, other) ` ; - dispatch to `data.matmul` if `other` is a `Qobj`; - dispatch to `data.mul` otherwise which will return `NotImplemented` if it does not know how to handle `other`. ; - `Qobj.__rmul__(self, other) `:; - Dispatch to `data.mul` (`other` will never be a Qobj): Notice that in this way both left and right multiplication will behave in the same way. This would also ""solve"" the inconsistency PR #1611 was trying to solve but this time `data.mul` will handle it and will raise NotImplemented whenever required. . - `mul_dense` and `mul_csr`:; - Use a thin wrapper that returns `NotImplemeneted` if input is not a complex python scalar. There are a few things I would like to discuss before opening a PR:; 1) These changes will break backwards compatibility as:; ```python; matrix = np.random.random((2, 2)); qobj = qutip.Qobj(array). qobj * matrix # With the changes this also returns NotImplemented.; matrix * qobj # With the changes this also returns NotImplemented; ```; will now behave consistently (""fixes"" PR #1611). Is this acceptable? I would say yes given that we are doing a major version change. However, it may be a good idea to start raising a deprecation warning in QuTiP 4 if these changes go forward. 2) `data.add` has a similar behaviour to `data.mul` in that it accepts `scale` which is not a `Data` (there are a few more specialisations that also accept an argument that is not a `Data`). Should these specialisations behave in the same way allowing arbitrary python objects as ""scale"" and raise NotImplemented when required or should they just allow a complex py",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473:975,wrap,wrapper,975,https://qutip.org,https://github.com/qutip/qutip/issues/1607#issuecomment-883317473,1,['wrap'],['wrapper']
Integrability,Thanks for your contribution. I have merged your changes together with other an implementation of the simplified array-based time-dependence format discussed above in PR #162.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-46521430:130,depend,dependence,130,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-46521430,1,['depend'],['dependence']
Integrability,"Thanks for your suggestion! I tried to increase the sub-steps, but the optimal (a tradeoff between precision and speed) `nsubsteps` is very sensitive to the parameter of the Hamiltonian (bias). To simulate a time-dependent bias, I have to set an extremely large `nsubsteps` then practical unable to complete. Mcsolve works perfect for this setup, but I also want to add some extra c_ops later. I would like to ensure if the `nsubsteps` is the only way to control the precision? If so, I will make things simpler and use mcsolve.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1357#issuecomment-691302246:213,depend,dependent,213,https://qutip.org,https://github.com/qutip/qutip/issues/1357#issuecomment-691302246,1,['depend'],['dependent']
Integrability,"Thanks very much @Ericgig for preparing this!. I feel like it will be quite confusing if gates like `cnot` have different signatures than the ones in qutip-qip. Moreover, many of those gates/transformations are not only relevant to `qip`, but also used in other applications, so maybe we should keep more of them in the main qutip. One of the reasons that we want to include those gates into `qutip.operators` is because a few other downstream packages (e.g. `krylovsolver` that is now merged into qutip, and `qutip-tensornetwork` also uses Hadamard transform) also use them for testing (only) purposes. Having them in the main qutip may save them from depending on qutip-qip. I guess it would be better if we either; - Remove all qip and only define a few `_cnot`, `_swap` as private functions for testing inside the main qutip. And ask whoever else wants to use some gates to install `qutip-qip`. This may result in e.g. `qutip-tensornetwork` depending on `qutip-qip or having to implement a copy of some gates. or; - Include some more commonly used gates like `rx`, `ry` (they are unitaries generated by the Paulis and directly relevant to quantum control) `iswap` etc and keep them identical to the ones in qutip-qip, so that those who just want some gates for testing does not have to download the full qutip-qip. If the problem is the `qutip.qip.expand_operator`. I would argue that we can even include it into the main qutip. It is `tensor` + `permutation` and works not just for qubit systems, but also for other composite Hilbert spaces (provided a `dims`). It is quite handy not just for `qip`, but also for control and probably some other applications. What do you think?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1890#issuecomment-1120403103:653,depend,depending,653,https://qutip.org,https://github.com/qutip/qutip/pull/1890#issuecomment-1120403103,2,['depend'],['depending']
Integrability,"Thanks victor!  My main worry as it stands is that, as I mentioned in the previous issue, this fix, on its own, introduces an unwanted additional error for the case with a time-dependent Hamiltonian, as then that time dependence essentially gets shifted twice, once by the H_shifted change, and once again by adding tlist[idx] to tau_list. ; This case of a time-dependent H could do with a test as well I guess. . This can be easily remedied by completely omitting the old method of shifting the time-dependence (e.g., using H and c_ops instead of H_shifted and c_ops_shifted in the call to mesolve(), for example).    But I am a little concerned that the the old method of shifting the time-dependence in H_shifted and C_ops_shifted was there for a reason.  @Ericgig any thoughts?. As an aside, I guess _correlation_mc_2t()  also needs a fix, but maybe better to do that in a separate issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1929#issuecomment-1153462129:177,depend,dependent,177,https://qutip.org,https://github.com/qutip/qutip/pull/1929#issuecomment-1153462129,5,['depend'],"['dependence', 'dependent']"
Integrability,Thanks! I wasn't sure if this was something which should have been caught or dealt with in qutip (rather than thrown in scipy) since the exception doesn't **immediately** tell one the underlying cause. (Perhaps through throwing a specific message indicating that the data type should be changed).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/613#issuecomment-270225804:239,message,message,239,https://qutip.org,https://github.com/qutip/qutip/issues/613#issuecomment-270225804,1,['message'],['message']
Integrability,"Thanks!. @Ericgig ; > If you need to use an array coefficient and this is your restriction on tlist, use qutip.Cubic_spline (or build the QobjEvo before the solver, but I don't remember if it is safe in v4). This is exactly my case. I see, I can just give mesolve a Cubic_spline object, very nice. I didn't know that give `tlist` to mesolve is same as asking these intermediate results. I was using it just as a match for array coefficient. Actually, I've been using array coefficient for a while and I don't even know such functionality exists. And I remember someone else mentioned this to me before, so I shouldn't be the only one. I see in the doc there is a section mentioning it. Probably we could stress it a bit more. @jakelishman ; > We probably shouldn't mutate the given Options object, but the call as written here doesn't make a huge amount of sense - why would you want to run the integrator but not have any output stored at all? You'd just be spinning your processor. Sorry, my post was a bit unclear. I only need the final result. So I set `store_final_state=True`, but that doesn't change the behaviour of `store_state` at all. Indeed, I'm doing so just because I didn't know the solution Eric pointed out before. For me a warning before changing `Options` would be nice. And probably pointing out the solution Eric mentioned?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775319207:895,integrat,integrator,895,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775319207,1,['integrat'],['integrator']
Integrability,Thanks. It's not that urgent. I'm just curious what the reason for that behavior might be. It's puzzling; why does it apparently depend on the dimensions of dm as well as on the number of time steps.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/771#issuecomment-338361319:129,depend,depend,129,https://qutip.org,https://github.com/qutip/qutip/issues/771#issuecomment-338361319,1,['depend'],['depend']
Integrability,"That is true. I'll try to look into why this is the case. However, it does have three expectation calculated. You can check this with output.expect ! . Edit: . So, I just realized that the noise-spectrum is associated with the coupling operator [sigmax()], I think the correct call to brmesolve must infact be (updated to current qutip standards) . `output = brmesolve(H, psi0, tlist, [[sigmax(), ohmic_spectrum]], e_ops)`. This is in line with the notation we use in example (https://nbviewer.jupyter.org/github/qutip/qutip-notebooks/blob/master/examples/brmesolve-time-dependent-Liouvillian.ipynb). I will make a pull request updating both the example notebook (http://qutip.org/docs/4.0.2/guide/dynamics/dynamics-bloch-redfield.html ) to reflect this and make sure we depreciate the spectra_cb argument in bloch_redfield_tensor to eliminate the confusion. Thanks for bringing this to notice !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703:571,depend,dependent-Liouvillian,571,https://qutip.org,https://github.com/qutip/qutip/issues/1223#issuecomment-605711703,1,['depend'],['dependent-Liouvillian']
Integrability,"That was my first thought as well and it worked for the above example. However, it seems that this issue somehow depends on the dimensionality of the system, since what I actually need is a system of two three level atoms which can be driven independently. So if I modify the code to; ``` ; g = basis(3,0); e = basis(3,2); s = basis(3,1). #Single atom operators; sgg = g * g.dag() #ground state population; see = e * e.dag() #excited state population; sge = g * e.dag() #atomic coherence sigma_ge. #Composed atomic operators; A1sgg = tensor(sgg, qeye(3)); A1see = tensor(see, qeye(3)); A1sge = tensor(sge, qeye(3)). H1 = Omega1 * (A1sge + A1sge.dag()); def H1_coeff(t,args):; return 0.5 * (np.tanh(100.0*(t-np.pi/2.0))-np.tanh(100.0*(t-np.pi))); H = [[H1, H1_coeff]]; c_ops = np.sqrt(Gamma) * A1sge; e_ops = [A1sgg, A1see]; psi0 = tensor(g, g); ```; I again get only the initial values. With that being said, the same time dependence function works fine for two two level atoms. So it's still puzzling to me. And again if I put `[]` for the `c_ops` it works! After looking into `mesolve` source code I noticed that in that case other solver function is used `sesolve`, which uses the states without converting them to density matrices and hence has lower dimensionality.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/771#issuecomment-338094461:113,depend,depends,113,https://qutip.org,https://github.com/qutip/qutip/issues/771#issuecomment-338094461,2,['depend'],"['dependence', 'depends']"
Integrability,"That would be punishing long time qutip user and making it hard for package depending on qutip to support both v4 and v5. ; We should do our best to support both fully knowing that it will never be perfect. The new method require inspecting the signature anyway,",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1609#issuecomment-892750814:76,depend,depending,76,https://qutip.org,https://github.com/qutip/qutip/pull/1609#issuecomment-892750814,1,['depend'],['depending']
Integrability,"That's a good question... I'm not sure if we should update parfor or create new functions parallel_map, but this is a first attempt to try to generalize the parfor functions we have to work with functions that take arbitray arguments and keyword arguments, and that works with the ui.progressbar interface. The main point here is that I want the multiprocessing and IPython.parallel backed impementation of ""par_something"" to be swappable. The ones we have now are not. If we can agree on a new API for how these functions should behave we could update the old parfor functions instead of creating new ones. However, this would break backwards compatibility in some minor ways, so I didn't want to mess with the existing parfor functions, since they are part of our published API. Hence the new functions.. I know it's not ideal to have alternative functions that does the same thing, but also not good to break backwards compatibility.. Also, the parfor name is a bit of a misnomer, since it is a map function rather than a for loop.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/253#issuecomment-63156126:296,interface,interface,296,https://qutip.org,https://github.com/qutip/qutip/pull/253#issuecomment-63156126,1,['interface'],['interface']
Integrability,"That’s what I thought too in hindsight, so I deleted that part of the; docstring, but nosetests now just gives a segmentation fault and quits. On Tue, 28 May 2019 at 21:33, Wojciech Rzadkowski <notifications@github.com>; wrote:. > If I understand correctly it refers to line 300 in test_metrics, which has; > a new hellinger metric test by @wrzadkow <https://github.com/wrzadkow> .; > Could it be that using ""for _ in range(10):"" is a problem?; >; > The following observations:; >; > - for _ in range(10) is already in line in 128 in test_metrics.py; > https://github.com/qutip/qutip/blob/master/qutip/tests/test_metrics.py#L128; > - line 300 is the end of docstring of test_hellinger_monotonicity(); > https://github.com/qutip/qutip/blob/master/qutip/tests/test_metrics.py#L300; > - the presence of invalid escape sequence \o in the error message; > - this thread; > https://stackoverflow.com/questions/52335970/how-to-fix-string-deprecationwarning-invalid-escape-sequence-in-python; >; > make me think that the issue may be caused by \otimes that I used in the; > docstring explanations. Don't have a Mac to reproduce, though.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/963?email_source=notifications&email_token=ADPF67GLVSBPTSYBEWHF753PXURAZA5CNFSM4G4MKE72YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODWL7DBA#issuecomment-496497028>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ADPF67BCDAJ2I55ZNP3VBB3PXURAZANCNFSM4G4MKE7Q>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-496582231:840,message,message,840,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-496582231,1,['message'],['message']
Integrability,"The PR is in good shape for merging I believe. I'd like to discuss the parameters API a bit. The parameters used now for measurement function is `ops` and `state`. I guess @hodgestar coined this interface in his PR. It fully made sense for observable and state. However, if we now generalize it to the measurement from the perspective of experimentalists. The parameter `state` becomes a more prominent one whereas `ops` becomes secondary because it only offers a basis for the measurement. This become clearer if one list all the possible use scenarios where:. - `state=Qobj, ops=None`: measure the `state` in default computational basis; - `state=Qobj, ops=ket`: Probability of measure `state` and get `ket`, (together with the post-measurement state); - `state=Qobj, ops=Qobj`: Measure the `state` with one POVM operator specified by `ops`; - `state=Qobj, ops=list of ket`; - `state=Qobj, ops=list of Qobj`. More generally, we can even provide the user with the optional parameter `targets`, where the given `ops` is only for those targets qubits. We can add identity to the measurement operator for the rest of the qubits automatically for the user.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-648113340:195,interface,interface,195,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-648113340,1,['interface'],['interface']
Integrability,"The RK45 code here has no notion of error associated with it; you have no way of saying whether a particular step size `dt` is actually good. It ideally should converge to something as the step size goes to zero. QuTiP has an adaptive solver that modifies the step size to keep the error below the supplied tolerances. For time-dependent problems one could run into issues with very narrow pulses, but that is not the case here. Writing ones own ODE solver is not really the best thing to do outside of a learning exercise for reasons along these lines.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508:328,depend,dependent,328,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986722508,1,['depend'],['dependent']
Integrability,"The `test` subcommand for `setup.py` depends on `setuptools`, rather than just `distutils`. We don't want to require `setuptools`, however, so I think the best strategy is to try and import it but fall back to `distutils` if we can't. I'll post a PR soon that will follow this strategy. Hopefully, that should make it a bit more convenient to run unit tests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/410#issuecomment-183607483:37,depend,depends,37,https://qutip.org,https://github.com/qutip/qutip/issues/410#issuecomment-183607483,1,['depend'],['depends']
Integrability,"The array interface is now working for qutip master, but I don't know when it will be made in a release.; overlap between operator is also added.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/938#issuecomment-445046066:10,interface,interface,10,https://qutip.org,https://github.com/qutip/qutip/issues/938#issuecomment-445046066,1,['interface'],['interface']
Integrability,"The block-redfield solver only supports string-based time-dependence, ; http://qutip.org/docs/latest/guide/dynamics/dynamics-bloch-redfield.html#time-dependent-bloch-redfield-dynamics; so in your example something like H=[[initial_H,'1-0.01*{i}*t'.format(i=i)],[final_H,'0.01*{i}*t'.format(i=i)]] should work. I don't know whether that will give you the same issue as reported for repeated calls to mesolve/sesolve. Probably will, if that hasn't been resolved yet?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1150#issuecomment-575503917:58,depend,dependence,58,https://qutip.org,https://github.com/qutip/qutip/issues/1150#issuecomment-575503917,2,['depend'],"['dependence', 'dependent-bloch-redfield-dynamics']"
Integrability,"The compulsive renaming continues.; I also reduced the number of time steps in the test to speed things up, and set to ignore the IntegrationWarning",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455#issuecomment-194836741:130,Integrat,IntegrationWarning,130,https://qutip.org,https://github.com/qutip/qutip/pull/455#issuecomment-194836741,1,['Integrat'],['IntegrationWarning']
Integrability,"The core of `mesolve` is also `scipy.ode`, but the default method is `adams` instead of `bdf` and we use sparse matrix for the liouvillian. There are a lot of small time lost with using mesolve like this. Just looking at rhos' datatype: ; `self.psi0: dense -> rho0: Qobj(sparse matrix) -> dense vector (for ode) -> mesolve return: sparse matrix -> rhot: dense...`; Also `mesolve` will check if the Hamiltonian is really an Hamitonian or a Liouvillian or a function returning an Hamiltonian, if the system depend on time, if all the dimensions match, etc. So the overhead of `mesolve` will be important. Finally, depending on the Hamiltonian there can be a good difference in speed. We use sparse matrix for the Liouvillian, good if the Hamiltonian is large with few non-zeros, but slower that simple dense matrices otherwise.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1180#issuecomment-583781780:505,depend,depend,505,https://qutip.org,https://github.com/qutip/qutip/issues/1180#issuecomment-583781780,2,['depend'],"['depend', 'depending']"
Integrability,"The default Apple `clang` version doesn't recognise `-fopenmp` out-of-the-box, because Apple don't ship an OMP library with macOS. You'll have more luck (with most C/C++ projects!) if you install a fully-featured compiler and environment. On [homebrew](https://brew.sh) you can find both `clang`/`clang++` and `gcc`/`g++`, both of which can be installed with OMP support. Make sure your set `PATH`/`CC`/`CXX` environment variables are set up correctly after you've installed, so you're calling the compiler you've just installed, not just the Xcode versions. This isn't a bug in QuTiP, although we could remember this when somebody's working on modernising the distribution - in C/C++ land, tools like `automake` run through a big list of things to check during build configuration, and one of them is if OMP appears to exist. That way the error message is a little clearer (although in this case it's reasonable clear if you're used to C compilers).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774:846,message,message,846,https://qutip.org,https://github.com/qutip/qutip/issues/1230#issuecomment-611425774,1,['message'],['message']
Integrability,"The difference between those two lines is that left-multiplication by `s_prep.dag()` will project onto the prepared ancilla state, whereas tensor contraction will implement partial trace over the ancilla; they're both perfectly valid channels (up to normalization in the projection case), but have subtly different physical interpretations. I can explain that better in the notebook, and submit as a PR, then. There's some plotting code there as well that I was planning on cleaning up better for a later PR to QuTiP, but I can clean it up now and include it if you like, so that I can simply use it in the tutorial notebook without a page of function definitions first.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/268#issuecomment-65412516:146,contract,contraction,146,https://qutip.org,https://github.com/qutip/qutip/pull/268#issuecomment-65412516,1,['contract'],['contraction']
Integrability,The difference in performance is huge for large dimensions. In the case of cy_expect_rho_vec we calculate n*(n-1) unnecessary values which we drop immediately with trace operation.; I didn't replace the cy_expect_rho_vec because of the API change. I don't know exactly where it is used. Maybe it make sense to use cy_expect_rho_vec as a wrapper for cy_expect_rho_vec_fast?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/56#issuecomment-25357042:337,wrap,wrapper,337,https://qutip.org,https://github.com/qutip/qutip/pull/56#issuecomment-25357042,1,['wrap'],['wrapper']
Integrability,"The easiest would be to make special integrators for HEOM which take a dict of `QobjEvo`: `system = {(from, to): H0,}` and list of states. Then we loop over the items: `drho[from] = QobjEvo(t) @ rho[to]`. As long as the state can be represented in an array, every ODE from scipy, jax, etc can be used. We have tools to stack, unstack, split columns, etc, so the conversion between array and list of `Dense` is easy and efficient. For scipy integrators, that would only need to change 3 methods. Would that work on the HEOM side?; This mean we would need specialised integrator in JAX etc, but would be a lot easier than the stochastic ones so I don't think it's an issue. Changing the `QobjEvo` would be more work, but doable.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2384#issuecomment-2310307934:37,integrat,integrators,37,https://qutip.org,https://github.com/qutip/qutip/issues/2384#issuecomment-2310307934,3,['integrat'],"['integrator', 'integrators']"
Integrability,"The eigenenergies method is defined for Qobj. Try calling ""type(H)"", if you don't get ""Qobj"" then the Hamiltonian is not in the right format. ; Some solvers (sesolve, mesolve, ...) accept time dependent Hamiltonian in list format, eigenenergies does not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/918#issuecomment-426622573:193,depend,dependent,193,https://qutip.org,https://github.com/qutip/qutip/issues/918#issuecomment-426622573,1,['depend'],['dependent']
Integrability,"The error reported here; ```; /Users/goerz/.pyxbld/temp.macosx-10.6-x86_64-3.5/pyrex/rhs72670.cpp:541:10: fatal error: 'complex' file not found; #include <complex>; ```; Suggests that any string format time-dependence would fail to compile. @goerz Could you try to reproduce with simple example, e.g.; ```; H = [[sigmaz(), ""sin(t)""]]; ```; ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-463246180:207,depend,dependence,207,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-463246180,1,['depend'],['dependence']
Integrability,"The hardware info is wrapped in a `try` statement, thus hiding the error. To see what the problem is, just remove the try statement, and see what error Travis is returning.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/780#issuecomment-347419067:21,wrap,wrapped,21,https://qutip.org,https://github.com/qutip/qutip/pull/780#issuecomment-347419067,1,['wrap'],['wrapped']
Integrability,"The latest attempt seems to correctly generate `egg_info` if NumPy is missing, if NumPy is present by not Cython, or if both are present. That should make it much easier to list QuTiP as an external dependency in `requirements.txt`, as our`setup.py` should no longer assume a particular install order. If the latest CI passes, I'll add the review merge ready label.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/489#issuecomment-225887759:199,depend,dependency,199,https://qutip.org,https://github.com/qutip/qutip/pull/489#issuecomment-225887759,1,['depend'],['dependency']
Integrability,"The main function of the `Options` class is to hold the documentation of the options supported by solver, mostly integrator related ones are an issue. Since sub-packages can add new integration methods, it should be somewhere dynamic that can fetch them at runtime. We can't have them in the description of the function interface directly, but it must be clear from that documentation where to find them.; We can't have them in the documentation of the solver class. It could be in a solver instance, but that too late: needing to initialize a `BrSolver` or `HEOMSolver` just to know which options `bsmesolve` and `heomsolve` support is not user friendly.; The Integrator class is useless for the users: if they want to solve ODE, they should use `scipy.integrate`, for quantum systems evolution, `mesolve` etc. So we should not ask them to look there. `SolverOptions(name)` make it reasonably easy to check the supported options and their default before using the solver. Another approach I see is to fix the integrator when using the functions interface, this way we could properly document the function with all items from both the solver and integrator. When using the class interface, we keep both options separated (and make the choice of integrator it's own keyword):; ```; solver = SeSolver(H, integrator_method='adams', options=solver_options, ode_options=ode_options); solver.options # Solver options only. solver.set_integrator('vern7', ode_options); help(solver.ode_options) # See description of integrator options; ```. That way the function calls is very close to v4 and easy to use, and the class interface give access to new features. ; This also makes `krylovsolve` fit more. Since `method` is used by the solver, not the integrator, it should not be under the `options.ode`, but it seems confusing to have it with the normal options, so having it as an independent parameter could make it clearer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897:113,integrat,integrator,113,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897,13,"['Integrat', 'integrat', 'interface']","['Integrator', 'integrate', 'integration', 'integrator', 'interface']"
Integrability,"The main issue causing these errors though is that `cvxpy.Variable` and `cvxpy.Parameter` expect the first arg to be a tuple with dimensions. We are passing `num_rows, num_cols` is two args. Who knows how this has happened - cvxpy changed its interface?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/872#issuecomment-394201690:243,interface,interface,243,https://qutip.org,https://github.com/qutip/qutip/issues/872#issuecomment-394201690,1,['interface'],['interface']
Integrability,"The only operator we normalise are density matrices, so `isoper` work as well. Propagator computation turn the normalisation off. Other cases should only happen when the user pass an arbitrary super operator. I which case they probably don't want any normalisation on our side. My issue is that in these cases, we still set the `isherm` flag while not having any ideas what the user is trying to do:; ```; >>> H = qt.qeye(2) * 1j; >>> L = qt.spre(H); >>> qt.mesolve(L, qt.basis(2,1), [0, 1]).final_state; Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=True; Qobj data =; [[0.+0.j 0.+0.j ]; [0.+0.j 1.+1.55740849j]]; ```. We don't set the flag when the input are super operators? We try to check if the Liouvillian preserve hermiticity (not easy for time dependant operator)? Junk in, junk out?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2408#issuecomment-2077231842:787,depend,dependant,787,https://qutip.org,https://github.com/qutip/qutip/pull/2408#issuecomment-2077231842,1,['depend'],['dependant']
Integrability,"The problem is indeed the use of `blas_opt['extra_compile_args']`which works well on my mac too, but for some reason that I couldn't get to the bottom with, it does not work on the macports build environment. Perhaps the numpy dependency is not properly specified in the ports file, or something similar. I agree with the OP that it would be highly desirable to get this working, but right now i don't have the time work on trying to fix it. Unless it this get fixed somehow, we should probably revise the recommended installation instructions to use macports+pip or homebrew+pip instead.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/283#issuecomment-66273918:227,depend,dependency,227,https://qutip.org,https://github.com/qutip/qutip/issues/283#issuecomment-66273918,1,['depend'],['dependency']
Integrability,The problem is that at the moment this error crashes the entire python kernel unexpectedly for a user without any messages. It can be very frustrating for a newbie.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/699#issuecomment-315348946:114,message,messages,114,https://qutip.org,https://github.com/qutip/qutip/pull/699#issuecomment-315348946,1,['message'],['messages']
Integrability,"The problem with OPENMP is that the point where parallel processing begins to have an advantage is platform, and hardware dependent. As such, I have added a simple benchmark routine that calculates a good number of NNZ that a matrix should have for OPENMP to be utilized. This also required me to change the way the qutiprc file is done, i.e. it now uses the standard configparser module. This benchmark is called on first run, or anytime where the qutiprc 'openmp_thresh' flag is missing, or the qutiprc file itself does not exist.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/652#issuecomment-283874454:122,depend,dependent,122,https://qutip.org,https://github.com/qutip/qutip/pull/652#issuecomment-283874454,2,"['depend', 'rout']","['dependent', 'routine']"
Integrability,"The requirements are described in the pyproject.toml file (which seems to be considered the current ""best practice"" for Python projects) and the setup.cfg file (which is an older best practice). Typically for development one would install with either `python setup.py develop` or `pip install -e '.[full]'` both of which should read the dependencies from the pyproject.toml file. Closing this for now but happy to help more if needed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1763#issuecomment-1014882006:337,depend,dependencies,337,https://qutip.org,https://github.com/qutip/qutip/issues/1763#issuecomment-1014882006,1,['depend'],['dependencies']
Integrability,"The string type time-dependent solvers generate pyx files and compile them in runtime. Much of qutip will run without Cython. But not the string type time-dependent solvers, which are one of the main features of qutip.; @yurivict you could try removing Cython from your Python env and then run the tests - see how many fail",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/893#issuecomment-404095769:21,depend,dependent,21,https://qutip.org,https://github.com/qutip/qutip/issues/893#issuecomment-404095769,2,['depend'],['dependent']
Integrability,"The styling all got added in 5b4777450f5ba2becb790efb3af85482a1704c73 which has the cryptic commit message ""add github fix"". :)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1678#issuecomment-929097733:99,message,message,99,https://qutip.org,https://github.com/qutip/qutip/pull/1678#issuecomment-929097733,1,['message'],['message']
Integrability,"The test failure on Python 3.6 appears to be due to some exceptionally weird behaviour by `conda` in the Travis setup - if you look closely, you can see that when it runs `conda uninstall cython`, it _downgrades_ `numpy` to 1.14.2. This would not be a problem in a `conda-forge` release build, because the `numpy` API dependency is pinned in the feedstock, but it is a potential problem on `pip` source builds. It's possible this super odd behaviour of `conda` is the cause of people's complaints on the email lists about failed imports. I will push a change to the requirements here to try and enforce `numpy >= 1.16.6`, which ought to solve the dependency issues. I will make a similar change on `master` and in #1429 (which I will likely back-port to master before 4.6).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1448#issuecomment-782105359:318,depend,dependency,318,https://qutip.org,https://github.com/qutip/qutip/pull/1448#issuecomment-782105359,2,['depend'],['dependency']
Integrability,"The times at which the `L` are computed are not those at which the states are computed. It computes the derivative at times farther than the desired time and do an interpolation step to get the state. . Some feature (pulse) may be skipped by this method and you should set `Options(max_step=...)` with a `max_step` smaller than half the pulse width, but it should have no issue with a linear ramp. We use the `zvode` integrator of `scipy.integrate.ode`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1821#issuecomment-1058493500:417,integrat,integrator,417,https://qutip.org,https://github.com/qutip/qutip/issues/1821#issuecomment-1058493500,2,['integrat'],"['integrate', 'integrator']"
Integrability,"The variable e does not exist outside the except block even if the try failed...; So trying to give more information about the error resulted in more confusion, sorry. I would suggest to use functions instead of string for your coefficient, the speedpup is often less than the time it take to compile the string, (which is not included in the progressbar). . It is the first case where it would work once, but not the following times. I would be interested in the real error message and/or a code to reproduce the bug. If you are comfortable hacking your version of qutip: adding `print(e)` in the except block; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/qobjevo_codegen.py#L77-L80; should do it give the proper error message.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1196#issuecomment-595847212:475,message,message,475,https://qutip.org,https://github.com/qutip/qutip/issues/1196#issuecomment-595847212,2,['message'],['message']
Integrability,"There are two different issues and now I am realizing I should have filed them separately. One issue is that when I use a time-dependent Hamiltonian given in the list array format I get the wrong result. Your example doesn't contain a time-dependent Hamiltonian given in list array format. To reproduce the issue in your example I replaced; ```; H = [H0, [H1, 't']]; output = mesolve(H, psi0, tlist, c_op_list, [sm.dag() * sm], {}); ```; with; ```; H = [H0, [H1, tlist]]; output = mesolve(H, psi0, tlist, c_op_list, [sm.dag() * sm], {}); ```; For the other case (list callback format) I cannot reproduce the issue with your example. I am starting to think that this problem is not directly caused by having t[0] != 0. What I see is that for `t0 > 5` in my example, I get a constant output from mesolve when I should get an oscillatory solution. Is it possible that the numerical integration is failing silently and the returned expectation values are just for the initial condition?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/561#issuecomment-264643370:127,depend,dependent,127,https://qutip.org,https://github.com/qutip/qutip/issues/561#issuecomment-264643370,3,"['depend', 'integrat']","['dependent', 'integration']"
Integrability,"There are two reasons I did not go with `isinstance(other, numbers.Number)`:; - This returns False when `other` is a NumPy array or TensorFlow tensor which makes `__mul__` significantly less flexible.; - If we accept objects that are not instances of `numbers.Number`, we will still have to use `complex(other)`. This is necessary to infer if the output is hermitian or unitary. Hence, instead of doing a set of `isinstance` checks and `shape` checks for NumPy TensorFlow or any other future library we may want to be somewhat compatible with, we just check whether other it can be casted to `complex`. If it can, `mul` makes sense and we let the specialisation do whatever they ""want"" (they could always just do complex(value) in any case). I must admit that the try except with complex also seems not ideal to me. But I could not find a better implementation that fitted the requirements. I mean, we do use this same code pattern at some other points in the code (in `__matmul__` we raise not implemented if `other` can not be casted to Qobj and we catch this with a try) but what worries me is: what happens if `complex(other)` raises TypeError not because we do not know how to do the cast but because the user made a mistake in the code? An example of this could be:; ```python; arrray = np.array([1,2]) # length 2 array; qobj*array; ```; This will return `TypeError` but with a different message if we catch it in the `complex(other)` try execpt. ; - _With_ a try execpt that returns NotImplemented (current implementation) the error message is:` TypeError: operand 'Qobj' does not support ufuncs (__array_ufunc__=None)`; - Wehreas _without_ the try expect (not returnt NotImplemented if `complex(other)` fails), the error message is: `TypeError: only length-1 arrays can be converted to Python scalars`, which could be a useful error message.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-885550798:1394,message,message,1394,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-885550798,4,['message'],['message']
Integrability,"There is a bug in `brmesolve`. When it prepare the system, it convert everything to `QobjEvo` to allows list format. But then `bloch_redfield_tensor` use `Qobj` vs `QobjEvo` to determine if the system depend on time (since the spectra could depend on time and there is no check for that, we use the class of the corresponding `a_op`). Therefore, when using `brmesolve`, it always use the time-dependent version that compute the eigen states at each time step...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2530#issuecomment-2405171533:201,depend,depend,201,https://qutip.org,https://github.com/qutip/qutip/issues/2530#issuecomment-2405171533,3,['depend'],"['depend', 'dependent']"
Integrability,"There is no agreement on how this should be handled yet. It's been removed from `dev.major` with the plan to restore it before the release, but the exact interface is not fixed. It certainly will not be some special keyword in args. It could be a special value, or a special parameter / method for the solver class.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1142124017:154,interface,interface,154,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1142124017,1,['interface'],['interface']
Integrability,"There is nothing in the code that should prevent one from doing that, provided that the problem is still in Lindblad form. The mesolve routine does not normalize or check the trace for the return density matrices, so I naively think that it should work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/416#issuecomment-171740710:135,rout,routine,135,https://qutip.org,https://github.com/qutip/qutip/issues/416#issuecomment-171740710,1,['rout'],['routine']
Integrability,"There is nothing in the heom ode solve that is not in the mesolve. mesolve can take superop L, that is solve dp/dt = L(t) p, just so long as L(t) = f1(t)L1 + f2(t)L2 ...; I have given some thought to how we can have a more general L(t), in the context of the heom, where for instance we might want to have time-dependent Matsubara terms. These would then occur many times in elements of the L, and so could potentially be solved efficiently. I'll add it to my list of things to discuss with @Ericgig when we meet in a few weeks. The new `QobjEvo` may perhaps have gone some way in this direction already.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-461018021:311,depend,dependent,311,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-461018021,1,['depend'],['dependent']
Integrability,"There is numerical error in the answer due to the need for the sqrtm method. I am not sure if I would call this error significant as the error is of order 1e-7, while the fidelity is of order unity. However, as Chris said, there might be a better way for pure states. Paul. > On Aug 26, 2015, at 13:11, dick-t notifications@github.com wrote:; > ; > fidelity() returns >1 by a significant amount for certain pure states. States are normalised, and taking the inner product returns 1. Code below provides two examples of states which give fidelity >1 with themselves.; > ; > #to test qutip's fidelity routine; > import qutip as qu; > ; > psi0=qu.Qobj(); > ; > i=0; > while i<=1:; > j=0; > while j<=1:; > psi0+=qu.state_number_qobj([2,2],[i,j]) #even superposition of qubit states; > j+=1; > i+=1; > ; > psi0=psi0.unit() #normalise; > ; > print(qu.fidelity(psi0,psi0)); > print((psi0.dag()_psi0).norm()_*2); > print(""\n""); > ; > psi0=qu.tensor(psi0,qu.basis(10,1)) #tensor product with Fock state; > ; > print(qu.fidelity(psi0,psi0)); > print((psi0.dag()_psi0).norm()_*2); > ; > Output:; > ; > 1.00000002107; > 1.0; > ; > 1.00000003485; > 1.0; > —; > Reply to this email directly or view it on GitHub.; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/361#issuecomment-134832098:599,rout,routine,599,https://qutip.org,https://github.com/qutip/qutip/issues/361#issuecomment-134832098,1,['rout'],['routine']
Integrability,"There isn't a QuTiP build for Apple ARM CPUs on PyPI because we don't have the hardware to build it. I recommend installing from conda-forge by following the instructions at https://qutip.org/docs/latest/installation.html#installing-with-conda. You can also compile from source yourself by installing all the necessary dependencies, but I think try conda-forge first.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2027#issuecomment-1335129564:319,depend,dependencies,319,https://qutip.org,https://github.com/qutip/qutip/issues/2027#issuecomment-1335129564,1,['depend'],['dependencies']
Integrability,"There's a distinction between `git` and GitHub here, in that PRs are purely a GitHub thing. As far as `git` is concerned, there's actually no problem at all with a PR being merged from `master` on somebody else's fork (`master` after all is an arbitrary label). The reason to do it is that the person who created the PR will find it harder to incorporate upstream changes, because their `master` will now always be out-of-sync from ours until they fetch from our `master` and do a `git reset --hard` onto it, which would delete their commits and force their branch to line up with ours again. From our side, it makes no difference except that the default commit message that Github gives us will say `Merge branch mlaguna10:master into qutip:master`. You can just change the message and no-one would ever know from looking at the `git log`. I think this is all Boxi meant - it's no issue on our side. If you do the funky two-PR merge/rebase that Alex and I were talking about (by email) then it's all moot anyway, because all commits from this PR and #1212 will get squashed together and GitHub won't know that the PRs were actually merged (the author contributions will count, but I think the PRs will have to be manually closed).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-606714637:662,message,message,662,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-606714637,2,['message'],['message']
Integrability,"There's no link, just bad luck. This won't prevent merge - the tests clearly show your change is fine. Unfortunately our test suite isn't perfect, and sometimes it tries to integrate an insanely stiff system or something like that by accident.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050:173,integrat,integrate,173,https://qutip.org,https://github.com/qutip/qutip/pull/1380#issuecomment-729963050,1,['integrat'],['integrate']
Integrability,"This PR now includes test cases that cover even quite strange tensor contractions. Hopefully these should be good canaries for pretty much all typical usages. That said, the new cases are failing for a surprising reason: `Qobj.isket` fails for ""ragged"" dims:. ``` python; In [1]: import qutip as qt. In [2]: import numpy as np. In [3]: qt.Qobj(np.arange(2 * 3 * 3 * 3 * 2 * 3).reshape((2 * 3 * 3, 2 * 3 * 3)), dims=[[[2], [3, 3]], [[3], [2, 3]]]); ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-3-46359a4eb5bd> in <module>(); ----> 1 qt.Qobj(np.arange(2 * 3 * 3 * 3 * 2 * 3).reshape((2 * 3 * 3, 2 * 3 * 3)), dims=[[[2], [3, 3]], [[3], [2, 3]]]). C:\Users\Chris\Dropbox\software-projects\qutip\qutip\qobj.pyc in __init__(self, inpt, dims, shape, type, isherm, fast, superrep); 281 self.superrep = superrep; 282 else:; --> 283 if self.type == 'super' and self.superrep is None:; 284 self.superrep = 'super'; 285. C:\Users\Chris\Dropbox\software-projects\qutip\qutip\qobj.pyc in type(self); 1542 if self.isoper:; 1543 self._type = 'oper'; -> 1544 elif self.isket:; 1545 self._type = 'ket'; 1546 elif self.isbra:. C:\Users\Chris\Dropbox\software-projects\qutip\qutip\qobj.pyc in isket(self); 1572 @property; 1573 def isket(self):; -> 1574 return (np.prod(self.dims[1]) == 1 and; 1575 isinstance(self.dims[0], list) and; 1576 isinstance(self.dims[0][0], (int, np.integer))). C:\Anaconda\lib\site-packages\numpy\core\fromnumeric.pyc in prod(a, axis, dtype, out, keepdims); 2347 except AttributeError:; 2348 return _methods._prod(a, axis=axis, dtype=dtype,; -> 2349 out=out, keepdims=keepdims); 2350 return prod(axis=axis, dtype=dtype, out=out); 2351 else:. C:\Anaconda\lib\site-packages\numpy\core\_methods.pyc in _prod(a, axis, dtype, out, keepdims); 33; 34 def _prod(a, axis=None, dtype=None, out=None, keepdims=False):; ---> 35 return umr_prod(a, axis, dtype, out, keepdims); 36; 37 def _any(a, axis=None, dtype=No",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/389#issuecomment-152932921:69,contract,contractions,69,https://qutip.org,https://github.com/qutip/qutip/pull/389#issuecomment-152932921,1,['contract'],['contractions']
Integrability,"This all looks very sensible to me. I'm happy with `qobj * matrix` and `matrix * qobj` both being disallowed (though I also wouldn't mind allowing Numpy to broadcast the multiplication treating `Qobj` as a scalar). The thin wrappers around `add_csr` and `add_dense` (and `add_csr_dense_dense`, etc, if they exist), only need to be done when they're passed to the dispatcher - the functions themselves should remain as they are, so they can conveniently be called with C semantics without needing to cast up to a Python object and back down again. `data.add(left, right, scale)` done at arbitrary precision with no tidying up should be identical to `data.add(left, data.mul(right, scale))` (the operation is called ""fused multiply-add""), so yeah, `add` should agree with `mul`. Good catch!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1607#issuecomment-883321575:224,wrap,wrappers,224,https://qutip.org,https://github.com/qutip/qutip/issues/1607#issuecomment-883321575,1,['wrap'],['wrappers']
Integrability,"This could be a way of wrapping all the qip functions in `__init__.py` with a deprecation warning without disturbing other users. I use functools.wraps to make all the name, doc attributes come with the wrapping. https://stackoverflow.com/questions/308999/what-does-functools-wraps-do; ```; import inspect; from functools import wraps; import warnings; import qutip.qip as qip. # all the functions in qutip; func_pairs = inspect.getmembers(qip, inspect.isfunction); # choose cnot as an example; qip_cnot = func_pairs[1][1]. def qip_func_wrapper(func):; # use functools.wraps so that help(cnot) give correct doc.; @wraps(func); def deprecated_func(*args, **kwargs):; warnings.warn(; ""Importing functions from the `qip` module under ""; ""the namespace `qutip` will be deprecated, please use from ""; ""`qutip.qip import {}` instead."".format(; func.__name__, func.__name__),; DeprecationWarning); return func(*args, **kwargs); return deprecated_func. cnot = qip_func_wrapper(qip_cnot); ```; It will only give a deprecation warning when `cnot` imported under the namespace of `qutip` is called It should be possible to write something similar for class objects",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1071#issuecomment-521029871:23,wrap,wrapping,23,https://qutip.org,https://github.com/qutip/qutip/issues/1071#issuecomment-521029871,7,['wrap'],"['wrapping', 'wraps', 'wraps-do']"
Integrability,"This error comes from the integration algorithm.; Take a differential equation like dy/dt = -i*y.; With a simple method like euler: ; y(t+dt) = y(t) + f' dt = y(1-i*dt); So the norm increase exponentially *(1+dt**2) at each iteration, not somewhat randomly.; The default method we use is ""adams"" from scipy's solver, which is a lot better than euler, but still have a bias. We also stop the solver for re-normalization of the state from time to time, introducing another bias.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708:26,integrat,integration,26,https://qutip.org,https://github.com/qutip/qutip/issues/1085#issuecomment-531322708,1,['integrat'],['integration']
Integrability,This error message suggests to me that one of the things you're trying to add might be a numpy array:; ```; TypeError: operand 'Qobj' does not support ufuncs (__array_ufunc__=None); ```,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2326#issuecomment-1960290022:11,message,message,11,https://qutip.org,https://github.com/qutip/qutip/issues/2326#issuecomment-1960290022,1,['message'],['message']
Integrability,This fails because time only contain `0.5`. ; You probably meant `time.append(0.5*i)`. The error message is a catch-all for failure in scipy solver and certainly not clear.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605#issuecomment-879178905:97,message,message,97,https://qutip.org,https://github.com/qutip/qutip/issues/1605#issuecomment-879178905,1,['message'],['message']
Integrability,"This happens to me as well, except that I'm running Ubuntu.; I should note that these are created particularly when running qutip.testing.run().; This test also produces warning messages pertaining to these files. The image below depicts the problem.; ![rhstest](https://user-images.githubusercontent.com/45544401/59579796-70420080-9083-11e9-9b66-df1c48686cbd.png)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1009#issuecomment-502516544:178,message,messages,178,https://qutip.org,https://github.com/qutip/qutip/issues/1009#issuecomment-502516544,1,['message'],['messages']
Integrability,"This is an artifact of `auto_tidyup`; the object in the picture is zero everywhere except the diagonal, whose values are of the order 1e-7. The first step of calculating the trace norm is to do `op @ op.dag()`, which you can see will make all the diagonal entries of order 1e-14. This is below the default tolerance for `auto_tidyup`, so the resulting sparse matrix gets contracted to zero. This happens within `Qobj.norm`, so cannot be intercepted by the user. Can be worked around by temporarily setting `qutip.settings.auto_tidyup = False`, but that's just a work-around. Fixed already in `dev.major`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/952#issuecomment-809684497:371,contract,contracted,371,https://qutip.org,https://github.com/qutip/qutip/issues/952#issuecomment-809684497,1,['contract'],['contracted']
Integrability,"This is because I switched the linear solver used by expm to the sparse version added to scipy. The upside is that we can use expm for larger systems, the downside is that the routine now obviously takes longer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/50#issuecomment-29263828:176,rout,routine,176,https://qutip.org,https://github.com/qutip/qutip/issues/50#issuecomment-29263828,1,['rout'],['routine']
Integrability,"This is definitely a bug. Looking at correlation.py it looks like _transform_L_t_shift_new() and _args[""_t0""] = tlist[t_idx] are supposed to take care of this, but it seems broken for time-dependent collapse operators for two reasons. 1) _args[""_t0""] = tlist[t_idx] is only set if H is time-dependent, not if the c_ops are. 2) The parsing of the c_ops list in _transform_shift_one_op() is a bit broken (it seems to expect [[c,func]] to be one list deeper or something like that?). I am wondering if the above proposed fix of just shifting tlist in the mesolve() call might clash with (potentially) working code for time-dependent Hamiltonians and introduce a new bug in that case? It could perhaps better to fix the existing functionality by fixing the two issues above. On the other hand, that existing functionality is fairly clunky..... any reason not just to ditch it all and have the shifted tlist in mesolve for all cases?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1808#issuecomment-1148761424:189,depend,dependent,189,https://qutip.org,https://github.com/qutip/qutip/issues/1808#issuecomment-1148761424,3,['depend'],['dependent']
Integrability,"This is due to numerical error in the integration, you can change the precision in options:; `Options(max_step=1/(wr * 100), atol=1e-9, rtol=1e-9)`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2258#issuecomment-1793050302:38,integrat,integration,38,https://qutip.org,https://github.com/qutip/qutip/issues/2258#issuecomment-1793050302,1,['integrat'],['integration']
Integrability,This is my conda env file for linux; ```yaml; name: nbdev; channels:; - fastai; - defaults; - conda-forge; dependencies:; - _r-mutex; - _tflow_select; - absl-py; - alabaster; - asn1crypto; - astor; - astroid; - attrs; - babel; - backcall; - backports; - backports.functools_lru_cache; - blas; - bleach; - bwidget; - bzip2; - c-ares; - ca-certificates; - cairo; - certifi; - cffi; - chardet; - cloudpickle; - compiler-rt; - constantly; - cryptography; - curl; - cycler; - cython; - dbus; - decorator; - defusedxml; - docutils; - entrypoints; - expat; - fastcache; - flake8; - fontconfig; - freetype; - fribidi; - gast; - gettext; - glib; - gmp; - gmpy2; - graphite2; - grpcio; - gsl; - h5py; - harfbuzz; - hdf5; - html5lib; - icu; - idna; - imagesize; - intel-openmp; - ipykernel; - ipython; - ipython_genutils; - isort; - jbig; - jedi; - jinja2; - jpeg; - jsonschema; - jupyter_client; - jupyter_contrib_core; - jupyter_contrib_nbextensions; - jupyter_core; - jupyter_highlight_selected_word; - jupyter_latex_envs; - jupyter_nbextensions_configurator; - keras-applications; - keras-preprocessing; - keyring; - krb5; - lazy-object-proxy; - libcurl; - libcxx; - libcxxabi; - libedit; - libffi; - libgcc; - libgfortran; - libiconv; - libopenblas; - libpng; - libprotobuf; - libsodium; - libssh2; - libtiff; - libxml2; - libxslt; - llvm; - llvm-openmp; - lxml; - make; - markdown; - markupsafe; - matplotlib; - mccabe; - mistune; - mkl; - mkl_fft; - mkl_random; - mock; - mpc; - mpfr; - mpmath; - nbconvert; - nbformat; - ncurses; - nomkl; - notebook; - numpy; - numpy-base; - numpydoc; - olefile; - openblas; - openblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python;,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:107,depend,dependencies,107,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['depend'],['dependencies']
Integrability,"This issue has been fixed by #1000, but don't you think there should be a new release of QuTiP to integrate it? A minor release integrating only the corresponding commit could be enough. There is nothing more frustrating for a beginner than when the installation instructions fail. I can grantee that most QuTiP users are not expert of packages dependencies and follow installation instructions without understanding them.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1019#issuecomment-503156655:98,integrat,integrate,98,https://qutip.org,https://github.com/qutip/qutip/issues/1019#issuecomment-503156655,3,"['depend', 'integrat']","['dependencies', 'integrate', 'integrating']"
Integrability,"This issue is mostly obseleted by the merging of #1465, since the complete build structure is now different. In that we didn't necessarily implement the complete change requested here (we don't have `pytest` as a requirement), but we do have the PEP-517-approved way of fully specifying build requirements, so getting a correct build environment is automated. I will note that `pip install -e .` doesn't play very nicely with packages with Cython components to build; at the time of writing, `pip` would tend to install dependencies and perform the build in a venv regardless of what was installed in the activated Python environment (especially if conda), which meant that the complete set of Cython files needed to be re-compiled every time this command was run. That's fine if you just want to edit the Python files, but `setup.py develop` would correctly remember which Cython files actually _needed_ to be re-compiled, so remains much more useful for low-level QuTiP development for practical purposes right now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1263#issuecomment-809340570:520,depend,dependencies,520,https://qutip.org,https://github.com/qutip/qutip/issues/1263#issuecomment-809340570,1,['depend'],['dependencies']
Integrability,"This latest commit 77c21f8 fixes several bugs in the testing of `qutip.qip.operations.gates` - see the commit message for more details. (Force-pushed a new version of it to increase the commit hash references by one character, so GitHub would pick them up and link them.). We should also add tests that the explicit forms of the gates are correct (comparing to hard-coded arrays) in their base forms. These tests should never really fail, but they should be there as a fail-safe sanity check against somebody changing things in that module in the future.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-593333553:110,message,message,110,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-593333553,1,['message'],['message']
Integrability,"This looks good to me. Good to have a test as well. The stochastic functions also need documentation. Since you have some experience with this functionality, it would be great if you could help generate some docs. Also, expanded time-dependence, for example as discussed here:. https://groups.google.com/d/msg/qutip/MoN5VNHvTgk/Liy2v6OKBQAJ. would also be of great help.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/529#issuecomment-245490262:234,depend,dependence,234,https://qutip.org,https://github.com/qutip/qutip/pull/529#issuecomment-245490262,1,['depend'],['dependence']
Integrability,"This looks good. I will look at merging this tonight. I think it would be nice to have a more general time-dependent method as well. I have a function based version working, but not a string one. I will look at trying to implement this sometime this week.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/525#issuecomment-245345549:107,depend,dependent,107,https://qutip.org,https://github.com/qutip/qutip/pull/525#issuecomment-245345549,1,['depend'],['dependent']
Integrability,This looks good. I've tested with both stable and development versions of dependencies (numpy/scipy) and the tests passes. There are two failing tests but they are not related to this issue (but the long-standing issue #30). Nice code cleanup too.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/76#issuecomment-35965183:74,depend,dependencies,74,https://qutip.org,https://github.com/qutip/qutip/pull/76#issuecomment-35965183,1,['depend'],['dependencies']
Integrability,"This looks great and I think it will help a lot in cleanly implementing more complex solvers light the HEOMSolver. I have two suggestions for future improvements:. - I'd like to see `.options = ...` become a method because it now modifies the existing integrator and `.options(...)` would both make that clearer and more flexible. E.g. with a method we could allow both `.options(new_options)` to completely override the options and `.options(key=new_value)` to update just one setting. - The first call to `result.add(t, X)` uses `X = state0` but state0 could be almost anything the user passed in (and not necessarily the canonical form returned by `_restore_state`). It would be better if either there was a separate method to override to convert `state0` into the canonical form, or `result.add(t, X)` was called initially with `X = _restore_state(_data0)`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616:252,integrat,integrator,252,https://qutip.org,https://github.com/qutip/qutip/pull/1879#issuecomment-1108749616,1,['integrat'],['integrator']
Integrability,"This looks great! . The references are sufficient I guess. We can add some more in the example notebook?. One minor terminology point in the explanation: for the Drude-Lorentz bath the correlation functions can be exactly analytically expressed as an infinite sum of exponentials which depend on the temperature, and these are called the Matsubara terms or Matsubara frequencies. . In general, when not dealing with a Drude-Lorentz bath, or something similar, we have to approximate the correlation functions by numerically fitting them to exponentials, but in that case they don't have any particular name I guess. When we get around to adding it as an option, lets call them Fruchtman terms, as it was Amir Fruchtman who told me to try doing it that way!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455#issuecomment-194752885:286,depend,depend,286,https://qutip.org,https://github.com/qutip/qutip/pull/455#issuecomment-194752885,1,['depend'],['depend']
Integrability,"This randomly failing test appears again. It is really getting annoying. I copied the error message from Travis bellow:. ```; =================================== FAILURES ===================================; ___________________________ test_MCSimpleConstStates ___________________________; @pytest.mark.slow; def test_MCSimpleConstStates():; ""Monte-carlo: Constant H with constant collapse (states)""; N = 10 # number of basis states to consider; a = destroy(N); H = a.dag() * a; psi0 = basis(N, 9) # initial state; kappa = 0.2 # coupling to oscillator; c_op_list = [np.sqrt(kappa) * a]; tlist = np.linspace(0, 10, 100); mcdata = mcsolve(H, psi0, tlist, c_op_list, [], ntraj=ntraj,; options=Options(average_states=True)); assert_(len(mcdata.states) == len(tlist)); assert_(isinstance(mcdata.states[0], Qobj)); expt = expect(a.dag() * a, mcdata.states); actual_answer = 9.0 * np.exp(-kappa * tlist); avg_diff = np.mean(abs(actual_answer - expt) / actual_answer); > assert_equal(avg_diff < mc_error, True); E AssertionError: ; E Items are not equal:; E ACTUAL: False; E DESIRED: True; ../../../../miniconda/envs/test-environment/lib/python3.7/site-packages/qutip-4.5.0.dev0+4512014-py3.7-macosx-10.9-x86_64.egg/qutip/tests/test_mcsolve.py:240: AssertionError; ----------------------------- Captured stdout call -----------------------------; 10.0%. Run time: 2.25s. Est. time left: 00:00:00:20; 20.0%. Run time: 4.93s. Est. time left: 00:00:00:19; 30.0%. Run time: 6.67s. Est. time left: 00:00:00:15; 40.0%. Run time: 8.10s. Est. time left: 00:00:00:12; 50.0%. Run time: 10.13s. Est. time left: 00:00:00:10; 60.0%. Run time: 12.40s. Est. time left: 00:00:00:08; 70.0%. Run time: 14.97s. Est. time left: 00:00:00:06; 80.0%. Run time: 16.57s. Est. time left: 00:00:00:04; 90.0%. Run time: 18.81s. Est. time left: 00:00:00:02; 100.0%. Run time: 20.29s. Est. time left: 00:00:00:00; Total run time: 20.34s; ---------- coverage: platform darwin, python 3.7.7-final-0 -----------; Name ; ```; Restart the tests",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-607477749:92,message,message,92,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-607477749,1,['message'],['message']
Integrability,This second commit fixes the test error in `test_ptrace.py` - the commit message in 6c85261 explains what I've done. The errors in `brtools` are due to a much more difficult fix to implement. See #1299.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1298#issuecomment-649502147:73,message,message,73,https://qutip.org,https://github.com/qutip/qutip/pull/1298#issuecomment-649502147,1,['message'],['message']
Integrability,"This won't be easy to fix, if the compilation is in the task, `parfor` cannot know about it to wait for it.; The simplest would be to have only the main process able to compile. This code will still raise an error, but the solution would be in the error message.; Otherwise communication between process would be needed and this can get tricky. Also `parfor` will be removed. It says in its [documentation](https://qutip.org/docs/latest/apidoc/functions.html#qutip.parallel.parfor) to use `parallel_map` instead since v3.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1963#issuecomment-1199314433:254,message,message,254,https://qutip.org,https://github.com/qutip/qutip/issues/1963#issuecomment-1199314433,1,['message'],['message']
Integrability,"To be honest, I'm not 100% sure myself since it's just turned into a string and cythonized anyways. When it was initially added, I had assumed the purpose was because occasionally a function doesn't work well in the string format or is slow in the list-function format. Though I'm working on adding time-dependence to the Bloch Redfield solver by using piece-wise constant Liouvillians and there I guess the format makes a bit more sense intuitively, PR #525.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-242163512:304,depend,dependence,304,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-242163512,1,['depend'],['dependence']
Integrability,"To clarify, you want me to implement something like this message:. ```python; if 'c_ops' in kwargs:; warnings.warn(""please use c_op_list argument in current version. c_op_list will be deprecated in favour of c_ops in future versions.""); c_ops = c_op_list; ```. but not change 'c_op_list' to 'c_ops'? Then you want me to change it in the dev.major branch?. Thanks",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1716#issuecomment-974810877:57,message,message,57,https://qutip.org,https://github.com/qutip/qutip/issues/1716#issuecomment-974810877,1,['message'],['message']
Integrability,"Unfortunately I have had some issues with `conda` in CI (for instance, it's solver uses quite a bit of memory, which had readthedocs actually shoot it down when solving the environment at some point). Also build matrices that test various combinations of optional dependencies are much cleaner when using a pure `pip` setup. I see your point though. I'll have to work around it for now. Thanks anyway!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1396#issuecomment-777706377:264,depend,dependencies,264,https://qutip.org,https://github.com/qutip/qutip/issues/1396#issuecomment-777706377,1,['depend'],['dependencies']
Integrability,"Unfortunately it doesn't really help here for the steady state stuff. I; guess generally speaking systems which are strongly driven don't have a; steady state in the normal sense, however periodic driving sometimes leads; to periodic steady states. I guess propagator_steadystate calculated the rho which satisfies. U(t)rho= rho ?. Given that in the original code snippet t=2 pi/w I suppose this gives one; part of the potentially periodic solution? (Though if the driving is weak; and on resonance this periodic oscillation will be a small modulation on; top of the rwa result). As for calculating the spectrum, I am not sure. I guess; s I would argue that the steady state used as the initial condition in the; correlation function should be the average of the periodic steady state; over one period?. On Thu, 5 Nov 2020, 00:53 Tarun Raheja, <notifications@github.com> wrote:. > @nwlambert <https://github.com/nwlambert> didn't we fix this by natively; > allowing time dependent Hamiltonians in our solver? Maybe we should mention; > the repo here since it's relevant.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1377#issuecomment-721813998>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABG3YHPABJ7DLKBEJNQYMPLSOF2GNANCNFSM4TJJWPPQ>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1377#issuecomment-722055681:971,depend,dependent,971,https://qutip.org,https://github.com/qutip/qutip/issues/1377#issuecomment-722055681,1,['depend'],['dependent']
Integrability,"Update from Google Meet discussion:. @jakelishman @Ericgig and I had a quick video call and decided that `.replace(...)` should be renamed something like `.replace_arguments(...)` and accept either a dictionary of arguments (as a positional only argument) or keyword arguments (with the new values for the arguments). In either case, the given argument keys should be update to their new values and any other keys should retain their previous values. For the other attributes `.replace(...)` was supporting replace:. * the shift value can just be updated by wrapping the coefficient with `ShiftCoefficient` or updating the `t0` of an existing shift coefficient.; * the `tlist` value really doesn't make that much sense to update without also updating the associated function values and there are many ways this can go wrong (e.g. sub-expressions with different tlists, supplying a new tlist with the incorrect length).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1507#issuecomment-856760085:558,wrap,wrapping,558,https://qutip.org,https://github.com/qutip/qutip/pull/1507#issuecomment-856760085,1,['wrap'],['wrapping']
Integrability,"Update to 4.1 dev or do [e_ops]. -P. On Feb 9, 2017 06:10, ""WolfgangLechner"" <notifications@github.com> wrote:. > To reproduce the problem:; >; > -; >; > run Lecture 8 - Adiabatic sweep from qutip lectures with qutip 4.02; > -; >; > Error message:; >; > Traceback (most recent call last):; > File ""as.py"", line 92, in; > mesolve(h_t, psi0, taulist, [], process_rho, args); > File ""/usr/local/lib/python2.7/site-packages/qutip/mesolve.py"", line 208,; > in mesolve; > _solver_safety_check(H, rho0, c_ops, e_ops, args); > File ""/usr/local/lib/python2.7/site-packages/qutip/solver.py"", line 822,; > in _solver_safety_check; > for ii in range(len(e_ops)):; > TypeError: object of type 'function' has no len(); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/645>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ABMPqUOt9R6_QP67bFpCcaIVV3D2Su2cks5raxBggaJpZM4L8Gzy>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/645#issuecomment-278673105:239,message,message,239,https://qutip.org,https://github.com/qutip/qutip/issues/645#issuecomment-278673105,1,['message'],['message']
Integrability,"Users should not be installing pip dependencies into a conda environment. They should be using conda, not pip. You are only running into this because you are using pip inside a conda environment, and yes, you'll need the dependencies (with their proper conda names) in that environment. (And, since wheels work inside conda, `pip install cutip` should work inside a conda env, even if they should be using conda - it's only because you are building inside it, which is very much not supported for normal users)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1738#issuecomment-990018307:35,depend,dependencies,35,https://qutip.org,https://github.com/qutip/qutip/pull/1738#issuecomment-990018307,2,['depend'],['dependencies']
Integrability,"Using the stable release of QuTiP doesn't really help me: I'm trying to prepare a pull request for QuTiP, so I need to be able to run tests on `master` and my topic branch. I've been relying on the CI to run the tests for me, but that gets tricky once you run into test failures. You can't really debug the tests if you can't run them locally. I'm also not surprised you're not able to reproduce this on your machine on Linux: this is definitely a platform-dependent problem. The issue is that QuTiP's use of Cython is *extremely* brittle. This makes contributing to the library quite difficult. Until the most recent release (4.4.1), these kinds of problems were also affecting me and colleagues a lot as a user, but luckily that seems to have gotten better. Nonetheless, it would be great if QuTiP's low-level parts became even more robust. I know this is not a trivial problem (or I'd contribute some fixes myself), and I'm very thankful for all the core developers' work, but it's definitely a source of frustration.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-540025634:457,depend,dependent,457,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-540025634,1,['depend'],['dependent']
Integrability,"Very probably. The integrator doesn't know what you're trying to achieve, and you've set it exact tolerance limits (either implicitly or explicitly), so it has to integrate within those limits. If you want the steady-state solution, you can try `qutip.steadystate` instead.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605#issuecomment-886246136:19,integrat,integrator,19,https://qutip.org,https://github.com/qutip/qutip/issues/1605#issuecomment-886246136,2,['integrat'],"['integrate', 'integrator']"
Integrability,"We can remove it here. It is working but does not have a user facing interface or documentation, so I don't think any user use it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1575#issuecomment-861872837:69,interface,interface,69,https://qutip.org,https://github.com/qutip/qutip/pull/1575#issuecomment-861872837,1,['interface'],['interface']
Integrability,We can set up packages dependencies easily enough. It's already done automatically in fact. Our numpy package provides a versioned python3-numpy-abi (currently python3-numpy-abi9) and an debhelper dh_numpy3 tool which sets the versioned dependency for dependent packages at build time,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1720#issuecomment-977842255:23,depend,dependencies,23,https://qutip.org,https://github.com/qutip/qutip/issues/1720#issuecomment-977842255,3,['depend'],"['dependencies', 'dependency', 'dependent']"
Integrability,"We could take this PR as an example of how to work with a very messy git history. I see some forced pushes which should probably have been rebases to avoid conflicts. But at this point I would suggest to Boxi that you open a fresh PR branching from the current master on your local qutip repo. So do:. ```; git checkout master; git pull upstream master; git push origin master; ```. This syncs your master to QuTiP. Then, start a new branch and make the same changes that you did here on that new branch. . Make the changes, add commit etc.; ```; git checkout -b user_gate2; ...; git add .; git commit -m ""message""; ```. and then make a new PR and close this (without merging). Then delete this branch (locally and remote). ```; git branch -D user_gate; git push origin -delete user_gate; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1025#issuecomment-505060556:606,message,message,606,https://qutip.org,https://github.com/qutip/qutip/pull/1025#issuecomment-505060556,1,['message'],['message']
Integrability,"We have made some progress! But I also have some questions for the experts here.; * We have added a Users Guide for the new solver, as a new subsection of the ""Monte Carlo Solver"" guide. On my machine, I can build the documentation without problems (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?; * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; * The _run_one_traj function now exists 3 times, with practically identical code:; https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L206) should be ""integrate"", I think. Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. Side note: due to a WSL bug, some of my commit timestamps are messed up. Because of that, some commits seem to be shown out of order here...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901:375,message,message,375,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446149901,2,"['integrat', 'message']","['integrate', 'message']"
Integrability,"We probably shouldn't mutate the given `Options` object, but the call as written here doesn't make a huge amount of sense - why would you want to run the integrator but not have any output stored at all? You'd just be spinning your processor. That said, if we're going to do something different to what the user requested we should at least emit a warning. There's also interplay with `store_final_state` here too; it's questionable technique to do `e_ops=None, store_final_state=True` with a `tlist` with more than two elements, but probably people who aren't familiar with `nsteps` will do something like that, and it seems a bit picky to prevent/warn on that when the intention seems clear. I think that the current behaviour doesn't take this case into account when falling back - it'll store all states, which in the 4.x branch is a fairly major time sink (but much much faster in 5.0). What behaviour would you expect for your use case? I'd probably do something like:; 1. if we change the `Options`, we have to clone it first to prevent leaking our mutations; 2. if we're not going to save anything, we should warn the user but then do it anyway - maybe their time-dependence functions leak state, and they're just doing something weird with that; 3. `store_final_state` should count as ""storing something"", so no need to set `store_states` if `store_final_states=True` and there are no `e_ops`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775216824:154,integrat,integrator,154,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775216824,2,"['depend', 'integrat']","['dependence', 'integrator']"
Integrability,"We removed the need for cython at run time (officially) recently. It is still needed at installation for installation from sources, but conda can be used if cython is not available. I am not sure about the minimum version, but it does not have to be that recent. Pickling of cdef class is done manually and depend more on pickle version than cython's.; We don't support python2 anymore since numpy also removed it's support, but 4.3 or 4.2 should date from a time it was still supported. Are some of the cython files compiling or are they all failing?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1129#issuecomment-607866651:307,depend,depend,307,https://qutip.org,https://github.com/qutip/qutip/issues/1129#issuecomment-607866651,1,['depend'],['depend']
Integrability,"We use the scipy ode solver. In their documentation ; https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.ode.html; they state that for the ZVODE solver. > Warning; > This integrator is not re-entrant. You cannot have two ode instances using the “zvode” integrator at the same time. This does seem a big shame, as there are of course many good reasons to want to parallelise solving ODEs.; Not really sure that there is any easy way around this. Only one of the ode integrators does not carry this warning. We currently don't have any setting that allows switching integrator method",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/822#issuecomment-365680262:113,integrat,integrate,113,https://qutip.org,https://github.com/qutip/qutip/issues/822#issuecomment-365680262,5,['integrat'],"['integrate', 'integrator', 'integrators']"
Integrability,"Well how about we just stick with the way it is, change squeez to squeeze in the next release (with squeez depreciated and calling the new version), and mentioning in the docs that qutip should probably be imported last?. On Wednesday, June 5, 2013 at 11:54 AM, Robert Johansson wrote:. > I would have preferred if the squeez function was called squeeze... but that's just a personal preference. There are many very generic symbol names in qutip, such as tensor, create, etc. These could easily appear in some other package, such as scipy or numpy sometime in the future, and then become a conflict, so I tend to prefer not relying on distorting the function names to make them more unique. For example, identity seems more readable to qeye, which is why i prefer it.; > What is your suggestion? That we remove identity again? If you think that's the best thing to do that I'm ok with that.; > However, if best practices python programming is followed, either by not importing into the global namespace or by importing packages in dependency order (for example numpy, matplotlob, scipy. followed by qutip), then this isn't really a problem.; > ; > —; > Reply to this email directly or view it on GitHub (https://github.com/qutip/qutip/issues/25#issuecomment-18952812).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/25#issuecomment-18955374:1031,depend,dependency,1031,https://qutip.org,https://github.com/qutip/qutip/issues/25#issuecomment-18955374,1,['depend'],['dependency']
Integrability,Well the performance depends strongly on the number of elements in tlist. For the given example the only calls that change is the increased number of expectation value calculations and a larger number of times the overall for-loop is run.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-64520234:21,depend,depends,21,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-64520234,1,['depend'],['depends']
Integrability,"Well the usual way is command+R for running through a ruby interface. Although, one can do shift+command+R to run directly in the terminal. The latter works fine.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/121#issuecomment-63265342:59,interface,interface,59,https://qutip.org,https://github.com/qutip/qutip/pull/121#issuecomment-63265342,1,['interface'],['interface']
Integrability,"What about the c99 complex math functions? Are those a possibility? Perhaps we could specify that 'j' is a reserved variable and then search the input string for 'j' and then call math or cmath, depending on the result.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/154#issuecomment-61041717:195,depend,depending,195,https://qutip.org,https://github.com/qutip/qutip/pull/154#issuecomment-61041717,1,['depend'],['depending']
Integrability,"What do you think is more efficient than doing; ```python; states = [qutip.basis(2, 0), qutip.basis(2, 1)]; results = [qutip.sesolve(H, state, times) for state in states]; ```; ?. I'm saying that to do each state independently, `mesolve` and `sesolve` have to independently integrate each state, so even if we added this functionality into those functions directly, it would be little more than that loop I just wrote if you have used the tools I described in the first comment. If you want the entire system propagator, `qutip.propagator` can calculate that for you. Lots of people have successfully used QuTiP already as part of reinforcement learning protocols - I've worked with at least a couple, but if you have very specific domain knowledge of your system, you often will be able to write an integrator which is faster for your cases, rather than the full general-purposes ones in QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465:274,integrat,integrate,274,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660471465,3,"['integrat', 'protocol']","['integrate', 'integrator', 'protocols']"
Integrability,"What if for different time slices, A itself changes as A(t)? i.e., one would like to explicitly define the time-dependent part as a function which returns an operator and not just some constant A with the coefficients changing as f(t).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/946#issuecomment-460997135:112,depend,dependent,112,https://qutip.org,https://github.com/qutip/qutip/issues/946#issuecomment-460997135,1,['depend'],['dependent']
Integrability,What is different between this and the built in routine that seems to do the sane thing?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/912#issuecomment-469413174:48,rout,routine,48,https://qutip.org,https://github.com/qutip/qutip/pull/912#issuecomment-469413174,1,['rout'],['routine']
Integrability,What is the motivation behind having the np array time dependence? Is this some thing that the cubic spline function could be used for?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/520#issuecomment-242132546:55,depend,dependence,55,https://qutip.org,https://github.com/qutip/qutip/pull/520#issuecomment-242132546,1,['depend'],['dependence']
Integrability,"What's wrong with just using a loop? Adding the `combine` statement is already extra work for you, and using the solver in a loop will be much clearer about what's going on. The `Qobj` object container is not meant to a vector of objects itself - use a list for that, or a numpy array if you're only going to do simple mathematical operations that you want broadcasting for (numpy will broadcast `*`, `/`, `+`, `-` and `**` correctly). The calculational complexity of the solver isn't helped by knowing you're going to do it a few times, but there are some setup costs that QuTiP already gives you the tools to alleviate. `mesolve` constructs a Liouvillian out the Hamiltonian and collapse operators; if you want to reuse the result of this, you should use `qutip.liouvillian` and `qutip.QobjEvo`, and use the `compile` method of the latter. You can pass the result of this directly as the `H` parameter of `mesolve` and it'll skip all the setup. There is some work going on about making a class-based interface to the solvers, which allows easier use of the tools to reduce setup time, but those likely won't be released for some time yet. In the meantime, just use a loop here. There will not be a notable slow down (unlike numpy maths operations) because the Python iteration over elements takes a negligible amount of time compared to single numerical intergration. As a side note, in this particular case you're doing unitary dynamics with state vectors, so this call to `mesolve` is actually translated into one to `sesolve`, which does not need to construct the Liouvillian.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774:1002,interface,interface,1002,https://qutip.org,https://github.com/qutip/qutip/issues/1323#issuecomment-660459774,1,['interface'],['interface']
Integrability,"When no options and no e_ops are given, the solver should store the states, otherwise nothing is done. Since the default value si `store_states=False`, the solver don't know that the value was explicitly given or the default. We should have `store_states=None` as the default. This allow us to respect an explicit False while keeping the expected behaviour when no options are given. I will make this change in the v5 solver (And make sure no Options are modified). `tlist` was never meant to control time dependence, it represent the time at which the solver look at the state (+ first and last times). I added array support as coefficient as a shortcut to Cubic_Spline and I used the already existing tlist, but this is clearly a limitation and in v5 they will be controlled independently.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775976194:506,depend,dependence,506,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775976194,1,['depend'],['dependence']
Integrability,"Whether it is an issue likely depends on you school of thought. The error comes from the finite accuracy of the solvers. By default, the solutions are found using a method that is accurate 12-order in the step size and looks for absolute and relative errors at the 1e-8 and 1e-6 levels, respectively. If you evolve for long enough then inevitably there is going to be some error, and you will not get perfectly Hermitian matrices. One can accept this, and possibly lower the tolerance levels for more accuracy, or you can take 0.5*(A+A.dag()) to force the Hermicity. What method you use likely depends on your question and taste. Either way, I do not think that I would call this an issue. It is more of a fact of life when doing numerics. Paul. > On Jun 1, 2015, at 20:00, mmensing notifications@github.com wrote:; > ; > I was wondering if this is still an issue? If so I could try to spend some thinking on possible ways to correct the errors.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/qutip/qutip/issues/122#issuecomment-107400015.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/122#issuecomment-108683653:30,depend,depends,30,https://qutip.org,https://github.com/qutip/qutip/issues/122#issuecomment-108683653,2,['depend'],['depends']
Integrability,"While running the above example on a jupyter notebook I am faced with the following error ; ```; {; 	""name"": ""TypeError"",; 	""message"": ""_remove_margins.<locals>._get_coord_info_new() missing 1 required positional argument: 'renderer'"",; 	""stack"": ""---------------------------------------------------------------------------; TypeError Traceback (most recent call last); File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/pyplot.py:265, in _draw_all_if_interactive(); 263 def _draw_all_if_interactive() -> None:; 264 if matplotlib.is_interactive():; --> 265 draw_all(). File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/_pylab_helpers.py:131, in Gcf.draw_all(cls, force); 129 for manager in cls.get_all_fig_managers():; 130 if force or manager.canvas.figure.stale:; --> 131 manager.canvas.draw_idle(). File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/backend_bases.py:1919, in FigureCanvasBase.draw_idle(self, *args, **kwargs); 1917 if not self._is_idle_drawing:; 1918 with self._idle_draw_cntx():; -> 1919 self.draw(*args, **kwargs). File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/backends/backend_agg.py:387, in FigureCanvasAgg.draw(self); 384 # Acquire a lock on the shared font cache.; 385 with (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar; 386 else nullcontext()):; --> 387 self.figure.draw(self.renderer); 388 # A GUI class may be need to update a window using this draw, so; 389 # don't forget to call the superclass.; 390 super().draw(). File ~/.local/share/virtualenvs/qutip-319cV_iJ/lib/python3.11/site-packages/matplotlib/artist.py:95, in _finalize_rasterization.<locals>.draw_wrapper(artist, renderer, *args, **kwargs); 93 @wraps(draw); 94 def draw_wrapper(artist, renderer, *args, **kwargs):; ---> 95 result = draw(artist, renderer, *args, **kwargs); 96 if renderer._rasterizing:; 97 renderer.stop_rasterizing(). File ~/.local",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2400#issuecomment-2142000903:125,message,message,125,https://qutip.org,https://github.com/qutip/qutip/issues/2400#issuecomment-2142000903,1,['message'],['message']
Integrability,"While the tests now pass for Mac on Travis CI, this is the error messages I get locally on Mac, . ```; (base) cln-232-18:qutip nathanshammah$ pytest; ============================= test session starts ==============================; platform darwin -- Python 3.7.3, pytest-4.6.2, py-1.8.0, pluggy-0.12.0; rootdir: /Users/nathanshammah/github/qutip; collected 0 items / 60 errors. ==================================== ERRORS ====================================; __________ ERROR collecting qutip/tests/test_basis_transformation.py ___________; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:171: in <module>; from qutip.qobj import *; qutip/qobj.py:60: in <module>; from qutip.fastsparse import fast_csr_matrix, fast_identity; qutip/fastsparse.py:406: in <module>; from qutip.cy.spmath import (zcsr_transpose, zcsr_adjoint, zcsr_mult); qutip/cy/__init__.py:1: in <module>; from qutip.cy.spmatfuncs import *; stringsource:105: in init qutip.cy.spmatfuncs; ???; E AttributeError: type object 'qutip.cy.spmatfuncs.array' has no attribute '__reduce_cython__'; ________________ ERROR collecting qutip/tests/test_brmesolve.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_brmesolve_td.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = F",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:65,message,messages,65,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['message'],['messages']
Integrability,"While you could probably make it work but manually updating the state at each times of `tlist` is certainly not a usage I planned for... If you could use `mesolve` instead of `mcsolve` it would be simpler:; ```; solver = MeSolver(...); solver.start(rho0, t0); for t in tlist[1:]:; rho_t = solver.step(t); solver.start(rho_t @ projection, t); ```. With `mcsolve`, if you use it like this, it would normalize the state at each step possibly breaking the montecarlo part of the evolution. The way I would do it is by making a child class overwriting the step of `McTrajectorySolver`:. ```; class MyMcTrajectorySolver(McTrajectorySolver):; def _step(self, t):; super()._step(t); _, raw_state = self._integrator.get_state() # state not normalized; new_state = _data.matmul(projector, state) # projector is a Data object: Qobj.data; self._integrator.set_state(t, new_state); return _data.mul(new_state, 1 / _data.norm.l2(new_state)). class MyMcSolver(McSolver):; _traj_solver_class = MyMcTrajectorySolver; ```; If done this way, you should be able to use the normal solver interface. This projection should be done once per call of `step` or per time in `tlist`, but I would confirm it before running simulation. `step` does not return the `collapse` part of the results. So if a collapse happen, it will not output it nor the time at which it happen. But the state evolution is done normally, collapse will happen as expected. To get them, you will need to fetch them with `solver.traj_solvers[i].collapse`. Feel free to comment on the new solver interface. If you think that something is missing or confusing, now is a good time to tell us. We should come back on this PR in April.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1710#issuecomment-1068480013:1067,interface,interface,1067,https://qutip.org,https://github.com/qutip/qutip/pull/1710#issuecomment-1068480013,2,['interface'],['interface']
Integrability,"Would it be okay to use `_path_from_env(""XDG_CONFIG_HOME"", Path.home() / "".config"")` rather than depend on the `xdg` package?. How does one know if one is on a system where XDG is supported? E.g. I know Windows used to use a special APP configuration folder of its own.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1876#issuecomment-1219758222:97,depend,depend,97,https://qutip.org,https://github.com/qutip/qutip/issues/1876#issuecomment-1219758222,1,['depend'],['depend']
Integrability,"Yeah in my experience this is something one has to be careful of with the steady-state solver as it is. Depending on the method chosen it can either fail, return one of the possibilities, or some linear combination of them. The default one (direct) tends to fail, which at least sometimes lets you know you have this issue. . We could consider adding null_space solver which returns all possibilities, or modify the existing svd solver to do so if possible? ; Still, if the default ""direct"" method is silently failing it may trip people up still, so adding some examples to the documentation might help, as a minimum. I don't know of a way to extend that direct method to return all possible solutions, and connect those to possible initial conditions. It would be very interesting if its possible!. One minor thing; looking at the the example in the linked paper you provided seems to badly constructed. The dephasing operator they define there is actually just an identity, so does nothing, so technically the second example has no well-defined steady-state at all. A more useful example would be a proper dephasing through a collapse operator = sigma_z, and no driving on the qubit, so the degenerate steady-states are <sigmaz>=\pm 1.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2175#issuecomment-1594101812:104,Depend,Depending,104,https://qutip.org,https://github.com/qutip/qutip/issues/2175#issuecomment-1594101812,1,['Depend'],['Depending']
Integrability,"Yeah, `qutip-qip` is a much easier build and installation process because you don't need to be concerned about compiler infrastructure, ABI compatibility or stuff like that. In addition in that particular test run, there were three individual calls to change the installed packages, which meant plenty of space for stuff to go wrong. In this case, I think it was a strange interaction between the old `.travis.yml` specifically installing `numpy` and all other dependencies from `conda-forge`, without the channel being in the defaults list. Since `conda uninstall` doesn't specify an additional channel, the dependency calculator considers `defaults` to be higher priority, so it sets various packages to arbitrary allowed ones from `defaults`, which with `openblas` installed like this meant numpy `1.14`. That's my guess at least - it's a pretty weird set up circumstances, but the new `.travis.yml` file that's already in `master` is far simpler about the build process.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609:461,depend,dependencies,461,https://qutip.org,https://github.com/qutip/qutip/pull/1448#issuecomment-782177609,2,['depend'],"['dependencies', 'dependency']"
Integrability,"Yeah, definitely there's no point running tests that aren't really testing the package properly. I would hope that if we're much more aggressive about converting time-dependent lists into QobjEvo objects inside `mesolve`, `mcsolve` and `sesolve` (or the class-based versions of them), we could significantly reduce the amount of testing that needs to be done with them. Most of the tests of time-dependent formats would then occur in the QobjEvo tests. We could still test all the configurations of the solvers without too heavy a time penalty. If we only use a small number of different time-dependent operators, we can compile them all only once, and have `pytest` manage the resources through shared fixtures. That would really cut down the run times, especially for the current ""slow"" tests. Another avenue for cutting down run time is if we could merge say the MKL and OpenMP tests into one Travis job - the setup time for one job is about 2.5 minutes, and that's before any tests have run at all. I would hazard a guess that having MKL but not OpenMP is a pretty rare case (maybe more common on high-performance clusters where people submit single-cpu jobs?).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604348182:167,depend,dependent,167,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604348182,3,['depend'],['dependent']
Integrability,"Yeah, in the context of #850, I was only thinking of a global switch for the storage format. But #437 makes a good point about using full storage. I'd add to that the [Lapack banded storage format](http://www.netlib.org/lapack/lug/node124.html) which is extremely efficient for diagonal or tri-diagonal operators (or scipy's [DIA](https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_matrix.html#scipy.sparse.dia_matrix), which I think is mostly equivalent). I've actually had to solve the equivalent problem of allowing multiple internal formats in the [Fortran QDYN package](https://www.qdyn-library.net), so I'm not sure why I didn't think of that in the first place ;-). I can definitely vouch for the efficiency gained by being able to switch internal sparse representations. So yeah, you'd definitely have the most flexible solution by allowing `Qobj.data` to use varying storage classes from object to object. Maybe the ""protocol"" could be for `Qobj.data` to be any subclass of the [scipy `spmatrix` base class]( https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.spmatrix.html#scipy.sparse.spmatrix)? Then the `Qobj` constructor would probably need an additional parameter `format` for the class that should be used to convert the `inpt` argument to the `data` attribute. The onus would then be on Scipy to provide a full matrix that is a subtype of `scipy.spmatrix` (just to keep the interface contract), and also to have `int64` versions of all their existing sparse classes. From a community standpoint, it would seem like one would get much more bang for the buck to have this problem solved inside SciPy, instead of doing a lot of low-level stuff in QuTiP -- at least if they're amenable to pull requests, but worst case you can still define necessary new `scipy.spmatrix` subclasses externally. Take all of my musings with a little grain of salt... I never really looked too deep into QuTiP's low-level internals, specifically where QuTiP is using Cython.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-383937610:945,protocol,protocol,945,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-383937610,1,['protocol'],['protocol']
Integrability,"Yeah, it runs completely normally for me... ![jupyter output](https://i.imgur.com/9LkOQzO.png). I can only think that there is some problem with the temporary directory on Windows, since the calls to all the external programmes are the functionally the same. Do you get any error messages in the kernel log? If not, can you try running it in raw `python` or `ipython` on the command line, and just run; ```python; from qutip.qip.circuit import QubitCircuit; qc = QubitCircuit(2); qc.add_gate(""CNOT"", 0, 1); qc.png; qc.svg; ```; and see if there are any error messages?. I kind of hope it's a mistake in my code somewhere, because if it is the `tempfile.TemporaryDirectory` on Windows then I'll have to re-think some parts of #1181 too.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605289820:280,message,messages,280,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605289820,2,['message'],['messages']
Integrability,"Yeah, looking at it, this functionality still does not exist. The `essolve` function is pretty out-of-date (its last real activity was back in 2013), and may well be completely deprecated in an upcoming version of QuTiP. Hopefully `qutip.mesolve` should be a near drop-in replacement for you (`c_ops_list` is now called `c_ops`, but other than that you're fine), and it may well be a lot faster as well. @Ericgig, @ajgpitch: shall we commit to maintaining `essolve` and/or the `eseries` class, or issue a deprecation warning as soon as possible? They're pretty unloved, and `QobjEvo` really is a far far more general way of specifying time-dependence. My vote (should I have one) is for deprecation. I'm always in favour of slimming down codebases if it doesn't remove useful functionality!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1262#issuecomment-628260933:640,depend,dependence,640,https://qutip.org,https://github.com/qutip/qutip/issues/1262#issuecomment-628260933,1,['depend'],['dependence']
Integrability,"Yeah, so this bug is fixed in QuTiP 4.5.3 and above. You can also fix it by downgrading Numpy to 1.19 or below (in 1.20 they changed how they handle object arrays, which broke us and a few other packages). That's strange that Conda won't let you upgrade beyond 4.5.2; there's no constraint on our conda package which should prevent it. Do you have any other packages installed that depend on QuTiP? If so, they might be pinning our version. What happens when you run `conda update qutip`? (By the way, you can also install `qutip` from `pip` easily since the 4.6 release).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1634#issuecomment-895511734:382,depend,depend,382,https://qutip.org,https://github.com/qutip/qutip/issues/1634#issuecomment-895511734,1,['depend'],['depend']
Integrability,"Yeah, that's a memory leak. It doesn't really matter how ""silly"" the method is that causes it to appear, the fact is that it shouldn't exist. It's actually not to do with `add_dense` but `Dense.copy` - I didn't set the `Dense._deallocate` flag in that routine, so when the Python object goes out of scope, the C destructor ignores the pointer and it goes stale. You can probably achieve very similar behaviour with `for _ in [None]*1_000_000: rho.copy()`, even if you force `gc.collect()` after every iteration.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1415#issuecomment-755211133:252,rout,routine,252,https://qutip.org,https://github.com/qutip/qutip/issues/1415#issuecomment-755211133,1,['rout'],['routine']
Integrability,"Yeah, this feels like a bug in `propagator` - I bet at some point we do `qeye(L.shape[0])` instead of `qeye(L.dims[0])`. There's sometimes quite a bit of that in older code - it used to slip through because we weren't super strict about dimension handling, so in certain cases (like this one), we'd accept bad dimensions. I might try and have a look tonight (UK time), if I have time - I've wanted to break up the large `propagator` monolith into smaller components for quite a while. ---. About numerical precision: if you want to try increasing the precision of the integrators, try passing `options=qutip.Options(nsteps=1_000_000, atol=1e-12, rtol=1e-10)` to `propagator`. `atol` and `rtol` are absolute and relative tolerances respectively, and `nsteps` is the number of subdivisions the integrator is _allowed_ to take (if it reaches its tolerance goals, it won't take all of them). You'll find that `atol` and `rtol` will have only a loose relation to the tolerance of your fidelity value, because there's a _lot_ of floating-point operations between those points in which the errors compound, and there's a hard limit on the tolerances the integrator can achieve, so you might not be able to get a perfect answer. The fidelity calculation involves finding the square root of a density operator, so that's another large possible source of error. About times: if you only care about the state at the last time, setting `tlist = np.linspace(0, x, 201)` is quite inefficient. Instead, set `tlist = [0, x]`, and then pass `options=qutip.Options(nsteps=<very very big integer>)`. It's more efficient because it doesn't need to achieve tolerance goals and construct/store `Qobj` instances at every intermediate timestep. Temporary workaround: this is _very_ temporary, and generally a bad idea in QuTiP, but you can ""flatten"" all your operators into a single space for now, while we implement a fix. To do that:; ```python; # initial setup; H = qutip.tensor(...); c_ops = [qutip.tensor(...)]. original",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1585#issuecomment-865903199:568,integrat,integrators,568,https://qutip.org,https://github.com/qutip/qutip/issues/1585#issuecomment-865903199,2,['integrat'],"['integrator', 'integrators']"
Integrability,"Yeah, this is a ""true"" merge of the qutip-doc repository with this one. Technically all the commits have been rewritten (you'll find that the hashes won't match between the repositories), but they'll all be credited to the same authors on GitHub. Everyone will actually get the credit ""twice"" - once for the archived qutip/qutip-doc repo, and once for the new commit object in here. If anybody was in the habit of signing their commits with a private key, that will have been lost, but the only people that's likely to have affected are me and the GitHub merge bot. It doesn't mean anything in the greater scheme of things, because I've signed the merge commit. (signing is mostly just a way of verifying that the author really was who it says it was). *edit:* I checked, the only two types of signed commits in qutip/qutip-doc are those from me and those from the GitHub bot. Answers:; - I'll migrate all open issues on qutip-doc into the qutip/qutip repository, and tag them with a ""docs"" tag. GitHub has a built-in mechanism to migrate issues.; - We'll archive it, posting a message on the front page of it (or the README if GitHub doesn't have a separate mechanism). We need to leave the repository up and available on the web, because old documentation refers to it in links.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513#issuecomment-830106458:1078,message,message,1078,https://qutip.org,https://github.com/qutip/qutip/pull/1513#issuecomment-830106458,1,['message'],['message']
Integrability,"Yes I will have a look this weekend. On Thu, 1 Jul 2021 at 14:32, Jake Lishman ***@***.***> wrote:. > @Ericgig <https://github.com/Ericgig>: yeah, it's not a perfect naming; > choice. Can you think of a better one? It ended up like that because I; > started off just calling in _qfunc_alpha_matrix, then realised about; > halfway through that I was actually constructing the conjugate of the; > matrix formed by stacking coherent states (since that's how it's used), but; > the name isn't really ideal.; >; > @quantshah <https://github.com/quantshah>: I'm just thinking now you; > might want to have a look at this - you had some thoughts about user; > interfaces for class-based creation schemes last year, with regards to the; > displacement operator, which I'll build up into a proper PR at some point; > as well. Don't worry if you've no time, though.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/1583#issuecomment-872207526>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABVFIBH3GWFKFVFVL4ZBR2DTVRN6VANCNFSM47AL5RKA>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-872210777:653,interface,interfaces,653,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-872210777,1,['interface'],['interfaces']
Integrability,"Yes `multiprocessing` is used by `mcsolve`. If there are issues pickling function, then it will cause errors. I hope that this could be fixed with the function `set_start_method` from `multiprocessing`. In the segfault case, the problematic function call lapack from cython by using scipy interface. So it could be a couple of things. On mac, there is the accelerate blas/lapack implementation which does not have the same interface, so if it links to this, then a segfault would not be surprising. But I can't say for sure.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-596712910:289,interface,interface,289,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-596712910,2,['interface'],['interface']
Integrability,"Yes that would be nice, I've thought about that too, and this question also comes up on the IPython mailing list from time to time, by answer always seems to be that it is not possible for the kernel to know what client interface is used, and that in principle there can be multiple clients (notebook, qtconsole, etc.) connected to it simultanouesly...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/276#issuecomment-66559712:220,interface,interface,220,https://qutip.org,https://github.com/qutip/qutip/pull/276#issuecomment-66559712,1,['interface'],['interface']
Integrability,"Yes, I did the mkl.set_num_threads. This is my test script. ```; import numpy as np; import timeit. NUM_THREADS = 1. try:; import mkl; use_mkl = True; except:; use_mkl = False. def timing(f):; def wrap(*args):; time1 = timeit.default_timer(); ret = f(*args); time2 = timeit.default_timer(); print('{} function took {:0.3f} ms'.format(f.__name__, (time2-time1)*1000.0)); return ret; return wrap. if use_mkl:; mkl.set_num_threads(NUM_THREADS); print(""Number of threads is {}"".format(mkl.get_max_threads())); else:; print(""mkl unavailable""). d = 10000; n_reps = 10; A = np.random.random([d, d]). print(""Starting tests""). @timing; def calc_exp(A):; for i in range(n_reps):; E = np.exp(A). calc_exp(A); ```. Whether I set NUM_THREADS to 1 or 4 I only see one processor active in system monitor, and the processing time is the same. This is what starting me looking into whether I should expect numpy / scipy to use multiple cores. The articles I read suggested that numpy and scipy do not contain any intrinsic parallelisation. It may have been out-of-date. Now I just tried a similar test with scipy.linalg.expm and it did use multiple processors and was approximately twice as fast with 4 than with 1.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/462#issuecomment-207490289:197,wrap,wrap,197,https://qutip.org,https://github.com/qutip/qutip/issues/462#issuecomment-207490289,2,['wrap'],['wrap']
Integrability,"Yes, definitely! I would like to tackle that when with the item list ""Make the interface consistent ...""",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1913#issuecomment-1145099472:79,interface,interface,79,https://qutip.org,https://github.com/qutip/qutip/issues/1913#issuecomment-1145099472,1,['interface'],['interface']
Integrability,"Yes, that also fails, with the same error (on Windows):. `Building module rhs44481 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']`. I just realized that this particular problem is probably just that this Windows VM doesn't have Visual Studio installed (maybe I should try again with the 20GB developer's VM that Microsoft has). So as a user on Windows, having installed QuTiP through Anaconda, I can't do any time propagation? Somehow, I would have thought that having Cython though Anaconda would also come with some compiler like gcc (which is what it seems to be doing on the Mac). Otherwise, that seems like a very limiting factor to any Windows user. There's no way to run QuTiP while preventing it to cythonize time-dependencies, right? That is, aside from workarounds like the one I did here: https://github.com/qucontrol/krotov/blob/247d4066c83ee4923769b934486da9dae95f6879/src/krotov/objectives.py#L175. Anyway, this is likely not really the same issue as the original problem on the Mac.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/932#issuecomment-464148578:759,depend,dependencies,759,https://qutip.org,https://github.com/qutip/qutip/issues/932#issuecomment-464148578,1,['depend'],['dependencies']
Integrability,"Yes, there are some cases where the dense operation is much faster. But there will be others (larger H space) where the sparse routine is faster. And it's not really fair to compare when you don't include the preops in the timeit. It's difficult, but not impossible, for us to tell in the code which situation we are in when make a superop vector multiplication. If we add lots of checks in, then this will slow things too. I think this is similar to #818. If we are going to address this, that is use dense matrix algebra for small systems, then we need to do it comprehensively. As is outlined in #437. I don't think we should make small changes in individual functions, this could make a big mess. I am putting a proposal together for a funding application. I have included work to something like #437. Maybe I will have time before also. You could maybe do something in your HEOM work where you have a `dense_oper` attribute, in which case you use numpy dense operations. I do this in the control modules, where typically the Hamiltonians are small. You can quickly run out of memory though, as the `L` gets very big, esp for `k >> 1`. I tried some tests on this when I was working on it last year.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/831#issuecomment-368958389:127,rout,routine,127,https://qutip.org,https://github.com/qutip/qutip/issues/831#issuecomment-368958389,1,['rout'],['routine']
Integrability,"Yes, we chatted at QTD! :); Today when I do this I do not see a dependence in x on the jump rate, and yes, it is just the formula you gave. I don't quite understand what went wrong yesterday such that I was seeing a dependence on the jump rate. That was on a different computer, so perhaps its time to restart that one.; Emily",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2539#issuecomment-2405574712:64,depend,dependence,64,https://qutip.org,https://github.com/qutip/qutip/issues/2539#issuecomment-2405574712,2,['depend'],['dependence']
Integrability,"Yes, we will add a reference to the your paper with the TLS when I submit a; TLS notebook example.; I think I will just make a simple example for now. And then add the more; involved one that compares the RC method later. Thanks for the explanation on Matsubara terms (I might have to spelling to; correct :). I did not realise they were only referred to as such in the; DL spectral density. I will make some corrections now. On 10 March 2016 at 18:30, nwlambert notifications@github.com wrote:. > This looks great!; > ; > The references are sufficient I guess. We can add some more in the example; > notebook?; > ; > One minor terminology point in the explanation: for the Drude-Lorentz bath; > the correlation functions can be exactly analytically expressed as an; > infinite sum of exponentials which depend on the temperature, and these are; > called the Matsubara terms or Matsubara frequencies.; > ; > In general, when not dealing with a Drude-Lorentz bath, or something; > similar, we have to approximate the correlation functions by numerically; > fitting them to exponentials, but in that case they don't have any; > particular name I guess. When we get around to adding it as an option, lets; > call them Fruchtman terms, as it was Amir Fruchtman who told me to try; > doing it that way!; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/qutip/qutip/pull/455#issuecomment-194752885.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455#issuecomment-194776953:804,depend,depend,804,https://qutip.org,https://github.com/qutip/qutip/pull/455#issuecomment-194776953,1,['depend'],['depend']
Integrability,"You can directly call the `expm()` method on the individual `Qobj` parts you have, but I'm slightly confused as to what mathematical operation you're representing. The time-dependent list format represents the sum of several objects, and in general `exp(A + B)` isn't the same as `exp(A) + exp(B)` or `exp(A) * exp(B)`, which is why we don't have an `expm()` method for it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1308#issuecomment-654284886:173,depend,dependent,173,https://qutip.org,https://github.com/qutip/qutip/issues/1308#issuecomment-654284886,1,['depend'],['dependent']
Integrability,"You can ignore warnings with:; `@pytest.mark.filterwarnings(""ignore:The input coordinates to pcolor:UserWarning"")`; The `The input coordinates to pcolor` is the start of the warning message. ; `UserWarning` is the kind of warnings.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2192#issuecomment-1634395932:182,message,message,182,https://qutip.org,https://github.com/qutip/qutip/pull/2192#issuecomment-1634395932,1,['message'],['message']
Integrability,"You have a couple of ways of going about this. The simplest is to use the callback form of `e_ops` - you make a single function which looks like; ```python; def e_op(t, state):; # [...]; return expectation; ```; where `t` is the time and `state` is a `Qobj`. You can return whatever you like here, really, so you can return a tuple of values if you want to track more than one. If you do this, then you do; ```python; result = qutip.sesolve(H, psi0, times, e_ops=e_op); ```; and `result.expect` is a list of the same length as `times`, where `result.expect[k]` is the output of your function at a time `times[k]` (note that this is a slightly different output format to the normal method). Alternatively, you can do the calculation yourself without too much difficulty if your observables can be put in the form `A(t) = sum_k f_k(t) A_k`, like your example here. Because the expectation is a linear operation `expect(A(t), psi(t)) = sum_k f_k(t) expect(A_k, psi(t))`, so you can pass the list of `A_k` to `sesolve` and then just calculate the time-dependent coefficients yourself afterwards and add them up. This will generally be faster than the previous method, but it's more complicated to do.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1364#issuecomment-699652426:1048,depend,dependent,1048,https://qutip.org,https://github.com/qutip/qutip/issues/1364#issuecomment-699652426,1,['depend'],['dependent']
Integrability,"You have my approval for most of it. The approach of using `preprocessors` and `processors` fells overkill for use that I have, but I don't see any reason it wouldn't work. If you need it for HEOM, let's go for it. I don't like having expect being a dict. I was actually thinking of going with supporting the 3 cases, at least for the output. If we keep `expect` as a property, the format change can be done only there and we can keep it in another format, dict or list, inside. Simplifying `_post_init` will be tricky, normalization does not depend only on the option, but also the state... We could have `Solver.run` call `add_preprocessor` to add the normalization function, but them it would make it harder for HEOM to call.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1140082568:543,depend,depend,543,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1140082568,1,['depend'],['depend']
Integrability,"You must have some other package installed that's conflicting with QuTiP somehow - our dependencies are pretty lax. We only ask for Numpy >= 1.16.6 and Scipy >= 1.0 as hard dependencies (with no upper bounds), and both of those versions are old. Good to know it's fixed now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1634#issuecomment-895828645:87,depend,dependencies,87,https://qutip.org,https://github.com/qutip/qutip/issues/1634#issuecomment-895828645,2,['depend'],['dependencies']
Integrability,"You're trying to plot a Hamiltonian with a principle frequency of ~32 GHz, and you want to scan time over ~3ms. That involves integrating over 5 million periods of oscillation - there's little you can do to get a sensible runtime any more because you're evolving it for so long. You might want to make a frame transformation in your Hamiltonian and make a rotating-wave approximation to suppress these very high-frequency terms.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1376#issuecomment-721217434:126,integrat,integrating,126,https://qutip.org,https://github.com/qutip/qutip/issues/1376#issuecomment-721217434,1,['integrat'],['integrating']
Integrability,[![Coverage Status](https://coveralls.io/builds/40227940/badge)](https://coveralls.io/builds/40227940). Coverage increased (+0.01%) to 64.941% when pulling **78983f00acb67892bd75a66a380d5d46018e1e7c on dependabot/pip/doc/urllib3-1.26.5** into **acb6cfe23f951673b8f4bcba7ea0b7a62b1e6305 on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1563#issuecomment-852728895:202,depend,dependabot,202,https://qutip.org,https://github.com/qutip/qutip/pull/1563#issuecomment-852728895,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/42716719/badge)](https://coveralls.io/builds/42716719). Coverage increased (+0.03%) to 65.763% when pulling **f3580f770b5bc3f67b54ce90cfc7dbd1551b5960 on dependabot/pip/doc/pillow-8.3.2** into **cd525d1392bb764716a2278b3c7c0c3fdf6c64c4 on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654#issuecomment-914888716:202,depend,dependabot,202,https://qutip.org,https://github.com/qutip/qutip/pull/1654#issuecomment-914888716,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/43279924/badge)](https://coveralls.io/builds/43279924). Coverage increased (+0.2%) to 65.124% when pulling **ac8e9d40d23d253173918a2d353d47f23abdf633 on Ericgig:integrators** into **f8ed1be97946171ae8ba9242673cf2674430da56 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-920331445:209,integrat,integrators,209,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-920331445,1,['integrat'],['integrators']
Integrability,[![Coverage Status](https://coveralls.io/builds/44101627/badge)](https://coveralls.io/builds/44101627). Coverage increased (+0.3%) to 65.437% when pulling **af38507293a5f1465f01682e0c34f1499b21f377 on Ericgig:solver.integrator** into **9395b959fd308afc1bf2087171f3e83f6d3387e4 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1700#issuecomment-953871052:216,integrat,integrator,216,https://qutip.org,https://github.com/qutip/qutip/pull/1700#issuecomment-953871052,1,['integrat'],['integrator']
Integrability,[![Coverage Status](https://coveralls.io/builds/44887329/badge)](https://coveralls.io/builds/44887329). Coverage remained the same at 65.525% when pulling **d3a5c6e3ebb43afa0c2eb7b2456c886cb9651bd1 on Ericgig:safe.integrator** into **298316b4f034f467788943015b3277bf88f3fc9b on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1734#issuecomment-989070040:214,integrat,integrator,214,https://qutip.org,https://github.com/qutip/qutip/pull/1734#issuecomment-989070040,1,['integrat'],['integrator']
Integrability,[![Coverage Status](https://coveralls.io/builds/45587435/badge)](https://coveralls.io/builds/45587435). Coverage increased (+0.03%) to 68.299% when pulling **40b7e86b40587898a89fc9ea58804b9795170954 on dependabot/pip/doc/pillow-9.0.0** into **52d01da181a21b810c3407812c670f35fdc647e8 on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760#issuecomment-1011788891:202,depend,dependabot,202,https://qutip.org,https://github.com/qutip/qutip/pull/1760#issuecomment-1011788891,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/45687437/badge)](https://coveralls.io/builds/45687437). Coverage increased (+0.01%) to 68.312% when pulling **6c252fbd33c8d7bad1816b72174c68dc9754e72e on dependabot/pip/doc/numpy-1.21.0** into **0ecb9612299c0c5105bf09972279efa7cb9c41be on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767#issuecomment-1014718223:202,depend,dependabot,202,https://qutip.org,https://github.com/qutip/qutip/pull/1767#issuecomment-1014718223,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/45840885/badge)](https://coveralls.io/builds/45840885). Coverage decreased (-0.008%) to 68.361% when pulling **7f3841f1f2d48cdfe7c7453eec6f966be8efc07d on dependabot/pip/doc/ipython-7.31.1** into **d4013031734790bac919344bcb8c1d462e364ea8 on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1780#issuecomment-1018846737:203,depend,dependabot,203,https://qutip.org,https://github.com/qutip/qutip/pull/1780#issuecomment-1018846737,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/47299519/badge)](https://coveralls.io/builds/47299519). Coverage decreased (-0.02%) to 68.991% when pulling **6b2bb1c46f8466e3b624ae7bacc844315403fe79 on dependabot/pip/doc/pillow-9.0.1** into **b65aebe0f18e401461a5dc3d7a387129709cb346 on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1835#issuecomment-1065786929:202,depend,dependabot,202,https://qutip.org,https://github.com/qutip/qutip/pull/1835#issuecomment-1065786929,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/48544268/badge)](https://coveralls.io/builds/48544268). Coverage increased (+0.02%) to 65.506% when pulling **eaae9c110b5c9a78169db01ff213b1b4b04a0043 on Ericgig:integrator.step.fix** into **539e2e4bcd730894dffaec8cd2e0ac9b72efef77 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1880#issuecomment-1108857030:210,integrat,integrator,210,https://qutip.org,https://github.com/qutip/qutip/pull/1880#issuecomment-1108857030,1,['integrat'],['integrator']
Integrability,[![Coverage Status](https://coveralls.io/builds/48593127/badge)](https://coveralls.io/builds/48593127). Coverage increased (+1.4%) to 67.07% when pulling **ec1c71c02f434b2d56fad69a8db2069f22a6b9bf on Ericgig:integrators.verner** into **414c5eccd2263a5607bf9f57b3b73381ea377504 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1644#issuecomment-953951326:208,integrat,integrators,208,https://qutip.org,https://github.com/qutip/qutip/pull/1644#issuecomment-953951326,1,['integrat'],['integrators']
Integrability,[![Coverage Status](https://coveralls.io/builds/50428231/badge)](https://coveralls.io/builds/50428231). Coverage remained the same at 69.935% when pulling **0fc3959863deb2276ba438402ce736f9526f7273 on dependabot/pip/doc/numpy-1.22.0** into **74257755d87259b94caae3dc352e3ff55930e0c1 on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1940#issuecomment-1168876318:201,depend,dependabot,201,https://qutip.org,https://github.com/qutip/qutip/pull/1940#issuecomment-1168876318,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/51767419/badge)](https://coveralls.io/builds/51767419). Coverage decreased (-0.004%) to 71.553% when pulling **181f9f6ab878ce73257b4a7ef149a953a369a647 on Ericgig:random.interface** into **bc9b27f09086b0a066f6d9ddb2fb04739224624a on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1976#issuecomment-1218243721:218,interface,interface,218,https://qutip.org,https://github.com/qutip/qutip/pull/1976#issuecomment-1218243721,1,['interface'],['interface']
Integrability,[![Coverage Status](https://coveralls.io/builds/54454836/badge)](https://coveralls.io/builds/54454836). Coverage increased (+0.02%) to 69.94% when pulling **c00b13fd99d4f847e0d768c06cfc2f0c52bedf92 on dependabot/pip/doc/pillow-9.3.0** into **b29ca42b9931f029a8d1aa278c4ac75366c81a1a on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023#issuecomment-1323508204:201,depend,dependabot,201,https://qutip.org,https://github.com/qutip/qutip/pull/2023#issuecomment-1323508204,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/55196508/badge)](https://coveralls.io/builds/55196508). Coverage decreased (-0.2%) to 72.452% when pulling **c26257095ae5d7c9f6fd69c04bcc2206ab76c581 on Ericgig:krylov.integrator** into **a0ca511e15f2edb4d707096e74341a89d7a9d442 on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1986#issuecomment-1228914050:216,integrat,integrator,216,https://qutip.org,https://github.com/qutip/qutip/pull/1986#issuecomment-1228914050,1,['integrat'],['integrator']
Integrability,[![Coverage Status](https://coveralls.io/builds/56839207/badge)](https://coveralls.io/builds/56839207). Coverage: 72.029%. Remained the same when pulling **b11d87127b60feaded72a1ac8261837ab5a954ff on dependabot/pip/doc/ipython-8.10.0** into **6da3fc2b87406053389e11ff68e8308e87b352e4 on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085#issuecomment-1426556497:200,depend,dependabot,200,https://qutip.org,https://github.com/qutip/qutip/pull/2085#issuecomment-1426556497,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/60213413/badge)](https://coveralls.io/builds/60213413). Coverage: 78.092%. Remained the same when pulling **e3d45a55eb8e28845301c9d507742a6dcd87c20f on dependabot/pip/doc/requests-2.31.0** into **7892453dd3ae03ce8ac17caffc0457df200a69ec on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164#issuecomment-1558641653:200,depend,dependabot,200,https://qutip.org,https://github.com/qutip/qutip/pull/2164#issuecomment-1558641653,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/61470251/badge)](https://coveralls.io/builds/61470251). coverage: 84.621%. remained the same when pulling **2e9d45226f7ecd367475624f5fe0e049973f7b35 on dependabot/pip/doc/pygments-2.15.0** into **efd39be22db0536ef0680547a6631a4f9156b922 on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2201#issuecomment-1643899196:200,depend,dependabot,200,https://qutip.org,https://github.com/qutip/qutip/pull/2201#issuecomment-1643899196,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/65026523/badge)](https://coveralls.io/builds/65026523). coverage: 84.185%. first build; when pulling **60ba0a25798e27b0be550158e789850136c1b45a on dependabot/pip/doc/jinja2-3.1.3**; into **e7853099194686cfb11ce7620639a78121e964dd on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2291#issuecomment-1887970000:195,depend,dependabot,195,https://qutip.org,https://github.com/qutip/qutip/pull/2291#issuecomment-1887970000,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/66694701/badge)](https://coveralls.io/builds/66694701). coverage: 86.07% (+0.03%) from 86.039%; when pulling **f09cf77ec1f8fbadc692e37cce8173a84bc7847c on dependabot/pip/doc/pillow-10.3.0**; into **5d6dc220c910b7c7bf824aba5bc05fbbfa54f017 on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381#issuecomment-2035531513:203,depend,dependabot,203,https://qutip.org,https://github.com/qutip/qutip/pull/2381#issuecomment-2035531513,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/66870601/badge)](https://coveralls.io/builds/66870601). coverage: 86.048%. remained the same; when pulling **f6f539cd443a0c3afa5b148092542ece70672eac on dependabot/pip/doc/idna-3.7**; into **8035590df7ebde21bb34fcaadc63bea2d0c6e192 on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392#issuecomment-2050867182:201,depend,dependabot,201,https://qutip.org,https://github.com/qutip/qutip/pull/2392#issuecomment-2050867182,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/67331867/badge)](https://coveralls.io/builds/67331867). coverage: 86.09%. remained the same; when pulling **cd85b13838714b55b18b7471d9ba9885be47d55f on dependabot/pip/doc/jinja2-3.1.4**; into **b6ed047def88f220318cb6337a4cfbf59971ce72 on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2418#issuecomment-2096947774:200,depend,dependabot,200,https://qutip.org,https://github.com/qutip/qutip/pull/2418#issuecomment-2096947774,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/67603901/badge)](https://coveralls.io/builds/67603901). coverage: 86.266%. remained the same; when pulling **0bbe13562c4c4f43d9f229b3654810d6ad080e3c on dependabot/pip/doc/requests-2.32.0**; into **ec617416dd4294fd97f08261dd508c032be84787 on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434#issuecomment-2121810266:201,depend,dependabot,201,https://qutip.org,https://github.com/qutip/qutip/pull/2434#issuecomment-2121810266,1,['depend'],['dependabot']
Integrability,[![Coverage Status](https://coveralls.io/builds/68491593/badge)](https://coveralls.io/builds/68491593). coverage: 85.104% (+0.007%) from 85.097%; when pulling **03b6f7e3e739836b1b0c8f6a797b94b87db64e3c on dependabot/pip/doc/certifi-2024.7.4**; into **4f34877035d9ec8ecd3ad3675260c9f06b09ec79 on master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2483#issuecomment-2211556415:205,depend,dependabot,205,https://qutip.org,https://github.com/qutip/qutip/pull/2483#issuecomment-2211556415,1,['depend'],['dependabot']
Integrability,"[0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op; > + )[0]; >; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245592358>:; >; > > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense; > + ); >; > ⬇️ Suggested change; >; > - solver_instance = FLiMESolver(; > - floquet_basis,; > - c_ops,; > - args,; > - time_sense=time_sense; > - ); > + solver_instance = FLiMESolver(; > + floquet_basis,; > + c_ops,; > + args,; > + time_sense=time_sense,; > + options=options,; > + ); >; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245594985>:; >; > > @@ -929,4 +930,5 @@ def run(self, state0, tlist, *, floquet=False, args=None, e_ops=None):; > stats[""run time""] = progress_bar.total_time(); > # TODO: It would be nice if integrator could give evolution statistics; > # stats.update(_integrator.stats); > +; >; > Why a new empty line here?; > ------------------------------; >; > In qutip/solver/floquet.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245604228>:; >; > > + self.evecs = _data.permute.indices(; > + evecs, col_perm=np.argsort(perm)); >; > This file already has black ran on it and the style is ok as is.; > (But I just learned that black exclude the newline in it's character count; > while pycodestyle include it.); > Since it's not the main part of your PR, please revert it to it's original; > state.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245610200>:; >; > > + total_R_tensor[key] += np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + except KeyError:; > + total_R_tensor[key] = np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTer",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:2879,integrat,integrator,2879,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['integrat'],['integrator']
Integrability,"[command] = 1. ~/opt/anaconda3/lib/python3.7/site-packages/Cython/Distutils/old_build_ext.py in run(self); 185 ; --> 186 _build_ext.build_ext.run(self); 187 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in run(self); 339 # Now actually compile and link everything.; --> 340 self.build_extensions(); 341 . ~/opt/anaconda3/lib/python3.7/site-packages/Cython/Distutils/old_build_ext.py in build_extensions(self); 194 # Call original build_extensions; --> 195 _build_ext.build_ext.build_extensions(self); 196 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in build_extensions(self); 448 else:; --> 449 self._build_extensions_serial(); 450 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in _build_extensions_serial(self); 473 with self._filter_build_errors(ext):; --> 474 self.build_extension(ext); 475 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in build_extension(self, ext); 533 extra_postargs=extra_args,; --> 534 depends=ext.depends); 535 . ~/opt/anaconda3/lib/python3.7/distutils/ccompiler.py in compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends); 573 continue; --> 574 self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts); 575 . ~/opt/anaconda3/lib/python3.7/distutils/unixccompiler.py in _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts); 119 except DistutilsExecError as msg:; --> 120 raise CompileError(msg); 121 . CompileError: command 'gcc' terminated by signal 6. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call last); ~/opt/anaconda3/lib/python3.7/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 79 import_code = compile(codeString, '<string>', 'exec'); ---> 80 exec(import_code, locals()); 81 except (ModuleNotFoundError, ImportError) as e:. <string> in <module>. ~/opt/anaconda3/lib/python3.7/site-packages/pyximport/pyximport.py in lo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290:4287,depend,depends,4287,https://qutip.org,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290,1,['depend'],['depends']
Integrability,"[command] = 1. ~/opt/anaconda3/lib/python3.7/site-packages/Cython/Distutils/old_build_ext.py in run(self); 185 ; --> 186 _build_ext.build_ext.run(self); 187 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in run(self); 339 # Now actually compile and link everything.; --> 340 self.build_extensions(); 341 . ~/opt/anaconda3/lib/python3.7/site-packages/Cython/Distutils/old_build_ext.py in build_extensions(self); 194 # Call original build_extensions; --> 195 _build_ext.build_ext.build_extensions(self); 196 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in build_extensions(self); 448 else:; --> 449 self._build_extensions_serial(); 450 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in _build_extensions_serial(self); 473 with self._filter_build_errors(ext):; --> 474 self.build_extension(ext); 475 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in build_extension(self, ext); 533 extra_postargs=extra_args,; --> 534 depends=ext.depends); 535 . ~/opt/anaconda3/lib/python3.7/distutils/ccompiler.py in compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends); 573 continue; --> 574 self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts); 575 . ~/opt/anaconda3/lib/python3.7/distutils/unixccompiler.py in _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts); 119 except DistutilsExecError as msg:; --> 120 raise CompileError(msg); 121 . ImportError: Building module cqobjevo_compiled_coeff_1212362029172 failed: [""distutils.errors.CompileError: command 'gcc' terminated by signal 6\n""]. The above exception was the direct cause of the following exception:. Exception Traceback (most recent call last); <ipython-input-4-773196c7ecc9> in <module>; 6 U_list = []; 7 for (i,t) in enumerate(t_list):; ----> 8 U = propagator(H,t, [], args); 9 U_list.append(U); 10 print(i). ~/opt/anaconda3/lib/python3.7/site-packages/qutip/propagator.py in propagator(H, t, c_op_list, args, opti",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290:7879,depend,depends,7879,https://qutip.org,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290,1,['depend'],['depends']
Integrability,"] or callable that; > + can be made into :class:`QobjEvo` are also accepted.; > +; > + rho0 / psi0 : :class:`qutip.Qobj`; > + Initial density matrix or state vector (ket).; > +; > + Taulist:*list* / *array*; > + List of times for :math:`t`.; > +; > + T : float; > + The period of the time-dependence of the hamiltonian.; > +; > + c_ops_and_rates : list of :class:`qutip.Qobj`.; > + List of lists of [collapse operator,collapse operator rate] pairs; >; > ⬇️ Suggested change; >; > - List of lists of [collapse operator,collapse operator rate] pairs; > + List of lists of [collapse operator, collapse operator rate] pairs; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245611168>:; >; > > +; > + e_ops : list of :class:`qutip.Qobj` / callback function; > + List of operators for which to evaluate expectation values.; > + The states are reverted to the lab basis before applying the; > +; > + args : *dictionary*; > + Dictionary of parameters for time-dependent Hamiltonian; > +; > + time_sense : float; > + Experimental. Value of the secular approximation (in terms of system; > + frequency 2*np.pi/T) to use when constructing the rate matrix R(t).; > + Default value of zero uses the fully time-independent/most strict; > + secular approximation.; > +; > + quicksolve: Boolean; > + True to use the quicksolve method,which utilizes the most strict; >; > ⬇️ Suggested change; >; > - True to use the quicksolve method,which utilizes the most strict; > + True to use the quicksolve method, which utilizes the most strict; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245613247>:; >; > > + IVP solvers. Can be overridden if desired (e.g. for; > + debuggin/troubleshooting).; >; > With overwrite you mean using quicksolve with non-zero time_sense?; > If so, how to overwrite it?; > ⬇️ Suggested change; >; > - IVP solvers. Can be overridd",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:6170,depend,dependent,6170,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['depend'],['dependent']
Integrability,"_**edit to put the positivity up top!**_: This is a very exciting prospect to me, and I'm always happy when other libraries want to interact with QuTiP! In the interests of inciting more discussion, I've got thrown in some more discussion points below - I'm 100% sure they're all solvable, but it also seems like there isn't one way that's unambiguously correct to do them, so they're worth discussing. ---. In principle I'm happy to implement this, though I don't really agree with your assertion that `othertype.toqobj()` is bad style! It might be so in Julia, but Python doesn't have all the same multiple-dispatch niceties that Julia has, so at the end of the day, we have to add in a method with a ""magic"" name somewhere, and it all just comes down to choosing the name of the method. The downside to having a magic name is that it means we have to eschew proper namespacing; what if another library one day wants to call their interface the same thing? Then it's completely impossible for a downstream library to interoperate with both. Having conversions be a non-special method of the downstream class, and leaving our constructor unaware of them alleviates that issue. Numpy can get away with squatting the `__array__` name because they're _huge_, but I would argue that if we do it, we could actually _harm_ the quantum software ecosystem in the long-run - what happens when a package better than QuTiP comes along that wants to call its objects `Qobj` as well? Let's face it - it's a pretty straightforward name!. All that said, I am very aware that not everyone agrees with me on this, and I _am_ a big fan of interfaces. Python doesn't give us the tools to do it properly, but we can emulate it, like you suggest. I have a few more considerations to add to a discussion:. 1. we can't have _proper_ namespacing, but let's at least make the magic name `__qutip_qobj__` so we realistically prevent any chance of a clash - by nature of a centralised package manager, we can be sure that no ot",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:933,interface,interface,933,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['interface'],['interface']
Integrability,"`--config-setting=""--global-option=--with-openmp""` gives a build error (qutip 4.7.0, debian unstable, python 3.10.6):; ```; $ python3.10 -m build --skip-dependency-check --no-isolation --wheel --config-setting=""--global-option=--with-openmp""; * Building wheel...; Traceback (most recent call last):; File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 363, in <module>; main(); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 345, in main; json_out['return_val'] = hook(**hook_input['kwargs']); File ""/usr/lib/python3/dist-packages/pep517/in_process/_in_process.py"", line 261, in build_wheel; return _build_backend().build_wheel(wheel_directory, config_settings,; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 230, in build_wheel; return self._build_with_temp_dir(['bdist_wheel'], '.whl',; File ""/usr/lib/python3/dist-packages/setuptools/build_meta.py"", line 211, in _build_with_temp_dir; sys.argv = (sys.argv[:1] + setup_command +; TypeError: can only concatenate list (not ""str"") to list. ERROR Backend subproccess exited when trying to invoke build_wheel; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1978#issuecomment-1219844355:153,depend,dependency-check,153,https://qutip.org,https://github.com/qutip/qutip/pull/1978#issuecomment-1219844355,1,['depend'],['dependency-check']
Integrability,"`[]` is a list while 'identity' is function, so they will invoke two different type of time-dependent functions (list-string or list-function type or function callback type, respectively). `rhs_reuse` only applies to the list-string type, so it should only affect the first type of call to `mesolve`. It might be that we have a bug in handing of empty lists as first argument to mesolve, I will look into that. Regarding `rhs_reuse` it can behave a bit differently in a script and the notebook because a notebook is one long-running python process, so the state of `rhs_reuse` might be retained from one call to `mesolve` to another, while a script would get reset between successive calls (runs of the script). I guess this is the reason for the backtrace error you show. Note that you cannot use `rhs_reuse` with successive calls to `mesolve` if you change the function signature. If this is not the case, then it would be useful with a small minimum example (script or notebook) that reproduces the error. ps.. In your second use-case you qouted `mesolve(identity, ..)`. In this case I would rather use `mesolve(identity(), ..)`, so that the first argument is a `Qobj` instance rather than the function that returns one.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/123#issuecomment-42158885:92,depend,dependent,92,https://qutip.org,https://github.com/qutip/qutip/issues/123#issuecomment-42158885,1,['depend'],['dependent']
Integrability,"``; import qutip as qt; import numpy as np; import qutip_jax; import jax; from math import pi; from diffrax import diffeqsolve, ODETerm, Dopri5, PIDController; sequence = np.linspace(0, 100, 100); wq = 2. * 2 * pi; g = 0.05 * 2 * pi. with qt.CoreOptions(default_dtype=""jaxdia""):; H0 = -0.5 * 2. * qt.sigmaz() + g * qt.sigmax(); H = [H0, [-0.5 * qt.sigmaz(), sequence]]; psi0 = qt.basis(2, 0); psi1 = qt.basis(2, 1); proj0 = psi0 @ psi0.dag(); proj1 = psi1 @ psi1.dag(); expect_ops = [proj1]; times = np.linspace(0, 100, 100); psi_init = psi1; options = {; ""method"": ""diffrax"", ; ""normalize_output"": False,; ""stepsize_controller"" : PIDController(rtol=1e-5, atol=1e-5),; ""solver"": Dopri5(); }; # result = mesolve(H, psi_init, times, e_ops=expect_ops); result = mesolve(H, psi_init, times, e_ops=expect_ops, options=options); ```; And this will give:; ```; TypeError Traceback (most recent call last); [<ipython-input-63-2fb6110bc952>](https://localhost:8080/#) in <cell line: 21>(); 19 }; 20 # result = mesolve(H, psi_init, times, e_ops=expect_ops); ---> 21 result = mesolve(H, psi_init, times, e_ops=expect_ops, options=options). 20 frames; [... skipping hidden 15 frame]. [... skipping hidden 1 frame]. [... skipping hidden 14 frame]. [... skipping hidden 1 frame]. [... skipping hidden 9 frame]. [... skipping hidden 2 frame]. [... skipping hidden 1 frame]. [... skipping hidden 1 frame]. [... skipping hidden 5 frame]. [/usr/local/lib/python3.10/site-packages/jax/_src/api_util.py](https://localhost:8080/#) in _shaped_abstractify_slow(x); 586 dtype = dtypes.canonicalize_dtype(x.dtype, allow_extended_dtype=True); 587 else:; --> 588 raise TypeError(; 589 f""Cannot interpret value of type {type(x)} as an abstract array; it ""; 590 ""does not have a dtype attribute""). TypeError: Cannot interpret value of type <class 'qutip.core.cy.coefficient.InterCoefficient'> as an abstract array; it does not have a dtype attribute; ```; Any other way we can solve the evolution with time-dependent Hamiltonian?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2320#issuecomment-2092884561:2104,depend,dependent,2104,https://qutip.org,https://github.com/qutip/qutip/issues/2320#issuecomment-2092884561,1,['depend'],['dependent']
Integrability,"```python; jake@tauros$ python; Python 3.7.7 (default, May 6 2020, 04:59:01); [Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import qutip; /Users/jake/.anaconda3/anaconda3/envs/qutip-dev/lib/python3.7/site-packages/setuptools/distutils_patch.py:26: UserWarning: Distutils was imported before Setuptools. This usage is discouraged and may exhibit undesirable behaviors or errors. Please use Setuptools' objects directly or at least import Setuptools first.; ""Distutils was imported before Setuptools. This usage is discouraged ""; >>>; ```. It was caused by the original coefficients PR. Could be interplay between `pyximport` and the later import of `setuptools`, but I'm not sure (definitely the import of `setuptools` in `core/coefficient.py` is what actually triggers the warning, but I'm not sure when `distutils` is imported). I don't think you _need_ `setuptools` (which is also causing the `build` directories) - I think you can use importlib to import the result of `cythonize` directly?. At any rate, it would be very good to drop the `pyximport` dependency from BR too.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1351#issuecomment-680183199:1152,depend,dependency,1152,https://qutip.org,https://github.com/qutip/qutip/pull/1351#issuecomment-680183199,1,['depend'],['dependency']
Integrability,"`mesolve` super efficiently, though maybe it's only because of simplifications to make a MWE. For example, if your controls are piecewise constant, then it might be inefficient to represent those terms as ""time dependent""; doing so means you incur the cost of multiplying each term by a scalar at every intermediate step the integrator chooses to take, then you have to perform the matrix-vector product for each one individually and add them up. It might be faster already if you evaluate the piecewise varying parts into one ""constant"" part at each point. This isn't guaranteed, because it involves copying rather more data _before_ the call (to construct the constant matrix once), but if the integrator would need to take many intermediate time steps, I expect it would win out. Would something like this work for you?; ```python; times = [0, ...]; # Liouvillians for parts you have control over; control_liouvillians = [qutip.liouvillian(h) for h in control_hamiltonians]; # The time-dependent Hamiltonian for stuff you're not controlling; base_hamiltonian = qutip.QobjEvo([H0, [H1, time_dependence], ...]); # Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately, you've already done most of its setup, so the time penalties ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:1100,depend,dependent,1100,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['depend'],['dependent']
Integrability,"`pdf2svg` isn't part of ImageMagick, (at least on `brew`) is http://www.cityinthesky.co.uk/opensource/pdf2svg. It feels like all of these system commands should be made a bit more robust. In particular, the bare `os.system` is not the recommended way of calling out to system commands any more. It's now preferable to use [`subprocess.run`](https://docs.python.org/3/library/subprocess.html#subprocess.run). Here, the bug is, I would assume, actually on the previous line:; ```python; os.system('command_which_does_not_exist'); ```; will return a non-zero error code which isn't checked for, but will not raise an exception. . If Jupyter supports displaying embedded PDF files and that's all it's being used for, then it might be worth removing the conversion to SVG. (pdf)LaTeX certainly supports embedded PDF files as graphics. The fewer little dependencies we require, the better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1185#issuecomment-593375737:847,depend,dependencies,847,https://qutip.org,https://github.com/qutip/qutip/issues/1185#issuecomment-593375737,1,['depend'],['dependencies']
Integrability,"`requirements.txt` has no special meaning at all so it doesn't really matter, but typically it's used for runtime, not build time, so it doesn't need `setuptools` or `wheel`. `packaging` is required at both, but I had actually thought it was a dependency of `setuptools`. Still, we use it explicitly, so best add it. The actual main source-of-truth runtime requirements are in `setup.cfg`, and the build requirements are in `pyproject.toml`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1715#issuecomment-973109892:244,depend,dependency,244,https://qutip.org,https://github.com/qutip/qutip/pull/1715#issuecomment-973109892,1,['depend'],['dependency']
Integrability,"`result.measurement` is not the same as `result.expect`, the measurement is an expectation value, but not of the `e_ops` but `m_ops` which are usually automatically generated from the `c_ops` and noise is added to the computed expectation value of the state of the trajectory. The noise is usually larger than the signal and makes it hard to see, but it should converge to mesolve's solution eventually. `smesolve`'s `expect` are just the expectation value of the state of each trajectories (averaged or not depending on options) and should average to the master equation solutions with enough trajectories. Plot in cell 8 show the match is quite good. Even with enough trajectories, the numerical error from `smesolve` will be visible. The equation solved are those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194#issuecomment-1634520926:508,depend,depending,508,https://qutip.org,https://github.com/qutip/qutip/issues/2194#issuecomment-1634520926,2,"['depend', 'integrat']","['depending', 'integration']"
Integrability,`rhs_**.pyx` or `cqobjevo_compiled_coeff_**.pyx` are cython compiled function for string-format time-dependent systems.; `rhs_**.pyx` create a function for the right hand side (rhs) of the equation solved by the solver. It's now mostly used in `brmesolve`. `cqobjevo_compiled_coeff_**.pyx` is used in `QobjEvo` with string coefficient. . Which version are you using?; `QobjEvo` should not be found in `Results` and `QobjEvo` can be pickle in recent version...,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1684#issuecomment-933439082:101,depend,dependent,101,https://qutip.org,https://github.com/qutip/qutip/issues/1684#issuecomment-933439082,1,['depend'],['dependent']
Integrability,"`stage_linux_38: &stage_linux_38` define what to do in the test, but does not run it. This addition tell travis to run the test. When I defined the test, 3.8 just came out and there were missing dependencies. We still have no automated test running on 3.8. I am merging this and will make another PR to move other tests from 3.7 to 3.8.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1170#issuecomment-602619137:195,depend,dependencies,195,https://qutip.org,https://github.com/qutip/qutip/pull/1170#issuecomment-602619137,1,['depend'],['dependencies']
Integrability,"`steadystate` does not support time dependent Hamiltonian. It sees that H is a list, not a Qobj, then fails.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1377#issuecomment-721752193:36,depend,dependent,36,https://qutip.org,https://github.com/qutip/qutip/issues/1377#issuecomment-721752193,1,['depend'],['dependent']
Integrability,"`svd` is used by `steadystate`. There are no method in common between `Dense` and `CSR`, the default is `solve` for `Dense`, but `spsolve` for `CSR`. All iterative methods are only available in `sparse.linalg`... So we cannot pass it anywhere thus I think it won't be hard to remember. If we want to have the default change depending on whether we have mkl or not, we could read the default method from core's settings.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2002#issuecomment-1267059737:324,depend,depending,324,https://qutip.org,https://github.com/qutip/qutip/pull/2002#issuecomment-1267059737,1,['depend'],['depending']
Integrability,"a maintainer of QuTiP. And it; > seems that there is no way to make a PR to Wiki. I can also send you the; > markdown source code per email like this, but I’m not sure if it works as I; > expected.; >; > The following is the markdown source code:; >; > -----------------------------------; > ## 1. Error mitigation in QuTiP; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class `Processor` and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > `qutip.qip.noise` to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (`qutip.qip.circuit`). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Requests.; >; > ### Expected outcomes; > - More devices defined in the `qutip.qip.device` module. At the moment, we; > have two models: spin chain and cavity QED. We would like to include some; > other commonly used planform such as Superconducting system, Ion trap; > system or silicon system. Each model will need a new set of control; > hamiltonian and a compiler that find the control pulse of a quantum gate.; > This part is gonna involve some physics and study of commonly used ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:1651,integrat,integration,1651,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['integrat'],['integration']
Integrability,"alized(); --> 985 cmd_obj.run(); 986 self.have_run[command] = 1. ~/opt/anaconda3/lib/python3.7/site-packages/Cython/Distutils/old_build_ext.py in run(self); 185 ; --> 186 _build_ext.build_ext.run(self); 187 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in run(self); 339 # Now actually compile and link everything.; --> 340 self.build_extensions(); 341 . ~/opt/anaconda3/lib/python3.7/site-packages/Cython/Distutils/old_build_ext.py in build_extensions(self); 194 # Call original build_extensions; --> 195 _build_ext.build_ext.build_extensions(self); 196 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in build_extensions(self); 448 else:; --> 449 self._build_extensions_serial(); 450 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in _build_extensions_serial(self); 473 with self._filter_build_errors(ext):; --> 474 self.build_extension(ext); 475 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in build_extension(self, ext); 533 extra_postargs=extra_args,; --> 534 depends=ext.depends); 535 . ~/opt/anaconda3/lib/python3.7/distutils/ccompiler.py in compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends); 573 continue; --> 574 self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts); 575 . ~/opt/anaconda3/lib/python3.7/distutils/unixccompiler.py in _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts); 119 except DistutilsExecError as msg:; --> 120 raise CompileError(msg); 121 . CompileError: command 'gcc' terminated by signal 6. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call last); ~/opt/anaconda3/lib/python3.7/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 79 import_code = compile(codeString, '<string>', 'exec'); ---> 80 exec(import_code, locals()); 81 except (ModuleNotFoundError, ImportError) as e:. <string> in <module>. ~/opt/anaconda3/lib/p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290:4275,depend,depends,4275,https://qutip.org,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290,1,['depend'],['depends']
Integrability,"alized(); --> 985 cmd_obj.run(); 986 self.have_run[command] = 1. ~/opt/anaconda3/lib/python3.7/site-packages/Cython/Distutils/old_build_ext.py in run(self); 185 ; --> 186 _build_ext.build_ext.run(self); 187 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in run(self); 339 # Now actually compile and link everything.; --> 340 self.build_extensions(); 341 . ~/opt/anaconda3/lib/python3.7/site-packages/Cython/Distutils/old_build_ext.py in build_extensions(self); 194 # Call original build_extensions; --> 195 _build_ext.build_ext.build_extensions(self); 196 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in build_extensions(self); 448 else:; --> 449 self._build_extensions_serial(); 450 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in _build_extensions_serial(self); 473 with self._filter_build_errors(ext):; --> 474 self.build_extension(ext); 475 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in build_extension(self, ext); 533 extra_postargs=extra_args,; --> 534 depends=ext.depends); 535 . ~/opt/anaconda3/lib/python3.7/distutils/ccompiler.py in compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends); 573 continue; --> 574 self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts); 575 . ~/opt/anaconda3/lib/python3.7/distutils/unixccompiler.py in _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts); 119 except DistutilsExecError as msg:; --> 120 raise CompileError(msg); 121 . ImportError: Building module cqobjevo_compiled_coeff_1212362029172 failed: [""distutils.errors.CompileError: command 'gcc' terminated by signal 6\n""]. The above exception was the direct cause of the following exception:. Exception Traceback (most recent call last); <ipython-input-4-773196c7ecc9> in <module>; 6 U_list = []; 7 for (i,t) in enumerate(t_list):; ----> 8 U = propagator(H,t, [], args); 9 U_list.append(U); 10 print(i). ~/opt/anaconda3/lib/python3.7/site-packages/qutip/prop",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290:7867,depend,depends,7867,https://qutip.org,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290,1,['depend'],['depends']
Integrability,"and [NEP 35](https://numpy.org/neps/nep-0035-array-creation-dispatch-with-array-function.html). Later versions of numpy allowed greater control over how ufuncs get implemented, which was most recently extended in 1.16 to cover non-ufuncs like `tensordot`. These functions are intended for classes to define how ufuncs operate on their data, but implementors should still follow the `ufunc` spec for broadcasting rules, and a given ufunc should have the same conceptual behaviour (mostly elementwise operations or reductions). Several libraries implement only these, but _not_ `__array__`, but given my points 1 and 2 above, I don't think QuTiP should go this route. You can, however, set these properties to `None` to unconditionally tell Numpy that the object is incompatible with ufuncs. I think this might be a good way for us to go. ## What other libraries do. Provide everything:; - Dask: mostly trying to provide a numpy-like distributed array class. Its arrays mostly support the numpy interface, including how ufuncs should act on them. Providing `__array__` seems odd to me here in the context of other libraries, since that may easily blow out memory.; - PyTorch: CPU/GPU accelerated tensors for ML. This is a bit beyond my experience to comment on why they made the choices they did.; - Xarray: strongly extends the idea of structured arrays; this to me is the best example of how `__array__` was intended to be used.; ; Provide some things:; - Qiskit: (just changed behaviour in Qiskit/qiskit-terra#5402) implements `__array__` (but nothing else) for things that are like our `Qobj`. Discussed more at the top.; - CuPy (CUDA operations on ndarray-likes) explicitly does not allow implicit conversion to `np.ndarray` (see cupy/cupy#3421) for performance reasons, but does implement `__array_ufunc__` and `__array_function__`.; - pydata/sparse (nd-sparse _arrays_ instead of scipy.sparse's sparse _matrices_): always implement `__array_ufunc__` and `__array_function__` because they are try",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:6366,interface,interface,6366,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['interface'],['interface']
Integrability,"asis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hada",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576:1252,depend,dependent,1252,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576,1,['depend'],['dependent']
Integrability,"ast 1.3 (2009 - the oldest docs still on scipy.org), and I imagine long before then too. `__array__` is mentioned (and still is) in the documentation of `np.array`, which is unchanged since 2009 and says that its argument should be; > An array, any object exposing the array interface, an object whose `__array__` method returns an array, or any (nested) sequence. and `__array_wrap__` is like the reverse - it's for coercing numpy arrays back into this class. If we were to keep `__array__` in `Qobj`, we should also implement `__array_wrap__` for coercion back (something that isn't currently implemented). At the time and up to inclusively 1.19, the presence of `__array__` caused otherwise scalar types passed alone to `np.array` to return the output of `input.__array__(*args, **kwargs)`, instead of becoming a 0D numpy array (like `np.array(1)` does). Taken purely alone, that could make sense as something we implement. However, this also implies that `Qobj` should fulfil the numpy ufunc interface; `Qobj` would be a container for data such that operations like `np.sin` is the elementwise sin, or (most notably) `np.multiply` is the *elementwise* multiplication. Our `Qobj` _does not_ fulfil the ufunc interface:; 1. elementwise operations don't make sense on quantum objects, which are arrays only as an implementation detail - the `Qobj` class is meant to represent an abstract linear algebra object, not specifically a matrix.; 2. we don't honour the `shape` guarantees of numpy as we test compatibility based on `dims`, which are not 1D (superoperators) so cannot follow numpy's broadcasting rules; 3. we treat multiplication as matrix multiplication, violating how `np.multiply` should behave. My main concern is point 1: I don't think that `Qobj` provides a similar object to an `ndarray` at all. Right now we _do_ use matrices underneath, but proposed additions to QuTiP such as symbolic `Qobj` and adaptive Hilbert spaces are compatible with the idea of ""abstract linear algebra obje",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:3919,interface,interface,3919,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['interface'],['interface']
Integrability,"ate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:7663,wrap,wrap,7663,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['wrap'],['wrap']
Integrability,"ator representation. Perhaps @cgranade knows?; > ; > import scipy; > ; > from qutip.mesolve import _generic_ode_solve; > from qutip.superoperator import liouvillian, mat2vec; > from qutip.settings import debug; > ; > if debug:; > import inspect; > ; > def _mesolve_const_super(H, E0, tlist, c_op_list, e_ops, args, opt,; > progress_bar):; > """"""; > Evolve the super-operator `E0` using an ODE solver, for constant ; > Liouvillian; > """"""; > ; > ```; > if debug:; > print(inspect.stack()[0][3]); > ; > """"""; > #; > # check initial state; > #; > if isket(rho0):; > # if initial state is a ket and no collapse operator where given,; > # fall back on the unitary schrodinger equation solver; > if len(c_op_list) == 0 and isoper(H):; > return _sesolve_const(H, rho0, tlist, e_ops, args, opt,; > progress_bar); > ; > # Got a wave function as initial state: convert to density matrix.; > rho0 = ket2dm(rho0); > """"""; > ; > #; > # check initial value; > #; > if not E0.issuper:; > raise TypeError(""Argument 'E0' should be a super-operator""); > ; > #; > # construct liouvillian; > #; > if opt.tidy:; > H = H.tidyup(opt.atol); > ; > L = liouvillian(H, c_op_list); > ; > #; > # setup integrator; > #; > initial_vector = mat2vec(E0.full()).ravel(); > # r = scipy.integrate.ode(cy_ode_rhs); > r = scipy.integrate.ode(_rhs); > # r.set_f_params(L.data.data, L.data.indices, L.data.indptr); > # not sure why I need to transpose L here:; > r.set_f_params(scipy.transpose(L.data)); > r.set_integrator('zvode', method=opt.method, order=opt.order,; > atol=opt.atol, rtol=opt.rtol, nsteps=opt.nsteps,; > first_step=opt.first_step, min_step=opt.min_step,; > max_step=opt.max_step); > r.set_initial_value(initial_vector, tlist[0]); > ; > #; > # call generic ODE code; > #; > return _generic_ode_solve(r, E0, tlist, e_ops, opt, progress_bar); > ```; > ; > def _rhs(t,y,data):; > ym = y.reshape(data.shape); > return (data*ym).flatten(); > —; > Reply to this email directly or view it on GitHub.; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/384#issuecomment-150751174:4068,integrat,integrator,4068,https://qutip.org,https://github.com/qutip/qutip/issues/384#issuecomment-150751174,3,['integrat'],"['integrate', 'integrator']"
Integrability,"base class]( https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.spmatrix.html#scipy.sparse.spmatrix)? Then the `Qobj` constructor would probably need an additional parameter `format` for the class that should be used to convert the `inpt` argument to the `data` attribute. The onus would then be on Scipy to provide a full matrix that is a subtype of `scipy.spmatrix` (just to keep the interface contract), and also to have `int64` versions of all their existing sparse classes. From a community standpoint, it would seem like one would get much more bang for the buck to have this problem solved inside SciPy, instead of doing a lot of low-level stuff in QuTiP -- at least if they're amenable to pull requests, but worst case you can still define necessary new `scipy.spmatrix` subclasses externally. Take all of my musings with a little grain of salt... I never really looked too deep into QuTiP's low-level internals, specifically where QuTiP is using Cython. Naively, I would sort of think that Cython would remain at the level of sparse linear algebra operations (and thus mostly in scipy) and that QuTiP could be mainly pure Python. Obviously, once you start implementing higher level things like time propagation or even optimal control in Cython, everything becomes a bit of a mess, because then you really do have to manually implement everything for every possible storage format (again, something I'm familiar with from Fortran, and it's *a lot* of work). Generally, though, I've personally come to the conclusion that the lowest-level thing to really optimize for quantum dynamics simulations (in any language) is the application of a (time-dependent) operator to a Hilbert space state, respectively the commutator with a density matrix (in QuTiP, the operators would be the nested ``[H0, (u(t), H1), ...]`` lists). Everything higher level is probably fine at Python speed, as long as the algorithms are sound and you avoid allocating temporary storage as much as possible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-383937610:2692,depend,dependent,2692,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-383937610,1,['depend'],['dependent']
Integrability,"blas is cool but it is a mess.. different libraries might to the underscores and stuff differently, in c to fortran wrapping etc, but i'm guessing the header files should sort this out if used properly. it would be really nice to get this to work. nice speedup!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/39#issuecomment-22436095:116,wrap,wrapping,116,https://qutip.org,https://github.com/qutip/qutip/issues/39#issuecomment-22436095,1,['wrap'],['wrapping']
Integrability,"cally a matrix.; 2. we don't honour the `shape` guarantees of numpy as we test compatibility based on `dims`, which are not 1D (superoperators) so cannot follow numpy's broadcasting rules; 3. we treat multiplication as matrix multiplication, violating how `np.multiply` should behave. My main concern is point 1: I don't think that `Qobj` provides a similar object to an `ndarray` at all. Right now we _do_ use matrices underneath, but proposed additions to QuTiP such as symbolic `Qobj` and adaptive Hilbert spaces are compatible with the idea of ""abstract linear algebra objects"", but do not necessarily have a backing array. Point 2 is mostly an extension of that: I'm not sure there is a sensible way for numpy's broadcasting rules to be applied to quantum objects as they exist now, even without extensions. ## More control over dispatch: `__array_ufunc__` and `__array_function__`. See [NEP 13](https://numpy.org/neps/nep-0013-ufunc-overrides.html), [NEP 18](https://numpy.org/neps/nep-0018-array-function-protocol.html) and [NEP 35](https://numpy.org/neps/nep-0035-array-creation-dispatch-with-array-function.html). Later versions of numpy allowed greater control over how ufuncs get implemented, which was most recently extended in 1.16 to cover non-ufuncs like `tensordot`. These functions are intended for classes to define how ufuncs operate on their data, but implementors should still follow the `ufunc` spec for broadcasting rules, and a given ufunc should have the same conceptual behaviour (mostly elementwise operations or reductions). Several libraries implement only these, but _not_ `__array__`, but given my points 1 and 2 above, I don't think QuTiP should go this route. You can, however, set these properties to `None` to unconditionally tell Numpy that the object is incompatible with ufuncs. I think this might be a good way for us to go. ## What other libraries do. Provide everything:; - Dask: mostly trying to provide a numpy-like distributed array class. Its arrays mostl",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:5358,protocol,protocol,5358,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['protocol'],['protocol']
Integrability,"ch will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across the library. This is particularly important if we want this to work well with superoperators. Really, thank you very much for making the PR - I really am excited to see people with an interest in the new data layer! I'm sorry that I took quite so long to respond properly to it, and that when I have, I've ended up being somewhat against the implementaton as it is. I would be really interested in pursuing this, likely after the initial release of 5.0, but right now I think we might need to get our ducks in a row about licensing primarily, and then about how we're going to handle tensor networks in general. In order to prevent headaches down the line (and again, very very sorry)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:3717,rout,routine,3717,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['rout'],['routine']
Integrability,"crap . ---. Paul D. Nation; Assistant Professor; Korea University; Department of Physics; Anam-dong 5, Seongbuk-gu; Seoul 136-713, South Korea; Email: pnation@korea.ac.kr (mailto:pnation@korea.ac.kr); Phone: +82-02-3290-3092. ## Web: nqdl.korea.ac.kr (http://nqdl.korea.ac.kr/). On Saturday, August 10, 2013 at 5:03 PM, Robert Johansson wrote:. > qutip import now fail with the following error message; > /usr/local/lib/python3.3/dist-packages/qutip/cyQ/**init**.py in <module>() 1 from qutip.cyQ.spmatfuncs import \* ----> 2 from qutip.cyQ.blas_funcs import \* ImportError: /usr/local/lib/python3.3/dist-packages/qutip/cyQ/blas_funcs.cpython-33m.so: undefined symbol: dznrm2_ ; > ; > —; > Reply to this email directly or view it on GitHub (https://github.com/qutip/qutip/issues/39).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/39#issuecomment-22436060:394,message,message,394,https://qutip.org,https://github.com/qutip/qutip/issues/39#issuecomment-22436060,1,['message'],['message']
Integrability,"cy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Q",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:2743,depend,dependent,2743,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['depend'],['dependent']
Integrability,"d64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:14577,message,message,14577,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['message'],['message']
Integrability,"d64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:20495,message,message,20495,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['message'],['message']
Integrability,"doing this means we have to guarantee that at _no point_ is the `ctrl_array` object copied. If you wanted to branch off execution part-way through the iterator, you'd have to copy the whole state, and then you'd lose your reference to the control array unless you kept manually walking the structure of the time-dependent object (internally it gets converted into a `QobjEvo` Liouvillian) to retrieve it. The other problem is that `state0` and the `Qobj` parts of the Hamiltonian aren't mutable; the preprocessing of `mesolve` means that none of those objects will exist inside the integrator loop. That's fine for this use-case, but it's not very general. These problems of mutability would apply to callback functions as well. A different way of using `yield` or callback function would be to really lean into a co-routine sort of pattern. So `mesolve` internally would look like; ```python; def mesolve(H, state, times, c_ops, e_ops, options):; # [... set up problem ...]; integrator = scipy.integrate.ode(...); for time in times[1:]:; state = integrator.step_to(time); instructions = yield _mesolve_output_state(state, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be like; ```python; solver = mesolve(H, rho0, times, c_ops); try:; result = next(solver); while True:; next_control = krotov.get_next_control(result.time, result.state); result = solver.send([; ('update-arguments', {'control': next_control}),; ('update-hamiltonian', ...),; ('add-c_op', ...),; # possible examples of API commands; ]); except StopIteration:; pass; ```; That's not super user friendly, but it _is_ nicely re-entrant. You'd have a single object you can copy and branch off, and QuTiP would be able to update the relevant objects for you at any given time. Still, I don't think it's a good strategy in general - we'd have to _very_ rigorously define the ""instructions"" API, and it would be pretty awkward to use. It would also be a nuisance for ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:1849,integrat,integrate,1849,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,1,['integrat'],['integrate']
Integrability,"e and mc for driven oscillator in ground state ... ERROR; correlation: legacy me and es for oscillator in steady-state ... ok; correlation: comparing me and es for oscillator in steady-state ... ok; correlation: legacy spectrum from es and pi methods ... ok; correlation: comparing spectrum from es and fft methods ... ok; correlation: comparing spectrum from es and pi methods ... ok; correlation: comparing TLS emission correlations (str-list td format) ... In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessTypeChunk':; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148708318:2906,message,message,2906,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148708318,1,['message'],['message']
Integrability,"e to generate these with a (costly) Lindblad equation in a large Hilbert space, and use the TTM to extrapolate to larger times. My code is not quite ready for a pull request yet (due to this issue amongst other things), but when it is I would also like to discuss the structure of such a package. I guess it is best to leave that to when I have a pull request re ady though.; > ; > For now I have a local modified version of the _mesolve_const function that allows a superoperator in place of rho0. The necessary modification is actually only to the function implementing the ""right hand side"" (RHS) of the differential equation, as this now needs to implement a matrix-matrix multiplication instead of a matrix-vector multiplication. For illustration purposes I will attach a code for a modified _mesolve_const below, that does the job, but the RHS is not implemented in cython.; > ; > I think implementing this feature in qutip should be relatively straight forward, but possibly a bit tedious since it there are so many different dispatch functions from mesolve depending on the different types of time-dependence etc. One would also need cython implementations of the RHS functions for superoperator evolutions.; > ; > Please let me know what you think about implementing this in qutip.; > ; > Here is the code for a function that propagates the Lindblad equation with a superoperator as initial value (written as a standalone module for illustration purposes). As you will notice in the code, there is a subtle issue with needing to transpose the Lindbladian to get the correct result. I'm not sure why this is the case.. must be something with the superoperator representation. Perhaps @cgranade knows?; > ; > import scipy; > ; > from qutip.mesolve import _generic_ode_solve; > from qutip.superoperator import liouvillian, mat2vec; > from qutip.settings import debug; > ; > if debug:; > import inspect; > ; > def _mesolve_const_super(H, E0, tlist, c_op_list, e_ops, args, opt,; > progress_bar):",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/384#issuecomment-150751174:2301,depend,depending,2301,https://qutip.org,https://github.com/qutip/qutip/issues/384#issuecomment-150751174,2,['depend'],"['dependence', 'depending']"
Integrability,"e'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. That sounds perfect! I might wait for QuTiP 5 to come out, or if these things are already in `master`, I'll see if I can maybe revisit `DensityMatrixODEPropagator` and maybe also add something for the Hilbert space case (whatever `sesolve` is doing internally). As an aside, I was actually surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatever `mesolve` does internally for a particular case. > We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend le",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:9133,integrat,integrate,9133,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrate']
Integrability,"e\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c: In function '__Pyx_BufFmt_ProcessT",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:15117,message,message,15117,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['message'],['message']
Integrability,"e\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v__t0' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14882.c:2153:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14883.c: In function '__Pyx_BufFmt_ProcessT",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:21121,message,message,21121,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['message'],['message']
Integrability,"ead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5972,integrat,integrator,5972,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Integrability,"eating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.puls",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:2700,depend,dependent,2700,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['depend'],['dependent']
Integrability,"ed to be a more general framework to characterize thermal environments. Environments with multi-exponential decompositions are included as `ExponentialBosonicEnvironment`; this class is supposed to mostly replace the old HEOM `BosonicBath`. We now use the term ""environment"" instead of ""bath"" mostly to avoid having the same name for the new classes as in the HEOM module. There is a little difference between the old and the new class, namely that the system coupling operator is a part of BosonicBath (i.e., an attribute of BosonicBath and required in the constructor), but we have decided for the new module that system operators should not be part of the environment. This means that to create a HEOM solver, one will need to specify environments and coupling operators, somewhat similar to the `brmesolve` solver where one specifies both power spectrum and `a_op`. (Currently, one just specifies a list of ""baths"" in the HEOM solver). This will require some small changes to the HEOM solver interface that we still have to implement before merging this PR. Note that we are also making sure that existing code continues to work without changes. Another thing missing from this PR are fermionic environments. I would have liked to have them, but it was becoming too much work and a too large PR, so fermionic environments will have to be added a bit later. Some more advantage of our changes are:; * The new environment classes could be used directly as inputs for solvers other than the HEOM solver, for example for `mesolve` or `brmesolve`. These solvers could compute their jump operators and rates from the environment power spectrum and system operators. (That is however also left for a future PR, since it would require some thinking about how environments can best be passed to those solvers.) Similarly, QuTiP could automatically compute Markovian embeddings with pseudomodes or reaction coordinates.; * The module provides a framework for the idea of approximating one environment by an",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2534#issuecomment-2359719525:1273,interface,interface,1273,https://qutip.org,https://github.com/qutip/qutip/pull/2534#issuecomment-2359719525,1,['interface'],['interface']
Integrability,"ee that at _no point_ is the `ctrl_array` object copied. If you wanted to branch off execution part-way through the iterator, you'd have to copy the whole state, and then you'd lose your reference to the control array unless you kept manually walking the structure of the time-dependent object (internally it gets converted into a `QobjEvo` Liouvillian) to retrieve it. The other problem is that `state0` and the `Qobj` parts of the Hamiltonian aren't mutable; the preprocessing of `mesolve` means that none of those objects will exist inside the integrator loop. That's fine for this use-case, but it's not very general. These problems of mutability would apply to callback functions as well. A different way of using `yield` or callback function would be to really lean into a co-routine sort of pattern. So `mesolve` internally would look like; ```python; def mesolve(H, state, times, c_ops, e_ops, options):; # [... set up problem ...]; integrator = scipy.integrate.ode(...); for time in times[1:]:; state = integrator.step_to(time); instructions = yield _mesolve_output_state(state, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be like; ```python; solver = mesolve(H, rho0, times, c_ops); try:; result = next(solver); while True:; next_control = krotov.get_next_control(result.time, result.state); result = solver.send([; ('update-arguments', {'control': next_control}),; ('update-hamiltonian', ...),; ('add-c_op', ...),; # possible examples of API commands; ]); except StopIteration:; pass; ```; That's not super user friendly, but it _is_ nicely re-entrant. You'd have a single object you can copy and branch off, and QuTiP would be able to update the relevant objects for you at any given time. Still, I don't think it's a good strategy in general - we'd have to _very_ rigorously define the ""instructions"" API, and it would be pretty awkward to use. It would also be a nuisance for extensibility, probably; the interm",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:1901,integrat,integrator,1901,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,1,['integrat'],['integrator']
Integrability,"ee to re-organize it afterwards as he likes. . > 3 - we need to take care to do this in a way that still allows QuTiP to iterate and improve Qobj.__init__ between major versions. You could for example require that `__qutip_qobj__(self, version, *kwargs)` takes in a version of the API? I believe that is what numpy does in `__array_interface__`. And it's on implementers of the interface the burden of checking the api version and throwing an error if it's not supported. Or the inverse, where implementers return whatever data they return and a version of the API they are using, and qutip can throw an error if that is an older version. The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip. I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. -- ; About keyword handling: copy-pasting the list of kwargs of `Qobj`...; ```python; inpt : array_like = Data for vector/matrix representation of the quantum object.; dims : list = Dimensions of object used for tensor products.; shape : list = Shape of underlying data structure (matrix shape).; copy : bool = Flag specifying whether Qobj should get a copy of the input data, or use the original.; fast : bool = Flag for fast qobj creation when running ode solvers.; ```. For the case of the usage that netket would have, our objects already define the Hilbert space they are acting on (so `dims` and `shape`). `copy` doesn't really make sense for us, because we would be building the representation . The way I see it, `Qobj(other_pkg_obj,**kwargs)` should behave like `Qobj(qutip_obj, **kwargs)`, so `__qutip_qobj__` should return the matrix data, shape and dims if possible, and qutip will handle i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810:1802,message,message,1802,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810,1,['message'],['message']
Integrability,"en module scoping isn't good, but if you have lots of different functions to test, and every test for a given function will want the same parametrisation, then class scoping might be a good choice. If you only need the parametrisation once, then it's best to put it right next to the place it's used (like in the case of mine that you've highlighted). It means that if you've opened that file to read the tests, then everything you need to understand `Test_fidelity.test_known_cases` will be on your screen if you just scroll to it. That makes it much easier for the next person who has to come along to edit your code. I used a couple of temporary variables in that case just to aid readability - my cases wouldn't have nicely fit on one line if I'd shoved the `qutip.basis(2, 0)` stuff inside the `pytest.param` constructors, and it would be hard to read. This way you can easily verify that the code is correct bit-by-bit; you can see clearly that the names are descriptive and match exactly what they say, and that means you can trust them when they then appear in the parametrisation. I won't pretend to be perfect at any part of coding, and particularly testing. I rewrote all the testing files starting from those beginning with ""a"" up to (now) ""metrics"" while I was first getting to know the QuTiP codebase, and hopefully you can see that my early efforts weren't that great, and they get a bit better and easier to read as time went on. (The later files haven't been converted yet.) The main things are to always be thinking about readability both of the code and the error messages that are coming out, and making sure that your tests are really testing that your functions have your behaviour you want them to have. Another thing we really don't have enough of in QuTiP yet is tests for ""negative"" behaviour, i.e. testing that functions _fail_ when they're passed incorrect inputs - consequently, quite a lot of QuTiP actually will just silently do the wrong thing if it's passed nonsense.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706:2382,message,messages,2382,https://qutip.org,https://github.com/qutip/qutip/pull/1487#issuecomment-815044706,1,['message'],['messages']
Integrability,enblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python; - python-dateutil; - python-symengine; - pytz; - pyyaml; - pyzmq; - qt; - qtawesome; - qtconsole; - qtpy; - qutip; - r-base; - r-clisymbols; - readline; - reportlab; - requests; - rope; - scikit-learn; - scipy; - send2trash; - setuptools; - simplegeneric; - sip; - six; - snowballstemmer; - sphinx; - sphinxcontrib; - sphinxcontrib-applehelp; - sphinxcontrib-devhelp; - sphinxcontrib-htmlhelp; - sphinxcontrib-jsmath; - sphinxcontrib-qthelp; - sphinxcontrib-serializinghtml; - sphinxcontrib-websupport; - spyder; - spyder-kernels; - sqlite; - symengine; - symmetrica; - sympow; - sympy; - tensorboard; - tensorflow; - tensorflow-base; - tensorflow-estimator; - termcolor; - terminado; - testpath; - tk; - tktable; - tornado; - traitlets; - typed-ast; - typing; - urllib3; - wcwidth; - webencodings; - werkzeug; - wheel; - wrapt; - wurlitzer; - xz; - yaml; - zeromq; - tqdm; - zlib; - zstd; - pytest; - numba; - hypothesis; - pytest-cov; - mypy; - pytest-xdist; - watchdog; - pytest-runner; - coveralls; - doctr; - gitpython; - pre-commit; - tox; - cookiecutter; - pdbpp; - sphinx-autobuild; - sphinx-autodoc-typehints; - sphinx_rtd_theme; - travis-encrypt; - twine; - nbval; - nbsphinx; - watermark; - ipyparallel; - unittest2pytest; - pytest-benchmark; - pytest-repeat; - pytest-subtests; - fastcore; - fastscript; - asttokens; - cached-property; - crayons; - executing; - flask; - humanize; - ipywidgets; - itsdangerous; - jsonpickle; - jupyter; - littleutils; - nbconvert; - outdated; - portpicker; - sqlalchemy; - widgetsnbextension; - nbdime; - rich; - mayavi; - pip:; - birdseye; - icecream; - nbdev==1.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:2824,wrap,wrapt,2824,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['wrap'],['wrapt']
Integrability,"ensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). To get very technical, Krotov's requirements are laid out in the documentation of the [`Propagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L125) abstract base class, [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162) being a particular example. In particular, the interface we define there is strictly for a single time step, makes no reference to `tlist` and we use ``H=[H0, [H1, u]]`` where `u` is a scalar for that particular timestep. However, I can easily write a wrapper around an `mesolve` that would work something along the lines of the pseudo-code from https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563:. ~~~; for (i, state) in enumerate(; mesolve([H0, [H1, ctrl_array]], state0, list); ):; # assuming `state` is at tlist[i]; new_val = calculate_control_value_for_next_step(state); ctrl_array[i] = new_val; ctrl_array[i+1] = new_val # ignoring IndexError; ~~~. So I don't think you'd have to worry about these details: any implementation with low overhead that would allow me to get the states from `mesolve` as well as tweak the control fields for the next time step should be sufficient. In particular, the `.step` that you discuss in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451 looks very much like it's going in the right direction! The one option from the earlier https://github.com/qutip/qutip/issues/1571#issue-917391349 that might *not* work very well is callback functions. I *might* be able to work around that, but it wouldn't really fit into the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:4071,wrap,wrapper,4071,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['wrap'],['wrapper']
Integrability,"entrant and forwards-compatible without hamstringing our ability to extend the APIs in the future would probably not be very ergonomic. Both callbacks and `yield` allow the caller to feed information back into `mesolve`, but in this architecture, we'd have to completely define an interchange API, and specify quite explicitly what ""commands"" you can tell this sort of `mesolve` state machine to execute. The pattern in your original comment (reproduced here); ```python; for (i, state) in enumerate(; mesolve([H0, [H1, ctrl_array]], state0, list); ):; # assuming `state` is at tlist[i]; new_val = calculate_control_value_for_next_step(state); ctrl_array[i] = new_val; ctrl_array[i+1] = new_val # ignoring IndexError; ```; is probably a little fragile; doing this means we have to guarantee that at _no point_ is the `ctrl_array` object copied. If you wanted to branch off execution part-way through the iterator, you'd have to copy the whole state, and then you'd lose your reference to the control array unless you kept manually walking the structure of the time-dependent object (internally it gets converted into a `QobjEvo` Liouvillian) to retrieve it. The other problem is that `state0` and the `Qobj` parts of the Hamiltonian aren't mutable; the preprocessing of `mesolve` means that none of those objects will exist inside the integrator loop. That's fine for this use-case, but it's not very general. These problems of mutability would apply to callback functions as well. A different way of using `yield` or callback function would be to really lean into a co-routine sort of pattern. So `mesolve` internally would look like; ```python; def mesolve(H, state, times, c_ops, e_ops, options):; # [... set up problem ...]; integrator = scipy.integrate.ode(...); for time in times[1:]:; state = integrator.step_to(time); instructions = yield _mesolve_output_state(state, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be lik",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:1166,depend,dependent,1166,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,1,['depend'],['dependent']
Integrability,"ers\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278046 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: rhs_reuse : pyx filenames match for rhs_reus= True; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyx",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:1936,depend,depends,1936,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"ers\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278047 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: sesolve: state with td list str H; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_suppo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:6365,depend,depends,6365,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"ers\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278048 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: sesolve: unitary operator with td list str H; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.r",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:10867,depend,depends,10867,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"ers\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278049 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: sesolve: state with td interp H; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:15414,depend,depends,15414,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"ers\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278050 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: sesolve: unitary operator with td interp H; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.rel",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:19912,depend,depends,19912,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"ers\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278051 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: sesolve: compare state and unitary operator evo - list str td; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:24454,depend,depends,24454,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"ers\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278052 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: Steady state: Driven cavity - power-gmres solver; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_steadystate.py"", line 490, in test_driven_cavity_power_gmres; use_precond=1); File ""C:\Users\MTS-144\A",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:29043,depend,depends,29043,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"ers\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_rhs_reuse.py"", line 53, in test_rhs_reuse; out1 = qt.mesolve(H, psi0,tlist, e_ops=e_ops); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\mesolve.py"", line 336, in mesolve; e_ops, args, options, progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py""",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:3827,depend,depends,3827,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"ers\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 190, in test_04_1_state_with_list_str_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 64, in check_evolution; args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in se",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:8239,depend,depends,8239,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"ers\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 207, in test_04_2_unitary_with_list_func_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 67, in check_evolution; output = sesolve(H, U0, tlist, args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:12752,depend,depends,12752,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"ers\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 226, in test_05_1_state_with_interp_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 64, in check_evolution; args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in seso",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:17286,depend,depends,17286,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"ers\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 245, in test_05_2_unitary_with_interp_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 67, in check_evolution; output = sesolve(H, U0, tlist, args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qut",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:21795,depend,depends,21795,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"ers\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxbuild.py"", line 102, in pyx_to_dll; dist.run_commands(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 966, in run_commands; self.run_command(cmd); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\dist.py"", line 985, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 354, in test_06_4_compare_state_and_unitary_list_str; normalize=False, td_args=td_args, tol=5e-5); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 255, in compare_evolution; options=options,args=td_args); File ""C:\Users\MTS-144\Ana",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:26356,depend,depends,26356,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['depend'],['depends']
Integrability,"ext.build_ext.run(self); 187 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in run(self); 339 # Now actually compile and link everything.; --> 340 self.build_extensions(); 341 . ~/opt/anaconda3/lib/python3.7/site-packages/Cython/Distutils/old_build_ext.py in build_extensions(self); 194 # Call original build_extensions; --> 195 _build_ext.build_ext.build_extensions(self); 196 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in build_extensions(self); 448 else:; --> 449 self._build_extensions_serial(); 450 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in _build_extensions_serial(self); 473 with self._filter_build_errors(ext):; --> 474 self.build_extension(ext); 475 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in build_extension(self, ext); 533 extra_postargs=extra_args,; --> 534 depends=ext.depends); 535 . ~/opt/anaconda3/lib/python3.7/distutils/ccompiler.py in compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends); 573 continue; --> 574 self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts); 575 . ~/opt/anaconda3/lib/python3.7/distutils/unixccompiler.py in _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts); 119 except DistutilsExecError as msg:; --> 120 raise CompileError(msg); 121 . CompileError: command 'gcc' terminated by signal 6. During handling of the above exception, another exception occurred:. ImportError Traceback (most recent call last); ~/opt/anaconda3/lib/python3.7/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 79 import_code = compile(codeString, '<string>', 'exec'); ---> 80 exec(import_code, locals()); 81 except (ModuleNotFoundError, ImportError) as e:. <string> in <module>. ~/opt/anaconda3/lib/python3.7/site-packages/pyximport/pyximport.py in load_module(self, fullname); 461 build_inplace=self.inplace,; --> 462 language_level=self.language_level); 463 return module. ~/o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290:4454,depend,depends,4454,https://qutip.org,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290,1,['depend'],['depends']
Integrability,"ext.build_ext.run(self); 187 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in run(self); 339 # Now actually compile and link everything.; --> 340 self.build_extensions(); 341 . ~/opt/anaconda3/lib/python3.7/site-packages/Cython/Distutils/old_build_ext.py in build_extensions(self); 194 # Call original build_extensions; --> 195 _build_ext.build_ext.build_extensions(self); 196 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in build_extensions(self); 448 else:; --> 449 self._build_extensions_serial(); 450 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in _build_extensions_serial(self); 473 with self._filter_build_errors(ext):; --> 474 self.build_extension(ext); 475 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in build_extension(self, ext); 533 extra_postargs=extra_args,; --> 534 depends=ext.depends); 535 . ~/opt/anaconda3/lib/python3.7/distutils/ccompiler.py in compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends); 573 continue; --> 574 self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts); 575 . ~/opt/anaconda3/lib/python3.7/distutils/unixccompiler.py in _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts); 119 except DistutilsExecError as msg:; --> 120 raise CompileError(msg); 121 . ImportError: Building module cqobjevo_compiled_coeff_1212362029172 failed: [""distutils.errors.CompileError: command 'gcc' terminated by signal 6\n""]. The above exception was the direct cause of the following exception:. Exception Traceback (most recent call last); <ipython-input-4-773196c7ecc9> in <module>; 6 U_list = []; 7 for (i,t) in enumerate(t_list):; ----> 8 U = propagator(H,t, [], args); 9 U_list.append(U); 10 print(i). ~/opt/anaconda3/lib/python3.7/site-packages/qutip/propagator.py in propagator(H, t, c_op_list, args, options, unitary_mode, parallel, progress_bar, _safe_mode, **kwargs); 184 output = sesolve(H2, psi0, tlist, [],; 185 args=args, opt",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290:8046,depend,depends,8046,https://qutip.org,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290,1,['depend'],['depends']
Integrability,"fine the `__jax_array__` interface). While I think that Qobj is a very qutip-like principle, I see no problems in namespacing. > 2- having the check in __init__ . Again, I think that your observation is right. I thought about it only after I submitted the post above. The way numpy does it is that `__array__(self, dtype)` takes only one argument, but I think we can do better and better respect the API set by qutip. ; That is why I was suggesting that `object.__qutip_qobj__` should not return a Qobj directly, but rather the data needed by QuTiP to construct a Qobj, and qutip should be free to re-organize it afterwards as he likes. . > 3 - we need to take care to do this in a way that still allows QuTiP to iterate and improve Qobj.__init__ between major versions. You could for example require that `__qutip_qobj__(self, version, *kwargs)` takes in a version of the API? I believe that is what numpy does in `__array_interface__`. And it's on implementers of the interface the burden of checking the api version and throwing an error if it's not supported. Or the inverse, where implementers return whatever data they return and a version of the API they are using, and qutip can throw an error if that is an older version. The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip. I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. -- ; About keyword handling: copy-pasting the list of kwargs of `Qobj`...; ```python; inpt : array_like = Data for vector/matrix representation of the quantum object.; dims : list = Dimensions of object used for tensor products.; shape : list = Shape of underlying data structure (matrix shape).; copy : bool ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810:1183,interface,interface,1183,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825710810,1,['interface'],['interface']
Integrability,"g propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. That sounds perfect! I might wait for QuTiP 5 to come out, or if these things are already in `master`, I'll see if I can maybe revisit `DensityMatrixODEPropagator` and maybe also add something for the Hilbert space case (whatever `sesolve` is doing internally). As an aside, I was actually surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatev",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:8430,interface,interface,8430,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['interface'],['interface']
Integrability,"g we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose`, which can be seen as special cases of this exact same type of tensor contraction (not to mention `tensor_contract`!). The other thing from a code perspective is that this doesn't use the data-layer in the intended manner. A lot of this may be because our documentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tenso",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:2610,rout,routine,2610,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['rout'],['routine']
Integrability,"g-process-but-not-a-multipro), but these add extra overhead to implementing multiprocessing and don't work with methods that are not functionally static. . Given that these scattering calculations are among the most computationally expensive in QuTiP, I don't think that making parallelism more difficult to work with is a direction we should go in. I am confident that, with significant effort, I can make a clean and parallelized way to perform a parameter search in a class-based version of this module; however, this will take some time, especially given that developing this module is no longer my primary research focus in grad school. There are a few ways we could proceed:; 1. I could refactor the functions into a `Scatterer` class and export only the class, without adding dedicated multiprocessing support. This would make parallelizing parameter searches much more difficult - see my thoughts above.; 2. I could export both the flat functions and the `Scatterer` class (sans multiprocessing) which wraps these functions, and users could use the former for parallel searches. I don't like this option, since it clutters up the module and introduces multiple ways to do things. (""There should be one-- and preferably only one --obvious way to do it."" ~ [the Zen of Python](https://www.python.org/dev/peps/pep-0020/#the-zen-of-python)); 3. We could merge the current version of the module as-is and I can refactor into a class with properly-implemented parallelism in a later version. (I think it would be best to combine this with other similar API-breaking refactorings in v5.0.). Personally, I think option 3 is the best way to proceed. I am committed to maintaining and updating this module in the long term and I do think that refactoring much of QuTiP to be more object-oriented will be a positive change to the framework. However, consider that: (1) properly rewriting this as a class-based module without losing functionality will take some time, (2) there are many other modules (for",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-386114501:2129,wrap,wraps,2129,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-386114501,1,['wrap'],['wraps']
Integrability,"genbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Qobj) ... ok; contro",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576:1312,depend,dependent,1312,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576,1,['depend'],['dependent']
Integrability,"h higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qutip itself. All I stated was that `I played around with auto-converting input hamiltonians and jump operators in qutip.sesolve and mesolve to Qobj if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.`. ; - So implicitly I do have stated that I'd like to see implicit conversion being performed on high-level methods. I do see benefits for the whole ecosystem if we can start integrating more: qutip already has very advanced and feature-complete solvers, there are large benefits for other packages to exploit them without having to wrap them or ask users to write more complicated code. It means that all benefits and bug-fixes to qutip are instantly available to users of other packages too that rely on it. And I think that calling a conversion method at the beginning, which most of the time will do nothing will just be a tiny drop in the bucket of the overhead of those `large` functions. However, I don't want to argue that right now. All my proposal was about was having a way to play well with your `Qobj` constructor.; It seems to me you were eventually favourable to this, so I propose we focus the discussion only on this point, and leave aside implicit or explicit conversion discussions. . I'll gladly open another issue to discuss implicit conversion, if you want, or we could organise a small round table among a bunch of developers to talk about this on skype, but for now, all i'm asking, is to agree on the design of an interface to ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:2472,integrat,integrating,2472,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,2,"['integrat', 'wrap']","['integrating', 'wrap']"
Integrability,"h your approach. I’m simply trying to push for this to be something that will come out in a reasonable timeframe and not be something forgotten. > We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment without using them together, but can't even have them coexist because of version incompatibilities in optional conversion features?. I do understand your point, and I see how you want to be backward and forward compatible, however I don’t think that my proposal would break different tools in the same environment. What I propose would simply prevent `qutip.Qobj(otherlibraryobject)` from working (with an explicative error message) if `otherlibrary` does not support the same qobj interface version. Everything else would work the same. You can still import and use the two libraries independently without issues. It’s indeed possible to design around this and supporting at the same time different versions of the interface, however, and there’s value in doing so. > To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. I don't know enough of the history behind numpy current api, but I see your point. however I'd like to reiterate that this is not what I am proposing. ; I think there is considerable difference between supporting arbitrary operations `new_obj = Qobj + netket_operator*5` (though if you are going to export dispatch hooks in `5.0`, this would be possible in a consistent way, I think) and `qutip.mesolve(netket_operator, ...)`. ; In the first, I do agree with your point that the nature python's `__add__/__radd__` is not commutative, leading to surprising behavior. From my point of view, no package really owns `+` so any conversion would be implicit.; But `qutip.groundstate(netket_operator)` is in itself an explicit cast. I am explicitly asking to qutip `please give me the ground state of this obj",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:2261,interface,interface,2261,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,1,['interface'],['interface']
Integrability,"han,. I can't modify the Wiki page because I'm not a maintainer of QuTiP. And it seems that there is no way to make a PR to Wiki. I can also send you the markdown source code per email like this, but I’m not sure if it works as I expected. The following is the markdown source code:. -----------------------------------; ## 1. Error mitigation in QuTiP; From the QuTiP 4.5 release, the qutip.qip module now contains the noisy quantum circuit simulator (which was a GSoC project) providing enhanced features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be found in `",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940:1024,integrat,integration,1024,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590737940,1,['integrat'],['integration']
Integrability,"hat a scalar is (which classes are scalars) and at what level do we define it (who is responsible for returning NotImplemented). Proposed solutions:; 1) Let the _specialisation_ return `NotImplemented` and set `isherm` only when `complex(other)` is possible. This defines what an scalar is at the _specialisation_ level. However:; - It may cause inconsistent behaviour where some operations are allowed for a data layer (`TfTensor` or any other) but not for another one. I would argue that all specialisations should accept the same input, although operations may be handled differently internally (for example, in tensorflow we want to keep the graph state).; - `NotImplemented` only makes sense for some special binary methods (`__add__`, `__lt__`, etc) as Python employs `NotImplemented` to try `other`'s binary method. My concern is that if the dispatcher is used by itself at some points of the code (such as for the solver) returning `NotImplemented` may cause wrong error messages or even unexpected behaviour with future specialisations ( for instance, although it now raises a deprecation warning, `NotImplemented` is considered as `True` when evaluated as a condition). It seems to me that we should avoid having `NotImplemented` in python space (except for arithmetic operations in a class where they are useful and always make sense).; ; 2) Simon suggested to define what a scalar is at the _dispatcher_ level (or something similar to this but correct me if I am wrong). This would require to have a function that casts any defined scalar to a complex scalar. The dispatcher would be responsible to ensure that the correct scalar gets passed appropriately to the specialisation and for returning not implemented if necessary. ; - This solves the inconsistency problem as you could register a ""new"" scalar and define how it gets cast to a python complex scalar with a function (in most of the times, if not always, this will be `complex(other)`). ; - This does _not_ solve having `NotImplem",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152:1409,message,messages,1409,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152,1,['message'],['messages']
Integrability,"her would be responsible to ensure that the correct scalar gets passed appropriately to the specialisation and for returning not implemented if necessary. ; - This solves the inconsistency problem as you could register a ""new"" scalar and define how it gets cast to a python complex scalar with a function (in most of the times, if not always, this will be `complex(other)`). ; - This does _not_ solve having `NotImplemented` at the python space.; - It seems to be challenging to implement and will probably make things more difficult to maintain. 3) We can also define more rigorously what a scalar is for `Qobj` with a list, `_ALLOWED_SCALARS = [numbers.Number, ...]` that defines what we accept as scalars. We then do: `isinstace(other, _ALLOWED_SCALARS)` and return `NotImplemented` if not there. Two options here:; 1) QuTiP allows only `numbers.Number`:; - In this case `qutip-tensorflow` can extend `_ALLOWED_SCALARS` with tf.Variable and tf.Tensor. However, if the user uses two plug-ins, say qutip-tensorflow and qutip-something-that-does-not-work-well-with-tensorflow (second plug-in), the second plug-in may not work properly. ; - The above point is not a big deal if we make clear that _ALLOWED_SCALARS must accept `complex(other)` for compatibility reasons. In this way the second plug-in can always default to `complex(other)` (this is already the default behaviour of `mul_dense`).; 2) QuTiP allows `numbers.Number`, `ndarray` of shape `(,)`, `tf.Variable` of shape `(,)` and more in the future.; - The upside of this method with respect to 3.1 is that users know which types they must accept.; - This is probably not a good idea as it means qutip has to handle new dependencies (tensorflow and probalby more in the future).; - This _still_ defines what an scalar is at he `Qobj` level. I think this is not bad as it seems to be the only way of avoiding `NotImplemented` at Python space exept for in special methods (`__mul__`, ...). I think that 3.i is the closest to an ideal solution.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152:3692,depend,dependencies,3692,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152,1,['depend'],['dependencies']
Integrability,https://github.com/berkelbach-group/pyrho/blob/master/integrate/integrate.py,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/887#issuecomment-493303310:54,integrat,integrate,54,https://qutip.org,https://github.com/qutip/qutip/issues/887#issuecomment-493303310,2,['integrat'],['integrate']
Integrability,"ict; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245613247>:; >; > > + IVP solvers. Can be overridden if desired (e.g. for; > + debuggin/troubleshooting).; >; > With overwrite you mean using quicksolve with non-zero time_sense?; > If so, how to overwrite it?; > ⬇️ Suggested change; >; > - IVP solvers. Can be overridden if desired (e.g. for; > - debuggin/troubleshooting).; > + IVP solvers. Can be overridden if desired (e.g. for; > + debuggin/troubleshooting).; >; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245614869>:; >; > > + List of lists of [collapse operator,collapse operator rate] pairs; > +; > + e_ops : list of :class:`qutip.Qobj` / callback function; > + List of operators for which to evaluate expectation values.; > + The states are reverted to the lab basis before applying the; > +; > + args : *dictionary*; > + Dictionary of parameters for time-dependent Hamiltonian; > +; > + time_sense : float; > + Experimental. Value of the secular approximation (in terms of system; > + frequency 2*np.pi/T) to use when constructing the rate matrix R(t).; > + Default value of zero uses the fully time-independent/most strict; > + secular approximation.; > +; > + quicksolve: Boolean; >; > Input that change how the computation is done should be in options.; > ------------------------------; >; > In qutip/solver/flimesolve.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245616491>:; >; > > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + except KeyError:; > + total_R_tensor[key] = np.reshape(flime_FirstTerm - (1 / 2); > + * (flime_SecondTerm +; > + flime_ThirdTerm),; > + (Hdim**2, Hdim**2)); > + return total_R_tensor; > +; > +; > +def flimesolve(; > + H,; > + rho0,; > + taulist,; > + T,; > + Nt=None,; >; > There is no docstring entry for Nt.; > ------------------------------; >; > In qutip/solver/fl",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847:7767,depend,dependent,7767,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612045847,2,['depend'],['dependent']
Integrability,"in that extreme example you gave I guess you are just seeing numerical error from the ODE solver which is sensitive to some small difference in how the Liouvillian is being constructed, if you decrease the tolerances in options the difference diminishes, I guess with something like,. options.atol=1e-15; options.rtol=1e-15. also, just fyi, when you send an array for the time-dependence mesolve() uses some cubic-spline fitting to ''fill in the gaps'' when needed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-808859776:377,depend,dependence,377,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-808859776,1,['depend'],['dependence']
Integrability,"ing logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:3323,depend,dependent,3323,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,4,['depend'],['dependent']
Integrability,"irst eigenvalues have really decreased which; > seems not logical because with the x added, the potential should be; > slightly higher. I also use in parallel the PySlise package for Python; > which enables to solve Schödinger equation and finds eigenfunctions and; > eigenvalues and it gives me :; > [ 3.01788 4.11151 5.32044 6.63324 8.02437 9.47380 10.96801 12.49776 ] (it; > was giving the good results for 1) and 2)); > So I don't understant why qutip doesn't give me the same result, I know I; > use two different methods; qutip is just finding eigenvalues of a matrix; > and PySlise solve differential equations but when I don't use displacement; > operator both always give the same result. I tried to write the; > displacement operator my self with the create & destroy operators and the; > Glauber formula because I noticed that the commutation relations were not; > respected cause of the truncation but I didn't work.; >; > If anyone has any ideas I would be very grateful, I have already spent a; > lot of time looking and I am getting desperate.; > I thank you for reading my message, I apologize for any spelling mistakes; > that may remain in my message, (I am in bachelor and English is not my; > native language); >; > *To Reproduce*; >; > import qutip as qtp; > import numpy as np; > H = qtp.displace(8,3)*qtp.num(8)*(qtp.displace(8,3).dag())+0.5*qtp.qeye(8)+qtp.position(8); > print(H.eigenenergies()); >; > The terminal out put is; >; > [-1.94563502 0.44017316 2.61960688 4.31137988 4.99244818 6.16377699; >; > 7.35499586 8.06325407]; >; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1597>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABG3YHM6CY56VDDL3JGHFNDTWDJK3ANCNFSM47ZSOL6Q>; > .; >. -- ; -----------------------------------; Senior Research Scientist; RIKEN, Japan; Research Homepage <http://dustygeeks.org/Neill/?page_id=21>",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1597#issuecomment-873889697:2911,message,message,2911,https://qutip.org,https://github.com/qutip/qutip/issues/1597#issuecomment-873889697,2,['message'],['message']
Integrability,"is about the conversion of operators into operator-kets when moving to the superoperator formalism.; - In theory it should recognise a suitable `dims`, but right now construction will be faster if you provide `type='super'` as well. Construction speed is hugely improved in `dev.major`. You only need to define `superrep` if you're giving us a Choi (`superrep='choi'`) or chi (`superrep='chi'`) matrix instead.; - No, it should really be any indexable quantity (requiring list is a historical artifact, not a conscious choice). The entire parsing structure of dimensions objects are going to change in 5.0 (though the list structure will still work). This should even give you more freedom, if you need it - I've got some plans for vastly improved handling of restricted-entry Hilbert spaces (basically spaces that are small embeddings into a larger space that's all 0).; - I am very strongly against accepting this (like I said above):. > Oh, one thing that I'd like to suggest we _don't_ do: use this interface to _implicitly_ create `Qobj` inside our functions.; ; To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. You can see that it didn't work as intended, because they've had to add `__array_function__` and other additional methods on top to start to make it work, and it's still not perfect - even `scipy.sparse` have/had problems implementing them. While it might work in your particular case, making sure that nothing funny happens in the abstract across _all_ possible implementors of the interface while still having it do something useful is a very tricky problem, as evidenced by Numpy. Any conversion is going to be lossy for some people (perhaps not you, but it will be for others), and that means the behaviour for users will be surprising in some cases. In my opinion, if we're going to have a `__qutip_qobj__` interface, the interface should be defined for one operation only, and should never be called implicit",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:1734,interface,interface,1734,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['interface'],['interface']
Integrability,"is is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using what",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:10881,interface,interface,10881,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['interface'],['interface']
Integrability,"itten it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/k",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6221,integrat,integrator,6221,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Integrability,"just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use othe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:11819,Integrat,Integrator,11819,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,4,"['Integrat', 'integrat']","['Integrator', 'integration', 'integrator']"
Integrability,"just to add, I had a reason to make the whole RHS in heom time-dependent recently, so i had to revert to the kronecker product of a big matrix and each Qobjevo, losing the nice fast RHS construction. so am keen to give this coupled ode approach a try!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2384#issuecomment-2307925552:63,depend,dependent,63,https://qutip.org,https://github.com/qutip/qutip/issues/2384#issuecomment-2307925552,1,['depend'],['dependent']
Integrability,"k for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5517,depend,dependence,5517,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['depend'],['dependence']
Integrability,"ks directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:11089,interface,interface,11089,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['interface'],['interface']
Integrability,"le for all known types automatically; when it's asked to do say `kron` on two types it doesn't have a specialisation for, it'll cast the inputs through a path of least weight into a specialisation it _does_ know, and then use that. The desired casting rules and preferred output types can be altered dynamically at run-time as well. While I put a lot of effort into making this as fast as possible (and naturally a constant-time operation with respect to the number of known types and specialisations), of course the penalty we pay is a small run-time cost of type look-ups and dispatch (<1µs, but that's dwarfed by the cost of the operations themselves). We will have a hook for creating ""data-layer types"" out of arbitrary inputs, but we weren't heavily focussing on this at all; it seems rather too special a case to have _another_ magic interface for, and we can basically just reuse `__array__` for it - ""data-layer types"" are essentially just ""matrix-like"" objects. It also isn't appropriate for the situation you're describing here, because your own objects have additional ""quantum-specific"" attributes associated with them, similar to the extra stuff that `Qobj` contains. If you want to see more of this, it's in the `dev.major` branch. ---. Defining an interoperable new public interface I think is quite a big task, since it's inherently got to be future-proof. I'm definitely +1 on us having one, and having some discussion about it before a 5.0 release. I'm most concerned with how we can do it in a manner that's useful without stymieing our own ability to iterate and improve. It's harder for downstream packages to support multiple versions of a magic interface than it is for them to changing call QuTiP library functions; with deprecation warnings we can have multiple valid methods for doing the same thing alive in the library at once, but we can't detect what version of an interface a downstream package requires (not keen on the idea of a `__qutip_qobj_api_version__` flag!!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:7359,interoperab,interoperable,7359,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,4,"['interface', 'interoperab']","['interface', 'interoperable']"
Integrability,"les in QuTiP follow the pep8 standard and wrap two newlines for top-level functions. I am in favor of the pep8 standard and have two newlines. @ajgpitch what do you suggest?. Please remove the helper function `count_filled` without the test if it is not required. We aim to test as much as possible and remove redundancy in code. About `__all__`, I will shift all the rest in a new PR and we can keep yours as it is now. Coming to the more important discussion regarding the `class` based implementation, I have started pushing for similar approaches in newer modules such as [qutip.models.piqs](https://github.com/qutip/qutip/blob/master/qutip/models/piqs.py). I am also working on a new non-Markovian method which requires a class. Something of that sort is already used in `qutip.nonmarkov.heom`. I understand that many of qutip's solvers are written to be isolated functions but that should not mean that we should not write code to fully use the object oriented framework Python provides. Moreover, I noticed that you have to rewrite wrappers for the functions anyways to deal with repeatedly calculating things such as `scattering_probability` which clearly can be made much more compact if we use a class based approach. I am not making this suggestion just for the minor performance improvement. It improves the organization of the code, allows greater flexibility in adding new things to an existing class and modifying it easily. In terms of user experience, this means less clutter in the code and verbosity of arguments. You can initialize something once and keep re-calculating things by dynamically changing the parameters and calling the `class` method. If it does not hurt to slowly shift in this direction then I think we should go for it. If there is an alternative reason for not having classes then please let us know as the cons @bencbartlett mentions has more to do with following qutip precedent than some fundamental disadvantage in performance or use. @ajgpitch @nonhermitian",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384860713:1754,wrap,wrappers,1754,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384860713,1,['wrap'],['wrappers']
Integrability,"little fragile; doing this means we have to guarantee that at _no point_ is the `ctrl_array` object copied. If you wanted to branch off execution part-way through the iterator, you'd have to copy the whole state, and then you'd lose your reference to the control array unless you kept manually walking the structure of the time-dependent object (internally it gets converted into a `QobjEvo` Liouvillian) to retrieve it. The other problem is that `state0` and the `Qobj` parts of the Hamiltonian aren't mutable; the preprocessing of `mesolve` means that none of those objects will exist inside the integrator loop. That's fine for this use-case, but it's not very general. These problems of mutability would apply to callback functions as well. A different way of using `yield` or callback function would be to really lean into a co-routine sort of pattern. So `mesolve` internally would look like; ```python; def mesolve(H, state, times, c_ops, e_ops, options):; # [... set up problem ...]; integrator = scipy.integrate.ode(...); for time in times[1:]:; state = integrator.step_to(time); instructions = yield _mesolve_output_state(state, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be like; ```python; solver = mesolve(H, rho0, times, c_ops); try:; result = next(solver); while True:; next_control = krotov.get_next_control(result.time, result.state); result = solver.send([; ('update-arguments', {'control': next_control}),; ('update-hamiltonian', ...),; ('add-c_op', ...),; # possible examples of API commands; ]); except StopIteration:; pass; ```; That's not super user friendly, but it _is_ nicely re-entrant. You'd have a single object you can copy and branch off, and QuTiP would be able to update the relevant objects for you at any given time. Still, I don't think it's a good strategy in general - we'd have to _very_ rigorously define the ""instructions"" API, and it would be pretty awkward to use. It would also be",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:1830,integrat,integrator,1830,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,1,['integrat'],['integrator']
Integrability,"lose your reference to the control array unless you kept manually walking the structure of the time-dependent object (internally it gets converted into a `QobjEvo` Liouvillian) to retrieve it. The other problem is that `state0` and the `Qobj` parts of the Hamiltonian aren't mutable; the preprocessing of `mesolve` means that none of those objects will exist inside the integrator loop. That's fine for this use-case, but it's not very general. These problems of mutability would apply to callback functions as well. A different way of using `yield` or callback function would be to really lean into a co-routine sort of pattern. So `mesolve` internally would look like; ```python; def mesolve(H, state, times, c_ops, e_ops, options):; # [... set up problem ...]; integrator = scipy.integrate.ode(...); for time in times[1:]:; state = integrator.step_to(time); instructions = yield _mesolve_output_state(state, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be like; ```python; solver = mesolve(H, rho0, times, c_ops); try:; result = next(solver); while True:; next_control = krotov.get_next_control(result.time, result.state); result = solver.send([; ('update-arguments', {'control': next_control}),; ('update-hamiltonian', ...),; ('add-c_op', ...),; # possible examples of API commands; ]); except StopIteration:; pass; ```; That's not super user friendly, but it _is_ nicely re-entrant. You'd have a single object you can copy and branch off, and QuTiP would be able to update the relevant objects for you at any given time. Still, I don't think it's a good strategy in general - we'd have to _very_ rigorously define the ""instructions"" API, and it would be pretty awkward to use. It would also be a nuisance for extensibility, probably; the intermediate state and instructions of `mesolve` would just more APIs we have to maintain and keep constant. Note that you can achieve the exact same thing with a callback function pat",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:1991,integrat,integrator,1991,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,2,['integrat'],['integrator']
Integrability,"lready. We'd have to modify our procedures a little bit (we're mostly concerned with constructing the underlying matrices at the moment), but it's a smaller change in behaviour. Disadvantages that I can think of:; - It's got linear scaling with the number of conversions registered, so it's in theory possible to register ""too many"" and cause a slow down. In reality, this will be a very small effect (`Qobj` construction time will be dominated by copying data into new formats), and I think the benefits of a priority queue of allowed converters outweighs it in convenience for users.; - It involves some global state of the `qutip` library, which _may_ cause problems for multiprocessing if somebody tries to register a `lambda` converter (can't pass through `pickle`, though I'm not 100% on whether module-level stuff needs to), and of course there's the query of what happens when converters are registered in separate processes. We already have this ""problem"" in 5.0 though, because that's how the entire underlying dispatch mechanism is handled; we can just require that converters must be pickle-able.; - If a downstream package wants to lazily `import qutip` (we're a pretty heavy import right now), it's harder in this method; you'd basically have to ask a user to call `otherlibrary.register_qutip()`. For one, I'm going to put some effort into making `import qutip` take much less time for 5.0 (the main problem right now is we essentially eagerly import all of scipy and IPython if it's around), so that'll make it a bit easier. For two, a single initialisation statement isn't _necessarily_ a terrible thing; users can decide for themselves if they want to install the implicit integrations, but this is definitely an inconvenience relative to the magic method. ---. Apologies that I'm not responding super quickly to everything - I'm not the only main QuTiP dev (and I can only work on QuTiP occasionally anyway), so I'm giving others time to read and think about the proposals as well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:8476,integrat,integrations,8476,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['integrat'],['integrations']
Integrability,"lution that works for both. > * What is the advantage of this over using the existing superoperator representations?. I don't think there is one, per se, in the same sense that there's no strict advantage to superoperators over Choi operators over χ operators — each is useful in different contexts, such that QuTiP supports all three in order to allow users to pick the right representation for their problem. Similarly, operator-sum decompositions of channels are quite common and are useful in some special circumstances (e.g.: expressing a Choi-rank–sparse channel without requiring a 4^n × 4^n matrix). In the Quantum Development Kit, for instance, we use `qutip.to_kraus` to express user-supplied superoperators, Choi operators, and χ operators in terms of an operator-sum decomposition that is then passed to the underlying open systems simulator. While the operator-sum decomposition is quite useful internally to the simulator, that's not a detail that we want to enforce upon users, such that QuTiP's support for multiple superoperator representations is quite useful in presenting a user-friendly interface for configuring noise models. > * Can this advantage be carryied over into, e.g., using solvers, eigenvalue finding, etc?. I'm not sure I entirely follow, sorry?. > * Would it be better to have a new object, sort of like QobjEvo but for sums rather than evolutions?. Perhaps, but at least for the operator-sum decomposition of channels, it would feel a bit weird to me to have superoperators, Choi operators and χ operators all have one Python type, but for Kraus representations to have a fully different Python type. Whether I represent Λ(ρ) by 0.9 𝟙ρ𝟙 + 0.1 𝑋ρ𝑋 or {√(0.9) 𝟙, √(0.1) 𝑋}, they both represent the same function from density operators to density operators. > * How do you see the various mathematical operations working?. My thought here would be that an operator-sum decomposition of a channel is just that: a representation of a channel. Thus, if `lambda_` is a `Qo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1673#issuecomment-927981574:2522,interface,interface,2522,https://qutip.org,https://github.com/qutip/qutip/issues/1673#issuecomment-927981574,1,['interface'],['interface']
Integrability,"lves copying rather more data _before_ the call (to construct the constant matrix once), but if the integrator would need to take many intermediate time steps, I expect it would win out. Would something like this work for you?; ```python; times = [0, ...]; # Liouvillians for parts you have control over; control_liouvillians = [qutip.liouvillian(h) for h in control_hamiltonians]; # The time-dependent Hamiltonian for stuff you're not controlling; base_hamiltonian = qutip.QobjEvo([H0, [H1, time_dependence], ...]); # Turn it into a Liouvillian once, so we don't repeat the cost; base = qutip.liouvillian(base_hamiltonian, collapse_operators); state = ...; options = qutip.Options(store_states=False, store_final_state=True); for prev, time in zip(times[:-1], times[1:]):; controls = krotov.get_next_controls(time, state, ...); current_liouvillian = base.copy(); for control, operator in zip(controls, control_liouvillians):; current_liouvillian += control * operator; # ^^^^^^^^^^^^^^^^^^; # each of these terms is a single time-independent Qobj,; # and the sum is a single QobjEvo with all the uncontrolled; # time dependence already handled.; state = qutip.mesolve(current_liouvillian, state, [prev, time], options=options).final_state; ```. By giving `mesolve` the Liouvillian instead of the Hamiltonian and collapse operators separately, you've already done most of its setup, so the time penalties should be much less than the current system (i.e. you avoid several Kronecker products and safety checks on the time-dependence terms because you've done them once at the start). In theory, that should already work from at least 4.5 onwards, and likely most of it will work from 4.4. In the 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internal",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:1825,depend,dependence,1825,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['depend'],['dependence']
Integrability,"ly useful and will simplify the code inside the propagator a bit. I removed `.evolve_dm`. > **For `.sys_dims`**:; > ; > The meaning of what `.sys_dims` returns is already unclear in this PR. The docstring says its the dimension of the system. Practically I assume that to mean ""the dimension of the initial state or dm passed to .run()"". However, in the PR its used as the size of the propagator. These are the same if there is no environment, but will be different otherwise.; > ; > I suggest we keep `.sys_dims` but document that it is the dimensions of the system excluding any environment. Changed in HEOMSolver. Since environment only means something for HEOM, so it took some time to understand what it referred to. Adding the change elsewhere would be confusing. ; > **Specifying which solvers support propagators**:; > ; > Currently we have a list of explicit checks at the top of the propagator constructor, but we could instead have a ""propagator_class"" attribute on solvers the same way we have a ""result_class"" and then that could be set to some suitable default for ordinary solvers and None or ""PropagatorNotSupported"" for solvers that don't support them. There is only one class for propagator and I don't see us needing any other, so there is no use for a `propagator_class` . We could have a `support_propagator` flag, but I prefer it this way as we can set a special error message for `HEOMSolver`. ; `HEOMSolver` is the only exceptions where we could support it but choose not to take the time to implement it. ; All deterministic solver we have can be used for propagator, trajectories solver don't have a properly defined propagator for single trajectory and I don't see any use to create a propagator for the averaged states. It would take a lot of trajectories to obtain what is effectively mesolve's propagator. . We could add the flag to the integrator instead, some krylov integrator cannot evolve 2D states, but it's the only one we have plan for and it's not merged yet...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120:1798,message,message,1798,https://qutip.org,https://github.com/qutip/qutip/pull/1999#issuecomment-1335766120,3,"['integrat', 'message']","['integrator', 'message']"
Integrability,"m two-level system ... ok; > > > Diagonalization of composite systems ... ok; > > > von-Neumann entropy ... ok; > > > Linear entropy ... ok; > > > Concurrence ... ok; > > > Mutual information ... ok; > > > Conditional entropy ... ok; > > > expect: operator list and state list ... ok; > > > expect: operator and density matrix ... ok; > > > expect: operator and ket ... ok; > > > expect: operator list and state ... ok; > > > expect: operator list and state list ... ok; > > > expect: operator and state list ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > gates: expand 1 to N ... ok; > > > gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; > > > gates: expand 2 to N (using swap) ... ok; > > > gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; > > > gates: swap gate ... ok; > > > Graph: Breadth-First Search ... ok; > > > Graph: Graph Degree ... SKIP: Networkx not installed.; > > > Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (Bucky) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (boost) ... ok; > > > Monte-carlo: Constant H with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constan",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:3007,depend,dependent,3007,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['depend'],['dependent']
Integrability,"m_ a big fan of interfaces. Python doesn't give us the tools to do it properly, but we can emulate it, like you suggest. I have a few more considerations to add to a discussion:. 1. we can't have _proper_ namespacing, but let's at least make the magic name `__qutip_qobj__` so we realistically prevent any chance of a clash - by nature of a centralised package manager, we can be sure that no other package will ever be called QuTiP. If it's a hidden name, it doesn't matter how ""pretty"" it is.; 2. having the check in `__init__` might not be correct - it feels like it belongs in `__new__` to me. `__init__` modifies an object that's already been created in Python-space, whereas `__new__` allows you to replace the object creation entirely.; 3. we need to take care to do this in a way that still allows QuTiP to iterate and improve `Qobj.__init__` between major versions. If _we_ define a public interface like this rather than having external libraries provide their own implementations, it puts the burden of maintain compatability on us, and takes it off downstream packages, who are able to define version requirements. For example, calling `otherlib.obj.toqobj()` and having it fail with QuTiP next.0 makes it clear that `otherlib` isn't compatible with QuTiP next, whereas `Qobj(otherlib.obj)` failing would (rightly) be taken as QuTiP being at fault, which stymies our development a little because we're forced to be more conservative than we otherwise would be with our constructor. This is going to be a particular problem with handling `dims`, since we're talking about completely changing the structure for how that's managed internally to help us in other parts of our library.; 4. what will happen with all the other keyword arguments passed to the `Qobj` constructor? We have probably three choices:; - pass all keywords on (which is a big problem in conjunction with the point above);; - pass none of them on, call `__qutip_qobj__` within `Qobj.__new__`, and then pass through `Qobj",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:2505,interface,interface,2505,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['interface'],['interface']
Integrability,"ments passed to the `Qobj` constructor? We have probably three choices:; - pass all keywords on (which is a big problem in conjunction with the point above);; - pass none of them on, call `__qutip_qobj__` within `Qobj.__new__`, and then pass through `Qobj.__init__` like normal, but now with our new `Qobj` instance as the argument. This would have a slightly nontrivial interaction with the `copy` keyword, I imagine, but not an unsolvable one.; - error if you pass something that defines `__qutip_qobj__` in addition to keywords. This isn't ideal because it gives `Qobj` special treatment - additional kwargs can override `Qobj` settings if they're compatible. ---. Just in the interest of completeness, let me also just bring up some of the sweeping changes we'll bringing in in QuTiP 5.0 as well, which massively overhaul how `Qobj` is constructed, and how its data is stored. These aren't _directly_ applicable to the current discussion, but they're worth keeping in mind since they're a huge overhaul of how things will be handled, and may have some implications for how implementors of this interface might behave. The new `Qobj` will no longer have the same `fast_csr_matrix` type as its `data` attribute, but instead will have an extensible data type. The two that will be distributed with the library will be `Dense` and `CSR` (which simply do what they say on the tin), and all linear algebra operations between multiple `Qobj` are handled by a custom multiple-dispatch system that allows additional specialisations to be added in a similar way to Julia. Say you want to define `matmul` between `Dense` on the left and `CSR` on the right to produce a `CSR` output (a specialisation that we likely won't ship with because it's unlikely to be efficient). You'd write your function; ```python; def matmul_dense_csr_csr(left, right):; ...; return out; ```; and then because unlike Julia it's not built-in, you just manually add it to the dispatch table for `matmul`:; ```python; qutip.data.matm",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:4449,interface,interface,4449,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['interface'],['interface']
Integrability,"most similar to this), but also `ptrace` and `partial_tranpose`, which can be seen as special cases of this exact same type of tensor contraction (not to mention `tensor_contract`!). The other thing from a code perspective is that this doesn't use the data-layer in the intended manner. A lot of this may be because our documentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by plug-in data types (TF/CuPy/etc), installed separately to QuTiP; 3. it will be more general, and easier to maintain; the current `subsystem_apply`, `partial_transpose`, `ptrace`, `tensor_contract` and this can all become special cases of this backing `einsum`-like routine.; 4. after we've implemented new dimensions objects, we'll be able to use a more standardised description of how to refer to individual subspaces of a Hilbert space, which will provide a more consistent UX across t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:2834,wrap,wrapper,2834,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['wrap'],['wrapper']
Integrability,"mple) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (Bucky) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (boost) ... ok; > > > Monte-carlo: Constant H with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H with constant collapse ... ok; > > > Monte-carlo: Constant H with single collapse operator ... ok; > > > Monte-carlo: Constant H with single expect operator ... ok; > > > Monte-carlo: Collapse terms constant (func format) ... ok; > > > Monte-carlo: Collapse terms constant (str format) ... ok; > > > Monte-carlo: Time-dependent H (func format) ... ok; > > > Monte-carlo: Time-dependent H (str format) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:4458,depend,dependent,4458,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['depend'],['dependent']
Integrability,"much considered this, but there are certainly ways of doing it. Essentially `pytest` goes through a few stages when you run `pytest` on the command line: discovery, generation, running, reporting, and it has lots of hook functions we can define to modify the state inbetween and during each of them. Default discovery is as you say: files in alphabetic order (I _think_ it's strictly shell globbing order, but generally that's alphabetical), then the contents of each file in order defined by the shared fixtures used. We tend not to need large amounts of state to be held in fixtures, so our files largely just run top-to-bottom. We can add in some logic into the collection-time hooks to re-order the tests. There's a `pytest` plugin called [`pytest-ordering`](https://github.com/ftobia/pytest-ordering), but it looks like it's not really actively maintained any more and the logic is pretty straightforwards, so perhaps not a terrible idea just to do it ourselves. Maybe I'm not javascript enough to enjoy a good micro-dependency?. It would also be quite nice if we could define the whole logical structure of the `qutip` package, to help keep everything in order as the package grows larger. By that I generally just mean the internal structure, though cutting down the amount of global names exported could also be done in a sort of organisation like this: we could get a little more aggressive at not exporting things like `enr_*` or `three_level_*` to the global namespace, but instead put them in submodules. While I think this isn't what you were asking, it's also quite easy to just run specific parts of the testing suite if you're doing it from the command line. You can do `pytest file.py` to run only those in a specific file, or `pytest -m ""mark logic""` (e.g. `pytest -m ""not slow""`) to hit specifically marked tests. Perhaps most powerfully, and one I use a lot when writing these, you can do `pytest -k ""substring logic""` to run every test (potentially in the specified file(s)) that ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386:2218,depend,dependency,2218,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-601793386,1,['depend'],['dependency']
Integrability,"n at seemingly non-deterministic times.; - Running files in a slightly different interpreter, running within a test runner with differing numbers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation completes (it prints ""500""), and _then_ the fault occurs. This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens. This is typically not detected until the object is freed, when the Python allocators do a little bit of checksumming. I think that in _all_ cases we're seeing the failure come from the garbage collection, but I can't be 100% certain - note that this almost certainly means the failure is somewhere completely different, and it's only _detected_ at garbage collection. Here is the output of a Python 3.8 crash on the `Malloc.py` file with some additional debugging enabled. This is with Python 3.8.8, Numpy 1.19.2, Scipy 1.6.2 and MKL:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler Malloc.py; 500; Debug memory block at address p=0x7fa2e02de610: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7fa2e02ed64f are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUC",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:2081,message,message,2081,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['message'],['message']
Integrability,"n my points 1 and 2 above, I don't think QuTiP should go this route. You can, however, set these properties to `None` to unconditionally tell Numpy that the object is incompatible with ufuncs. I think this might be a good way for us to go. ## What other libraries do. Provide everything:; - Dask: mostly trying to provide a numpy-like distributed array class. Its arrays mostly support the numpy interface, including how ufuncs should act on them. Providing `__array__` seems odd to me here in the context of other libraries, since that may easily blow out memory.; - PyTorch: CPU/GPU accelerated tensors for ML. This is a bit beyond my experience to comment on why they made the choices they did.; - Xarray: strongly extends the idea of structured arrays; this to me is the best example of how `__array__` was intended to be used.; ; Provide some things:; - Qiskit: (just changed behaviour in Qiskit/qiskit-terra#5402) implements `__array__` (but nothing else) for things that are like our `Qobj`. Discussed more at the top.; - CuPy (CUDA operations on ndarray-likes) explicitly does not allow implicit conversion to `np.ndarray` (see cupy/cupy#3421) for performance reasons, but does implement `__array_ufunc__` and `__array_function__`.; - pydata/sparse (nd-sparse _arrays_ instead of scipy.sparse's sparse _matrices_): always implement `__array_ufunc__` and `__array_function__` because they are trying to be a sparse version of `ndarray`. By default, they do not implement `__array__` for performance/memory reasons, but they do allow turning it on by an environment variable. Do not implement anything:; - JAX (autodiff) tries really hard to replace numpy rather than interoperate with it; - scipy.sparse matrices are intended for use with a _matrix_ interface, not a broadcast-able _array_ interface. They specifically document that they will not provide this interface (see scipy/scipy#12279). Somewhat weirdly, they do have custom methods for some elementwise ufuncs, though (like `np.sin`).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:7727,interface,interface,7727,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,3,['interface'],['interface']
Integrability,"n't have all the same multiple-dispatch niceties that Julia has, so at the end of the day, we have to add in a method with a ""magic"" name somewhere, and it all just comes down to choosing the name of the method. The downside to having a magic name is that it means we have to eschew proper namespacing; what if another library one day wants to call their interface the same thing? Then it's completely impossible for a downstream library to interoperate with both. Having conversions be a non-special method of the downstream class, and leaving our constructor unaware of them alleviates that issue. Numpy can get away with squatting the `__array__` name because they're _huge_, but I would argue that if we do it, we could actually _harm_ the quantum software ecosystem in the long-run - what happens when a package better than QuTiP comes along that wants to call its objects `Qobj` as well? Let's face it - it's a pretty straightforward name!. All that said, I am very aware that not everyone agrees with me on this, and I _am_ a big fan of interfaces. Python doesn't give us the tools to do it properly, but we can emulate it, like you suggest. I have a few more considerations to add to a discussion:. 1. we can't have _proper_ namespacing, but let's at least make the magic name `__qutip_qobj__` so we realistically prevent any chance of a clash - by nature of a centralised package manager, we can be sure that no other package will ever be called QuTiP. If it's a hidden name, it doesn't matter how ""pretty"" it is.; 2. having the check in `__init__` might not be correct - it feels like it belongs in `__new__` to me. `__init__` modifies an object that's already been created in Python-space, whereas `__new__` allows you to replace the object creation entirely.; 3. we need to take care to do this in a way that still allows QuTiP to iterate and improve `Qobj.__init__` between major versions. If _we_ define a public interface like this rather than having external libraries provide their ow",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:1622,interface,interfaces,1622,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['interface'],['interfaces']
Integrability,"ndarray(dtype=object)` arrays behaved when containing objects that all implemented `__array__`. To get around _some_ of these problems, they've introduced `__array_function__` and `__array_ufunc__`, though to me at best these are bandages. Those two concerns aren't immediately applicable in QuTiP, but they're sort of indicative of potential problems when using a `__qutip_qobj__` method implicitly in functions like `Qobj.__add__`. These are where it becomes very evident that Julia-style programming doesn't apply in the same way in Python. Python is only a single-dispatch language, so `a + b` will dispatch using the table of `a` predominantly, whereas `b + a` will dispatch on `b`. In a proper multiple-dispatch library the rules are separate to the classes, so neither class is called preferentially, there's just one rule and either library can define it. My point with this is that if `Qobj.__add__` has a case where it handles Qobj-like types, then we prevent the other library from overriding the method. Multi-methods like this simply don't work the same in Python as they do in Julia, so even if `Qobj` implements interfaces from a variety of other libraries, we'd never get good consistent behaviour with functions like this. Operations that ought to be commutative like `+` would become dependent on operand order. To some degree, implementing the interface would be a guarantee that an object would always be able to follow QuTiP's semantics, otherwise it would just be annoying to users - _sometimes_ an object would be able to be used implicitly, sometimes not. I know the ""Python way"" is supposedly ""try it and see"", but if you're doing any serious development, that quickly becomes unreasonable if a type works some times, but not others. The other part of the Python way is ""explicit is better than implicit"", and here having an explicit type conversion to me is just being explicit about which library's semantics you want to follow, which is easier to read and easier to debug.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825646108:1744,interface,interfaces,1744,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825646108,3,"['depend', 'interface']","['dependent', 'interface', 'interfaces']"
Integrability,"ng the SolverOptions class is an excellent idea, but I think the PR currently doesn't go far enough and ends up with the solver classes, the integrator classes and the solver option classes required to share too much internal state with each other. As a next step to try untangle things, I suggest the following:. - Let's remove the `known_solvers` and the solver `name` from the SolverOptions and instead have the base solver pass the allowed options with defaults in to the SolverOptions constructor directly. If the allowed options list is `None`, then we can allow all options (for the convenience of users who really want to make their own SolverOptions instances).; - Having the options able to notify a listener of changes seems great -- let's keep that.; - When a solver is created, let's have the base solver create a new SolverOptions instance, either from a dictionary or another SolverOptions instance, but with the allowed options and defaults now specified.; - To deal with the integrator options, let's go back to having a single option named `ode`, but have the value of `ode` have type `SolverOptions`, and be a child of the solver options (if the child has a value modified, it should notify the parent of the change).; - For convenience, when passing options as a dictionary, one should be able to use `{""ode.method"": ""vern9""}` or `{""ode"": {""method"": ""vern9""}`. I think that should be enough to disentangle things from each other. The base solver would need to update the integrator if integrator options change and deal with any changes to the base options. It's not completely clear to me whether the result options should also be sub-options or just be included in the solver options. I'm happy for them to be included in the solver options, as long as the solver options are passed to the result class constructor. That keeps things a bit simpler and if solver needs new result options it can always create its own result sub-class and just process its options there. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945:1027,integrat,integrator,1027,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1173137945,3,['integrat'],['integrator']
Integrability,"nopy-1.5.4.3105.macosx-x86_64/Canopy.app/Contents/lib/python2.7/distutils/dist.py"", line 953, in run_commands; > self.run_command(cmd); > File ""/Applications/Canopy.app/appdata/canopy-1.5.4.3105.macosx-x86_64/Canopy.app/Contents/lib/python2.7/distutils/dist.py"", line 972, in run_command; > cmd_obj.run(); > File ""/Users/rjmagya/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/Cython/Distutils/build_ext.py"", line 163, in run; > _build_ext.build_ext.run(self); > File ""/Applications/Canopy.app/appdata/canopy-1.5.4.3105.macosx-x86_64/Canopy.app/Contents/lib/python2.7/distutils/command/build_ext.py"", line 337, in run; > self.build_extensions(); > File ""/Users/rjmagya/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/Cython/Distutils/build_ext.py"", line 171, in build_extensions; > self.build_extension(ext); > File ""/Applications/Canopy.app/appdata/canopy-1.5.4.3105.macosx-x86_64/Canopy.app/Contents/lib/python2.7/distutils/command/build_ext.py"", line 496, in build_extension; > depends=ext.depends); > File ""/Applications/Canopy.app/appdata/canopy-1.5.4.3105.macosx-x86_64/Canopy.app/Contents/lib/python2.7/distutils/ccompiler.py"", line 574, in compile; > self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts); > File ""/Applications/Canopy.app/appdata/canopy-1.5.4.3105.macosx-x86_64/Canopy.app/Contents/lib/python2.7/distutils/unixccompiler.py"", line 122, in _compile; > raise CompileError, msg; > ImportError: Building module qutip.cy.spmatfuncs failed: [""CompileError: command 'gcc' failed with exit status 1\n""]; > import numpy as np; > ; > from qutip import *; > Traceback (most recent call last):; > File """", line 1, in ; > File ""/Users/rjmagya/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/qutip/init.py"", line 62, in ; > qutip.settings.ipython = False; > AttributeError: 'module' object has no attribute 'settings'; > ; > ######################; > ; > This seems similar to the build error in Installation on OS X with Homebrew scr",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/382#issuecomment-148179436:4192,depend,depends,4192,https://qutip.org,https://github.com/qutip/qutip/issues/382#issuecomment-148179436,1,['depend'],['depends']
Integrability,"obj(data, dims=dims, copy=False, type='oper', isherm=...); ```; providing `data` is actually of a valid (`fast_csr_matrix`) format. Technically the `Qobj.data` attribute will be a new object that wraps the same numpy arrays as was passed, rather than the same `fast_csr_matrix`. In various forms, `expect` already does check the Hermicity, that's why `mc-dm` is careful to set it to avoid recalculating it. The expect functions in `qutip.expect` do this directly, and aren't aware of column-stacked density matrices - they'll just raise a TypeError. `mesolve` and `mcsolve` now bypass the `Qobj` stage and go direct to Cython - in 5.0 it might not be a terrible idea to route everything back through the `Qobj` form, since the performance issues there are solved (a column-stacked dense matrix can be directly wrapped by an f-ordered `Dense` type), and it's the natural central point of the code (and those parts are called from Python-space anyway, so no C concerns). Here though, the problem is actually that the expectation generator in `mesolve` correctly calculates the dtype of the output expectation array using both the state and the expectation operator, but then it does it incorrectly in the loop, and passes the hermicity down to Cython using only the expectation operator, which promptly throws out the complex part. So setting `fast='mc-dm'` in `Qobj` is a symptom of the same root cause as the problem here, rather than the cause itself. At the start of `mesolve` we don't assume that the state is Hermitian, but then inside the integration loop we do. We can still keep the speedup - if the output was created with a complex dtype, we can always safely say that we're passing in non-Hermitian operators, even if coincidentally at one timestep they happen to be anyway. See https://github.com/qutip/qutip/blob/d285e96b3afc61afd1deceef61d9635f9d9aa505/qutip/mcsolve.py#L525-L529 and https://github.com/qutip/qutip/blob/d285e96b3afc61afd1deceef61d9635f9d9aa505/qutip/mesolve.py#L509-L511",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1460#issuecomment-796835048:1976,integrat,integration,1976,https://qutip.org,https://github.com/qutip/qutip/issues/1460#issuecomment-796835048,1,['integrat'],['integration']
Integrability,"ols.pyx. Error compiling Cython file:; ------------------------------------------------------------; ... DTYPE = np.float64; ^; ------------------------------------------------------------. qutip/cy/parameters.pxi:2:10: cimported module has no attribute 'float64'. Error compiling Cython file:; ------------------------------------------------------------; ... DTYPE = np.float64; ctypedef np.float64_t DTYPE_t. ITYPE = np.int32; ^; ------------------------------------------------------------. qutip/cy/parameters.pxi:5:10: cimported module has no attribute 'int32'. Error compiling Cython file:; ------------------------------------------------------------; ...; ctypedef np.float64_t DTYPE_t. ITYPE = np.int32; ctypedef np.int32_t ITYPE_t. CTYPE = np.complex128; ^; ------------------------------------------------------------. qutip/cy/parameters.pxi:8:10: cimported module has no attribute 'complex128'. Error compiling Cython file:; ------------------------------------------------------------; ...; ctypedef np.int32_t ITYPE_t. CTYPE = np.complex128; ctypedef np.complex128_t CTYPE_t. CTYPE = np.int64; ^; ------------------------------------------------------------. qutip/cy/parameters.pxi:11:10: cimported module has no attribute 'int64'; Traceback (most recent call last):; File ""./setup.py"", line 233, in <module>; ext_modules = cythonize(EXT_MODULES),; File ""/dev/shm/qutip/lib/python2.7/site-packages/Cython/Build/Dependencies.py"", line 1016, in cythonize; cythonize_one(*args); File ""/dev/shm/qutip/lib/python2.7/site-packages/Cython/Build/Dependencies.py"", line 1138, in cythonize_one; raise CompileError(None, pyx_file); Cython.Compiler.Errors.CompileError: qutip/cy/brtools.pyx; ```. Versions:; ```; Python 2.7.5 (default, Dec 3 2013, 08:35:16) ; [GCC 4.4.6 20120305 (Red Hat 4.4.6-4)] on linux2; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import numpy; >>> numpy.version.version; '1.13.1'; >>> import Cython; >>> print Cython.__version__; 0.26; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/723#issuecomment-317495769:2357,Depend,Dependencies,2357,https://qutip.org,https://github.com/qutip/qutip/issues/723#issuecomment-317495769,2,['Depend'],['Dependencies']
Integrability,"on makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the docstring of krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). To get very technical, Krotov's requirements are laid out in the documentation of the [`Propagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L125) abstract base class, [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162) being a particular example. In particular, the interface we define there is strictly for a single time step, makes no reference to `tlist` and we use ``H=[H0, [H1, u]]`` where `u` is a scalar for that particular timestep. However, I can easily write a wrapper around an `mesolve` that would work something along the lines of the pseudo-code from https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563:. ~~~; for (i, state) in enumerate(; mesolve([H0, [H1, ctrl_array]], state0, list); ):; # assuming `state` is at tlist[i]; new_val = calculate_control_value_for_next_step(state); ctrl_array[i] = new_val; ctrl_array[i+1] = new_val # ignoring IndexError; ~~~. So I don't think you'd have to worry about these details: any implementation with low overhead that would allow me to get the states from `mesolve` as well as tweak the control fields for the next time step should be sufficient. In particular, the `.step` that you discuss in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451 looks very much like it's going in the right direction! The one option from the earlier https://github.com/qu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:3866,interface,interface,3866,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['interface'],['interface']
Integrability,"or Newton polynomials). That work hasn't really been going anywhere lately, though. It may or may not end up being faster than `mesolve`, but it's certainly less flexible. So even then, an mesolve that can do single steps would still be great. I would also think that being able to do time steps would be exceedingly useful to *any* gradient-based optimal control scheme. Wouldn't it greatly simplify your own GRAPE implementation? I'm referring to the ""Object model"" in [Optimal Quantum Control in QuTiP](https://qutip.org/docs/latest/guide/guide-control.html?highlight=grape#optimal-quantum-control-in-qutip), specifically the `TimeslotComputer` (in fact, we looked at whether `TimeslotComputer` could be used for krotov at the time, but couldn't quite figure it out). I elaborated a little bit in https://github.com/qucontrol/krotov/issues/93#issuecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes ava",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:1938,depend,dependencies,1938,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['depend'],['dependencies']
Integrability,"or each stochastic collapse operator, but now it is also possible to do something more sophisticated, like in your milstein solver. I've edited your notebook so that it uses the standard (now modified) smesolve and your rhs functions for the milstein methods. http://nbviewer.ipython.org/6153688. Note that I still only use the rhs function for the contributions due to the stochastic collapse operators (both the deterministic and stochastic part), and it does not include the unitary part or the deterministic collapse operators (if those are given as well), so it is not quite what you suggested when proposing that the rhs should calculate \rho_{n+1}. Do you think this approach is reasonable, or do you see any problems with it?. Regarding your milstein implementation, it seems that it is only valid for homodyne detection, since your have hardcoded the d1 and d2 function into the rhs function. I've tried to separate the definition of the SDE (d1 and d2) from the implementation of the SDE integrator (rhs), and naively it seems like you could use the d1 and d2 functions in rhs_milstein to make it possible to use it with hetrodyne detection as well. Is there any difficulties in generalizing the milstein method and parameterize it in terms of d1 and d2 functions in this way?. I've also tried to use the smesolve_imp and smesolve_milstein with explicit=False in your original notebook, but I do not get resuls that agree with the other methods if I use these. Looking at the code for smesolve_imp, you do an inversion of some variant of the liouvillian to calculate Lsparse, what is the purpose of that calculation? And finally, I see you use expm in _smesolve_single_milstein_implicit: I think this should be avoided because it will be very computationally demanding for larger systems. If you are satisfied with how the new rhs functions work I'll merge the branch sme-rhs-restructuring into qutip master and then feel free to submit a pull request with your milstein rhs implementation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22088170:1770,integrat,integrator,1770,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22088170,1,['integrat'],['integrator']
Integrability,"oscillator in ground state ... ERROR; > correlation: legacy me and es for oscillator in steady-state ... ok; > correlation: comparing me and es for oscillator in steady-state ... ok; > correlation: legacy spectrum from es and pi methods ... ok; > correlation: comparing spectrum from es and fft methods ... ok; > correlation: comparing spectrum from es and pi methods ... ok; > correlation: comparing TLS emission correlations (str-list td format) ... In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:5033:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c: In function '__Pyx_BufFmt_ProcessT",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:3276,message,message,3276,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['message'],['message']
Integrability,"ostly equivalent). I've actually had to solve the equivalent problem of allowing multiple internal formats in the [Fortran QDYN package](https://www.qdyn-library.net), so I'm not sure why I didn't think of that in the first place ;-). I can definitely vouch for the efficiency gained by being able to switch internal sparse representations. So yeah, you'd definitely have the most flexible solution by allowing `Qobj.data` to use varying storage classes from object to object. Maybe the ""protocol"" could be for `Qobj.data` to be any subclass of the [scipy `spmatrix` base class]( https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.spmatrix.html#scipy.sparse.spmatrix)? Then the `Qobj` constructor would probably need an additional parameter `format` for the class that should be used to convert the `inpt` argument to the `data` attribute. The onus would then be on Scipy to provide a full matrix that is a subtype of `scipy.spmatrix` (just to keep the interface contract), and also to have `int64` versions of all their existing sparse classes. From a community standpoint, it would seem like one would get much more bang for the buck to have this problem solved inside SciPy, instead of doing a lot of low-level stuff in QuTiP -- at least if they're amenable to pull requests, but worst case you can still define necessary new `scipy.spmatrix` subclasses externally. Take all of my musings with a little grain of salt... I never really looked too deep into QuTiP's low-level internals, specifically where QuTiP is using Cython. Naively, I would sort of think that Cython would remain at the level of sparse linear algebra operations (and thus mostly in scipy) and that QuTiP could be mainly pure Python. Obviously, once you start implementing higher level things like time propagation or even optimal control in Cython, everything becomes a bit of a mess, because then you really do have to manually implement everything for every possible storage format (again, something I'm famili",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-383937610:1425,interface,interface,1425,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-383937610,2,"['contract', 'interface']","['contract', 'interface']"
Integrability,"plicit conversions. I really do appreciate the interest, and I _am_ keen to let us have better compatibility with the rest of the community, but there are a lot of design concerns that we're going to want to work on our side first - I just want to caution you in case you're trying to work towards a PR, because I'm not close to being happy to accept one, yet. If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries, and we'll want to write out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip.; >; > I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. I'm concerned from a user's perspective. QuTiP has a wide user base, and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvab",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:3921,message,message,3921,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['message'],['message']
Integrability,"pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t_off' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_tp' may be used uninitialized in this function [-Wmaybe-uninitialized]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14880.c:2142:11: warning: '__pyx_v_t' may be used uninitialized in this function [-Wmaybe-uninitialized]; > In file included from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarraytypes.h:1781:0,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/ndarrayobject.h:18,; > from C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/arrayobject.h:4,; > from C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:242:; > C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h:12:9: note: #pragma message: C:\Anaconda3\envs\qutip_py2\lib\site-packages\numpy\core\include/numpy/npy_1_7_deprecated_api.h(12) : Warning Msg: Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_RaiseArgtupleInvalid':; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: format '%s' expects argument of type 'char *', but argument 5 has type 'Py_ssize_t' [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: unknown conversion type character 'z' in format [-Wformat]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c:5045:18: warning: too many arguments for format [-Wformat-extra-args]; > C:\Users\alex.pyxbld\temp.win-amd64-2.7\Release\pyrex\rhs14881.c: In function '__Pyx_BufFmt_ProcessT",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-148786885:9113,message,message,9113,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-148786885,1,['message'],['message']
Integrability,"python3.5/site-packages/numpy/distutils/misc_util.py"", line 1002, in add_subpackage; caller_level = 2); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 971, in get_subpackage; caller_level = caller_level + 1); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 908, in _get_configuration_from_setup_py; config = setup_module.configuration(*args); File ""qutip/setup.py"", line 8, in configuration; config.add_subpackage('cy'); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 1002, in add_subpackage; caller_level = 2); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 971, in get_subpackage; caller_level = caller_level + 1); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/site-packages/numpy/distutils/misc_util.py"", line 883, in _get_configuration_from_setup_py; ('.py', 'U', 1)); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/imp.py"", line 234, in load_module; return load_source(name, filename, file); File ""/home/phyks/.local/share/virtualenvs/physique/lib/python3.5/imp.py"", line 172, in load_source; module = _load(spec); File ""<frozen importlib._bootstrap>"", line 693, in _load; File ""<frozen importlib._bootstrap>"", line 673, in _load_unlocked; File ""<frozen importlib._bootstrap_external>"", line 662, in exec_module; File ""<frozen importlib._bootstrap>"", line 222, in _call_with_frames_removed; File ""qutip/cy/setup.py"", line 3, in <module>; from Cython.Distutils import build_ext; ImportError: No module named 'Cython'; Installing without the fortran mcsolver.; ```. EDIT: And `qutip` installs well with `pip` even if `scipy` is not installed (or `matplotlib`). This results in an `ImportError` at first import (or warning). But once installing manually the dependencies, all is fine.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/426#issuecomment-183253786:2637,depend,dependencies,2637,https://qutip.org,https://github.com/qutip/qutip/issues/426#issuecomment-183253786,1,['depend'],['dependencies']
Integrability,"r (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I implemented the [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead o",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:7041,integrat,integrator,7041,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['integrat'],['integrator']
Integrability,"r guarantee than just ""it's convenient to let `np.array` know about this object"". It was meant to be an indication that your class can be safely coerced into `ndarray` (and potentially coerced back afterwards), and that mathematical operations will satisfy the normal ufunc broadcasting rules, which isn't true of `Qobj`. That means that arrays of things implementing `__array__` should be safely representable as `ndarray`, which clearly isn't true for us. Similarly, ever since `Qobj.__array__` was first defined you could use Numpy ufuncs on `Qobj`, which would get implicitly converted to `ndarray` and then return complete nonsense, rather than throwing an error like ""what you're doing is silly"":; ```python; >>> np.sin(qutip.basis(2, 1)); array([[0. ],; [0.84147098]]); ```; (imo that should really be a `TypeError` if done without an explicit conversion into Numpy semantics). There is a way around that latter point in modern Numpy - defining `Qobj.__array_ufunc__ = Qobj.__array_function__ = None` - but it does raise the question of whether we _should_ define `Qobj.__array__`; we have no intention of implying that `Qobj` satisfies the general Numpy ufunc interface, and it isn't any sort of `ndarray`-like type, because it satisfies matrix semantics, not array semantics. That's the reason `scipy.sparse` types don't implement `__array__`. There always was a sanctioned method for converting `Qobj` to `ndarray` - `Qobj.full()`, similar to `scipy`'s `spmatrix.toarray()` - so `Qobj.__array__` was never a _necessity_, just a convenience in some workflows. Given the tools we can use to suppress the ufunc behaviour, the only question we need to decide on is whether that particular convenience (converting a single `Qobj` to `ndarray` with `np.array` rather than `Qobj.full`) is worth the loss of another (it's now rather faffy to put `Qobj` into an `ndarray`). Both have simple alternatives and I'll go along with either, though my personal preference is not to define `Qobj.__array__`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094:3159,interface,interface,3159,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094,1,['interface'],['interface']
Integrability,"rate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatever `mesolve` does internally for a particular case. > We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:10158,interface,interface,10158,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['interface'],['interface']
Integrability,"rator we're looking for. `G` is anti-Hermitian, and so it shares its eigensystem (up to scaling of the eigenvalues) with the Hermitian `i G` and consequently is diagonalised by a unitary formed of its eigenvectors. Now `S = i G / abs(alpha)` is a tridiagonal Hermitian, and with a similarity transformation we can find a _real-symmetric_ tridiagonal `T = P^-1 . S . P` for some diagonal unitary `P` (which is easy to calculate). The reason for scaling out `alpha` here should become clear at the end. The main diagonal of `T` is all zeros, and the first sub- and super-diagonals look like; ```[sqrt(1), -sqrt(2), sqrt(3), -sqrt(4), ...]```; and the diagonal of `P` looks like; ```[i, e^(-1i arg(alpha)), i e^(-2i arg(alpha)), e^(-3i arg(alpha)), ...]```. Now this real-symmetric tridiagonal form is the basis of Hermitian eigenvalue solvers, and has direct entry points in LAPACK (e.g. `?stemr`), which allow us to pass only the main diagonal and the first subdiagonal. Scipy provides convenient wrapped access in Python by `scipy.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equivalent up to the tolerance of the eigenvalue solver (~1e-14). Even better for you, a lot of the hard work is done in the eigensystem solver, and I scaled out `alpha` at the start, so we can do a good chunk _without fixing alpha_. That means we can pay the computational cost only once at the start, and then get faster calculations from then on. If I make a t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:1353,wrap,wrapped,1353,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['wrap'],['wrapped']
Integrability,"ray. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_finder</code>**.; * [x] <code>n_iterations</code> become <code>delta_t</code> when <code>optimizer</code> is called. It does not seems to be an integer so isn't <code>delta_t</code> a better name here? --> **Renamed to <code>delta_t</code>.**; * [x] <code>bound_function</code> seems very generic. Same with <code>optimizer</code>. --> **Renamed to <code>_lanczos_error_equation_to_optimize_delta_t</code> and <code>_optimize_lanczos_timestep_size</code>.**; * [x] numpy's array have a <code>dot</code> method that act the same a sparse array's one. This is not needed.; * [x] The <code>dims</code> of the output are not kept at <code>evolved_states = map(Qobj, evolved_states[1:-1]</code> --> **Separated into two variables. Now dimensions are also be kept.**; * [x] Why make <code>lanczos_algorithm</code> part of the public interface? --> **Mistake; corrected**",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:2946,interface,interface,2946,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['interface'],['interface']
Integrability,"re, and while the licence would give us permission to improve the code, it's the reorganisation I'm worried about. Secondly, about the code itself: this sort of local operation is something I absolutely would like to include, but I'm not certain that the form it's in right now is the best, general way to do it. I think this is part of much larger discussion about how to handle tensor networks - for example, at the moment, `targets` is fine for states and operators, but it won't work for superoperators. I'm not sure that this is solvable in an ergonomic way with QuTiP's current dimensions specifiers, but it's something we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose`, which can be seen as special cases of this exact same type of tensor contraction (not to mention `tensor_contract`!). The other thing from a code perspective is that this doesn't use the data-layer in the intended manner. A lot of this may be because our documentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:2073,contract,contraction,2073,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['contract'],['contraction']
Integrability,"rer way: there's a ; > big risk of misinterpreting the operator.; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661#issuecomment-286282270>, or ; > mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqSiIdpvqRZIZO2kklDrotB4b-6b0ks5rldpigaJpZM4MbmLX>.; >; > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 11:48; >; > When I tried to use the |qutip.squeeze| function for my simulations I ; > noticed that something was off. Upon further investigation I found out ; > that the output is not a truncated version of the single-mode ; > squeezing unitary, but rather the matrix exponential of the truncated ; > generator. These are /very/ different things!; >; > Am I right in assuming that the most useful matrix would be the ; > truncated unitary? If that's the case, the current method to compute ; > it is wrong. To compute the right matrix one can use the disentangling ; > formula for SU(1,1) (formula (31) here ; > <http://aip.scitation.org/doi/pdf/10.1063/1.3413923>):; >; > def squeeze(n,z):; > s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); > s1 = -2*np.log(np.cosh(abs(z))); > s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); >; > L = s0*0.5*(qt.create(n)*qt.create(n)); > K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); > R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); >; > return (L.expm())*(K.expm())*(R.expm()); >; > As you can see, this definition does /not/ depend on the truncation ; > parameter. Specifically, the upper-left portion of the matrix that ; > |qutip.squeeze| outputs converges to my |squeeze| function for large |n|.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661>, or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqdPPw6WOAYMpYw_kA9pRxVhgVyxIks5rlYF9gaJpZM4MbmLX>.; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286284316:1989,depend,depend,1989,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286284316,2,['depend'],['depend']
Integrability,"rlo: Time-dependent H (str format) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=True) ... ok; > > > Monte-carlo: check for correct dtypes (average_states=False) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=True) ... ok; > > > mcsolve_f90: check for correct dtypes (average_states=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... ok; > > > mesolve: qubit without dissipation ... ok; > > > mesolve: simple time-dependence as function list ... ok; > > > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:5446,depend,dependence,5446,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['depend'],['dependence']
Integrability,"rmed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qutip itself. All I stated was that `I played around with auto-converting input hamiltonians and jump operators in qutip.sesolve and mesolve to Qobj if they are not Qobj but support the interface. That is even nicer because we would get to use all of qutip solvers out of the box with our objects.`. ; - So implicitly I do have stated that I'd like to see implicit conversion being performed on high-level methods. I do see benefits for the whole ecosystem if we can start integrating more: qutip already has very advanced and feature-complete solvers, there are large benefits for other packages to exploit them without having to wrap them or ask users to write more complicated code. It means that all benefits and bug-fixes to qutip are instantly available to users of other packages too that rely on it. And I think that calling a conversion method at the beginning, which most of the time will do nothing will just be a tiny drop in the bucket of the overhead of those `large` functions. However, I don't want to argue that right now. All my proposal was about was having a way to play well with your `Qobj` constructor.; It seems to me you were eventual",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:2185,interface,interface,2185,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['interface'],['interface']
Integrability,"ropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) by looking at what `mesolve` was doing at a low level for the specific case of density matrices, `scipy.integrate.ode` was definitely being used, and that couldn't handle propagating in parallel (and by ""parallel"" I include alternating propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. That sounds perfect! I might wait for QuTiP 5 to come out, or if these things are already in `master`, I'll see if I can maybe revisit `DensityMatrixODEPropagator` and maybe also add something for the Hilbert space case (whatever `sesolve` is doing internally). As an aside, I was actually surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:8198,interface,interface,8198,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['interface'],['interface']
Integrability,"rray. Point 2 is mostly an extension of that: I'm not sure there is a sensible way for numpy's broadcasting rules to be applied to quantum objects as they exist now, even without extensions. ## More control over dispatch: `__array_ufunc__` and `__array_function__`. See [NEP 13](https://numpy.org/neps/nep-0013-ufunc-overrides.html), [NEP 18](https://numpy.org/neps/nep-0018-array-function-protocol.html) and [NEP 35](https://numpy.org/neps/nep-0035-array-creation-dispatch-with-array-function.html). Later versions of numpy allowed greater control over how ufuncs get implemented, which was most recently extended in 1.16 to cover non-ufuncs like `tensordot`. These functions are intended for classes to define how ufuncs operate on their data, but implementors should still follow the `ufunc` spec for broadcasting rules, and a given ufunc should have the same conceptual behaviour (mostly elementwise operations or reductions). Several libraries implement only these, but _not_ `__array__`, but given my points 1 and 2 above, I don't think QuTiP should go this route. You can, however, set these properties to `None` to unconditionally tell Numpy that the object is incompatible with ufuncs. I think this might be a good way for us to go. ## What other libraries do. Provide everything:; - Dask: mostly trying to provide a numpy-like distributed array class. Its arrays mostly support the numpy interface, including how ufuncs should act on them. Providing `__array__` seems odd to me here in the context of other libraries, since that may easily blow out memory.; - PyTorch: CPU/GPU accelerated tensors for ML. This is a bit beyond my experience to comment on why they made the choices they did.; - Xarray: strongly extends the idea of structured arrays; this to me is the best example of how `__array__` was intended to be used.; ; Provide some things:; - Qiskit: (just changed behaviour in Qiskit/qiskit-terra#5402) implements `__array__` (but nothing else) for things that are like our `Qobj`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902:6032,rout,route,6032,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-772608902,1,['rout'],['route']
Integrability,"s (there are some warnings, but unrelated to this pull request). However, the check here failed and I do not see a useful error message. Does someone have an idea what is going on?. The error in the documentation (HTTP Error 403) is unrelated the the actual build. It happen from time to time randomly... you can ignore it.; However the documentation build will fail on warnings. > * We have two example notebooks to add to qutip-notebooks. How to proceed in practice: do we open a separate pull request in qutip-notebooks?; ; qutip-notebook is no longer used, we migrated to qutip-tutorial. Please open a new PR there. > * The _run_one_traj function now exists 3 times, with practically identical code:; > https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L197; > https://github.com/qutip/qutip/blob/master/qutip/solver/mcsolve.py#L427; > https://github.com/pmenczel/qutip/blob/nonmarkovian-mcsolve/qutip/solver/nm_mcsolve.py#L160; > Maybe it would be a good idea to make the type of `Result` that is used for single trajectories generic in multi-trajectory solvers (just like the `resultclass` is already generic in solvers in general)? I have implemented that [here](https://github.com/pmenczel/qutip/commit/4a25709f90ed7c6dc2153011ee5a8110f3957c95) and could merge that commit into this PR if you think that's a good idea. There is a fourth `_run_one_traj` coming for the stochastic solver with also almost the same code...; Yes, some cleaning is needed and having a swap-able trajectory result class would be nice.; I looked at your implementation and it look fine.; I would just rename `trajectoryclass` to `trajectory_result_class` or something similar, otherwise it make me think it refer to the removed `TrajectorySolver`. > I've noticed a small bug that has gone unnoticed because of this: ""step"" [here](https://github.com/qutip/qutip/blob/master/qutip/solver/multitraj.py#L206) should be ""integrate"", I think. ; `step` was renamed to `integrate` a while ago. Good catch!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702:2086,integrat,integrate,2086,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1446867702,2,['integrat'],['integrate']
Integrability,"s and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (tau) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (Qobj) ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (O",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576:1368,depend,dependent,1368,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576,1,['depend'],['dependent']
