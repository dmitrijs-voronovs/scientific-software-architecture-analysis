quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Testability,">> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in; >>> psi4 -i descriptive_filename.in -o descriptive_filename.out; >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to |PSIfour| can be accessed through :option:`psi4 --help`. .. program:: psi4. .. option:: -a, --append. Append results to output file. Default: Truncate first. .. option:: -h, --help. Display the command-line options and usage information. .. option:: -i <filename>, --input <filename>. Input file name. Default: input.dat. .. option:: --inplace. Runs |PSIfour| with compiled code from <objdir> but driver code from source,; so no need to ``make`` between Python edits. Expert mode. .. option:: -k, --skip-preprocessor. Skips input preprocessing. Expert mode. .. option:: -l <name>, --psidatadir <name>. Overrides the value of; :envvar:`PSIDATADIR` and specifies the path to the Psi data; library (ends in ``share/psi4``). Expert mode. .. option:: --loglevel <int>. Sets logging level: WARN=30, INFO=20, DEBUG=10. .. option:: -m, --messy. Leave temporary files after the run is completed. .. option:: --memory <memory>. The amount of memory to use. Can be specified with units (e.g., '10MB') otherwise bytes is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:18473,log,loglevel,18473,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['log'],['loglevel']
Testability,"AD natural orbital guess, an extended; H\ |u_dots|\ ckel guess that employs on-the-fly atomic calculations alike the SAD; guess, as well as a superposition of atomic potentials (SAP) guess; that is based on screening of atomic nuclei. The SAD natural orbitals,; H\ |u_dots|\ ckel and SAP guesses have been described in. * ""An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient"", S. Lehtola, *J. Chem. Theory Comput.* **15**,; 1593 (2019) (doi: `10.1021/acs.jctc.8b01089; <https://doi.org/10.1021/acs.jctc.8b01089>`_). Density Cumulant Theory (DCT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _`intro:dctcitations`:. |PSIfour| features several formulations of newly-developed density cumulant; theory (DCT), also known as density cumulant functional theory (DCFT).; The theory and benchmark of this theory are discussed in the following papers:. DC-06 (also known as DCT-06):. * ""Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,"" A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, *J. Chem. Phys.*; **133**, 174122 (2010).; (doi: `10.1063/1.3503657 <https://doi.org/10.1063/1.3503657>`_). * ""Analytic gradients for density cumulant functional theory: The; DCFT-06 model,"" A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, *J. Chem. Phys.* **137**, 054105 (2012).; (doi: `10.1063/1.4739423 <https://doi.org/10.1063/1.4739423>`_). DC-12:. * ""Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,"" A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, *J. Chem. Phys.* **138**, 024107; (2013).; (doi: `10.1063/1.4773580 <https://doi.org/10.1063/1.4773580>`_). ODC-06 and ODC-12:. * ""Orbital-optimized density cumulant functional theory,"" A. Yu. Sokolov, and; H. F. Schaefer, *J. Chem. Phys.* **139**, 204110 (2013).; (doi: `10.1063/1.4833138 <https://doi.org/10.1063/1.4833138>`_). ODC-1",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:8920,Benchmark,Benchmark,8920,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['Benchmark'],['Benchmark']
Testability,"AND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16596,test,tests,16596,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"CE_DIR}/psi4/driver/qcdb/cfour.py; ${CCBD}/source/autodoc_psivariables_bymodule.rst; COMMENT ""Autodoc Cfour PSI variables""). # Autodoc databases; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_databases.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_databases.rst; DEPENDS ${CCSD}/document_databases.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/*.py,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/S22.py>; COMMENT ""Autodoc databases""). # Autodoc test cases; add_custom_command(; COMMAND ${PERL_EXECUTABLE} ${CCSD}/document_tests.pl ${CCSD}; OUTPUT ${CCBD}/source/autodoc_testsuite_corepsi4.rst; ${CCBD}/source/autodoc_testsuite_dftd3.rst; DEPENDS ${CCSD}/document_tests.pl; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/input.dat,${psi4_SOURCE_DIR}/tests/ghosts/input.dat>; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/*/input.dat,${psi4_SOURCE_DIR}/tests/dftd3/energy/input.dat>; COMMENT ""Autodoc test cases""). # Autodoc capabilities; # * tables are generated in pairs: one to build directory for Sphinx to use and one for the repo for devs to track; # * PYTHONPATH bit is because this is the only document_* script that uses a fn from Psi4; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --sphinx --quiet --writefile ""source/autodoc_capabilities_details.rst"" --mode details; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --quiet --writefile ""${CCSD}/source/preview_capabilities_details.rst"" --mode details; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../sta",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:8928,test,tests,8928,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5963,test,test,5963,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,2,['test'],['test']
Testability,"CSD}/../../samples/stdsuite_psi4.txt --sphinx --quiet --writefile ""source/autodoc_capabilities_scf.rst"" --mode scf --driver egh; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --quiet --writefile ""${CCSD}/source/preview_capabilities_scf.rst"" --mode scf --driver egh; OUTPUT ${CCBD}/source/autodoc_capabilities_details.rst; ${CCBD}/source/autodoc_capabilities_summary.rst; ${CCBD}/source/autodoc_capabilities_ccenergy.rst; ${CCBD}/source/autodoc_capabilities_fnocc.rst; ${CCBD}/source/autodoc_capabilities_dfmp2.rst; ${CCBD}/source/autodoc_capabilities_occ_oo.rst; ${CCBD}/source/autodoc_capabilities_occ_nonoo.rst; ${CCBD}/source/autodoc_capabilities_scf.rst; DEPENDS ${CCSD}/document_capabilities.py; ${CCSD}/../../samples/stdsuite_psi4.txt; COMMENT ""Autodoc capabilities""). # Autodoc stubs; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_stubs.py ${CCSD}; OUTPUT ${CCBD}/source/api/psi4.core.set_variable.rst; DEPENDS ${CCSD}/document_stubs.py; COMMENT ""Autodoc stubs""). # # Autodoc driver; # add_custom_command(; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_driver.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_driver.rst; # DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/*.py; # ${CCSD}/document_driver.py; # COMMENT ""Autodoc driver""). # # Autodoc psi4 module; # add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTAL",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:14833,stub,stubs,14833,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['stub'],['stubs']
Testability,"Candidate Structure for other method-tests. _ref_module = {scftype: {ref: {frz: {mp2type: {} for mp2type in ['conv', 'df', 'cd']} for frz in ['true', 'false']} for ref in ['rhf', 'uhf']} for scftype in ['pk', 'df']}. * The above will work for mp2, mp2.5, mp3, cepa, and the orbital-optimized variants thereof. MP2 has ROHF, but that's special.; * The dct module can also supply non-FC, conventional integral cepa.; * At present, occ has no frozen core energies for orbital optimized methods or frozen core gradients for anything. dfocc does. Jonathon will be changing this in a future; project, as well as adding some frozen virtual. ETA is Spring 2021, because that depends on the Gradient Rewrite.; * dfocc has all DF gradients and CD energies for all options.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/occ_methods.txt:37,test,tests,37,tests/pytests/occ_methods.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/occ_methods.txt,1,['test'],['tests']
Testability,"ENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian representation of the system. .. _DimerIntro:. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option |optking__frag_mode|, fragments; may instead be related by a minimal set of ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:2037,test,tested,2037,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['test'],['tested']
Testability,"FIX}/${HOST}/sysroot"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"". H. Build on Linux with specific (GCC) compilers from; from conda in **activated** environment; (:envvar:`CONDA_PREFIX` and :envvar:`HOST` are defined upon; activation). .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. .. _`faq:approvedcxx`:. What C and C++ compilers and versions are approved; --------------------------------------------------. On Linux, the following work nicely. * GNU: ``gcc``, ``g++``; * Intel: ``icc``, ``icpc``; * Clang: ``clang``, ``clang++``. On Mac, the following work nicely. * Apple Clang: ``clang``, ``clang++``; * Intel: ``icc``, ``icpc``. |PSIfour| requires *full* C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; :source:`cmake/custom_cxxstandard.cmake`, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both ``icpc`` and ``gcc`` versions are checked.; Intel OneAPI Classic compilers work fine. OneAPI beta compilers build but have; been only minimally tested. * :ref:`faq:modgcc`. .. _`faq:macxcode`:. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; -----------------------------------------------------------------------------. The easiest compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` co",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:38721,test,test,38721,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"INATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 share/ & include/ >>>. install(DIRECTORY share/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4; MESSAGE_NEVER; PATTERN ""*.bin"" EXCL",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11740,test,tests,11740,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,2,['test'],['tests']
Testability,"INATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 share/ & include/ >>>. install(DIRECTORY share/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4; MESSAGE_NEVER; PATTERN ""*.bin"" EXCLUDE; PATTERN ""*.pyc"" EXCLUDE). install(FILES share/psi4/quadratures/1_x/R_avail${_endian_ext}.bin; RENAME quadratures/1_x",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11905,test,tests,11905,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['test'],['tests']
Testability,"ING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian representation of the system. .. _DimerIntro:. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option |optking__frag_mode|, fragments; may instead be related by a minimal set of interfragment coordinates defined by; reference points within each fragment. The reference points can be atomic; positions (current default) or linear combinations of atomic positions; (automatic use of principal axes is under development).; These `dimer coordinates` can be directly specified through |optking__interfrag_coords|); See `here <DimerSecti",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:2317,test,testing,2317,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['test'],['testing']
Testability,"Ithon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3195,test,test,3195,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['test']
Testability,"KL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50485,test,testing,50485,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testing']
Testability,"LES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11511,test,tests,11511,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['test'],['tests']
Testability,"MKL""); set(_VENDOR ""MKL""); else(); set(_VENDOR ""All""); endif(); set_target_properties(; lapack; PROPERTIES; VENDOR ${_VENDOR}; INT_INTERFACE lp64 # Psi4 only works with lp64 afaik; ); set(export_properties ""VENDOR;INT_INTERFACE""); set_property(TARGET lapack APPEND PROPERTY EXPORT_PROPERTIES ""${export_properties}""). # << Detect OpenMP and modify for BLAS/LAPACK >>; if(NOT TARGET tgt::MathOpenMP); list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}); set(TargetOpenMP_FIND_COMPONENTS ""CXX""); find_package(MathOpenMP); endif(). #include(CMakePrintHelpers); #cmake_print_properties(TARGETS OpenMP::OpenMP_CXX OpenMP::OpenMP tgt::MathOpenMP lapack; # PROPERTIES INTERFACE_COMPILE_DEFINITIONS INTERFACE_COMPILE_OPTIONS INTERFACE_INCLUDE_DIRS INTERFACE_LINK_LIBRARIES). get_property(_ill TARGET lapk PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found LAPACK${isMKL}${ColourReset}: ${_ill0};...""). if(NOT (${isMKL} MATCHES ""MKL"")); message(WARNING ""${Yellow}MKL is the only BLAS/LAPACK distribution thoroughly tested with Psi4. Several others are mostly fine, with problems cropping up in particular modules or when running in threaded mode. When using a non-MKL distribution, please run the test suite in full and also run particular tests in threaded mode, if you plan to run Psi4 threaded. MKL is freely available through conda; see instructions to compile against conda MKL through the 'source' option on the download website page. OpenBLAS also seems to work, but be sure you're using the OpenMP, not the pthreads, variant.${ColourReset}""); endif(). unset(BLAS_LIBRARIES); unset(LAPACK_LIBRARIES); unset(BLAS_INCLUDE_DIRS); unset(LAPACK_INCLUDE_DIRS). set(PN ${PROJECT_NAME}); install(TARGETS blas lapk lapack; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetLAPACK_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cma",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt:2135,test,tested,2135,external/common/lapack/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt,1,['test'],['tested']
Testability,"MakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7358,test,test,7358,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"NSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psitho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11546,test,tests,11546,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['test'],['tests']
Testability,"OMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/procrouting/dft/superfunctionals.py; ${psi4_SOURCE_DIR}/tests/docs-dft/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""Autodoc functionals""). # Autodoc auxiliary basis sets; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-bases; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-bases/autodoc_basissets_byfamily.rst ${CCBD",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:17249,test,tests,17249,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"ON ENERGY': -0.2629759351596186},; 'S22-16-monoB-unCP': {'CURRENT ENERGY': -77.07606823017188,; 'DF-MP2 CORRELATION ENERGY': -0.2594122526144091},; 'S22-2-dimer': {'CURRENT ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22-8-monoB-unCP': {'CURRENT ENERGY': -40.336952636980506,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715097}}; ; DB_RXN; {'S22-16': {'CURRENT ENERGY': -0.0035470557928363178,; 'DF-MP2 CORRELATION ENERGY': -0.0014825844040612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}; ; mp2 interaction energy of water dimer (S22-2); -0.0115002693348. .. index:: database(); available. .. _`sec:availableDatabases`:. Available Databases; ^^^^^^^^^^^^^^^^^^^. Below are documented for particular databases the availability of the generic; database function options **cp**, **rlxd**, **benchmark**, and the string; options for **subset**. The full reagent member list, which can also be used; in conjunction with **subset**, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_databases. .. include:: autodoc_available_databases.rst. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:6959,benchmark,benchmark,6959,doc/sphinxman/source/db.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst,1,['benchmark'],['benchmark']
Testability,"OPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7771,test,tests,7771,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"PBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. :ref:`Double-Hybrid Functionals <table:dft_dhybrid>`; Double hybrids are percolating into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in |PSIfour| for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection; ~~~~~~~~~~~~~~. |PSIfour| uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes. ; The default grid in |PSIfour| is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights. Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resolution is controlled by the |scf__dft_spherical_points|; option, which may take one of the following values:. .. _`table:lebedevorder`:. +-----------------------------+-------+; | |scf__dft_spherical_points| | Order |; +=============================+=======+; | 6 | 3 |; +-----------------------------+-------+; | 14 | 5 |; +-----------------------------+-------+; | 26 | 7 |; +-----------------------------+-------+; | 38 ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:20676,test,test,20676,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['test'],['test']
Testability,"PI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3922,test,test,3922,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14957,test,tests,14957,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"Python of ``which python``.; To use a different Python with |PSIfour| in the short term, just; ``path/to/desired/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; edit the shebang line. If you're using |PSIfour| as a Python module, then |PSIfour| *is* running; the Python of ``which python``. .. _`faq:wrongpyfalse`:. How to fix ""``undefined symbol: _Py_FalseStruct``""; --------------------------------------------------. You're probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Psi4; -----------------------------------------. Debugging |PSIfour| has gotten a little confusing now that it's running through Python. Here's the syntax ::. >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. ::. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/sh",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:55045,test,tests,55045,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"R=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; --------------------------------------------------------------------------. .. code-block:: bash. # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you're not using GCC as a compiler, your Intel compiler seeks; `gcc` to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager *or* install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below. .. code-block:: bash. # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gn",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:41303,test,tested,41303,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tested']
Testability,"S, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6243,test,tests,6243,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['tests']
Testability,"S:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}). #-DLIBINT2_REQUIRE_CXX_API=ON; #-DLIBINT2_REQUIRE_CXX_API_COMPILED=OFF; #-DLIBINT2_ENABLE_FORTRAN=OFF; #-DLIBINT2_ENABLE_PYTHON=OFF; else(); message(STATUS ""Suitable Libint2 could not be located, ${Magenta}Building Libint2${ColourReset} from generator source instead.""); message(WARNING ""${Yellow}Libint2 generator source build requires Ninja (not Makefile) builder and Boost, Eigen, and GMPXX dependencies. The build will be very long for non-trivial AM, and parallelism won't help for the generation phase. Edit external/upstream/libint2/CMakeLists.txt for AM, derivative, and integral classes settings. This is also building v2.7, not v2.8 Libint2.${ColourReset}""). if (MSVC); message(FATAL_ERROR ""${Red}Libint2 generator source build faulty on Windows.${ColourReset}""); endif(). # NOTE: active AM settings below will pass few tests, as they're set for 1st row triple-zeta ene and double-zeta ene/grad/hess for both conv/df. Please edit for desired use. ExternalProject_Add(libint2_external; URL https://github.com/loriab/libint/archive/new-cmake-2023-take2-b.zip; CMAKE_ARGS -GNinja; -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${_cmake_build_type}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DENABLE_ONEBODY=2; -DENABLE_ERI=2; -DENABLE_ERI3=2; -DENABLE_ERI2=2; -DENABLE_G12=1; -DDISABLE_ONEBODY_PROPERTY_DERIVS=ON; -DMULTIPOLE_MAX_ORDER=4; -DBoost_DIR=${Boost_DIR}; -DBOOST_ROOT=${BOOST_ROOT}; -DEigen3_DIR=${Eigen3_DIR}; -DEigen3_ROOT=${Eigen3_ROOT}; -DMultiprecision_ROOT=${Multiprecision_ROOT}; -DERI3_PURE_SH=OFF; -DERI2_PURE_SH=OFF; -DLIBINT2_SHGAUSS_ORDERING=standard; -DLIBINT2_CARTGAUSS_ORDERING=standard; -DLIBINT2_SHELL_SET=standard; -DBUILD_SHARED_LIBS=${_build_shared_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:8557,test,tests,8557,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['test'],['tests']
Testability,"SD}/document_cfour.py ${CCSD}; OUTPUT ${CCBD}/source/autodir_psivariables/module__cfour.rst; DEPENDS ${CCSD}/document_cfour.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/cfour.py; ${CCBD}/source/autodoc_psivariables_bymodule.rst; COMMENT ""Autodoc Cfour PSI variables""). # Autodoc databases; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_databases.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_databases.rst; DEPENDS ${CCSD}/document_databases.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/*.py,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/S22.py>; COMMENT ""Autodoc databases""). # Autodoc test cases; add_custom_command(; COMMAND ${PERL_EXECUTABLE} ${CCSD}/document_tests.pl ${CCSD}; OUTPUT ${CCBD}/source/autodoc_testsuite_corepsi4.rst; ${CCBD}/source/autodoc_testsuite_dftd3.rst; DEPENDS ${CCSD}/document_tests.pl; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/input.dat,${psi4_SOURCE_DIR}/tests/ghosts/input.dat>; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/*/input.dat,${psi4_SOURCE_DIR}/tests/dftd3/energy/input.dat>; COMMENT ""Autodoc test cases""). # Autodoc capabilities; # * tables are generated in pairs: one to build directory for Sphinx to use and one for the repo for devs to track; # * PYTHONPATH bit is because this is the only document_* script that uses a fn from Psi4; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --sphinx --quiet --writefile ""source/autodoc_capabilities_details.rst"" --mode details; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --quiet",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:8792,test,tests,8792,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"SIfour\; executables have been installed. The configure script in \$PSI4 ; will take all the necessary files in \$PSI4/tests; with the .in stub: Makefile.in, MakeRules.in, MakeVars.in,; and runtest.pl.in, replace variables with system specific parameters,; and copy/create the testing files and directories in \$prefix/tests.; The tests should be run in the object directory before installation. If you have just added a new module for performing, say multireference ; coupled cluster, and you would like to add a test case to the current ; test suite, here is what you should do. ; \begin{enumerate}; \item Copy one of the existing test case directories to an ; appropriately named directory for the new test case. \item Create an appropriate input file for running the new module. ; Then, if your program produced the correct data, rename; the output files to *.ref. Follow the convention of the ; existing test cases. Make sure you add a descriptive comment to the; input file, stating what the calculation type is. Use the special comment; marker ``\%!'' to do this, so that the comment is inserted into the user's; manual. \item If the test case is small, add the directory name to the list; in \$PSI4/tests/Makefile.in. If the test is particularly tricky,; see the psi\_start or rhf-stab test cases as an example. \item All the testing functionality is located in the perl library; \file{runtest.pl.in}. If you are testing for a quantity that; is not searched for currently, then add a function to the ; library following the format of the functions already available.; If you have added functionality to the \PSIfour\ driver,; make sure to update the appropriate functions in \file{runtest.pl.in}. \item Add the location of the Makefile for the new test case; to the configure script in \$PSI4. \end{enumerate}. Please contact one of the authors of \PSIfour\ before making any; major changes or if you have a problem adding a new test case.; Remember, if all else fails, read the source code. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst:1247,test,test,1247,doc/sphinxman/source/attic/progtestsuite.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst,8,['test'],"['test', 'testing', 'tests']"
Testability,"TRICT); set(SPHINX_EXTRAS ""-n;-W;--keep-going""); #set(SPHINX_EXTRAS ""-W;--keep-going""); # return to above after qcel 0.25; #set(SPHINX_EXTRAS """"); else(); set(SPHINX_EXTRAS """"); endif(). # Setup and build Sphinx documentation; if(PERL_FOUND AND SPHINX_FOUND AND SPHINX_STUFF_FOUND); set(CCSD ""${CMAKE_CURRENT_SOURCE_DIR}""); set(CCBD ""${CMAKE_CURRENT_BINARY_DIR}""). # Static-doc reST files; set(STATICDOC abbr_accents.rst adc.rst adcc.rst appendices.rst basissets.rst; basissets_byelement.rst bibliography.rst cbs.rst cbs_eqn.rst ddx.rst; nbody.rst customizing.rst db.rst detci.rst dfmp2.rst dlpnomp2.rst; diatomic.rst documentation.rst energy.rst external.rst fchk.rst; freq.rst gdma.rst glossary_psivariables.rst index.rst intercalls.rst; interfacing.rst introduction.rst methods.rst notes_c.rst notes_py.rst; oeprop.rst opt.rst optking.rst plugins.rst prog_corelibs.rst prop.rst; psithonfunc.rst psithoninput.rst quickaddalias.rst; basissets_tables.rst quickadddatabase.rst sapt.rst sowreap.rst; testsuite.rst tutorial.rst dft_byfunctional.rst scf.rst mrcc.rst; psimrcc.rst cc.rst dft.rst fnocc.rst optionshandling.rst; basissets_byfamily.rst psipep.rst pep0001.rst dftd3.rst occ.rst; molden.rst cubeprop.rst dct.rst relativistic.rst dkh.rst proc_py.rst; psithonmol.rst cfour.rst mrcc_table_energy.rst cfour_table_energy.rst; cfour_table_grad.rst libefp.rst cppe.rst conda.rst pcmsolver.rst thermo.rst; chemps2.rst fisapt.rst plugin_v2rdm_casscf.rst psi4api.rst; manage_addon.rst numpy.rst build_planning.rst build_faq.rst; build_obtaining.rst libint.rst erd.rst simint.rst gcp.rst; index_tutorials.rst prog_faq.rst manage_index.rst manage_git.rst; prog_style_c.rst prog_blas.rst add_tests.rst plugin_snsmp2.rst dftnl.rst; libxc.rst gau2grid.rst prog_conduct.rst prog_intro.rst prog_newcode.rst; prog_setup.rst prog_welcome.rst prog_ways_to_add.rst; prog_full_integration.rst prog_style_py.rst prog_help.rst; prog_debug_profile.rst manage_release.rst plugin_psi4fockci.rst; brianqc.rst tdscf.rst pro",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:2586,test,testsuite,2586,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['testsuite']
Testability,"The \PSIfour\ test suite is designed to maximize code reuse and; provide testing in \$prefix before the \PSIfour\; executables have been installed. The configure script in \$PSI4 ; will take all the necessary files in \$PSI4/tests; with the .in stub: Makefile.in, MakeRules.in, MakeVars.in,; and runtest.pl.in, replace variables with system specific parameters,; and copy/create the testing files and directories in \$prefix/tests.; The tests should be run in the object directory before installation. If you have just added a new module for performing, say multireference ; coupled cluster, and you would like to add a test case to the current ; test suite, here is what you should do. ; \begin{enumerate}; \item Copy one of the existing test case directories to an ; appropriately named directory for the new test case. \item Create an appropriate input file for running the new module. ; Then, if your program produced the correct data, rename; the output files to *.ref. Follow the convention of the ; existing test cases. Make sure you add a descriptive comment to the; input file, stating what the calculation type is. Use the special comment; marker ``\%!'' to do this, so that the comment is inserted into the user's; manual. \item If the test case is small, add the directory name to the list; in \$PSI4/tests/Makefile.in. If the test is particularly tricky,; see the psi\_start or rhf-stab test cases as an example. \item All the testing functionality is located in the perl library; \file{runtest.pl.in}. If you are testing for a quantity that; is not searched for currently, then add a function to the ; library following the format of the functions already available.; If you have added functionality to the \PSIfour\ driver,; make sure to update the appropriate functions in \file{runtest.pl.in}. \item Add the location of the Makefile for the new test case; to the configure script in \$PSI4. \end{enumerate}. Please contact one of the authors of \PSIfour\ before making any; major cha",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst:1015,test,test,1015,doc/sphinxman/source/attic/progtestsuite.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst,1,['test'],['test']
Testability,"The \PSIfour\ test suite is designed to maximize code reuse and; provide testing in \$prefix before the \PSIfour\; executables have been installed. The configure script in \$PSI4 ; will take all the necessary files in \$PSI4/tests; with the .in stub: Makefile.in, MakeRules.in, MakeVars.in,; and runtest.pl.in, replace variables with system specific parameters,; and copy/create the testing files and directories in \$prefix/tests.; The tests should be run in the object directory before installation. If you have just added a new module for performing, say multireference ; coupled cluster, and you would like to add a test case to the current ; test suite, here is what you should do. ; \begin{enumerate}; \item Copy one of the existing test case directories to an ; appropriately named directory for the new test case. \item Create an appropriate input file for running the new module. ; Then, if your program produced the correct data, rename; the output files to *.ref. Follow the convention of the ; existing test cases. Make sure you add a descriptive comment to the; input file, stating what the calculation type is. Use the special comment; marker ``\%!'' to do this, so that the comment is inserted into the user's; manual. \item If the test case is small, add the directory name to the list; in \$PSI4/tests/Makefile.in. If the test is particularly tricky,; see the psi\_start or rhf-stab test cases as an example. \item All the testing functionality is located in the perl library; \file{runtest.pl.in}. If you are testing for a quantity that; is not searched for currently, then add a function to the ; library following the format of the functions already available.; If you have added functionality to the \PSIfour\ driver,; make sure to update the appropriate functions in \file{runtest.pl.in}. \item Add the location of the Makefile for the new test case; to the configure script in \$PSI4. \end{enumerate}. Please contact one of the authors of \PSIfour\ before making any; major chan",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst:14,test,test,14,doc/sphinxman/source/attic/progtestsuite.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst,11,"['stub', 'test']","['stub', 'test', 'testing', 'tests']"
Testability,"With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2715,test,test,2715,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['test']
Testability,"Y_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/procrouting/dft/superfunctionals.py; ${psi4_SOURCE_DIR}/tests/docs-dft/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""Autodoc functionals""). # Autodoc auxiliary basis sets; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-bases; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-bases/autodoc_basissets_byfamily.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_basissets_byfamily.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislist.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislistdunning.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislistother.py; ${psi4_SOURCE_DIR}/tests/docs-bases/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""Autodoc auxiliary basis sets""). # Autodoc plugins; # Not at all in working order; #add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E make_directory source/autodir_plugins; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_plugins.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_abbr_options_plugins.rst; # ${CCBD}/source/autodoc_available_plugins.rst; # ${CCBD}/source/autodir_plugins/glossary__aointegrals.rst; # ${CCBD}/source/autodir_plugins/module__aointegrals.rst; # ${CCBD}/source/autodir_plugins/aointegrals__print.rst; # DE",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:18142,test,tests,18142,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"[LAB 10-19-2016]. * Majority of logos detached from main Psi4 repo into https://github.com/psi4/psi4media . [LAB 9-29-2016]. * See doc/sphinxman/source/psi4doc/themes/psi4doc/theme.conf; for Psi4 colors and customary icon linking. [LAB 2-18-2015]. * Text ""SI"" in ""PSI4"" changed to 82% size of ""P"" & ""4""; 54 pt for banner; files. This should avoid the ""Public School 14"" issue, while not looking; so lopsided as genuine small-caps font. [LAB 11-18-2014]. * Text ""Ab Initio"" changed to ""Open-Source"". [LAB 4-20-2012]. * Text ""PSI4"" is Optima Regular at 66 pt in CMYK = [100, 95, 0, 0]. * Text ""Ab Initio Quantum Chemistry"" is Optima Bold at 16 pt; in CMYK = [0, 0, 0, 100] with 100 (AI units) spacing stretch. * The difference between ""vector"" and other files in this directory is in; the trimming of self-interference at the tips of the psi graphic. This; process turns the psi into a raster object, so the color and 3D effects; are no longer editable. * All transparencies are set such that these can be placed over any color; background. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/media/README.md:32,log,logos,32,media/README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/media/README.md,1,['log'],['logos']
Testability,"_DIR}/psi4/driver/*.py; # ${CCSD}/document_driver.py; # COMMENT ""Autodoc driver""). # # Autodoc psi4 module; # add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16245,test,tests,16245,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if(ENABLE_v2rdm_casscf); add_subdirectory(v2rdm_casscf); message(STATUS ""Adding test cases: Psi4 + v2rdm_casscf""); endif(). # <<< GPU_DFCC >>>. if(ENABLE_gpu_dfcc); add_subdirectory(gpu_dfcc); message(STATUS ""Adding test cases: Psi4 + gpu_dfcc""); endif(). # <<< SNSMP2 >>>. if(ENABLE_snsmp2); add_subdirectory(snsmp2); message(STATUS ""Adding test cases: Psi4 + snsmp2""); endif(). # <<< BrianQC >>>; if(ENABLE_BrianQC); add_subdirectory(brianqc); message(STATUS ""Adding test cases: Psi4 + BrianQC""); endif(). # <<< ECPINT >>>; if(ENABLE_ecpint); add_subdirectory(aediis-2); add_subdirectory(basis-ecp); add_subdirectory(dfmp2-ecp",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:9326,test,test,9326,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"_init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11583,test,tests,11583,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,2,['test'],['tests']
Testability,"` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:6307,test,testing,6307,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['test'],['testing']
Testability,"`. If you `export PYTHONPATH={objdir}/stage/{prefix}/lib/{pymod_lib_dir}:$PYTHONPATH` to make PsiAPI easy, that inserts starting in pos'n 1 (0-indexed), so ``''`` still at the head of ``sys.path``. Now, if you try to run a psiapi/python file from ``{top-level-psi4-dir}`` that contains ``import psi4``, it will find the source tree ``psi4/__init__.py`` and fail because there's no ``core.so`` around. That is, it's finding what looks to be the psi4 module dir structure ``.`` when the one it wants is what you inserted into PYTHONPATH at pos'n 1. The way around this is to move the python file you're running to any other directory. Or, within the file, do ``sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}``. .. _`faq:findmissingoutputref`:. How to find tests without output.ref; ------------------------------------. Ideally, each new test or much-altered test should add its own; ``output.ref``. When that doesn't happen, this command helps. ::. find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can acciden",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:9941,test,tests,9941,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,2,['test'],"['test', 'tests']"
Testability,"`; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to b",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62669,test,testing,62669,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testing']
Testability,"`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:3331,test,tests,3331,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,"`` part). Then just run ``make`` in; your plugin directory. After any change to the plugin C++ code,; ``make`` must be run in the plugin directory to recompile the; ``myplugin.so`` executable, but recompiling the main |PSIfour| code; is not necessary. Should you add additional (non-header) files to; the plugin or need to link to additional external libraries, add that; information here. * **input.dat** |w---w| Sample input file for the plugin.; Since the ``__init__.py`` file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in :envvar:`PYTHONPATH`,; either externally in the calling shell or defined in the input file.; This is usually done by manipulating :envvar:`PSIPATH`. Then,; the plugin can be loaded as ``import myplugin`` and executed as; ``energy('myplugin')``. Any other Python functions are also available from; the input file, *e.g.* ``myplugin.testfunction()``, note the namespace; protection. * **pymodule.py** |w---w| Python component of the plugin.; By encoding the sequence of |PSIfour| module; calls needed to run the plugin in the ``run_myplugin()`` function in this; file, the plugin is hooked into the main |PSIfour| driver function; :py:func:`~psi4.driver.energy` and so can be accessed through; ``energy('myplugin')`` in an input file. Any other Python functions can; also be placed in this file. * **__init__.py** |w---w| Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won't; need editing unless additional Python files are added to the plugin; directory (add additional lines to the ``# Load Python modules`` section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the ``# Load C++ plugin`` section). .. comment as modeled in :source:`tests/plugin_libcim/__init__.py`). .. literalinclude:: @S",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:9272,test,testfunction,9272,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['testfunction']
Testability,"``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18393,test,tests,18393,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,"`libstdc++.so``), and this can be accomplished by; installing XCode from the App Store that provides ``clang`` and; ``clang++`` compilers. * Check environment:. .. code-block:: bash. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. * Create and compile plugin:. .. code-block:: bash. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testp",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:6076,test,testplugin,6076,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['testplugin']
Testability,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61984,test,test,61984,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,16,['test'],"['test', 'testlabel', 'testname', 'tests']"
Testability,"abbr_options_plugins.rst; # ${CCBD}/source/autodoc_available_plugins.rst; # ${CCBD}/source/autodir_plugins/glossary__aointegrals.rst; # ${CCBD}/source/autodir_plugins/module__aointegrals.rst; # ${CCBD}/source/autodir_plugins/aointegrals__print.rst; # DEPENDS ${CCSD}/document_plugins.py; # ${psi4_SOURCE_DIR}/plugins/*/*.py; # ${psi4_SOURCE_DIR}/plugins/*/doc.rst; # COMMENT ""Autodoc plugins""). # Autodoc efp fragments; if(${ENABLE_libefp}); add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_efpfrag.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_efpfrag.rst; DEPENDS ${CCSD}/document_efpfrag.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag/*efp,${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag/h2o.efp>; COMMENT ""Autodoc efp fragments""); else(); file(WRITE ${CCBD}/source/autodoc_available_efpfrag.rst """"); endif(). # Format git log for feed; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E make_directory feed; COMMAND ${Python_EXECUTABLE} ${CCSD}/extract_changeset.py ${CCBD}; OUTPUT ${CCBD}/feed/history_trac_changeset.txt; ${CCBD}/feed/latest_trac_changeset.txt; DEPENDS ${CCSD}/extract_changeset.py; COMMENT ""Format git --log for psicode.org feed""). # Establishing dependencies for docs targets. # * mini github feed for psicode.org; add_custom_target(ghfeed; DEPENDS ${CCBD}/feed/history_trac_changeset.txt; ${CCBD}/feed/latest_trac_changeset.txt; COMMENT ""Preparing GitHub feed""). # * announcement; if (LATEX_COMPILER AND PDFLATEX_COMPILER); message(STATUS ""Documentation targets ${_jupy}available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF)""); else(); message(STATUS ""Documentation targets ${_jupy}available: sphinxman (html), sphinxmini (quick html)""); endif(). # * quick mini-build for docs development; add_custom_target(sphinxmini; DEPENDS ${CCBD}/source/conf.py; COMMENT ""Building Sphinx abridged HTML documentation build""). # * full, proper build; add",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:19752,log,log,19752,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['log'],['log']
Testability,"able as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activat",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3779,Test,Test,3779,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,"['Test', 'test']","['Test', 'test']"
Testability,"ables/module__cfour.rst; DEPENDS ${CCSD}/document_cfour.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/cfour.py; ${CCBD}/source/autodoc_psivariables_bymodule.rst; COMMENT ""Autodoc Cfour PSI variables""). # Autodoc databases; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_databases.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_databases.rst; DEPENDS ${CCSD}/document_databases.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/*.py,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/S22.py>; COMMENT ""Autodoc databases""). # Autodoc test cases; add_custom_command(; COMMAND ${PERL_EXECUTABLE} ${CCSD}/document_tests.pl ${CCSD}; OUTPUT ${CCBD}/source/autodoc_testsuite_corepsi4.rst; ${CCBD}/source/autodoc_testsuite_dftd3.rst; DEPENDS ${CCSD}/document_tests.pl; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/input.dat,${psi4_SOURCE_DIR}/tests/ghosts/input.dat>; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/*/input.dat,${psi4_SOURCE_DIR}/tests/dftd3/energy/input.dat>; COMMENT ""Autodoc test cases""). # Autodoc capabilities; # * tables are generated in pairs: one to build directory for Sphinx to use and one for the repo for devs to track; # * PYTHONPATH bit is because this is the only document_* script that uses a fn from Psi4; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --sphinx --quiet --writefile ""source/autodoc_capabilities_details.rst"" --mode details; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --quiet --writefile ""${CCSD}/source/preview_capabilities_details.rst"" --mod",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:8889,test,tests,8889,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"above requirements met, provided the libint2; # was built with cmake+cmake, not libtool+cmake.; # * Provided you know what you're doing wrt the above options and know what subset of Psi4 calculations you're targeting; # (e.g., no Hessians or non-df only) and recognize that DF is everywhere (e.g., SAD guess and DF_SCF_GUESS) and may; # need further suppression, it's fine to reduce or eliminate the `find_package` components.; # * ~Psi4 can run a libtool+cmake, but one needs to disable the `find_package` components check and correct for some; # Libint2 vs. libint2 spelling differences. See ""CHOOSE!"" toggles here and in <psi4>/psi4/CMakeLists.txt~ (see [Feb 2023] update); # * In order for DF tests to yield right values when cartesian basis sets (6d) used, need ERI3_PURE_SH and ERI2_PURE_SH =OFF; # * In order for DF integrals to be present as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calculations to not be limited by cheap integrals, need WITH_MAX_AM_ERI2 >= WITH_MAX_AM_ERI3; # * In order for DF fallback fitting to work with def2-universal on all elements, need WITH_ERI3_MAX_AM >=4 for energies; # * Since non-DF calculations often use DF guess or preiterations and DF calculations use 4-center integrals for sieving,; # a natural relationship between ERI and ERI3 for energy integrals is N and N+1.; # * The combination WITH_MAX_AM_ERI=""5;4;3"" and WITH_MAX_AM_ERI3=""6;5;4"" permits any 5Z energy, QZ gradient, and TZ Hessian and is sufficient for the full test suite.; # * Psi4 doesn't know the limits of the Libint2 library to which it's linked. `libint2::Engine::lmax_exceeded` errors will be thrown from l2; nothing from Psi4.; # * If ever use a libint2 with AM>7, edit the `init_spherical_harmonics` line in libmints/integral.cc; # * In selecting AM values, before `grep`ing lots of basis set files, consult the guide at end of this file.; # [Feb 2023]; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can use L",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:1758,test,tests,1758,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['test'],['tests']
Testability,"aces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; --------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7111,test,test,7111,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"ack APPEND PROPERTY EXPORT_PROPERTIES ""${export_properties}""). # << Detect OpenMP and modify for BLAS/LAPACK >>; if(NOT TARGET tgt::MathOpenMP); list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}); set(TargetOpenMP_FIND_COMPONENTS ""CXX""); find_package(MathOpenMP); endif(). #include(CMakePrintHelpers); #cmake_print_properties(TARGETS OpenMP::OpenMP_CXX OpenMP::OpenMP tgt::MathOpenMP lapack; # PROPERTIES INTERFACE_COMPILE_DEFINITIONS INTERFACE_COMPILE_OPTIONS INTERFACE_INCLUDE_DIRS INTERFACE_LINK_LIBRARIES). get_property(_ill TARGET lapk PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found LAPACK${isMKL}${ColourReset}: ${_ill0};...""). if(NOT (${isMKL} MATCHES ""MKL"")); message(WARNING ""${Yellow}MKL is the only BLAS/LAPACK distribution thoroughly tested with Psi4. Several others are mostly fine, with problems cropping up in particular modules or when running in threaded mode. When using a non-MKL distribution, please run the test suite in full and also run particular tests in threaded mode, if you plan to run Psi4 threaded. MKL is freely available through conda; see instructions to compile against conda MKL through the 'source' option on the download website page. OpenBLAS also seems to work, but be sure you're using the OpenMP, not the pthreads, variant.${ColourReset}""); endif(). unset(BLAS_LIBRARIES); unset(LAPACK_LIBRARIES); unset(BLAS_INCLUDE_DIRS); unset(LAPACK_INCLUDE_DIRS). set(PN ${PROJECT_NAME}); install(TARGETS blas lapk lapack; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetLAPACK_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake""; INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindTargetOpenMP.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindMathOpenMP.cmake; DESTINATION ${CMAKECONFIG_INSTALL_DIR}",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt:2317,test,test,2317,external/common/lapack/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt,2,['test'],"['test', 'tests']"
Testability,add_subdirectory(sp-uhf-mp2); add_subdirectory(sp-rohf-scf); add_subdirectory(sp-rhf-ccsd_t_-ecc); add_subdirectory(opt-rhf-scf); add_subdirectory(psi-rhf-scsmp2); add_subdirectory(pywrap-cbs1); add_subdirectory(puream) ; add_subdirectory(mints5); add_subdirectory(mints5-grad); add_subdirectory(kw-1); add_subdirectory(kw-2); add_subdirectory(kw-3); add_subdirectory(kw-4); add_subdirectory(kw-5); add_subdirectory(kw-6); #add_subdirectory(kw-7) # old keyword logic; #add_subdirectory(kw-8) # old keyword logic; add_subdirectory(psi-ghost-grad); add_subdirectory(scf4); add_subdirectory(mp2-1); add_subdirectory(pywrap-db1); add_subdirectory(pywrap-basis); add_subdirectory(dfmp2-1); add_subdirectory(sp-rhf-scf); add_subdirectory(sp-rhf-mp2); add_subdirectory(sp-rhf-ccsd); add_subdirectory(sp-rhf-ccsd-ao); add_subdirectory(sp-rhf-ccsd_t_); add_subdirectory(sp-rhf-ccsd_t_-ao); add_subdirectory(sp-rhf-ccsd_t_-ao-ecc) ; add_subdirectory(sp-rhf-ccsd_t_-fc); add_subdirectory(sp-rhf-cc3); add_subdirectory(sp-rhf-ccsdt) ; add_subdirectory(sp-uhf-scf); add_subdirectory(sp-uhf-ccsd); add_subdirectory(sp-uhf-ccsd_t_); add_subdirectory(sp-uhf-ccsd_t_-ao); add_subdirectory(sp-uhf-ccsd_t_-ao-ecc); add_subdirectory(sp-uhf-ccsd_t_-ecc); add_subdirectory(sp-uhf-cc3); add_subdirectory(sp-uhf-ccsdt); add_subdirectory(sp-rohf-mp2-sc); add_subdirectory(sp-rohf-mp4-sc); add_subdirectory(sp-rohf-ccsd); add_subdirectory(sp-rohf-ccsd_t_); add_subdirectory(sp-rohf-ccsdt); add_subdirectory(sp-rohf-ccsd-ao); add_subdirectory(sp-rohf-ccsd_t_-ao); add_subdirectory(sp-rohf-ccsd_t_-ao-ecc); add_subdirectory(sp-rohf-ccsd_t_-fc); add_subdirectory(opt-rhf-mp2); add_subdirectory(opt-rhf-ccsd_t_); add_subdirectory(opt-rhf-ccsd_t_-ecc); #add_subdirectory(psi-a24-grad) # old way of testing; add_subdirectory(psi-uhf-scsmp2); add_subdirectory(psi-rohf-scsmp2); add_subdirectory(psi-rhf-mp3); add_subdirectory(psi-uhf-mp3); add_subdirectory(psi-mp4); ,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/CMakeLists.txt:461,log,logic,461,tests/cfour/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/CMakeLists.txt,3,"['log', 'test']","['logic', 'testing']"
Testability,"added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modification",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7928,test,test,7928,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['test']
Testability,"aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6036,test,test,6036,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"al Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to che",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1682,test,tests,1682,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:6988,test,test,6988,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['test'],['test']
Testability,"ally happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". 5. **OBSERVE** current versioning state. * Nothing to make note of, this is just a snapshot. ::. >>> psi4/versioner.py; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream. 6. **ACT** to inform remote of bump. * Temporarily disengage ""Include administrators"" on protected master branch. ::. >>> git push origin master; >>> git push origin v1.1rc1. * Now https://github.com/psi4/psi4/releases says ``v1.1rc1`` & ``6100822``. .. _`faq:remotetag`:. How to create and remove an annotated Git tag on a remote; ---------------------------------------------------------. |PSIfour| versioning only works with *annotated* tags, not *lightweight*; tags as are created with the `GitHub interface; <https://github.com/psi4/psi4/releases/new>`_. * Create *annotated* tag::. >>> git tag -a v1.1a1 <git hash if not current> -m ""v1.1a1""; >>> git push origin v1.1a1. * Delete tag::. >>> git tag -d v1.1a1; >>> git push origin :refs/tags/v1.1a1. * Pull tags::. >>> git fetch <remote> 'refs/tags/*:refs/tags/*'. .. _`faq:psi4version`:. What Psi4 version is running; -------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:5020,log,log,5020,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['log'],['log']
Testability,"apt11 scf-uhf-grad-nobeta; linK-1 linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:7061,test,testname,7061,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['testname']
Testability,"ar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software package. Copyright (c) 2007-2023 The Psi4 Developers. The copyrights for code used from other parties are included in; the corresponding files. Psi4 is free software; you can redistribute it and/or modify; it under the terms of the GNU Lesser General Public License as published by; the Free Software Foundation, version 3. Psi4 is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along; with Psi4; if not, write to the Free Software Foundation, Inc.,; 51 F",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:6403,test,testboard,6403,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['test'],['testboard']
Testability,"ar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. The molecule name; within the file, *e.g.*, ``$NH3`` must corresp",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:4051,test,tests,4051,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['test'],['tests']
Testability,"are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence co",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4164,Test,Test,4164,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['Test'],['Test']
Testability,"are_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no fur",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9838,test,test,9838,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"arry the label ""psi"".; #; # The following labels are defined:; #; # smoketests = Does Psi4 work? A few basic operational tests plus; # one from each addon and addin; # quicktests = Best coverage possible in a 20 min envelope (for Travis-CI).; # This subset is chosen to provide one or more tests for each; # major module, but it does not necessarily cover all features; # of every module.; # longtests = The really long (> ~15 min) tests; #; # Common test runs:; #; # ctest -L quick run all quicktests; # ctest -LE long run all but longtests; #; # It is possible to specify more than one label per test. CMake; # expects a ;-separated list, e.g. ""psi;quicktests;scf""; # It is suggested to add at least a second label to specify the method tested.; #; # We use ctest -I [start,end] where start is the test number we start with; # and end is the test number we end with. We will then use math to back out; # the appropriate starts and ends...; #; #; # In order to ensure that this works properly, please add your tests to the; # appropriate variables given below. foreach(test_name aediis-1; casscf-fzc-sp casscf-semi casscf-sa-sp ao-casscf-sp casscf-sp castup1; castup2 castup3 cbs-delta-energy cbs-parser cbs-xtpl-alpha cbs-xtpl-energy; cbs-xtpl-freq cbs-xtpl-gradient cbs-xtpl-opt cbs-xtpl-func cbs-xtpl-nbody; cbs-xtpl-wrapper cbs-xtpl-dict cc1 cc10 cc11 cc12 cc13 cc13a cc13b cc13c; cc13d cc14 cc15 cc16 cc17 cc18 cc19 cc2 cc21 cc22 cc23 cc24 cc25 cc26 cc27 cc28; cc29 cc3 cc30 cc31 cc32 cc33 cc34 cc35 cc36 cc37 cc38 cc39; cc4 cc40 cc41 cc42 cc43 cc44 cc45 cc46 cc47 cc48 cc49 cc4a; cc50 cc51 cc52 cc53 cc54 cc55 cc56 cc5 cc6 cc7 cc8 cc8a cc8b cc8c; cc9 cc9a cdomp2-1 cdomp2-2 cdoremp-energy1 cdoremp-energy2 cdremp-1 cdremp-2 cepa1; cepa2 cepa3 cepa-module ci-multi cisd-h2o+-0 cisd-h2o+-1; cisd-h2o+-2 cisd-h2o-clpse cisd-opt-fd cisd-sp cisd-sp-2; ci-property cubeprop cubeprop-frontier decontract dct-grad1 dct-grad2; dct-grad3 dct-grad4 dct1 dct2 dct3 dct4 dct5 dct6 dct7 dct8 dct9; dct10 dct1",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:1108,test,tests,1108,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['tests']
Testability,"arting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10008,test,testing,10008,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['testing']
Testability,"as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the following files. * **CMakeLists.txt** |w---w| CMake file governing project *plugin*.; The plugin source and CMakeLists.txt is independent of platform; and |PSIfour| installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; |PSIfour| installation. Run ``psi4 --plugin-compile`` to get a command; to execute to generate the Makefile. What that command is doing is; loading the compilers and o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:6947,test,testplugin,6947,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,2,['test'],['testplugin']
Testability,"as the; generic form,. .. math::; E_{\mathrm{xc}} = (1-\alpha) \int_{\mathrm{R}^3}; f_{\mathrm{xc}}; \left(; \rho_{\alpha} (\vec r_1),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); ; \omega \right) \ \mathrm{d} ^3 r_1. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:12247,test,test,12247,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['test'],['test']
Testability,"asic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the following files. * **CMakeLists.txt** |w---w| CMake file governing project *plugin*.; The plugin source and CMakeLists.txt is independent of platform; and |PSIfour| installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; |PSIfour| installation. Run ``psi4 --plugin-compile`` to get a command; to execute to gener",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:6890,test,testplugin,6890,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['testplugin']
Testability,"at the \file{configure}; script will know to create the Makefile for the new code. These; steps are included in the sequence below. \end{enumerate}. Assume the new code is an executable module and is named; \module{great\_code}. The directory containing the new code must; contain only those files which are to be checked in to the repository!; Then the following steps will check in a new piece of code to the main; repository:. \begin{enumerate}; \item {\tt cd \$PSI4/src/bin}; \item {\tt svn add great\_code}; \item {\tt svn ci -m ``Put comments here.''}; \item {\tt cd \$PSI4}; \item Edit \file{configure.ac} and add \file{great\_code} to the list. ; \item {\tt svn ci configure.ac -m ``Put comments here.''}; \item {\tt autoconf} ; \item {\tt cd \$PSI4/src/bin} ; \item Edit \file{Makefile.in} and add \file{great\_code} to the list. ; \item {\tt svn ci Makefile.in -m ``Put comments here.''}; \end{enumerate}; At this point, all of the code has been properly checked in, but you; should also test to make sure that the code can be checked out by; other programmers, and that it will compile correctly. The following; steps will store your personal version of the code, check out the new; code, and test-compile it:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin}; \item {\tt mv great\_code great\_code.bak}; \item {\tt cd \$PSI4/..}; \item {\tt svn update}; \item {\tt cd \$objdir}; \item {\tt \$PSI4/configure -}{\tt -prefix=\$prefix}; \item {\tt cd src/bin/great\_code}; \item {\tt make install}; \end{enumerate}; (Note that \$prefix and \$objdir to the installation and compilation; directories defined in the \PSIfour\ installation instructions.); Your original version of the code remains under \file{great\_code.bak},; but should be no longer necessary if the above steps work. Note that it is; necessary to re-run \file{configure} explicitly, instead of just running; \file{config.status}, because the latter contains no information about; the new code. \subsection{Updating checked out",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:12678,test,test,12678,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['test'],['test']
Testability,"ate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. The molecule name; within the file, *e.g.*, ``$NH3`` must correspond to the name of the; fragment file. .. index:: molecule; EFP; single: E",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:4120,test,tests,4120,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['test'],['tests']
Testability,"befp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if(ENABLE_v2rdm_casscf); add_subdirectory(v2rdm_casscf); message(STATUS ""Adding test cases: Psi4 + v2rdm_casscf""); endif(). # <<< GPU_DFCC >>>. if(ENABLE_gpu_dfcc); add_subdirectory(gpu_dfcc); message(STATUS ""Adding test cases: Psi4 + gpu_dfcc""); endif(). # <<< SNSMP2 >>>. if(ENABLE_snsmp2); add_subdirectory(snsmp2); message(STATUS ""Adding test cases: Psi4 + snsmp2""); endif(). # <<< BrianQC >>>; if(ENABLE_BrianQC); add_subdirectory(brianqc); message(STATUS ""Adding test cases: Psi4 + BrianQC""); endif(). # <<< ECPINT >>>; if(ENABLE_ecpint); add_subdirectory(aediis-2); add_subdirectory(basis-ecp); add_subdirectory(dfmp2-ecp); add_subdirectory(sapt-ecp); add_subdirectory(scf-ecp); add_subdirectory(scf-ecp2); add_subdirectory(scf-ecp3); message(STATUS ""Adding test cases: Psi4 + ecpint""); endif(). # plugin regime; if(ENABLE_PLUGIN_TESTING); add_subdirectory(plugins); message(STATUS ""Adding test cases: Psi4 plugins""",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:9584,test,test,9584,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:3994,test,test,3994,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['test'],['test']
Testability,"by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your tes",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8791,TEST,TEST,8791,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,3,['TEST'],['TEST']
Testability,"c driver; # add_custom_command(; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_driver.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_driver.rst; # DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/*.py; # ${CCSD}/document_driver.py; # COMMENT ""Autodoc driver""). # # Autodoc psi4 module; # add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_differe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16125,test,tests,16125,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"c psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/procrouting/dft/superfunctionals.py; ${psi4_SOURCE_DIR}/tests/docs-dft/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""A",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16951,test,tests,16951,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"c`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60854,test,test,60854,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"cally 50-100). The radial grids are ""centered"" on the Bragg-Slater; radius of each atom, as described in Becke's 1988 paper. If inaccurate; integration is suspected in systems with anions or very diffuse basis functions,; the |scf__dft_bs_radius_alpha| option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ; error of 0.02 kcal/mol for the same benchmark. Both also reduce the grid order by 1 for H ; and He atoms and avoid any pruning of heavy atoms (Z >= 36) Other schemes mentioned in ; the keyword documentation (e.g. P_SLATER) are experimental and should be considered expert-only. Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:24865,benchmark,benchmark-level,24865,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['benchmark'],['benchmark-level']
Testability,"can run a libtool+cmake, but one needs to disable the `find_package` components check and correct for some; # Libint2 vs. libint2 spelling differences. See ""CHOOSE!"" toggles here and in <psi4>/psi4/CMakeLists.txt~ (see [Feb 2023] update); # * In order for DF tests to yield right values when cartesian basis sets (6d) used, need ERI3_PURE_SH and ERI2_PURE_SH =OFF; # * In order for DF integrals to be present as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calculations to not be limited by cheap integrals, need WITH_MAX_AM_ERI2 >= WITH_MAX_AM_ERI3; # * In order for DF fallback fitting to work with def2-universal on all elements, need WITH_ERI3_MAX_AM >=4 for energies; # * Since non-DF calculations often use DF guess or preiterations and DF calculations use 4-center integrals for sieving,; # a natural relationship between ERI and ERI3 for energy integrals is N and N+1.; # * The combination WITH_MAX_AM_ERI=""5;4;3"" and WITH_MAX_AM_ERI3=""6;5;4"" permits any 5Z energy, QZ gradient, and TZ Hessian and is sufficient for the full test suite.; # * Psi4 doesn't know the limits of the Libint2 library to which it's linked. `libint2::Engine::lmax_exceeded` errors will be thrown from l2; nothing from Psi4.; # * If ever use a libint2 with AM>7, edit the `init_spherical_harmonics` line in libmints/integral.cc; # * In selecting AM values, before `grep`ing lots of basis set files, consult the guide at end of this file.; # [Feb 2023]; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can use LIBINT2_SHGAUSS_ORDERING=standard|gaussian; # *at Libint source generation time*. At Psi4 build time, it's going to be looking for standard (sss), so you'll have to; # edit the CMake to use a gss.; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can no longer be adapted to use a libtool+cmake source.; # * Libraries of different AM are not hot-swappable in a Psi4 build, but they only require a relinking.;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:2572,test,test,2572,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['test'],['test']
Testability,"cense. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2662,test,tested,2662,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,1,['test'],['tested']
Testability,"cf-5 tdscf-6 tdscf-7; dft-pruning freq-masses sapt9 sapt10 sapt11 scf-uhf-grad-nobeta; linK-1 linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:6955,test,tests,6955,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,3,['test'],"['test', 'tests']"
Testability,"ch programmers may obtain the latest (or any; previous) version of the \PSIfour\ source from the main repository or; a branch version, add new code to the source tree or modify existing; \PSIfour\ modules, and then make changes and additions available to; other programmers by checking the modifications back into the main; repository. SVN also provides a ``safety net'' in that any erroneous; modifications to the code may be easily removed once they have been; identified. This section describes how to use SVN to access and; modify the \PSIfour\ source code. (Note that compilation and; installation instructions are given in a separate document.). The main repository for the \PSIfour\ Source code is currently; maintained by the Crawford group at Virginia Tech. To check out the; code, one must first obtain an SVN account by emailing; \htmladdnormallink{{\tt crawdad@vt.edu}}{mailto:crawdad@vt.edu}.; After you have a login-id and password, you are now ready to access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policies: Which Branch Should I Use?}; \label{section:branches}. The \PSIfour\ repository comprises a main trunk and several; release branches. The branch you should use depends on the sort of ; work you plan for the codes:; \begin{enumerate}; \item For any piece of code already in the most recent release, bug; fixes (defined as anything that ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:1262,log,login-id,1262,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['log'],['login-id']
Testability,"cies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4185,test,test,4185,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"cmake_minimum_required(VERSION 3.15 FATAL_ERROR); cmake_policy(SET CMP0094 NEW); project(psi4-core; LANGUAGES C CXX); # no Fortran in psi4-core proper, but language needs to be declared; # for CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES to be populated so; # static Fortran add-ons can be linked; if(${Fortran_ENABLED}); enable_language(Fortran); endif(). if (NOT MSVC); set(CMAKE_C_FLAGS_DEBUG ""-g -O0""); set(CMAKE_CXX_FLAGS_DEBUG ""-g -O0""); endif(). list(APPEND CMAKE_MODULE_PATH ${PSI4_ROOT}/cmake). include(psi4OptionsTools); include(TestRestrict); include(TestBigEndian); include(GNUInstallDirs); include(CMakePackageConfigHelpers); include(custom_color_messages); test_restrict(restrict); test_big_endian(endianness); if(${endianness}); set(_endian_ext "".big""); else(); set(_endian_ext "".little""); endif(); set(CMAKECONFIG_INSTALL_DIR ""${psi4_INSTALL_CMAKEDIR}""). # <<< Marshal Dependencies & Add-ons >>>. set(_addons); set(TargetOpenMP_FIND_COMPONENTS ""CXX""); find_package(TargetLAPACK CONFIG REQUIRED); get_property(_ill TARGET tgt::lapk PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); get_property(_cd TARGET tgt::lapack PROPERTY INTERFACE_COMPILE_DEFINITIONS); if(${_cd} MATCHES ""USING_LAPACK_MKL""); set(_isMKL "" MKL""); endif(); get_property(_illb TARGET tgt::blas PROPERTY INTERFACE_LINK_LIBRARIES); list(APPEND _addons ${_ill} ${_illb}); message(STATUS ""${Cyan}Using LAPACK${_isMKL}${ColourReset}: ${_ill0};...""). if(ENABLE_ambit OR ENABLE_CheMPS2 OR ENABLE_Einsums); find_package(TargetHDF5 CONFIG REQUIRED); get_property(_ill TARGET tgt::hdf5 PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); list(APPEND _addons ${_ill}); message(STATUS ""${Cyan}Using HDF5${ColourReset}: ${_ill0};... (found version ${${PN}_VERSION})""); else(); message(STATUS ""Disabled HDF5 ${TargetHDF5_DIR}""); endif(). # << Pybind11 & Python >>; find_package(Python 3.8 COMPONENTS Interpreter Development NumPy REQUIRED); find_package(pybind11 2.6.2 CONFIG REQUIRED); message(STATUS ""${Cyan}Using pybi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:532,Test,TestRestrict,532,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,2,['Test'],"['TestBigEndian', 'TestRestrict']"
Testability,"code.F} ; from a binary module named \module{great\_code}:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin/great\_code}; \item {\tt svn remove bad\_code.F}; \item {\tt svn ci -m ``Put comments here.''}; \end{enumerate}. \subsection{Checking out older versions of the code}; It is sometimes necessary to check out older versions of a piece of code.; Assume we wish to check out an old version of \PSIdetci. If this; is the case, the following steps will do this:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin/detci}; \item {\tt svn co --revision \{2002-02-17\}}; \end{enumerate}. This will check the main repository and provide you with the code as; it stood exactly on February 17th, 2002. . \subsection{Examining the revision history}; It can be very useful to use cvs to see what recent changes have been; made to the code. Anytime one checks in a new version of a file, SVN; requires the user to provide comments on the changes with the {\tt -m}; flag. These comments go into a log information that may be easily; accessed through SVN. To see what changes have been made recently to; the file \file{detci.cc}, one would go into the \file{detci} source; directory and type; \begin{verbatim}; svn log detci.cc; \end{verbatim}; Checking the log files is a very useful way to see what recent changes might ; be causing new problems with the code. \subsection{The structure of the \PSIfour\ Source Tree}; \label{psitree} . Your working copy of the \PSIfour\ source code includes a number of; important subdirectories:. \begin{itemize}; \item \shellvar{\$PSI4}\file{/lib} -- Source files for; OS-independent ``library'' data. This includes the main basis set; data file (\file{pbasis.dat}) and the \PSIfour\ program execution; control file (\file{psi.dat}), among others. These files are; installed in \file{\$prefix/share}. \item \shellvar{\$PSI4}\file{/include} -- Source files for; OS-independent header files, including \file{physconst.h} (whose; contents should be obvious from its name), \file{",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:16323,log,log,16323,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['log'],['log']
Testability,"conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5881,test,tests,5881,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability,"ctory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if(ENABLE_v2rdm_casscf); add_subdirectory(v2rdm_casscf); message(STATUS ""Adding test cases: Psi4 + v2rdm_casscf""); endif(). # <<< GPU_DFCC >>>. if(ENABLE_gpu_dfcc); add_subdirectory(gpu_dfcc); message(STATUS ""Adding test cases: Psi4 + gpu_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:8936,test,test,8936,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"d files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytes",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61059,test,tests,61059,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"d of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12633,Test,Test,12633,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,"['Test', 'test']","['Test', 'tests']"
Testability,"d variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../test",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6881,test,tests,6881,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"dded to analytic SCF gradients. For post-SCF methods, the entire gradient computation needed to be run as finite difference of energies. .. warning:: As of May 2022, v1.6, Psi4 uses the LibECPInt library, and analytic derivatives and Hessians of ECPs are available. Analytic derivatives of molecular systems including ECPs should be available whenever the method has analytic derivatives, but these have so far only been verified for HF and DFT. .. warning:: ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the `forum <http://forum.psicode.org>`_. .. _`sec:scfqmmm`:. External potentials and QM/MM; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In addition to the implementation of :ref:`EFP <sec:libefp>` for accurate QM/MM; computations, |PSIfour| can perform more rudimentary QM/MM procedures via the; |scf__extern| keyword. The following snippet, extracted from the; :srcsample:`extern1` test case, demonstrates its use for a TIP3P external potential::. import numpy as np; external_potentials = [; [-0.834, np.array([1.649232019048,0.0,-2.356023604706]) / psi_bohr2angstroms],; [ 0.417, np.array([0.544757019107,0.0,-3.799961446760]) / psi_bohr2angstroms],; [ 0.417, np.array([0.544757019107,0.0,-0.912085762652]) / psi_bohr2angstroms]]. gradient('scf', external_potentials=external_potentials). The ``external_potentials`` array has three rows for three separate; particles, and it is passed to the SCF code on the last line. The; rows are composed of the atomic charge, x coordinate, y coordinate,; and z coordinate in that order. The atomic charge and coordinates are; specified in atomic units, [e] and [a0]. Add as many particle rows as; needed to describe the full MM region. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, setting an; external potential like the above looked like ::. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.3560",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:53993,test,test,53993,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['test'],['test']
Testability,"de is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution ``@@`` for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; :regexp:`^ $latex math$[., ]$` (pseudo-regex) are good, while ``H$_2$O`` and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, so; please use reST math formatting (essentially ``$latex math$`` :math:`\Rightarrow`; ``:math:`latex math```).; Starting around |PSIfour| 1.1, MathJax is used for in-browser LaTeX; rendering in place of offline PNG generation of math images. Check the; online re",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:7656,test,test,7656,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['test'],['test']
Testability,"dif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Fou",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:8312,test,test,8312,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"e ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62899,Test,Test,62899,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['Test'],['Test']
Testability,"e in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function:: psi4.compare_vectors(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_vectors(expected, computed [, label, *, check_name=False, **kwargs]). .. function:: psi4.compare_wavefunctions(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_wavefunctions(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_molrecs(expected, comput",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:16635,test,testing,16635,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['testing']
Testability,"e labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8488,TEST,TEST,8488,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['TEST'],['TEST']
Testability,"e name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14653,test,tests,14653,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"e values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10190,test,tests,10190,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"e, add-ons return CMake variables; and compile definitions of :samp:`FOUND_{AddOn_name}` and; :samp:`USING_{AddOn_name}`. For example: ``FOUND_libefp``,; ``USING_CheMPS2``, ``PCMSolver_LIBRARIES``, ``USING_v2rdm_casscf``. * The CMake target(s) formed use the full add-on name as the namespace,; :samp:`{AddOn_name}::{lib_name_without_lib}.lower()`. For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symli",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:2999,test,tests,2999,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability,"e-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installatio",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21493,sandbox,sandbox,21493,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['sandbox'],['sandbox']
Testability,"ease into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulne",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27628,sandbox,sandbox,27628,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['sandbox'],['sandbox']
Testability,"easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function:: psi4.compare_vectors(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_vectors(expected, computed [, label, *, check_name=False, **kwargs]). .. function:: psi4.compare_wavefunctions(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_wavefunctions(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_molrecs(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_molrecs; :noindex:. File Formats; ------------. .. autofu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:16784,test,testing,16784,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['testing']
Testability,"eceding or following jobs, it is prudent to; separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the ``cfour {...}`` block are tacked onto; the end of the ``ZMAT`` file that is otherwise written from psi style; format. It is by this route that, for example ``%excite*`` sections can at; present be specified. The execution of :program:`xcfour` can be modified by a few parameters. Setting; the option |cfour__cfour_omp_num_threads| sets the environment variable; :envvar:`OMP_NUM_THREADS` for only the duration of the Cfour computation.; That is, portions of an input file that run |PSIfour| modules are; unaffected. Additionally, there are a few arguments to the function; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` that control the Cfour scratch; directory. . .. comment Notes to Self; .. comment ~~~~~~~~~~~~~; .. comment ; .. comment Test checked-in GENBAS on installed copy; .. comment ; .. comment Reference still not factored into cc_program!; .. comment ; .. comment optimize on a sandwich calc? errors out; .. comment ; .. comment ; .. comment .. _`table:cfour_cc_program`:; .. comment ; .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |; .. comment | | | +--------+--------+---------+; .. comment | Driver Call, |cfour__cfour_deriv_level| | name, |cfour__cfour_calc_level| | |cfour__cfour_excite| | |cfour__cfour_cc_program| |; .. comment +=========================================+=================================+=======================+========+========+=========+; .. comment | :py:func:`~psi4.energy`, zero | cc2 | none | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:42477,Test,Test,42477,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['Test'],['Test']
Testability,"ed automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftes",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12405,Test,Testing,12405,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['Test'],['Testing']
Testability,"ed by cp(), database(), and optimize(). - Upon checking in a new python file, edit the file ``psi4/doc/userman/source/index.rst`` and follow the instructions therein that your file may be autodocumented here. - Write docstrings! For a major function intended for use in input files, emulate any docstring in ``psi4/share/python/driver.py``. For a behind-the-scenes function or if you don't want the bother of dealing with `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_, just write an ordinary docstring. It will get slurped into the documentation in plain text. - Your python function should follow `PEP8 <http://www.python.org/dev/peps/pep-0008/>`_ conventions (without the line-length restriction). I'm aiming for files to pass the line below, unless for good reason. The second line is for database Python files. >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. - Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap\_ is suggested. - Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the 'current energy' variable. This last is needed to communicate with the optimizer. ::. psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). - Once your python function is fairly stable on its own, it's potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. - If any interoperability is possible, define an argument xx_func, where xx is a short name for your ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst:4885,test,test,4885,doc/sphinxman/source/attic/bestpractices_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst,1,['test'],['test']
Testability,"ed number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. .. _`faq:writepsi4`:. How to refer to Psi4; --------------------. Ways to refer to |P",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64608,test,test,64608,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,3,['test'],"['test', 'tests']"
Testability,"ed tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15107,test,tests,15107,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"ee Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; database(); see: db(); database(); single: database(). .. _`sec:db()`:. Database |w---w| :py:func:`~psi4.driver.wrapper_database.database`; ==================================================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. .. autofunction:: psi4.driver.wrapper_database.database(name, db_name [, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset]). .. index:: ; pair: database(); output. Output; ^^^^^^. At the beginning of a database job is printed a listing of the individual system ; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:1479,benchmark,benchmark,1479,doc/sphinxman/source/db.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst,1,['benchmark'],['benchmark']
Testability,"eeded from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, regi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12056,test,tests,12056,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"el""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {pref",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63370,test,test,63370,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"en copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10764,test,test,10764,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"en sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be des",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8125,test,test,8125,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"ence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both wil",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3092,test,test,3092,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"eneral Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:proc_py`:. Adding Methods to Driver; ========================. ``proc.py``; -----------. Methods that are computable by only one module should be added to the ``procedures`` dictionary in; :source:`psi4/driver/procrouting/proc_table.py`; that associates method names with functions; to run them located in :source:`psi4/driver/procrouting/proc.py`. The function should start with a declaration, as below. ``methodname`` is; never seen by users, so it's good to be specific to method or module.; The function must always take as arguments ``(name, **kwargs)``. ::. # energy method; def run_methodname(name, **kwargs):. # gradient method; def run_methodname_gradient(name, **kwargs):. If the function needs to test the identity of ``name`` several times, it; can be convenient to predefine the lowercase version of the variable. The; case of all other py-side options (in kwargs) has already been handled by; :py:func:`~psi4.driver.energy()`, etc. in driver.py and need not be repeated here. ::. # include if convenient; lowername = name.lower(). # never include; kwargs = kwargs_lower(kwargs). The function often needs to set options for the; c-side modules it calls. In order that the state of the options set by the; user remains when control is returned to the user, an; :py:class:`~psi4.driver.p4util.OptionsState` object is set up. See; :ref:`sec:handlingOptions_py` for details. *All* options set by the; function need to be included here, and *only* options set by the function; should be included. Most options should be associated with a particular; module, but a few (see below) are given without module. ::. # include if any options set; optstash = OptionsState(; # these and other basis options should have no associated module; ['BASIS'],; ['",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst:1778,test,test,1778,doc/sphinxman/source/proc_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst,1,['test'],['test']
Testability,"ense as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:progfaq`:. ===============; Programmers FAQ; ===============. C++ Style in |PSIfour|; ----------------------. #. :ref:`faq:nullptr`; #. :ref:`faq:automakeshared`; #. :ref:`faq:autodecl`; #. :ref:`faq:editorcodestyle`; #. :ref:`faq:githookscodestyle`; #. :ref:`faq:manualcodestyle`. Modules in |PSIfour|; --------------------. #. :ref:`faq:readoptions`; #. :ref:`faq:blaswrappers`; #. :ref:`faq:blasmatrix`; #. :ref:`faq:labas`; #. :ref:`faq:orbdims`; #. :ref:`faq:orbspaces`. Interfacing with |PSIfour|; --------------------------. #. :ref:`faq:addonname`; #. :ref:`faq:addoncmake`. Versioning |PSIfour|; --------------------. #. :ref:`faq:versionbump`; #. :ref:`faq:remotetag`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:psi4version`. Releasing |PSIfour|; -------------------. #. :ref:`faq:annualprocedure`; #. :ref:`faq:prereleaseprocedure`; #. :ref:`faq:releaseprocedure`; #. :ref:`faq:postreleaseprocedure`. Workflow; --------. #. :ref:`faq:localaddon`; #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`; #. :ref:`faq:gdblldb`; #. :ref:`faq:grepascii`; #. :ref:`faq:ignoringadvice`. Miscellaneous; -------------. #. :ref:`faq:add_tests`; #. :ref:`faq:add_psithon_tests`; #. :ref:`faq:add_psiapi_tests`; #. :ref:`How to set up PSIthon tests to run through pytest <faq:psithon_through_pytest>`; #. :ref:`faq:findmissingoutputref`; #. :ref:`faq:githubcodereview`. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_faq.rst:2304,test,tests,2304,doc/sphinxman/source/prog_faq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_faq.rst,1,['test'],['tests']
Testability,"env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --quiet --writefile ""${CCSD}/source/preview_capabilities_scf.rst"" --mode scf --driver egh; OUTPUT ${CCBD}/source/autodoc_capabilities_details.rst; ${CCBD}/source/autodoc_capabilities_summary.rst; ${CCBD}/source/autodoc_capabilities_ccenergy.rst; ${CCBD}/source/autodoc_capabilities_fnocc.rst; ${CCBD}/source/autodoc_capabilities_dfmp2.rst; ${CCBD}/source/autodoc_capabilities_occ_oo.rst; ${CCBD}/source/autodoc_capabilities_occ_nonoo.rst; ${CCBD}/source/autodoc_capabilities_scf.rst; DEPENDS ${CCSD}/document_capabilities.py; ${CCSD}/../../samples/stdsuite_psi4.txt; COMMENT ""Autodoc capabilities""). # Autodoc stubs; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_stubs.py ${CCSD}; OUTPUT ${CCBD}/source/api/psi4.core.set_variable.rst; DEPENDS ${CCSD}/document_stubs.py; COMMENT ""Autodoc stubs""). # # Autodoc driver; # add_custom_command(; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_driver.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_driver.rst; # DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/*.py; # ${CCSD}/document_driver.py; # COMMENT ""Autodoc driver""). # # Autodoc psi4 module; # add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMA",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:15031,stub,stubs,15031,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['stub'],['stubs']
Testability,"ept* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the an",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3622,test,test,3622,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"er: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4631,test,testing,4631,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['testing']
Testability,"erent ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14530,test,test,14530,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['test']
Testability,"ergy tu3-h2o-opt scf-response1 scf-response2 scf-response3; scf-cholesky-basis scf-auto-cholesky; tu4-h2o-freq tu5-sapt tu6-cp-ne2 x2c1 x2c2 x2c3 x2c-perturb-h zaptn-nh2; options1 cubeprop-esp dft-smoke scf-hess1 scf-hess2 scf-hess3 scf-hess4 scf-hess5 scf-freq1 dft-jk scf-coverage; dft-custom-dhdf dft-custom-hybrid dft-custom-mgga dft-custom-gga; pywrap-bfs pywrap-align pywrap-align-chiral mints12 cc-module; tdscf-1 tdscf-2 tdscf-3 tdscf-4 tdscf-5 tdscf-6 tdscf-7; dft-pruning freq-masses sapt9 sapt10 sapt11 scf-uhf-grad-nobeta; linK-1 linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:6555,test,test,6555,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"erms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1338,test,test,1338,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"ess2 scf-hess3 scf-hess4 scf-hess5 scf-freq1 dft-jk scf-coverage; dft-custom-dhdf dft-custom-hybrid dft-custom-mgga dft-custom-gga; pywrap-bfs pywrap-align pywrap-align-chiral mints12 cc-module; tdscf-1 tdscf-2 tdscf-3 tdscf-4 tdscf-5 tdscf-6 tdscf-7; dft-pruning freq-masses sapt9 sapt10 sapt11 scf-uhf-grad-nobeta; linK-1 linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:6791,test,tests,6791,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,3,['test'],['tests']
Testability,"est Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parall",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7009,test,test-specific,7009,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test-specific']
Testability,"f you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; ---",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68845,log,logging,68845,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['logging']
Testability,"f-cholesky-basis scf-auto-cholesky; tu4-h2o-freq tu5-sapt tu6-cp-ne2 x2c1 x2c2 x2c3 x2c-perturb-h zaptn-nh2; options1 cubeprop-esp dft-smoke scf-hess1 scf-hess2 scf-hess3 scf-hess4 scf-hess5 scf-freq1 dft-jk scf-coverage; dft-custom-dhdf dft-custom-hybrid dft-custom-mgga dft-custom-gga; pywrap-bfs pywrap-align pywrap-align-chiral mints12 cc-module; tdscf-1 tdscf-2 tdscf-3 tdscf-4 tdscf-5 tdscf-6 tdscf-7; dft-pruning freq-masses sapt9 sapt10 sapt11 scf-uhf-grad-nobeta; linK-1 linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirecto",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:6620,Test,Tests,6620,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['Test'],['Tests']
Testability,"fied Regula-Falsi method. To; perform IP fitting, one simply calls the :py:func:`~psi4.driver.frac.ip_fitting` Python macro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized :math:`\omega`; between 0.1 and 0.5. Fractional Particle Curves; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number :math:`N`. Two python macros exist for this code. The first is :py:func:`~psi4.driver.frac.frac_traverse`, which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. A",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:29316,test,test,29316,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['test'],['test']
Testability,"file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy =",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7430,test,test,7430,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"fo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <exte",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:9973,Test,Testing,9973,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['Test'],['Testing']
Testability,"folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as sh",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7035,test,tested,7035,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tested']
Testability,"ft_bs_radius_alpha| option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ; error of 0.02 kcal/mol for the same benchmark. Both also reduce the grid order by 1 for H ; and He atoms and avoid any pruning of heavy atoms (Z >= 36) Other schemes mentioned in ; the keyword documentation (e.g. P_SLATER) are experimental and should be considered expert-only. Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For each block, a united set of significant basis functions is; determined by the cutoff radius of each shell of basis functions. The size of; this cutoff radius (and thereby the accuracy of the de",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:25072,benchmark,benchmark,25072,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['benchmark'],['benchmark']
Testability,"g all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that cont",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60392,test,tests,60392,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"g strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10370,test,tests,10370,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"g up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``py",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14290,log,logic,14290,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['log'],['logic']
Testability,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2179,test,test,2179,.github/CONTRIBUTING.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md,1,['test'],['test']
Testability,"he label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't wor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12263,test,tests,12263,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,3,['test'],"['test-name', 'tests']"
Testability,"her factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PAS",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64186,test,test,64186,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['test'],"['test', 'tests']"
Testability,"hift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (log",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29430,test,tested,29430,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tested']
Testability,"hinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4393,test,test,4393,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['test']
Testability,"hould be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast wit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12967,test,test,12967,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"i4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:1354,test,testSuitecfour,1354,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['test'],['testSuitecfour']
Testability,"i`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12537,test,test,12537,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"ically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from ou",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12483,Test,Test,12483,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['Test'],['Test']
Testability,"id full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69154,log,log,69154,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['log']
Testability,"idered, and the CP-corrected CCSD(T); interaction energies (in |kcalpermol|) at each geometry. Doing all this; in a single input is surprisingly easy in |PSIfour|. Here's the input; (available as :srcsample:`tu6-cp-ne2`). .. literalinclude:: @SFNX_INCLUDE@samples/tu6-cp-ne2/input.dat. First, you can see the ``molecule`` block has a couple dashes to; separate the monomers from each other. Also note we've used a Z-matrix to; specify the geometry, and we've used a variable (``R``) as the; interatomic distance. We have *not* specified the value of ``R`` in; the ``molecule`` block like we normally would. That's because we're; going to vary it during the scan across the potential energy surface.; Below the ``molecule`` block, you can see the ``Rvals`` array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas. The next lines, ``set basis aug-cc-pVDZ`` and ``set freeze_core True``,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ``ecp = {}``. This is Python's way of initializing; a ""dictionary"". We're going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the ``R`` values. This winds up being; slightly more elegant than a regular array in later parts of the input; file. The next section, beginning with ``for R in Rvals:``, loops over the; interatomic distances, ``R``, in our array ``Rvals``. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, ``dimer.R = R``,; sets the Z-matrix variable ``R`` of the molecule called ``dimer``; to the ``R`` value extracted from the ``Rvals`` array. The next line,; ``ecp[",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:20080,test,test,20080,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['test'],['test']
Testability,"idual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger fail",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15032,test,tests,15032,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"ies.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 20",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2280,test,test,2280,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"if(TARGET; AddOn::addon)`` in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5681,test,tests,5681,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability,"ified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); include(xhost) # defines: option(ENABLE_XHOST ""Enable processor-specific optimization"" ON); # below are uncommon to adjust; option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_print(ENABLE_CYTHONIZE ""Compile each python file rather than plaintext (requires cython) !experimental!"" OFF); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals. The definition changed with Libint2 but still single integer. Default f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:9928,Test,Test,9928,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['Test'],['Test']
Testability,"ifting and the code is easy to; implement entirely in the Python layer. In the case where the matrix operation; is non-standard and requires some specialized code to handle disk-based; storage, the decision to write in Python is less clear cut. It is certainly; possible to write these out-of-core routines using Numpy primitives, but there; are a number of tools in |PSIfour| already to perform tasks like these that are; required, *e.g.*, for cluster. In this case, a good design would be to write a; simple piece of code in the C++ layer that performs the matrix operation on a; given input, using the I/O routines available in |PSIfour| and the parallelism; afforded by OpenMP, and to make that code available to the front end as; described in :ref:`sec:prog_tour-exposing`. The Python layer could then be; responsible for obtaining the input data and calling this C++ code to do the; manipulations, allowing each language layer to handle the subset of the work; that caters to their individual strengths. A number of concrete examples of this workflow exist in the code already. For; finite difference computations of energy derivatives, the logic to determine; the type of stencil and which displacements are needed is not going to be rate; limiting for any reasonable quantum mechanical energy function. Therefore,; doing that work in the Python layer is a good idea, as it allows the many; Python tools for farming out *embarrassingly parallel* workloads to be used,; while the C++ layer can be used to implement the energy function to be; differentiated. In SCF, we have a number of sources of external embedding potentials that could; enter the calculation. Allowing Python to handle only the details of driving; the SCF iterations, such as external potentials and convergence acceleration; methods, but deferring to C++ to do the heavy lifting for building and; diagonalizing the Fock matrix also takes advantage of the two languages'; strengths and improves maintainability of the code.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:6887,log,logic,6887,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['log'],['logic']
Testability,"il that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14604,test,test,14604,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7461,test,tests,7461,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability,"inations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Install",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:24693,Log,Log,24693,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['Log'],['Log']
Testability,"include(TestingMacros). add_regression_test(aediis-1 ""psi;scf;aediis""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/aediis-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/aediis-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/aediis-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(aediis-2 ""psi;scf;aediis;ecp;ecpint;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/aediis-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/aediis-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/aediis-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(ao-casscf-sp ""psi;quicktests;casscf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/ao-casscf-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/ao-casscf-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/ao-casscf-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(ao-dfcasscf-sp ""psi;quicktests;casscf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/ao-dfcasscf-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/ao-dfcasscf-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/ao-dfcasscf-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(basis-ecp ""quicktests;ecp;ecpint;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/basis-ecp/CMakeLists.txt:8,Test,TestingMacros,8,tests/basis-ecp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/basis-ecp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-frequency-hf ""psi;addon;brianqc;smoketests;freq;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/frequency-hf/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/frequency-hf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/frequency-hf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-frequency-hf-uhf ""psi;addon;brianqc;quicktests;freq;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/frequency-hf-uhf/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/frequency-hf-uhf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/frequency-hf-uhf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-dft ""psi;addon;brianqc;smoketests;opt;dft;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-dft/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/geometry-optimization-dft/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-dft/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-dft-lrc ""psi;addon;brianqc;quicktests;opt;dft;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-dft-lrc/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/geometry-optimization-dft-lrc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-dft-lrc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-hf ""psi;addon;brianqc;smoketests;opt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/geometry-optimization-hf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-hf-rohf ""psi;addon;brianqc;quicktests;opt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf-rohf/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/geometry-optimization-hf-rohf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf-rohf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-hf-uhf ""psi;addon;brianqc;quicktests;opt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf-uhf/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/geometry-optimization-hf-uhf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf-uhf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-high-angular-momentum ""psi;addon;brianqc;smoketests;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/high-angular-momentum/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/high-angular-momentum/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/high-angular-momentum/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-linear-dependence ""psi;addon;brianqc;smoketests;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/linear-dependence/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/linear-dependence/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/linear-dependence/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-pentacene ""psi;addon;brianqc;quicktests;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/pentacene/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/pentacene/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/pentacene/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-single-point-dft ""psi;addon;brianqc;smoketests;scf;dft;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-dft/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/single-point-dft/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-dft/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-single-point-dft-lrc ""psi;addon;brianqc;quicktests;scf;dft;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-dft-lrc/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/single-point-dft-lrc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-dft-lrc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-single-point-dft-nlc ""psi;addon;brianqc;quicktests;scf;dft;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-dft-nlc/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/single-point-dft-nlc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-dft-nlc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-single-point-dft-uhf ""psi;addon;brianqc;quicktests;scf;dft;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-dft-uhf/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/single-point-dft-uhf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-dft-uhf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-single-point-hf ""psi;addon;brianqc;smoketests;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-hf/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/single-point-hf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-hf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-single-point-hf-rohf ""psi;addon;brianqc;quicktests;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-hf-rohf/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/single-point-hf-rohf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-hf-rohf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(brianqc-single-point-hf-uhf ""psi;addon;brianqc;quicktests;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-hf-uhf/CMakeLists.txt:8,Test,TestingMacros,8,tests/brianqc/single-point-hf-uhf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/single-point-hf-uhf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(casscf-fzc-sp ""psi;quicktests;casscf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/casscf-fzc-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/casscf-fzc-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/casscf-fzc-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(casscf-sa-sp ""psi;quicktests;casscf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/casscf-sa-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/casscf-sa-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/casscf-sa-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(casscf-semi ""psi;quicktests;casscf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/casscf-semi/CMakeLists.txt:8,Test,TestingMacros,8,tests/casscf-semi/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/casscf-semi/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(casscf-sp ""psi;quicktests;smoketests;casscf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/casscf-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/casscf-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/casscf-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(castup1 ""psi;quicktests;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/castup1/CMakeLists.txt:8,Test,TestingMacros,8,tests/castup1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/castup1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(castup2 ""psi;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/castup2/CMakeLists.txt:8,Test,TestingMacros,8,tests/castup2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/castup2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(castup3 ""psi;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/castup3/CMakeLists.txt:8,Test,TestingMacros,8,tests/castup3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/castup3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cbs-delta-energy ""psi;quicktests;cbs""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-delta-energy/CMakeLists.txt:8,Test,TestingMacros,8,tests/cbs-delta-energy/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-delta-energy/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cbs-parser ""psi;cbs""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-parser/CMakeLists.txt:8,Test,TestingMacros,8,tests/cbs-parser/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-parser/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cbs-xtpl-alpha ""psi;cbs""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-alpha/CMakeLists.txt:8,Test,TestingMacros,8,tests/cbs-xtpl-alpha/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-alpha/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cbs-xtpl-dict ""psi;quicktests;cbs""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-dict/CMakeLists.txt:8,Test,TestingMacros,8,tests/cbs-xtpl-dict/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-dict/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cbs-xtpl-energy ""psi;quicktests;cbs""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-energy/CMakeLists.txt:8,Test,TestingMacros,8,tests/cbs-xtpl-energy/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-energy/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cbs-xtpl-energy-conv ""psi;quicktests;cbs""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-energy-conv/CMakeLists.txt:8,Test,TestingMacros,8,tests/cbs-xtpl-energy-conv/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-energy-conv/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cbs-xtpl-freq ""psi;quicktests;cbs""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-freq/CMakeLists.txt:8,Test,TestingMacros,8,tests/cbs-xtpl-freq/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-freq/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cbs-xtpl-func ""psi;cbs;medlong""); set_tests_properties(cbs-xtpl-func PROPERTIES COST 200); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-func/CMakeLists.txt:8,Test,TestingMacros,8,tests/cbs-xtpl-func/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-func/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cbs-xtpl-gradient ""psi;quicktests;cbs;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-gradient/CMakeLists.txt:8,Test,TestingMacros,8,tests/cbs-xtpl-gradient/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-gradient/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cbs-xtpl-nbody ""psi;cbs;nbody""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-nbody/CMakeLists.txt:8,Test,TestingMacros,8,tests/cbs-xtpl-nbody/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-nbody/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cbs-xtpl-opt ""psi;cbs""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-opt/CMakeLists.txt:8,Test,TestingMacros,8,tests/cbs-xtpl-opt/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-opt/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cbs-xtpl-wrapper ""psi;cbs""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-wrapper/CMakeLists.txt:8,Test,TestingMacros,8,tests/cbs-xtpl-wrapper/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-wrapper/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc-module ""psi;quicktests;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc-module/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc-module/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc-module/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc1 ""psi;quicktests;smoketests;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc1/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc10 ""psi;cc;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc10/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc10/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc10/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc11 ""psi;cc;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc11/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc11/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc11/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc12 ""psi;cc;noc1;eom""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc12/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc12/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc12/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc13 ""psi;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc13/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc13/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc13/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc13a ""psi;cc;medlong""); set_tests_properties(cc13a PROPERTIES COST 100); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc13a/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc13a/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc13a/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc13b ""psi;quicktests;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc13b/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc13b/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc13b/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc13c ""psi;cc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc13c/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc13c/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc13c/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc13d ""psi;cc;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc13d/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc13d/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc13d/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc14 ""psi;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc14/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc14/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc14/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc15 ""psi;quicktests;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc15/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc15/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc15/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc16 ""psi;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc16/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc16/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc16/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc17 ""psi;quicktests;cc;noc1;eom""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc17/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc17/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc17/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc18 ""psi;quicktests;cc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc18/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc18/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc18/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc19 ""psi;cc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc19/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc19/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc19/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc2 ""psi;cc;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc21 ""psi;cc;cart;noc1;eom;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc21/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc21/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc21/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc22 ""psi;cc;noc1;eom""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc22/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc22/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc22/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc23 ""psi;cc;cart;noc1;eom;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc23/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc23/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc23/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc24 ""psi;cc;cart;noc1;eom;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc24/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc24/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc24/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc25 ""psi;cc;cart;noc1;eom;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc25/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc25/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc25/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc26 ""psi;cc;cart;noc1;eom;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc26/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc26/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc26/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc27 ""psi;cc;cart;noc1;eom;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc27/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc27/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc27/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc28 ""psi;quicktests;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc28/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc28/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc28/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc29 ""psi;cc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc29/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc29/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc29/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc3 ""psi;cc;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc3/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc30 ""psi;cc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc30/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc30/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc30/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc31 ""psi;cc;cart;quicktests""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc31/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc31/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc31/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc32 ""psi;quicktests;cc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc32/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc32/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc32/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc33 ""psi;cc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc33/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc33/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc33/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc34 ""psi;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc34/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc34/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc34/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc35 ""psi;cc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc35/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc35/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc35/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc36 ""psi;cc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc36/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc36/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc36/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc37 ""psi;cc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc37/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc37/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc37/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc38 ""psi;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc38/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc38/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc38/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc39 ""psi;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc39/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc39/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc39/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc4 ""psi;quicktests;cc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc4/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc40 ""psi;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc40/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc40/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc40/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc41 ""psi;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc41/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc41/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc41/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc42 ""psi;cc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc42/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc42/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc42/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc43 ""psi;cc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc43/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc43/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc43/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc44 ""psi;cc;noc1;eom""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc44/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc44/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc44/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc45 ""psi;cc;noc1;eom""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc45/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc45/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc45/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc46 ""psi;cc;noc1;eom;properties""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc46/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc46/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc46/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc47 ""psi;cc;noc1;eom""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc47/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc47/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc47/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc48 ""psi;cc;noc1;eom""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc48/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc48/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc48/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc49 ""psi;quicktests;cc;noc1;eom""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc49/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc49/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc49/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc4a ""psi;cc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc4a/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc4a/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc4a/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc5 ""psi;cc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc5/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc50 ""psi;cc;noc1;eom""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc50/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc50/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc50/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc51 ""psi;cc;cart;noc1;eom""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc51/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc51/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc51/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc52 ""psi;cc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc52/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc52/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc52/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc53 ""psi;cc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc53/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc53/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc53/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc54 ""psi;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc54/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc54/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc54/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc55 ""psi;cc;noc1;eom""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc55/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc55/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc55/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc56 ""psi;cc;noc1;eom""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc56/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc56/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc56/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc6 ""psi;cc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc6/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc6/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc6/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc7 ""psi;cc;gradient;cart;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc7/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc7/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc7/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc8 ""psi;quicktests;cc;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc8/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc8/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc8/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc8a ""psi;cc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc8a/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc8a/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc8a/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc8b ""psi;cc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc8b/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc8b/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc8b/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc8c ""psi;cc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc8c/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc8c/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc8c/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc9 ""psi;cc;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc9/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc9/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc9/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cc9a ""psi;cc;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc9a/CMakeLists.txt:8,Test,TestingMacros,8,tests/cc9a/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cc9a/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cdomp2-1 ""psi;quicktests;cdomp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cdomp2-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/cdomp2-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cdomp2-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cdomp2-2 ""psi;quicktests;cdomp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cdomp2-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cdomp2-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cdomp2-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cdoremp-energy1 ""psi;dfocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cdoremp-energy1/CMakeLists.txt:8,Test,TestingMacros,8,tests/cdoremp-energy1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cdoremp-energy1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cdoremp-energy2 ""psi;dfocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cdoremp-energy2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cdoremp-energy2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cdoremp-energy2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cdremp-1 ""psi;dfocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cdremp-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/cdremp-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cdremp-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cdremp-2 ""psi;dfocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cdremp-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cdremp-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cdremp-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cepa-module ""psi;cepa;lccd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cepa-module/CMakeLists.txt:8,Test,TestingMacros,8,tests/cepa-module/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cepa-module/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cepa1 ""psi;cepa;fnocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cepa1/CMakeLists.txt:8,Test,TestingMacros,8,tests/cepa1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cepa1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cepa2 ""psi;cepa;fnocc;properties""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cepa2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cepa2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cepa2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cepa3 ""psi;cepa;properties;fnocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cepa3/CMakeLists.txt:8,Test,TestingMacros,8,tests/cepa3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cepa3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-deliberate-fails ""psi;quicktests;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/deliberate-fails/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/deliberate-fails/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/deliberate-fails/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-dfmp2-1 ""psi;cfour;addon;dfmp2;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/dfmp2-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/dfmp2-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/dfmp2-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-kw-1 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/kw-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-kw-2 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/kw-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-kw-3 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-3/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/kw-3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-kw-4 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-4/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/kw-4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-kw-5 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-5/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/kw-5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-kw-6 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-6/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/kw-6/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-6/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-kw-7 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-7/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/kw-7/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-7/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-kw-8 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-8/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/kw-8/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/kw-8/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-mints5 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/mints5/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/mints5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/mints5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-mints5-grad ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/mints5-grad/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/mints5-grad/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/mints5-grad/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-mp2-1 ""psi;cfour;addon;mp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/mp2-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/mp2-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/mp2-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-opt-rhf-ccsd_t_ ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/opt-rhf-ccsd_t_/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/opt-rhf-ccsd_t_/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/opt-rhf-ccsd_t_/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-opt-rhf-ccsd_t_-ecc ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/opt-rhf-ccsd_t_-ecc/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/opt-rhf-ccsd_t_-ecc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/opt-rhf-ccsd_t_-ecc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-opt-rhf-mp2 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/opt-rhf-mp2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/opt-rhf-mp2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/opt-rhf-mp2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-opt-rhf-scf ""psi;quicktests;cfour;addon;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/opt-rhf-scf/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/opt-rhf-scf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/opt-rhf-scf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-psi-a24-grad ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-a24-grad/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/psi-a24-grad/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-a24-grad/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-psi-ghost-grad ""psi;cfour;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-ghost-grad/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/psi-ghost-grad/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-ghost-grad/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-psi-mp4 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-mp4/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/psi-mp4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-mp4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-psi-rhf-mp3 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-rhf-mp3/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/psi-rhf-mp3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-rhf-mp3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-psi-rhf-scsmp2 ""psi;cfour;addon;mp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-rhf-scsmp2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/psi-rhf-scsmp2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-rhf-scsmp2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-psi-rohf-scsmp2 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-rohf-scsmp2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/psi-rohf-scsmp2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-rohf-scsmp2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-psi-uhf-mp3 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-uhf-mp3/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/psi-uhf-mp3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-uhf-mp3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-psi-uhf-scsmp2 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-uhf-scsmp2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/psi-uhf-scsmp2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/psi-uhf-scsmp2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-puream ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/puream/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/puream/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/puream/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-pywrap-alias ""psi;quicktests;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/pywrap-alias/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/pywrap-alias/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/pywrap-alias/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-pywrap-all ""psi;quicktests;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/pywrap-all/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/pywrap-all/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/pywrap-all/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-pywrap-basis ""psi;cfour;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/pywrap-basis/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/pywrap-basis/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/pywrap-basis/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-pywrap-cbs1 ""psi;quicktests;cfour;addon;pywrap""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/pywrap-cbs1/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/pywrap-cbs1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/pywrap-cbs1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-pywrap-db1 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/pywrap-db1/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/pywrap-db1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/pywrap-db1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-scf4 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/scf4/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/scf4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/scf4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rhf-cc3 ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-cc3/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rhf-cc3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-cc3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rhf-ccsd ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rhf-ccsd/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rhf-ccsd-ao ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd-ao/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rhf-ccsd-ao/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd-ao/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rhf-ccsd_t_ ""psi;quicktests;smoketests;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd_t_/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rhf-ccsd_t_/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd_t_/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rhf-ccsd_t_-ao ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd_t_-ao/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rhf-ccsd_t_-ao/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd_t_-ao/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rhf-ccsd_t_-ao-ecc ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd_t_-ao-ecc/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rhf-ccsd_t_-ao-ecc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd_t_-ao-ecc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rhf-ccsd_t_-ecc ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd_t_-ecc/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rhf-ccsd_t_-ecc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd_t_-ecc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rhf-ccsd_t_-fc ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd_t_-fc/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rhf-ccsd_t_-fc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsd_t_-fc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rhf-ccsdt ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsdt/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rhf-ccsdt/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-ccsdt/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rhf-mp2 ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-mp2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rhf-mp2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-mp2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rhf-scf ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-scf/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rhf-scf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rhf-scf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rohf-ccsd ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsd/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rohf-ccsd/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsd/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rohf-ccsd-ao ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsd-ao/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rohf-ccsd-ao/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsd-ao/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rohf-ccsd_t_ ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsd_t_/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rohf-ccsd_t_/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsd_t_/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rohf-ccsd_t_-ao ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsd_t_-ao/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rohf-ccsd_t_-ao/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsd_t_-ao/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rohf-ccsd_t_-ao-ecc ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsd_t_-ao-ecc/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rohf-ccsd_t_-ao-ecc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsd_t_-ao-ecc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rohf-ccsd_t_-fc ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsd_t_-fc/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rohf-ccsd_t_-fc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsd_t_-fc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rohf-ccsdt ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsdt/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rohf-ccsdt/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-ccsdt/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rohf-mp2-sc ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-mp2-sc/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rohf-mp2-sc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-mp2-sc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rohf-mp2-std ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-mp2-std/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rohf-mp2-std/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-mp2-std/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rohf-mp4-sc ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-mp4-sc/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rohf-mp4-sc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-mp4-sc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-rohf-scf ""psi;cfour;addon;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-scf/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-rohf-scf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-rohf-scf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-uhf-cc3 ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-cc3/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-uhf-cc3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-cc3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-uhf-ccsd ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-ccsd/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-uhf-ccsd/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-ccsd/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-uhf-ccsd_t_ ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-ccsd_t_/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-uhf-ccsd_t_/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-ccsd_t_/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-uhf-ccsd_t_-ao ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-ccsd_t_-ao/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-uhf-ccsd_t_-ao/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-ccsd_t_-ao/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-uhf-ccsd_t_-ao-ecc ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-ccsd_t_-ao-ecc/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-uhf-ccsd_t_-ao-ecc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-ccsd_t_-ao-ecc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-uhf-ccsd_t_-ecc ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-ccsd_t_-ecc/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-uhf-ccsd_t_-ecc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-ccsd_t_-ecc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-uhf-ccsdt ""psi;cfour;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-ccsdt/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-uhf-ccsdt/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-ccsdt/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-uhf-mp2 ""psi;cfour;addon;mp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-mp2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-uhf-mp2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-mp2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cfour-sp-uhf-scf ""psi;cfour;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-scf/CMakeLists.txt:8,Test,TestingMacros,8,tests/cfour/sp-uhf-scf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/sp-uhf-scf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(chemps2-caspt2-n2 ""psi;chemps2;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/chemps2/caspt2-n2/CMakeLists.txt:8,Test,TestingMacros,8,tests/chemps2/caspt2-n2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/chemps2/caspt2-n2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(chemps2-caspt2-small ""psi;quicktests;chemps2;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/chemps2/caspt2-small/CMakeLists.txt:8,Test,TestingMacros,8,tests/chemps2/caspt2-small/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/chemps2/caspt2-small/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(chemps2-ci-h2o ""psi;chemps2;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/chemps2/ci-h2o/CMakeLists.txt:8,Test,TestingMacros,8,tests/chemps2/ci-h2o/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/chemps2/ci-h2o/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(chemps2-natural-orbital ""psi;chemps2;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/chemps2/natural-orbital/CMakeLists.txt:8,Test,TestingMacros,8,tests/chemps2/natural-orbital/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/chemps2/natural-orbital/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(chemps2-scf-n2 ""psi;quicktests;smoketests;chemps2;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/chemps2/scf-n2/CMakeLists.txt:8,Test,TestingMacros,8,tests/chemps2/scf-n2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/chemps2/scf-n2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(ci-multi ""psi;quicktests;misc;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/ci-multi/CMakeLists.txt:8,Test,TestingMacros,8,tests/ci-multi/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/ci-multi/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cisd-h2o+-0 ""psi;quicktests;cisd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-h2o+-0/CMakeLists.txt:8,Test,TestingMacros,8,tests/cisd-h2o+-0/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-h2o+-0/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cisd-h2o+-1 ""psi;cisd;properties""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-h2o+-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/cisd-h2o+-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-h2o+-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cisd-h2o+-2 ""psi;cisd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-h2o+-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cisd-h2o+-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-h2o+-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cisd-h2o-clpse ""psi;cisd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-h2o-clpse/CMakeLists.txt:8,Test,TestingMacros,8,tests/cisd-h2o-clpse/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-h2o-clpse/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cisd-opt-fd ""psi;cisd;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-opt-fd/CMakeLists.txt:8,Test,TestingMacros,8,tests/cisd-opt-fd/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-opt-fd/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cisd-sp ""psi;cisd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/cisd-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cisd-sp-2 ""psi;cisd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-sp-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/cisd-sp-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cisd-sp-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cookbook-manual-fd-hess-energy ""psi;cookbook""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cookbook/manual-fd-hess-energy/CMakeLists.txt:8,Test,TestingMacros,8,tests/cookbook/manual-fd-hess-energy/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cookbook/manual-fd-hess-energy/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cookbook-manual-fd-hess-grad ""psi;cookbook""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cookbook/manual-fd-hess-grad/CMakeLists.txt:8,Test,TestingMacros,8,tests/cookbook/manual-fd-hess-grad/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cookbook/manual-fd-hess-grad/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(cookbook-rohf-orb-rot ""psi;cookbook;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cookbook/rohf-orb-rot/CMakeLists.txt:8,Test,TestingMacros,8,tests/cookbook/rohf-orb-rot/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cookbook/rohf-orb-rot/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct-grad1 ""psi;dct;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct-grad2 ""psi;quicktests;dct;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct-grad3 ""psi;dct""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct-grad3/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct-grad3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct-grad3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct-grad4 ""psi;dct""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct-grad4/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct-grad4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct-grad4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct1 ""psi;quicktests;dct;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct10 ""psi;dct""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct10/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct10/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct10/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct11 ""psi;noc1;dct""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct11/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct11/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct11/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct12 ""psi;noc1;dct""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct12/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct12/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct12/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct2 ""psi;dct""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct3 ""psi;quicktests;dct;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct3/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct4 ""psi;dct""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct4/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct5 ""psi;dct;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct5/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct6 ""psi;dct;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct6/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct6/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct6/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct7 ""psi;dct;noc1""); set_tests_properties(dct7 PROPERTIES COST 100); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct7/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct7/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct7/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct8 ""psi;dct""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct8/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct8/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct8/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dct9 ""psi;dct;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct9/CMakeLists.txt:8,Test,TestingMacros,8,tests/dct9/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dct9/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(ddd-deriv ""psi;quicktests;smoketests;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/ddd-deriv/CMakeLists.txt:8,Test,TestingMacros,8,tests/ddd-deriv/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/ddd-deriv/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(ddd-function-kwargs ""psi;findif;nbody;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/ddd-function-kwargs/CMakeLists.txt:8,Test,TestingMacros,8,tests/ddd-function-kwargs/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/ddd-function-kwargs/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(decontract ""psi;quicktests;cc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/decontract/CMakeLists.txt:8,Test,TestingMacros,8,tests/decontract/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/decontract/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(density-screen-1 ""psi;quicktests;scf"")",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/density-screen-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/density-screen-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/density-screen-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(density-screen-2 ""psi;dft;scf;medlong""); set_tests_properties(density-screen-2 PROPERTIES COST 500); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/density-screen-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/density-screen-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/density-screen-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfcasscf-fzc-sp ""psi;quicktests;casscf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfcasscf-fzc-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfcasscf-fzc-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfcasscf-fzc-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfcasscf-sa-sp ""psi;quicktests;casscf;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfcasscf-sa-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfcasscf-sa-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfcasscf-sa-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfcasscf-sp ""psi;quicktests;casscf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfcasscf-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfcasscf-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfcasscf-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfccd-grad1 ""psi;df;dfccd-grad""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccd-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfccd-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccd-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfccd1 ""psi;quicktests;df;dfccd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccd1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfccd1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccd1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfccdl1 ""psi;df;dfccdl""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccdl1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfccdl1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccdl1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfccsd-grad1 ""psi;quicktests;df;dfccsd-grad""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsd-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfccsd-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsd-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfccsd-grad2 ""psi;df;dfccsd-grad""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsd-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfccsd-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsd-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfccsd-t-grad1 ""psi;quicktests;df;dfccsd-t-grad""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsd-t-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfccsd-t-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsd-t-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfccsd-t-grad2 ""psi;df;dfccsdt-grad""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsd-t-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfccsd-t-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsd-t-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfccsd1 ""psi;quicktests;df;dfccsd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsd1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfccsd1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsd1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfccsdat1 ""psi;df;dfccsdat""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsdat1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfccsdat1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsdat1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfccsdat2 ""psi;df;dfccsdat""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsdat2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfccsdat2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsdat2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfccsdl1 ""psi;quicktests;df;dfccsdl""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsdl1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfccsdl1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsdl1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfccsdt1 ""psi;df;dfccsdt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsdt1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfccsdt1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsdt1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfccsdt2 ""psi;df;dfccsdt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsdt2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfccsdt2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfccsdt2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfep2-1 ""psi;quicktests;minitests;df;dfep2;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfep2-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfep2-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfep2-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfep2-2 ""psi;quicktests;minitests;df;dfep2;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfep2-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfep2-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfep2-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-1 ""psi;quicktests;smoketests;df;dfmp2;cart;nbody""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-2 ""psi;df;dfmp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-3 ""psi;df;dfmp2;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-3/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-4 ""psi;df;dfmp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-4/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-5 ""psi;df;dfmp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-5/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-ecp ""quicktests;df;dfmp2;ecp;nbody;ecpint;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-ecp/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-ecp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-ecp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-fc ""quicktests;df;dfmp2;nbody""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-fc/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-fc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-fc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-freq1 ""psi;quicktests;df;dfmp2;freq;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-freq1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-freq1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-freq1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-freq2 ""psi;quicktests;df;dfmp2;freq;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-freq2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-freq2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-freq2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-grad1 ""psi;quicktests;df;dfmp2;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-grad2 ""psi;df;dfmp2;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-grad3 ""psi;df;dfmp2;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-grad3/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-grad3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-grad3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-grad4 ""psi;df;dfmp2;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-grad4/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-grad4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-grad4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfmp2-grad5 ""psi;df;dfmp2;gradient;cart;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-grad5/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfmp2-grad5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfmp2-grad5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp2-1 ""psi;quicktests;df;dfomp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp2-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp2-2 ""psi;df;dfomp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp2-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp2-3 ""psi;df;dfomp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-3/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp2-3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp2-4 ""psi;df;dfomp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-4/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp2-4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp2-grad1 ""psi;df;dfomp2;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp2-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp2-grad2 ""psi;df;dfomp2;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp2-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp2-grad3 ""psi;df;dfomp2;gradient;cart;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-grad3/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp2-grad3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2-grad3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp2p5-1 ""psi;df;dfomp2p5""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2p5-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp2p5-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2p5-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp2p5-2 ""psi;df;dfomp2p5""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2p5-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp2p5-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2p5-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp2p5-grad1 ""psi;df;dfomp2p5""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2p5-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp2p5-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2p5-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp2p5-grad2 ""psi;df;dfomp2p5""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2p5-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp2p5-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp2p5-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp3-1 ""psi;quicktests;df;dfomp3""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp3-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp3-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp3-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp3-2 ""psi;df;dfomp3""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp3-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp3-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp3-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp3-grad1 ""psi;df;dfomp3""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp3-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp3-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp3-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfomp3-grad2 ""psi;quicktests;df;dfomp3""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp3-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfomp3-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfomp3-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dforemp-grad1 ""psi;dfocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dforemp-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dforemp-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dforemp-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dforemp-grad2 ""psi;dfocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dforemp-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dforemp-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dforemp-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfrasscf-sp ""psi;quicktests;casscf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfrasscf-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfrasscf-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfrasscf-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfremp-1 ""psi;dfocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfremp-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfremp-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfremp-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfremp-2 ""psi;dfocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfremp-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfremp-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfremp-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dfscf-bz2 ""psi;df;dfscf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfscf-bz2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dfscf-bz2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dfscf-bz2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-b2plyp ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-b2plyp/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-b2plyp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-b2plyp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-b3lyp ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-b3lyp/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-b3lyp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-b3lyp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-custom ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-custom/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-custom/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-custom/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-custom-dhdf ""psi;dft;scf;nbody""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-custom-dhdf/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-custom-dhdf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-custom-dhdf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-custom-gga ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-custom-gga/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-custom-gga/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-custom-gga/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-custom-hybrid ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-custom-hybrid/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-custom-hybrid/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-custom-hybrid/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-custom-mgga ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-custom-mgga/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-custom-mgga/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-custom-mgga/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-dens-cut ""psi;quicktests;dft;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-dens-cut/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-dens-cut/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-dens-cut/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-freq ""psi;dft;scf;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-freq/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-freq/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-freq/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-freq-analytic1 ""psi;dft;scf;quicktests;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-freq-analytic1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-freq-analytic1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-freq-analytic1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-freq-analytic2 ""psi;dft;scf;quicktests;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-freq-analytic2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-freq-analytic2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-freq-analytic2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-ghost ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-ghost/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-ghost/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-ghost/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-grac ""psi;shorttests;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grac/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-grac/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grac/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-grad-disk ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad-disk/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-grad-disk/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad-disk/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-grad-lr1 ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad-lr1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-grad-lr1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad-lr1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-grad-lr2 ""psi;dft;scf;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad-lr2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-grad-lr2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad-lr2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-grad-lr3 ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad-lr3/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-grad-lr3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad-lr3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-grad-meta ""psi;dft;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad-meta/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-grad-meta/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad-meta/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-grad1 ""psi;dft;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-grad2 ""psi;shorttests;dft;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-jk ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-jk/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-jk/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-jk/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-omega ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-omega/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-omega/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-omega/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-pruning ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-pruning/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-pruning/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-pruning/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-psivar ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-psivar/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-psivar/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-psivar/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-reference ""psi;dft;scf;mp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-reference/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-reference/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-reference/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-smoke ""psi;quicktests;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-smoke/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-smoke/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-smoke/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft-vv10 ""psi;quicktests;dft;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-vv10/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft-vv10/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft-vv10/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft1 ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft1-alt ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft1-alt/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft1-alt/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft1-alt/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft2 ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dft3 ""psi;dft;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft3/CMakeLists.txt:8,Test,TestingMacros,8,tests/dft3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dft3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dftd3-energy ""psi;quicktests;smoketests;dftd3;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/energy/CMakeLists.txt:8,Test,TestingMacros,8,tests/dftd3/energy/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/energy/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dftd3-grad ""psi;dftd3;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/grad/CMakeLists.txt:8,Test,TestingMacros,8,tests/dftd3/grad/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/grad/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dftd3-nbody-cp-gradient ""psi;dftd3;addon;cart;nbody;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/nbody-cp-gradient/CMakeLists.txt:8,Test,TestingMacros,8,tests/dftd3/nbody-cp-gradient/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/nbody-cp-gradient/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dftd3-version ""psi;dftd3;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/version/CMakeLists.txt:8,Test,TestingMacros,8,tests/dftd3/version/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/version/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dftd4-energy ""psi;quicktests;smoketests;dftd4;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd4/energy/CMakeLists.txt:8,Test,TestingMacros,8,tests/dftd4/energy/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd4/energy/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dftd4-r2scan ""psi;quicktests;dftd4;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd4/r2scan/CMakeLists.txt:8,Test,TestingMacros,8,tests/dftd4/r2scan/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd4/r2scan/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dkh-molpro-2order ""psi;quicktests;smoketests;dkh;addon;scf""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dkh/molpro-2order/CMakeLists.txt:8,Test,TestingMacros,8,tests/dkh/molpro-2order/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dkh/molpro-2order/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dlpnomp2-1 ""psi;dlpno;mp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dlpnomp2-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/dlpnomp2-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dlpnomp2-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dlpnomp2-2 ""psi;dlpno;mp2;cbs""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dlpnomp2-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dlpnomp2-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dlpnomp2-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(dlpnomp2-3 ""psi;dlpno;mp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dlpnomp2-3/CMakeLists.txt:8,Test,TestingMacros,8,tests/dlpnomp2-3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dlpnomp2-3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(docs-bases ""psi;docs;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/docs-bases/CMakeLists.txt:8,Test,TestingMacros,8,tests/docs-bases/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/docs-bases/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(docs-dft ""psi;docs;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/docs-dft/CMakeLists.txt:8,Test,TestingMacros,8,tests/docs-dft/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/docs-dft/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(erd-mp2-module ""psi;df;mp2;erd;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/erd/mp2-module/CMakeLists.txt:8,Test,TestingMacros,8,tests/erd/mp2-module/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/erd/mp2-module/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(erd-scf5 ""psi;quicktests;smoketests;scf;erd;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/erd/scf5/CMakeLists.txt:8,Test,TestingMacros,8,tests/erd/scf5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/erd/scf5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(explicit-am-basis ""psi;quicktests;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/explicit-am-basis/CMakeLists.txt:8,Test,TestingMacros,8,tests/explicit-am-basis/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/explicit-am-basis/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(extern1 ""psi;quicktests;scf;extern;findif""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/extern1/CMakeLists.txt:8,Test,TestingMacros,8,tests/extern1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/extern1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(extern2 ""psi;mp2;cart;extern;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/extern2/CMakeLists.txt:8,Test,TestingMacros,8,tests/extern2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/extern2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(extern3 ""psi;mp2;cart;extern""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/extern3/CMakeLists.txt:8,Test,TestingMacros,8,tests/extern3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/extern3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(extern4 ""psi;quicktests;scf;extern;findif""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/extern4/CMakeLists.txt:8,Test,TestingMacros,8,tests/extern4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/extern4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fci-coverage ""psi;ci;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-coverage/CMakeLists.txt:8,Test,TestingMacros,8,tests/fci-coverage/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-coverage/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fci-dipole ""psi;quicktests;ci;properties;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-dipole/CMakeLists.txt:8,Test,TestingMacros,8,tests/fci-dipole/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-dipole/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fci-h2o ""psi;ci;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-h2o/CMakeLists.txt:8,Test,TestingMacros,8,tests/fci-h2o/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-h2o/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fci-h2o-2 ""psi;fci;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-h2o-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/fci-h2o-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-h2o-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fci-h2o-fzcv ""psi;fci;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-h2o-fzcv/CMakeLists.txt:8,Test,TestingMacros,8,tests/fci-h2o-fzcv/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-h2o-fzcv/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fci-tdm ""psi;ci;properties;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-tdm/CMakeLists.txt:8,Test,TestingMacros,8,tests/fci-tdm/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-tdm/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fci-tdm-2 ""psi;ci;properties;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-tdm-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/fci-tdm-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fci-tdm-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fd-freq-energy ""psi;findif;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fd-freq-energy/CMakeLists.txt:8,Test,TestingMacros,8,tests/fd-freq-energy/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fd-freq-energy/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fd-freq-energy-large ""psi;longtests;findif;cart;noc1""); set_tests_properties(; fd-freq-energy-large; PROPERTIES; COST 1000; TIMEOUT 3000; ); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fd-freq-energy-large/CMakeLists.txt:8,Test,TestingMacros,8,tests/fd-freq-energy-large/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fd-freq-energy-large/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fd-freq-gradient ""psi;findif;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fd-freq-gradient/CMakeLists.txt:8,Test,TestingMacros,8,tests/fd-freq-gradient/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fd-freq-gradient/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fd-freq-gradient-large ""psi;findif;cart;noc1;medlong""); set_tests_properties(fd-freq-gradient-large PROPERTIES COST 200); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fd-freq-gradient-large/CMakeLists.txt:8,Test,TestingMacros,8,tests/fd-freq-gradient-large/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fd-freq-gradient-large/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fd-gradient ""psi;findif;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fd-gradient/CMakeLists.txt:8,Test,TestingMacros,8,tests/fd-gradient/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fd-gradient/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fisapt-siao1 ""psi;sapt""). file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/../../psi4/share/psi4/fsapt/fsapt.py DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fisapt-siao1/CMakeLists.txt:8,Test,TestingMacros,8,tests/fisapt-siao1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fisapt-siao1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fnocc1 ""psi;fnocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc1/CMakeLists.txt:8,Test,TestingMacros,8,tests/fnocc1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fnocc2 ""psi;quicktests;fnocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc2/CMakeLists.txt:8,Test,TestingMacros,8,tests/fnocc2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fnocc3 ""psi;fnocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc3/CMakeLists.txt:8,Test,TestingMacros,8,tests/fnocc3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fnocc4 ""psi;quicktests;fnocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc4/CMakeLists.txt:8,Test,TestingMacros,8,tests/fnocc4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fnocc5 ""psi;quicktests;fnocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc5/CMakeLists.txt:8,Test,TestingMacros,8,tests/fnocc5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fnocc6 ""psi;quicktests;fnocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc6/CMakeLists.txt:8,Test,TestingMacros,8,tests/fnocc6/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc6/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fnocc7 ""psi;fnocc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc7/CMakeLists.txt:8,Test,TestingMacros,8,tests/fnocc7/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fnocc7/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(frac ""psi;scf;mom;frac;misc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/frac/CMakeLists.txt:8,Test,TestingMacros,8,tests/frac/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/frac/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(frac-ip-fitting ""psi;misc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/frac-ip-fitting/CMakeLists.txt:8,Test,TestingMacros,8,tests/frac-ip-fitting/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/frac-ip-fitting/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(frac-sym ""psi;misc;scf;frac""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/frac-sym/CMakeLists.txt:8,Test,TestingMacros,8,tests/frac-sym/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/frac-sym/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(frac-traverse ""psi;misc;frac""); set_tests_properties(frac-traverse PROPERTIES COST 100); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/frac-traverse/CMakeLists.txt:8,Test,TestingMacros,8,tests/frac-traverse/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/frac-traverse/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(freq-isotope1 ""psi;freq;cart""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/freq-isotope1/CMakeLists.txt:8,Test,TestingMacros,8,tests/freq-isotope1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/freq-isotope1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(freq-isotope2 ""psi;quicktests;freq;cart;noc1""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/freq-isotope2/CMakeLists.txt:8,Test,TestingMacros,8,tests/freq-isotope2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/freq-isotope2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(freq-masses ""psi;freq;findif;d2ints""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/freq-masses/CMakeLists.txt:8,Test,TestingMacros,8,tests/freq-masses/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/freq-masses/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fsapt-allterms ""psi;sapt;cart;fsapt""); set_tests_properties(fsapt-allterms PROPERTIES COST 200). file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/../../psi4/share/psi4/fsapt/fsapt.py DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-allterms/CMakeLists.txt:8,Test,TestingMacros,8,tests/fsapt-allterms/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-allterms/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fsapt-d ""psi;quicktests;smoketests;sapt;cart;fsapt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-d/CMakeLists.txt:8,Test,TestingMacros,8,tests/fsapt-d/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-d/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fsapt-ext ""psi;quicktests;sapt;cart;fsapt;extern""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-ext/CMakeLists.txt:8,Test,TestingMacros,8,tests/fsapt-ext/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-ext/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fsapt-ext-abc ""psi;quicktests;sapt;cart;fsapt;extern""); file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/../../psi4/share/psi4/fsapt/fsapt.py DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-ext-abc/CMakeLists.txt:8,Test,TestingMacros,8,tests/fsapt-ext-abc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-ext-abc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fsapt-ext-abc-au ""psi;quicktests;sapt;cart;extern""); file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/../../psi4/share/psi4/fsapt/fsapt.py DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-ext-abc-au/CMakeLists.txt:8,Test,TestingMacros,8,tests/fsapt-ext-abc-au/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-ext-abc-au/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fsapt-ext-abc2 ""psi;quicktests;sapt;cart;fsapt;extern""); file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/../../psi4/share/psi4/fsapt/fsapt.py DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-ext-abc2/CMakeLists.txt:8,Test,TestingMacros,8,tests/fsapt-ext-abc2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-ext-abc2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fsapt-terms ""psi;quicktests;sapt;cart;fsapt""); file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/../../psi4/share/psi4/fsapt/fsapt.py DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-terms/CMakeLists.txt:8,Test,TestingMacros,8,tests/fsapt-terms/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt-terms/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fsapt1 ""psi;sapt;cart;fsapt;medlong""); set_tests_properties(fsapt1 PROPERTIES COST 400); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt1/CMakeLists.txt:8,Test,TestingMacros,8,tests/fsapt1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fsapt2 ""psi;quicktests;sapt;cart;fsapt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt2/CMakeLists.txt:8,Test,TestingMacros,8,tests/fsapt2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsapt2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(fsaptd-terms ""psi;quicktests;sapt;cart;fsapt""); file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/../../psi4/share/psi4/fsapt/fsapt.py DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsaptd-terms/CMakeLists.txt:8,Test,TestingMacros,8,tests/fsaptd-terms/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fsaptd-terms/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(gcp-b973c ""psi;quicktests;dftd3;gcp;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/b973c/CMakeLists.txt:8,Test,TestingMacros,8,tests/gcp/b973c/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/b973c/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(gcp-dft-custom-hybrid ""psi;gcp;addon;dft""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/dft-custom-hybrid/CMakeLists.txt:8,Test,TestingMacros,8,tests/gcp/dft-custom-hybrid/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/dft-custom-hybrid/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(gcp-hf3c ""psi;quicktests;smoketests;gcp;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/hf3c/CMakeLists.txt:8,Test,TestingMacros,8,tests/gcp/hf3c/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/hf3c/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(gcp-hf3c-gradient ""psi;gcp;addon;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/hf3c-gradient/CMakeLists.txt:8,Test,TestingMacros,8,tests/gcp/hf3c-gradient/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/hf3c-gradient/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(gcp-hf3c-hessian ""psi;gcp;addon;hessian;d2ints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/hf3c-hessian/CMakeLists.txt:8,Test,TestingMacros,8,tests/gcp/hf3c-hessian/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/hf3c-hessian/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(gcp-pbeh3c ""psi;gcp;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/pbeh3c/CMakeLists.txt:8,Test,TestingMacros,8,tests/gcp/pbeh3c/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/pbeh3c/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(gcp-r2scan3c ""psi;quicktests;dftd4;gcp;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/r2scan3c/CMakeLists.txt:8,Test,TestingMacros,8,tests/gcp/r2scan3c/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/gcp/r2scan3c/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(gdma-gdma1 ""psi;quicktests;smoketests;scf;gdma;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/gdma/gdma1/CMakeLists.txt:8,Test,TestingMacros,8,tests/gdma/gdma1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/gdma/gdma1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(ghosts ""psi;misc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/ghosts/CMakeLists.txt:8,Test,TestingMacros,8,tests/ghosts/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/ghosts/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(gibbs ""psi;quicktests;misc;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/gibbs/CMakeLists.txt:8,Test,TestingMacros,8,tests/gibbs/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/gibbs/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(gpu_dfcc-gpudfcc1 ""psi;gpu_dfcc;addon""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/gpu_dfcc/gpudfcc1/CMakeLists.txt:8,Test,TestingMacros,8,tests/gpu_dfcc/gpudfcc1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/gpu_dfcc/gpudfcc1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(gpu_dfcc-gpudfcc2 ""psi;gpu_dfcc;addon""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/gpu_dfcc/gpudfcc2/CMakeLists.txt:8,Test,TestingMacros,8,tests/gpu_dfcc/gpudfcc2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/gpu_dfcc/gpudfcc2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(isapt-charged ""psi;sapt;medlong""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/isapt-charged/CMakeLists.txt:8,Test,TestingMacros,8,tests/isapt-charged/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/isapt-charged/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(isapt-siao1 ""psi;sapt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/isapt-siao1/CMakeLists.txt:8,Test,TestingMacros,8,tests/isapt-siao1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/isapt-siao1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(isapt1 ""psi;sapt""); set_tests_properties(isapt1 PROPERTIES COST 300); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/isapt1/CMakeLists.txt:8,Test,TestingMacros,8,tests/isapt1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/isapt1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(isapt2 ""psi;sapt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/isapt2/CMakeLists.txt:8,Test,TestingMacros,8,tests/isapt2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/isapt2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(json-schema-1-energy ""psi;quicktests;json""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-energy/CMakeLists.txt:8,Test,TestingMacros,8,tests/json/schema-1-energy/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-energy/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(json-schema-1-ghost ""psi;json""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-ghost/CMakeLists.txt:8,Test,TestingMacros,8,tests/json/schema-1-ghost/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-ghost/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(json-schema-1-gradient ""psi;quicktests;smoketests;json""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-gradient/CMakeLists.txt:8,Test,TestingMacros,8,tests/json/schema-1-gradient/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-gradient/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(json-schema-1-orient ""psi;json""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-orient/CMakeLists.txt:8,Test,TestingMacros,8,tests/json/schema-1-orient/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-orient/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(json-schema-1-properties ""psi;json""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-properties/CMakeLists.txt:8,Test,TestingMacros,8,tests/json/schema-1-properties/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-properties/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(json-schema-1-response ""psi;json;properties""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-response/CMakeLists.txt:8,Test,TestingMacros,8,tests/json/schema-1-response/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-response/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(json-schema-1-tamps ""psi;json""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-tamps/CMakeLists.txt:8,Test,TestingMacros,8,tests/json/schema-1-tamps/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-tamps/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(json-schema-1-throws ""psi;json""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-throws/CMakeLists.txt:8,Test,TestingMacros,8,tests/json/schema-1-throws/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-throws/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(lccd-grad1 ""psi;cepa;lccd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/lccd-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/lccd-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/lccd-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(lccd-grad2 ""psi;cepa;lccd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/lccd-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/lccd-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/lccd-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(libefp-efp-grad ""psi;quicktests;libefp;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/libefp/efp-grad/CMakeLists.txt:8,Test,TestingMacros,8,tests/libefp/efp-grad/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/libefp/efp-grad/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(libefp-qchem-efp-sp ""psi;libefp;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/libefp/qchem-efp-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/libefp/qchem-efp-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/libefp/qchem-efp-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(libefp-qchem-qmefp-puream-sp ""psi;quicktests;libefp;addon;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/libefp/qchem-qmefp-puream-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/libefp/qchem-qmefp-puream-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/libefp/qchem-qmefp-puream-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(libefp-qchem-qmefp-sp ""psi;quicktests;smoketests;libefp;addon;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/libefp/qchem-qmefp-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/libefp/qchem-qmefp-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/libefp/qchem-qmefp-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(libefp-qmefp-moldomains ""psi;libefp;addon;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/libefp/qmefp-moldomains/CMakeLists.txt:8,Test,TestingMacros,8,tests/libefp/qmefp-moldomains/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/libefp/qmefp-moldomains/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(linK-1 ""psi;quicktests;scf;direct-scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/linK-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/linK-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/linK-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(linK-2 ""psi;dft;scf;direct-scf;medlong""); set_tests_properties(linK-2 PROPERTIES COST 800); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/linK-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/linK-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/linK-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(linK-3 ""psi;scf;direct-scf""); set_tests_properties(linK-3 PROPERTIES COST 100); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/linK-3/CMakeLists.txt:8,Test,TestingMacros,8,tests/linK-3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/linK-3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(matrix1 ""psi;quicktests;misc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/matrix1/CMakeLists.txt:8,Test,TestingMacros,8,tests/matrix1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/matrix1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(matrix2 ""psi;quicktests;misc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/matrix2/CMakeLists.txt:8,Test,TestingMacros,8,tests/matrix2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/matrix2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mbis-1 ""psi;properties;quicktests""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mbis-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/mbis-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mbis-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mbis-2 ""psi;properties""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mbis-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/mbis-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mbis-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mbis-3 ""psi;properties""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mbis-3/CMakeLists.txt:8,Test,TestingMacros,8,tests/mbis-3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mbis-3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mbis-4 ""psi;properties""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mbis-4/CMakeLists.txt:8,Test,TestingMacros,8,tests/mbis-4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mbis-4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mbis-5 ""psi;properties""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mbis-5/CMakeLists.txt:8,Test,TestingMacros,8,tests/mbis-5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mbis-5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mbis-6 ""psi;properties;quicktests""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mbis-6/CMakeLists.txt:8,Test,TestingMacros,8,tests/mbis-6/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mbis-6/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mcscf1 ""psi;quicktests;mcscf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mcscf1/CMakeLists.txt:8,Test,TestingMacros,8,tests/mcscf1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mcscf1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mcscf2 ""psi;mcscf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mcscf2/CMakeLists.txt:8,Test,TestingMacros,8,tests/mcscf2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mcscf2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mcscf3 ""psi;mcscf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mcscf3/CMakeLists.txt:8,Test,TestingMacros,8,tests/mcscf3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mcscf3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mints-benchmark ""psi;mints;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints-benchmark/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints-benchmark/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints-benchmark/CMakeLists.txt,2,"['Test', 'benchmark']","['TestingMacros', 'benchmark']"
Testability,"include(TestingMacros). add_regression_test(mints-helper ""psi;mints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints-helper/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints-helper/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints-helper/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mints1 ""psi;quicktests;mints;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints1/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mints10 ""psi;mints;quicktests""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints10/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints10/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints10/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mints12 ""psi;mints;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints12/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints12/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints12/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mints15 ""psi;mints;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints15/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints15/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints15/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mints2 ""psi;quicktests;mints;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints2/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mints2-bse ""psi;quicktests;mints;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints2-bse/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints2-bse/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints2-bse/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mints3 ""psi;mints;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints3/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mints4 ""psi;mints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints4/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mints5 ""psi;mints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints5/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mints6 ""psi;mints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints6/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints6/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints6/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mints8 ""psi;mints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints8/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints8/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints8/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mints9 ""psi;mints;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints9/CMakeLists.txt:8,Test,TestingMacros,8,tests/mints9/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints9/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(molden1 ""psi;quicktests;misc;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/molden1/CMakeLists.txt:8,Test,TestingMacros,8,tests/molden1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/molden1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(molden2 ""psi;quicktests;misc;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/molden2/CMakeLists.txt:8,Test,TestingMacros,8,tests/molden2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/molden2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mom ""psi;scf;mom;misc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mom/CMakeLists.txt:8,Test,TestingMacros,8,tests/mom/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mom/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mom-h2o-3 ""psi;scf;mom;misc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mom-h2o-3/CMakeLists.txt:8,Test,TestingMacros,8,tests/mom-h2o-3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mom-h2o-3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mom-h2o-4 ""psi;scf;mom;soscf;misc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mom-h2o-4/CMakeLists.txt:8,Test,TestingMacros,8,tests/mom-h2o-4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mom-h2o-4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mp2-1 ""psi;mp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/mp2-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mp2-def2 ""psi;mp2;cart;nbody""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2-def2/CMakeLists.txt:8,Test,TestingMacros,8,tests/mp2-def2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2-def2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mp2-grad1 ""psi;mp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/mp2-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mp2-grad2 ""psi;mp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/mp2-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mp2-h ""psi;mp2;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2-h/CMakeLists.txt:8,Test,TestingMacros,8,tests/mp2-h/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2-h/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mp2p5-grad1 ""psi;quicktests;mp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2p5-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/mp2p5-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2p5-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mp2p5-grad2 ""psi;mp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2p5-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/mp2p5-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2p5-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mp3-grad1 ""psi;mp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp3-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/mp3-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp3-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mp3-grad2 ""psi;mp2""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp3-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/mp3-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp3-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mpn-bh ""psi;quicktests;mp2;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mpn-bh/CMakeLists.txt:8,Test,TestingMacros,8,tests/mpn-bh/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mpn-bh/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mrcc-ccsd_t_ ""psi;quicktests;mrcc;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mrcc/ccsd_t_/CMakeLists.txt:8,Test,TestingMacros,8,tests/mrcc/ccsd_t_/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mrcc/ccsd_t_/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mrcc-ccsdt ""psi;quicktests;smoketests;mrcc;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mrcc/ccsdt/CMakeLists.txt:8,Test,TestingMacros,8,tests/mrcc/ccsdt/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mrcc/ccsdt/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mrcc-ccsdt_q_ ""psi;mrcc;addon;cc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mrcc/ccsdt_q_/CMakeLists.txt:8,Test,TestingMacros,8,tests/mrcc/ccsdt_q_/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mrcc/ccsdt_q_/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mrcc-optfreq ""psi;mrcc;addon;cc;opt;freq""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mrcc/optfreq/CMakeLists.txt:8,Test,TestingMacros,8,tests/mrcc/optfreq/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mrcc/optfreq/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(mrcc-rohf_ccsdt_q_ ""psi;mrcc;addon;cc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mrcc/rohf_ccsdt_q_/CMakeLists.txt:8,Test,TestingMacros,8,tests/mrcc/rohf_ccsdt_q_/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mrcc/rohf_ccsdt_q_/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(nbo ""psi;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbo/CMakeLists.txt:8,Test,TestingMacros,8,tests/nbo/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbo/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(nbody-convergence ""psi;nbody;gradient""); set_tests_properties(; nbody-convergence; PROPERTIES; COST 1500; TIMEOUT 3000; ); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-convergence/CMakeLists.txt:8,Test,TestingMacros,8,tests/nbody-convergence/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-convergence/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(nbody-cp-gradient ""psi;nbody;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-cp-gradient/CMakeLists.txt:8,Test,TestingMacros,8,tests/nbody-cp-gradient/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-cp-gradient/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(nbody-freq ""psi;nbody;freq;hessian;gradient;opt""); set_tests_properties(; nbody-freq; PROPERTIES; COST 1000; TIMEOUT 3000; ); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-freq/CMakeLists.txt:8,Test,TestingMacros,8,tests/nbody-freq/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-freq/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(nbody-he-4b ""psi;nbody;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-he-4b/CMakeLists.txt:8,Test,TestingMacros,8,tests/nbody-he-4b/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-he-4b/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(nbody-he-cluster ""psi;nbody;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-he-cluster/CMakeLists.txt:8,Test,TestingMacros,8,tests/nbody-he-cluster/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-he-cluster/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(nbody-hessian ""psi;nbody;hessian""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-hessian/CMakeLists.txt:8,Test,TestingMacros,8,tests/nbody-hessian/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-hessian/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(nbody-intermediates ""psi;nbody"") ; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-intermediates/CMakeLists.txt:8,Test,TestingMacros,8,tests/nbody-intermediates/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-intermediates/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(nbody-multi-level ""psi;nbody;extern""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-multi-level/CMakeLists.txt:8,Test,TestingMacros,8,tests/nbody-multi-level/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-multi-level/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(nbody-multi-level-2 ""psi;nbody""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-multi-level-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/nbody-multi-level-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-multi-level-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(nbody-nocp-gradient ""psi;nbody;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-nocp-gradient/CMakeLists.txt:8,Test,TestingMacros,8,tests/nbody-nocp-gradient/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-nocp-gradient/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(nbody-vmfc-gradient ""psi;nbody;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-vmfc-gradient/CMakeLists.txt:8,Test,TestingMacros,8,tests/nbody-vmfc-gradient/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-vmfc-gradient/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(nbody-vmfc-hessian ""psi;nbody;hessian;d2ints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-vmfc-hessian/CMakeLists.txt:8,Test,TestingMacros,8,tests/nbody-vmfc-hessian/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/nbody-vmfc-hessian/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(numpy-array-interface ""psi;quicktests;pywrap;numpy;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/numpy-array-interface/CMakeLists.txt:8,Test,TestingMacros,8,tests/numpy-array-interface/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/numpy-array-interface/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(olccd-freq1 ""psi;olccd;cart;noc1;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/olccd-freq1/CMakeLists.txt:8,Test,TestingMacros,8,tests/olccd-freq1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/olccd-freq1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(olccd-grad1 ""psi;olccd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/olccd-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/olccd-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/olccd-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(olccd-grad2 ""psi;quicktests;olccd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/olccd-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/olccd-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/olccd-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(olccd1 ""psi;quicktests;olccd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/olccd1/CMakeLists.txt:8,Test,TestingMacros,8,tests/olccd1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/olccd1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(olccd2 ""psi;olccd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/olccd2/CMakeLists.txt:8,Test,TestingMacros,8,tests/olccd2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/olccd2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(olccd3 ""psi;olccd""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/olccd3/CMakeLists.txt:8,Test,TestingMacros,8,tests/olccd3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/olccd3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp2-1 ""psi;omp""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp2-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp2-2 ""psi;quicktests;omp""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp2-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp2-3 ""psi;omp""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-3/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp2-3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp2-4 ""psi;omp;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-4/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp2-4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp2-5 ""psi;omp;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-5/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp2-5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp2-grad1 ""psi;quicktests;omp;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp2-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp2-grad2 ""psi;omp;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp2-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp2p5-1 ""psi;omp""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2p5-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp2p5-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2p5-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp2p5-2 ""psi;quicktests;omp""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2p5-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp2p5-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2p5-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp2p5-grad1 ""psi;omp;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2p5-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp2p5-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2p5-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp2p5-grad2 ""psi;omp;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2p5-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp2p5-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp2p5-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp3-1 ""psi;quicktests;omp""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp3-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp3-2 ""psi;omp""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp3-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp3-3 ""psi;omp""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-3/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp3-3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp3-4 ""psi;omp;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-4/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp3-4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp3-5 ""psi;omp;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-5/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp3-5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp3-grad1 ""psi;omp;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp3-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(omp3-grad2 ""psi;omp;gradient""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/omp3-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/omp3-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt-freeze-coords ""psi;quicktests;opt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt-freeze-coords/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt-freeze-coords/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt-freeze-coords/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt-irc-1 ""psi;opt;cart;noc1;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt-irc-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt-irc-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt-irc-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt-irc-2 ""psi;opt;cart;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt-irc-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt-irc-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt-irc-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt-irc-3 ""psi;opt;noc1;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt-irc-3/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt-irc-3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt-irc-3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt-lindep-change ""psi;opt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt-lindep-change/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt-lindep-change/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt-lindep-change/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt1 ""psi;quicktests;opt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt1/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt1-fd ""psi;opt;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt1-fd/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt1-fd/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt1-fd/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt11 ""psi;longtests;opt;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt11/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt11/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt11/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt12 ""psi;opt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt12/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt12/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt12/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt13 ""psi;longtests;opt;cart""); set_tests_properties(opt13 PROPERTIES COST 200); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt13/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt13/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt13/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt14 ""psi;opt;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt14/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt14/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt14/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt15 ""psi;opt;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt15/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt15/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt15/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt16 ""psi;opt;noc1;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt16/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt16/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt16/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt2 ""psi;opt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt2/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt2-fd ""psi;opt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt2-fd/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt2-fd/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt2-fd/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt3 ""psi;opt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt3/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt4 ""psi;opt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt4/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt5 ""psi;opt;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt5/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt6 ""psi;opt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt6/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt6/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt6/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt7 ""psi;opt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt7/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt7/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt7/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt8 ""psi;opt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt8/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt8/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt8/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(opt9 ""psi;opt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt9/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt9/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt9/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(options1 ""psi;quicktests;mints;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/options1/CMakeLists.txt:8,Test,TestingMacros,8,tests/options1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/options1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(oremp-grad1 ""psi;occ""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/oremp-grad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/oremp-grad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/oremp-grad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(oremp-grad2 ""psi;occ""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/oremp-grad2/CMakeLists.txt:8,Test,TestingMacros,8,tests/oremp-grad2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/oremp-grad2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pasture-ccsorttransqt2-bccd_driver ""psi;quicktests;pasture""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pasture-ccsorttransqt2/bccd_driver/CMakeLists.txt:8,Test,TestingMacros,8,tests/pasture-ccsorttransqt2/bccd_driver/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pasture-ccsorttransqt2/bccd_driver/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pasture-ccsorttransqt2-ccenergy_driver ""psi;smoketests;quicktests;pasture""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pasture-ccsorttransqt2/ccenergy_driver/CMakeLists.txt:8,Test,TestingMacros,8,tests/pasture-ccsorttransqt2/ccenergy_driver/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pasture-ccsorttransqt2/ccenergy_driver/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pcmsolver-alpha ""psi;quicktests;smoketests;pcmsolver;addon;alpha""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/alpha/CMakeLists.txt:8,Test,TestingMacros,8,tests/pcmsolver/alpha/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/alpha/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pcmsolver-ccsd-pte ""psi;quicktests;pcmsolver;addon;cc;pte;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/ccsd-pte/CMakeLists.txt:8,Test,TestingMacros,8,tests/pcmsolver/ccsd-pte/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/ccsd-pte/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pcmsolver-dft ""psi;pcmsolver;addon;scf;dft;cart""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/dft/CMakeLists.txt:8,Test,TestingMacros,8,tests/pcmsolver/dft/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/dft/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pcmsolver-dipole ""psi;quicktests;pcmsolver;addon;scf;properties;dipole""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/dipole/CMakeLists.txt:8,Test,TestingMacros,8,tests/pcmsolver/dipole/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/dipole/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pcmsolver-ghost ""psi;quicktests;smoketests;pcmsolver;addon;ghosts""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/ghost/CMakeLists.txt:8,Test,TestingMacros,8,tests/pcmsolver/ghost/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/ghost/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pcmsolver-opt-fd ""psi;quicktests;smoketests;pcmsolver;addon;scf;opt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/opt-fd/CMakeLists.txt:8,Test,TestingMacros,8,tests/pcmsolver/opt-fd/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/opt-fd/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pcmsolver-scf ""psi;quicktests;smoketests;pcmsolver;addon;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/scf/CMakeLists.txt:8,Test,TestingMacros,8,tests/pcmsolver/scf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/scf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pcmsolver-tdscf ""psi;quicktests;smoketests;pcmsolver;addon;tdscf""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/tdscf/CMakeLists.txt:8,Test,TestingMacros,8,tests/pcmsolver/tdscf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/tdscf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pcmsolver-uhf-tdscf ""psi;quicktests;smoketests;pcmsolver;addon;tdscf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/uhf-tdscf/CMakeLists.txt:8,Test,TestingMacros,8,tests/pcmsolver/uhf-tdscf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pcmsolver/uhf-tdscf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(phi-ao ""psi;properties;quicktests"")",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/phi-ao/CMakeLists.txt:8,Test,TestingMacros,8,tests/phi-ao/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/phi-ao/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(props1 ""psi;properties""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/props1/CMakeLists.txt:8,Test,TestingMacros,8,tests/props1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/props1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(props2 ""psi;properties""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/props2/CMakeLists.txt:8,Test,TestingMacros,8,tests/props2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/props2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(props3 ""psi;properties;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/props3/CMakeLists.txt:8,Test,TestingMacros,8,tests/props3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/props3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(props4 ""psi;quicktests;properties;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/props4/CMakeLists.txt:8,Test,TestingMacros,8,tests/props4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/props4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psi4numpy-cphf ""psi;psi4numpy;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/cphf/CMakeLists.txt:8,Test,TestingMacros,8,tests/psi4numpy/cphf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/cphf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psi4numpy-dfmp2 ""psi;quicktests;psi4numpy;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/dfmp2/CMakeLists.txt:8,Test,TestingMacros,8,tests/psi4numpy/dfmp2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/dfmp2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psi4numpy-fci ""psi;ci;psi4numpy;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/fci/CMakeLists.txt:8,Test,TestingMacros,8,tests/psi4numpy/fci/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/fci/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psi4numpy-rhf ""psi;quicktests;smoketests;psi4numpy""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/CMakeLists.txt:8,Test,TestingMacros,8,tests/psi4numpy/rhf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psi4numpy-rhf-gradient ""psi;quicktests;psi4numpy""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf-gradient/CMakeLists.txt:8,Test,TestingMacros,8,tests/psi4numpy/rhf-gradient/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf-gradient/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psi4numpy-rhf-hessian ""psi;quicktests;smoketests;psi4numpy;d2ints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf-hessian/CMakeLists.txt:8,Test,TestingMacros,8,tests/psi4numpy/rhf-hessian/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psi4numpy/rhf-hessian/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psimrcc-ccsd_t-1 ""psi;quicktests;psimrcc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-ccsd_t-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/psimrcc-ccsd_t-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-ccsd_t-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psimrcc-ccsd_t-2 ""psi;quicktests;psimrcc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-ccsd_t-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/psimrcc-ccsd_t-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-ccsd_t-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psimrcc-ccsd_t-3 ""psi;quicktests;psimrcc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-ccsd_t-3/CMakeLists.txt:8,Test,TestingMacros,8,tests/psimrcc-ccsd_t-3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-ccsd_t-3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psimrcc-ccsd_t-4 ""psi;psimrcc;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-ccsd_t-4/CMakeLists.txt:8,Test,TestingMacros,8,tests/psimrcc-ccsd_t-4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-ccsd_t-4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psimrcc-fd-freq1 ""psi;psimrcc;noc1;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-fd-freq1/CMakeLists.txt:8,Test,TestingMacros,8,tests/psimrcc-fd-freq1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-fd-freq1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psimrcc-fd-freq2 ""psi;psimrcc;cart;noc1;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-fd-freq2/CMakeLists.txt:8,Test,TestingMacros,8,tests/psimrcc-fd-freq2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-fd-freq2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psimrcc-pt2 ""psi;quicktests;psimrcc;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-pt2/CMakeLists.txt:8,Test,TestingMacros,8,tests/psimrcc-pt2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-pt2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psimrcc-sp1 ""psi;quicktests;psimrcc;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-sp1/CMakeLists.txt:8,Test,TestingMacros,8,tests/psimrcc-sp1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psimrcc-sp1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(psithon1 ""psi;quicktests;misc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon1/CMakeLists.txt:8,Test,TestingMacros,8,tests/psithon1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pubchem1 ""psi;misc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pubchem1/CMakeLists.txt:8,Test,TestingMacros,8,tests/pubchem1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pubchem1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pubchem2 ""psi;misc;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pubchem2/CMakeLists.txt:8,Test,TestingMacros,8,tests/pubchem2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pubchem2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(python-3-index-transforms ""psi;quicktests;python""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/3-index-transforms/CMakeLists.txt:8,Test,TestingMacros,8,tests/python/3-index-transforms/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/3-index-transforms/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(python-cc-amps ""psi;quicktests;python""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/cc-amps/CMakeLists.txt:8,Test,TestingMacros,8,tests/python/cc-amps/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/cc-amps/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(python-cc54 ""psi;quicktests;python""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/cc54/CMakeLists.txt:8,Test,TestingMacros,8,tests/python/cc54/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/cc54/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(python-curve ""psi;quicktests;python""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/curve/CMakeLists.txt:8,Test,TestingMacros,8,tests/python/curve/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/curve/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(python-databases ""psi;quicktests;python;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/databases/CMakeLists.txt:8,Test,TestingMacros,8,tests/python/databases/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/databases/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(python-energy ""psi;quicktests;smoketests;python""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/energy/CMakeLists.txt:8,Test,TestingMacros,8,tests/python/energy/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/energy/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(python-mints13 ""psi;mints;quicktests;python;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints13/CMakeLists.txt:8,Test,TestingMacros,8,tests/python/mints13/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints13/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(python-mints14 ""psi;mints;quicktests;python;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints14/CMakeLists.txt:8,Test,TestingMacros,8,tests/python/mints14/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints14/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(python-mints2 ""psi;quicktests;python;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints2/CMakeLists.txt:8,Test,TestingMacros,8,tests/python/mints2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(python-mints9 ""psi;quicktests;python;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints9/CMakeLists.txt:8,Test,TestingMacros,8,tests/python/mints9/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/mints9/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(python-pubchem ""psi;minitests;python;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/pubchem/CMakeLists.txt:8,Test,TestingMacros,8,tests/python/pubchem/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/pubchem/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-alias ""psi;quicktests;pywrap;cbs""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-alias/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-alias/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-alias/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-align ""psi;quicktests;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-align/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-align/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-align/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-align-chiral ""psi;quicktests;cart""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-align-chiral/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-align-chiral/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-align-chiral/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-all ""psi;quicktests;pywrap;cbs""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-all/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-all/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-all/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-basis ""psi;pywrap""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-basis/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-basis/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-basis/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-bfs ""psi;quicktests;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-bfs/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-bfs/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-bfs/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-cbs1 ""psi;quicktests;pywrap;cbs""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-cbs1/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-cbs1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-cbs1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-checkrun-convcrit ""psi;pywrap;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-checkrun-convcrit/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-checkrun-convcrit/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-checkrun-convcrit/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-checkrun-rhf ""psi;pywrap""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-checkrun-rhf/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-checkrun-rhf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-checkrun-rhf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-checkrun-rohf ""psi;pywrap""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-checkrun-rohf/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-checkrun-rohf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-checkrun-rohf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-checkrun-uhf ""psi;pywrap""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-checkrun-uhf/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-checkrun-uhf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-checkrun-uhf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-db1 ""psi;pywrap""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-db1/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-db1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-db1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-db3 ""psi;pywrap""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-db3/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-db3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-db3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(pywrap-molecule ""psi;quicktests;pywrap""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-molecule/CMakeLists.txt:8,Test,TestingMacros,8,tests/pywrap-molecule/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pywrap-molecule/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(rasci-c2-active ""psi;rasci;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/rasci-c2-active/CMakeLists.txt:8,Test,TestingMacros,8,tests/rasci-c2-active/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/rasci-c2-active/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(rasci-h2o ""psi;rasci;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/rasci-h2o/CMakeLists.txt:8,Test,TestingMacros,8,tests/rasci-h2o/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/rasci-h2o/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(rasci-ne ""psi;rasci;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/rasci-ne/CMakeLists.txt:8,Test,TestingMacros,8,tests/rasci-ne/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/rasci-ne/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(rasscf-sp ""psi;quicktests;casscf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/rasscf-sp/CMakeLists.txt:8,Test,TestingMacros,8,tests/rasscf-sp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/rasscf-sp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(remp-energy1 ""psi;occ""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/remp-energy1/CMakeLists.txt:8,Test,TestingMacros,8,tests/remp-energy1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/remp-energy1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(remp-energy2 ""psi;occ""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/remp-energy2/CMakeLists.txt:8,Test,TestingMacros,8,tests/remp-energy2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/remp-energy2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sad-scf-type ""psi;quicktests;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sad-scf-type/CMakeLists.txt:8,Test,TestingMacros,8,tests/sad-scf-type/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sad-scf-type/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sad1 ""psi;quicktests;misc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sad1/CMakeLists.txt:8,Test,TestingMacros,8,tests/sad1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sad1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt-compare ""psi;sapt;cart;quicktests""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-compare/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt-compare/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-compare/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt-dft-api ""psi;sapt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-dft-api/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt-dft-api/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-dft-api/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt-dft-lrc ""psi;sapt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-dft-lrc/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt-dft-lrc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-dft-lrc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt-dft1 ""psi;quicktests;sapt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-dft1/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt-dft1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-dft1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt-dft2 ""psi;sapt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-dft2/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt-dft2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-dft2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt-ecp ""psi;sapt;ecp;ecpint;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-ecp/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt-ecp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-ecp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt-exch-disp-inf ""psi;sapt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-exch-disp-inf/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt-exch-disp-inf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-exch-disp-inf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt-exch-ind-inf ""psi;sapt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-exch-ind-inf/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt-exch-ind-inf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-exch-ind-inf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt-exch-ind30-inf ""psi;sapt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-exch-ind30-inf/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt-exch-ind30-inf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-exch-ind30-inf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt-sf1 ""psi;quicktests;sapt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-sf1/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt-sf1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt-sf1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt0-d ""psi;quicktests;smoketests;sapt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt0-d/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt0-d/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt0-d/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt1 ""psi;quicktests;smoketests;sapt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt1/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt10 ""psi;sapt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt10/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt10/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt10/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt11 ""psi;sapt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt11/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt11/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt11/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt2 ""psi;longtests;sapt;cart""); set_tests_properties(sapt2 PROPERTIES COST 100); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt2/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt3 ""psi;sapt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt3/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt4 ""psi;longtests;sapt;cart""); set_tests_properties(sapt4 PROPERTIES COST 100); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt4/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt5 ""psi;sapt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt5/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt6 ""psi;sapt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt6/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt6/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt6/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt7 ""psi;sapt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt7/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt7/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt7/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt8 ""psi;quicktests;sapt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt8/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt8/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt8/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(sapt9 ""psi;sapt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt9/CMakeLists.txt:8,Test,TestingMacros,8,tests/sapt9/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/sapt9/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-auto-cholesky ""psi;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-auto-cholesky/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-auto-cholesky/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-auto-cholesky/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-bz2 ""psi;scf""); set_tests_properties(scf-bz2 PROPERTIES COST 100); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-bz2/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-bz2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-bz2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-cholesky-basis ""psi;quicktests;scf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-cholesky-basis/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-cholesky-basis/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-cholesky-basis/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-coverage ""psi;scf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-coverage/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-coverage/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-coverage/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-dipder ""psi;quicktests;scf;d2ints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-dipder/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-dipder/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-dipder/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-ecp ""psi;scf;ecp;cart;ecpint;addon;smoketests;quicktests""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-ecp/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-ecp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-ecp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-ecp2 ""psi;scf;ecp;cart;freq;ecpint;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-ecp2/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-ecp2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-ecp2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-ecp3 ""psi;scf;ecp;cart;freq;ecpint;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-ecp3/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-ecp3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-ecp3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-freq1 ""psi;scf;freq;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-freq1/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-freq1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-freq1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-guess ""psi;quicktests;scf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-guess/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-guess/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-guess/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-guess-read1 ""psi;quicktests;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-guess-read1/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-guess-read1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-guess-read1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-guess-read2 ""psi;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-guess-read2/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-guess-read2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-guess-read2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-guess-read3 ""psi;scf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-guess-read3/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-guess-read3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-guess-read3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-hess1 ""psi;quicktests;scf;freq;cart;d2ints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-hess1/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-hess1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-hess1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-hess2 ""psi;quicktests;scf;freq;cart;d2ints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-hess2/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-hess2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-hess2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-hess3 ""psi;quicktests;scf;freq;cart;findif;d2ints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-hess3/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-hess3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-hess3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-hess4 ""psi;quicktests;scf;freq;cart;d2ints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-hess4/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-hess4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-hess4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-hess5 ""psi;quicktests;scf;freq;cart;findif;d2ints""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-hess5/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-hess5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-hess5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-level-shift-cuhf ""psi;quicktests;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-level-shift-cuhf/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-level-shift-cuhf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-level-shift-cuhf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-level-shift-rks ""psi;quicktests;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-level-shift-rks/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-level-shift-rks/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-level-shift-rks/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-level-shift-rohf ""psi;quicktests;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-level-shift-rohf/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-level-shift-rohf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-level-shift-rohf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-level-shift-uhf ""psi;quicktests;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-level-shift-uhf/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-level-shift-uhf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-level-shift-uhf/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-occ ""psi;quicktests;scf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-occ/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-occ/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-occ/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-response1 ""psi;quicktests;scf;properties;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-response1/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-response1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-response1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-response2 ""psi;quicktests;scf;properties;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-response2/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-response2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-response2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-response3 ""psi;quicktests;scf;uhf;properties""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-response3/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-response3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-response3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-uhf-grad-nobeta ""psi;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-uhf-grad-nobeta/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-uhf-grad-nobeta/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-uhf-grad-nobeta/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf-upcast-custom-basis ""psi;quicktests;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-upcast-custom-basis/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-upcast-custom-basis/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-upcast-custom-basis/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf1 ""psi;quicktests;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf1/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf2 ""psi;quicktests;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf2/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf3 ""psi;quicktests;scf;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf3/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf4 ""psi;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf4/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf5 ""psi;quicktests;scf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf5/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf6 ""psi;scf;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf6/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf6/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf6/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(scf7 ""psi;scf;cart;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf7/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf7/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf7/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(simint-mp2-module ""psi;df;mp2;simint;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/simint/mp2-module/CMakeLists.txt:8,Test,TestingMacros,8,tests/simint/mp2-module/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/simint/mp2-module/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(simint-scf5 ""psi;quicktests;smoketests;scf;simint;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/simint/scf5/CMakeLists.txt:8,Test,TestingMacros,8,tests/simint/scf5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/simint/scf5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(snsmp2-cc-cc ""psi;longtests;snsmp2;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/snsmp2/cc-cc/CMakeLists.txt:8,Test,TestingMacros,8,tests/snsmp2/cc-cc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/snsmp2/cc-cc/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(snsmp2-cf-o ""psi;snsmp2;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/snsmp2/cf-o/CMakeLists.txt:8,Test,TestingMacros,8,tests/snsmp2/cf-o/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/snsmp2/cf-o/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(snsmp2-he-he ""psi;quicktests;smoketests;snsmp2;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/snsmp2/he-he/CMakeLists.txt:8,Test,TestingMacros,8,tests/snsmp2/he-he/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/snsmp2/he-he/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(soscf-dft ""psi;shorttests;scf;dft""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/soscf-dft/CMakeLists.txt:8,Test,TestingMacros,8,tests/soscf-dft/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/soscf-dft/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(soscf-large ""psi;quicktests;scf;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/soscf-large/CMakeLists.txt:8,Test,TestingMacros,8,tests/soscf-large/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/soscf-large/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(soscf-ref ""psi;shorttests;scf""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/soscf-ref/CMakeLists.txt:8,Test,TestingMacros,8,tests/soscf-ref/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/soscf-ref/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(stability1 ""psi;quicktests;stability;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/stability1/CMakeLists.txt:8,Test,TestingMacros,8,tests/stability1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/stability1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(stability2 ""psi;quicktests;stability;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/stability2/CMakeLists.txt:8,Test,TestingMacros,8,tests/stability2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/stability2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(stability3 ""psi;quicktests;stability""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/stability3/CMakeLists.txt:8,Test,TestingMacros,8,tests/stability3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/stability3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(tdscf-1 ""psi;smoketests;tdscf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-1/CMakeLists.txt:8,Test,TestingMacros,8,tests/tdscf-1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(tdscf-2 ""psi;smoketests;tdscf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-2/CMakeLists.txt:8,Test,TestingMacros,8,tests/tdscf-2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(tdscf-3 ""psi;smoketests;tdscf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-3/CMakeLists.txt:8,Test,TestingMacros,8,tests/tdscf-3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(tdscf-4 ""psi;smoketests;tdscf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-4/CMakeLists.txt:8,Test,TestingMacros,8,tests/tdscf-4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(tdscf-5 ""psi;quicktests;tdscf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-5/CMakeLists.txt:8,Test,TestingMacros,8,tests/tdscf-5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(tdscf-6 ""psi;quicktests;tdscf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-6/CMakeLists.txt:8,Test,TestingMacros,8,tests/tdscf-6/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-6/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(tdscf-7 ""psi;tdscf""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-7/CMakeLists.txt:8,Test,TestingMacros,8,tests/tdscf-7/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tdscf-7/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(tu1-h2o-energy ""psi;quicktests;smoketests;tutorial""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu1-h2o-energy/CMakeLists.txt:8,Test,TestingMacros,8,tests/tu1-h2o-energy/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu1-h2o-energy/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(tu2-ch2-energy ""psi;quicktests;tutorial""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu2-ch2-energy/CMakeLists.txt:8,Test,TestingMacros,8,tests/tu2-ch2-energy/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu2-ch2-energy/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(tu3-h2o-opt ""psi;quicktests;tutorial;opt""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu3-h2o-opt/CMakeLists.txt:8,Test,TestingMacros,8,tests/tu3-h2o-opt/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu3-h2o-opt/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(tu4-h2o-freq ""psi;quicktests;tutorial;freq;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu4-h2o-freq/CMakeLists.txt:8,Test,TestingMacros,8,tests/tu4-h2o-freq/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu4-h2o-freq/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(tu5-sapt ""psi;tutorial;sapt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu5-sapt/CMakeLists.txt:8,Test,TestingMacros,8,tests/tu5-sapt/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu5-sapt/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(tu6-cp-ne2 ""psi;tutorial;nbody""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu6-cp-ne2/CMakeLists.txt:8,Test,TestingMacros,8,tests/tu6-cp-ne2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu6-cp-ne2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(v2rdm_casscf-v2rdm1 ""psi;v2rdm_casscf;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm1/CMakeLists.txt:8,Test,TestingMacros,8,tests/v2rdm_casscf/v2rdm1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(v2rdm_casscf-v2rdm2 ""psi;v2rdm_casscf;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm2/CMakeLists.txt:8,Test,TestingMacros,8,tests/v2rdm_casscf/v2rdm2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(v2rdm_casscf-v2rdm3 ""psi;quicktests;smoketests;v2rdm_casscf;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm3/CMakeLists.txt:8,Test,TestingMacros,8,tests/v2rdm_casscf/v2rdm3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(v2rdm_casscf-v2rdm4 ""psi;v2rdm_casscf;addon;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm4/CMakeLists.txt:8,Test,TestingMacros,8,tests/v2rdm_casscf/v2rdm4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm4/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(v2rdm_casscf-v2rdm5 ""psi;v2rdm_casscf;addon;medlong""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm5/CMakeLists.txt:8,Test,TestingMacros,8,tests/v2rdm_casscf/v2rdm5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm5/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(v2rdm_casscf-v2rdm6 ""psi;opt;v2rdm_casscf;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm6/CMakeLists.txt:8,Test,TestingMacros,8,tests/v2rdm_casscf/v2rdm6/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm6/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(v2rdm_casscf-v2rdm7 ""psi;opt;v2rdm_casscf;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm7/CMakeLists.txt:8,Test,TestingMacros,8,tests/v2rdm_casscf/v2rdm7/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/v2rdm_casscf/v2rdm7/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(x2c-perturb-h ""psi;quicktests;x2c""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/x2c-perturb-h/CMakeLists.txt:8,Test,TestingMacros,8,tests/x2c-perturb-h/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/x2c-perturb-h/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(x2c1 ""psi;quicktests;x2c""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/x2c1/CMakeLists.txt:8,Test,TestingMacros,8,tests/x2c1/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/x2c1/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(x2c2 ""psi;quicktests;x2c;findif""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/x2c2/CMakeLists.txt:8,Test,TestingMacros,8,tests/x2c2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/x2c2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(x2c3 ""psi;quicktests;x2c""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/x2c3/CMakeLists.txt:8,Test,TestingMacros,8,tests/x2c3/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/x2c3/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). add_regression_test(zaptn-nh2 ""psi;ci;misc;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/zaptn-nh2/CMakeLists.txt:8,Test,TestingMacros,8,tests/zaptn-nh2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/zaptn-nh2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). file(COPY Ne.6311G.INTDUMP.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Ne.C1.6311G.INTDUMP.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Ne.cc-pVDZ.UHF.INTDUMP.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Ne.C1.cc-pVDZ.UHF.INTDUMP.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Ne.6311G.frozen.INTDUMP.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); add_regression_test(fcidump ""psi;quicktests;smoketests;fcidump;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/fcidump/CMakeLists.txt:8,Test,TestingMacros,8,tests/fcidump/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fcidump/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros). if(MAX_AM_ERI GREATER_EQUAL 6); add_regression_test(opt-full-hess-every ""psi;quicktests;opt""); endif(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt-full-hess-every/CMakeLists.txt:8,Test,TestingMacros,8,tests/opt-full-hess-every/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/opt-full-hess-every/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros); file(COPY CH2s_HOMO.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY CH2s_LUMO.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY CH2t_3_DOMO.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY CH2t_4_SOMO.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY CH2t_5_SOMO.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY CH2t_6_LVMO.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); add_regression_test(cubeprop-frontier ""psi;cubeprop;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cubeprop-frontier/CMakeLists.txt:8,Test,TestingMacros,8,tests/cubeprop-frontier/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cubeprop-frontier/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros); file(COPY ESP.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Dt.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); add_regression_test(cubeprop-esp ""psi;quicktests;cubeprop""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cubeprop-esp/CMakeLists.txt:8,Test,TestingMacros,8,tests/cubeprop-esp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cubeprop-esp/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros); file(COPY Psi_a_1_1-A1.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Psi_a_2_2-A1.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Psi_a_3_1-B2.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Psi_a_4_3-A1.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Psi_a_5_1-B1.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY DUAL.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Da.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Db.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Ds.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY Dt.cube.ref DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); add_regression_test(cubeprop ""psi;quicktests;cubeprop""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cubeprop/CMakeLists.txt:8,Test,TestingMacros,8,tests/cubeprop/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cubeprop/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros); file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); add_regression_test(ci-property ""psi;quicktests;ci;cas;properties;cart;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/ci-property/CMakeLists.txt:8,Test,TestingMacros,8,tests/ci-property/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/ci-property/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros); file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); add_regression_test(mp2-property ""psi;quicktests;mp2;dfmp2;properties;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2-property/CMakeLists.txt:8,Test,TestingMacros,8,tests/mp2-property/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mp2-property/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros); file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); add_regression_test(scf-property ""psi;quicktests;smoketests;scf;properties;noc1""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-property/CMakeLists.txt:8,Test,TestingMacros,8,tests/scf-property/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/scf-property/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros); file(COPY psiaux1 DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(COPY psiaux2 DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); add_regression_test(psithon2 ""psi;misc""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/CMakeLists.txt:8,Test,TestingMacros,8,tests/psithon2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"include(TestingMacros); file(COPY psiaux1 DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../dftd3-psithon2); file(COPY psiaux2 DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../dftd3-psithon2); add_regression_test(dftd3-psithon2 ""psi;dftd3;addon""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/CMakeLists.txt:8,Test,TestingMacros,8,tests/dftd3/psithon2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/CMakeLists.txt,1,['Test'],['TestingMacros']
Testability,"indows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software package. Copyright (c) 2007-2023 The Psi4 Developers. The copyrights for code used from other parties are included in; the corresponding files. Psi4 is free software; you can redistribute it and/or modify; it under the terms of the GNU Lesser General Public License as published by; the Free Software Foundation, version 3. Psi4 is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU Lesser General Public License for more details. You should",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:6258,test,testsuite,6258,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['test'],['testsuite']
Testability,"ipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; minimum and maximum number of diis vectors to use, and a ``DIIS_START``; which is the iteration at which to start saving vec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7696,sandbox,sandbox,7696,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['sandbox'],['sandbox']
Testability,"irectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_sub",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:8426,test,test,8426,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"irectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if(ENABLE_v2rdm_casscf); add_subdirectory(v2rdm_casscf); message(STATUS ""Adding test cases: Psi4 + v2rdm_casscf""); endif(). # <<< GPU_DFCC >>>. if(ENABLE_gpu_dfcc); add_subdirectory(gpu_dfcc); message(STATUS ""Adding test cases: Psi4 + gpu_dfcc""); endif(). # <<< SNSMP2 >>>. if(ENABLE_snsmp2); add_subdirectory(snsmp2); message(STATUS ""Adding test cases: Psi4 + snsmp2""); endif(). # <<< BrianQC >>>; if(ENABLE_BrianQC); add_subdirectory(brianqc); message(STATUS ""Adding test cases: Psi4 + BrianQC""); endif(). # <<< ECPINT >>>; if(ENABLE_ecpint); add_subdirectory(aediis-2); add_subdirectory(basis-ecp); add_subdirectory(dfmp2-ecp); add_subdirectory(sapt-ecp); add_subdirectory(scf-ecp); add_subdirectory(scf-ecp2); add_subdirectory(scf-ecp3); message(STATUS ""Adding test cases: Psi4 + ecpint""); endif(). # plugin regime; if(ENABLE_PLUGIN_TESTING); add_subdirectory(plugins); message(STATUS ""Adding test cases: Psi4 plugins""); endif(). # pytest regime; add_subdirectory(pytests); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:9726,test,test,9726,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,6,['test'],['test']
Testability,"is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; progra",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:19735,test,tests,19735,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['test'],['tests']
Testability,"it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speakin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1550,test,test,1550,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"ive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebook",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:9418,test,testing,9418,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testing']
Testability,"ive to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these ""absolute"" enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the ""thermal energies"" reported in kcal/mol are the ; finite-temperature *corrections* to the electronic total energy, and ; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords; ^^^^^^^^. .. include:: autodir_options_c/thermo__t.rst; .. include:: autodir_options_c/thermo__p.rst; .. include:: autodir_options_c/thermo__rotational_symmetry_number.rst. .. _`sec:thermoExamples`:. Examples; ^^^^^^^^. A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function :py:func:`psi4.driver.qcdb.vib.thermo`; as is shown in :srcsample:`freq-isotope2`. A few summary psivars are set: ""ZPVE"", ""THERMAL ENERGY CORRECTION"",; ""ENTHALPY CORRECTION"", ""GIBBS FREE ENERGY CORRECTION"", ""ZERO K; ENTHALPHY"", ""THERMAL ENERGY"", ""ENTHALPY"", ""GIBBS FREE ENERGY"".; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the ``thermo`` function. See :source:`tests/pytests/test_vibanalysis.py`; (near the end) for an example. .. index::; pair: vibrational analysis; output. Output; ^^^^^^. The full list of keywords for thermo is provided in Appendix :ref:`apdx:thermo`. Information on the Psithon function that drives frequency analyses is provided; at :py:func:`~psi4.driver.frequency`. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst:3529,test,tests,3529,doc/sphinxman/source/thermo.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst,1,['test'],['tests']
Testability,"ives to be friendly to both users and developers. * **Users' Website** www.psicode.org. * **Downloading and Installing Psi4** https://psicode.org/psi4manual/master/build_faq.html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27). * **Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:5064,log,logo,5064,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['log'],['logo']
Testability,"ix Makefiles"">,${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc,${psi4_SOURCE_DIR}/psi4/src/psi4/fnocc/ccsd.cc>; COMMENT ""Autodoc PSI variables c-side""). # Autodoc Cfour PSI variables; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E make_directory source/autodir_psivariables; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_cfour.py ${CCSD}; OUTPUT ${CCBD}/source/autodir_psivariables/module__cfour.rst; DEPENDS ${CCSD}/document_cfour.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/cfour.py; ${CCBD}/source/autodoc_psivariables_bymodule.rst; COMMENT ""Autodoc Cfour PSI variables""). # Autodoc databases; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_databases.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_databases.rst; DEPENDS ${CCSD}/document_databases.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/*.py,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/S22.py>; COMMENT ""Autodoc databases""). # Autodoc test cases; add_custom_command(; COMMAND ${PERL_EXECUTABLE} ${CCSD}/document_tests.pl ${CCSD}; OUTPUT ${CCBD}/source/autodoc_testsuite_corepsi4.rst; ${CCBD}/source/autodoc_testsuite_dftd3.rst; DEPENDS ${CCSD}/document_tests.pl; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/input.dat,${psi4_SOURCE_DIR}/tests/ghosts/input.dat>; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/*/input.dat,${psi4_SOURCE_DIR}/tests/dftd3/energy/input.dat>; COMMENT ""Autodoc test cases""). # Autodoc capabilities; # * tables are generated in pairs: one to build directory for Sphinx to use and one for the repo for devs to track; # * PYTHONPATH bit is because this is the only document_* script that uses a fn from Psi4; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --sphinx --quiet --wri",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:8455,test,test,8455,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['test']
Testability,"ke --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). F",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60891,test,testname,60891,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,4,['test'],"['test', 'testlabel', 'testname', 'tests']"
Testability,"l <sec:tutorial>` section,; the :py:func:`~psi4.driver.driver_nbody.nbody` wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example, ::. energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules. |PSIfour| also provides the :py:func:`~psi4.driver.cbs` wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,::. # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree--Fock energy in the; largest basis (cc-pVTZ). :py:func:`~psi4.driver.cbs` can; be configured behind-the-scenes with explicit arguments, as in the; first example, or the convenience syntax of the equivalent second; example can be used. Another very useful and powerful feature of |PSIfour| is the ability; to compute results on entire databases of molecules at a time,; as provided by the :py:func:`~psi4.driver.wrapper_database.database` wrapper. For example,::. database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (``cp=1``) on all members of Hobza's S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others. These wrapper functions are discussed separately in; :ref:`sec:psithonFunc`. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the ``set {...}`` block or with any other ``set`` command. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:16706,benchmark,benchmark,16706,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,2,['benchmark'],['benchmark']
Testability,"l be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DFTNL; .. _`sec:dftnl`:. DFT-NL; ======. .. codeauthor:: Daniel G. A. Smith and Holger Kruse; .. sectionauthor:: Holger Kruse. Non-local (NL), density based correlation energy from the VV10 kernel can be added; to arbitrary functionals. .. math:: E_{DFT-NL}=E_{DFT}+E_{NL}. For pre-defined functionals (see Functional overview in :ref:`this Table <table:dft_all>` ) it is sufficient to add `-NL` to; the functional name::. energy('b3lyp-nl'). Modification of the parameters `b` and `C` is done setting |scf__dft_vv10_b| and |scf__dft_vv10_c|. The `C` is usually left unchanged and the originally proposed; value of `C=0.0093` is used. Adding |scf__dft_vv10_b| to any functional activates the calculation of the VV10 kernel. A BLYP-NL calculation can be set as follows::. set DFT_VV10_B 4.0; energy('blyp'). The default `C` parameter will be used. Similar to |scf__dft_dispersion_parameters| the tuple |scf__nl_dispersion_parameters| can used::. set NL_DISPERSION_PARAMTERS [4.0]; energy('blyp'). which is equivalent to the example above. Further examples can be found in the respective :source:`regression test <tests/dft-vv10/input.dat>`. post-SCF time savings; ~~~~~~~~~~~~~~~~~~~~~. Substantial time-savings for energy calculations are available by evaluating the VV10 kernel only at the converged electron density, i.e. in a post-SCF fashion.; The deviations from the fully self-consistent treatment are usually minimal. To activate this set |scf__dft_vv10_postscf| to `true`.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst:2178,test,test,2178,doc/sphinxman/source/dftnl.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst,2,['test'],"['test', 'tests']"
Testability,"lagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTes",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10672,test,test,10672,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"lecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""gr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9535,test,test,9535,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"les *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Pytho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12217,test,tests,12217,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test-name', 'tests']"
Testability,"list(APPEND sources; exceptions; fcidump; fchk; inpsight; numpy_helper; optproc; p4regex; procutil; python_helpers; solvers; testing; text; util; writer; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/p4util); endforeach(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/CMakeLists.txt:125,test,testing,125,psi4/driver/p4util/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/CMakeLists.txt,1,['test'],['testing']
Testability,"list(APPEND sources; local.cc; x2cint.cc; orbitalspace.cc; maketab.cc; oeprop.cc; writer.cc; transform.cc; sieve.cc; multipolesymmetry.cc; shellrotation.cc; deriv.cc; integralparameters.cc; twobody.cc; vector.cc; sobasis.cc; cartesianiter.cc; basisset.cc; wavefunction.cc; irrep.cc; fjt.cc; chartab.cc; corrtab.cc; symop.cc; benchmark.cc; get_writer_file_prefix.cc; petitelist.cc; solidharmonics.cc; multipoles.cc; sointegral.cc; extern.cc; factory.cc; psimath.cc; dimension.cc; molecule.cc; intvector.cc; mintshelper.cc; numinthelper.cc; coordentry.cc; matrix.cc; gshell.cc; integraliter.cc; pointgrp.cc; rep.cc; cdsalclist.cc; erd_eri.cc; angularmomentum.cc; orthog.cc; ). # l2intf is a listing of all the files that include libint2's boys.h include (which is included in L2's engine.h). they must; # all be built with the same C++ standard, which is currently chosen as C++14 due to; # problems building with C++17 using Intel compilers on Linux.; # These problems were seen at least through version 2021.4 but were relieved by 2021.8; # Any files including the engine.h should be added here instead of the sources list above.; add_library(l2intf OBJECT ; dipole.cc; electricfield.cc; electrostatic.cc; eribase.cc; eri.cc; integral.cc; kinetic.cc; mcmurchiedavidson.cc # includes <libint2/boys.h>; multipolepotential.cc # includes <libint2/boys.h>; nabla.cc; onebody.cc; overlap.cc; potential.cc; potentialint.cc; quadrupole.cc; rel_potential.cc; tracelessquadrupole.cc; 3coverlap.cc; ); set_property(TARGET l2intf PROPERTY CXX_STANDARD ""${psi4_CXX_STANDARD_Libint2}""); set_property(TARGET l2intf PROPERTY POSITION_INDEPENDENT_CODE ON); # below are what l2intf files would ordinarily have gotten from psi4_add_module.; # * first brings OpenMP headers; # * second brings l2. Linux needs only headers, but Windows needs headers and linking, so slight overkill here; target_link_libraries(l2intf; PRIVATE; tgt::lapack; Libint2::cxx; ). psi4_add_module(lib mints sources); target_link_libraries(mints P",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libmints/CMakeLists.txt:325,benchmark,benchmark,325,psi4/src/psi4/libmints/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libmints/CMakeLists.txt,1,['benchmark'],['benchmark']
Testability,"long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16221,log,log,16221,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['log'],['log']
Testability,"long with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10254,test,test,10254,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"m {\tt svn ci -m ``Put comments here.''}; \end{enumerate}. \subsection{Checking out older versions of the code}; It is sometimes necessary to check out older versions of a piece of code.; Assume we wish to check out an old version of \PSIdetci. If this; is the case, the following steps will do this:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin/detci}; \item {\tt svn co --revision \{2002-02-17\}}; \end{enumerate}. This will check the main repository and provide you with the code as; it stood exactly on February 17th, 2002. . \subsection{Examining the revision history}; It can be very useful to use cvs to see what recent changes have been; made to the code. Anytime one checks in a new version of a file, SVN; requires the user to provide comments on the changes with the {\tt -m}; flag. These comments go into a log information that may be easily; accessed through SVN. To see what changes have been made recently to; the file \file{detci.cc}, one would go into the \file{detci} source; directory and type; \begin{verbatim}; svn log detci.cc; \end{verbatim}; Checking the log files is a very useful way to see what recent changes might ; be causing new problems with the code. \subsection{The structure of the \PSIfour\ Source Tree}; \label{psitree} . Your working copy of the \PSIfour\ source code includes a number of; important subdirectories:. \begin{itemize}; \item \shellvar{\$PSI4}\file{/lib} -- Source files for; OS-independent ``library'' data. This includes the main basis set; data file (\file{pbasis.dat}) and the \PSIfour\ program execution; control file (\file{psi.dat}), among others. These files are; installed in \file{\$prefix/share}. \item \shellvar{\$PSI4}\file{/include} -- Source files for; OS-independent header files, including \file{physconst.h} (whose; contents should be obvious from its name), \file{psifiles.h}, and; \file{ccfiles.h}, among others. These files are installed in; \$prefix/include. \item \shellvar{\$PSI4}\file{/src/util} -- Source code for the ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:16540,log,log,16540,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['log'],['log']
Testability,"mand tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-l",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18443,test,test,18443,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['test']
Testability,"manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2060,test,test,2060,.github/CONTRIBUTING.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md,1,['test'],['test']
Testability,"ment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compati",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18636,log,log,18636,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['log'],['log']
Testability,"message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIB",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:7524,test,test,7524,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"mitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; ----------------------------------------------------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:10023,test,tests,10023,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['test'],['tests']
Testability,"mmits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Do not allow bypassing the above settings"" for admins and Save changes. >>> git push --atomic upstream master v1.3rc2. # pause here and push to upstream and let Azure complete for an; # on-tag Windows conda package and docs, not tag+1.dev1 .; # the atomic flag below pushes commit and tag together so only one CI; # which is necessary for Windows conda package to compute the right version.; # After push, can temporarily re-engage admins ""Do not allow ..."" protections.; # also, grab the docs build from GHA artifacts. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:14344,log,log,14344,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['log'],['log']
Testability,"module{great\_code}. The directory containing the new code must; contain only those files which are to be checked in to the repository!; Then the following steps will check in a new piece of code to the main; repository:. \begin{enumerate}; \item {\tt cd \$PSI4/src/bin}; \item {\tt svn add great\_code}; \item {\tt svn ci -m ``Put comments here.''}; \item {\tt cd \$PSI4}; \item Edit \file{configure.ac} and add \file{great\_code} to the list. ; \item {\tt svn ci configure.ac -m ``Put comments here.''}; \item {\tt autoconf} ; \item {\tt cd \$PSI4/src/bin} ; \item Edit \file{Makefile.in} and add \file{great\_code} to the list. ; \item {\tt svn ci Makefile.in -m ``Put comments here.''}; \end{enumerate}; At this point, all of the code has been properly checked in, but you; should also test to make sure that the code can be checked out by; other programmers, and that it will compile correctly. The following; steps will store your personal version of the code, check out the new; code, and test-compile it:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin}; \item {\tt mv great\_code great\_code.bak}; \item {\tt cd \$PSI4/..}; \item {\tt svn update}; \item {\tt cd \$objdir}; \item {\tt \$PSI4/configure -}{\tt -prefix=\$prefix}; \item {\tt cd src/bin/great\_code}; \item {\tt make install}; \end{enumerate}; (Note that \$prefix and \$objdir to the installation and compilation; directories defined in the \PSIfour\ installation instructions.); Your original version of the code remains under \file{great\_code.bak},; but should be no longer necessary if the above steps work. Note that it is; necessary to re-run \file{configure} explicitly, instead of just running; \file{config.status}, because the latter contains no information about; the new code. \subsection{Updating checked out code}. If the code in the main repository has been altered, other users' working; copies will of course not automatically be updated. In general, it is; only necessary to execute the following steps in order",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:12884,test,test-compile,12884,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['test'],['test-compile']
Testability,"n energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6303,test,tests,6303,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"n environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17371,test,test,17371,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['test']
Testability,"n every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pyte",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14431,test,tests,14431,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"n/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. * Create and compile plugin:. .. code-block:: bash. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the followi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:6480,test,testplugin,6480,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['testplugin']
Testability,"n; * Scraper looks for ``Process::environment.globals``, ``set_array_variable``, ``variables_``, etc. lines and comments in the C++ code; * C-side, the module for the variable is determined by the directory where it's found.; * Scraper looks for ``set_variable`` together with ``# P::e MODULE`` lines and comments in the Python code; * Py-side, the module for the variable is specified by ``MODULE`` in the comment; * When a variable is set by code in either language, e.g., ``variables_[varname.str()]`` rather than plain string, ``variables_[""FCI TOTAL ENERGY""]``, add a plain string line as a single-line comment, so the scraper can find it.; * Add new places to scrape for variables to :source:`doc/sphinxman/document_psivariables.pl`; * For now, we're scraping both global and Wfn variables; * All of these show up in referenceable appendices like ``apdx:detci_psivar``; * Plugins: ``doc.rst`` text, \*.py modules, and C++ keywords in ``psi4/tests/plugin_*`` plugin directories (disabled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:5002,test,tests,5002,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['test'],['tests']
Testability,"nabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); if(psi4_SKIP_ENABLE_Fortran); message(STATUS ""NOT Enabling Fortran""); else(); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); include(xhost) # defines: option(ENABLE_XHOST ""Enable processor-specific optimization"" ON); # below are uncommon to adjust; option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_print(ENABLE_CYTHONIZE ""Compile each python file rather than plaintext (requires cython) !experimental!"" OFF); option_with_f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:9151,test,tested,9151,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['test'],['tested']
Testability,"name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63181,test,test,63181,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"nce set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6760,test,test-labels,6760,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test-labels']
Testability,"nch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:10146,Test,Test,10146,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,2,"['Test', 'test']","['Test', 'tested']"
Testability,"ng commands that meets your needs::. >>> psi4 --plugin-name myplugin --plugin-template aointegrals; >>> psi4 --plugin-name myplugin --plugin-template mointegrals; >>> psi4 --plugin-name myplugin --plugin-template sointegrals; >>> psi4 --plugin-name myplugin --plugin-template wavefunction; >>> psi4 --plugin-name myplugin --plugin-template scf; >>> psi4 --plugin-name myplugin --plugin-template dfmp2. .. >>> psi4 --plugin-name myplugin --plugin-template ambit. .. Several stable sample plugin directories are available to consult in the; .. :source:`plugins` directory. Other plugin directories can be used as models; .. but are in active development. For documentation on plugin modules, see; .. :ref:`Available Plugins <sec:availablePlugins>`.; .. ; .. * :source:`plugins/aointegrals/aointegrals.cc` ; .. An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; .. ; .. * :source:`plugins/backtrans/backtrans.cc` ; .. A test of the one- and two-particle density matrix backtransformation code.; .. ; .. * :source:`plugins/mointegrals/mointegrals.cc` ; .. An example that uses the LibTrans library to generate and print MO basis integrals.; .. ; .. * :source:`plugins/mollerplesset2/mp2.cc` ; .. A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; .. ; .. * :source:`plugins/sointegrals/sointegrals.cc` ; .. An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. .. _`sec:condaplugins`:. Creating a New Plugin Using a Conda Pre-compiled Binary; -------------------------------------------------------. .. # prepare; .. >>> bash; .. >>> export PATH=$PSI4CONDA/bin:$PATH # usually already done from psi4 installation; .. >>> cd ""$(dirname $(which psi4))""/.. # move into distribution/environment directory, $PSI4CONDA; .. >>> conda install gcc # install compilers into expected place. |PSIfour| plugins can also be created using Conda for both |PSIfour|; binary and development environmen",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:3804,test,test,3804,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['test']
Testability,"ng test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:8662,test,test,8662,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"ngle command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4831,assert,asserted,4831,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['assert'],"['assert', 'asserted']"
Testability,"nted lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7518,test,test,7518,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"nto a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to trigger installer builds. (Even workflow edits need a dummy commit to; ``construct.yaml`` to retrigger.); * When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger for a day.; * Log in to vergil root and cd to ``/var/www/html/psicode-download``.; * Use the pull_gha_installers.sh script to download the installers from GH to vergil. First two; arguments are first and last of the artifact numbers, and third argument is an auth token.; ``bash pull_gha_installers.sh 47226565 47226573 715...4f3``.; * Make WindowsWSL and any other symlinks the script frontmatter advises. Build Docker images; -------------------. Docker images are built through GHA on the https://github.com/psi4/psi4meta repository from a Conda; environment specification and get served from DockerHub, https://hub.docker.com/r/psi4/psi4/tags . * Edit specification https://github.com/psi4/psi4meta/blob/master/docker/environment.yaml. - Edit the packages and channels info if necessary. Probably long-term stable.; - Don't edit the Python version, as that's controlled by the GHA. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to lab",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:26264,Log,Log,26264,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['Log'],['Log']
Testability,"nvvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. .. _`faq:psidatadir`:. Why not to set :envvar:`PSIDATADIR`; -----------------------------------. :envvar:`PSIDATADIR` is an environment variable containing the location of the; text resource parts of the |PSIfour| codebase (*e.g.*, basis sets,; databases, EFP fragments). It is for developer use only. In |PSIfour| 1.1; and beyond, the program *always* knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in |PSIfour| 1.0 and ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:33571,test,test,33571,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"o fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS li",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4211,test,tests,4211,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['tests']
Testability,"o read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4957,test,tests,4957,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,"of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correct",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12692,Test,Test,12692,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['Test'],['Test']
Testability,"oking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60472,test,test,60472,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"olo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://support.hdfgroup.org/HDF5/; * zlib http://www.zlib.net/. .. * :ref:`erd <cmake:erd>` |",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10116,test,testing,10116,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['test'],"['testing', 'tests']"
Testability,"omput. Chem.* **27**, 926 (2006).; (doi: `10.1002/jcc.20393 <https://doi.org/10.1002/jcc.20393>`_). |PSIfour| also features a SAD natural orbital guess, an extended; H\ |u_dots|\ ckel guess that employs on-the-fly atomic calculations alike the SAD; guess, as well as a superposition of atomic potentials (SAP) guess; that is based on screening of atomic nuclei. The SAD natural orbitals,; H\ |u_dots|\ ckel and SAP guesses have been described in. * ""An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient"", S. Lehtola, *J. Chem. Theory Comput.* **15**,; 1593 (2019) (doi: `10.1021/acs.jctc.8b01089; <https://doi.org/10.1021/acs.jctc.8b01089>`_). Density Cumulant Theory (DCT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _`intro:dctcitations`:. |PSIfour| features several formulations of newly-developed density cumulant; theory (DCT), also known as density cumulant functional theory (DCFT).; The theory and benchmark of this theory are discussed in the following papers:. DC-06 (also known as DCT-06):. * ""Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,"" A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, *J. Chem. Phys.*; **133**, 174122 (2010).; (doi: `10.1063/1.3503657 <https://doi.org/10.1063/1.3503657>`_). * ""Analytic gradients for density cumulant functional theory: The; DCFT-06 model,"" A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, *J. Chem. Phys.* **137**, 054105 (2012).; (doi: `10.1063/1.4739423 <https://doi.org/10.1063/1.4739423>`_). DC-12:. * ""Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,"" A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, *J. Chem. Phys.* **138**, 024107; (2013).; (doi: `10.1063/1.4773580 <https://doi.org/10.1063/1.4773580>`_). ODC-06 and ODC-12:. * ""Orbital-optimized density cumulant functional theory,"" A. Yu. Sokolov, and; H.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:8759,benchmark,benchmark,8759,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['benchmark'],['benchmark']
Testability,"on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64145,test,tests,64145,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"ongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new ma",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10919,test,tests,10919,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"onment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26720,sandbox,sandbox,26720,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['sandbox'],['sandbox']
Testability,"or Ubuntu shell on Windows), one can use the ``gcc``; compiler installed alongside ``psi4`` itself in the Conda distribution; or environment (below, ``$PSI4CONDA``). On Mac, one must use; ``libc++.so`` (*not* ``libstdc++.so``), and this can be accomplished by; installing XCode from the App Store that provides ``clang`` and; ``clang++`` compilers. * Check environment:. .. code-block:: bash. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. * Create and compile plugin:. .. code-block:: bash. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:5835,test,testplugin,5835,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,2,['test'],['testplugin']
Testability,"or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; ---------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68867,log,logging,68867,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['logging']
Testability,"oreach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:7230,test,test,7230,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"ory source/autodir_psivariables; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_cfour.py ${CCSD}; OUTPUT ${CCBD}/source/autodir_psivariables/module__cfour.rst; DEPENDS ${CCSD}/document_cfour.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/cfour.py; ${CCBD}/source/autodoc_psivariables_bymodule.rst; COMMENT ""Autodoc Cfour PSI variables""). # Autodoc databases; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_databases.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_databases.rst; DEPENDS ${CCSD}/document_databases.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/*.py,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/S22.py>; COMMENT ""Autodoc databases""). # Autodoc test cases; add_custom_command(; COMMAND ${PERL_EXECUTABLE} ${CCSD}/document_tests.pl ${CCSD}; OUTPUT ${CCBD}/source/autodoc_testsuite_corepsi4.rst; ${CCBD}/source/autodoc_testsuite_dftd3.rst; DEPENDS ${CCSD}/document_tests.pl; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/input.dat,${psi4_SOURCE_DIR}/tests/ghosts/input.dat>; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/*/input.dat,${psi4_SOURCE_DIR}/tests/dftd3/energy/input.dat>; COMMENT ""Autodoc test cases""). # Autodoc capabilities; # * tables are generated in pairs: one to build directory for Sphinx to use and one for the repo for devs to track; # * PYTHONPATH bit is because this is the only document_* script that uses a fn from Psi4; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --sphinx --quiet --writefile ""source/autodoc_capabilities_details.rst"" --mode details; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabili",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:8755,test,tests,8755,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"pabilities_occ_oo.rst; ${CCBD}/source/autodoc_capabilities_occ_nonoo.rst; ${CCBD}/source/autodoc_capabilities_scf.rst; DEPENDS ${CCSD}/document_capabilities.py; ${CCSD}/../../samples/stdsuite_psi4.txt; COMMENT ""Autodoc capabilities""). # Autodoc stubs; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_stubs.py ${CCSD}; OUTPUT ${CCBD}/source/api/psi4.core.set_variable.rst; DEPENDS ${CCSD}/document_stubs.py; COMMENT ""Autodoc stubs""). # # Autodoc driver; # add_custom_command(; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_driver.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_driver.rst; # DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/*.py; # ${CCSD}/document_driver.py; # COMMENT ""Autodoc driver""). # # Autodoc psi4 module; # add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINAR",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:15615,test,tests,15615,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"ples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61841,test,tests,61841,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"ppropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by l",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60768,test,tests,60768,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"psi4/doc/userman/source/index.rst`` and follow the instructions therein that your file may be autodocumented here. - Write docstrings! For a major function intended for use in input files, emulate any docstring in ``psi4/share/python/driver.py``. For a behind-the-scenes function or if you don't want the bother of dealing with `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_, just write an ordinary docstring. It will get slurped into the documentation in plain text. - Your python function should follow `PEP8 <http://www.python.org/dev/peps/pep-0008/>`_ conventions (without the line-length restriction). I'm aiming for files to pass the line below, unless for good reason. The second line is for database Python files. >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. - Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap\_ is suggested. - Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the 'current energy' variable. This last is needed to communicate with the optimizer. ::. psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). - Once your python function is fairly stable on its own, it's potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. - If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). Th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst:4911,test,test,4911,doc/sphinxman/source/attic/bestpractices_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst,1,['test'],['test']
Testability,psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:1246,log,logo,1246,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,2,['log'],"['logo', 'logoColor']"
Testability,"psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/procrouting/dft/superfunct",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16831,test,tests,16831,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14930,test,test,14930,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"put.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function:: psi4.compare_vectors(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_vectors(expected, computed [, label, *, check_name=False, **kwargs]). .. function:: psi4.compare_wavefunctions(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_wavefunctions(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_molrecs(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_molrecs; :noindex:. File Formats; ------------. .. autofunction:: psi4.compare_cubes(expected, computed[, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_fchkfiles. .. autofunction:: psi4.compare_fcidumps. .. autofunction:: psi4.compare_moldenfiles. .. autofunction:: qcdb.compare_vibinfos. Extra QCA Functions; -------------------. .. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:17086,test,testing,17086,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['testing']
Testability,"pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15158,test,test,15158,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"q:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structur",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5559,test,test,5559,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"r :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5515,Test,Test,5515,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['Test'],['Test']
Testability,"r a sample input. The PCM model and molecular cavity are specified in a ``pcm`` section that has; to be explicitly typed in by the user. This additional section follows a syntax; that is slightly different from that of |Psifour| and is fully documented; `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PCM would look like the following: ::. molecule NH3 {; symmetry c1; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; units bohr; no_reorient; no_com; }. set {; basis STO-3G; scf_type pk; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; :srcsample:`pcmsolver/ccsd-pte`,; :srcsample:`pcmsolver/scf`,; :srcsample:`pcmsolver/opt-fd`,; :srcsample:`pcmsolver/dft`, and; :srcsample:`pcmsolver/dipole`. Keywords for PCMSolver; ~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pcm.rst; .. include:: autodir_options_c/pcm__pcm_scf_type.rst; .. include:: autodir_options_c/pcm__pcm_cc_type.rst. .. _`cmake:pcmsolver`:. How to configure PCMSolver for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) PCMSolver. * Upstream Dependencies |w---w| PCMSolver |dr| Fortran, zlib. **CMake Variables**. * :makevar:`ENABLE_PCMSolver` |w---w| CMake variable toggling whether Psi4 builds with PCMSolver; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst:6256,test,tests,6256,doc/sphinxman/source/pcmsolver.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst,1,['test'],['tests']
Testability,"r developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function::",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:16156,test,tests,16156,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"r of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) al",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5819,test,tests,5819,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability,"r the following recommendations:. * It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for g",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50053,test,testing,50053,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['test'],"['testing', 'tests']"
Testability,r1 dft-grad-lr2 dft-grad-lr3 dft-grad-disk; dfomp2p5-grad2 dfrasscf-sp dfscf-bz2 dft-b2plyp dft-grac dft-ghost dft-grad-meta; dft-freq dft-freq-analytic1 dft-freq-analytic2 dft-grad1 dft-grad2 dft-psivar dft-b3lyp dft1 dft-vv10; dft1-alt dft2 dft3 dft-omega dft-dens-cut dlpnomp2-1 dlpnomp2-2 dlpnomp2-3; docs-bases docs-dft explicit-am-basis extern1 extern2 extern3 extern4; fsapt1 fsapt2 fsapt-terms fsapt-allterms fsapt-ext fsapt-ext-abc fsapt-ext-abc2; fsapt-ext-abc-au isapt1 isapt2 isapt-siao1 fisapt-siao1 isapt-charged; fci-dipole fci-h2o fci-h2o-2 fci-h2o-fzcv fci-tdm fci-tdm-2; fci-coverage; fcidump; fd-freq-energy fd-freq-energy-large fd-freq-gradient; fd-freq-gradient-large fd-gradient freq-isotope1 freq-isotope2 fnocc1 fnocc2; fnocc3 fnocc4 fnocc5 fnocc6 fnocc7 frac frac-ip-fitting frac-sym frac-traverse ghosts gibbs; lccd-grad1 lccd-grad2 matrix1 matrix2; mbis-1 mbis-2 mbis-3 mbis-4 mbis-5 mbis-6 mcscf1 mcscf2 mcscf3; mints1 mints2 mints3 mints4 mints5 mints6 mints8 mints-benchmark mints-helper; mints9 mints10 mints15 molden1 molden2 mom mom-h2o-3 mom-h2o-4; mp2-1 mp2-def2 mp2-grad1 mp2-grad2 mp2-h mp2p5-grad1 mp2p5-grad2 mp3-grad1 mp3-grad2; mp2-property mpn-bh nbody-he-cluster nbody-intermediates nbody-nocp-gradient; nbo nbody-cp-gradient nbody-vmfc-gradient nbody-vmfc-hessian nbody-hessian nbody-convergence; nbody-freq nbody-multi-level nbody-multi-level-2 numpy-array-interface; olccd-freq1 olccd-grad1 olccd-grad2 olccd1 olccd2 olccd3; omp2-1 omp2-2 omp2-3 omp2-4 omp2-5 omp2-grad1 omp2-grad2; omp2p5-1 omp2p5-2 omp2p5-grad1 omp2p5-grad2 omp3-1 omp3-2; omp3-3 omp3-4 omp3-5 omp3-grad1 omp3-grad2 opt-lindep-change; opt1 opt1-fd opt2 opt2-fd opt3 opt4 opt5 opt6 opt7 opt8 opt9; opt11 opt12 opt13 opt14 opt15 opt16 opt-irc-1 opt-irc-2 opt-irc-3; opt-freeze-coords opt-full-hess-every; oremp-grad1 oremp-grad2; phi-ao; props1 props2 props3 props4 psimrcc-ccsd_t-1 psimrcc-ccsd_t-2; psimrcc-ccsd_t-3 psimrcc-ccsd_t-4 psimrcc-fd-freq1; psimrcc-fd-freq2 psimrcc-pt2 psimr,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:3685,benchmark,benchmark,3685,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['benchmark'],['benchmark']
Testability,"rals__print.rst; # DEPENDS ${CCSD}/document_plugins.py; # ${psi4_SOURCE_DIR}/plugins/*/*.py; # ${psi4_SOURCE_DIR}/plugins/*/doc.rst; # COMMENT ""Autodoc plugins""). # Autodoc efp fragments; if(${ENABLE_libefp}); add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_efpfrag.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_efpfrag.rst; DEPENDS ${CCSD}/document_efpfrag.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag/*efp,${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag/h2o.efp>; COMMENT ""Autodoc efp fragments""); else(); file(WRITE ${CCBD}/source/autodoc_available_efpfrag.rst """"); endif(). # Format git log for feed; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E make_directory feed; COMMAND ${Python_EXECUTABLE} ${CCSD}/extract_changeset.py ${CCBD}; OUTPUT ${CCBD}/feed/history_trac_changeset.txt; ${CCBD}/feed/latest_trac_changeset.txt; DEPENDS ${CCSD}/extract_changeset.py; COMMENT ""Format git --log for psicode.org feed""). # Establishing dependencies for docs targets. # * mini github feed for psicode.org; add_custom_target(ghfeed; DEPENDS ${CCBD}/feed/history_trac_changeset.txt; ${CCBD}/feed/latest_trac_changeset.txt; COMMENT ""Preparing GitHub feed""). # * announcement; if (LATEX_COMPILER AND PDFLATEX_COMPILER); message(STATUS ""Documentation targets ${_jupy}available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF)""); else(); message(STATUS ""Documentation targets ${_jupy}available: sphinxman (html), sphinxmini (quick html)""); endif(). # * quick mini-build for docs development; add_custom_target(sphinxmini; DEPENDS ${CCBD}/source/conf.py; COMMENT ""Building Sphinx abridged HTML documentation build""). # * full, proper build; add_custom_target(sphinxman; DEPENDS ${CCBD}/source/autodoc_psi4bases.rst; ${CCBD}/source/autodoc_psifiles.rst; ${CCBD}/source/autodoc_physconst.rst; ${CCBD}/source/autodoc_abbr_options_c.rst; ${CCBD}/source/autodoc_glossary_options_c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:20051,log,log,20051,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['log'],['log']
Testability,"rates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.ma",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12779,test,test,12779,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"re easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so tha",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13066,test,test,13066,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"re. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5981,Test,Test,5981,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['Test'],['Test']
Testability,"red/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; edit the shebang line. If you're using |PSIfour| as a Python module, then |PSIfour| *is* running; the Python of ``which python``. .. _`faq:wrongpyfalse`:. How to fix ""``undefined symbol: _Py_FalseStruct``""; --------------------------------------------------. You're probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Psi4; -----------------------------------------. Debugging |PSIfour| has gotten a little confusing now that it's running through Python. Here's the syntax ::. >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. ::. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/share/psi4/scripts/valgrind-python.supp). This should remove all the python errors.; .. ; .. The other error, b",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:55154,test,tests,55154,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from lit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3370,test,test,3370,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"rianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2595,test,tested,2595,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,1,['test'],['tested']
Testability,"ribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, pr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21685,test,test,21685,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['test']
Testability,"rnal/upstream/libint2/CMakeLists.txt` (requires Ninja)."" OFF); option_with_default(psi4_SHGAUSS_ORDERING ""Ordering for shells of solid harmonic Gaussians: standard -- standard ordering (-l, -l+1 ... l) -or- gaussian -- the Gaussian ordering (0, 1, -1, 2, -2, ... l, -l). Changing this is experimental, expert only, and not a future plan. Internal calculations should be correct and fchk files should be correct, but other exports like Molden and QCSchema.Wavefunction won't be."" gaussian); include(custom_int_orderings). ######################## Process & Validate Options ##########################; include(GNUInstallDirs); include(autocmake_safeguards); include(custom_color_messages). if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAKE_INSTALL_PREFIX ""/usr/local/psi4"" CACHE PATH ""Install path"" FORCE); endif(); message(STATUS ""Psi4 install: ${CMAKE_INSTALL_PREFIX}""). # Python use in psi4 (not incl. external/); # * interpreter: run the versioner in psi4-core. run tests and build docs in psi4; # * headers: Python.h for pybind11 to build against in psi4-core; # * library: not at all. set(Python_ADDITIONAL_VERSIONS 3.12 3.11 3.10 3.9 3.8) # adjust with CMake minimum FindPythonInterp; find_package(Python 3.8 COMPONENTS Interpreter Development NumPy REQUIRED); message(STATUS ""${Cyan}Found Python ${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}${ColourReset}: ${Python_EXECUTABLE} (found version ${Python_VERSION})""). set(STAGED_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/stage); message(STATUS ""Psi4 staging: ${STAGED_INSTALL_PREFIX}""); message(STATUS ""CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}""); add_subdirectory(external/common); add_subdirectory(external/upstream). # external projects manage their own OpenMP and c++YY flags, so only add to CXX_FLAGS for psi4-core; include(custom_cxxstandard); include(custom_static_library). ################################ Main Project ################################; include(ExternalProject); ExternalProject_Add(psi4-core; DEPENDS lapack_external; hdf5_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:13932,test,tests,13932,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['test'],['tests']
Testability,"rom that of |Psifour| and is fully documented; .. `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PE would look like the following: ::. molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file `pna_6w.pot` can be downloaded; `here <https://raw.githubusercontent.com/maxscheurer/cppe/master/tests/potfiles/pna_6w.pot>`_. Keywords for CPPE; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pe.rst; .. include:: autodir_options_c/pe__potfile.rst; .. include:: autodir_options_c/pe__isotropic_pol.rst; .. include:: autodir_options_c/pe__induced_convergence.rst; .. include:: autodir_options_c/pe__maxiter.rst; .. include:: autodir_options_c/pe__border.rst; .. include:: autodir_options_c/pe__border_type.rst; .. include:: autodir_options_c/pe__border_n_redist.rst; .. include:: autodir_options_c/pe__border_redist_order.rst; .. include:: autodir_options_c/pe__border_rmin.rst; .. include:: autodir_options_c/pe__border_rmin_unit.rst; .. include:: autodir_options_c/pe__border_redist_pol.rst. .. _`cmake:cppe`:. How to configure CPPE for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling). * Downstream Dependencies |",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:5446,test,tests,5446,doc/sphinxman/source/cppe.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst,1,['test'],['tests']
Testability,"r} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24869,test,tested,24869,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tested']
Testability,"s additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFI",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14054,test,tests,14054,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['tests']
Testability,"s free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DKH; .. _`sec:DKH`:. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; ======================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:1341,test,testSuitedkh,1341,doc/sphinxman/source/dkh.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst,1,['test'],['testSuitedkh']
Testability,"s new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30332,log,logic,30332,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['log'],['logic']
Testability,"s, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4546,test,tests,4546,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,"s.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. .. _`faq:writepsi4`:. How to refer to Psi4; --------------------. Ways to refer to |PSIfour| in text, in order of decreasing goodness:. * as ``Psi4`` in Optima regular font with ""si"" in custom (82%) small caps; according to :source:`media/README.md`. * html: ``<span style=""font-family: Optima, sans-serif; color: #273896;"">P<span style=""font-size: 82%;"">SI</span>4</span>``. * as ``Psi4`` with ""si"" in generated small caps. * html: ``<span style=""font-variant: small-caps;"">Psi4</span>``. * as ``Psi4`` with ""si"" in lowercase. * as ``psi4`` in code. * **NOT** ``PSI4`` or ``PSI``. .. _`faq:psi4logos`:. How to get a Psi4 logo file; ---------------------------. All image files are stored in https://github.com/psi4/psi4media. .. _`faq:localaddon`:. How to use a local Add-On repository in the Psi4 build; ------------------------------------------------------. For each Add-On, |PSIfour| pulls source from a specific online Git; repository and a specific tag/branch/commit in it. This ensures success; of the |PSIfour| build, reproducibility of the runtime results, and; freedom for continued upstream development. Sometimes, you're the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset. Find the ``CMakeLists.txt`` governing the target Add-On in; :source:`external` and make changes analogous to the below::. #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you're changing the |PSIfour| repo codebase between compiles, there's; nothing more to do as CMake will handle t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:66255,log,logo,66255,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['logo']
Testability,"second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test con",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12154,test,tests,12154,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test-name', 'tests']"
Testability,"see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; results is available through :py:func:`psi4.driver.qcdb.vib.print_vibs`. .. _`table:frequency_analysis`:. .. table:: Results accessible through ``psi4.core.Wavefunction.frequency_analysis``. +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | ndarray(ndof) complex (real/imag) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | q | normal mode, normalized mass-weighted | a0 u^1/2 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+--------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:2708,test,tests,2708,doc/sphinxman/source/freq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst,1,['test'],['tests']
Testability,"ses: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:8547,test,test,8547,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"ses: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if(ENABLE_v2rdm_casscf); add_subdirectory(v2rdm_casscf); message(STATUS ""Adding test cases: Psi4 + v2rdm_casscf""); endif(). # <<< GPU_DFCC >>>. if(ENABLE_gpu_dfcc); add_subdirectory(gpu_dfcc); message(STATUS ""Adding test cases: Psi4 + gpu_dfcc""); endif(). # <<< SNSMP2 >>>. if(ENABLE_snsmp2); add_subdirectory(snsmp2); message(STATUS ""Adding test cases: Psi4 + snsmp2""); endif(). # <<< Bria",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:9051,test,test,9051,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`faq:doconfigure`; #. :ref:`faq:cray`. Non-QC Dependencies; -------------------. #. :ref:`faq:coredepend`; #. :ref:`cmake:python`; #. :ref:`faq:libmwcondapy`; #. :ref:`cmake:lapack`; #. :ref:`cmake:cxx`; #. :ref:`faq:approvedcxx`; #. :ref:`faq:modgcc`; #. :ref:`faq:macxcode`; #. :ref:`cmake:fortran`; #. :ref:`faq:approvedfc`; #. :ref:`faq:macgfortran`. QC Dependencies and Extensions; ------------------------------. #. :ref:`faq:addondepend`; #. :ref:`faq:localaddon`; #. :ref:`cmake:chemps2`; #. :ref:`faq:chemps2gccflto`; #. :ref:`cmake:dkh`; #. :ref:`cmake:libefp`; #. :ref:`cmake:erd`; #. :ref:`cmake:gdma`; #. :ref:`cmake:libint`; #. :ref:`cmake:pcmsolver`. Testing ; -------. #. :ref:`faq:testsoutput`; #. :ref:`faq:subsettests`; #. :ref:`faq:minutetests`; #. :ref:`faq:pytest`. Runtime Setup; -------------. #. :ref:`faq:runordinaryexe`; #. :ref:`faq:runordinarymodule`; #. :ref:`faq:runfrombinary`; #. :ref:`faq:inplace`; #. :ref:`faq:psi4scratch`; #. :ref:`faq:psidatadir`; #. :ref:`faq:psi4psiapipath`; #. :ref:`faq:modulenotfounderror`. Running |PSIfour|; -----------------. #. :ref:`What command line options does Psi4 have <sec:commandLineOptions>`; #. :ref:`What environment variables affect Psi4 <sec:environmentVariables>`; #. :ref:`faq:runtimepython`; #. :ref:`faq:psi4version`; #. :ref:`faq:psi4PBS`; #. :ref:`faq:psi4fileretention`; #. :ref:`faq:logging`; #. :ref:`faq:findexemod`. Runtime Errors and Debugging; ----------------------------. #. :ref:`faq:gdblldb`; #. :ref:`faq:setuptype`; #. :ref:`faq:wrongpyfalse`. Managing Code; -------------. #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`. Miscellaneous; -------------. #. :ref:`faq:writepsi4`; #. :ref:`faq:psi4logos`. .. #. :ref:`faq:getversion`; .. #. :ref:`faq:binarypackage`; .. #. :ref:`faq:getting-and-using-the-psi4dependencies-package`; .. #. :ref:`faq:erroreriam`. ,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:3731,log,logging,3731,doc/sphinxman/source/build_faq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst,1,['log'],['logging']
Testability,"si4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if(ENABLE_v2rdm_casscf); add_subdirectory(v2rdm_casscf); message(STATUS ""Adding test cases: Psi4 + v2rdm_casscf""); endif(). # <<< GPU_DFCC >>>. if(ENABLE_gpu_dfcc); add_subdirectory(gpu_dfcc); message(STATUS ""Adding test cases: Psi4 + gpu_dfcc""); endif(). # <<< SNSMP2 >>>. if(ENABLE_snsmp2); add_subdirectory(snsmp2); message(STATUS ""Adding test cases: Psi4 + snsmp2""); endif(). # <<< BrianQC >>>; if(ENABLE_BrianQC); add_subdirectory(brianqc); message(STATUS ""Adding test cases: Psi4 + BrianQC""); endif(). # <<< ECPINT >>>; if(ENABLE_ecpint); add_subdirectory(aediis-2); add_subdirectory(basis-ecp); add_subdirectory(dfmp2-ecp); add_subdirectory(sapt-ecp); add_subdirectory(scf-ecp); add_subdirectory(scf-ecp2); add_subdirectory(scf-ecp3); message(STATUS ""Adding test cases: Psi4 + ecpint""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:9457,test,test,9457,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"si4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6090,assert,assert,6090,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['assert'],['assert']
Testability,"si4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe`",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:4923,log,log,4923,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,3,"['log', 'test']","['log', 'test']"
Testability,"si4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; .. * When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ``ltrtver`` with updated version numbers and/or build numbers (only if code changes); .. * Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; .. * Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (coverage); .. * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4 ``external/*/*/CMakeLists.txt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/in",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:8636,test,tests,8636,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,"since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence setting",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4412,test,tests,4412,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"sponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: gCP; .. _`sec:gcp`:. Interface to gCP by S. Grimme; =============================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Samples <apdx:testSuitegcp>`. .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:1250,test,testSuitegcp,1250,doc/sphinxman/source/gcp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst,1,['test'],['testSuitegcp']
Testability,"ssible name conflicts. As; detailed in :ref:`sec:jobControl`, setting keywords is flexible in; format. The previous example translates to::. # UHF-SCF energy calculation . molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; }; ; set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }; ; energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BA",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:8403,test,tests,8403,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['test'],['tests']
Testability,"st -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectab",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63008,test,tests,63008,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"st that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and sig",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8526,TEST,TEST,8526,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['TEST'],['TEST']
Testability,"stalls; Miniconda into ``$HOME/miniconda`` and the |PSIfour| executable into the; main conda environment at ``$HOME/miniconda/bin/psi4``. .. code-block:: bash. # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/la",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17134,log,log,17134,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['log'],['log']
Testability,"stry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`apdx:testSuite`:. Test Suite and Sample Inputs; ============================. |PSIfour| is distributed with an extensive test suite, which can; be found in :source:`tests`. After building the source code, these; can automatically be run by running ``ctest`` in the compilation; directory. More info on ``ctest`` options can be found; :ref:`here <faq:subsettests>`. Sample input files; can be found in the :source:`samples` subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Sample inputs accessible through :ref:`interfaced executables; <sec:interfacing>` are bulleted below. .. toctree::. autodoc_testsuite_brianqc.rst; autodoc_testsuite_cfour; autodoc_testsuite_chemps2; autodoc_testsuite_cookbook; autodoc_testsuite_dftd3; autodoc_testsuite_dftd4; autodoc_testsuite_dkh; autodoc_testsuite_libefp; autodoc_testsuite_erd; autodoc_testsuite_gcp; autodoc_testsuite_gdma; autodoc_testsuite_gpu_dfcc; autodoc_testsuite_json; autodoc_testsuite_mrcc; autodoc_testsuite_pcmsolver; autodoc_testsuite_psi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/testsuite.rst:1043,Test,Test,1043,doc/sphinxman/source/testsuite.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/testsuite.rst,1,['Test'],['Test']
Testability,"sts matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If pack",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63273,test,testing,63273,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testing']
Testability,"stsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63580,test,test,63580,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['test'],['test']
Testability,"t (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characte",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:6941,test,test,6941,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['test'],['test']
Testability,"t -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15328,test,tests,15328,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"t and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MRCC; .. _`sec:mrcc`:. Interface to MRCC by M. K\ |a_acute|\ llay; ==========================================. .. codeauthor:: Justin M. Turney and Andrew C. Simmonett; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <apdx:mrcc>`, :ref:`PSI Variables <apdx:mrcc_psivar>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:1415,test,testSuitemrcc,1415,doc/sphinxman/source/mrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst,1,['test'],['testSuitemrcc']
Testability,"t case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7889,test,tests,7889,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"t either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install fr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17448,test,tested,17448,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['tested']
Testability,"t opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15465,test,test,15465,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"t results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * T",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13375,test,tests,13375,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"t']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy('cfour',; path='/full/path/to/cfour/scratch')``. Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with ``energy('cfour', keep=True)`` or; (the default) ``energy('cfour', keep=False)``. *path* and *keep* are; keyword arguments that get interpreted by the; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` function documented below. .. autofunction:: psi4.driver.procrouting.interface_cfour.run_cfour(name [, keep, path]). .. _`sec:cfourFunctionality`:. Functionality; ~~~~~~~~~~~~~. Through clever use of the ``cfour {...}`` block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into |PSIfour| data objects. .. rubric:: Implemented. * Single-point :py:func:`~psi4.driver.energy` commands for :ref:`ground state; methods <table:energy_cfour>`. Examples:; :srcsample:`cfour/sp-rhf-ccsd_t_-ao-ecc`, :srcsample:`cfour/scf4`,; :srcsample:`cfour/mints5`. * Analytic :py:func:`~psi4.driver.gradient` and :py:func:`~psi4.driver.optimize`; commands for :ref:`ground state methods <table:grad_cfour>`. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: :srcsample:`cfour/opt-rhf-ccsd_t_`,; :srcsample:`cfour/mp2-1`, and :srcsample:`cfour/mints5-grad`. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. * Finite difference of energy :py:func:`~psi4.d",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:27559,test,tested,27559,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['test'],['tested']
Testability,"t-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bash",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5637,log,log,5637,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,3,"['log', 'test']","['log', 'test']"
Testability,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69436,log,log,69436,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,7,['log'],"['log', 'logging', 'loglevel']"
Testability,"te; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28625,test,test,28625,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['test']
Testability,"te; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61105,test,tests,61105,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"test -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62733,Test,Test,62733,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,3,"['Test', 'test']","['Test', 'tests']"
Testability,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61240,test,test,61240,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,13,['test'],"['test', 'testlabel', 'testname', 'tests']"
Testability,"test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6577,Test,TestingMacros,6577,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['Test'],['TestingMacros']
Testability,"the input file, *e.g.* ``myplugin.testfunction()``, note the namespace; protection. * **pymodule.py** |w---w| Python component of the plugin.; By encoding the sequence of |PSIfour| module; calls needed to run the plugin in the ``run_myplugin()`` function in this; file, the plugin is hooked into the main |PSIfour| driver function; :py:func:`~psi4.driver.energy` and so can be accessed through; ``energy('myplugin')`` in an input file. Any other Python functions can; also be placed in this file. * **__init__.py** |w---w| Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won't; need editing unless additional Python files are added to the plugin; directory (add additional lines to the ``# Load Python modules`` section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the ``# Load C++ plugin`` section). .. comment as modeled in :source:`tests/plugin_libcim/__init__.py`). .. literalinclude:: @SFNX_INCLUDE@psi4/share/psi4/plugin/__init__.py.template. * **doc.rst** |w---w| Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, *etc.*. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the ``.. comment``; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the |PSIfour|; documentation, along with any docstrings to Python functions, and the C++; keywords block in the ``myplugin.cc`` file. See :ref:`sec:documentation`; for building documentation. .. and :ref:`Available Plugins <sec:availablePlugins>`; .. for this file's final destination. Please note that pure virtual functions in a plugin may cause undefined symbols errors when; the plugin is loaded. To create a purely Python plugin, create a new plugin directory, then; remove the ``Makefile`` and ``myplugin.cc`` files and; erase the shared object ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:10240,test,tests,10240,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['tests']
Testability,"the relative separation of the two centers; and not their absolute positions in space. Therefore, the derivative with; respect to center A is the negative of the same derivative with respect to; center B, so one is trivially gleaned from the other. Extending this to second; derivatives, the same principle leads to the fact that double derivatives with; respect to center A are equal to double derivatives with respect to center B,; which are also equal to the negative of the mixed double derivatives with; respect to both center A and B. The old code only provided the double; derivative with respect to center A, leaving the caller to determine the other; values. The Libint2 engine instead provides all integrals, so the caller; simply needs to loop over all of the buffers provided in the appropriate order. Changes to External Potential Engines; ..................................... Benchmarking showed that early versions of the old code spent a non-negligible; amount of time performing the Cartesian to spherical harmonic transformation of; the integrals, which is needed for most modern basis sets. To improve; performance, we instead backtransformed the density to the Cartesian; representation (denoted ""CartAO"") and computed / contracted all integrals in; this Cartesian basis, eliminating the need to transform to spherical harmonics; as the integrals are computed. This bottleneck no longer exists, so these; extra transformation steps have been removed as part of the switch to Libint2,; and the affected codes (PCM and CPPE interfaces) now compute the potential and; field integrals in the representation required by the basis set. Also, note that the way external point charges are specified has changed.; Previously, a set of N external point charges would be specified by passing a; matrix with dimensions N rows and 4 columns -- corresponding to charge, x, y, z; -- to the ``set_charge_field()`` member of the potential integral class. The; same information is now passed using",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:16434,Benchmark,Benchmarking,16434,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['Benchmark'],['Benchmarking']
Testability,"these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This means ``PRINT``; will generally be at the end of an option name. * Use ``INTS_TOLERANCE`` (not schwarz_cutoff). * ``H`` in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be ``HESS``. * All option names should be all caps and separated by underscores. * If you have an option that instructs your module to do something not too; computationally intensive and then quit, append ``_EXIT`` to the option; name. * Scaling terms (like for scs) should follow the pattern ``MP2_SS_SCALE``; and ``SAPT_OS_SCALE``. * ``FRAG`` for fragment. * ``AVG`` for average. * For level-shifting, let's try to have it governed by (double); ``LEVEL_SHIFT`` only and not a boolean/double combo since the procedure; can be turned on (r",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10806,test,tested,10806,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tested']
Testability,"thin ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68914,log,log,68914,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['log']
Testability,"tinue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a sub",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5051,test,test,5051,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"tion related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See :srcsample:`scf-ecp` and :srcsample:`dfmp2-ecp`; for examples of computations with ECP-containing basis sets. .. warning:: Prior to May 2022, v1.6, Psi4 used a built-in ECP code. Analytic derivatives of ECPs were not available. The HF and DFT derivatives were implemented in a semi-numerical scheme, where numerical ECP gradients were added to analytic SCF gradients. For post-SCF methods, the entire gradient computation needed to be run as finite difference of energies. .. warning:: As of May 2022, v1.6, Psi4 uses the LibECPInt library, and analytic derivatives and Hessians of ECPs are available. Analytic derivatives of molecular systems including ECPs should be available whenever the method has analytic derivatives, but these have so far only been verified for HF and DFT. .. warning:: ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the `forum <http://forum.psicode.org>`_. .. _`sec:scfqmmm`:. External potentials and QM/MM; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In addition to the implementation of :ref:`EFP <sec:libefp>` for accurate QM/MM; computations, |PSIfour| can perform more rudimentary QM/MM procedures via the; |scf__extern| keyword. The following snippet, extracted from the; :srcsample:`extern1` test case, demonstrates its use for a TIP3P external potential::. import numpy as np; external_potentials = [; [-0.834, np.array([1.649232019048,0.0,-2.356023604706]) / psi_bohr2angstroms],; [ 0.417, np.array([0.544757019107,0.0,-3.799961446760]) / psi_bohr2angstroms],; [ 0.417, np.array([0.544757019107,0.0,-0.912085762652]) / psi_bohr2angstroms]]. gradient('scf', external_potentials=external_potentials). The ``external_potentials`` array has three rows for three separate; particles, and it is",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:53471,test,tested,53471,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['test'],['tested']
Testability,"tion. .. option:: -i <filename>, --input <filename>. Input file name. Default: input.dat. .. option:: --inplace. Runs |PSIfour| with compiled code from <objdir> but driver code from source,; so no need to ``make`` between Python edits. Expert mode. .. option:: -k, --skip-preprocessor. Skips input preprocessing. Expert mode. .. option:: -l <name>, --psidatadir <name>. Overrides the value of; :envvar:`PSIDATADIR` and specifies the path to the Psi data; library (ends in ``share/psi4``). Expert mode. .. option:: --loglevel <int>. Sets logging level: WARN=30, INFO=20, DEBUG=10. .. option:: -m, --messy. Leave temporary files after the run is completed. .. option:: --memory <memory>. The amount of memory to use. Can be specified with units (e.g., '10MB') otherwise bytes is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a templa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:18951,test,testing,18951,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['test'],['testing']
Testability,"tml#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software package. Copyright (c) 2007-2023 The Psi4 Developers. The copyrights for code used from other parties are included in; the correspon",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:5793,log,logo,5793,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,2,['log'],"['logo', 'logoColor']"
Testability,"tom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16362,test,tests,16362,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"treet, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:sowreap`:. Embarrassing Parallelism; ========================. Many of the tasks automated by Python wrappers consist of a number of; independent |PSIfour| calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. - Prepare an input file, simply adding ``mode='sow'`` to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations. - According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation. - The 'sow' stage also produces a *master* input file (with a; ``mode='reap'`` directive). When all the jobs in the above step are; completed, place their output files in the same location as the; *master* input, and run this last, quick job to collect the results. - Sow/reap procedures are governed by the **mode** keyword, choices being; ``'continuous'``, ``'sow'``, and ``'reap'``. Only ``'sow'`` is likely to; be used by the user, as ``'continuous'`` is always the default, and; input files with ``'reap'`` are autogenerated. - Embarrassingly parallel algorithm available at present for:. - :ref:`sec:db()` ; - finite difference operation of :ref:`sec:opt()` ; - finite difference of energies of :ref:`sec:freq()`; - finite difference of gradients of :ref:`sec:freq()`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Local options (*e.g.*, ``set scf e_convergence 9``) will not get transmitted to the child jobs. - Array options (*e.g.*, ``set states_per_irrep [2, 1]``) will not get transmitted to the child jobs. - Function intercalls (*e.g.*, db(opt())) are not tested with sow/reap procedures. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst:2908,test,tested,2908,doc/sphinxman/source/sowreap.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst,1,['test'],['tested']
Testability,"trices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5835,test,tests,5835,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"ts/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13158,test,test,13158,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"ts/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/procrouting/dft/superfunctionals.py; ${psi4_SOURCE_DIR}/tests/docs-dft/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""Autodoc functionals""). # Autodoc auxiliary basis sets; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-bases; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-bases/autodoc_basissets_byfamily.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_basissets_byfamily.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislist.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislistdunning.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislistother.py; ${psi4_SOURCE_DIR}/tests/docs-bases/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""Autodoc auxiliary basis sets""). # Autodoc plugins; # Not at all in working order; #add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E make_directory source/autodir_plugins; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_plugins.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_abbr_options_plugins",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:17835,test,tests,17835,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"ts/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. aut",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15953,test,test,15953,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,"['assert', 'test']","['assert', 'test']"
Testability,"ultiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; .. Extracting packages ...; .. [ COMPLETE ]|#########################",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:22692,test,test,22692,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['test']
Testability,"units. The requested properties will be; written out in the same order as the grid point specification in grid.dat; see; the above table for the format and file name of the output. The grid may be generated in the input file using standard Python loops. By; capturing the wavefunction used to evaluate the one-electron properties, the; values at each grid point may be captured as Python arrays in the input file::. E, wfn = prop('scf', properties=[""GRID_ESP"", ""GRID_FIELD""], return_wfn=True); Vvals = wfn.oeprop.Vvals(); Exvals = wfn.oeprop.Exvals(); Eyvals = wfn.oeprop.Eyvals(); Ezvals = wfn.oeprop.Ezvals(). In this example, the *Vvals* array contains the electrostatic potential at each; grid point, in the order that the grid was specified, while the *Exvals*,; *Eyvals* and *Ezvals* arrays contain the *x*, *y* and *z* components of the; electric field, respectively; all of these arrays can be iterated and; manipulated using standard Python syntax. For a complete demonstration of this; utility, see the :srcsample:`props4` test case. .. index:: ISA; MBIS. .. _`sec:oeprop_mbis`:. Minimal Basis Iterative Stockholder; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The Minimal Basis Iterative Stockholder (MBIS) method is one of many procedures; that partitions a molecular one-particle density matrix into atomic electron densities.; Running MBIS in |PSIfour| will calculate atomic valence charge widths, volume ratios,; atomic charges, as well as dipoles, quadrupoles, and octupoles. ; Additionally, all expectation values of radial moments of n-th order (:math:`<r^n>`) ; are computed up to fourth order. Higher moments can be computed by specifying |globals__max_radial_moment|.; The volume ratios are computed as the ratio between the volume of the atomic density; (:math:`<r^3>`) and the volume of the free atom computed using the same level; of theory, but with a potentially unrestricted reference. The allowed number of iterations and convergence criteria for the stockholder ; algorithm is c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:9489,test,test,9489,doc/sphinxman/source/oeprop.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst,1,['test'],['test']
Testability,"updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Inste",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18745,log,logged,18745,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['log'],['logged']
Testability,"ur/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63739,test,tests,63739,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"urce files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working T",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5748,test,tests,5748,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability,"ut.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6165,test,tests,6165,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,"var:`CONDA_PREFIX` and :envvar:`HOST` are defined upon; activation). .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. .. _`faq:approvedcxx`:. What C and C++ compilers and versions are approved; --------------------------------------------------. On Linux, the following work nicely. * GNU: ``gcc``, ``g++``; * Intel: ``icc``, ``icpc``; * Clang: ``clang``, ``clang++``. On Mac, the following work nicely. * Apple Clang: ``clang``, ``clang++``; * Intel: ``icc``, ``icpc``. |PSIfour| requires *full* C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; :source:`cmake/custom_cxxstandard.cmake`, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both ``icpc`` and ``gcc`` versions are checked.; Intel OneAPI Classic compilers work fine. OneAPI beta compilers build but have; been only minimally tested. * :ref:`faq:modgcc`. .. _`faq:macxcode`:. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; -----------------------------------------------------------------------------. The easiest compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` compilers without the above limitations; is through conda. .. code-block:: bash. # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:38975,test,tested,38975,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tested']
Testability,"xcluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62637,test,testsoutput,62637,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testsoutput']
Testability,"y ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68984,log,log,68984,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['log']
Testability,"y dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5776,test,tests,5776,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"y-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://suppo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10043,test,testing,10043,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testing']
Testability,"y/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13440,test,test,13440,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"ying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between ev",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12432,log,log,12432,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['log'],['log']
Testability,"ython bin/psi4""; configure_file(psi4.bat psi4.bat @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4.bat; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}); endif(). # <<< install lib/ >>>; if(NOT ENABLE_CYTHONIZE); install(DIRECTORY driver; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; FILES_MATCHING; PATTERN ""*.py""; PATTERN pytest EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATT",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11037,test,tests,11037,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,2,['test'],['tests']
Testability,zure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.c,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:1099,log,logo,1099,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['log'],['logo']
Testability,"} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rs",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16479,test,tests,16479,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5639,test,testsoutput,5639,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testsoutput']
Usability," # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:plugins`:. Creating New Plugins; ====================. Modular Approach to Development; -------------------------------. It is slightly cumbersome to the development cycle to recompile |PSIfour|; every time a change is made to the C++ code.; It's also daunting to new developers if they're required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with Psi3 due to the independent; nature of the modules. To overcome these problems, |PSIfour| now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi's vast library. The plugins can be loaded at; run-time from any location. .. _`sec:newplugins`:. Creating a New Plugin; ---------------------. |PSIfour| can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing ``myplugin`` with the name of your great code.; If the name you provide is not valid, |PSIfour| will complain. >>> psi4 --plugin-name myplugin. |PSIfour| will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is ``cd`` into the dir",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:1373,learn,learn,1373,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['learn'],['learn']
Usability," :py:func:`~psi4.core.print_variables`. Note that PSI variables; are cleared at the start of each :py:func:`~psi4.driver.energy`, etc. in an input; file by :py:func:`~psi4.core.clean_variables()`.; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a :py:func:`~psi4.core.print_variables` command, the; last will include :psivar:`SCF TOTAL ENERGY` but not; :psivar:`FCI TOTAL ENERGY`.; The entire dictionary of PSI variables can be obtained through; :py:func:`~psi4.core.get_variables`. .. _`sec:returnvals`:. Return Values; =============. Most of the usual user computation functions (*i.e.*,; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, and; :py:func:`~psi4.driver.frequency`) return simply the current total energy.; Consult the descriptions of other functions in :ref:`sec:psithonFunc` for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions. ::. # E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; ``return_wfn=True`` keyword argument additionally returns; :py:class:`~psi4.core.Wavefunction`. ::. # power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). .. _`sec:loops`:. Loops; =",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:11298,simpl,simple,11298,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['simpl'],['simple']
Usability," Psi4 had a different set of keywords controlling instability analysis, and those were included in the CPHF module rather than the SCF module.; .. warning:: Extending Davidson instability analysis to Kohn-Sham references is under development. As of 1.7, only LDA functionals are currently supported. In case convergence problems are encountered during the Davidson procedure, file a bug report.; If the solver seems to converge on the wrong eigenvalue, try increasing |scf__solver_n_guess|.; Otherwise, if the solver is almost converged but reaches the maximum number of iterations, try increasing; |scf__solver_maxiter|. .. _`sec:scf-ecps`:. Effective core potentials (ECPs); ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| supports the use of effective core potentials to describe the; innermost electrons in heavy elements.; ECPs are only available if |PSIfour| is compiled with the :ref:`LibECPInt <cmake:ecpint>` library.; If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, *c.f.* :ref:`sec:basissets-ecps`. All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See :srcsample:`scf-ecp` and :srcsample:`dfmp2-ecp`; for examples of computations with ECP-containing basis sets. .. warning:: Prior to May 2022, v1.6, Psi4 used a built-in ECP code. Analytic derivatives of ECPs were not available. The HF and DFT derivatives were implemented in a semi-numerical scheme, where numerical ECP gradients were added to analytic SCF gradients. For post-SCF methods, the entire gradient computation needed to be run as finite difference of energies. .. warning:: As of May 2022, v1.6, Psi4 uses the LibECPInt library, and analytic derivatives and Hessians of ECPs are available. Analytic derivatives of molecular systems including ECPs should be available whenever the method has analytic ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:52385,simpl,simply,52385,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['simpl'],['simply']
Usability," [1, 0]. which is the same occupation as the :math:`^2A_1` state. In this case, the; :math:`^2A_1` state is lower in energy, and is not problematic. The distorted; geometries for the :math:`^2B_2` state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it's easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. .. index:: molecule; multiple fragments; .. _`sec:fragments`:. Non-Covalently Bonded Molecule Fragments; ========================================. |PSIfour| has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. |PSIfour| provides a very simple mechanism; for doing so: simply define the complex's geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block::. molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. This specifies that there are two neutral, spin-singlet fragments. It is; possible to further specify that the overall complex is neutral and spin-singlet; by inserting another :samp:`{charge} {multiplicity}` line, separated from the first; molecule block by a `--` line. If any information is missing, |PSIfour| will set the; unprovided charges and multiplicities to be consistent with those that are given.; For exa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:18846,simpl,simple,18846,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,2,['simpl'],"['simple', 'simply']"
Usability," ``WRITE``; options to indicate printing to another file. This probably isn't; entirely valid now but should be observed in future. The complement to; ``WRITE`` is ``READ``. ``PRINT``, ``READ``, and ``WRITE`` will usually; be the last words in an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This means ``PRINT``; will generally be at the end of an option name. * Use ``INTS_TOLERANCE`` (not schwarz_cutoff). * ``H`` in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be ``HESS``. * All option names should be all caps and separated by underscores. * ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10421,guid,guidelines,10421,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['guid'],['guidelines']
Usability," are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values functi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8265,simpl,simple,8265,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['simpl'],['simple']
Usability," as before the introduction of Libint2, however access to the integrals has; changed, as described below. Accessing integrals; ................... Before the Libint2 transition, one electron integrals were computed in a flat; array, internally called `buffer_`, which was accessed through the integral; object's ``buffer()`` method. For integrals with multiple operators, e.g.,; dipole operators that have three distinct components, the buffer was simply; elongated by the appropriate amount and the caller was responsible for striding; through each resulting batch correctly. The Libint2 engines instead return a; list of pointers into each operator's batch of integrals, the ordering of which; are detailed on the Libint2 wiki. For this reason, the call to ``buffer()``; that returns a single buffer must be replaced with a call to ``buffer()`` to; get a list of pointers; we recommend that be assigned the type ``const auto; &``. For simple integrals, such as overlap or kinetic, only the buffer; corresponding to the zeroth element of this array contains integrals. Derivative Integrals; .................... The old one electron integral code used translational invariance relations to; minimze the number of integrals to be computed, leaving the caller with some; bookkeeping to do to compute all terms. For example, consider an overlap; integral: its value depends only on the relative separation of the two centers; and not their absolute positions in space. Therefore, the derivative with; respect to center A is the negative of the same derivative with respect to; center B, so one is trivially gleaned from the other. Extending this to second; derivatives, the same principle leads to the fact that double derivatives with; respect to center A are equal to double derivatives with respect to center B,; which are also equal to the negative of the mixed double derivatives with; respect to both center A and B. The old code only provided the double; derivative with respect to center A, leav",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:15100,simpl,simple,15100,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simple']
Usability," be; recalled (get_str('DF_BASIS_SCF')), the fitting role if defaults need to; be computed (JKFIT), the. *How* for Programmers; ---------------------. To get a BasisSet object into your module, just call `pyconstruct` where; formerly you called `construct`. There are two flavors, one for orbital; basis sets and one for auxiliary basis sets. There's no difference in the; BasisSet objects they return or even the code used to assemble them- the; two flavors are just for sane argument naming and to establish different; signatures for Boost binding. Orbital Basis; *************. Give the function a Molecule object for which to build basis, a label for; the basis (generally, BASIS), and a hint for finding the basis. This last; argument gets used to find a python function by that name camoflaged; (that's what ``basis {...}`` blocks in the input file get translated into); or failing that a string to find a gbs file defining the basis. ::. // simple; boost::shared_ptr<BasisSet> primary = BasisSet::pyconstruct_orbital(molecule, ; ""BASIS"", ""CC-PVDZ"");. // self-contained; boost::shared_ptr<BasisSet> primary = BasisSet::pyconstruct_orbital(Process::environment.molecule(),; ""BASIS"", Process::environment.options.get_str(""BASIS""));. Auxiliary Basis; ***************. Give the function a Molecule object for which to build basis, a label for; the basis, a hint for finding the basis, a fitting role to apply if; defaults need to be generated, and a hint for finding the orbital basis to; build defaults against. ::. // simple; boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct_auxiliary(molecule,; ""DF_BASIS_SCF"", """", ; ""JKFIT"", ""CC-PVDZ"");. // self-contained and force Spherical; boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct_auxiliary(Process::environment.molecule(),; ""DF_BASIS_SCF"", Process::environment.options.get_str(""DF_BASIS_SCF""), ; ""JKFIT"", Process:environment.options.get_str(""BASIS""), 1);. Adding Basis Option to Code; ***************************. - Registe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst:3842,simpl,simple,3842,doc/sphinxman/source/attic/prog_basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst,1,['simpl'],['simple']
Usability," energy::. @RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options; ^^^^^^^^^^^^^^^^^^. The X2C module in |PSIfour| supports different combinations of basis set.; By default, if the input file specifies only |mints__basis|, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and then; recontract the X2C Hamiltonian in the original basis.; Alternatively, the user can use |globals__basis_relativistic| to specify a different; basis set to solve the modified Dirac equation. ::. set {; basis cc-pvdz-dk; basis_relativistic cc-pvtz-dk; relativistic x2c; }. It is recommended that when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding ""-decon"" to the ; name of the primary basis you want to use for the calculation as detailed in ; :ref:`Decontracted Basis Sets <sec:basisDecontracted>`. Publications resulting from the use ; of X2C should cite the following publication: [Verma:2015]_. Theory; ^^^^^^. X2C is based on exact decoupling of ; positive-energy ( :math:`h^{FW}_{\rm ++}`; ) and negative-energy (:math:`h^{FW}_{\rm --}` ); blocks of the Dirac Hamiltonian (:math:`h^{D}`). . .. math:: ; U^\dagger h^{\rm D} U = ; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}. The transformation ( :math:`U` ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984]_ treatment. ; In the X2C treatment, the positive-energy block of the Hamiltonian ( :math:`h^{FW}_{\rm ++}` ); is given by the sum; of a transformed kinetic (:math:`T_{\rm X2C}`) and potential energy ( :math:`V_{\rm X2C}` ) contribution.; Relativistic kinetic energy (",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst:3718,simpl,simply,3718,doc/sphinxman/source/relativistic.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst,1,['simpl'],['simply']
Usability," file, do ``sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}``. .. _`faq:findmissingoutputref`:. How to find tests without output.ref; ------------------------------------. Ideally, each new test or much-altered test should add its own; ``output.ref``. When that doesn't happen, this command helps. ::. find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance). e) PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews. f) Unless there's been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later. g) Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won't block merging, but we do usually let it complete before merging unless it's a trivial PR. h) We don't enforce branches to be up to date before merging since that'd be a lot of extra CI time a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:10559,learn,learning,10559,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['learn'],['learning']
Usability," for State-specific; Multireference Coupled Cluster Methods,""; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; *Phys. Chem. Chem. Phys.* **11**, 4728-4741 (2009).; (doi: `10.1039/b822910d <https://doi.org/10.1039/b822910d>`_). Symmetry-Adapted Perturbation Theory (SAPT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. |PSIfour| features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. * ""Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,"" B. Jeziorski, R. Moszynski,; and K. Szalewicz, *Chem. Rev.* **94**, 1887-1930 (1994).; (doi: `10.1021/cr00031a008 <https://doi.org/10.1021/cr00031a008>`_). |PSIfour| benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in |PSIfour|. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. * ""Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, *J. Chem. Phys.* **140**,; 094106 (2014).; (doi: `10.1063/1.4867135 <https://doi.org/10.1063/1.4867135>`_). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT. DF-SAPT0. * ""Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,"" E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, *J.; Chem. Phys.* **135**, 174017 (2011).; (doi: `10.1063/1.3656681 <https://doi.org/10.1063/1.3656681>`_). * ""Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Applicatio",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:15527,guid,guidance,15527,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['guid'],['guidance']
Usability," from an external source and; then performs some kind of expensive matrix operation on those data. Because; Python has a rich set of tools for obtaining data from external sources,; writing this tool in the Python layer is a natural choice. If we know that the; matrix will always be small enough to fit in memory, we can simply rely on the; routines present in NumPy to do the heavy lifting and the code is easy to; implement entirely in the Python layer. In the case where the matrix operation; is non-standard and requires some specialized code to handle disk-based; storage, the decision to write in Python is less clear cut. It is certainly; possible to write these out-of-core routines using Numpy primitives, but there; are a number of tools in |PSIfour| already to perform tasks like these that are; required, *e.g.*, for cluster. In this case, a good design would be to write a; simple piece of code in the C++ layer that performs the matrix operation on a; given input, using the I/O routines available in |PSIfour| and the parallelism; afforded by OpenMP, and to make that code available to the front end as; described in :ref:`sec:prog_tour-exposing`. The Python layer could then be; responsible for obtaining the input data and calling this C++ code to do the; manipulations, allowing each language layer to handle the subset of the work; that caters to their individual strengths. A number of concrete examples of this workflow exist in the code already. For; finite difference computations of energy derivatives, the logic to determine; the type of stencil and which displacements are needed is not going to be rate; limiting for any reasonable quantum mechanical energy function. Therefore,; doing that work in the Python layer is a good idea, as it allows the many; Python tools for farming out *embarrassingly parallel* workloads to be used,; while the C++ layer can be used to implement the energy function to be; differentiated. In SCF, we have a number of sources of external embe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:6243,simpl,simple,6243,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['simpl'],['simple']
Usability," in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:5810,simpl,simply,5810,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['simpl'],['simply']
Usability," input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to |PSIfour|,; the auxiliary basis will fall back on `def2 quad-zeta fitting bases; :source:`psi4/driver/qcdb/libmintsbasisset.py#L762`.; Note that if |mints__basis| is known to be larger than quad-zeta,; |PSIfour| *will not* attempt to fall back on the def2 fitting bases. The same basis ""block"" syntax can be; used to specify basis sets other than that used to define orbitals. For; example, ::. set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used::. df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. .. _`sec:basisDecontracted`:. Decontracted Basis Sets; =======================. Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add ""-decon"" to the name; of the primary basis set (*e.g.* :srcsample:`decontract`). ::. 	set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the :ref:`X2C Hamiltonian <sec:relativistic>`. .. index::; pair: basis set; adding new. .. _`sec:basisUserDefined`: . User-Defined Basis Sets; =======================. .. note:: No recompile of the PSI program is necessary for changes made to; files in ``$PSIDATADIR``, including those described below. There are three routes by which a basis set in G94 format can be introduced to |PSIfours| notice. .. rubric:: (1) Install new basis set file into |PSIfour| basis library. Copy the basis set definitions for all ele",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:8153,simpl,simply,8153,doc/sphinxman/source/basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst,1,['simpl'],['simply']
Usability," one electron integral code used translational invariance relations to; minimze the number of integrals to be computed, leaving the caller with some; bookkeeping to do to compute all terms. For example, consider an overlap; integral: its value depends only on the relative separation of the two centers; and not their absolute positions in space. Therefore, the derivative with; respect to center A is the negative of the same derivative with respect to; center B, so one is trivially gleaned from the other. Extending this to second; derivatives, the same principle leads to the fact that double derivatives with; respect to center A are equal to double derivatives with respect to center B,; which are also equal to the negative of the mixed double derivatives with; respect to both center A and B. The old code only provided the double; derivative with respect to center A, leaving the caller to determine the other; values. The Libint2 engine instead provides all integrals, so the caller; simply needs to loop over all of the buffers provided in the appropriate order. Changes to External Potential Engines; ..................................... Benchmarking showed that early versions of the old code spent a non-negligible; amount of time performing the Cartesian to spherical harmonic transformation of; the integrals, which is needed for most modern basis sets. To improve; performance, we instead backtransformed the density to the Cartesian; representation (denoted ""CartAO"") and computed / contracted all integrals in; this Cartesian basis, eliminating the need to transform to spherical harmonics; as the integrals are computed. This bottleneck no longer exists, so these; extra transformation steps have been removed as part of the switch to Libint2,; and the affected codes (PCM and CPPE interfaces) now compute the potential and; field integrals in the representation required by the basis set. Also, note that the way external point charges are specified has changed.; Previously, a ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:16277,simpl,simply,16277,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simply']
Usability," one excitation is placed on each monomer), contributing an attraction of; -1.21 |kcalpermol|. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon; ==========================================================================. Finally, let's consider an example that shows how the Python driver; in |PSIfour| simplifies some routine tasks. |PSIfour| can interpret; valid Python code in addition to the computational chemistry directives; we've seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with |PSIfour|; in the :source:`samples` directory. Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; ``Rvals=[2.5, 3.0, 4.0]``. Let's also suppose y",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:16995,simpl,simplifies,16995,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simplifies']
Usability," partitioning the molecule into fragments; |w--w| cuts across only simple sigma bonds are encouraged. .. caution:: November 2022, previous to QCEngine v0.26.0 and Psi4; v1.7.0, there was a scaling inconsistency in the pairwise analysis; such that :psivar:`2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS`; was doubled when generated from dftd3 compared to the output from other; programs (s-dftd3 and dftd4). This shows up in the QCVariable and in the; ``Empirical_Disp.dat`` file written during ``energy(""fisapt0-d3"")`` (all; -D3 variants). Fortunately, the ``fsapt.py`` script compensated; for dftd3 (by far the most used program for this task). Users of the; pairwise analysis should take care to use the new QCEngine; AND ``fsapt.py`` script distributed with NEW Psi4. ``fisapt0-d4`` run; with previous Psi4/fsapt.py will be wrong. ``fisapt0-d3`` run with previous; Psi4/fsapt.py but new QCEngine will be wrong. If you've got legacy; calculations, it is extremely easy to check or reanalyze them to; salvage them, so please contact the developers with the circumstances; for guidance. Order-1 Visualization with PyMol; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The ``fsapt.py`` script above also generates a number of order-1 ``.pdb`` files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template ``.pymol`` scripts to help with this process. These can be; obtained by running::. >>> copy_pymol.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``Elst.pymol``), which in turn load in the molecule and order-1 analysis; (contained in the ``.pdb`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to pe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:10006,guid,guidance,10006,doc/sphinxman/source/fisapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst,1,['guid'],['guidance']
Usability," psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Instead, switch ``source/git_tag`` from ``master`` to tag (e.g., ``v1.3rc1``) in:; ..; .. * psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` from Linux; .. * Run ``kitandkapoodle.py`` and allow stack to upload to anaconda.org to ``psi4/label/dev``. Poodle emits with ``--label dev`` so will go to the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``psi4-rt``/``psi4-dev`` is using; .. - _add_ (not replace) the ``main`` label.; ..; .. * This makes a ``conda install psi4 -c psi4`` get everything psi4 needs. For the moment ``conda install psi4 -c psi4/label/dev`` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. May help to check versions and build versions against ltrtver in ``conda_build_config.yaml``.; .. * This step is manual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:20715,clear,clear,20715,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['clear'],['clear']
Usability," scaling the uncoupled term for; :math:`E_{exch-ind,resp}^{(30)}`. S^inf Keywords; ~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__do_ind_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_disp_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_ind30_exch_sinf.rst. .. _`sec:saptd`:. SAPT0-D; ~~~~~~~. In SAPT0, the computation of :math:`E_{disp}^{(20)} + E_{exch-disp}^{(20)}` represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; ; :ref:`Grimme's dispersion corrections are discussed here. <sec:dftd3>`. The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D ; variants using default parameters optimized for Hartee--Fock interaction energies, ; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]_. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters. ; A simple water dimer computation using SAPT0-D may look like::. 	molecule water_dimer {; 	 0 1; 	 O -1.551007 -0.114520 0.000000; 	 H -1.934259 0.762503 0.000000; 	 H -0.599677 0.040712 0.000000; 	 --; 	 0 1; 	 O 1.350625 0.111469 0.000000; 	 H 1.680398 -0.373741 -0.758561; 	 H 1.680398 -0.373741 0.758561; 	; 	 units angstrom; 	 no_reorient; 	 symmetry c1; 	}; 	; 	set basis jun-cc-pvdz. 	energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; ``energy(""fsapt0-d3mbj"")``. See :ref:`FSAPT <sec:fisapt>` documentation for more details on using FSAPT; for functional group analyses.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:46682,simpl,simple,46682,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,2,['simpl'],"['simple', 'simply']"
Usability," terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mp2`:. Second-order |MollerPlesset| Theory: MP2 and MP2-R12 methods; ============================================================. Second-order |MollerPlesset| theory is one of the most basic; wavefunction approaches which includes electron correlation; directly.; Due to its simplicity, the MP2 method is often the best; level one can afford for a larger molecular system.; At the other end of the spectrum, the MP2-R12 method; of Kutzelnigg, Klopper, and co-workers is a promising; approach to computing MP2 energies in the complete; basis set limit for smaller systems. |PSIfour| is; one of the very few publicly available programs to; feature a robust implementation of the MP2-R12 method. |PSIfour| is capable of computing closed-shell; MP2 and MP2-R12/A energies using integral-direct techniques and a; multithreaded algorithm, which lends itself perfectly for execution ; on symmetric multiprocessor (SMP) machines. |PSIfour| is also; capable of computing RHF, UHF, and ROHF (using semicanonical orbitals); MP2 energies and one-particle density matrices, and RHF MP2 analytic ; gradients. Occupied and virtual orbitals can be frozen during the ; energy calculation, but not for the calculation of the ; one-particle density matrix or the analytic gradient. .. table:: Summary of MP2 and MP2-R12 capabilities in ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst:1346,simpl,simplicity,1346,doc/sphinxman/source/attic/mp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst,1,['simpl'],['simplicity']
Usability," the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse :math:`d` functions on heavy atoms) [Papajak:2011:10]_. So,; we'll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]_ ; [Hohenstein:2010:014101]_. Since we're using density fitting for the SAPT,; we might as well also use it for the Hartree--Fock computations that are; performed as part of the SAPT. We can specify that with ; ``scf_type DF``. Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, |PSIfour| is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that |PSIfour| correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree--Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure. To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with ``freeze_core True``. The SAPT; procedure is invoked with the simple call, ``energy('sapt0')``. This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887]_, and this is discussed in more detail; in the SAPT section later in this manual. For now, we'll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:14313,simpl,simple,14313,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simple']
Usability," theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also sup",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:3033,simpl,simply,3033,doc/sphinxman/source/mrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst,1,['simpl'],['simply']
Usability," two neutral, spin-singlet fragments. It is; possible to further specify that the overall complex is neutral and spin-singlet; by inserting another :samp:`{charge} {multiplicity}` line, separated from the first; molecule block by a `--` line. If any information is missing, |PSIfour| will set the; unprovided charges and multiplicities to be consistent with those that are given.; For example, the overall charge must be simply the sum of all fragment charges.; |PSIfour| further assumes that any unpaired electrons are coupled to yield the highest; possible :math:`M_s` value. Psi will also favor neutral, spin-singlet fragments.; For anything complicated, we strongly suggest explicitly providing the charge; and multiplicity of each fragment as well as the total molecular charge and multiplicity. For details and examples, see https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/chgmult.py#L105-L136 . Having defined a molecule containing fragments like ``eneyne`` above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (``extract_subsets(1)`` pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (``extract_subsets(1,2)`` pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. ``extract_subsets(2,[1,3])``::. mA = eneyne.extract_subsets(1); energy('scf'); ; clean(); ; mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; ``--`` marker, the :py:func:`~psi4.driver.wrapper_autofrag.auto_fragments` function can be applied, as shown in; :srcsample:`pywrap-basis`, to return as active molecule the previous; active molecule, only fragmented. Advanced Python; ===============. A named molecule in an input file is a full-fledged ins",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:20549,simpl,simple,20549,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['simpl'],['simple']
Usability,"# How to contribute. We welcome contributions from external contributors, and this document; describes how to merge code changes into Psi4. As of February 2016, the; procedure for contributing code is exactly the same for the core development; team and for external contributors. **Working on your first Pull Request?** You can learn how from; this *free* series [How to Contribute to an Open Source Project on; GitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github). ## Getting Started. * Make sure you have a [GitHub account](https://github.com/signup/free).; * [Fork](https://help.github.com/articles/fork-a-repo/) the; [psi4/psi4](https://github.com/psi4/psi4) repository on GitHub.; * On your local machine,; [clone](https://help.github.com/articles/cloning-a-repository/) your fork of; the Psi4 repository.; * More detailed instructions for interacting with your Psi4 fork can be found; [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-forkpsi4public).; and [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the P",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:328,learn,learn,328,.github/CONTRIBUTING.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md,1,['learn'],['learn']
Usability,"# Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6016,guid,guide,6016,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['guid'],['guide']
Usability,"(fragments = (1,), basis = (1, 2): -128.70932405488935); ...; N-Body: Computing complex (1/1) with fragments (1, 2) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (1, 2), basis = (1, 2): -257.41867403127321); ...; ==> N-Body: Counterpoise Corrected (CP) energies <==. n-Body Total Energy [Eh] I.E. [kcal/mol] Delta [kcal/mol]; 1 -257.418648109779 0.000000000000 0.000000000000; 2 -257.418674031273 -0.016265984132 -0.016265984132. And that's it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (Hartree) to |kcalpermol| by multiplying by the; automatically-defined conversion factor ``psi_hartree2kcalmol``. |PSIfour|; provides several built-in physical constants and conversion factors, as; described in section :ref:`sec:physicalConstants`.; Notice the loop over :math:`R` to create; the table looks just like the loop over ``R`` to run the different; computations, and the CP-corrected energies ``ecp[R]`` are accessed the same; way they were stored. The ``print`` line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section). Our table is printed at the very end of the output file, and looks like; this ::. CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies; ; R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264; ; The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in |PSIfour|. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:23541,simpl,simple,23541,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,") + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; :math:`\rho_\alpha` or :math:`\rho_\beta`\ ,. .. math:: \rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1). The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; :math:`\gamma_{\alpha\alpha}`, :math:`\gamma_{\alpha\beta}` or; :math:`\gamma_{\beta\beta}` to build an inhomogeneity; parameter. .. math:: \gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\alpha} (\vec r_1). .. math:: \gamma_{\alpha\beta} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\beta} (\vec r_1). where,. .. math:: \nabla \rho_{\sigma} (\vec r_1) = 2 D_{\mu\nu}^{\sigma} \phi_{\mu}; (\vec r_1) \nabla \phi_{\nu} (\vec r_1). GGA functionals are essentially the same cost as LSDA functionals and are often; considerably more accurate. Another local variant which has gained some popularity (though perhaps not as; much as GGA functi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:4802,simpl,simplest,4802,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simplest']
Usability,"),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); ; \omega \right) \ \mathrm{d} ^3 r_1. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; as",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:12401,simpl,simply,12401,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simply']
Usability,", which; are ordered Px,Py,Pz,Qx,Qy,Qz,Rx,Ry,Rz,Sx,Sy,Sz, where the Px refers to the x; derivative with respect to the basis functions in shell P. Note that all; integral derivatives are provided by the new integral code, unlike the previous; version where only 9 of 12 were provided and the user was responsible for using; translation invariance relationships to fill in the rest. The addresses for; each chunk are updated in the vector after each call to compute integrals, so; the user should keep a const reference to that object, and query that for the; address of interest. Density Screening; ................. The old code looked only at the integral to determine whether terms can be; avoided *a priori*. However, if the integral is to be contracted with a; density or a density-like quantity, the screening can be performed on the; product, which yields more sparsity. To enable this, simply call the integral; object's ``update_density`` member, passing it a SharedMatrix holding the; current density (remember that it changes during each iteration of the SCF) and; the product will be considered during screening. If only coulomb-like terms; are to be computed, the ``needs_exchange`` argument to the integral object; constructor should be set to false, otherwise it should be true to correcly; account for products of the density and integrals that contribute to; exchange-like terms. Shell blocking; .............. Each underlying integral engine knows whether it will use blocks, and will set up; the metadata automatically. Instead of looping over individual shells, the; user should loop over blocks supplied by the integral object; these blocks will; be just a single shell quartet combination for the case where blocking is not; used. It is simple to loop over pairs within each block using C++11 syntax, as; demonstrated in the code snippet above. Only shell pairs with significant; overlap are included in the shell block information, making this an efficient; way to loop over non",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:7629,simpl,simply,7629,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simply']
Usability,"-----------+-------+------------------------------------+; | ADC(3) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+--------------------------------------------+; | CVS-ADC(1) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2)-x | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(3) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+. The leftmost column of table :ref:`table:adcsummary` provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function :py:func:`~psi4.driver.energy`.; For example, ``energy('adc(2)-x')`` will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function :py:func:`~psi4.driver.properties`; with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like ``properties('adc(2)', properties=[""oscillator_strength""])``. Running ADC calculations; ------------------------; .. sectionauthor:: Michael F. Herbst. Running an ADC calculation with |PSIfour| requires; the call to :py:func:`~psi4.driver.properties` as discussed above; as well as one or more mandatory keyword arguments. The most important keyword argument is |adc__roots_per_irrep|,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only sup",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:6428,simpl,simply,6428,doc/sphinxman/source/adc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst,1,['simpl'],['simply']
Usability,"----------------------+----------------------------------------------+; | cepa(3) | :math:`-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})` | :math:`-\epsilon_{ii}+2\sum_k \epsilon_{ik}` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | acpf | :math:`\frac{2}{N} E_c` | :math:`\frac{2}{N} E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | aqcc | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+. .. comment | dci | :math:`E_c` | NA |; .. comment +-------------------------+------------------------------------------------------------+----------------------------------------------+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron r",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:12796,simpl,simply,12796,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['simpl'],['simply']
Usability,"-c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the ; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will hav",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:3289,simpl,simply,3289,doc/sphinxman/source/gdma.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst,1,['simpl'],['simply']
Usability,". # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculati",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:1871,user-friendly,user-friendly,1871,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['user-friendly'],['user-friendly']
Usability,". math:: E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}} ; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}. .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:12291,simpl,simple-,12291,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['simpl'],['simple-']
Usability,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:customizing`:. =======================================; Customization: Adding Simple Extensions; =======================================. |PSIfour| has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. * :ref:`sec:basisUserDefined`. .. toctree::; :maxdepth: 2. quickaddalias; quickadddatabase. * https://github.com/dgasmith/psi4numpy. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/customizing.rst:1107,Simpl,Simple,1107,doc/sphinxman/source/customizing.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/customizing.rst,1,['Simpl'],['Simple']
Usability,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_welcome`:. ===========================; Welcome to New Programmers; ===========================. The |PSIfour| community; -----------------------. |PSIfour| is an open-source project and welcomes contributions from; developers around the world. etc. We have annual meetings, we welcome; feedback, slack channel, etc. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_welcome.rst:1362,feedback,feedback,1362,doc/sphinxman/source/prog_welcome.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_welcome.rst,1,['feedback'],['feedback']
Usability,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:style_python`:. Python Style; ============. .. _`faq:ignoringadvice`:. How to Ignore the Bots; ----------------------. Formatting and analysis bots are great because it takes more effort; to defy them than to accept their criticism. Nevertheless, for code; clarity, they can be honestly wrong, so we need a way to specifically; clear their findings. * Py Formatting (yapf) ``# yapf: disable`` (single line or block) ``# yapf: enable`` (resume). * C++ Formatting (clang-format) ``// clang-format off`` (single line or block) ``// clang-format on`` (resume). * Py Dynamic Analysis (coverage.py) ``# pragma: no cover``. * C++ Dynamic Analysis (gcov) https://stackoverflow.com/a/30078276 untested. * Py Static Analysis (lgtm) ``# lgtm[py/not-named-self]`` (click on the ""?"" to get the ""Query ID""). * C++ Static Analysis (lgtm) ``// lgtm[cpp/wrong-type-format-argument]`` (click on the ""?"" to get the ""Query ID""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_py.rst:1398,clear,clear,1398,doc/sphinxman/source/prog_style_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_py.rst,3,"['clear', 'resume']","['clear', 'resume']"
Usability,".; However, spin contamination is usually less of a problem with UKS than with; UHF, as the spin contamination of the noninteracting quasiparticles (the; :math:`S^2` metric printed in the output) is usually a severe overestimation; of the spin contamination of the true electrons. These are set in the |scf__reference| option. Note that there are not equivalents to ROHF or CUHF, *e.g.*, no ROKS or CUKS. This; is because ROHF is implicitly assumed to be followed by a correlated method; which can break the positive definiteness of the spin polarization. KS-DFT with; the true functional is expected to be the final step, thus restricting the; solution to positive definite spin polarization is not physical. See the; section in [Szabo:1982]_ on methyl radical for an example. Functional Selection; ~~~~~~~~~~~~~~~~~~~~. |PSIfour| features an extensive list of LSDA, GGA, Meta, Hybrid, LRC, and -D; functionals. These can be specified by a variety of means. Perhaps the simplest; is to use the functional name as the energy procedure call::. energy('b3lyp'). Note that if you are running an unrestricted computation, you should set the; |scf__reference| option before the call to ``energy``::. set reference uks; energy('b3lyp'). The functional may also be manually specified by calling ``energy`` (or any driver function); with a ``dft_functional`` argument::. energy('scf', dft_functional = 'b3lyp'). Another alternative is providing a specially crafted `dict`-ionary to the ``dft_functional``; argument::. custom_functional = { ""name"": ""my_unique_name"", ... }; energy('scf', dft_functional = custom_functional). For further details about this so called `dict_func` syntax, see; :ref:`sec:dftdictbuilder`. For hybrid functionals, the fraction of exact exchange is controlled by the; |scf__dft_alpha| option. For the LRC functionals, the fraction of long-range; Hartree--Fock and short-range DFA is controlled by the |scf__dft_omega| option.; Changing these will override the default behavior of th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:16675,simpl,simplest,16675,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simplest']
Usability,".py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; ..",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:2458,guid,guide,2458,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['guid'],['guide']
Usability,"/dftd3 | classic |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::dftd3-python`` | ``import dftd3`` | nyi | preferred | ``engine=""s-dftd3""`` | https://github.com/dftd3/simple-dftd3 | s-dftd3 |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | (dep) ``conda-forge::simple-dftd3`` | ``bin/simple-dftd3`` | | | | https://github.com/dftd3/simple-dftd3 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | D4 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd4`` | ``bin/dftd4``, ``import dftd4`` | preferred | works | ``engine=""dftd4""`` | https://github.com/dftd4/dftd4 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::dftd4-python`` | ``import dftd4`` | nyi | preferred | ``engine=""dftd4""`` | https://github.com/dftd4/dftd4 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | (dep) ``conda-forge::dftd4`` | ``bin/dftd4`` | | | | https://github.com/dftd4/dftd4 | |; +--------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:3366,simpl,simple-,3366,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['simpl'],['simple-']
Usability,"/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's docum",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:4730,guid,guide,4730,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['guid'],['guide']
Usability,"1 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The ``fsapt.dat`` file presents the ""links-by-charge""; assignment at the top and the ""links by 50-50"" assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions. Users should check the files ``fragA.dat`` and ``fragB.dat`` to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the ""Orbital Check"" section in these files |w--w| a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also *strongly discourage* the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; |w--w| cuts across only simple sigma bonds are encouraged. .. caution:: November 2022, previous to QCEngine v0.26.0 and Psi4; v1.7.0, there was a scaling inconsistency in the pairwise analysis; such that :psivar:`2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS`; was doubled when generated from dftd3 compared to the output from other; programs (s-dftd3 and dftd4). This shows up in the QCVariable and in the; ``Empirical_Disp.dat`` file written during ``energy(""fisapt0-d3"")`` (all; -D3 variants). Fortunately, the ``fsapt.py`` script compensated; for dftd3 (by far the most used program for this task). Users of the; pairwise analysis should take care to use the new QCEngine; AND ``fsapt.py`` script distributed with NEW Psi4. ``fisapt0-d4`` run; with previous Psi4/fsapt.py will be wrong. ``fisapt0-d3`` run with previous; Psi4/fsapt.py but new QCEngine will be wrong. If you've got legacy; calculations, it is extremely easy to check or reanalyze them to; s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:8995,simpl,simple,8995,doc/sphinxman/source/fisapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst,1,['simpl'],['simple']
Usability,"2's convention. New Operators Available; ....................... Libint2 provides a range of integrals that were previously not available in; |PSIfour|, such as the Erfc attenuated nuclear potential integrals needed for; Ewald methods. If new integrals are added to Libint2 but are not yet; interfaced to |PSIfour|, please open an issue on the |PSIfour| GitHub page to; alert the developers, who will be able to add the appropriate code.; Available integrals classes and parameters currently documented at ; `Libint2 C++11 Interface Wiki <https://github.com/evaleev/libint/wiki/using-modern-CPlusPlus-API#create-an-integral-engine>`_. Shell Pairs; ........... To ensure consistency between one- and two-electron terms when screening, and; for efficiency reasons, shell pair lists should be used to iterate over pairs; of Gaussian shells. These lists contain integer pair numbers, corresponding to; the pairs of shells that have sufficient overlap to survive the screening; process. Iterating over these lists is simple:. .. code-block:: cpp. const auto& shell_pairs = Vint->shellpairs();; size_t n_pairs = shell_pairs.size();; for (size_t p = 0; p < n_pairs; ++p) {; auto P = shell_pairs[p].first;; auto Q = shell_pairs[p].second;; // do something with shells P and Q; }. Note that list considers all P,Q pairs if the two basis sets differ, but only; P>=Q if the basis sets are the same; the caller should account for this; restricted summation in the latter case. One Electron Integral Algorithm Overview; ........................................ The following table summarizes which implementation is used; for each type of one electron integral in |PSIfour|. .. _`table:oei_impl_summary`:. .. table:: Algorithms used for One Electron Integrals. +----------------------------+----------------------------+-----------------+--------------------------------------------------------------------+; | Integral | Class | Implementation | Comment |; +============================+==========================",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:18675,simpl,simple,18675,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simple']
Usability,"2110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:casscf`:. Complete-Active-Space Self-Consistent-Field (CASSCF); ====================================================. Multi-configurational self-consistent-field (MCSCF) ; is a general method for obtaining qualitatively correct; wavefunctions for highly strained molecules, diradicals, or bond; breaking reactions. The most commonly used MCSCF procedure; is the complete-active-space self-consistent-field (CASSCF); approach [Roos:1980]_, which includes all possible determinants; (with the proper symmetry) that can be formed by distributing ; a set of active electrons among a set of active orbitals.; The detcasman module performs; CASSCF optimization of molecular orbitals via a two-step; procedure in which the CI wavefunction is computed using; detci, and the orbital rotation step is computed using; detcas. The detcas program is fairly simple; and uses an approximate orbital Hessian [Chaban:1997:88]_; and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_.; We have also implemented a prototype version of the RASSCF method; [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF which ; is typically less complete (and less expensive) than CASSCF.; However, orbital convergence for RASSCF can be difficult in our; current implementation. Inactive orbitals in the MCSCF may be specified by the ; |detci__restricted_docc| and |detci__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively,; in the MCSCF wavefunction. However, the form of these orbitals will; be optimized in the MCSCF procedure. It is also possible to ; literally freeze inactive orbitals in their original (SCF) form; using the |globals__frozen_docc| and |globals__frozen_uocc| keywords.; This is not normally what one wishes to do in an MCSCF computation; (*e.g.*, it complicates the computation of gradients),; but it can make the computations ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:1914,simpl,simple,1914,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['simpl'],['simple']
Usability,"3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13046,simpl,simple,13046,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['simpl'],['simple']
Usability,"32814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a |PSIfour| input file and surround it with the; command ``basis {...}``, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use ``assign`` statements to actually request the basis set. This; ``basis {...}`` section replaces the usual ``set basis XXX`` line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax ``basis mybas {...}``,; and then the basis can be recalled later as ``set basis mybas``.; To use a custom basis set as described in this section, it must be ; defined prior to its use in a function that performs a computation. ::. basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case :srcsample:`mints2` provides a complete example of ; user-specified basis sets. .. _`sec:basissets-ecps`:. Inputting effective core potentials (ECPs); ==========================================. For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; :ref:`sec:scf-ecps` for more information about using ECPs and the; :source:`Def2-TZVP <psi4/share/psi4/basis/def2-tzvp.gbs>` basis set definition; for an example of their input syntax.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:12704,simpl,simply,12704,doc/sphinxman/source/basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst,1,['simpl'],['simply']
Usability,"; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. .. _`faq:cray`:. How to configure a Psi4 build on Cray; -------------------------------------. Cray systems strongly prefer to build static libraries, but |PSIfour|; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building |PSIfour| on; Cray requires setting environment variables before running `cmake`. ::. CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... .. envvar:: CRAYPE_LINK_TYPE. Set to allow |PSIfour| to build as shared library on Cray supercomputers. .. envvar:: CRAY_ADD_RPATH. Set to true to allow |PSIfour| to build on Cray supercomputers. .. _`cmake:fortran`:. How to configure Fortran compilers for building Psi4; ----------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a Fortran compiler in unneeded for core; features but may be required for add-ons. * Downstream Dependencies. * |PSIfour| (\ |dr| optional) Fortran Compiler; * erd, dkh, gdma, PCMSolver |dr| Fortran Compiler. **CMake Variables**. * :makevar:`CMAKE_Fortran_COMPILER` |w---w| CMake variable to specify name or full path to Fortran compiler.; * :makevar:`CMAKE_Fortran_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for Fortran source. **Examples**. A.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:42883,guid,guides,42883,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['guid'],['guides']
Usability,"; to minimize the energy of the CASCI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying |mcscf__reference| to be ``twocon``).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC's MCSCF module regardless of what; orbital type is chosen, ``twocon``, ``rhf``, or ``rohf``. An example of the; MCSCF input is given below. PSIMRCC is most commonly used for low-spin cases (singlets or open-shell; singlets). It is capable of performing computations on higher spin states; (*e.g.*, triplets), but in general, not all the required matrix elements have; been coded for high-spin cases, meaning that results will correspond to an; approximate Mk-MRCC computation for high-spin cases. A Simple Example; ________________ . The |psimrcc__corr_wfn| allows you to select one of three methods; Mk-MRPT2 [``PT2``], Mk-MRCCSD [``CCSD``], or Mk-MRCCSD(T) [``CCSD_T``].; The |psimrcc__corr_multp| option allows you to select the Slater; determinants with a particular :math:`M_s` value. The |psimrcc__wfn_sym|; keyword is neccesary if you do not want to compute the energy of the; totally-symmetric state. The |psimrcc__follow_root| option may be used; to follow different roots of the effective Hamiltonian. A value of 1; instructs PSIMRCC to follow the solution with the lowest energy given; a certain set of determinants. ::. molecule o2 {; 0 3; O; O 1 2.265122720724; units au; }; set {; basis cc-pvtz; }; set mcscf {; reference rohf; docc [3,0,0,0,0,2,1,1] # Doubly occupied MOs; socc [0,0,1,1,0,0,0,0] # Singly occupied MOs; }; set psimrcc {; corr_wfn ccsd # Do Mk-MRCCSD ; frozen_docc [1,0,0,0,0,1,0,0] # Frozen MOs; restricted_docc [2,0,0,0,0,1,1,1] # Doubly occupied MOs; active [0,0,1,1,0,0,0,0] # Acti",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst:5454,Simpl,Simple,5454,doc/sphinxman/source/psimrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst,1,['Simpl'],['Simple']
Usability,"====+===========================+==================================================================================+==========+; | D3 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd3`` | ``bin/dftd3`` | preferred | works | ``engine=""dftd3""`` | https://github.com/loriab/dftd3 | classic |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::dftd3-python`` | ``import dftd3`` | nyi | preferred | ``engine=""s-dftd3""`` | https://github.com/dftd3/simple-dftd3 | s-dftd3 |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | (dep) ``conda-forge::simple-dftd3`` | ``bin/simple-dftd3`` | | | | https://github.com/dftd3/simple-dftd3 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | D4 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd4`` | ``bin/dftd4``, ``import dftd4`` | preferred | works | ``engine=""dftd4""`` | https://github.com/dftd4/dftd4 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+-------------------------------------------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:3022,simpl,simple-,3022,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,3,['simpl'],['simple-']
Usability,"======================================; Ways to Add Code: Psi4NumPy, Plugins, Full Integration ; ======================================================. Easier and more rapid development; ---------------------------------. Fully-featured electronic structure programs are large and complex. However,; the |PSIfour| ecosystem provides a path for easier and more rapid development; of new features. The earliest versions of |PSIfour| were written by merging; individual executables that performed specific tasks into a unified C++; executable. By linking this C++ executable against the Python interpreter, the; individual modules could be called in any sequence, enabling a very diverse; range of tasks to be accomplished within a given input. Although Python-driven; model allowed for great flexibility from a user's perspective, programming was; still relatively difficult because it required modifications to be made in C++; code. Since those early days, the code has undergone some important structural; changes that have greatly simplified the development workflow. These changes; were motivated by the realization that only a few bottlenecks exist in a typical; calculation; by focusing on optimized C++ implementations of these bottlenecks; and making these C++ functions available in Python, most of the code to implement; the overall calculation can be written in simpler Python code. Python is far; better suited to management tasks such as directory navigation and retrieval,; making it a natural choice for overall calculation layout than C++. With the; emergence of `NumPy <https://numpy.org/>`_ as a standard tool for executing almost any; mathematical technique efficiently in Python, the transitioning of code from; C++ to Python has facilitated a much simpler work flow for prototyping and; developing methods: this is detailed in the next section. .. _`sec:prog_psi4numpy`:. Rapid initial development using Psi4NumPy; -----------------------------------------. The `Psi4NumPy <https:/",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:2098,simpl,simplified,2098,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['simpl'],['simplified']
Usability,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst:1846,simpl,simply,1846,doc/sphinxman/source/fchk.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst,1,['simpl'],['simply']
Usability,"DATA_FILE``, with a default of ""data.dat"" and any possible value.; - A string called ``AO_BASIS`` with a default of ""NONE"", and possible values of ""NONE"", ""DISK"", or ""DIRECT"". The purpose of the ""if"" statement in the above read_options function is; the following. Suppose in an input file the user sets an option through; the construct ``set mymodule print 1`` or through a ``set mymodule {...}``; block. The first thing to happen is a call to read_options with name set; to ""MYMODULE"". (Note that all user input is converted to upper case unless a; ``add_str_i`` which should be used sparingly for files.) This; call to read_options should tell the Options object only about those; options expected by the module called ""mymodule""; this prevents overlap of; options between different modules. Notice also that there's a special comment immediately before the; declaration of each keyword. You must provide these comments for any; options you add as they will be automatically inserted into the user; manual Providing a clear description will also help you to remember what; the keywords do and how they're used. The comments must live between the; special comment delimiters. For options that most users shouldn't need,; add an expert flag to the comment. This will place these options in a; separate section of the user manual. .. code-block:: cpp. /*- comment -*/; options.add_ ...; /*- comment !expert -*/; options.add_ ... As is apparent from the examples above, comments can span multiple lines; (see ``PRINT``), can refer to other options (through hyperlinks; see; ``SAVE_INFO``), can refer to sections of the manual (through hyperlinks;; see ``DOCC``), and can contain LaTeX notation (see ``AO_BASIS``). (To get; the LaTeX subscript command, use ""@@"" instead of ""_"".). See :ref:`faq:readoptions`; for guidelines on naming options. What is *has_changed* ?; -----------------------. There are times when we need to know whether an option was provided by the; user or if the defaults are being us",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:4480,clear,clear,4480,doc/sphinxman/source/optionshandling.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst,1,['clear'],['clear']
Usability,"GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, an",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1830,guid,guide,1830,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['guid'],['guide']
Usability,"General Notes About the Code. 1. While the primary purpose of the code is transformations between the AO and MO bases, ; some codes (mrcc, detci, and especially cc) request that tasks involving frozen core; orbitals be either done by libtrans or converted into effective quantities free of frozen; core orbitals - that way, they don't need to worry about frozen core orbitals at all, and; the calculation retains all the simplicity of one where core electrons simply don't exist.; In particular, libtrans:integraltransform_sort_so_tei.cc has the following responsibilities:; * Computing all energy contributions involving frozen core orbitals only and putting that; result into frozen_core_energy_. Used to sanity-check the HF energy.; * Constructing the ""frozen-core operator"", which is the core hamiltonian for non-frozen orbitals; plus the Couloumb and exchange contributions terms arising from the electric field of; the frozen core orbitals. Think of it as halfway between the core Hamiltonian and the Fock operator.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libtrans/README.txt:421,simpl,simplicity,421,psi4/src/psi4/libtrans/README.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libtrans/README.txt,2,['simpl'],"['simplicity', 'simply']"
Usability,"HOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1618,guid,guides,1618,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['guid'],['guides']
Usability,"H}^{(0)}_\text{RE} + A\widehat{H}^{(0)}_\text{MP}. Technically, the second order of RE corresponds to LCCD for RHF and UHF references. REMP2 and its orbital-optimized variant OREMP2; are thus straightforward to implement in a (O)LCCD program by appropriate scaling of residual vector contributions and density matrices. * **OMP2** [Bozkaya:2011:omp2]_ and [Bozkaya:2013:omp2grad]_. * **OMP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, and [Bozkaya:2013:omp3grad]_. * **OMP2.5** [Bozkaya:2011:omp3]_. * **OLCCD** [Bozkaya:2013:ocepa]_. * **LCCD** [Bozkaya:2013:ocepa]_. * **OREMP2** [Behnle:2021:OREMP]_, and [Behnle:2022:OREMP]_. Convergence Problems; ~~~~~~~~~~~~~~~~~~~~. For problematic open-shell systems, we recommend to use the ROHF or DFT orbitals as an initial guess for orbital-optimized methods. Both ROHF and ; DFT orbitals may provide better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:11235,simpl,simply,11235,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,1,['simpl'],['simply']
Usability,"PI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4014,simpl,simple,4014,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['simpl'],['simple']
Usability,"PSI program is necessary for changes made to; files in ``$PSIDATADIR``, including those described below. A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. * Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won't allow them. If you're determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an exa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickadddatabase.rst:2177,simpl,simply,2177,doc/sphinxman/source/quickadddatabase.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickadddatabase.rst,1,['simpl'],['simply']
Usability,"SE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: harmonic vibrational analysis, vibrational analysis, thermochemical analysis. .. _`sec:thermo`:. Vibrational and Thermochemical Analysis; =======================================. .. codeauthor:: Rollin A. King and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:thermo>`, :ref:`PSI Variables <apdx:thermo_psivar>`, :source:`THERMO <psi4/driver/qcdb/vib.py>`. .. caution:: It is important to know that |PSIfour|, like any other; quantum chemistry program, does *not* compute the usual enthalpies,; entropies, or Gibbs free energies *of formation* provided by most; reference books. Instead, quantum chemistry programs compute ""absolute""; thermodynamic properties relative to infinitely separated nuclei and; electrons, not ""formation"" values relative to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these ""absolute"" enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the ""thermal energies"" reported in kcal/mol are the ; finite-temperature *corrections* to the electronic total energy, and ; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords; ^^^^^^^^. .. include:: autodir_options_c/thermo__t.rst; .. include:: autodir_options_c/thermo__p.rst; .. include:: autodir_options_c/thermo__rotational_symmetry_number.rst. .. _`sec:thermoExamples`:. Examples; ^^^^^^^^. A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function :py:func:`psi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst:2113,usab,usable,2113,doc/sphinxman/source/thermo.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst,1,['usab'],['usable']
Usability,"U Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1443,guid,guides,1443,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['guid'],['guides']
Usability,"\end{verbatim}; This binds the keyword ``scf'' to the newly created wrapper function, allowing; the user to type ``scf()'' in their Python input file to fire up the SCF; module. Similarly, the user might want to be able to call {\tt Molecule}'s; member functions directly from Python. This can also be done easily:. \begin{verbatim}; class_<Molecule, shared_ptr<Molecule> >(""Molecule"").; def(""print_to_output"", &Molecule::print).; def(""nuclear_repulsion_energy"", &Molecule::nuclear_repulsion_energy);; \end{verbatim}. This first defines the keyword {\tt Molecule} to refer to the C++ {\tt; Molecule}; the {\tt shared\_ptr<Molecule>} keyword tells Python to store it as; a shared pointer, which ensures that the object will not be deleted until both; C++ and Python have no more references to it. The member functions to be bound; are then specified by a chained sequence of {\tt def} calls (note the periods),; terminated by a semicolon. Then, if the user had defined a molecule called; ``water'', they could print its geometry simply with the command {\tt; water.print\_to\_output()}. Direct interaction with the Psi module from Python requires function calls that; look like {\tt psi4.call\_some\_function()}. This is not very friendly to; your average user, so a preprocessor checks for known Psi syntax and turns it; into valid Python, before handing it off for excecution. This preprocessor is; purely Python, and lives in {\tt \$PSI4/lib/python/input.py}. For example, the; following text \begin{verbatim}; set scf {; SCF_TYPE DIRECT; BASIS cc-pVDZ; RI_BASIS_SCF cc-pVDZ-HF; guess core; }; \end{verbatim}; is converted to the following text; \begin{verbatim}; psi4.set_default_options_for_module(""SCF""); psi4.set_option(""SCF_TYPE"", ""DIRECT""); psi4.set_option(""BASIS"", ""cc-pVDZ""); psi4.set_option(""RI_BASIS_SCF"", ""cc-pVDZ-HF""); psi4.set_option(""GUESS"", ""core""); \end{verbatim}; which can be handled by Python. There are a number of other utilities, which are entirely Python, located in; {\tt \$P",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progpycppconnect.rst:2230,simpl,simply,2230,doc/sphinxman/source/attic/progpycppconnect.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progpycppconnect.rst,1,['simpl'],['simply']
Usability,"_INCLUDE@samples/tu2-ch2-energy/input.dat. This sample input can be found in ; :srcsample:`tu2-ch2-energy` and as; before it can be run through the command ``psi4 input.dat output.dat``; (actually, because ``psi4`` by default looks for an input file named; ``input.dat`` and writes by default to a file called ``output.dat``, in this; case one could also just type ``psi4``). If it works, it should print; the final energy as ::. @UHF Final Energy: -38.92533462456894. Notice we added a new keyword, ``set reference uhf``, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree--Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree--Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis; ========================================================. The above examples were simple single-point energy computations; (as specified by the :py:func:`~psi4.driver.energy` function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; :py:func:`~psi4.driver.energy` with :py:func:`~psi4.driver.optimize` or :py:func:`~psi4.driver.frequency`, respectively. Here's an example of optimizing the H\ :sub:`2`\ O molecule using Hartree--Fock with; a cc-pVDZ basis set (located in; :srcsample:`tu3-h2o-opt`). .. literalinclude:: @SFNX_INCLUDE@samples/tu3-h2o-opt/input.dat. This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like ``Optimization is complete!``. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ``~``), the energy decreases",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:6643,simpl,simple,6643,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simple']
Usability,"`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. .. _`faq:psidatadir`:. Why not to set :envvar:`PSIDATADIR`; -----------------------------------. :envvar:`PSIDATADIR` is an environment variable containing the location of the; text resource parts of the |PSIfour| codebase (*e.g.*, basis sets,; databases, EFP fragments). It is for developer use only. In |PSIfour| 1.1; and beyond, the program *always* knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in |PSIfour| 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory. At runtime. .. code-block",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:33657,clear,clear,33657,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['clear'],['clear']
Usability,"able('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command :py:func:`~psi4.core.print_variables`. Note that PSI variables; are cleared at the start of each :py:func:`~psi4.driver.energy`, etc. in an input; file by :py:func:`~psi4.core.clean_variables()`.; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a :py:func:`~psi4.core.print_variables` command, the; last will include :psivar:`SCF TOTAL ENERGY` but not; :psivar:`FCI TOTAL ENERGY`.; The entire dictionary of PSI variables can be obtained through; :py:func:`~psi4.core.get_variables`. .. _`sec:returnvals`:. Return Values; =============. Most of the usual user computation functions (*i.e.*,; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, and; :py:func:`~psi4.driver.frequency`) return simply the current total energy.; Consult the descriptions of other functions in :ref:`sec:psithonFunc` for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions. ::. # E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; ``return_wfn=True`` keyword argument additionally returns; :py:class:`~psi4.core.Wavefunction`. ::. # power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency()",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:11055,simpl,simply,11055,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['simpl'],['simply']
Usability,"ails about how to write these plugins, see the; :ref:`sec:plugins` section. .. _`sec:prog_fullintegration`:. Incorporating code into |PSIfour|; ---------------------------------. For features to be incorporated fully into the |PSIfour| ecosystem, changes to; the core routines are inevitable. However, the programmer should think very; carefully about the most appropriate language for the task in hand. Let's; consider a new feature that downloads some data from an external source and; then performs some kind of expensive matrix operation on those data. Because; Python has a rich set of tools for obtaining data from external sources,; writing this tool in the Python layer is a natural choice. If we know that the; matrix will always be small enough to fit in memory, we can simply rely on the; routines present in NumPy to do the heavy lifting and the code is easy to; implement entirely in the Python layer. In the case where the matrix operation; is non-standard and requires some specialized code to handle disk-based; storage, the decision to write in Python is less clear cut. It is certainly; possible to write these out-of-core routines using Numpy primitives, but there; are a number of tools in |PSIfour| already to perform tasks like these that are; required, *e.g.*, for cluster. In this case, a good design would be to write a; simple piece of code in the C++ layer that performs the matrix operation on a; given input, using the I/O routines available in |PSIfour| and the parallelism; afforded by OpenMP, and to make that code available to the front end as; described in :ref:`sec:prog_tour-exposing`. The Python layer could then be; responsible for obtaining the input data and calling this C++ code to do the; manipulations, allowing each language layer to handle the subset of the work; that caters to their individual strengths. A number of concrete examples of this workflow exist in the code already. For; finite difference computations of energy derivatives, the logic to de",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:5974,clear,clear,5974,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['clear'],['clear']
Usability,"als. After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; |globals__print| option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. .. index::; pair: SCF; theory. .. _`sec:scftheory`:. Theory; ~~~~~~. The objective of Hartree--Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) :math:`\{\psi_i\}`,. .. math:: \psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1). Here, :math:`\{\phi_{\mu}\}` are the basis functions, which, in |PSIfour| are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix :math:`C_{\mu i}` contains the MO coefficients, which are the; constrained variational parameters in Hartree--Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. .. math:: | \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |. This form for the Hartree--Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; :math:`\mathbb{R}^6` instead of a more complicated effect in; :math:`\mathbb{R}^N`\ . Considering the electronic Hamiltonian,. .. math:: \hat H = \sum_{i} -\frac{1}{2} \nabla_i^2 + \sum_{i} \sum_{A} -; \frac{Z_A}{r_{iA}} + \sum_{i>j} \frac{1}{r_{ij}},. the Hartree--Fock energy is, by Slater's rules,. .. math:: E_{\mathrm{HF}} =; \langle \Psi_0 | \hat H | \Psi_0 \rangle; = \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:5717,simpl,simplest,5717,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['simpl'],['simplest']
Usability,"and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. C. Build with full Python specification to root directory ``${PFXC}``. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=""${PFXC}/bin/python"" \; -DPython_LIBRARY=""${PFXC}/lib/libpython3.9.so"" \; -DPython_INCLUDE_DIR=""${PFXC}/include/python3.9"". .. _`faq:runtimepython`:. What Python is Psi4 running; ---------------------------. The Python detected at build-time is embedded into the |PSIfour|; executable. That is, the top line of ``bin/psi4`` is something like; ``#!/path/to/miniconda/envs/p4deps/bin/python3.5``, and",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:52989,guid,guidance,52989,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['guid'],['guidance']
Usability,"approximation and scaling; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields to complicated formulae.; For this reason, exchange terms are often evaluated in the :math:`S^{2}`; approximation, that can be interpreted as the exchange of a single electron ; pair between monomers. The :math:`S^{2}` approximation is usually pretty good, but may ; break down for short intermolecular distance, particularly in high-order; terms. To compensate for these deviations, in 2014 Parker et al. [Parker:2014:094106]_ ; recommended to scale all :math:`S^{2}` approximated exchange terms by the ratio:. .. math:: p_{EX}(\alpha) = \left( \frac{E_{exch}^{(10)}}{E_{exch}^{(10)}(S^{2})} \right)^{\alpha}. and recommended using the ratio with exponent :math:`\alpha = 1`. To obtain SAPT energies with this scaling,; simply set the keyword ``exch_scale_alpha true``. Alternatively, another value for :math:`\alpha`; can be specified by setting |sapt__exch_scale_alpha| to a value. For example, ::. set exch_scale_alpha 1.0. will set :math:`\alpha = 1.0` and scale exchange energies with :math:`p_{EX}(1.0)`. However, as pointed out by Schaffer and Jansen [Schaffer:2013:2570]_; in the context of DFT-based SAPT, the ratios :math:`E_{exch}^{(1)}(S^{2})/E_{exch}^{(1)}`,; :math:`E_{\rm exch-ind}^{(2)}(S^2)/E_{\rm exch-ind}^{(2)}`, and ; :math:`E_{\rm exch-disp}^{(2)}(S^2)/E_{\rm exch-disp}^{(2)}` are not very similar to; each other. Hence, in 2016 universal scaling of all :math:`S^{2}` approximated terms; was turned off by default. Finally, in 2014 Parker et al. [Parker:2014:094106]_ empirically discovered that ; SAPT0 energies for van der Waals dimers with close contacts benefit from a slightly modified ; recipe that involves an empirically adjusted exponent :math:`\alpha = 3.0`. ; To distinguish it from its u",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:12231,simpl,simply,12231,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['simpl'],['simply']
Usability,"been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2322,guid,guide,2322,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['guid'],['guide']
Usability,"binding must be known to Python; this is all done in the ; {\tt \$PSI4/src/bin/psi4/python.cc} file. For example, we have an SCF module, with; the C++ signature; {\tt PsiReturnType cscf::cscf(Options \&options);}; To allow Python to use this, we first define a little wrapper function; \begin{verbatim}; double py_psi_scf(); {; if (scf::scf(Process::environment.options) == Success); return Process::environment.globals[""CURRENT ENERGY""];; else; return 0.0;; }; \end{verbatim}; This does a couple of things to automate things a) it passes the default; options object into SCF automatically, so that the user doesn't have to, and b); checks the return value, and will return the energy, which is posted to the; globals map, back to Python. Note that this is C++ code, within \PSIfour\ so; it is aware of all global objects, such as PSIO, Chkpt and Options. Now we; have this simple function call, we can tell Python about it:; \begin{verbatim}; def(""scf"", py_psi_scf);; \end{verbatim}; This binds the keyword ``scf'' to the newly created wrapper function, allowing; the user to type ``scf()'' in their Python input file to fire up the SCF; module. Similarly, the user might want to be able to call {\tt Molecule}'s; member functions directly from Python. This can also be done easily:. \begin{verbatim}; class_<Molecule, shared_ptr<Molecule> >(""Molecule"").; def(""print_to_output"", &Molecule::print).; def(""nuclear_repulsion_energy"", &Molecule::nuclear_repulsion_energy);; \end{verbatim}. This first defines the keyword {\tt Molecule} to refer to the C++ {\tt; Molecule}; the {\tt shared\_ptr<Molecule>} keyword tells Python to store it as; a shared pointer, which ensures that the object will not be deleted until both; C++ and Python have no more references to it. The member functions to be bound; are then specified by a chained sequence of {\tt def} calls (note the periods),; terminated by a semicolon. Then, if the user had defined a molecule called; ``water'', they could print its geometry simp",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progpycppconnect.rst:1107,simpl,simple,1107,doc/sphinxman/source/attic/progpycppconnect.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progpycppconnect.rst,1,['simpl'],['simple']
Usability,"brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP; ----------------. * Someone creates a file ``doc/sphinxman/source/pepXXXX.rst`` modeled; on :source:`doc/sphinxman/source/pep0000model.rst` and adds; it to ``STATICDOC`` in :source:`doc/sphinxman/CMakeLists.txt`. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice. * Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down. * Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history). * Once there's agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include; -------------------------. * **Best practices or re-vamped best practices** . Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. * **Request/present viewpoint on organization**. Draw attention to organization needed in code outside one's area of; expertise. Request interface for some structure (*e.g.*, gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. * **Fair Warning: Proposal to change things up**. Announce plans to re-organize code structure or how something is; handled. List goals (may be conflictin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pep0001.rst:3188,simpl,simple,3188,doc/sphinxman/source/pep0001.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pep0001.rst,1,['simpl'],['simple']
Usability,"btain:. .. math:: . E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. .. math:: . \bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}. .. math:: . f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}. Energy functional :math:`E_{DCT}` has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of :math:`\boldsymbol{\gamma_1}` (:math:`\boldsymbol{\kappa}`) and the density cumulant; (:math:`\boldsymbol{\lambda_2}`). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of :math:`\boldsymbol{\gamma_1}` is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; :math:`\boldsymbol{\gamma_2}`. In order to obtain the DCT energy, two conditions must be satisfied:. 1) The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density; cumulant :math:`\boldsymbol{\lambda_2}`, constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present momen",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:4604,simpl,simplified,4604,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['simpl'],['simplified']
Usability,"b|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb^\alpha)}; {\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}; - \frac{1}{2}\frac{[(ia^\beta|jb^\beta)-(ib^\beta|ja^\beta)](ia^\beta|jb^\beta)}; {\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations; ---------------. All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix :ref:`apdx:dfmp2`). Some basic recommendations are included below:. * DFMP2 should be run with the :math:`ov`-type RI or MP2FIT auxiliary; basis sets, *not* the -JKFIT basis sets. The automatic basis selector; should work fine for most all bases (exceptions are less common elements; at higher than quadruple-zeta). Generally, it is always better to specify; only the orbital basis set and let the auxiliary bases be chosen; automatically. If you want to specify manually, use the; |dfmp2__df_basis_mp2| keyword. * DFMP2 likes memory. At a minimum, :math:`2Q^2` doubles are required,; where :math:`Q` is the size of the auxiliary basis set. However, there is; one disk transpose of the :math:`(Q|ov)` tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:8710,simpl,simple,8710,doc/sphinxman/source/dfmp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst,1,['simpl'],['simple']
Usability,"ceived a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_integrals`:. ======================; Integrals in |PSIfour|; ======================. Introduction; ------------. |PSIfour| has a number of backends available to compute integrals. In order to; accomodate these options, while providing a clean interface to the programmer,; an abstraction layer is implemented within Libmints. A recent upgrade to the; primary integral engine has seen some important changes to the way this; interface layer is used; this document is designed to aid new developers as; well as those familiar with the older calling conventions to ensure that the; most efficient calling conventions are applied. The older style; ---------------. A very simple loop that does not use permutational symmetry might look; something like this in the old scheme:. .. code-block:: cpp. auto sieve = std::make_shared<ERISieve>(basisset, cutoff);; auto factory= std::make_shared<IntegralFactory>(basisset);; int deriv_level = 0;; bool use_shell_pairs = true;; auto eri = factory->eri(deriv_level, use_shell_pairs);; const double* buffer = eri_->buffer();; for (int P = 0; P < basisset->nshell(); ++P) {; const auto& Pshell = basisset->shell(P);; for (int Q = 0; Q < basisset->nshell(); ++Q) {; const auto& Qshell = basisset->shell(Q);; for (int R = 0; R < basisset->nshell(); ++R) {; const auto& Rshell = basisset->shell(R);; for (int S = 0; S < basisset->nshell(); ++S) {; const auto& Sshell = basisset->shell(S);; if(sieve->shell_significant(P, Q, R, S) {; eri->compute_shell(P, Q, R, S);; // results are in buffer, do something with them..; }; }; }; }; }. An integral factory is used, which can then produce integral object for various; operator types and derivative levels. A sieve is also constructed; thi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:1743,simpl,simple,1743,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simple']
Usability,"ck <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. Key representative methods supported by the SCF module in |Psifour| are; detailed in Table :ref:`SCF Capabilities <table:scf_stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. IP Fitting; ~~~~~~~~~~. In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the :py:func:`~psi4.driver.frac.ip_fitting` Python macro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:28385,simpl,simply,28385,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simply']
Usability,"co A. Evangelista. The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; |PSIfour| implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian :math:`H_{\rm X2C}`:. .. math:: H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}. that is a sum of a kinetic energy (:math:`T_{\rm X2C}`) and potential energy; (:math:`V_{\rm X2C}`) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114]_.; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass--Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos' ANO basis sets. .. note:: See also :ref:`sec:DKH` for another relativistic Hamiltonian. .. _`sec:ScalarRelativistic`:. A First Example; ^^^^^^^^^^^^^^^. The following is a simple input that will perform a Hartree--Fock calculation; using the X2C Hamiltonian. ::. molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result::. @RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy::. @RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options; ^^^^^^^^^^^^^^^^^^. The X2C module in |PSIfour| supports different combinations of basis set.; By default, if the input file specifies only |mints__basis|, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst:2275,simpl,simple,2275,doc/sphinxman/source/relativistic.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst,1,['simpl'],['simple']
Usability,"cule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first. ::. molecule h2 {; H; H 1 0.9; }; ; molecule h {; H; }; ; activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2; ; clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. :ref:`sec:jobControl` provides more details about the job control; and calculation keywords used in the above examples. .. index:: ; single: Ghost Atoms; single: molecule; ghost; .. _`sec:ghosts`:. Ghost Atoms; ===========. While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in :ref:`sec:fragments`,; manual specification of ghost atoms is sometimes required. Either ::. molecule he2 {; He; Gh(He) 1 2.0; }. or ::. molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, *i.e.*, possessing; basis functions but no electrons or nuclear charge. See :srcsample:`dfmp2-1`; and :srcsample:`ghosts` for a demonstration of both mechanisms for specifying; ghost atoms. .. index:: ; single: Isotopes; single: molecule; isotope; .. _`sec:isotope`:. Isotopic Substitution; =====================. .. caution:: Use of isotopic substitution in |PSIfour| is not well; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule. The syntax for a deuterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this *will* change the; molecule's point group symmetry. ::. molecule dto {; units au; O 0.00000000 0.00000000 0.0",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:7985,simpl,simplified,7985,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['simpl'],['simplified']
Usability,"d system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the ; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by |globals__writer_file_label| (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be '.fchk'. This FCHK file name should be passed to the 'File' keyword in the; DGMA data file, to ensure that the GDMA code reads the correct wavefunction; information. After running, two matrices of results can be accessed::. dma_results = get_array_variable('DMA DISTRIBUTED MULTIPOLES'); tot_results = get_array_variable('DMA TOTAL MULTIPOLES'). The first contains distributed multipoles, in units given by; |gdma__gdma_multipole_units|, with the row index corresponding to the site and; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:3912,Simpl,Simply,3912,doc/sphinxman/source/gdma.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst,1,['Simpl'],['Simply']
Usability,"e Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:sowreap`:. Embarrassing Parallelism; ========================. Many of the tasks automated by Python wrappers consist of a number of; independent |PSIfour| calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. - Prepare an input file, simply adding ``mode='sow'`` to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations. - According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation. - The 'sow' stage also produces a *master* input file (with a; ``mode='reap'`` directive). When all the jobs in the above step are; completed, place their output files in the same location as the; *master* input, and run this last, quick job to collect the results. - Sow/reap procedures are governed by the **mode** keyword, choices being; ``'continuous'``, ``'sow'``, and ``'reap'``. Only ``'sow'`` is likely to; be used by the user, as ``'continuous'`` is always the default, and; input files with ``'reap'`` are autogenerated. - Embarrassingly parallel algorithm available at present for:. - :ref:`sec:db()` ; - finite difference operation of :ref:`sec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst:1432,simpl,simply,1432,doc/sphinxman/source/sowreap.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst,1,['simpl'],['simply']
Usability,"e minimal errors; while providing much faster computations [Hohenstein:2010:184111]_ ; [Hohenstein:2010:014101]_. Since we're using density fitting for the SAPT,; we might as well also use it for the Hartree--Fock computations that are; performed as part of the SAPT. We can specify that with ; ``scf_type DF``. Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, |PSIfour| is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that |PSIfour| correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree--Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure. To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with ``freeze_core True``. The SAPT; procedure is invoked with the simple call, ``energy('sapt0')``. This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887]_, and this is discussed in more detail; in the SAPT section later in this manual. For now, we'll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 |kcalpermol|; (``Elst10,r`` where the 1 indicates the first-order; perturbation theory result with r",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:14708,simpl,simple,14708,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simple']
Usability,"e |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; minimum and maximum number of diis vectors to use, and a ``DIIS_START``; which is the iteration at which to start saving vectors for diis. Not all; modules conform to all these at present, but they're as standardized as; they can be without changing code. * ``AMPS`` (not amplitude, not amp) for amplitudes. * ``NUM_`` (not n) for number (e.g., ``NUM_AMPS_PRINT``, ``MAX_NUM_VECS``,; `",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7943,guid,guidelines,7943,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['guid'],['guidelines']
Usability,"e;; auto eri = factory->eri(deriv_level, use_shell_pairs);; const double* buffer = eri_->buffer();; for (int P = 0; P < basisset->nshell(); ++P) {; const auto& Pshell = basisset->shell(P);; for (int Q = 0; Q < basisset->nshell(); ++Q) {; const auto& Qshell = basisset->shell(Q);; for (int R = 0; R < basisset->nshell(); ++R) {; const auto& Rshell = basisset->shell(R);; for (int S = 0; S < basisset->nshell(); ++S) {; const auto& Sshell = basisset->shell(S);; if(sieve->shell_significant(P, Q, R, S) {; eri->compute_shell(P, Q, R, S);; // results are in buffer, do something with them..; }; }; }; }; }. An integral factory is used, which can then produce integral object for various; operator types and derivative levels. A sieve is also constructed; this allows; a quick determination of whether an integral shell quartet will be significant; in magnitude or not, potentially saving a lot of work. This simple scheme is; clean and easy to understand, and is still supported in the latest version of; |PSIfour| with only a small change to the sieve syntax and handling of buffer; addresses, noted below. The new syntax; --------------. The newer integral engines being interfaced to |PSIfour| may or may not require; a group of similar integrals to be computed together in a block using; vectorized instructions. To accomodate this possibility, a new syntax has been; introduced in Libmints:. .. code-block:: cpp. auto blocksPQ = ints[0]->get_blocks12();; auto blocksRS = ints[0]->get_blocks34();. auto factory= std::make_shared<IntegralFactory>(basisset);; int deriv_level = 0;; bool use_shell_pairs = true;; bool needs_exchange = true;; auto eri = factory->eri(deriv_level, use_shell_pairs, needs_exchange);; const auto &buffers = eri->buffers();. eri->update_density(D);; bool use_batching = eri->maximum_block_size() > 1;. // loop over all the blocks of (P>=Q|; for (size_t blockPQ_idx = 0; blockPQ_idx < blocksPQ.size(); blockPQ_idx++) {; const auto& blockPQ = blocksPQ[blockPQ_idx];; // loop ove",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:2941,simpl,simple,2941,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simple']
Usability,"eatured electronic structure programs are large and complex. However,; the |PSIfour| ecosystem provides a path for easier and more rapid development; of new features. The earliest versions of |PSIfour| were written by merging; individual executables that performed specific tasks into a unified C++; executable. By linking this C++ executable against the Python interpreter, the; individual modules could be called in any sequence, enabling a very diverse; range of tasks to be accomplished within a given input. Although Python-driven; model allowed for great flexibility from a user's perspective, programming was; still relatively difficult because it required modifications to be made in C++; code. Since those early days, the code has undergone some important structural; changes that have greatly simplified the development workflow. These changes; were motivated by the realization that only a few bottlenecks exist in a typical; calculation; by focusing on optimized C++ implementations of these bottlenecks; and making these C++ functions available in Python, most of the code to implement; the overall calculation can be written in simpler Python code. Python is far; better suited to management tasks such as directory navigation and retrieval,; making it a natural choice for overall calculation layout than C++. With the; emergence of `NumPy <https://numpy.org/>`_ as a standard tool for executing almost any; mathematical technique efficiently in Python, the transitioning of code from; C++ to Python has facilitated a much simpler work flow for prototyping and; developing methods: this is detailed in the next section. .. _`sec:prog_psi4numpy`:. Rapid initial development using Psi4NumPy; -----------------------------------------. The `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ project [Smith:2018:3504]_ is the recommended; mechanism for developing and prototyping new methods in Psi4. Because; `NumPy <https://numpy.org/>`_ provides such a rich set of features for efficient l",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:2437,simpl,simpler,2437,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['simpl'],['simpler']
Usability,"eening can be performed on the; product, which yields more sparsity. To enable this, simply call the integral; object's ``update_density`` member, passing it a SharedMatrix holding the; current density (remember that it changes during each iteration of the SCF) and; the product will be considered during screening. If only coulomb-like terms; are to be computed, the ``needs_exchange`` argument to the integral object; constructor should be set to false, otherwise it should be true to correcly; account for products of the density and integrals that contribute to; exchange-like terms. Shell blocking; .............. Each underlying integral engine knows whether it will use blocks, and will set up; the metadata automatically. Instead of looping over individual shells, the; user should loop over blocks supplied by the integral object; these blocks will; be just a single shell quartet combination for the case where blocking is not; used. It is simple to loop over pairs within each block using C++11 syntax, as; demonstrated in the code snippet above. Only shell pairs with significant; overlap are included in the shell block information, making this an efficient; way to loop over non-negligible terms. Permutational symmetry; ...................... The pairs within each block are optimized for efficiency. First, they are; screened during the integral object's creation to ensure that only terms with; appreciable overlap are stored. Second, only P,Q combinations that are; permutationally unique are stored, ordered with the higher angular momentum; first. Therefore care must be taken to ensure that the missing permutations; are correctly accounted for when processing the integrals within the loop. See; the DirectJK code in libfock for an example of using this scheme for a Fock; matrix build. Using bra-ket symmetry; ...................... In cases where there is no batching performed, bra-ket symmetry can be; trivially enforced by ensuring that one of the block indices is greater ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:8494,simpl,simple,8494,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simple']
Usability,"eps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.39",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5131,simpl,simple,5131,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['simpl'],['simple']
Usability,"ere tighter integration; of the new code with existing |PSIfour| machinery is required than that; afforded by the Numpy based strategy outlined in the :ref:`sec:prog_psi4numpy`; section. For details about how to write these plugins, see the; :ref:`sec:plugins` section. .. _`sec:prog_fullintegration`:. Incorporating code into |PSIfour|; ---------------------------------. For features to be incorporated fully into the |PSIfour| ecosystem, changes to; the core routines are inevitable. However, the programmer should think very; carefully about the most appropriate language for the task in hand. Let's; consider a new feature that downloads some data from an external source and; then performs some kind of expensive matrix operation on those data. Because; Python has a rich set of tools for obtaining data from external sources,; writing this tool in the Python layer is a natural choice. If we know that the; matrix will always be small enough to fit in memory, we can simply rely on the; routines present in NumPy to do the heavy lifting and the code is easy to; implement entirely in the Python layer. In the case where the matrix operation; is non-standard and requires some specialized code to handle disk-based; storage, the decision to write in Python is less clear cut. It is certainly; possible to write these out-of-core routines using Numpy primitives, but there; are a number of tools in |PSIfour| already to perform tasks like these that are; required, *e.g.*, for cluster. In this case, a good design would be to write a; simple piece of code in the C++ layer that performs the matrix operation on a; given input, using the I/O routines available in |PSIfour| and the parallelism; afforded by OpenMP, and to make that code available to the front end as; described in :ref:`sec:prog_tour-exposing`. The Python layer could then be; responsible for obtaining the input data and calling this C++ code to do the; manipulations, allowing each language layer to handle the subset of the wo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:5677,simpl,simply,5677,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['simpl'],['simply']
Usability,"esent as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calculations to not be limited by cheap integrals, need WITH_MAX_AM_ERI2 >= WITH_MAX_AM_ERI3; # * In order for DF fallback fitting to work with def2-universal on all elements, need WITH_ERI3_MAX_AM >=4 for energies; # * Since non-DF calculations often use DF guess or preiterations and DF calculations use 4-center integrals for sieving,; # a natural relationship between ERI and ERI3 for energy integrals is N and N+1.; # * The combination WITH_MAX_AM_ERI=""5;4;3"" and WITH_MAX_AM_ERI3=""6;5;4"" permits any 5Z energy, QZ gradient, and TZ Hessian and is sufficient for the full test suite.; # * Psi4 doesn't know the limits of the Libint2 library to which it's linked. `libint2::Engine::lmax_exceeded` errors will be thrown from l2; nothing from Psi4.; # * If ever use a libint2 with AM>7, edit the `init_spherical_harmonics` line in libmints/integral.cc; # * In selecting AM values, before `grep`ing lots of basis set files, consult the guide at end of this file.; # [Feb 2023]; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can use LIBINT2_SHGAUSS_ORDERING=standard|gaussian; # *at Libint source generation time*. At Psi4 build time, it's going to be looking for standard (sss), so you'll have to; # edit the CMake to use a gss.; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can no longer be adapted to use a libtool+cmake source.; # * Libraries of different AM are not hot-swappable in a Psi4 build, but they only require a relinking.; # [Jan 2024]; # * As of v1.9, Psi4 can use an upstream v2.8 Libint2. This is a libtool+cmake build, so `find_package(Libint2 ... COMPONENTS ...)` has no components to check. find_package(; Libint2; 2.7.2; CONFIG; COMPONENTS; sss; CXX_ho; impure_sh; ""eri_c4_d0_l${MAX_AM_ERI}"" eri_c3_d0_l4 eri_c2_d0_l4 onebody_d0_l4; eri_c4_d1_l2 eri_c3_d1_l3 eri_c2_d1_l3 onebody_d1_l3; onebody_d2_l3; OPTIONAL_COMPONE",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:2932,guid,guide,2932,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['guid'],['guide']
Usability,"euterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this *will* change the; molecule's point group symmetry. ::. molecule dto {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H_label@3.01604927 0.00000000 -1.93042809 -1.10715266; }. The masses used by |PSIfour| can be found at; :source:`psi4/include/psi4/masses.h`. See :srcsample:`freq-isotope2` for about; the only use to which isotopologues can presently be put in |PSIfour|. .. index:: ; single: PubChem; single: molecule; PubChem; .. _`sec:pubchem`:. `PubChem <http://pubchem.ncbi.nlm.nih.gov/>`_ Database; ======================================================. Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide chemists with an intuitive method for; guessing structures in terms of bond lengths and angles. While Z-matrix input is; intuitive for small molecules with few degrees of freedom, it quickly becomes; laborious as the system size grows. To obtain a reasonable starting guess; geometry, |PSIfour| can take a chemical name as input; this is then used; to attempt to retrieve Cartesian coordinates from the [PubChem]_ database. For example, to run a computation on benzene, we can use the following molecule specification::. molecule benzene {; pubchem:benzene; }. If the computer is connected to the internet, the above code will instruct; |PSIfour| to search PubChem for a starting structure. The search is actually; performed for compounds whose name *contains* ""benzene"", so multiple; entries will be returned. If the name provided (""benzene"" in the above; example) exactly matches one of the results, that entry will be used. If no; exact match is found the results, along with a unique chemical identifier; (CID), are printed to the output file, prompting the user to provide a more; specific name. For example, if we know that we want to run a computation on a; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:9739,intuit,intuitive,9739,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['intuit'],['intuitive']
Usability,"ffectively mean, ""Has option been changed by the; user?"". The way to do this is to isolate and nullify any changes to; options made by the code, the difference between [a] and [c]. C-side,; there is no concern since options are essentially read-only; within the modules. Py-side is another matter since the driver's role is to take terse; instructions from the user and translate those into instructions to the; C++ modules, usually through manipulation of options. .. comment * Reading options C-side; .. comment ; .. comment This usually takes place within each module during options parsing,; .. comment see section [] for details. No option is modified, so this process has; .. comment no entanglement with the definition of has_changed.; .. comment ; .. comment * Setting options C-side; .. comment ; .. comment This is very rarely done (what's going on in optking?). This; .. comment document was written as background to the only case of note: PUREAM.; .. comment This option has a clearly defined default, but it can't be set in; .. comment read_options because its default depends on other options. This is a; .. comment situation common to many options (and most all array options) and is; .. comment generally handled within the module code and so is never available to; .. comment the user. Analogously, PUREAM is handled in libmints but it is never; .. comment reset. In order to preserve effective definition [a], the strategy for each; python driver function is to query for the value of any option the; function may want to change and for the current has_changed status; (presumably reflecting whether the user has changed the value, as long as; no preceding code has corrupted that definition). The python function; then makes its changes to the option and runs any c-side modules with; those changes. Finally, just before the function returns, the options are; reset to the user's value and has_changed status (which should now again; reflect only whether the user has changed the va",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:6931,clear,clearly,6931,doc/sphinxman/source/optionshandling.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst,1,['clear'],['clearly']
Usability,"fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :math:`T_2` represent single and double excitation operators. The ; QCISD equations can be obtained by omitting all but two terms that ; are nonlinear in :math:`T_1` and :math:`T_2`:. .. math::; :label: QCISD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + T_1T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:4989,simpl,simplified,4989,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['simpl'],['simplified']
Usability,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2881,guid,guide,2881,.github/CONTRIBUTING.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md,3,"['guid', 'learn']","['guide', 'learn']"
Usability,"hat there's a special comment immediately before the; declaration of each keyword. You must provide these comments for any; options you add as they will be automatically inserted into the user; manual Providing a clear description will also help you to remember what; the keywords do and how they're used. The comments must live between the; special comment delimiters. For options that most users shouldn't need,; add an expert flag to the comment. This will place these options in a; separate section of the user manual. .. code-block:: cpp. /*- comment -*/; options.add_ ...; /*- comment !expert -*/; options.add_ ... As is apparent from the examples above, comments can span multiple lines; (see ``PRINT``), can refer to other options (through hyperlinks; see; ``SAVE_INFO``), can refer to sections of the manual (through hyperlinks;; see ``DOCC``), and can contain LaTeX notation (see ``AO_BASIS``). (To get; the LaTeX subscript command, use ""@@"" instead of ""_"".). See :ref:`faq:readoptions`; for guidelines on naming options. What is *has_changed* ?; -----------------------. There are times when we need to know whether an option was provided by the; user or if the defaults are being used. For this reason, the Options; object stores a boolean *has_changed* value, in addition to the option; value itself. A clarification of definition:. - [a] has_changed DOESN'T answer ""Has option been changed by the user?""; - [b] has_changed DOESN'T answer ""Is option now different from the default?""; - [c] has_changed DOES answer ""Has option value been touched at all, by user or code?"". The above items notwithstanding, psi4 code should be written so that; *has_changed* DOES effectively mean, ""Has option been changed by the; user?"". The way to do this is to isolate and nullify any changes to; options made by the code, the difference between [a] and [c]. C-side,; there is no concern since options are essentially read-only; within the modules. Py-side is another matter since the driver's role is t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:5269,guid,guidelines,5269,doc/sphinxman/source/optionshandling.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst,1,['guid'],['guidelines']
Usability,"he ``psi4.`` namespace, then submit it to the ``python`` interpreter.; Both modes are equally powerful. This tutorial covers the Psithon; mode. .. note:: Some |PSIfour| functions and keywords have aliases. For example,; ``frequency()``, ``frequencies()``, and ``freq()`` all work to ; obtain vibrational frequencies. Basic Input File Structure; ==========================. |PSIfour| reads input from a text file, which can be prepared in any standard; text editor. The default input file name is ``input.dat`` and the; default output file name is ``output.dat``. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:. >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (replacing any "".in"" or "".dat"" extension by "".out""). Sample Input Files; ==================. Below, we will provide a few simple input files as examples. A large ; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the :source:`samples` directory. Running a Basic Hartree--Fock Calculation; =========================================. In our first example, we will consider a Hartree--Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix. .. literalinclude:: @SFNX_INCLUDE@samples/tu1-h2o-energy/input.dat. .. note:: The memory and basis set specifications are placed *before* the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in ; :srcsample:`tu1-h2o-energy`.; You can run it if you wish.; Once |PSIfour| is in your path (see the ; :ref:`User Configuration <faq:runordinaryexe>`; sec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:2676,simpl,simple,2676,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simple']
Usability,"he function a Molecule object for which to build basis, a label for; the basis (generally, BASIS), and a hint for finding the basis. This last; argument gets used to find a python function by that name camoflaged; (that's what ``basis {...}`` blocks in the input file get translated into); or failing that a string to find a gbs file defining the basis. ::. // simple; boost::shared_ptr<BasisSet> primary = BasisSet::pyconstruct_orbital(molecule, ; ""BASIS"", ""CC-PVDZ"");. // self-contained; boost::shared_ptr<BasisSet> primary = BasisSet::pyconstruct_orbital(Process::environment.molecule(),; ""BASIS"", Process::environment.options.get_str(""BASIS""));. Auxiliary Basis; ***************. Give the function a Molecule object for which to build basis, a label for; the basis, a hint for finding the basis, a fitting role to apply if; defaults need to be generated, and a hint for finding the orbital basis to; build defaults against. ::. // simple; boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct_auxiliary(molecule,; ""DF_BASIS_SCF"", """", ; ""JKFIT"", ""CC-PVDZ"");. // self-contained and force Spherical; boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct_auxiliary(Process::environment.molecule(),; ""DF_BASIS_SCF"", Process::environment.options.get_str(""DF_BASIS_SCF""), ; ""JKFIT"", Process:environment.options.get_str(""BASIS""), 1);. Adding Basis Option to Code; ***************************. - Register new basis keyword with :source:`src/bin/psi4/read_options.cc`; (of course). The default should be the empty string. ::. options.add_str(""DF_BASIS_ELST"", """");. - Register new basis keyword with the input parser; :source:`share/python/inputparser.py`. In the main function; `process_input`, add it to the regex below. This ensures that users can; define ``basis_keyword basis_name {...}`` blocks where the contents of; the block get associated with basis_name and assigned to your; basis_keyword. ::. basis_block = re.compile(r'^(\s*?)(basis|df_basis_scf|df_basis_mp2|df_basis_cc|df_bas",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst:4416,simpl,simple,4416,doc/sphinxman/source/attic/prog_basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst,1,['simpl'],['simple']
Usability,"hinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the ; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by |globals__writer_file_label| (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be '.fchk'. This FCHK file name should be passed to the 'File' keyword in the; DGMA data file, to ensure that the GDMA code reads t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:3530,simpl,simplest,3530,doc/sphinxman/source/gdma.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst,1,['simpl'],['simplest']
Usability,"hon``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2004:1463]_; [Grimme:2006:1787]_ [Grimme:2010:154104]_ the DFT+Dispersion method; appends to the ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:8090,simpl,simply,8090,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['simpl'],['simply']
Usability,"i.e. keep; i>j), we might call dpd_buf4_init() in the following; manner:. dpd_buf4_init(Buffer, PSIFILE, 0, 2, 5, 0, 5, 1, ""<ij|ab> integrals"");. These argument indicate that while the integrals are stored as; (pqnum,rsnum) = (0, 5) on disk, they will be stored in memory as (2,; 5), with the row indices packed. In addition, the data will be; antisymmetrized as it is read into memory. Note, however, that the; libdpd routines do not make sure that your intialization; request makes sense (apart from some pre-processor defined debugging; in a few high-level functions), and it is quite possible to; erroneously pack indices for non-(anti)symmetric quantities. When the program is finished with a given buffer, the int dpd_buf4_close(dpdbuf4 *Buf); function is called to deallocate the associated memory. V. Contraction Evaluation. The library provides a number of high-level functions for evaluating a; variety of products among two- and four-index buffers. This section; outlines these functions and provides simple examples of their use.; int dpd_contract444(dpdbuf4 *X,; dpdbuf4 *Y, dpdbuf4 *Z, int target_X, int target_Y, double; alpha, double beta):; This function contracts two four-index buffers, X and; Y, into a target four-index buffer, Z, using the; general formula, alpha * X(pq,mn) * Y(mn,rs) = beta *; Z(pq,rs). The current version of this function requires that the; target (external) indices must both be contained in the bra (row) or; ket (column) of X and Y. The value of; target_X indicates that the target indices of X are; contained in its bra (0) or its ket (1); target_Y is defined; similarly. For example, we may use dpd_contract444() to evaluate the; following contraction found in the T2 amplitude equations; from coupled cluster theory:. tijab = tijcd <ab||cd>. (A summation over the repeated indices c and d is implied.) Assuming; that the <ab|cd> integrals exist on disk in a (pqnum,rsnum) =; (5,5) format and the right-hand-side T amplitudes exist on disk in a; (2,7) ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html:16686,simpl,simple,16686,doc/sphinxman/source/attic/libdpd.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html,1,['simpl'],['simple']
Usability,"ial format of the; comments on lines 27 and 30. These are still valid \module{C++} comments, but; the extra hyphens inside are essential in this context. Whenever adding any; options for any module, you must comment them as shown - this will ensure that; the keywords are automatically inserted into the \PSIfour\ users' manual. The; \module{main} function does a little setting up of the \PSI\ input and output; environments, before calling the module code we're developing (on line 53) and; shutting down the \PSIfour\ I/O systems. The module we're developing is in the following source file. \includesource{sample-codes/integrals/integrals.cc}{C++}. Given the extensive documentation within the code, we'll not describe this file; line-by-line; however, some points warrant elaboration. Notice that the entire; module is encapsulated in the \module{psi::integrals} namespace (lines 6 and; 92). This simple example has only one function body, which lives in a single; source file - if more functions and/or source files were added, these too would; have to live in the \module{psi::integrals} namespace. On lines 29 and 31 of; \file{main.cc} we told the parser which keywords to expect, and provided; default values in case the user omited them from the input. This makes; retrieving these options very clean and simple ({\it c.f.} lines 11 and 12 of; \file{integrals.cc}). Each \PSIfour\ module will have to initialize its own; local \module{PSIO} and \module{Chkpt} objects to perform I/O and to retrieve; information from previously run modules. Notice that these objects are created; within smart pointers (see section XXX for more information) so that they are; automatically deleted when they go out of scope, thus reducing the burden on; the programmer. Likewise, the basis sets, matrices and integral objects are; allocated using smart pointers. The code described above can be built by simply typing ``make'' on the command; line. To run this code, you must first run the \module{input} mod",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst:3911,simpl,simple,3911,doc/sphinxman/source/attic/progtutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst,1,['simpl'],['simple']
Usability,"if(${ENABLE_CheMPS2}); find_package(CheMPS2 1.8.7 CONFIG QUIET). if(${CheMPS2_FOUND}); get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); message(STATUS ""${Cyan}Found CheMPS2${ColourReset}: ${_loc} (found version ${CheMPS2_VERSION})""); add_library(chemps2_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_CheMPS2}); message(VERBOSE ""Suitable CheMPS2 located externally as user insists""); endif(). # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected CheMPS2Config.cmake"" FORCE); else(); if(${CMAKE_INSIST_FIND_PACKAGE_CheMPS2}); message(FATAL_ERROR ""Suitable CheMPS2 could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable CheMPS2 could not be located, ${Magenta}Building CheMPS2${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); set(_so_only ON); else(); set(_a_only ON); set(_so_only OFF); endif(). ExternalProject_Add(chemps2_external; DEPENDS lapack_external; hdf5_external; URL https://github.com/SebWouters/CheMPS2/archive/d8ac508.tar.gz # v1.8.9 + 1; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DSTATIC_ONLY=${_a_only}; -DSHARED_ONLY=${_so_only}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DCMAKE_RANLIB=${CMAKE_RANLIB}; -DCMAKE_AR=${CMAKE_AR}; -DCMAKE_NM=${CMAKE_NM}; -DENABLE_TESTS=OFF; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DTargetHDF5_DIR=${TargetHDF5_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPL",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/chemps2/CMakeLists.txt:459,clear,clears,459,external/upstream/chemps2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/chemps2/CMakeLists.txt,1,['clear'],['clears']
Usability,"if(${ENABLE_Einsums}); find_package(Einsums 0.3 CONFIG). if(TARGET Einsums::einsums); get_property(_loc TARGET Einsums::einsums PROPERTY LOCATION); message(STATUS ""${Cyan}Found Einsums${ColourReset}: ${_loc} (found version ${Einsums_VERSION})""); add_library(einsums_external INTERFACE) # dummy. # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected TargetHDF5Config.cmake"" FORCE). if(${CMAKE_INSIST_FIND_PACKAGE_Einsums}); message(VERBOSE ""Suitable Einsums located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_Einsums}); message(FATAL_ERROR ""Suitable Einsums could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable Einsums could not be located, ${Magenta}Building Einsums${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); else(); set(_a_only ON); endif(). set(_einsums_dir ""share/cmake/Einsums""). ExternalProject_Add(einsums_external; DEPENDS lapack_external; hdf5_external; URL https://github.com/Einsums/Einsums/archive/v0.3.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DEINSUMS_STATIC_BUILD=${_a_only}; -DEXTRA_C_FLAGS=${CMAKE_C_FLAGS}; -DEXTRA_CXX_FLAGS=${CMAKE_CXX_FLAGS}; -DEINSUMS_INSTALL_CMAKEDIR=${_einsums_dir}; # -DENABLE_XHOST=${ENABLE_XHOST}; -DEINSUMS_ENABLE_TESTING=OFF; -DEINSUMS_USE_HPTT=ON; # -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DTargetHDF5_DIR=${TargetHDF5_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS};",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/einsums/CMakeLists.txt:335,clear,clears,335,external/upstream/einsums/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/einsums/CMakeLists.txt,1,['clear'],['clears']
Usability,"if(${ENABLE_ambit}); find_package(ambit 0.6 CONFIG QUIET). if(${ambit_FOUND}); get_property(_loc TARGET ambit::ambit PROPERTY LOCATION); message(STATUS ""${Cyan}Found ambit${ColourReset}: ${_loc} (found version ${ambit_VERSION})""); add_library(ambit_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_ambit}); message(VERBOSE ""Suitable ambit located externally as user insists""); endif(). # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected ambitConfig.cmake"" FORCE); else(); if(${CMAKE_INSIST_FIND_PACKAGE_ambit}); message(FATAL_ERROR ""Suitable ambit could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable ambit could not be located, ${Magenta}Building ambit${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); set(_so_only ON); else(); set(_a_only ON); set(_so_only OFF); endif(). set(_ambit_dir ""share/cmake/ambit""). ExternalProject_Add(ambit_external; DEPENDS lapack_external; hdf5_external; pybind11_external; URL https://github.com/jturney/ambit/archive/733c529.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DSTATIC_ONLY=${_a_only}; -DSHARED_ONLY=${_so_only}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant; #-DENABLE_VECTORIZATION=${ENABLE_VECTORIZATION}; #-DEXTRA_Fortran_FLAGS=${CMAKE_EXTRA_Fortran_FLAGS}; -DEXTRA_C_FLAGS=${CMAKE_C_FLAGS}; -DEXTRA_CXX_FLAGS=${CMAKE_CXX_FLAGS}; -Dambit_INSTALL_CMAKEDIR=${_ambit_dir}; -DPython_EXECUTABLE=${Python_EXECUTABLE}; -DPython_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPytho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ambit/CMakeLists.txt:437,clear,clears,437,external/upstream/ambit/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ambit/CMakeLists.txt,1,['clear'],['clears']
Usability,"if(${ENABLE_libefp}); #find_package(pylibefp 0.6.1 CONFIG QUIET); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_pylibefp})); include(FindPythonModule); find_python_module(pylibefp QUIET); endif(). if(${pylibefp_FOUND}); message(STATUS ""${Cyan}Found pylibefp${ColourReset}: ${PY_pylibefp} (found version ${pylibefp_VERSION})""); add_library(pylibefp_external INTERFACE) # dummy. # reset below necessary as find_package clears it. better solution sought; #set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected pylibefpConfig.cmake"" FORCE). if(${CMAKE_INSIST_FIND_PACKAGE_pylibefp}); message(VERBOSE ""Suitable pylibefp located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_pylibefp}); message(FATAL_ERROR ""Suitable pylibefp could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable pylibefp could not be located, ${Magenta}Building pylibefp${ColourReset} instead.""). ExternalProject_Add(pylibefp_external; DEPENDS lapack_external; libefp_external; pybind11_external; URL https://github.com/loriab/pylibefp/archive/b3da48f.tar.gz # v0.6.2 + 5; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} # unused, but needs working compiler; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_STANDARD=${psi4_CXX_STANDARD}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_DATADIR=${CMAKE_INSTALL_DATADIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; # OpenMP irrelevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DENABLE_GENERIC=${ENABLE_GENERIC}; #-DLIBC_INTERJECT=${LIBC_INTERJECT}; -DPYTHON_EXECUTABLE=${Python_EXECUTABLE}; -DPYTHON_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPYTHON_LIBRARY=${Python_LIBRARIES}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -Dlibefp_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/pylibefp/CMakeLists.txt:408,clear,clears,408,external/upstream/pylibefp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/pylibefp/CMakeLists.txt,1,['clear'],['clears']
Usability,"ify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:buildrunfaq`:. ===============; Build & Run FAQ; ===============. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. Obtaining and Updating |PSIfour|; --------------------------------. #. :ref:`faq:obtainpsi4`; #. :ref:`faq:quiz`; #. :ref:`faq:binary`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public`; #. :ref:`faq:tarballpsi4public`; #. :ref:`faq:recompile`. .. #. :ref:`faq:psi3sourceforge`. Configuring and Installing |PSIfour| via Binary; -----------------------------------------------. #. :ref:`faq:psicodedownload`; #. :ref:`sec:psi4conda`; #. :ref:`faq:psi4pkg`; #. :ref:`faq:updatepsi4`; #. :ref:`faq:psi4deps`; #. :ref:`sec:condadetails`; #. :ref:`faq:condamaxameri`. Configuring, Building, and Installing |PSIfour| via Source; ----------------------------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`fa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:1405,guid,guides,1405,doc/sphinxman/source/build_faq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst,1,['guid'],['guides']
Usability,"iguration interaction (CI) is one of the most general ways to; improve upon Hartree--Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a ""single-reference"" CI based; on reference function :math:`| \Phi_0 \rangle`, we can write the CI expansion as; follows:. .. math:: | \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab} ; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots; :label: CIexpansion. The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results. The CI code in |PSIfour| is described in detail in ; [Sherrill:1999:CI]_. For the reasons stated above, the CI code in; |PSIfour| is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:2327,simpl,simplest,2327,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['simpl'],['simplest']
Usability,"inary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:4243,simpl,simple-,4243,doc/sphinxman/source/gcp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst,1,['simpl'],['simple-']
Usability,"ing any; options for any module, you must comment them as shown - this will ensure that; the keywords are automatically inserted into the \PSIfour\ users' manual. The; \module{main} function does a little setting up of the \PSI\ input and output; environments, before calling the module code we're developing (on line 53) and; shutting down the \PSIfour\ I/O systems. The module we're developing is in the following source file. \includesource{sample-codes/integrals/integrals.cc}{C++}. Given the extensive documentation within the code, we'll not describe this file; line-by-line; however, some points warrant elaboration. Notice that the entire; module is encapsulated in the \module{psi::integrals} namespace (lines 6 and; 92). This simple example has only one function body, which lives in a single; source file - if more functions and/or source files were added, these too would; have to live in the \module{psi::integrals} namespace. On lines 29 and 31 of; \file{main.cc} we told the parser which keywords to expect, and provided; default values in case the user omited them from the input. This makes; retrieving these options very clean and simple ({\it c.f.} lines 11 and 12 of; \file{integrals.cc}). Each \PSIfour\ module will have to initialize its own; local \module{PSIO} and \module{Chkpt} objects to perform I/O and to retrieve; information from previously run modules. Notice that these objects are created; within smart pointers (see section XXX for more information) so that they are; automatically deleted when they go out of scope, thus reducing the burden on; the programmer. Likewise, the basis sets, matrices and integral objects are; allocated using smart pointers. The code described above can be built by simply typing ``make'' on the command; line. To run this code, you must first run the \module{input} module to read; in the basis set information. A \PSI\ input for this code should look some; thing like the following:. \includeinput{sample-codes/integrals/input.dat}; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst:4324,simpl,simple,4324,doc/sphinxman/source/attic/progtutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst,2,['simpl'],"['simple', 'simply']"
Usability,"ing of all :math:`S^{2}` approximated terms; was turned off by default. Finally, in 2014 Parker et al. [Parker:2014:094106]_ empirically discovered that ; SAPT0 energies for van der Waals dimers with close contacts benefit from a slightly modified ; recipe that involves an empirically adjusted exponent :math:`\alpha = 3.0`. ; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]_). .. math:: E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)} ; + \delta_{HF}^{(2)}; :label: sSAPT0. where :math:`\delta_{HF}^{(2)}` is computed *without* any scaling. Please note that ; sSAPT0 is thus not the same as requesting ``exch_scale_alpha 3.0``, and that the; scaling is automatically performed by requesting ``energy('ssapt0')``. A First Example; ^^^^^^^^^^^^^^^. The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods,; not all of them). ::. 	molecule water_dimer {; 	 0 1; 	 O -1.551007 -0.114520 0.000000; 	 H -1.934259 0.762503 0.000000; 	 H -0.599677 0.040712 0.000000; 	 --; 	 0 1; 	 O 1.350625 0.111469 0.000000; 	 H 1.680398 -0.373741 -0.758561; 	 H 1.680398 -0.373741 0.758561; 	; 	 units angstrom; 	 no_reorient; 	 symmetry c1; 	}; 	; 	set basis aug-cc-pvdz; 	; 	energy('sapt0'); 	energy('sapt2'); 	energy('sapt2+'); 	energy('sapt2+(3)'); 	energy('sapt2+3'). The SAPT module uses the standard |PSIfour| partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the ``no_reorient`` and ``symmetry; c1`` molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:13818,simpl,simplest,13818,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['simpl'],['simplest']
Usability,"is dkh?] <sec:dkh>` :source:`[dkh min version] <external/upstream/dkh/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`gdma <cmake:gdma>` |w---w| :ref:`[what is gdma?] <sec:gdma>` :source:`[gdma min version] <external/upstream/gdma/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`PCMSolver <cmake:pcmsolver>` |w---w| :ref:`[what is PCMSolver?] <sec:pcmsolver>`. * :ref:`Fortran Compiler <cmake:fortran>`; * zlib http://www.zlib.net/. * :ref:`simint <cmake:simint>` |w---w| :ref:`[what is simint?] <sec:simint>` :source:`[simint min version] <external/upstream/simint/CMakeLists.txt#L2>`. Additionally, there are runtime-loaded capabilities:. * :ref:`PylibEFP & libefp <cmake:libefp>` |w---w| :ref:`[what is LibEFP?] <sec:libefp>` :source:`[LibEFP min version] <external/upstream/libefp/CMakeLists.txt#L1>`. * cfour |w---w| :ref:`[what is CFOUR?] <sec:cfour>`. * dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>`. * simple-dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>` (Nov 2022; added by v1.7) preferred alternative to dftd3 https://github.com/dftd3/simple-dftd3. * gcp |w---w| :ref:`[what is gCP?] <sec:gcp>`. * mctc-gcp |w---w| :ref:`[what is gCP?] <sec:gcp>` (Nov 2022; added by v1.7) preferred alternative to gcp https://github.com/grimme-lab/gcp. * dftd4 |w---w| <sec:dftd3> https://github.com/dftd4/dftd4. * mrcc |w---w| :ref:`[what is MPCC?] <sec:mrcc>`. * v2rdm_casscf |w---w| :ref:`[what is v2rdm_casscf?] <sec:v2rdm_casscf>`. * :ref:`sns-mp2 <sec:snsmp2>` |w---w| https://github.com/DEShawResearch/sns-mp2/commits/master. * resp |w---w| https://github.com/cdsgroup/resp. * gpu_dfcc |w---w| https://github.com/edeprince3/gpu_dfcc/commits/master. * OpenFermion-Psi4 |w---w| https://github.com/quantumlib/OpenFermion. * :ref:`cppe <sec:cppe>` |w---w| https://github.com/maxscheurer/cppe. * mp2d |w---w| https://github.com/Chandemonium/MP2D. * :ref:`FockCI <sec:fockci>` |w---w| https://github.com/shannonhouck/psi4fockci. * cct3 |w---w| https:",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:12464,simpl,simple-,12464,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['simpl'],['simple-']
Usability,"is will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon; ==========================================================================. Finally, let's consider an example that shows how the Python driver; in |PSIfour| simplifies some routine tasks. |PSIfour| can interpret; valid Python code in addition to the computational chemistry directives; we've seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with |PSIfour|; in the :source:`samples` directory. Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; ``Rvals=[2.5, 3.0, 4.0]``. Let's also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:17310,simpl,simplify,17310,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simplify']
Usability,"ist beginning at |ccenergy__r_convergence|). It is defined; according to the quantum chemical method and so its default value is set; by each module individually. .. [#f7] For frequency computations by finite difference of energies,; convergence criteria are tightened further still to 10 for; |scf__e_convergence| and |scf__d_convergence| for SCF of HF or DFT, 11; for |scf__e_convergence| and |scf__d_convergence| for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. .. _`sec:scfrec`:. Recommendations; ~~~~~~~~~~~~~~~. The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. * For |scf__guess|, the ``SAD`` guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; * For wall time, ``DF`` may be a factor of ten or more faster than the exact; integral technologies available in |PSIfour|.; Use ``DF`` unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; ``DIRECT``.; * Don't mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; * Buy a developer a beer!. The ""best-practice"" input file for HF is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:60728,simpl,simple,60728,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['simpl'],['simple']
Usability,"itialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:17648,guid,guidance,17648,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['guid'],['guidance']
Usability,"k:: cpp. std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!. 2. Problems with uninitialized variables. auto works like template type; deduction, hence the right-hand side of the declaration needs to have an; initializer:. .. code-block:: cpp. int x1; // fine, but uninitialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized. 3. Problems with unintended type casts and type mismatches that are hard; to impossible to catch:. .. code-block:: cpp. std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type. *Reference:* Items 2 and 5 in `[Effective Modern C++] <https://isbnsearch.org/isbn/9781491903995>`_. Mark virtual functions in derived classes with override; -------------------------------------------------------. The ``override`` keyword introduced in C++11 is used to mark a function in a; derived class and guarantee that it is overloading a function *with the same; signature* in the base class. This behavior is `checked at compile time; <https://en.cppreference.com/w/cpp/language/override>`_. .. _`faq:printmem`:. Prefer `GiB` for memory printing; --------------------------------. As memory sizes get larger, we should work in giga (requires decimal printing to not round to zero) rather than mega units.; As it's what we're computing anyways, we should work in 1024-based (mebi, gibi, etc. https://en.wikipedia.org/wiki/Gibibyte) rather than 1000-based units.; As it's a unit, put it in brackets.; Note that users can supply MiB, GB, bytes, or whatever; this guideline is for output printing. ::. outfile->Printf("" DFHelper Memory: AOs need %.3f [GiB]; user supplied %.3f [GiB]. "",; (required * 8 / (1024 * 1024 * 1024.0)),. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_c.rst:4748,guid,guideline,4748,doc/sphinxman/source/prog_style_c.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_c.rst,1,['guid'],['guideline']
Usability,"l result of the; computation, the requested total energy in Hartrees, which we assign to a; Python variable. The two energies are then converted to a dissociation; energy and printed to the output file using standard Python notation. Generally, there are multiple quantities of interest. Appendix; :ref:`apdx:psivariables_module` lists PSI variables variables set by each; module, and :ref:`apdx:psivariables_alpha` defines them. These can be; accessed through the :py:func:`~psi4.core.get_variable` function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available::. e_mp2 = get_variable('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command :py:func:`~psi4.core.print_variables`. Note that PSI variables; are cleared at the start of each :py:func:`~psi4.driver.energy`, etc. in an input; file by :py:func:`~psi4.core.clean_variables()`.; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a :py:func:`~psi4.core.print_variables` command, the; last will include :psivar:`SCF TOTAL ENERGY` but not; :psivar:`FCI TOTAL ENERGY`.; The entire dictionary of PSI variables can be obtained through; :py:func:`~psi4.core.get_variables`. .. _`sec:returnvals`:. Return Values; =============. Most of the usual user computation functions (*i.e.*,; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, and; :py:func:`~psi4.driver.frequency`) return simply the current total energy.; Consult the descriptions of other functions in :ref:`sec:psithonFunc` for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions. ::. # E is total energy float; # ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:10374,clear,cleared,10374,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['clear'],['cleared']
Usability,"l; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule. The syntax for a deuterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this *will* change the; molecule's point group symmetry. ::. molecule dto {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H_label@3.01604927 0.00000000 -1.93042809 -1.10715266; }. The masses used by |PSIfour| can be found at; :source:`psi4/include/psi4/masses.h`. See :srcsample:`freq-isotope2` for about; the only use to which isotopologues can presently be put in |PSIfour|. .. index:: ; single: PubChem; single: molecule; PubChem; .. _`sec:pubchem`:. `PubChem <http://pubchem.ncbi.nlm.nih.gov/>`_ Database; ======================================================. Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide chemists with an intuitive method for; guessing structures in terms of bond lengths and angles. While Z-matrix input is; intuitive for small molecules with few degrees of freedom, it quickly becomes; laborious as the system size grows. To obtain a reasonable starting guess; geometry, |PSIfour| can take a chemical name as input; this is then used; to attempt to retrieve Cartesian coordinates from the [PubChem]_ database. For example, to run a computation on benzene, we can use the following molecule specification::. molecule benzene {; pubchem:benzene; }. If the computer is connected to the internet, the above code will instruct; |PSIfour| to search PubChem for a starting structure. The search is actually; performed for compounds whose name *contains* ""benzene"", so multiple; entries will be returned. If the name provided (""benzene"" in the above; example) exactly matches one of the results, that entry will be used. If no; exact match is found the results, along with a unique chemical identifier; (CID), are",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:9635,intuit,intuitive,9635,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['intuit'],['intuitive']
Usability,"lated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; re",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:5059,simpl,simple,5059,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['simpl'],['simple']
Usability,"luations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems ; only. Publications resulting from the use of the higher-order SAPT code ; should cite the following: ; [Hohenstein:2010:014101]_. For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]_).; As shown in [Parker:2014:094106]_, whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102]_, the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102]_. ; To request CCD dispersion treatment in a SAPT computation, simply append; ``(ccd)`` to the name of the method, as in the following examples ::. 	energy('sapt2+(ccd)'); 	energy('sapt2+(3)(ccd)'); 	energy('sapt2+3(ccd)'). The :math:`\delta_{MP2}` corrections can also be computed automatically; by appending ``dmp2`` to the name of the method, with or without CCD dispersion ::. 	energy('sapt2+dmp2'); 	energy('sapt2+(3)dmp2'); 	energy('sapt2+3dmp2'); 	energy('sapt2+(ccd)dmp2'); 	energy('sapt2+(3)(ccd)dmp2'); 	energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold :math:`3o^2v^2+v^2N_{aux}` arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory. Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords. ; The following keywords are relevant for higher-or",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:27057,simpl,simply,27057,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['simpl'],['simply']
Usability,"lues and, optionally eigenvectors of a symmetric matrix. Eigenvectors take up to 10x longer than eigenvalues.; * DGEEV: Eigenvalues and, optionally eigenvectors of a general matrix. Up to 10x slower than DSYEV.; * DGESV: General solver (uses LU decomposition).; * DGESVD: General singular value decomposition.; * DGETRF: LU decomposition.; * DPOTRF: Cholesky decomposition (much more stable/faster); * DGETRS: Solver, given LU decomposition by DGETRF; * DPOTRS: Solver, given Cholesky decomposition by DPOTRF; * DGETRI: Inverse, given LU decomposition by DGETRF (Warning: it's faster and more stable just to solve with DGETRS); * DPOTRI: Inverse, given Cholesky decomposition by DPOTRF (Warning: it's faster and more stable just to solve with DPOTRS). .. _`faq:blasmatrix`:. How to use low-level BLAS/LAPACK with ``psi4.core.Matrix``; ----------------------------------------------------------. Jet's awesome new Matrix object has a lot of simple BLAS/LAPACK built in,; but you can just as easily use the ``double***`` array underneath if you are; careful (the outer index is the submatrix for each irrep). Here's an; example:. .. code-block:: cpp. // BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // Matrix; #include ""psi4/libmints/matrix.h""; ; using namespace psi;; ...; int n = 100;; ; // Allocate A Matrix (new C1 convenience constructor);; shared_ptr<Matrix> A(new Matrix(""Still A, but way cooler"", n,n));; // Get the pointer to the 0 irrep (C1 for now, it errors if you ask for too high of an index); double** A_pointer = A->get_pointer(0);; ; // Call the LAPACK DPOTRF to get the Cholesky factor; // Note this works in column-major order; // The result fills like:; // * * * *; // * * *; // * *; // *; // instead of the expected:; // *; // * *; // * * *; // * * * *; //; int info = C_DPOTRF('L', n, A_pointer[0], n);; ; // Wow that's a lot easier; A->print();; ; // Don't free, it's shared_ptr!. .. _`faq:labas`:. How to name orbital bases (e.g., AO & SO); -----------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst:8736,simpl,simple,8736,doc/sphinxman/source/prog_blas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst,1,['simpl'],['simple']
Usability,"ly the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution ``@@`` for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; :regexp:`^ $latex math$[., ]$` (pseudo-regex) are good, while ``H$_2$O`` and LaTeX tables; are not translated correctly. Python docstrings a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:7399,guid,guide,7399,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['guid'],['guide']
Usability,"lysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon; ==========================================================================. Finally, let's consider an example that shows how the Python driver; in |PSIfour| simplifies some routine tasks. |PSIfour| can interpret; valid Python code in addition to the computational chemistry directives; we've seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with |PSIfour|; in the :source:`samples` directory. Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; ``Rvals=[2.5, 3.0, 4.0]``. Let's also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, |PSIfour| knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let's; consider CCSD(T)), and it needs to know what's monomer A and what's monomer; B. This last",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:17600,simpl,simple,17600,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simple']
Usability,"nction is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in ; :srcsample:`tu1-h2o-energy`.; You can run it if you wish.; Once |PSIfour| is in your path (see the ; :ref:`User Configuration <faq:runordinaryexe>`; section of the installation instructions), you can run this computation by typing. >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree--Fock energy in a section like this::. Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about :math:`1.0 \times 10^{-6}`, so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. :ref:`sec:installFile`). This very simple input is sufficient to run the requested information.; Notice that we didn't tell the program some otherwise useful information; like the charge on the molecule (0, it's neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree--Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords. Let's consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let's run a computation; on methylene (CH\ :sub:`2`\ ), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity :math:`2S+1 = 3`).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, |PSIfour|; can get the charge and multiplicity as the first two integers i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:4345,simpl,simple,4345,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simple']
Usability,"nding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:1205,simpl,simplify,1205,doc/sphinxman/source/optionshandling.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst,1,['simpl'],['simplify']
Usability,"new molecular orbitals, from which a new density is computed. This; procedure is continued until either convergence is reached or a preset maximum; number of iterations is exceeded. Convergence is determined by both change in; energy and root-mean-square change in density matrix values, which must be below; the user-specified |scf__e_convergence| and |scf__d_convergence|, respectively.; The maximum number of iterations is specified by the |scf__maxiter| option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial orbitals and damping during iterations to ensure; convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets. For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. This is the default for single atoms.; SAD [:term:`Default <GUESS (SCF)>`]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (*e.g.*, in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems. This is the default for; systems of more than one atom.; SADNO; Natural orbitals from Superposition of Atomic Densities. Similar; to the above, but it forms natural orbitals from the SAD density; matrix to get proper orbitals which are used to start the; calculation, see [Lehtola:2019:1593]_.; GWH; A generalized Wolfsberg-Helmholtz modification of the core; Hamiltonian matrix. Usually less accurate than the core guess: the; latter is exact for one-electron systems, ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:18669,Simpl,Simple,18669,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['Simpl'],['Simple']
Usability,"ng almost any; mathematical technique efficiently in Python, the transitioning of code from; C++ to Python has facilitated a much simpler work flow for prototyping and; developing methods: this is detailed in the next section. .. _`sec:prog_psi4numpy`:. Rapid initial development using Psi4NumPy; -----------------------------------------. The `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ project [Smith:2018:3504]_ is the recommended; mechanism for developing and prototyping new methods in Psi4. Because; `NumPy <https://numpy.org/>`_ provides such a rich set of features for efficient linear; algebra, Fourier transforms, and general tensor manipulations, a massive number; of methods can be easily implemented very easily using that library. To; facilitate this workflow, |PSIfour| exports key quantities such as integrals,; densities and molecular orbitals in NumPy format. From this point, the; programmer can simply call the appropriate |PSIfour| functions to compute the; desired input quantities, retrieve them in NumPy format, and then write the; remaining code using standard Python and/or NumPy syntax. This approach does; not require any recompilation of code, resulting in a particularly facile; development workflow. Detailed examples and tutorials are available in the; `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ repository. .. _`sec:prog_plugins`:. Avoiding the need to modify Psi4, using plugins; -----------------------------------------------. In the early days when |PSIfour| was still primarily a C++ code, development; was very cumbersome due to a lengthy build process. To expedite development, a; plugin system was developed. This plugin machinery allows developers to access; the classes defined in the innards of |PSIfour|, with only the small plugin; code requiring recompilation during development. The resulting lightweight; code can be maintained and distributed independently of |PSIfour|, making this; a good strategy for development, especially in cases wh",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:3623,simpl,simply,3623,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['simpl'],['simply']
Usability,"nsfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with ; SAPT0/aug-cc-pVDZ. . .. index:: ; pair: SAPT; output. Monomer-Centered Basis Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (*i.e.*, each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (*i.e.*, each monomer utilizes only its; own basis set). It is also possible to run a closed-shell SAPT computation at any; level using only the monomer-centered basis. To do this, simply add; ``sapt_basis='monomer'`` to the energy function, such as ::. energy('sapt2',sapt_basis='monomer'). This procedure leads to faster compuations, but it converges more slowly; towards the complete basis set limit than the default procedure, which uses; the dimer-centered basis set. Hence, monomer-centered basis SAPT; computations are not recommended. The open-shell SAPT0 code is not; compatible yet with monomer-centered computations. Computations with Mid-bonds; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SAPT computations with midbonds can be accomplished by adding a third ghost; monomer to the computation. For example ::. molecule dimer {; 0 1; He 0 0 5; --; 0 1; He 0 0 -5; --; 0 1; @He 0 0 0; }. Here the functions of the third monomer will be added to the virtual space of; the entire computation. Note that an error will be thrown if each atom in the; third monomer is not a ghost to prevent confusion with three-body SAPT which is; not currently supported by Psi4. Interpreting SAPT Results; ^^^^^^^^^^^^^^^^^^^^^^^^^. W",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:31981,simpl,simply,31981,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['simpl'],['simply']
Usability,"nt | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | vcc | | |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsdt | none | ecc | mrcc | mrc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | mrcc | mrcc | mrcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | mrcc | mrcc | mrcc |; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment properties same as grad; .. comment 2nd deriv ecc only for ccsd(t). Specification Details; ~~~~~~~~~~~~~~~~~~~~~. The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between |PSIfour| and; Cfour specification format are generally resolved behind the scenes:; not according to a *simple* rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a |PSIfour| module). Much can be gleaned by just running; inputs and inspecting the ``ZMAT`` passed to Cfour, but when questions; arise, here are the specifics, the governing laws. * Specifying a piece of input in |PSIfour| format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through :samp:`molecule; {optional_molecule_name} \\{...\\}`), memory (through :samp:`memory; {value} {unit}`), computational method (through . If Cfour keywords; are specified with values that contradict the |PSIfour| input,; execution is halted. As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the ``cfour_units; angstrom`` setting is permissible, since it concurs with the value; implied in",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:35168,simpl,simple,35168,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['simpl'],['simple']
Usability,"on 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:1485,simpl,simple,1485,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['simpl'],['simple']
Usability,"onda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2086,guid,guide,2086,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['guid'],['guide']
Usability,"onding (private) ``compute_pair(GaussianShell &s1,; GaussianShell &s2)`` function that computed the integrals and transformed them; to the spherical harmonic basis, if needed. The switch to Libint2 integrals; preserves this mechanism, but the ``compute_shell(int P, int Q)`` simply looks; up the appropriate Libint2-compatible shells and hands them off to the; re-written, private ``compute_pair()`` routines, which call Libint2 directly.; Therefore, any calls to shell-pair level integral computations should look the; same as before the introduction of Libint2, however access to the integrals has; changed, as described below. Accessing integrals; ................... Before the Libint2 transition, one electron integrals were computed in a flat; array, internally called `buffer_`, which was accessed through the integral; object's ``buffer()`` method. For integrals with multiple operators, e.g.,; dipole operators that have three distinct components, the buffer was simply; elongated by the appropriate amount and the caller was responsible for striding; through each resulting batch correctly. The Libint2 engines instead return a; list of pointers into each operator's batch of integrals, the ordering of which; are detailed on the Libint2 wiki. For this reason, the call to ``buffer()``; that returns a single buffer must be replaced with a call to ``buffer()`` to; get a list of pointers; we recommend that be assigned the type ``const auto; &``. For simple integrals, such as overlap or kinetic, only the buffer; corresponding to the zeroth element of this array contains integrals. Derivative Integrals; .................... The old one electron integral code used translational invariance relations to; minimze the number of integrals to be computed, leaving the caller with some; bookkeeping to do to compute all terms. For example, consider an overlap; integral: its value depends only on the relative separation of the two centers; and not their absolute positions in space. Therefore",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:14611,simpl,simply,14611,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simply']
Usability,"ongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new ma",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10939,simpl,simple,10939,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['simpl'],['simple']
Usability,"ookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23223,clear,clear,23223,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['clear'],['clear']
Usability,"or QM <sec:moleculeKeywords>`, the center of mass; coordinates in the XYZABC format and all coordinates in the POINTS format are; taken to be in Angstroms by default or in Bohr if ``units au`` is present.; Charge and multiplicity specifications are encoded in the fragment file; and so are not read from input. Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (``symmetry c1``; and ``no_com`` and ``no_reorient`` are implied). ::. molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP ; ~~~~~~~~~~~~. EFP can be invoked in similar fashion as other theories provided in |PSIfour|.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. |PSIfour| can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; :ref:`SCF <sec:scf>` code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:7918,simpl,simply,7918,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['simpl'],['simply']
Usability,"oundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help). For open-shell systems, the |detci__ms0| keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. .. index:: ; pair: CI; arbitrary-order perturbation theory. .. _`sec:arbpt`:. Arbitrary Order Perturbation Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The DETCI module is capable of computing energies for arbitrary; order |MollerPlesset| perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less). The simplest way to run high-order perturbation theory computations is to; call, *e.g.*, ``energy('mp10')`` to invoke a MP10 computation or; ``energy('zapt25')`` to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-or",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:12949,simpl,simplest,12949,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['simpl'],['simplest']
Usability,"parate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. .. warning:: Because p4c4 does not inspect the contents of the ``cfour {...}``; block, once the user specifies a |PSIfour|-style molecule, the; interface cannot judge whether a sandwich mode (drop the |PSIfour| molecule; and use the cfour block as the entirety of the ``ZMAT``) or a standard mode; (translate the |PSIfour| molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a |PSIfour| molecule and a molecule in the cfour block,; ``ZMAT`` *will* end up with multiple molecules and multiple ``*CFOUR(...)``; blocks, and it *will not* run. Therefore, if mixing sandwich and; standard or pure-\ |PSIfour| computations in an input file, place all; the sandwich jobs at the beginning before declaring |PSIfour|; molecules. If necessary, clear the cfour block with ``cfour {}`` before; commencing standard P4C4 jobs. .. _`sec:cfourOutput`:. Output; ~~~~~~. The output of :program:`xcfour` invoked from a |PSIfour| input file is; written to the |PSIfour| output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in :psivar:`CFOUR ERROR CODE`. .. rubric:: Energies & Scalars. After execution of :program:`xcfour` has completed, the output string is; extensively parsed and appropriate results are stored in :ref:`PSI; Variables <apdx:cfour_psivar>`. All gleaned variables are printed in the; Cfour output section of the |PSIfour| output file, as shown below. ::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.3384539525",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:21917,clear,clear,21917,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['clear'],['clear']
Usability,"persion terms. In SAPT, the ; Hamiltonian of the dimer is partitioned into contributions from each ; monomer and the interaction. .. math:: H=F_A+W_A+F_B+W_B+V. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, :math:`F`, the fluctuation potential of each monomer, :math:`W`, and the; interaction potential, :math:`V`. The monomer Fock operators, :math:`F_A+F_B`, are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of :math:`V`, :math:`W_A`, and :math:`W_B`. ; Through first-order in :math:`V`, electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in :math:`V`. For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887]_. Several truncations of the closed-shell SAPT expansion are available in the SAPT; module of |PSIfour|. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. :eq:`SAPT0`. .. math:: E_{SAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}; :label: SAPT0. In this notation, :math:`E^{(vw)}` defines the order in :math:`V` and in :math:`W_A+W_B`; the; subscript, :math:`resp`, indicates that orbital relaxation effects are included. .. math:: E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}; :label: SAPT2. .. math:: E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}; :label: SAPT2p. .. math:: E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}; :label: SAPT2pparen3. .. math:: E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}; :label: SAPT2p3. For SAPT(DFT), the SAPT ex",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:5725,simpl,simplest,5725,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['simpl'],['simplest']
Usability,"psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23390,Clear,Clear,23390,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['Clear'],['Clear']
Usability,"r more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CI. .. index::; pair: CI; theory. .. _`sec:ci`:. CI: Configuration Interaction; =============================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. Configuration interaction (CI) is one of the most general ways to; improve upon Hartree--Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a ""single-reference"" CI based; on reference function :math:`| \Phi_0 \rangle`, we can write the CI expansion as; follows:. .. math:: | \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab} ; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots; :label: CIexpansion. The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:1612,Simpl,Simply,1612,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['Simpl'],['Simply']
Usability,"re thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block::. molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. This specifies that there are two neutral, spin-singlet fragments. It is; possible to further specify that the overall complex is neutral and spin-singlet; by inserting another :samp:`{charge} {multiplicity}` line, separated from the first; molecule block by a `--` line. If any information is missing, |PSIfour| will set the; unprovided charges and multiplicities to be consistent with those that are given.; For example, the overall charge must be simply the sum of all fragment charges.; |PSIfour| further assumes that any unpaired electrons are coupled to yield the highest; possible :math:`M_s` value. Psi will also favor neutral, spin-singlet fragments.; For anything complicated, we strongly suggest explicitly providing the charge; and multiplicity of each fragment as well as the total molecular charge and multiplicity. For details and examples, see https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/chgmult.py#L105-L136 . Having defined a molecule containing fragments like ``eneyne`` above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (``extract_subsets(1)`` pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (``extract_subsets(1,2)`` pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:19966,simpl,simply,19966,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['simpl'],['simply']
Usability,"rent implementation. Inactive orbitals in the MCSCF may be specified by the ; |detci__restricted_docc| and |detci__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively,; in the MCSCF wavefunction. However, the form of these orbitals will; be optimized in the MCSCF procedure. It is also possible to ; literally freeze inactive orbitals in their original (SCF) form; using the |globals__frozen_docc| and |globals__frozen_uocc| keywords.; This is not normally what one wishes to do in an MCSCF computation; (*e.g.*, it complicates the computation of gradients),; but it can make the computations faster and is helpful in some; circumstances where unphysical mixing of inactive and active; occupied orbitals might occur. Presently, it is not possible; to mix the use of restricted and frozen orbitals in |PSIfour|. The division of the molecular orbitals into various subspaces such as RAS; spaces, or frozen vs active orbitals, etc, needs to be clear not only to; the detci program, but also at least to the transformation program; (and in the case of MCSCF, to other programs as well). Thus,; orbital subspace keywords such as |detci__ras1|, |detci__ras2|, |detci__ras3|, |detci__ras4|,; |globals__frozen_docc|, |globals__frozen_uocc|, |detci__active|, *etc.*, need to be; in the global ``set {...}`` block section of the input file so they may; be accessed by other modules. The ability to perform state-averaged ; [Docken:1972:4928]_ [Ruedenberg:1979:1069]_; CASSCF or RASSCF computations has been added. This is accomplished using the ; |detci__avg_states| keyword. See the :srcsample:`casscf-sp` and :srcsample:`casscf-sa-sp` examples in the ; samples directory and the example below. Basic Keywords; --------------. WFN = string; This may be ``casscf`` or ``rasscf``. REFERENCE = string; Any of the references allowed by detci should work (*i.e.*, not; {\tt uhf}), but there should be no reason not to use {\tt rhf}. DERTYPE = string; At presen",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:3322,clear,clear,3322,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['clear'],['clear']
Usability,"rm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0. IP-tuned LRC functionals effectively pin the chemical potential at :math:`N`; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fitting is found to be particularly critical for the qualitative; determination of excited state ordering in many low band-gap systems. For dispersion-bound complexes, a very simple additive empirical dispersion; potential, based on a damped Lennard-Jones potential can often produce; remarkably accurate results with KS-DFT. This approach was championed by Grimme,; whose ""-D2"" and more modern ""-D3"" approaches are a de facto industry standards. Minimal Input; ~~~~~~~~~~~~~. Minimal input for a KS-DFT computation is a molecule block, basis set; option, and a call to ``energy('b3lyp')`` (or other valid functional name)::. molecule {; He; }. set basis sto-3g. energy('b3lyp'). This will run a B3LYP Restricted Kohn--Sham (RKS) on neutral singlet Helium in; :math:`D_{2h}` spatial symmetry with a minimal ``STO-3G`` basis, 1.0E-6 energy; and density convergence criteria, a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess (because single atom). For more information on; any of these options, see the relevant section below, or in the preceding; :ref:`Hartree--Fock section <sec:scf>`. Spin/Symmetry Treatment; ~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| implements the most popular spin specializations",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:14012,simpl,simple,14012,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simple']
Usability,"rrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88]_ and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:2382,simpl,simple,2382,doc/sphinxman/source/mcscf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst,1,['simpl'],['simple']
Usability,"rticle density matrices (:math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`):. .. math:: . E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}. Here we used Einstein convention for the summation over the repeated indices.; :math:`h_p^q` and :math:`g_{pq}^{rs}` are the standard one- and two-electron integrals, and; :math:`\gamma_p^q` and :math:`\gamma_{pq}^{rs}` are the elements of :math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements :math:`\gamma_p^q` and; :math:`\gamma_{pq}^{rs}` cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, *i.e.*; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces :math:`\boldsymbol{\gamma_2}` in favor of its two-particle density cumulant:. .. math:: . \lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r. The one-particle density matrix is separated into its idempotent part; :math:`\boldsymbol{\kappa}` and a correction :math:`\boldsymbol{\tau}`:. .. math:: . \gamma_p^q = \kappa_p^q + \tau_p^q. The idempotent part of :math:`\boldsymbol{\gamma_1}` corresponds to a mean-field Hartree--Fock-like density,; while the non-idempotent correction :math:`\boldsymbol{\tau}`; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. .. math:: . E_{DCT} = \frac{1}{2} \left( h_p^q",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:2623,simpl,simple,2623,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['simpl'],['simple']
Usability,"rview of the one electron integrals; is shown in table :ref:`table:oei_impl_summary`, together with the implementation they use.; The tips below serve as a guide to what changed,; why it changed, and how to interface with |PSIfour|'s one-electron integral; machinery now. Calling ``compute_shell(int P, int Q)``; ....................................... The hand-implemented OS recursion code also took care of the Cartesian->pure; transformation (if required by the basis set). The mechanism for handling this; was to provide a public facing ``compute_shell(int P, int Q)`` method for the; caller; this then looked up the appropriate ``GaussianShell`` objects that were; passed into the corresponding (private) ``compute_pair(GaussianShell &s1,; GaussianShell &s2)`` function that computed the integrals and transformed them; to the spherical harmonic basis, if needed. The switch to Libint2 integrals; preserves this mechanism, but the ``compute_shell(int P, int Q)`` simply looks; up the appropriate Libint2-compatible shells and hands them off to the; re-written, private ``compute_pair()`` routines, which call Libint2 directly.; Therefore, any calls to shell-pair level integral computations should look the; same as before the introduction of Libint2, however access to the integrals has; changed, as described below. Accessing integrals; ................... Before the Libint2 transition, one electron integrals were computed in a flat; array, internally called `buffer_`, which was accessed through the integral; object's ``buffer()`` method. For integrals with multiple operators, e.g.,; dipole operators that have three distinct components, the buffer was simply; elongated by the appropriate amount and the caller was responsible for striding; through each resulting batch correctly. The Libint2 engines instead return a; list of pointers into each operator's batch of integrals, the ordering of which; are detailed on the Libint2 wiki. For this reason, the call to ``buffer()``; that retur",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:13914,simpl,simply,13914,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simply']
Usability,"s is at the second order:. .. math:: E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a + ; \epsilon_b - \epsilon_i - \epsilon_j}. In the DFMP2 module, the first-order contribution, or ""singles energy"" is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements :math:`f_{ia}` are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF |scf__e_convergence| and/or |scf__d_convergence| keywords; and try again. . To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme's Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist's integrals over spatial orbitals). .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:7243,simpl,simplification,7243,doc/sphinxman/source/dfmp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst,1,['simpl'],['simplification']
Usability,"s()`.; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a :py:func:`~psi4.core.print_variables` command, the; last will include :psivar:`SCF TOTAL ENERGY` but not; :psivar:`FCI TOTAL ENERGY`.; The entire dictionary of PSI variables can be obtained through; :py:func:`~psi4.core.get_variables`. .. _`sec:returnvals`:. Return Values; =============. Most of the usual user computation functions (*i.e.*,; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, and; :py:func:`~psi4.driver.frequency`) return simply the current total energy.; Consult the descriptions of other functions in :ref:`sec:psithonFunc` for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions. ::. # E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; ``return_wfn=True`` keyword argument additionally returns; :py:class:`~psi4.core.Wavefunction`. ::. # power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). .. _`sec:loops`:. Loops; =====. Python provides many control structures, any of which can be used within |PSIfour|; input files. For example, to loop over three basis sets, the following code can; be used:. .. code-blo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:11484,simpl,simple,11484,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['simpl'],['simple']
Usability,"s, defined by:. typedef struct {; ULI page;; ULI offset;; } psio_address;. The PSIO_ZERO defined as a global variable provides a; convenient input for the 0/0 page/offset.; III. Manipulating the table of contents. In addition, to the basic open/close/read/write functions; described above, the programmer also has a limited ability to directly; manipulate or examine the data in the TOC itself.; int psio_tocprint(ULI unit, FILE; *outfile): Prints the TOC of unit in a; readable form to outfile, including entry keywords and; starting/ending addresses.; int psio_toclen(ULI unit, FILE; *outfile): Returns the number of entries in the TOC; of unit.; int psio_tocdel(ULI unit, char; *key): Deletes the TOC entry corresponding to; key. NB: Do not use this function if you are not a PSI3; expert. This function only deletes the entry's reference from the TOC; itself and does not remove the corresponding data from the file.; Hence, it is possible to introduce data ""holes"" into the file.; IV. Some simple examples. The following code illustrates the basic use of the library, as well; as when/how the psio_init() and psio_done() functions; should be called in relation to initialization of libipv1. #include <stdio.h>; #include <libipv1/ip_lib.h>; #include <libpsio/psio.h>; #include <libciomr/libciomr.h>. std::string OutFileRMR;. int main(); {; int i, M, N;; double enuc, *some_data;; psio_address next; /* Special page/offset structure */. psi_start(&infile,&outfile,ψ_file_prefix,argc-1,argv+1,0);; ip_cwk_add(progid);. /* Initialize the I/O system */; psio_init(); psio_ipv1_config();. /* Open the file and write an energy */; psio_open(31, PSIO_OPEN_NEW);; enuc = 12.3456789; ; psio_write_entry(31, ""Nuclear Repulsion Energy"", (char *) &enuc,; sizeof(double));; psio_close(31,1);. /* Read M rows of an MxN matrix from a file */; some_data = init_matrix(M,N);. psio_open(91, PSIO_OPEN_OLD);; next = PSIO_ZERO;/* Note use of the special variable */; for(i=0; i < M; i++); psio_read(91, ""Some Coeffic",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html:8139,simpl,simple,8139,doc/sphinxman/source/attic/libpsio.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html,1,['simpl'],['simple']
Usability,"set Perturbation Theory: Application to; Alanine Tetrapeptide Conformational Analysis""; Most of our equations come from here.; Wang : doi:10.1063/1.5100175; J. Chem. Phys. 151, 044118 (2019); ""Analytic gradients for the single-reference; driven similarity renormalization group; second-order perturbation theory""; This theory gives gradients for a family of methods that add; another parameter to MP2, so these formulas apply to MP2 as well.; Table II of this paper will be crucial in explaining a trick that; does not appear in DiStasio. (See Sec. 3 here.); Aikens : doi:10.1007/s00214-003-0453-3; Theor. Chem. Acc. 110, 233-253 (2003); ""A derivation of the frozen-orbital unrestricted open-shell; and restricted closed-shell second-order perturbation theory; analytic gradient expressions""; This is the conventional-integral paper that DiStasio worked from to; get their DF gradients. This sometimes clarifies obscure points in; DiStasio, but they are not clear about one crucial point:; If one block of a quantity is not given, but its adjoint is, is the first; block zero, or the adjoint of the first block?; 2. Conventions; OPDM = One-particle density matrix; EWDM = Energy-weighted density matrix; All intermediates used in other functions are defined by comments starting DEFINITION.; When a previous intermediate is updated, it is defined by comments starting UPDATE.; 3. The Trick; The RHF gradient code does NOT use the formulas of the DiStasio or Aikens papers.; I can't find where the formulas come from, but they're very close to the DiStasio and; Aikens formulas, but there are consistent deviations from the formulas that are; accounted for by the addition of a ""magic"" term later on. In the comments, I refer to; this as the ""subtle trick."" Grep for that if you want to see where it appears.; 4. Cholesky Decomposition; Several times, the code needs to contract a two-index MO quantity by the four-index electron; repulsion integrals and end with a two-index AO quantity. If the two-in",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dfmp2/README.txt:1252,clear,clear,1252,psi4/src/psi4/dfmp2/README.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dfmp2/README.txt,1,['clear'],['clear']
Usability,"some kinetic energy term via the implicit one-body; Kohn--Sham orbitals. KS-DFT borrows much of the machinery of Hartree--Fock, as is; evident by looking at the energy expression,. .. math::. E_{\mathrm{KS}}; &= \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; :math:`\rho_\alpha` or :math:`\rho_\beta`\ ,. .. math:: \rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1). The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; :math:`\gamma_{\alpha\alpha}`, :math:`\gamma_{\alpha\beta}` or; :math:`\gamma_{\beta\beta}` to build an inhomogeneity; parameter. .. math:: \gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:4401,simpl,simply,4401,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simply']
Usability,"t :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |P",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:3542,simpl,simply,3542,doc/sphinxman/source/gcp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst,1,['simpl'],['simply']
Usability,"t and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good,",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:1393,guid,guides,1393,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['guid'],['guides']
Usability,"t of the molecule, in this case, 2.; # Many optional arguments are available, see the python file; frac.frac_nuke('wb97', molecule=h2o, nmax = 2). Dispersion Corrections; ~~~~~~~~~~~~~~~~~~~~~~. :ref:`DFT-D dispersion corrections are discussed here. <sec:dftd3>`. :ref:`HF-3c and PBEh-3c dispersion and BSSE corrections are discussed here. <sec:gcp>`. :ref:`DFT-NL dispersion corrections are discussed here. <sec:dftnl>`. Recommendations; ~~~~~~~~~~~~~~~. The KS-DFT code is quite new, but relatively complete. During code development,; emphasis was placed on flexibility of functional technology, efficiency for; medium to large systems in difficult electronic environments (*e.g.*, compact; spatial extents, diffuse basis sets, low band-gaps, LRC and/or hybrid GKS; functionals), and time to code completion. We are very interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases. Some rough guidelines for using the KS-DFT code are as follows,. * Use DF for the ERI algorithm wherever possible.; * |PSIfour| is a ""tight"" code, meaning we've set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; :ref:`SCF Convergence <table:conv_scf>` for default convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and Manipulation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. New DFT functionals can be created from scratch from with",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:32155,guid,guidelines,32155,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['guid'],['guidelines']
Usability,"ten Obara-Saika code. There are a; number of reasons motivating this switch. For methods requiring; potentials and fields evaluated at many external sites, such as PCM and; polarizable embedding, the efficiency of the one electron integrals can be rate; limiting. We also started to introduce integral screening, and it is important; to balance the screening used for one- and two-electron terms carefully, so this; is a good opportunity to re-evaluate the code. Finally, given the complexity; of the OS recursion code, the switch to an external library leaves a more; compact codebase to maintain. The one electron integrals which are not provided by Libint2; are now handled by a new implementation of the McMurchie-Davidson (M-D) algorithm,; leading to removal of the OS code in version 1.6. An overview of the one electron integrals; is shown in table :ref:`table:oei_impl_summary`, together with the implementation they use.; The tips below serve as a guide to what changed,; why it changed, and how to interface with |PSIfour|'s one-electron integral; machinery now. Calling ``compute_shell(int P, int Q)``; ....................................... The hand-implemented OS recursion code also took care of the Cartesian->pure; transformation (if required by the basis set). The mechanism for handling this; was to provide a public facing ``compute_shell(int P, int Q)`` method for the; caller; this then looked up the appropriate ``GaussianShell`` objects that were; passed into the corresponding (private) ``compute_pair(GaussianShell &s1,; GaussianShell &s2)`` function that computed the integrals and transformed them; to the spherical harmonic basis, if needed. The switch to Libint2 integrals; preserves this mechanism, but the ``compute_shell(int P, int Q)`` simply looks; up the appropriate Libint2-compatible shells and hands them off to the; re-written, private ``compute_pair()`` routines, which call Libint2 directly.; Therefore, any calls to shell-pair level integral computations sho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:13101,guid,guide,13101,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['guid'],['guide']
Usability,"th/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21383,guid,guide,21383,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['guid'],['guide']
Usability,"the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:psithonInput`:. ==================================; Psithon: Structuring an Input File; ==================================. To allow arbitrarily complex computations to be performed, |PSIfour| was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; |PSIfour| is distributed with an extensive test suite, described in section; :ref:`apdx:testSuite`; the input files for these test cases can be found in the; samples subdirectory of the top-level |PSIfour| source directory and should; serve as useful examples. .. index:: physical constants; .. _`sec:physicalConstants`:. Physical Constants; ==================. For convenience, the Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the |psirc| file ::. UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:1337,simpl,simpler,1337,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['simpl'],['simpler']
Usability,"the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions. Generalized Kohn--Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as ""implicit"" density; functionals, as the orbitals are themselves functionals of the Kohn--Sham; potential. The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree--Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note that the term; ""exact-exchange"" refers to the Hartree--Fock being the exact exchange energy of; the noninteracting quasiparticles, not the true electrons. Therefore, adding; 100% exact exchange is not physically reasonable, and will often lead to; extremely poor results. The fraction of exact-exchange, denoted :math:`\alpha`,; is often determined by adiabatic or heuristic arguments and is typically around; 25%. The addition of exact exchange borrows another piece from an existing; Hartree--Fock code, with the caveat that Hartree--Fock exchange is often much more; costly to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results. A more advanced GKS functional technology which has developed enormous; popularity in recent",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:9550,simpl,simplest,9550,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simplest']
Usability,"ties of various coupled-pair; methods, see [Wennmohs:2008:217]_\. What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; |Psifour|. We begin with the CISD wave function. .. math::; :label: CIwfn. | \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,. where we have chosen the intermediate normalization, :math:`\langle \Psi_0; | \Psi \rangle = 1`. The CISD correlation energy is given by. .. math::; :label: CIenergy; ; E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,. and the amplitudes can be determined by the solution to the coupled set of; equations:. .. math::; :label: CIeqns; ; 0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E_c | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - E_c | \Psi \rangle. The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, :math:`E_c`, with generalized shifts for the; doubles and singles equations, :math:`\Delta_{ij}` and :math:`\Delta_i`:. .. math::; :label: CEPAeqns; ; 0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle. These shifts approximate the effects of triple and quadruple excitations.; The values for :math:`\Delta_{ij}` and :math:`\Delta_i` used in several; coupled-pair methods are given in Table :ref:`CEPA Shifts; <table:cepa_shifts>`. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. .. _`table:cepa_shifts`:. +-------------------------+------------------------------------------------------------+----------------------------------------------+; | method | :math:`\Delta_{ij}` | :math:`\Delta_i` |; +=========================+==============================",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:10233,simpl,simple,10233,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['simpl'],['simple']
Usability,"tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Do not allow bypassing the above settings"" for admins and Save changes. >>> git push --atomic upstream master v1.3rc2. # pause here and push to upstream and let Azure complete for an; # on-tag Windows conda package and docs, not tag+1.dev1 .; # the atomic flag below pushes commit and tag together so only one CI; # which is necessary for Windows conda package to compute the right version.; # After push, can temporarily re-engage admins ""Do not allow ..."" protections.; # also, grab the docs build from GHA artifacts. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both comm",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:14694,pause,pause,14694,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['pause'],['pause']
Usability,"to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23931,Clear,Clear,23931,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['Clear'],['Clear']
Usability,"tpsi4/bin:$PATH; .. export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files; ..; .. Report problems at http://forum.psicode.org/t/report-conda-update-psi4-oddities-here/32; ..; ..; .. Nuclear Repulsion Energy..........................................PASSED; .. SAPT0 Eelst.......................................................PASSED; .. SAPT0 Eexch.......................................................PASSED; .. SAPT0 Eind........................................................PASSED; .. SAPT0 Edisp.......................................................PASSED; .. SAPT0 Etotal......................................................PASSED; ..; .. [ COMPLETE ]|#######################################################################################################| 100%. 7. Configure environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:25507,undo,undo,25507,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['undo'],['undo']
Usability,"tran Compiler <cmake:fortran>`. * :ref:`gdma <cmake:gdma>` |w---w| :ref:`[what is gdma?] <sec:gdma>` :source:`[gdma min version] <external/upstream/gdma/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`PCMSolver <cmake:pcmsolver>` |w---w| :ref:`[what is PCMSolver?] <sec:pcmsolver>`. * :ref:`Fortran Compiler <cmake:fortran>`; * zlib http://www.zlib.net/. * :ref:`simint <cmake:simint>` |w---w| :ref:`[what is simint?] <sec:simint>` :source:`[simint min version] <external/upstream/simint/CMakeLists.txt#L2>`. Additionally, there are runtime-loaded capabilities:. * :ref:`PylibEFP & libefp <cmake:libefp>` |w---w| :ref:`[what is LibEFP?] <sec:libefp>` :source:`[LibEFP min version] <external/upstream/libefp/CMakeLists.txt#L1>`. * cfour |w---w| :ref:`[what is CFOUR?] <sec:cfour>`. * dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>`. * simple-dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>` (Nov 2022; added by v1.7) preferred alternative to dftd3 https://github.com/dftd3/simple-dftd3. * gcp |w---w| :ref:`[what is gCP?] <sec:gcp>`. * mctc-gcp |w---w| :ref:`[what is gCP?] <sec:gcp>` (Nov 2022; added by v1.7) preferred alternative to gcp https://github.com/grimme-lab/gcp. * dftd4 |w---w| <sec:dftd3> https://github.com/dftd4/dftd4. * mrcc |w---w| :ref:`[what is MPCC?] <sec:mrcc>`. * v2rdm_casscf |w---w| :ref:`[what is v2rdm_casscf?] <sec:v2rdm_casscf>`. * :ref:`sns-mp2 <sec:snsmp2>` |w---w| https://github.com/DEShawResearch/sns-mp2/commits/master. * resp |w---w| https://github.com/cdsgroup/resp. * gpu_dfcc |w---w| https://github.com/edeprince3/gpu_dfcc/commits/master. * OpenFermion-Psi4 |w---w| https://github.com/quantumlib/OpenFermion. * :ref:`cppe <sec:cppe>` |w---w| https://github.com/maxscheurer/cppe. * mp2d |w---w| https://github.com/Chandemonium/MP2D. * :ref:`FockCI <sec:fockci>` |w---w| https://github.com/shannonhouck/psi4fockci. * cct3 |w---w| https://github.com/piecuch-group/cct3. * :ref:`adcc <sec:adcc>` |w---w| https://github.com/adc-connect/adcc.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:12603,simpl,simple-,12603,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['simpl'],['simple-']
Usability,"uess is the superposition of atomic; densities (SAD), discussed in. * ""Principles for a direct SCF approach to LCAO-MO ab-initio; calculations"", J. Alml\ |o_dots|\ f, K. Faegri, and K. Korsell,; *J. Comput. Chem.* **3**, 385 (1982).; (doi: `10.1002/jcc.540030314 <https://doi.org/10.1002/jcc.540030314>`_). * ""Starting SCF calculations by superposition of atomic; densities"", J. H. Van Lenthe, R. Zwaans, H. J. J. Van Dam,; and M. F. Guest, *J. Comput. Chem.* **27**, 926 (2006).; (doi: `10.1002/jcc.20393 <https://doi.org/10.1002/jcc.20393>`_). |PSIfour| also features a SAD natural orbital guess, an extended; H\ |u_dots|\ ckel guess that employs on-the-fly atomic calculations alike the SAD; guess, as well as a superposition of atomic potentials (SAP) guess; that is based on screening of atomic nuclei. The SAD natural orbitals,; H\ |u_dots|\ ckel and SAP guesses have been described in. * ""An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient"", S. Lehtola, *J. Chem. Theory Comput.* **15**,; 1593 (2019) (doi: `10.1021/acs.jctc.8b01089; <https://doi.org/10.1021/acs.jctc.8b01089>`_). Density Cumulant Theory (DCT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _`intro:dctcitations`:. |PSIfour| features several formulations of newly-developed density cumulant; theory (DCT), also known as density cumulant functional theory (DCFT).; The theory and benchmark of this theory are discussed in the following papers:. DC-06 (also known as DCT-06):. * ""Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,"" A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, *J. Chem. Phys.*; **133**, 174122 (2010).; (doi: `10.1063/1.3503657 <https://doi.org/10.1063/1.3503657>`_). * ""Analytic gradients for density cumulant functional theory: The; DCFT-06 model,"" A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, *J. Chem. Phys.* **137**, 054105 (2012).; (doi: `10",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:8342,simpl,simple,8342,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['simpl'],['simple']
Usability,"uld have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; NumPy. .. _`sec:numpy`:. Interface to NumPy; ==================. .. codeauthor:: Daniel G. A. Smith; .. sectionauthor:: Daniel G. A. Smith. *Module:* :source:`psi4/driver/p4util/numpy_helper.py`. Basics; ~~~~~~. Converting between the |PSIfour| Data classes and a NumPy array is easy through; various helper functions as detailed in this section. A quick overview NumPy; functionality can be found `here; <https://numpy.org/doc/stable/user/quickstart.html>`_. In addition,; numerous example of hybrid NumPy and Psi4 can be found at the `Psi4Numpy; project <https://github.com/psi4/psi4numpy>`_. Currently only the Matrix; and Vector objects support NumPy interfacing. Let us begin with a simple; conversion from these objects to a NumPy array::. >>> import psi4; >>> import numpy as np. # Build the Psi4 data objects; >>> mat = psi4.core.Matrix(3, 3) ; >>> vec = psi4.core.Vector(3). # Convert to a NumPy array; >>> numpy_mat = np.array(mat); >>> numpy_vec = np.array(vec). Here the data is copied into new NumPy arrays. NumPy arrays can be converted; back to |PSIfour| objects using the ``from_array`` interface::. >>> new_mat = psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst:1762,simpl,simple,1762,doc/sphinxman/source/numpy.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst,1,['simpl'],['simple']
Usability,"ut WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BSSE. .. index::; triple: setting; keywords; cp; triple: setting; keywords; vmfc; single: counterpoise correction. .. _`sec:cp()`:. Basis Set Superposition Corrections; ===================================. .. codeauthor:: Daniel G. A. Smith. .. autofunction:: psi4.driver.driver_nbody.nbody(func, method_string [, molecule, bsse_type, max_nbody, ptype, return_total_data]). The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers. **Examples :** ::. # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API; ---. .. autoclass:: psi4.driver.driver_nbody.BsseEnum; :members:; :undoc-members:. .. autopydantic_model:: psi4.driver.driver_nbody.ManyBodyComputer. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst:2491,undo,undoc-members,2491,doc/sphinxman/source/nbody.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst,1,['undo'],['undoc-members']
Usability,"var>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table belo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:2380,simpl,simply,2380,doc/sphinxman/source/mrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst,1,['simpl'],['simply']
Usability,"ven input. Although Python-driven; model allowed for great flexibility from a user's perspective, programming was; still relatively difficult because it required modifications to be made in C++; code. Since those early days, the code has undergone some important structural; changes that have greatly simplified the development workflow. These changes; were motivated by the realization that only a few bottlenecks exist in a typical; calculation; by focusing on optimized C++ implementations of these bottlenecks; and making these C++ functions available in Python, most of the code to implement; the overall calculation can be written in simpler Python code. Python is far; better suited to management tasks such as directory navigation and retrieval,; making it a natural choice for overall calculation layout than C++. With the; emergence of `NumPy <https://numpy.org/>`_ as a standard tool for executing almost any; mathematical technique efficiently in Python, the transitioning of code from; C++ to Python has facilitated a much simpler work flow for prototyping and; developing methods: this is detailed in the next section. .. _`sec:prog_psi4numpy`:. Rapid initial development using Psi4NumPy; -----------------------------------------. The `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ project [Smith:2018:3504]_ is the recommended; mechanism for developing and prototyping new methods in Psi4. Because; `NumPy <https://numpy.org/>`_ provides such a rich set of features for efficient linear; algebra, Fourier transforms, and general tensor manipulations, a massive number; of methods can be easily implemented very easily using that library. To; facilitate this workflow, |PSIfour| exports key quantities such as integrals,; densities and molecular orbitals in NumPy format. From this point, the; programmer can simply call the appropriate |PSIfour| functions to compute the; desired input quantities, retrieve them in NumPy format, and then write the; remaining code using standard Pyt",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:2833,simpl,simpler,2833,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['simpl'],['simpler']
Usability,"|PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.Manual>`_ may; also be useful, as may the many samples at :source:`samples/cfour`. * Set Cfour keywords just like |PSIfour| keywords. The names of keywords; are unchanged beyond a prepended ""cfour\_"". (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; |cfour__cfour_calc_level| and |cfour__cfour_reference| when used in; |PSIfour|.). * In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; |scf__reference| will appropriately set |cfour__cfour_reference|. For a; list of applicable keywords, see source of; muster_psi4options. * Consult :ref:`sec:cfourFunctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5108,simpl,simplest,5108,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,2,['simpl'],"['simplest', 'simply']"
