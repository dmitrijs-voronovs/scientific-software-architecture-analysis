quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Modifiability,"// this is a variable length char array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:13,variab,variable,13,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// this is a variable-sized array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFUtils.cxx:13,variab,variable-sized,13,tree/dataframe/src/RDFUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFUtils.cxx,1,['variab'],['variable-sized']
Modifiability,// this is compile variable as array index - can be any expression,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:19,variab,variable,19,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variable']
Modifiability,"// this is done only for adaptive KDE; // fill a temporary histo using nonadaptive KDE; // this histo is identical with the final output when using only nonadaptive KDE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:25,adapt,adaptive,25,tmva/tmva/src/KDEKernel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx,1,['adapt'],['adaptive']
Modifiability,"// this is just a dummy... needs to be implemented for each method; // individually (as long as we don't have it automatized via the; // configuration string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:137,config,configuration,137,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['config'],['configuration']
Modifiability,"// this is only a temporary solution for the testing; // FIXME:: Extend to a real test!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:65,Extend,Extend,65,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['Extend'],['Extend']
Modifiability,"// this is the event type (sig or bgd) assumed for variable transform; // naming and versioning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:51,variab,variable,51,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variable']
Modifiability,"// this is the shape of the output tensor (it is columnmajor by default); // and it is normally (depth, hw, bsize) and for dense layers (bsize, w, 1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:129,layers,layers,129,tmva/tmva/inc/TMVA/DNN/DeepNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h,1,['layers'],['layers']
Modifiability,"// this macro plots the correlation matrix of the various input; // variables used in TMVA (e.g. running TMVAnalysis.C). Signal and; // Background are plotted separately; // input: - Input file (result from TMVA),; // - use of colors or grey scale; // - use of TMVA plotting TStyle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/correlations.h:68,variab,variables,68,tmva/tmvagui/inc/TMVA/correlations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/correlations.h,4,['variab'],['variables']
Modifiability,"// this macro plots the correlations (as scatter plots) of; // the various input variable combinations used in TMVA (e.g. running; // TMVAnalysis.C). Signal and Background are plotted separately; // input: - Input file (result from TMVA),; // - normal/decorrelated/PCA; // - use of TMVA plotting TStyle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/correlationscatters.cxx:81,variab,variable,81,tmva/tmvagui/src/correlationscatters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/correlationscatters.cxx,2,['variab'],['variable']
Modifiability,"// this macro plots the correlations (as scatter plots); of; // the various input variable combinations used in TMVA (e.g. running; // TMVAnalysis.C). Signal and Background are plotted separately; // input: - Input file (result from TMVA),; // - normal/decorrelated/PCA; // - use of TMVA plotting TStyle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/correlationscatters.h:82,variab,variable,82,tmva/tmvagui/inc/TMVA/correlationscatters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/correlationscatters.h,2,['variab'],['variable']
Modifiability,"// this macro plots the distributions of the different input variables; // used in TMVA (e.g. running TMVAnalysis.C). Signal and Background are overlayed.; // input: - Input file (result from TMVA),; // - normal/decorrelated/PCA; // - use of TMVA plotting TStyle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/variables.h:61,variab,variables,61,tmva/tmvagui/inc/TMVA/variables.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/variables.h,4,['variab'],['variables']
Modifiability,"// this macro plots the reference distribuions for the Likelihood; // methods for the various input variables used in TMVA (e.g. running; // TMVAnalysis.C). Signal and Background are plotted separately; // input: - Input file (result from TMVA),; // - use of TMVA plotting TStyle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/likelihoodrefs.h:100,variab,variables,100,tmva/tmvagui/inc/TMVA/likelihoodrefs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/likelihoodrefs.h,2,['variab'],['variables']
Modifiability,"// this make sense if the histogram is not expanding (the x axis cannot be extended)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:75,extend,extended,75,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['extend'],['extended']
Modifiability,"// this return number of input variables for the method; // it can be used to deduce width of dense layer if specified as N+10; // where N is the number of input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:31,variab,variables,31,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,2,['variab'],['variables']
Modifiability,"// this set call-back, invoked when message received from client; // also at this moment thread id is configured which supposed to be used to handle requests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx:102,config,configured,102,tutorials/webgui/ping/ping.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx,1,['config'],['configured']
Modifiability,"// this set the cling variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:22,variab,variable,22,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variable']
Modifiability,"// this variable should not be used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:8,variab,variable,8,tmva/tmva/src/MethodLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx,1,['variab'],['variable']
Modifiability,"// this variable was already exported",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx:8,variab,variable,8,roofit/hs3/src/RooJSONFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx,1,['variab'],['variable']
Modifiability,"// this will create also the configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:29,config,configuration,29,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['config'],['configuration']
Modifiability,"// three layers are added, now pointer is on third layer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:9,layers,layers,9,tmva/tmva/inc/TMVA/DNN/DeepNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h,2,['layers'],['layers']
Modifiability,// tile config stack slot.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastTileConfig.cpp:8,config,config,8,interpreter/llvm-project/llvm/lib/Target/X86/X86FastTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastTileConfig.cpp,1,['config'],['config']
Modifiability,"// timing variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:10,variab,variables,10,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variables']
Modifiability,"// title = TString::Format(""(%i) Classifier (1/Backgr. Rejection) vs Sig. Eff. (1-vs-1 ROC curve)"", ++ic);; // MultiClassActionButton(cbar, title, TString::Format(""TMVA::efficienciesMulticlass(\""%s\"", \""%s\"")"", dataset.Data(), fName),; // ""Plots background rejection vs signal efficiencies (macro efficiencies.cxx) [\""ROC\"" stands; // ""; // ""for \""Receiver Operation Characteristics\""]"",; // buttonType, defaultRequiredClassifier);; /*; title = TString::Format( ""(%i) Parallel Coordinates (requires ROOT-version >= 5.17)"", ++ic );; MultiClassActionButton( cbar,; title,; TString::Format( ""TMVA::paracoor(\""%s\"")"", fName ),; ""Plots parallel coordinates for classifiers and input variables (macro paracoor.cxx, requires ROOT >= 5.17)"",; buttonType, defaultRequiredClassifier );. title =TString::Format( ""(%i) PDFs of Classifiers (requires \""CreateMVAPdfs\"" option set)"", ++ic );; MultiClassActionButton( cbar,; title,; TString::Format( ""TMVA::probas(\""%s\"")"", fName ),; ""Plots the PDFs of the classifier output distributions for signal and background - if requested (macro probas.cxx)"",; buttonType, defaultRequiredClassifier );. title = TString::Format( ""(%i) Likelihood Reference Distributiuons"", ++ic);; MultiClassActionButton( cbar,; title,; TString::Format( ""TMVA::likelihoodrefs(\""%s\"")"", fName ),; ""Plots to verify the likelihood reference distributions (macro likelihoodrefs.cxx)"",; buttonType, ""Likelihood"" );; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/TMVAMultiClassGui.cxx:678,variab,variables,678,tmva/tmvagui/src/TMVAMultiClassGui.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/TMVAMultiClassGui.cxx,1,['variab'],['variables']
Modifiability,"// to avoid the warning for un-used variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressTMath.cxx:36,variab,variables,36,math/mathcore/test/stressTMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressTMath.cxx,1,['variab'],['variables']
Modifiability,"// to get the default weight variable name; // Don't break here! The next imported data might be a RooDataSet,; // and in that case we want to take over its weight name instead of; // using the default one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:29,variab,variable,29,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['variab'],['variable']
Modifiability,"// todo: at some point, take care of integrator configurations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_RooFitCore.cxx:48,config,configurations,48,roofit/hs3/src/JSONFactories_RooFitCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_RooFitCore.cxx,1,['config'],['configurations']
Modifiability,"// todo: narrow this down; // For each kernel, what variables does it access directly or through; // callees",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:52,variab,variables,52,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variables']
Modifiability,// todo: set AppearanceType as variable that can be set from the; // outside...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:31,variab,variable,31,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variable']
Modifiability,"// token is not a potential variable name, skip it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx:28,variab,variable,28,tree/dataframe/src/RDFInterfaceUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx,1,['variab'],['variable']
Modifiability,"// transform variable x from [0, 1] --> [xmin, xmax]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:13,variab,variable,13,tmva/tmva/inc/TMVA/PDEFoam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h,1,['variab'],['variable']
Modifiability,"// transform variable x from [xmin, xmax] --> [0, 1]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:13,variab,variable,13,tmva/tmva/inc/TMVA/PDEFoam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h,1,['variab'],['variable']
Modifiability,"// transformation to decorrelate the variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx:37,variab,variables,37,tmva/tmva/src/VariableDecorrTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx,1,['variab'],['variables']
Modifiability,"// treat case where batchHeight is the batchSize in case of first Dense layers (then we need to set to fNet batch size)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:72,layers,layers,72,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['layers'],['layers']
Modifiability,"// true - The IT instruction was present in the; // input, we should not modify it.; // false - The IT instruction was added; // implicitly, we can extend it if that; // would be legal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:148,extend,extend,148,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,1,['extend'],['extend']
Modifiability,"// true if axis has variable bin sizes, false otherwise",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h:20,variab,variable,20,hist/hist/inc/TAxis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TAxis.h,1,['variab'],['variable']
Modifiability,"// true if the branch contains an integer variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeFormula.h:42,variab,variable,42,tree/treeplayer/inc/TTreeFormula.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TTreeFormula.h,1,['variab'],['variable']
Modifiability,"// true if we proxy a variable size leaf of a leaflist",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TBranchProxy.h:22,variab,variable,22,tree/treeplayer/inc/TBranchProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TBranchProxy.h,1,['variab'],['variable']
Modifiability,// try to compile code as draw variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:31,variab,variable,31,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variable']
Modifiability,"// try to guess default configuration; // (this part should be only in constructor because the null snapshot might change during HypoTestInversion",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:24,config,configuration,24,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['config'],['configuration']
Modifiability,"// try to read it via plugin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:22,plugin,plugin,22,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,1,['plugin'],['plugin']
Modifiability,"// try to reload plugin next time",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TImage.cxx:17,plugin,plugin,17,graf2d/graf/src/TImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TImage.cxx,1,['plugin'],['plugin']
Modifiability,"// tryCaptureVariable is called every time a DeclRef is formed,; // it can therefore have non-negigible impact on performances.; // For local variables and when there is no capturing scope,; // we can bailout early.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:142,variab,variables,142,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// tty configuration before grabbing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalConfigUnix.h:7,config,configuration,7,core/textinput/src/textinput/TerminalConfigUnix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalConfigUnix.h,1,['config'],['configuration']
Modifiability,"// tty configuration while active",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalConfigUnix.h:7,config,configuration,7,core/textinput/src/textinput/TerminalConfigUnix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalConfigUnix.h,1,['config'],['configuration']
Modifiability,"// turn adaptive sampling off if given",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:8,adapt,adaptive,8,roofit/roostats/src/ToyMCSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx,1,['adapt'],['adaptive']
Modifiability,"// two options: this is a static variable, or it is the enum value, the latter; // already exists, so check for it and move on if set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:33,variab,variable,33,bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx,1,['variab'],['variable']
Modifiability,// uint32_t defs[1]; /* void * (32-bit pointer) variable size */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:48,variab,variable,48,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,1,['variab'],['variable']
Modifiability,// uint32_t flags;; // Bits 0-1 are ownership.; // Bit 2 indicates an extended type encoding; // Bits 3-8 contain log2(aligment),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:70,extend,extended,70,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['extend'],['extended']
Modifiability,"// uncomment these if you dont want to use the plugin manager; // but you need to link also the needed minimization libraries (e.g Minuit and/or Minuit2); // #define MATH_NO_PLUGIN_MANAGER; // #define HAS_MINUIT; // #define HAS_MINUIT2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:47,plugin,plugin,47,math/mathcore/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx,1,['plugin'],['plugin']
Modifiability,"// unselect all variables first",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:16,variab,variables,16,tmva/tmva/src/VariableTransformBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx,1,['variab'],['variables']
Modifiability,"// unused variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx:10,variab,variables,10,tree/treeplayer/src/TTreePlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreePlayer.cxx,1,['variab'],['variables']
Modifiability,"// update config after fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h:10,config,config,10,math/mathcore/inc/Fit/Fitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/Fitter.h,1,['config'],['config']
Modifiability,"// update configuration file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:10,config,configuration,10,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['config'],['configuration']
Modifiability,"// update internal rho parameters; // redetermine static and/or adaptive bandwidth",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx:64,adapt,adaptive,64,roofit/roofit/src/RooNDKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx,1,['adapt'],['adaptive']
Modifiability,"// update the fit configuration after a fit using the obtained result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:18,config,configuration,18,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,2,['config'],['configuration']
Modifiability,"// use ""Nsmooth"" variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:17,variab,variable,17,tmva/tmva/src/PDF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx,1,['variab'],['variable']
Modifiability,"// use Minuit to find the contour of the likelihood function at the desired CL; // check the parameters; // variable index in minimizer; // is index in the RooArgList obtained from the profileLL variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:108,variab,variable,108,roofit/roostats/src/LikelihoodInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,"// use ROOT Plug-in manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:12,Plug-in,Plug-in,12,math/mathcore/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx,1,['Plug-in'],['Plug-in']
Modifiability,"// use ROOT Plugin Manager to create Minimizer concrete classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:12,Plugin,Plugin,12,math/mathcore/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx,1,['Plugin'],['Plugin']
Modifiability,"// use ROOT Plugin-Manager to instantiate GSLMCIntegrator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:12,Plugin,Plugin-Manager,12,math/mathcore/src/Integrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx,1,['Plugin'],['Plugin-Manager']
Modifiability,"// use a static variable to get default minimizer options for error def; // to see if user has changed it later on. If it has not been changed we set; // for the likelihood method an error def of 0.5; // t.b.d : multiply likelihood by 2 so have same error def definition as chi2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:16,variab,variable,16,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['variab'],['variable']
Modifiability,// use a temporary variable to avoid a use-after-free if the map's storage is; // reallocated,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp,1,['variab'],['variable']
Modifiability,"// use big enough string buffer to get variable name which is not used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:39,variab,variable,39,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variable']
Modifiability,"// use find bin in case axis can be extended",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:36,extend,extended,36,hist/hist/src/TH1Merger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx,1,['extend'],['extended']
Modifiability,"// use flexible hatches only possible when single pattern is used,; // otherwise it is not possible to adjust pattern dimension that both hatches match with each other",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:7,flexible,flexible,7,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['flexible'],['flexible']
Modifiability,"// use now plugin-manager for creating the GSL integrator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:11,plugin,plugin-manager,11,math/mathcore/src/Integrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx,1,['plugin'],['plugin-manager']
Modifiability,"// use original histogram as reference; // this is useful, eg, for discrete variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:76,variab,variables,76,tmva/tmva/src/PDF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx,1,['variab'],['variables']
Modifiability,"// use plugin manager to create instance of TFitEditor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootCanvas.cxx:7,plugin,plugin,7,gui/gui/src/TRootCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootCanvas.cxx,5,['plugin'],['plugin']
Modifiability,"// use s, i.e. skip possible OS and application prefix to Plugin.; // so that GetValue() takes properly care of returning the value; // for the specified OS and/or application",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:58,Plugin,Plugin,58,core/base/src/TPluginManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx,1,['Plugin'],['Plugin']
Modifiability,"// use special functor to extract pointer on gInterpreterLocal variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TInterpreter.cxx:63,variab,variable,63,core/meta/src/TInterpreter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TInterpreter.cxx,1,['variab'],['variable']
Modifiability,"// use the Fisher output simple as additional variable; // #### OK now what's going on...; // #### looks like we are setting up histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:46,variab,variable,46,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['variab'],['variable']
Modifiability,"// use the Fisher output simple as additional variable; // #### set up the binning info arrays; // #### each var has its own binning since some may be integers ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:46,variab,variable,46,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['variab'],['variable']
Modifiability,// used as dummy weight variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:24,variab,variable,24,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variable']
Modifiability,"// used for setting the variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx:24,variab,variables,24,roofit/roofit/src/RooNDKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx,1,['variab'],['variables']
Modifiability,"// user can change configurations only when create (recreate) options; // was specified. When first object will be saved, configurations will; // be frozen.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:19,config,configurations,19,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,2,['config'],['configurations']
Modifiability,"// using VariableMetricMinimizer, analytical derivatives",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/Quad1FMain.cxx:9,Variab,VariableMetricMinimizer,9,math/minuit2/test/MnTutorial/Quad1FMain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/Quad1FMain.cxx,1,['Variab'],['VariableMetricMinimizer']
Modifiability,"// v16i8 (select v16i1, v16i8, v16i8) does not have a proper; // lowering on KNL. In this case we convert it to; // v16i8 (select v16i8, v16i8, v16i8) and use AVX instruction.; // The same situation all vectors of i8 and i16 without BWI.; // Make sure we extend these even before type legalization gets a chance to; // split wide vectors.; // Since SKX these selects have a proper lowering.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:255,extend,extend,255,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// v4i32 Non Uniform Shifts.; // If the shift amount is constant we can shift each lane using the SSE2; // immediate shifts, else we need to zero-extend each lane to the lower i64; // and shift using the SSE2 variable shifts.; // The separate results can then be blended together.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:146,extend,extend,146,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,"['extend', 'variab']","['extend', 'variable']"
Modifiability,"// v8f16 without fp16 need to be extended to v8f32, which is more difficult to; // legalize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:33,extend,extended,33,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extended']
Modifiability,// vXi8 multiplications are always promoted to vXi16.; // Sub-128-bit types can be extended/packed more efficiently.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:83,extend,extended,83,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['extend'],['extended']
Modifiability,"// valid input formula - try to put into Cling (in case of no variables but only parameter we need to add the standard signature)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:62,variab,variables,62,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variables']
Modifiability,"// values in config table",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLStructure.cxx:13,config,config,13,io/sql/src/TSQLStructure.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLStructure.cxx,1,['config'],['config']
Modifiability,"// variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:3,variab,variable,3,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variable']
Modifiability,"// variable bin sizes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:3,variab,variable,3,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['variab'],['variable']
Modifiability,"// variable bin sizes in x or y, don't treat both cases separately",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:3,variab,variable,3,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,2,['variab'],['variable']
Modifiability,"// variable bin test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:3,variab,variable,3,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['variab'],['variable']
Modifiability,"// variable bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:3,variab,variable,3,hist/hist/src/THnBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx,1,['variab'],['variable']
Modifiability,"// variable dimensions (0 for x, 1 for y, 2, for z)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:3,variab,variable,3,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variable']
Modifiability,// variable doesn't exist on second path,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:3,variab,variable,3,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,"// variable exists, but has different definition",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:3,variab,variable,3,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,"// variable histos",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:3,variab,variable,3,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,1,['variab'],['variable']
Modifiability,"// variable index can't be handled in mask registers,; // extend vector to VR512/128",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,variab,variable,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,"['extend', 'variab']","['extend', 'variable']"
Modifiability,"// variable is an array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:3,variab,variable,3,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['variab'],['variable']
Modifiability,// variable length instruction,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:3,variab,variable,3,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,1,['variab'],['variable']
Modifiability,"// variable minimum and maximum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:3,variab,variable,3,roofit/roostats/src/HypoTestInverterResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx,1,['variab'],['variable']
Modifiability,"// variable mins and maxes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/BDT.cxx:3,variab,variable,3,tmva/tmvagui/src/BDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/BDT.cxx,2,['variab'],['variable']
Modifiability,"// variable not found, return null",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ParamHistFunc.cxx:3,variab,variable,3,roofit/histfactory/src/ParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ParamHistFunc.cxx,1,['variab'],['variable']
Modifiability,"// variable number of toys",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:3,variab,variable,3,roofit/roostats/src/FrequentistCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx,4,['variab'],['variable']
Modifiability,"// variable of the system - order how cities are visited",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:3,variab,variable,3,math/mathmore/test/simanTSP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx,1,['variab'],['variable']
Modifiability,"// variable parameter with limits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,variab,variable,3,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['variab'],['variable']
Modifiability,"// variable parameter without limits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,variab,variable,3,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['variab'],['variable']
Modifiability,"// variable parameter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,variab,variable,3,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['variab'],['variable']
Modifiability,"// variable ranking",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h:3,variab,variable,3,tmva/tmva/inc/TMVA/TransformationHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h,2,['variab'],['variable']
Modifiability,"// variable ranking; // Log() << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,variab,variable,3,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['variab'],['variable']
Modifiability,"// variable selection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h:3,variab,variable,3,tmva/tmva/inc/TMVA/VariableTransformBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableTransformBase.h,1,['variab'],['variable']
Modifiability,"// variable used in evaluation, etc (mostly the MVA)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:3,variab,variable,3,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variable']
Modifiability,"// variable-length array have negative DATATYPE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:3,variab,variable-length,3,graf2d/fitsio/src/TFITS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx,1,['variab'],['variable-length']
Modifiability,"// variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:3,variab,variables,3,tmva/tmva/inc/TMVA/Tools.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h,2,['variab'],['variables']
Modifiability,"// variables array used for GetMvaValue",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:3,variab,variables,3,tmva/pymva/inc/TMVA/MethodPyKeras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h,2,['variab'],['variables']
Modifiability,"// variables for JsMVA",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h:3,variab,variables,3,tmva/tmva/inc/TMVA/SimulatedAnnealing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/SimulatedAnnealing.h,1,['variab'],['variables']
Modifiability,"// variables for JsMVA (interactive training in jupyter notebook)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:3,variab,variables,3,tmva/tmva/inc/TMVA/NeuralNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h,1,['variab'],['variables']
Modifiability,// variables for result,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,variab,variables,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variables']
Modifiability,"// variables loop",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:3,variab,variables,3,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['variab'],['variables']
Modifiability,"// variables may have been initialized in Begin()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:3,variab,variables,3,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['variab'],['variables']
Modifiability,"// variance threshold variable transformation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:22,variab,variable,22,tmva/tmva/src/DataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx,1,['variab'],['variable']
Modifiability,// vector float is unsupported for ZVector unless we have the; // vector-enhancements facility 1 (ISA revision 12).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/DeclSpec.cpp:73,enhance,enhancements,73,interpreter/llvm-project/clang/lib/Sema/DeclSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/DeclSpec.cpp,1,['enhance'],['enhancements']
Modifiability,"// vector of input variables used in MVA; // histogram binning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:19,variab,variables,19,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variables']
Modifiability,// vertical layers,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:12,layers,layers,12,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['layers'],['layers']
Modifiability,"// virtual inheritance gives problem when making dictionary on Windows",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/LinkDef.h:11,inherit,inheritance,11,math/mathmore/inc/Math/LinkDef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/LinkDef.h,1,['inherit'],['inheritance']
Modifiability,"// void @llvm.experimental.stackmap(i64 <id>, i32 <numShadowBytes>,; // [live variables...])",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:78,variab,variables,78,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,2,['variab'],['variables']
Modifiability,"// void TFumiliMinimizer::FcnGrad( int &, double * g, double & f, double * x , int iflag ) {; // // implementation of FCN static function used internally by TFumili.; // // Adapt IMultiGradFunction interface to TFumili FCN static function in the case of user; // // provided gradient.; // ROOT::Math::IMultiGradFunction * gFunc = dynamic_cast<ROOT::Math::IMultiGradFunction *> ( fgFunc);; // assert(gFunc != 0);; // f = gFunc->operator()(x);; // // calculates also derivatives; // if (iflag == 2) gFunc->Gradient(x,g);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:173,Adapt,Adapt,173,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,1,['Adapt'],['Adapt']
Modifiability,"// void fit1DHist(); // {; // vector<double> min(1);; // min[0] = 0.;; // vector<double> max(1);; // max[0] = 10.;; // vector<int> nbins(1);; // nbins[0] = 10;; // TH1D* h1 = new TH1D(""1D Original Hist Fit"", ""h1-Original"", nbins[0], min[0], max[0]);; // TH1D* h2 = new TH1D(""1D Blanked Hist Fit"", ""h1-Blanked"", nbins[0], min[0], max[0]);; // TF1* f1 = new TF1(""MyGaus"", ""[0]*TMath::Gaus([1],[2])"", min[0], max[0]);; // f1->SetParameters(10., 5., 2.);; // h1->FillRandom(""MyGaus"",1000);; // cout << ""Retrieving the Sparse Data Structure"" << endl;; // ROOT::Fit::SparseData d(h1);; // ROOT::Fit::FillData(d, h1, 0);; // ROOT::Fit::BinData* bd = d.GetBinData();; // cout << ""Filling second histogram"" << endl;; // for ( unsigned int i = 0; i < bd->NPoints(); ++i); // {; // const double* x;; // double value, error;; // x = bd->GetPoint(i, value, error);; // value = (value)?value:-10;; // h2->Fill(x[0], value);; // }; // TCanvas* c = new TCanvas(""Histogram 2D"");; // c->Divide(1,2);; // c->cd(1);; // h1->Draw(""lego2Z"");; // c->cd(2);; // h2->Draw(""lego2Z"");; // // Fit preparation; // bool ret;; // ROOT::Fit::Fitter fitter;; // ROOT::Math::WrappedMultiTF1 wf1(*f1);; // fitter.Config().SetMinimizer(""TMinuit"");; // cout << ""\n ******* Chi2Fit with Original BinData *******"" << endl;; // ROOT::Fit::BinData bdOriginal;; // ROOT::Fit::FillData(bdOriginal, h1, 0);; // ret = fitter.Fit(bdOriginal, wf1);; // fitter.Result().Print(std::cout);; // if (!ret); // std::cout << ""Fit Failed "" << std::endl;; // cout << ""\n ******* Chi2Fit with BinData and NoCeros *******"" << endl;; // ROOT::Fit::BinData* bdNoCeros = d.GetBinDataNoCeros();; // cout << ""bdOriginal:\n"" << bdOriginal << endl;; // cout << ""bdNoCeros:\n"" << *bdNoCeros << endl;; // cout << ""Equals: "" << (bdOriginal == *bdNoCeros) << endl;; // ret = fitter.Fit(*bdNoCeros, wf1);; // fitter.Result().Print(std::cout);; // if (!ret); // std::cout << ""Fit Failed "" << std::endl;; // delete bd;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx:1178,Config,Config,1178,math/mathcore/test/fit/SparseFit3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx,1,['Config'],['Config']
Modifiability,"// void|i64 @llvm.experimental.patchpoint.void|i64(i64 <id>,; // i32 <numBytes>,; // i8* <target>,; // i32 <numArgs>,; // [Args...],; // [live variables...])",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:143,variab,variables,143,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,2,['variab'],['variables']
Modifiability,// vpmovwb; // sign extend is vpcmpeq+maskedmove+vpmovdw+vpacksswb; // zero extend is vpcmpeq+maskedmove+vpmovdw+vpsrlw+vpackuswb,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:20,extend,extend,20,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,2,['extend'],['extend']
Modifiability,"// vscale is not necessarily a power-of-2, which means we cannot guarantee; // an overflow to zero when updating induction variables and so an; // additional overflow check is required before entering the vector loop.; // Get the maximum unsigned value for the type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:123,variab,variables,123,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variables']
Modifiability,// vt.maskcn for XVentanaCondOps.; // FP to 32 bit int conversions for RV64. These are used to keep track of the; // result being sign extended to 64 bit. These saturate out of range inputs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:135,extend,extended,135,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['extend'],['extended']
Modifiability,// warn: call to 'pthread_once' uses the local variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers/unix_api_example.c:47,variab,variable,47,interpreter/llvm-project/clang/docs/analyzer/checkers/unix_api_example.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers/unix_api_example.c,1,['variab'],['variable']
Modifiability,"// we can extend eventually the axis if histogram is capable of doing it; // by using FindBin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:10,extend,extend,10,hist/hist/src/TH1Merger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx,1,['extend'],['extend']
Modifiability,"// we cannot mix a compiled class with an emulated class in the inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TKeySQL.cxx:64,inherit,inheritance,64,io/sql/src/TKeySQL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TKeySQL.cxx,2,['inherit'],['inheritance']
Modifiability,// we don't have any instance variables - insert super struct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp:30,variab,variables,30,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,1,['variab'],['variables']
Modifiability,"// we don't need to check anymore for the case of non empty histograms containing labels.; // If we have some labels set and the axis is not extendable the LabelsMerge function handles; // that case correctly and falls back to a numeric merge",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:141,extend,extendable,141,hist/hist/src/TH1Merger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx,1,['extend'],['extendable']
Modifiability,"// we expect application to pass a reference to an inheriting class and take advantage of polymorphism",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/TMPClient.h:51,inherit,inheriting,51,core/multiproc/inc/TMPClient.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/TMPClient.h,2,"['inherit', 'polymorphi']","['inheriting', 'polymorphism']"
Modifiability,// we extend the dst string with the src; // finalStrLength >= dstStrLength,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp:6,extend,extend,6,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CStringChecker.cpp,1,['extend'],['extend']
Modifiability,"// we need silent file here because we need fast classification results; // getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:94,variab,variables,94,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,"// we need to add the variables in fVars all of them before x[n]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:22,variab,variables,22,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variables']
Modifiability,"// we need to be sure that all other variables are added with position less",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:37,variab,variables,37,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variables']
Modifiability,"// we want to make sure all variables are read in the order they are defined",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:28,variab,variables,28,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,3,['variab'],['variables']
Modifiability,"// we will miss last variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:21,variab,variable,21,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variable']
Modifiability,"// we will store computed adaptive weights in weights",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:26,adapt,adaptive,26,hist/hist/src/TKDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx,1,['adapt'],['adaptive']
Modifiability,"// we'll use the _minimizedUserPlacement variable as a ""not arranged"" flag",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMdiMainFrame.cxx:41,variab,variable,41,gui/gui/src/TGMdiMainFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGMdiMainFrame.cxx,1,['variab'],['variable']
Modifiability,"// weakCrossingSIVtest -; // From the paper, Practical Dependence Testing, Section 4.2.2; //; // When we have a pair of subscripts of the form [c1 + a*i] and [c2 - a*i],; // where i is an induction variable, c1 and c2 are loop invariant,; // and a is a constant, we can solve it exactly using the; // Weak-Crossing SIV test.; //; // Given c1 + a*i = c2 - a*i', we can look for the intersection of; // the two lines, where i = i', yielding; //; // c1 + a*i = c2 - a*i; // 2a*i = c2 - c1; // i = (c2 - c1)/2a; //; // If i < 0, there is no dependence.; // If i > upperbound, there is no dependence.; // If i = 0 (i.e., if c1 = c2), there's a dependence with distance = 0.; // If i = upperbound, there's a dependence with distance = 0.; // If i is integral, there's a dependence (all directions).; // If the non-integer part = 1/2, there's a dependence (<> directions).; // Otherwise, there's no dependence.; //; // Can prove independence. Failing that,; // can sometimes refine the directions.; // Can determine iteration for splitting.; //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:198,variab,variable,198,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// weakZeroDstSIVtest -; // From the paper, Practical Dependence Testing, Section 4.2.2; //; // When we have a pair of subscripts of the form [c1 + a*i] and [c2],; // where i is an induction variable, c1 and c2 are loop invariant,; // and a is a constant, we can solve it exactly using the; // Weak-Zero SIV test.; //; // Given; //; // c1 + a*i = c2; //; // we get; //; // i = (c2 - c1)/a; //; // If i is not an integer, there's no dependence.; // If i < 0 or > UB, there's no dependence.; // If i = 0, the direction is <= and peeling the; // 1st iteration will break the dependence.; // If i = UB, the direction is >= and peeling the; // last iteration will break the dependence.; // Otherwise, the direction is *.; //; // Can prove independence. Failing that, we can sometimes refine; // the directions. Can sometimes show that first or last; // iteration carries all the dependences (so worth peeling).; //; // (see also weakZeroSrcSIVtest); //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:191,variab,variable,191,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// weakZeroSrcSIVtest -; // From the paper, Practical Dependence Testing, Section 4.2.2; //; // When we have a pair of subscripts of the form [c1] and [c2 + a*i],; // where i is an induction variable, c1 and c2 are loop invariant,; // and a is a constant, we can solve it exactly using the; // Weak-Zero SIV test.; //; // Given; //; // c1 = c2 + a*i; //; // we get; //; // (c1 - c2)/a = i; //; // If i is not an integer, there's no dependence.; // If i < 0 or > UB, there's no dependence.; // If i = 0, the direction is >= and peeling the; // 1st iteration will break the dependence.; // If i = UB, the direction is <= and peeling the; // last iteration will break the dependence.; // Otherwise, the direction is *.; //; // Can prove independence. Failing that, we can sometimes refine; // the directions. Can sometimes show that first or last; // iteration carries all the dependences (so worth peeling).; //; // (see also weakZeroDstSIVtest); //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:191,variab,variable,191,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['variab'],['variable']
Modifiability,// weak_import only applies to variable & function declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['variab'],['variable']
Modifiability,"// what each variable should contain:; // varexp0 - original expression eg ""a:b>>htest""; // hname - name of new or old histogram; // hkeep - flag if to keep new histogram; // hnameplus - flag if to add to current histo; // i - length of variable expression stipped of everything after "">>""; // varexp - variable expression stipped of everything after "">>""; // fOldHistogram - pointer to hist hname; // elist - pointer to selection list of hname",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSelectorDraw.cxx:13,variab,variable,13,tree/treeplayer/src/TSelectorDraw.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSelectorDraw.cxx,3,['variab'],['variable']
Modifiability,"// when Mathmore is not built only possible type is ADAPTIVE. There is no other choice",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:52,ADAPT,ADAPTIVE,52,math/mathcore/src/Integrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx,1,['ADAPT'],['ADAPTIVE']
Modifiability,"// when not an embedded dialog, update configuration from server",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/browser/controller/FileDialog.controller.js:39,config,configuration,39,ui5/browser/controller/FileDialog.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/browser/controller/FileDialog.controller.js,1,['config'],['configuration']
Modifiability,"// when not configured, channel 1 is used - main widget",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/modules/webwindow.mjs:12,config,configured,12,js/modules/webwindow.mjs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/modules/webwindow.mjs,1,['config'],['configured']
Modifiability,"// when of reading from a file fKernelFunction is a nullptr; // we need to recreate Kernel class (with adaptive weights if needed) and; // recreate kernel function pointer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:103,adapt,adaptive,103,hist/hist/src/TKDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx,1,['adapt'],['adaptive']
Modifiability,"// when rebinning in variable bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:21,variab,variable,21,hist/hist/src/TProfile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx,1,['variab'],['variable']
Modifiability,"// when style not configured, it will be ignored",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:18,config,configured,18,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['config'],['configured']
Modifiability,"// when there are no variables but only parameter we still need to ad; //Bool_t hasBoth = hasVariables && hasParameters;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:21,variab,variables,21,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variables']
Modifiability,"// when timeout configured, object is prepared for rendering",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:16,config,configured,16,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['config'],['configured']
Modifiability,"// when using adaptive mirror a much; // smaller bandwidth is used. Not sure this is correct; // seee line TKDE.cxx:770",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx:14,adapt,adaptive,14,hist/hist/test/test_tkde.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx,1,['adapt'],['adaptive']
Modifiability,"// when we are done, exprWithVars willl be the same as preProcessedExpr but column names will be substituted with; // the dummy variable names in varNames",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx:128,variab,variable,128,tree/dataframe/src/RDFInterfaceUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx,1,['variab'],['variable']
Modifiability,"// whether console is configured",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplayWin.h:22,config,configured,22,core/textinput/src/textinput/TerminalDisplayWin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplayWin.h,1,['config'],['configured']
Modifiability,"// whether the console is configured",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderWin.h:26,config,configured,26,core/textinput/src/textinput/StreamReaderWin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderWin.h,1,['config'],['configured']
Modifiability,"// whether tty is configured",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplayUnix.h:18,config,configured,18,core/textinput/src/textinput/TerminalDisplayUnix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplayUnix.h,1,['config'],['configured']
Modifiability,"// whether we configured the tty",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderUnix.h:14,config,configured,14,core/textinput/src/textinput/StreamReaderUnix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderUnix.h,1,['config'],['configured']
Modifiability,"// while 3D canvas uses area also for the axis labels, extend area relative to normal frame",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:55,extend,extend,55,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['extend'],['extend']
Modifiability,"// will be 0 for a Method; 1 for a Variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:35,Variab,Variable,35,tmva/tmva/src/Classification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx,2,['Variab'],['Variable']
Modifiability,"// will be filled with the selected variables, (targets)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:36,variab,variables,36,tmva/tmva/src/VariableRearrangeTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx,1,['variab'],['variables']
Modifiability,"// will be filled with the selected variables, targets, (spectators)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:36,variab,variables,36,tmva/tmva/src/VariableNormalizeTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx,5,['variab'],['variables']
Modifiability,"// will scan the first axes variable ... if there is none, specify the first poi as the axis var",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:28,variab,variable,28,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['variab'],['variable']
Modifiability,"// with binned not adaptive it is good for high statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx:19,adapt,adaptive,19,hist/hist/test/test_tkde.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx,1,['adapt'],['adaptive']
Modifiability,"// with minmax approach 2*n bins replaced by 2 bins with min and max value inside the range; // this let display histogram showing dynamic values range properly; // configured when more than 3 bins should be merged",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/src/RHistDrawable.cxx:165,config,configured,165,hist/histdrawv7/src/RHistDrawable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/src/RHistDrawable.cxx,1,['config'],['configured']
Modifiability,// with streamers one need to extend existing array,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:30,extend,extend,30,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['extend'],['extend']
Modifiability,"// without prior specification of variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h:34,variab,variables,34,tmva/tmva/inc/TMVA/Reader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Reader.h,1,['variab'],['variables']
Modifiability,"// write MVA variable distributions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:13,variab,variable,13,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['variab'],['variable']
Modifiability,"// write extrema of input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:26,variab,variables,26,tmva/tmva/src/MethodCFMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx,1,['variab'],['variables']
Modifiability,"// write number of layers (sum of: input + output + hidden)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:19,layers,layers,19,tmva/tmva/src/MethodCFMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx,1,['layers'],['layers']
Modifiability,"// write number of variables and classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:19,variab,variables,19,tmva/tmva/src/MethodCFMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx,1,['variab'],['variables']
Modifiability,"// write the event-variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:19,variab,variables,19,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['variab'],['variables']
Modifiability,"// write the variables ""xi"" as additional parameters ""[npar+i]""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:13,variab,variables,13,tmva/tmva/src/MethodFDA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx,1,['variab'],['variables']
Modifiability,"// write the variables, targets and spectator variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:13,variab,variables,13,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,2,['variab'],['variables']
Modifiability,"// write variable info",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:9,variab,variable,9,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['variab'],['variable']
Modifiability,"// wve adjust for variable bin sizes; ////////////////////////////////////////////////////////////////////////////////; /// Perform boundary safe 'intOrder'-th interpolation of weights in dimension 'dim'; /// at current value 'xval'; /// \param[in] iDim Index of the histogram dimension along which to interpolate.; /// \param[in] xval Value of histogram variable at dimension `iDim` for which; /// we want to interpolate the histogram weight.; /// \param[in] centralIdx Index of the bin that the point at which we; /// interpolate the histogram weight falls into; /// (can be obtained with `RooDataHist::calcTreeIndex`).; /// \param[in] intOrder Interpolation order, i.e. how many neighbouring bins are; /// used for the interpolation.; /// \param[in] correctForBinSize Enable the inverse bin volume correction factor.; /// \param[in] cdfBoundaries Enable the special boundary condition for a cdf:; /// underflow bins are assumed to have weight zero and; /// overflow bins have weight one. Otherwise, the; /// histogram is mirrored at the boundaries for the; /// interpolation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:18,variab,variable,18,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,2,['variab'],['variable']
Modifiability,// x86-64 implicitly zero-extends 32-bit results in 64-bit registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:26,extend,extends,26,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['extend'],['extends']
Modifiability,// x86_64 distinguishes movq foo@GOTPCREL so that the linker can; // rewrite the movq to an leaq at link time if the symbol ends up in; // the same linkage unit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MachObjectWriter.cpp:69,rewrite,rewrite,69,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MachObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MachObjectWriter.cpp,1,['rewrite'],['rewrite']
Modifiability,"// xor(x, x-1) is common idioms that will clear all but lowest set; // bit. If we have a single known bit in x, we can clear all bits; // above it.; // TODO: xor(x, x-1) is often rewritting as xor(x, x-C) where C !=; // -1 but for the purpose of demanded bits (xor(x, x-C) &; // Demanded) == (xor(x, x-1) & Demanded). Extend the xor pattern; // to use arbitrary C if xor(x, x-C) as the same as xor(x, x-1).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:318,Extend,Extend,318,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['Extend'],['Extend']
Modifiability,"// you found the best separation cut for each variable, now compare the variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:46,variab,variable,46,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,// zero-extend vector extract element,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,1,['extend'],['extend']
Modifiability,"// zext, sext -> zext, because sext can't sign extend after zext",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp:47,extend,extend,47,interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,1,['extend'],['extend']
Modifiability,"// {0,+,1} --> Insert a canonical induction variable into the loop!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:44,variab,variable,44,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['variab'],['variable']
Modifiability,"// {; // if (gDebug>0); // Info(""FindBin"",""Label %s is not in the list and the axis cannot be extended - the entry will be added in the underflow bin"",label);; // return 0;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:94,extend,extended,94,hist/hist/src/TAxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx,1,['extend'],['extended']
Modifiability,// {; // static std::vector<double> err;; // err.resize(fDim);; // return &err.front();; // }; /** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h:143,variab,variable,143,math/mathmore/inc/Math/GSLNLSMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h,2,['variab'],"['variable', 'variables']"
Modifiability,"// |Remainder| is always <= |Dividend|. If D is 32-bit, then so is R.; // DIV doesn't work because of the edge case 0xf..f 8000 0000 / (long)-1; // Logical operations use a sign extended 12-bit immediate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:178,extend,extended,178,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,1,['extend'],['extended']
Modifiability,// |X| / |Y| --> 0; //; // We require that 1 operand is a simple constant. That could be extended to; // 2 variables if we computed the sign bit for each.; //; // Make sure that a constant is not the minimum signed value because taking; // the abs() of that is undefined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:89,extend,extended,89,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,"['extend', 'variab']","['extended', 'variables']"
Modifiability,"// || (*itrVariables==itrVarInfo->GetExpression())) {; // don't compare the expression, since the user might take two times the same expression, but with different labels; // and apply different transformations to the variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:218,variab,variables,218,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,2,['variab'],['variables']
Modifiability,"//! Indicated whether the fClass inherits from TObject.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TFormLeafInfo.h:33,inherit,inherits,33,tree/treeplayer/inc/TFormLeafInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TFormLeafInfo.h,1,['inherit'],['inherits']
Modifiability,"//! Internal traversal variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveGridStepper.h:23,variab,variables,23,graf3d/eve/inc/TEveGridStepper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveGridStepper.h,1,['variab'],['variables']
Modifiability,"//! Realloc function to be used when extending the buffer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h:37,extend,extending,37,core/base/inc/TBuffer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TBuffer.h,1,['extend'],['extending']
Modifiability,"//! largest box diagonal seen in OfInterest() - used when; //! bootstrapping interest box; // Internal cache update - const as the actual camera configuration is unaffected",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLCamera.h:145,config,configuration,145,graf3d/gl/inc/TGLCamera.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLCamera.h,1,['config'],['configuration']
Modifiability,"//! pointer on members counter, can be inherit from parent stack objects",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferJSON.cxx:39,inherit,inherit,39,io/io/src/TBufferJSON.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferJSON.cxx,1,['inherit'],['inherit']
Modifiability,"//! temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues); // helper variables for JsMVA",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:113,variab,variables,113,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variables']
Modifiability,"//! temporary variable used for num.stability",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:14,variab,variable,14,math/minuit/inc/TLinearFitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h,1,['variab'],['variable']
Modifiability,//!< @brief index for next read - 1 (i.e. increment tail BEFORE read); /**; * @brief Multiple methods of LineWrapper may decide to flush part of the buffer to; * free up space. The contract of process() says that only 1 line is output. So; * this variable is used to track whether something has output a line. It is; * reset at the beginning of process() and checked at the end to decide if; * output has already occurred or is still needed.; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:247,variab,variable,247,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['variab'],['variable']
Modifiability,"//!base offset for TObject if the element inherits from it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TStreamerElement.h:42,inherit,inherits,42,core/meta/inc/TStreamerElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TStreamerElement.h,1,['inherit'],['inherits']
Modifiability,"//""Extended"" fonts for gl-pad.; //fgPadFontStart + ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLFontManager.cxx:3,Extend,Extended,3,graf3d/gl/src/TGLFontManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLFontManager.cxx,1,['Extend'],['Extended']
Modifiability,"//#ifdef TEX; /**. A variable names bgamma appears in several places in this file. A few; words of elaboration are needed to make its meaning clear. On page 69; of Misner, Thorne and Wheeler, (Exercise 2.7) the elements of the matrix; for a general Lorentz boost are given as. \f[ \Lambda^{j'}_k = \Lambda^{k'}_j; = (\gamma - 1) n^j n^k + \delta^{jk} \f]. where the n^i are unit vectors in the direction of the three spatial; axes. Using the definitions, \f$ n^i = \beta_i/\beta \f$ , then, for example,. \f[ \Lambda_{xy} = (\gamma - 1) n_x n_y; = (\gamma - 1) \beta_x \beta_y/\beta^2 \f]. By definition, \f[ \gamma^2 = 1/(1 - \beta^2) \f]. so that \f[ \gamma^2 \beta^2 = \gamma^2 - 1 \f]. or \f[ \beta^2 = (\gamma^2 - 1)/\gamma^2 \f]. If we insert this into the expression for \f$ \Lambda_{xy} \f$, we get. \f[ \Lambda_{xy} = (\gamma - 1) \gamma^2/(\gamma^2 - 1) \beta_x \beta_y \f]. or, finally. \f[ \Lambda_{xy} = \gamma^2/(\gamma+1) \beta_x \beta_y \f]. The expression \f$ \gamma^2/(\gamma+1) \f$ is what we call <em>bgamma</em> in the code below. \class ROOT::Math::Boost; */; //#endif",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/src/Boost.cxx:21,variab,variable,21,math/genvector/src/Boost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/src/Boost.cxx,1,['variab'],['variable']
Modifiability,"//(useBins) ? fKDE->fSumOfCounts : fKDE->fNEvents;; //if (!useCount) nSum = fKDE->fNEvents;; // in case of non-adaptive fWeights is a vector of size 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:111,adapt,adaptive,111,hist/hist/src/TKDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx,1,['adapt'],['adaptive']
Modifiability,"//*-* variable bin sizes; // for (bin =1; x >= fXbins.fArray[bin]; bin++);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:6,variab,variable,6,hist/hist/src/TAxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx,1,['variab'],['variable']
Modifiability,"//*-* variable bin sizes; //for (bin =1; x >= fXbins.fArray[bin]; bin++);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx:6,variab,variable,6,hist/hist/src/TAxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TAxis.cxx,1,['variab'],['variable']
Modifiability,"//*-*-*-*-*-*-*-*-*-*-*Compute reasonable histogram intervals*-*-*-*-*-*-*-*-*; //*-* ======================================; //*-* Function TO DETERMINE REASONABLE HISTOGRAM INTERVALS; //*-* GIVEN ABSOLUTE UPPER AND LOWER BOUNDS A1 AND A2; //*-* AND DESIRED MAXIMUM NUMBER OF BINS NAA; //*-* PROGRAM MAKES REASONABLE BINNING FROM BL TO BH OF WIDTH BWID; //*-* F. JAMES, AUGUST, 1974 , stolen for Minuit, 1988; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*; /* Local variables */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnbins.cxx:497,variab,variables,497,math/minuit2/src/mnbins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnbins.cxx,1,['variab'],['variables']
Modifiability,"//*-*-*-*Plots points in array xypt onto one page with labelled axes*-*-*-*-*; //*-* ===========================================================; //*-* NXYPT is the number of points to be plotted; //*-* XPT(I) = x-coord. of ith point; //*-* YPT(I) = y-coord. of ith point; //*-* CHPT(I) = character to be plotted at this position; //*-* the input point arrays XPT, YPT, CHPT are destroyed.; //*-*; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*; // char cdot[] = ""."";; // char cslash[] = ""/"";; /* Local variables */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mntplot.cxx:532,variab,variables,532,math/minuit2/src/mntplot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mntplot.cxx,1,['variab'],['variables']
Modifiability,"//- helper to refactor some code from CreateConverter ------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:14,refactor,refactor,14,bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,1,['refactor'],['refactor']
Modifiability,"//-- static methods to set configurations; /// set tolerance (absolute and relative); /// relative tolerance is only use to verify the convergence; /// do it is a minor parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:27,config,configurations,27,math/mathmore/inc/Math/GSLMultiRootFinder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h,1,['config'],['configurations']
Modifiability,"//--- Load desired plugin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TFileStager.h:19,plugin,plugin,19,net/net/inc/TFileStager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TFileStager.h,1,['plugin'],['plugin']
Modifiability,"//---- Class Initialization Behavior --------------------------------------; //; // This Class and Function are automatically used for classes inheriting from; // TQObject. They make it possible to have a single connection from all; // objects of the same class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQClass.h:143,inherit,inheriting,143,core/base/inc/TQClass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQClass.h,1,['inherit'],['inheriting']
Modifiability,"//---- Paths & Files -----------------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Expand a pathname getting rid of special shell characters like ~.$, etc.; /// For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; /// environment variables in a pathname. If compatibility is not an issue; /// you can use on Unix directly $XXX. This is a protected function called; /// from the OS specific system classes, like TUnixSystem and TWinNTSystem.; /// Returns the expanded filename or 0 in case of error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:330,variab,variables,330,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['variab'],['variables']
Modifiability,"//---- environment manipulation ------------------------------------------------; ////////////////////////////////////////////////////////////////////////////////; /// Set environment variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:184,variab,variable,184,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['variab'],['variable']
Modifiability,"//---------------------------------------------------------------------------; // Adapter class used to handle streaming collection of pointers; //---------------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfo.h:82,Adapt,Adapter,82,io/io/inc/TStreamerInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfo.h,1,['Adapt'],['Adapter']
Modifiability,"//---------------------------------------------------------------------------; // Global variables; //---------------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/res/RConversionRuleParser.h:89,variab,variables,89,core/foundation/res/RConversionRuleParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/res/RConversionRuleParser.h,1,['variab'],['variables']
Modifiability,"//--------------------------------------------------------------------------; // Allocate global variables; /////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RConversionRuleParser.cxx:97,variab,variables,97,core/foundation/src/RConversionRuleParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RConversionRuleParser.cxx,1,['variab'],['variables']
Modifiability,"//-----------------------------------------------------------------------; // Write the automatically generated variables; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RConversionRuleParser.cxx:112,variab,variables,112,core/foundation/src/RConversionRuleParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RConversionRuleParser.cxx,2,['variab'],['variables']
Modifiability,/// 'Opcode' - Represent a reference to an entire variable object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:50,variab,variable,50,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['variab'],['variable']
Modifiability,/// - Rewrite message expression for Objective-C setter and getters into; /// property-dot syntax.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp:6,Rewrite,Rewrite,6,interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// ------------------------------------------------------------------; /// The core of the Dwarf linking logic.; ///; /// The generation of the dwarf information from the object files will be; /// driven by the selection of 'root DIEs', which are DIEs that; /// describe variables or functions that resolves to the corresponding; /// code section(and thus have entries in the Addresses map). All the debug; /// information that will be generated(the DIEs, but also the line; /// tables, ranges, ...) is derived from that set of root DIEs.; ///; /// The root DIEs are identified because they contain relocations that; /// points to code section(the low_pc for a function, the location for; /// a variable). These relocations are gathered as a very first step; /// when we start processing a object file by AddressesMap.; ///; /// The overall linking process looks like this:; ///; /// parrallel_for_each(ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Load Clang modules.; /// }; ///; /// parrallel_for_each(Compile Unit) {; /// 1. Load input DWARF for Compile Unit.; /// 2. Report warnings for Clang modules.; /// 3. Analyze live DIEs and type names(if ODR deduplication is requested).; /// 4. Clone DIEs(Generate output DIEs and resulting DWARF tables).; /// The result is in an OutDebugInfoBytes, which is an ELF file; /// containing DWARF tables corresponding to the current compile unit.; /// 5. Cleanup Input and Output DIEs.; /// }; ///; /// Deallocate loaded Object file.; /// }; ///; /// if (ODR deduplication is requested); /// Generate an artificial compilation unit (""Type Table"": used to partially; /// generate DIEs at the clone stage).; ///; /// for_each (ObjectFile) {; /// for_each (Compile Unit) {; /// 1. Set offsets to Compile Units DWARF tables.; /// 2. Sort offsets/attributes/patches to have a predictable result.; /// 3. Patch size/offsets fields.; /// 4. Generate index tables.; /// 5. Move DWARF tables of compile units into the resulting file.; /// }; /// }; ///; /// E",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h:272,variab,variables,272,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Parallel/DWARFLinker.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// 1) Pops the value from the stack.; /// 2) Writes the value to the local variable with the; /// given offset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:76,variab,variable,76,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,1,['variab'],['variable']
Modifiability,/// 32-bit load config (IMAGE_LOAD_CONFIG_DIRECTORY32),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h:16,config,config,16,interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,1,['config'],['config']
Modifiability,/// 64-bit load config (IMAGE_LOAD_CONFIG_DIRECTORY64),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h:16,config,config,16,interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/COFF.h,1,['config'],['config']
Modifiability,"/// @brief Adds the given string to the string block that will be emitted at the top of the squashed function. Useful; /// for variable declarations.; /// @param str The string to add to the global scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx:127,variab,variable,127,roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,1,['variab'],['variable']
Modifiability,"/// @brief Close the file object. This should be used instead of ::close for; /// portability. On error, the caller should assume the file is closed, as is; /// the case for Process::SafelyCloseFileDescriptor; ///; /// @param F On input, this is the file to close. On output, the file is; /// set to kInvalidFile.; ///; /// @returns An error code if closing the file failed. Typically, an error here; /// means that the filesystem may have failed to perform some buffered writes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:82,portab,portability,82,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['portab'],['portability']
Modifiability,"/// @brief Create a RAII scope for iterating over vector observables. You can't use the result of vector observables; /// outside these loop scopes.; /// @param in A pointer to the calling class, used to determine the loop dependent variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx:233,variab,variables,233,roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,1,['variab'],['variables']
Modifiability,"/// @brief Function to calculate the integral of an un-normalized RooGaussian over x. To calculate the integral over; /// mean, just interchange the respective values of x and mean.; /// @param xMin Minimum value of variable to integrate wrt.; /// @param xMax Maximum value of of variable to integrate wrt.; /// @param mean Mean.; /// @param sigma Sigma.; /// @return The integral of an un-normalized RooGaussian over the value in x.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:216,variab,variable,216,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,2,['variab'],['variable']
Modifiability,"/// @brief Get a unique variable name to be used in the generated code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx:24,variab,variable,24,roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,1,['variab'],['variable']
Modifiability,"/// @brief Index to get unique names for temporary variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h:51,variab,variables,51,roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h,1,['variab'],['variables']
Modifiability,"/// @brief Return 'true' if we can guarantee that if this class (or any class in; /// this class inheritance hierarchy) overload TObject::Hash it also starts; /// the RecursiveRemove process from its own destructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TClass.h:97,inherit,inheritance,97,core/meta/inc/TClass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TClass.h,1,['inherit'],['inheritance']
Modifiability,"/// @brief Since the squashed code represents all observables as a single flattened array, it is important; /// to keep track of the start index for a vector valued observable which can later be expanded to access the correct; /// element. For example, a vector valued variable x with 10 entries will be squashed to obs[start_idx + i].; /// @param key The name of the node representing the vector valued observable.; /// @param idx The start index (or relative position of the observable in the set of all observables).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx:269,variab,variable,269,roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,1,['variab'],['variable']
Modifiability,"/// @brief TRangeStaticCast is an adapter class that allows the typed iteration; /// through a TCollection. This requires the collection to contain elements; /// of the type requested (or a derived class). Any deviation from this expectation; /// will only be caught/reported by an assert in debug builds.; ///; /// This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; ///; /// The typical use is:; /// ```{.cpp}; /// for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; /// ... use bcl as a TBaseClass*; /// }; /// for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; /// ... use bcl as a TBaseClass*; /// }; /// ```; /// \tparam T The new type to convert to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:34,adapt,adapter,34,core/cont/inc/TCollection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h,1,['adapt'],['adapter']
Modifiability,"/// @name Configuration; /// @{; /// Whether to perform case-sensitive comparisons.; ///; /// Currently, case-insensitive matching only works correctly with ASCII.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:10,Config,Configuration,10,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,1,['Config'],['Configuration']
Modifiability,"/// @name Implementation Action Interface; /// @{; /// Prepare to execute the action on the given CompilerInstance.; ///; /// This is called before executing the action on any inputs, and can modify; /// the configuration as needed (including adjusting the input list).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:208,config,configuration,208,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,1,['config'],['configuration']
Modifiability,"/// @}; /// @name Direct access to the globals list, functions list, and symbol table; /// @{; /// Get the Module's list of global variables (constant).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:131,variab,variables,131,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['variab'],['variables']
Modifiability,"/// @}; /// @name Global Variable Accessors; /// @{; /// Look up the specified global variable in the module symbol table. If it; /// does not exist, return null. If AllowInternal is set to true, this; /// function will return types that have InternalLinkage. By default, these; /// types are not returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:25,Variab,Variable,25,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// @}; /// @name Global Variable Iteration; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:25,Variab,Variable,25,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['Variab'],['Variable']
Modifiability,/// @}; /// @name Member Variables; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:25,Variab,Variables,25,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['Variab'],['Variables']
Modifiability,"/// @}; /// Adds a matcher to execute when running over the AST.; ///; /// This is similar to \c addMatcher(), but it uses the dynamic interface. It; /// is more flexible, but the lost type information enables a caller to pass; /// a matcher that cannot match anything.; ///; /// \returns \c true if the matcher is a valid top-level matcher, \c false; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h:162,flexible,flexible,162,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,1,['flexible'],['flexible']
Modifiability,/// @}; /// Applies the replacement on the Rewriter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h:43,Rewrite,Rewriter,43,interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h,1,['Rewrite'],['Rewriter']
Modifiability,/// @}; /// Converts a \c RewriteRuleWith<T> to a \c RewriteRule by stripping off the; /// metadata generators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:26,Rewrite,RewriteRuleWith,26,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,2,['Rewrite'],"['RewriteRule', 'RewriteRuleWith']"
Modifiability,/// @}; /// Implementation when metadata is generated as a part of the rewrite. This; /// happens when we have a \c RewriteRuleWith<T>.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Transformer.h:71,rewrite,rewrite,71,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Transformer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Transformer.h,2,"['Rewrite', 'rewrite']","['RewriteRuleWith', 'rewrite']"
Modifiability,/// @}; /// Reference to the loop user variable as accessed in the loop body.; /// @{,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:39,variab,variable,39,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,"/// @}; /// The function that computes the loop user variable from a logical iteration; /// counter. Can be evaluated as first statement in the loop.; ///; /// Function signature: void(LoopVarTy &Result, LogicalTy Number); /// Any other values required to compute the loop user variable (such as start; /// value, step size) are captured by the closure. In particular, the initial; /// value of loop iteration variable is captured by value to be unaffected by; /// previous iterations.; /// @{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:53,variab,variable,53,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,3,['variab'],['variable']
Modifiability,/// @}; /// \name Variable Symbols; /// @{; /// isVariable - Check if this is a variable symbol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:18,Variab,Variable,18,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,"/// A (possibly-)qualified type.; ///; /// For efficiency, we don't store CV-qualified types as nodes on their; /// own: instead each reference to a type stores the qualifiers. This; /// greatly reduces the number of nodes we need to allocate for types (for; /// example we only need one for 'int', 'const int', 'volatile int',; /// 'const volatile int', etc).; ///; /// As an added efficiency bonus, instead of making this a pair, we; /// just store the two bits we care about in the low bits of the; /// pointer. To handle the packing/unpacking, we make QualType be a; /// simple wrapper class that acts like a smart pointer. A third bit; /// indicates whether there are extended qualifiers present, in which; /// case the pointer points to a special structure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:673,extend,extended,673,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['extend'],['extended']
Modifiability,/// A BinaryStream which can be read from as well as written to. Note; /// that writing to a BinaryStream always necessitates copying from the input; /// buffer to the stream's backing store. Streams are assumed to be buffered; /// so that to be portable it is necessary to call commit() on the stream when; /// all data has been written.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStream.h:246,portab,portable,246,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStream.h,1,['portab'],['portable']
Modifiability,/// A Branch Region can be extended to include IDs to facilitate MC/DC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:27,extend,extended,27,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['extend'],['extended']
Modifiability,"/// A C++ inherited constructor produced by a ""using T::T"" directive",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/AnyCall.h:10,inherit,inherited,10,interpreter/llvm-project/clang/include/clang/Analysis/AnyCall.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/AnyCall.h,1,['inherit'],['inherited']
Modifiability,"/// A C++ lambda expression, which produces a function object; /// (of unspecified type) that can be invoked later.; ///; /// Example:; /// \code; /// void low_pass_filter(std::vector<double> &values, double cutoff) {; /// values.erase(std::remove_if(values.begin(), values.end(),; /// [=](double value) { return value > cutoff; });; /// }; /// \endcode; ///; /// C++11 lambda expressions can capture local variables, either by copying; /// the values of those local variables at the time the function; /// object is constructed (not when it is called!) or by holding a; /// reference to the local variable. These captures can occur either; /// implicitly or can be written explicitly between the square; /// brackets ([...]) that start the lambda expression.; ///; /// C++1y introduces a new form of ""capture"" called an init-capture that; /// includes an initializing expression (rather than capturing a variable),; /// and which can never occur implicitly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:407,variab,variables,407,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,4,['variab'],"['variable', 'variables']"
Modifiability,"/// A CRTP mixin class that adds reference counting to a type.; ///; /// The lifetime of an object which inherits from RefCountedBase is managed by; /// calls to Release() and Retain(), which increment and decrement the object's; /// refcount, respectively. When a Release() call decrements the refcount to 0,; /// the object deletes itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:105,inherit,inherits,105,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,1,['inherit'],['inherits']
Modifiability,"/// A Clang configuration for end-to-end tests that can be converted to; /// command line arguments for the driver.; ///; /// The configuration is represented as typed, named values, making it easier; /// and safer to work with compared to an array of string command line flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestClangConfig.h:12,config,configuration,12,interpreter/llvm-project/clang/include/clang/Testing/TestClangConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/TestClangConfig.h,2,['config'],['configuration']
Modifiability,/// A CopyConstantAsImmRenderer emits code to render a G_CONSTANT instruction to; /// an extended immediate operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:89,extend,extended,89,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['extend'],['extended']
Modifiability,/// A CopyFConstantAsFPImmRenderer emits code to render a G_FCONSTANT; /// instruction to an extended immediate operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:93,extend,extended,93,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['extend'],['extended']
Modifiability,/// A DecisionRegion represents a top-level boolean expression and is; /// associated with a variable length bitmap index and condition number.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:93,variab,variable,93,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['variab'],['variable']
Modifiability,"/// A Graph object represents a Directed Graph and is used in XRay to compute; /// and store function call graphs and associated statistical information.; ///; /// The graph takes in four template parameters, these are:; /// - VertexAttribute, this is a structure which is stored for each vertex.; /// Must be DefaultConstructible, CopyConstructible, CopyAssignable and; /// Destructible.; /// - EdgeAttribute, this is a structure which is stored for each edge; /// Must be DefaultConstructible, CopyConstructible, CopyAssignable and; /// Destructible.; /// - EdgeAttribute, this is a structure which is stored for each variable; /// - VI, this is a type over which DenseMapInfo is defined and is the type; /// used look up strings, available as VertexIdentifier.; /// - If the built in DenseMapInfo is not defined, provide a specialization; /// class type here.; ///; /// Graph is CopyConstructible, CopyAssignable, MoveConstructible and; /// MoveAssignable but is not EqualityComparible or LessThanComparible.; ///; /// Usage Example Graph with weighted edges and vertices:; /// Graph<int, int, int> G;; ///; /// G[1] = 0;; /// G[2] = 2;; /// G[{1,2}] = 1;; /// G[{2,1}] = -1;; /// for(const auto &v : G.vertices()){; /// // Do something with the vertices in the graph;; /// }; /// for(const auto &e : G.edges()){; /// // Do something with the edges in the graph;; /// }; ///; /// Usage Example with StrRef keys.; /// Graph<int, double, StrRef> StrG;; /// char va[] = ""Vertex A"";; /// char vaa[] = ""Vertex A"";; /// char vb[] = ""Vertex B""; // Vertices are referenced by String Refs.; /// G[va] = 0;; /// G[vb] = 1;; /// G[{va, vb}] = 1.0;; /// cout() << G[vaa] << "" "" << G[{vaa, vb}]; //prints ""0 1.0"".; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h:620,variab,variable,620,interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h,1,['variab'],['variable']
Modifiability,"/// A Heuristic for aliasGEP that searches for a constant offset; /// between the variables.; ///; /// GetLinearExpression has some limitations, as generally zext(%x + 1); /// != zext(%x) + zext(1) if the arithmetic overflows. GetLinearExpression; /// will therefore conservatively refuse to decompose these expressions.; /// However, we know that, for all %x, zext(%x) != zext(%x + 1), even if; /// the addition overflows.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BasicAliasAnalysis.h:82,variab,variables,82,interpreter/llvm-project/llvm/include/llvm/Analysis/BasicAliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/BasicAliasAnalysis.h,1,['variab'],['variables']
Modifiability,"/// A Module instance is used to store all the information related to an; /// LLVM module. Modules are the top level container of all other LLVM; /// Intermediate Representation (IR) objects. Each module directly contains a; /// list of globals variables, a list of functions, a list of libraries (or; /// other modules) this module depends on, a symbol table, and various data; /// about the target's characteristics.; ///; /// A module maintains a GlobalList object that is used to hold all; /// constant references to global variables in the module. When a global; /// variable is destroyed, it should have no entries in the GlobalList.; /// The main container class for the LLVM Intermediate Representation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:245,variab,variables,245,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// A PC-relative REX load of a Thread Local Variable Pointer (TLVP) entry,; /// relaxable if the TLVP entry target is in-range of the fixup.; ///; /// If the TLVP entry target is in-range of the fixup then the load from the; /// TLVP may be replaced with a direct memory address calculation.; ///; /// The target of this edge must be a thread local variable entry of the form; /// .quad <tlv getter thunk>; /// .quad <tlv key>; /// .quad <tlv initializer>; ///; /// Fixup expression:; /// Fixup <- Target - (Fixup + 4) + Addend : int32; ///; /// Errors:; /// - The result of the fixup expression must fit into an int32, otherwise; /// an out-of-range error will be returned.; /// - The target must be either external, or a TLV entry of the required; /// form, otherwise a malformed TLV entry error will be returned.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h:45,Variab,Variable,45,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/x86_64.h,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,"/// A PolymorphicMatcher<MatcherT, P1, ..., PN> object can be; /// created from N parameters p1, ..., pN (of type P1, ..., PN) and; /// used as a Matcher<T> where a MatcherT<T, P1, ..., PN>(p1, ..., pN); /// can be constructed.; ///; /// For example:; /// - PolymorphicMatcher<IsDefinitionMatcher>(); /// creates an object that can be used as a Matcher<T> for any type T; /// where an IsDefinitionMatcher<T>() can be constructed.; /// - PolymorphicMatcher<ValueEqualsMatcher, int>(42); /// creates an object that can be used as a Matcher<T> for any type T; /// where a ValueEqualsMatcher<T, int>(42) can be constructed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:6,Polymorphi,PolymorphicMatcher,6,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,3,['Polymorphi'],['PolymorphicMatcher']
Modifiability,/// A Recipe for widening the canonical induction variable of the vector loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:50,variab,variable,50,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['variab'],['variable']
Modifiability,"/// A SARIF Reporting Configuration (\c reportingConfiguration) object contains; /// properties for a \ref SarifRule that can be configured at runtime before; /// analysis begins.; ///; /// Reference:; /// 1. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317852"">reportingConfiguration object</a>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:22,Config,Configuration,22,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,2,"['Config', 'config']","['Configuration', 'configured']"
Modifiability,"/// A SAT solver that is an implementation of Algorithm D from Knuth's The Art; /// of Computer Programming Volume 4: Satisfiability, Fascicle 6. It is based on; /// the Davis-Putnam-Logemann-Loveland (DPLL) algorithm, keeps references to a; /// single ""watched"" literal per clause, and uses a set of ""active"" variables; /// for unit propagation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/WatchedLiteralsSolver.h:310,variab,variables,310,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/WatchedLiteralsSolver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/WatchedLiteralsSolver.h,1,['variab'],['variables']
Modifiability,"/// A ThreadPool for asynchronous parallel execution on a defined number of; /// threads.; ///; /// The pool keeps a vector of threads alive, waiting on a condition variable; /// for some work to become available.; ///; /// It is possible to reuse one thread pool for different groups of tasks; /// by grouping tasks using ThreadPoolTaskGroup. All tasks are processed using; /// the same queue, but it is possible to wait only for a specific group of; /// tasks to finish.; ///; /// It is also possible for worker threads to submit new tasks and wait for; /// them. Note that this may result in a deadlock in cases such as when a task; /// (directly or indirectly) tries to wait for its own completion, or when all; /// available threads are used up by tasks waiting for a task that has no thread; /// left to run on (this includes waiting on the returned future). It should be; /// generally safe to wait() for a group as long as groups do not form a cycle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:165,variab,variable,165,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,1,['variab'],['variable']
Modifiability,"/// A UniqueId can be added as a class member to enhance any class with a; /// unique identifier for each instantiated object.; ///; /// Example:; /// ~~~{.cpp}; /// class MyClass {; ///; /// public:; /// /// Return unique ID by reference.; /// /// Please always use the name `uniqueId` for the getter.; /// UniqueId<MyClass> const& uniqueId() const { return _uniqueId; }; ///; /// private:; /// const UniqueId<MyClass> _uniqueId; //! should be non-persistent; ///; /// };; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/UniqueId.h:49,enhance,enhance,49,roofit/roofitcore/inc/RooFit/UniqueId.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/UniqueId.h,1,['enhance'],['enhance']
Modifiability,"/// A VarDefinition consists of an expression, representing the value of the; /// variable, along with the context in which that expression should be; /// interpreted. A reference VarDefinition does not itself contain this; /// information, but instead contains a pointer to a previous VarDefinition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:82,variab,variable,82,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,"/// A VariadicDynCastAllOfMatcher<SourceT, TargetT> object is a; /// variadic functor that takes a number of Matcher<TargetT> and returns a; /// Matcher<SourceT> that matches TargetT nodes that are matched by all of the; /// given matchers, if SourceT can be dynamically casted into TargetT.; ///; /// For example:; /// const VariadicDynCastAllOfMatcher<Decl, CXXRecordDecl> record;; /// Creates a functor record(...) that creates a Matcher<Decl> given; /// a variable number of arguments of type Matcher<CXXRecordDecl>.; /// The returned matcher matches if the given Decl can by dynamically; /// casted to CXXRecordDecl and all given matchers match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:460,variab,variable,460,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['variab'],['variable']
Modifiability,/// A \c VariadicAllOfMatcher<T> object is a variadic functor that takes; /// a number of \c Matcher<T> and returns a \c Matcher<T> that matches \c T; /// nodes that are matched by all of the given matchers.; ///; /// For example:; /// const VariadicAllOfMatcher<NestedNameSpecifier> nestedNameSpecifier;; /// Creates a functor nestedNameSpecifier(...) that creates a; /// \c Matcher<NestedNameSpecifier> given a variable number of arguments of type; /// \c Matcher<NestedNameSpecifier>.; /// The returned matcher matches if all given matchers match.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:413,variab,variable,413,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['variab'],['variable']
Modifiability,/// A base class for any requirement that expects some part of the source to be; /// selected in an editor (or the refactoring tool with the -selection option).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h:115,refactor,refactoring,115,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,1,['refactor'],['refactoring']
Modifiability,/// A base class for any requirement that requires some refactoring options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h:56,refactor,refactoring,56,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,1,['refactor'],['refactoring']
Modifiability,/// A base class for different implementations of Data classes for Apple; /// Accelerator Tables. The columns in the table are defined by the static Atoms; /// variable defined on the subclasses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h:160,variab,variable,160,interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,1,['variab'],['variable']
Modifiability,/// A binop with a constant operand and a sign-extended boolean operand may be; /// converted into a select of constants by applying the binary operation to; /// the constant with the two possible values of the extended boolean (0 or -1).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:47,extend,extended,47,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,2,['extend'],['extended']
Modifiability,/// A bit that indicates whether it's possible to avoid coying this block to; /// the heap when it initializes or is assigned to a local variable with; /// automatic storage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:137,variab,variable,137,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['variab'],['variable']
Modifiability,"/// A boolean expression such as ""true"" or ""V1 & !V2"".; /// Expressions may refer to boolean atomic variables. These should take a; /// consistent true/false value across the set of formulas being considered.; ///; /// (Formulas are always expressions in terms of boolean variables rather than; /// e.g. integers because our underlying model is SAT rather than e.g. SMT).; ///; /// Simple formulas such as ""true"" and ""V1"" are self-contained.; /// Compound formulas connect other formulas, e.g. ""(V1 & V2) || V3"" is an 'or'; /// formula, with pointers to its operands ""(V1 & V2)"" and ""V3"" stored as; /// trailing objects.; /// For this reason, Formulas are Arena-allocated and over-aligned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h:100,variab,variables,100,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h,2,['variab'],['variables']
Modifiability,"/// A cleanup, and a flag indicating whether it is lifetime-extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:60,extend,extended,60,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['extend'],['extended']
Modifiability,/// A common refactoring action rule interface that defines the 'invoke'; /// function that performs the refactoring operation (either fully or; /// partially).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h:13,refactor,refactoring,13,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,2,['refactor'],['refactoring']
Modifiability,/// A container that stores the command-line options used by a single; /// refactoring option.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:75,refactor,refactoring,75,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,1,['refactor'],['refactoring']
Modifiability,"/// A convenience helper which concatenates the options specified by the; /// environment variable EnvVar and command line options, then expands response; /// files recursively. The tokenizer is a predefined GNU or Windows one.; /// \return true if all @files were expanded successfully or there were none.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:90,variab,variable,90,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,1,['variab'],['variable']
Modifiability,"/// A convenience helper which concatenates the options specified by the; /// environment variable EnvVar and command line options, then expands; /// response files recursively.; /// \return true if all @files were expanded successfully or there were none.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:90,variab,variable,90,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,1,['variab'],['variable']
Modifiability,"/// A convenience helper which handles optional initial options populated from; /// an environment variable, expands response files recursively and parses; /// options.; ///; /// \param ErrorFn - Called on a formatted error message for missing arguments; /// or unknown options.; /// \return An InputArgList; on error this will contain all the options which; /// could be parsed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:99,variab,variable,99,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,1,['variab'],['variable']
Modifiability,/// A declaration is marked as a variable with OpenMP allocator.; ///; /// \param D the declaration marked as a variable with OpenMP allocator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTMutationListener.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/AST/ASTMutationListener.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTMutationListener.h,2,['variab'],['variable']
Modifiability,"/// A declaration that can appear at the top-level. Note that this does *not*; /// correspond 1-to-1 to clang::Decl. Syntax trees distinguish between top-level; /// declarations (e.g. namespace definitions) and declarators (e.g. variables,; /// typedefs, etc.). Declarators are stored inside SimpleDeclaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h:229,variab,variables,229,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,1,['variab'],['variables']
Modifiability,"/// A derived class of LLVMContext that initializes itself according to a given; /// Config object. The purpose of this class is to tie ownership of the; /// diagnostic handler to the context, as opposed to the Config object (which; /// may be ephemeral).; // FIXME: This should not be required as diagnostic handler is not callback.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:85,Config,Config,85,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,2,['Config'],['Config']
Modifiability,"/// A dynamically typed AST node container.; ///; /// Stores an AST node in a type safe way. This allows writing code that; /// works with different kinds of AST nodes, despite the fact that they don't; /// have a common base class.; ///; /// Use \c create(Node) to create a \c DynTypedNode from an AST node,; /// and \c get<T>() to retrieve the node as type T if the types match.; ///; /// See \c ASTNodeKind for which node base types are currently supported;; /// You can create DynTypedNodes for all nodes in the inheritance hierarchy of; /// the supported base types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTTypeTraits.h:516,inherit,inheritance,516,interpreter/llvm-project/clang/include/clang/AST/ASTTypeTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTTypeTraits.h,1,['inherit'],['inheritance']
Modifiability,"/// A function that keeps a record of all the Decls that are variables, has; /// OMPDeclareTargetDeclAttr, and has global storage in the DeclVector. Pop; /// each Decl one at a time and use the inherited 'visit' functions to look; /// for DeclRefExpr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:61,variab,variables,61,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,"['inherit', 'variab']","['inherited', 'variables']"
Modifiability,/// A function to deduce a function pass type and wrap it in the; /// templated adaptor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:80,adapt,adaptor,80,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,4,['adapt'],['adaptor']
Modifiability,"/// A function to deduce a loop pass type and wrap it in the templated; /// adaptor.; ///; /// If \p Pass is a loop pass, the returned adaptor will be in loop mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:76,adapt,adaptor,76,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,2,['adapt'],['adaptor']
Modifiability,"/// A generic diagnostic builder for errors which may or may not be deferred.; ///; /// In CUDA, there exist constructs (e.g. variable-length arrays, try/catch); /// which are not allowed to appear inside __device__ functions and are; /// allowed to appear in __host__ __device__ functions only if the host+device; /// function is never codegen'ed.; ///; /// To handle this, we use the notion of ""deferred diagnostics"", where we; /// attach a diagnostic to a FunctionDecl that's emitted iff it's codegen'ed.; ///; /// This class lets you emit either a regular diagnostic, a deferred; /// diagnostic, or no diagnostic at all, according to an argument you pass to; /// its constructor, thus simplifying the process of creating these ""maybe; /// deferred"" diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:126,variab,variable-length,126,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable-length']
Modifiability,"/// A global, fixed seed-override variable.; ///; /// This variable can be set using the \see llvm::set_fixed_execution_seed; /// function. See that function for details. Do not, under any circumstances,; /// set or read this variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h:34,variab,variable,34,interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Hashing.h,3,['variab'],['variable']
Modifiability,/// A helper function to create an internal or private global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:62,variab,variable,62,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variable']
Modifiability,/// A human readable description of what the refactoring does.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h:45,refactor,refactoring,45,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,1,['refactor'],['refactoring']
Modifiability,/// A human readable title for the refactoring.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h:35,refactor,refactoring,35,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,1,['refactor'],['refactoring']
Modifiability,/// A key-value table of use-specified configuration values.; // TODO: This shouldn't be public.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:39,config,configuration,39,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,1,['config'],['configuration']
Modifiability,"/// A kind of a syntax node, used for implementing casts. The ordering and; /// blocks of enumerator constants must correspond to the inheritance hierarchy; /// of syntax::Node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h:134,inherit,inheritance,134,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,1,['inherit'],['inheritance']
Modifiability,"/// A lightweight polymorphic wrapper around FieldRegion *. We'll use this; /// interface to store addinitional information about fields. As described; /// later, a list of these objects (i.e. ""fieldchain"") will be constructed and; /// used for printing note messages should an uninitialized value be found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h:18,polymorphi,polymorphic,18,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,1,['polymorphi'],['polymorphic']
Modifiability,"/// A list of all the variables in the debug_loc section, each one describing; /// the locations in which the variable is stored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:22,variab,variables,22,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// A list of locations that contain one variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:41,variab,variable,41,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,1,['variab'],['variable']
Modifiability,"/// A list of macros of the form \c <definition>=<expansion> .; ///; /// Code will be parsed with macros expanded, in order to determine how to; /// interpret and format the macro arguments.; ///; /// For example, the code:; /// \code; /// A(a*b);; /// \endcode; ///; /// will usually be interpreted as a call to a function A, and the; /// multiplication expression will be formatted as ``a * b``.; ///; /// If we specify the macro definition:; /// \code{.yaml}; /// Macros:; /// - A(x)=x; /// \endcode; ///; /// the code will now be parsed as a declaration of the variable b of type a*,; /// and formatted as ``a* b`` (depending on pointer-binding rules).; ///; /// Features and restrictions:; /// * Both function-like macros and object-like macros are supported.; /// * Macro arguments must be used exactly once in the expansion.; /// * No recursive expansion; macros referencing other macros will be; /// ignored.; /// * Overloading by arity is supported: for example, given the macro; /// definitions A=x, A()=y, A(a)=a; ///; /// \code; /// A; -> x;; /// A(); -> y;; /// A(z); -> z;; /// A(a, b); // will not be expanded.; /// \endcode; ///; /// \version 17",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:565,variab,variable,565,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['variab'],['variable']
Modifiability,/// A list of matchers that all need to succeed for the current rule to match.; /// FIXME: This currently supports a single match position but could be; /// extended to support multiple positions to support div/rem fusion or; /// load-multiple instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:157,extend,extended,157,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['extend'],['extended']
Modifiability,/// A list of out-of-line variable template partial; /// specializations that will need to be instantiated after the; /// enclosing variable's instantiation is complete.; /// FIXME: Verify that this is needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:26,variab,variable,26,interpreter/llvm-project/clang/include/clang/Sema/Template.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h,2,['variab'],['variable']
Modifiability,"/// A list of shadow maps, which is used to model name hiding at; /// different levels of, e.g., the inheritance hierarchy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:101,inherit,inheritance,101,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['inherit'],['inheritance']
Modifiability,/// A loaded pass plugin.; ///; /// An instance of this class wraps a loaded pass plugin and gives access to; /// its interface defined by the \c PassPluginLibraryInfo it exposes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:18,plugin,plugin,18,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,2,['plugin'],['plugin']
Modifiability,/// A map of instruction matchers to the local variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:47,variab,variables,47,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['variab'],['variables']
Modifiability,"/// A map of scalar integer values to the smallest bit width with which they; /// can legally be represented. The values map to (width, signed) pairs,; /// where ""width"" indicates the minimum bit width and ""signed"" is True if the; /// value must be signed-extended, rather than zero-extended, back to its; /// original width.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:256,extend,extended,256,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,['extend'],['extended']
Modifiability,/// A map of variables (IR values) to their corresponding index in the; /// constraint system.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstraintSystem.h:13,variab,variables,13,interpreter/llvm-project/llvm/include/llvm/Analysis/ConstraintSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstraintSystem.h,1,['variab'],['variables']
Modifiability,/// A mapping from NRVO variables to the flags used to indicate; /// when the NRVO has been applied to this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:24,variab,variables,24,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// A mapping from each virtual member function to its set of; /// final overriders.; ///; /// Within a class hierarchy for a given derived class, each virtual; /// member function in that hierarchy has one or more ""final; /// overriders"" (C++ [class.virtual]p2). A final overrider for a; /// virtual function ""f"" is the virtual function that will actually be; /// invoked when dispatching a call to ""f"" through the; /// vtable. Well-formed classes have a single final overrider for each; /// virtual function; in abstract classes, the final overrider for at; /// least one virtual function is a pure virtual function. Due to; /// multiple, virtual inheritance, it is possible for a class to have; /// more than one final overrider. Although this is an error (per C++; /// [class.virtual]p2), it is not considered an error here: the final; /// overrider map can represent multiple final overriders for a; /// method, and it is up to the client to determine whether they are; /// problem. For example, the following class \c D has two final; /// overriders for the virtual function \c A::f(), one in \c C and one; /// in \c D:; ///; /// \code; /// struct A { virtual void f(); };; /// struct B : virtual A { virtual void f(); };; /// struct C : virtual A { virtual void f(); };; /// struct D : B, C { };; /// \endcode; ///; /// This data structure contains a mapping from every virtual; /// function *that does not override an existing virtual function* and; /// in every subobject where that virtual function occurs to the set; /// of virtual functions that override it. Thus, the same virtual; /// function \c A::f can actually occur in multiple subobjects of type; /// \c A due to multiple inheritance, and may be overridden by; /// different virtual functions in each, as in the following example:; ///; /// \code; /// struct A { virtual void f(); };; /// struct B : A { virtual void f(); };; /// struct C : A { virtual void f(); };; /// struct D : B, C { };; /// \endcode; ///; /// Unlike in the p",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h:649,inherit,inheritance,649,interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h,1,['inherit'],['inheritance']
Modifiability,"/// A mapping from local declarations that occur; /// within a template to their instantiations.; ///; /// This mapping is used during instantiation to keep track of,; /// e.g., function parameter and variable declarations. For example,; /// given:; ///; /// \code; /// template<typename T> T add(T x, T y) { return x + y; }; /// \endcode; ///; /// when we instantiate add<int>, we will introduce a mapping from; /// the ParmVarDecl for 'x' that occurs in the template to the; /// instantiated ParmVarDecl for 'x'.; ///; /// For a parameter pack, the local instantiation scope may contain a; /// set of instantiated parameters. This is stored as a DeclArgumentPack; /// pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:201,variab,variable,201,interpreter/llvm-project/clang/include/clang/Sema/Template.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h,1,['variab'],['variable']
Modifiability,/// A mapping from the base classes through which the constructor was; /// inherited to the using shadow declaration in that base class (or a null; /// pointer if the constructor was declared in that base class).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:75,inherit,inherited,75,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherited']
Modifiability,"/// A mapping to contain the template or declaration that; /// a variable declaration describes or was instantiated from,; /// respectively.; ///; /// For non-templates, this value will be NULL. For variable; /// declarations that describe a variable template, this will be a; /// pointer to a VarTemplateDecl. For static data members; /// of class template specializations, this will be the; /// MemberSpecializationInfo referring to the member variable that was; /// instantiated or specialized. Thus, the mapping will keep track of; /// the static data member templates from which static data members of; /// class template specializations were instantiated.; ///; /// Given the following example:; ///; /// \code; /// template<typename T>; /// struct X {; /// static T value;; /// };; ///; /// template<typename T>; /// T X<T>::value = T(17);; ///; /// int *x = &X<int>::value;; /// \endcode; ///; /// This mapping will contain an entry that maps from the VarDecl for; /// X<int>::value to the corresponding VarDecl for X<T>::value (within the; /// class template X) and will be marked TSK_ImplicitInstantiation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:65,variab,variable,65,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,4,['variab'],['variable']
Modifiability,/// A meaningful name of the plugin.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:29,plugin,plugin,29,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,1,['plugin'],['plugin']
Modifiability,"/// A measurement, once fully configured, can be saved into a ROOT; /// file. This will persitify the Measurement object, along with any; /// channels and samples that have been added to it. It can then be; /// loaded, potentially modified, and used to create new models.; ///; /// Write every histogram to the file.; /// Edit the measurement to point to this file; /// and to point to each histogram in this file; /// Then write the measurement itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Measurement.cxx:30,config,configured,30,roofit/histfactory/src/Measurement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Measurement.cxx,1,['config'],['configured']
Modifiability,"/// A metaprogramming base class for TypeLoc classes which correspond; /// to a particular Type subclass. It is accepted for a single; /// TypeLoc class to correspond to multiple Type classes.; ///; /// \tparam Base a class from which to derive; /// \tparam Derived the class deriving from this one; /// \tparam TypeClass the concrete Type subclass associated with this; /// location type; /// \tparam LocalData the structure type of local location data for; /// this type; ///; /// TypeLocs with non-constant amounts of local data should override; /// getExtraLocalDataSize(); getExtraLocalData() will then point to; /// this extra memory.; ///; /// TypeLocs with an inner type should define; /// QualType getInnerType() const; /// and getInnerTypeLoc() will then point to this inner type's; /// location data.; ///; /// A word about hierarchies: this template is not designed to be; /// derived from multiple times in a hierarchy. It is also not; /// designed to be used for classes where subtypes might provide; /// different amounts of source information. It should be subclassed; /// only at the deepest portion of the hierarchy where all children; /// have identical source information; if that's an abstract type,; /// then further descendents should inherit from; /// InheritingConcreteTypeLoc instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:1258,inherit,inherit,1258,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,2,"['Inherit', 'inherit']","['InheritingConcreteTypeLoc', 'inherit']"
Modifiability,"/// A multiple-use def in the same block with no intervening memory or register; /// dependencies; move the def down, nest it with the current instruction, and; /// insert a tee to satisfy the rest of the uses. As an illustration, rewrite; /// this:; ///; /// Reg = INST ... // Def; /// INST ..., Reg, ... // Insert; /// INST ..., Reg, ...; /// INST ..., Reg, ...; ///; /// to this:; ///; /// DefReg = INST ... // Def (to become the new Insert); /// TeeReg, Reg = TEE_... DefReg; /// INST ..., TeeReg, ... // Insert; /// INST ..., Reg, ...; /// INST ..., Reg, ...; ///; /// with DefReg and TeeReg stackified. This eliminates a local.get from the; /// resulting code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp:231,rewrite,rewrite,231,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// A narrowing conversion, because a non-constant-expression variable might; /// have got narrowed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:62,variab,variable,62,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h,1,['variab'],['variable']
Modifiability,"/// A non-RAII class containing all the information about a bound; /// opaque value. OpaqueValueMapping, below, is a RAII wrapper for; /// this which makes individual mappings very simple; using this; /// class directly is useful when you have a variable number of; /// opaque values or don't want the RAII functionality for some; /// reason.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:246,variab,variable,246,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,/// A null boolean variable is used as a placeholder in various data structures; /// and algorithms.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variable']
Modifiability,/// A pair of debug variable and value location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:20,variab,variable,20,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,/// A pair of helper functions for a __block variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:45,variab,variable,45,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variable']
Modifiability,/// A pass that internalizes all functions and variables other than those that; /// must be preserved according to \c MustPreserveGV.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h:47,variab,variables,47,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h,1,['variab'],['variables']
Modifiability,"/// A plugin-based class that takes an arbitrary number of Plugin types.; /// Each plugin type must satisfy the following API:; /// 1) the constructor must take a `Function &f`. Typically, the plugin would; /// scan the function looking for candidates.; /// 2) contain a member function with the following signature and name:; /// void run(std::vector<CandidateInfo> &Candidates);; /// such that the plugin would append its result into the vector parameter.; ///; /// Plugins are defined in ValueProfilePlugins.inc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.cpp:6,plugin,plugin-based,6,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.cpp,6,"['Plugin', 'plugin']","['Plugin', 'Plugins', 'plugin', 'plugin-based']"
Modifiability,"/// A postfix to apply to every variable. Defaults to """".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:32,variab,variable,32,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['variab'],['variable']
Modifiability,"/// A pseudo-iterator adaptor that is designed to implement ""early increment""; /// style loops.; ///; /// This is *not a normal iterator* and should almost never be used directly. It; /// is intended primarily to be used with range based for loops and some range; /// algorithms.; ///; /// The iterator isn't quite an `OutputIterator` or an `InputIterator` but; /// somewhere between them. The constraints of these iterators are:; ///; /// - On construction or after being incremented, it is comparable and; /// dereferencable. It is *not* incrementable.; /// - After being dereferenced, it is neither comparable nor dereferencable, it; /// is only incrementable.; ///; /// This means you can only dereference the iterator once, and you can only; /// increment it once between dereferences.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:22,adapt,adaptor,22,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['adapt'],['adaptor']
Modifiability,"/// A raw_ostream that writes to an SmallVector or SmallString. This is a; /// simple adaptor class. This class does not encounter output errors.; /// raw_svector_ostream operates without a buffer, delegating all memory; /// management to the SmallString. Thus the SmallString is always up-to-date,; /// may be used directly and there is no need to call flush().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:86,adapt,adaptor,86,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,1,['adapt'],['adaptor']
Modifiability,"/// A record to be stored in a MatchTable.; ///; /// This class represents any and all output that may be required to emit the; /// MatchTable. Instances are most often configured to represent an opcode or; /// value that will be emitted to the table with some formatting but it can also; /// represent commas, comments, and other formatting instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:169,config,configured,169,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['config'],['configured']
Modifiability,"/// A refactoring action is a class that defines a set of related refactoring; /// action rules. These rules get grouped under a common umbrella - a single; /// clang-refactor subcommand.; ///; /// A subclass of \c RefactoringAction is responsible for creating the set of; /// grouped refactoring action rules that represent one refactoring operation.; /// Although the rules in one action may have a number of different; /// implementations, they should strive to produce a similar result. It should; /// be easy for users to identify which refactoring action produced the result; /// regardless of which refactoring action rule was used.; ///; /// The distinction between actions and rules enables the creation of action; /// that uses very different rules, for example:; /// - local vs global: a refactoring operation like; /// ""add missing switch cases"" can be applied to one switch when it's; /// selected in an editor, or to all switches in a project when an enum; /// constant is added to an enum.; /// - tool vs editor: some refactoring operation can be initiated in the; /// editor when a declaration is selected, or in a tool when the name of; /// the declaration is passed using a command-line argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringAction.h:6,refactor,refactoring,6,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringAction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringAction.h,10,"['Refactor', 'refactor']","['RefactoringAction', 'refactor', 'refactoring']"
Modifiability,"/// A refactoring action rule is a wrapper class around a specific refactoring; /// action rule (SourceChangeRefactoringRule, etc) that, in addition to invoking; /// the action, describes the requirements that determine when the action can be; /// initiated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h:6,refactor,refactoring,6,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,2,['refactor'],['refactoring']
Modifiability,"/// A refactoring action rule requirement determines when a refactoring action; /// rule can be invoked. The rule can be invoked only when all of the; /// requirements are satisfied.; ///; /// Subclasses must implement the; /// 'Expected<T> evaluate(RefactoringRuleContext &) const' member function.; /// \c T is used to determine the return type that is passed to the; /// refactoring rule's constructor.; /// For example, the \c SourceRangeSelectionRequirement subclass defines; /// 'Expected<SourceRange> evaluate(RefactoringRuleContext &Context) const'; /// function. When this function returns a non-error value, the resulting; /// source range is passed to the specific refactoring action rule; /// constructor (provided all other requirements are satisfied).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h:6,refactor,refactoring,6,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,6,"['Refactor', 'refactor']","['RefactoringRuleContext', 'refactoring']"
Modifiability,/// A refactoring option is an interface that describes a value that; /// has an impact on the outcome of a refactoring.; ///; /// Refactoring options can be specified using command-line arguments when; /// the clang-refactor tool is used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOption.h:6,refactor,refactoring,6,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOption.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOption.h,4,"['Refactor', 'refactor']","['Refactoring', 'refactor', 'refactoring']"
Modifiability,/// A refactoring option that stores a value of type \c T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptions.h:6,refactor,refactoring,6,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptions.h,1,['refactor'],['refactoring']
Modifiability,"/// A reference to a declared variable, function, enum, etc.; /// [C99 6.5.1p2]; ///; /// This encodes all the information about how a declaration is referenced; /// within an expression.; ///; /// There are several optional constructs attached to DeclRefExprs only when; /// they apply in order to conserve memory. These are laid out past the end of; /// the object, and flags in the DeclRefExprBitfield track whether they exist:; ///; /// DeclRefExprBits.HasQualifier:; /// Specifies when this declaration reference expression has a C++; /// nested-name-specifier.; /// DeclRefExprBits.HasFoundDecl:; /// Specifies when this declaration reference expression has a record of; /// a NamedDecl (different from the referenced ValueDecl) which was found; /// during name lookup and/or overload resolution.; /// DeclRefExprBits.HasTemplateKWAndArgsInfo:; /// Specifies when this declaration reference expression has an explicit; /// C++ template keyword and/or template argument list.; /// DeclRefExprBits.RefersToEnclosingVariableOrCapture; /// Specifies when this declaration reference expression (validly); /// refers to an enclosed local or a captured variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:30,variab,variable,30,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,2,['variab'],['variable']
Modifiability,"/// A reference to an atomic boolean variable.; /// We name these e.g. ""V3"", where 3 == atom identity == Value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h:37,variab,variable,37,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h,1,['variab'],['variable']
Modifiability,"/// A register file descriptor.; ///; /// This struct allows to describe processor register files. In particular, it; /// helps describing the size of the register file, as well as the cost of; /// allocating a register file at register renaming stage.; /// FIXME: this struct can be extended to provide information about the number; /// of read/write ports to the register file. A value of zero for field; /// 'NumPhysRegs' means: this register file has an unbounded number of physical; /// registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h:284,extend,extended,284,interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSchedule.h,1,['extend'],['extended']
Modifiability,/// A required refactoring option that stores a value of type \c T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptions.h:15,refactor,refactoring,15,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptions.h,1,['refactor'],['refactoring']
Modifiability,"/// A resource manager for processor resource units and groups.; ///; /// This class owns all the ResourceState objects, and it is responsible for; /// acting on requests from a Scheduler by updating the internal state of; /// ResourceState objects.; /// This class doesn't know about instruction itineraries and functional units.; /// In future, it can be extended to support itineraries too through the same; /// public interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h:357,extend,extended,357,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/ResourceManager.h,1,['extend'],['extended']
Modifiability,"/// A rewriter to build the SCEVs for each of the VF lanes in the expected; /// vectorized loop, which can then be compared to detect their uniformity. This; /// is done by replacing the AddRec SCEVs of the original scalar loop (TheLoop); /// with new AddRecs where the step is multiplied by StepMultiplier and Offset *; /// Step is added. Also checks if all sub-expressions are analyzable w.r.t.; /// uniformity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp:6,rewrite,rewriter,6,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,1,['rewrite'],['rewriter']
Modifiability,/// A rewriter to replace SCEV expressions in Map with the corresponding entry; /// in the map. It skips AddRecExpr because we cannot guarantee that the; /// replacement is loop invariant in the loop of the AddRec.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:6,rewrite,rewriter,6,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['rewrite'],['rewriter']
Modifiability,"/// A rewritten comparison expression that was originally written using; /// operator syntax.; ///; /// In C++20, the following rewrites are performed:; /// - <tt>a == b</tt> -> <tt>b == a</tt>; /// - <tt>a != b</tt> -> <tt>!(a == b)</tt>; /// - <tt>a != b</tt> -> <tt>!(b == a)</tt>; /// - For \c \@ in \c <, \c <=, \c >, \c >=, \c <=>:; /// - <tt>a @ b</tt> -> <tt>(a <=> b) @ 0</tt>; /// - <tt>a @ b</tt> -> <tt>0 @ (b <=> a)</tt>; ///; /// This expression provides access to both the original syntax and the; /// rewritten expression.; ///; /// Note that the rewritten calls to \c ==, \c <=>, and \c \@ are typically; /// \c CXXOperatorCallExprs, but could theoretically be \c BinaryOperators.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:128,rewrite,rewrites,128,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['rewrite'],['rewrites']
Modifiability,"/// A scope for locals.; ///; /// A legal scope for lexical blocks, local variables, and debug info; /// locations. Subclasses are \a DISubprogram, \a DILexicalBlock, and \a; /// DILexicalBlockFile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:74,variab,variables,74,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['variab'],['variables']
Modifiability,/// A selection requirement that is satisfied when the selection range overlaps; /// with a number of neighbouring statements in the AST. The statemenst must be; /// contained in declaration like a function. The selection range must be a; /// non-empty source selection (i.e. cursors won't be accepted).; ///; /// The requirement will be evaluated only once during the initiation and search; /// of matching refactoring action rules.; ///; /// \see CodeRangeASTSelection,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h:408,refactor,refactoring,408,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,1,['refactor'],['refactoring']
Modifiability,"/// A semantic tree transformation that allows one to transform one; /// abstract syntax tree into another.; ///; /// A new tree transformation is defined by creating a new subclass \c X of; /// \c TreeTransform<X> and then overriding certain operations to provide; /// behavior specific to that transformation. For example, template; /// instantiation is implemented as a tree transformation where the; /// transformation of TemplateTypeParmType nodes involves substituting the; /// template arguments for their corresponding template parameters; a similar; /// transformation is performed for non-type template parameters and; /// template template parameters.; ///; /// This tree-transformation template uses static polymorphism to allow; /// subclasses to customize any of its operations. Thus, a subclass can; /// override any of the transformation or rebuild operators by providing an; /// operation with the same signature as the default implementation. The; /// overriding function should not be virtual.; ///; /// Semantic tree transformations are split into two stages, either of which; /// can be replaced by a subclass. The ""transform"" step transforms an AST node; /// or the parts of an AST node using the various transformation functions,; /// then passes the pieces on to the ""rebuild"" step, which constructs a new AST; /// node of the appropriate kind from the pieces. The default transformation; /// routines recursively transform the operands to composite AST nodes (e.g.,; /// the pointee type of a PointerType node) and, if any of those operand nodes; /// were changed by the transformation, invokes the rebuild operation to create; /// a new AST node.; ///; /// Subclasses can customize the transformation at various levels. The; /// most coarse-grained transformations involve replacing TransformType(),; /// TransformExpr(), TransformDecl(), TransformNestedNameSpecifierLoc(),; /// TransformTemplateName(), or TransformTemplateArgument() with entirely; /// new implementations.;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:719,polymorphi,polymorphism,719,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['polymorphi'],['polymorphism']
Modifiability,"/// A set of deallocations that should be performed when the; /// ASTContext is destroyed.; // FIXME: We really should have a better mechanism in the ASTContext to; // manage running destructors for types which do variable sized allocation; // within the AST. In some places we thread the AST bump pointer allocator; // into the datastructures which avoids this mess during deallocation but is; // wasteful of memory, and here we require a lot of error prone book keeping; // in order to track and run destructors while we're tearing things down.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:214,variab,variable,214,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['variab'],['variable']
Modifiability,/// A set of refactoring action rules that should have unique initiation; /// requirements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRules.h:13,refactor,refactoring,13,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRules.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRules.h,1,['refactor'],['refactoring']
Modifiability,/// A set of unassigned variables that appear in watched literals in; /// `Formula`. The vector is guaranteed to contain unique elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:24,variab,variables,24,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variables']
Modifiability,"/// A simple intrusive list implementation.; ///; /// This is a simple intrusive list for a \c T that inherits from \c; /// ilist_node<T>. The list never takes ownership of anything inserted in it.; ///; /// Unlike \a iplist<T> and \a ilist<T>, \a simple_ilist<T> never deletes; /// values, and has no callback traits.; ///; /// The API for adding nodes include \a push_front(), \a push_back(), and \a; /// insert(). These all take values by reference (not by pointer), except for; /// the range version of \a insert().; ///; /// There are three sets of API for discarding nodes from the list: \a; /// remove(), which takes a reference to the node to remove, \a erase(), which; /// takes an iterator or iterator range and returns the next one, and \a; /// clear(), which empties out the container. All three are constant time; /// operations. None of these deletes any nodes; in particular, if there is a; /// single node in the list, then these have identical semantics:; /// \li \c L.remove(L.front());; /// \li \c L.erase(L.begin());; /// \li \c L.clear();; ///; /// As a convenience for callers, there are parallel APIs that take a \c; /// Disposer (such as \c std::default_delete<T>): \a removeAndDispose(), \a; /// eraseAndDispose(), and \a clearAndDispose(). These have different names; /// because the extra semantic is otherwise non-obvious. They are equivalent; /// to calling \a std::for_each() on the range to be discarded.; ///; /// The currently available \p Options customize the nodes in the list. The; /// same options must be specified in the \a ilist_node instantiation for; /// compatibility (although the order is irrelevant).; /// \li Use \a ilist_tag to designate which ilist_node for a given \p T this; /// list should use. This is useful if a type \p T is part of multiple,; /// independent lists simultaneously.; /// \li Use \a ilist_sentinel_tracking to always (or never) track whether a; /// node is a sentinel. Specifying \c true enables the \a; /// ilist_node::isSentinel",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h:102,inherit,inherits,102,interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/simple_ilist.h,1,['inherit'],['inherits']
Modifiability,/// A single NRVO candidate variable in this scope.; /// There are three possible values:; /// 1) pointer to VarDecl that denotes NRVO candidate itself.; /// 2) nullptr value means that NRVO is not allowed in this scope; /// (e.g. return a function parameter).; /// 3) std::nullopt value means that there is no NRVO candidate in this scope; /// (i.e. there are no return statements in this scope).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:28,variab,variable,28,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h,1,['variab'],['variable']
Modifiability,"/// A single location or constant within a variable location description, with; /// either a single entry (with an optional DIExpression) used for a DBG_VALUE,; /// or a list of entries used for a DBG_VALUE_LIST.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocEntry.h:43,variab,variable,43,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocEntry.h,1,['variab'],['variable']
Modifiability,"/// A smart pointer to a reference-counted object that inherits from; /// RefCountedBase or ThreadSafeRefCountedBase.; ///; /// This class increments its pointee's reference count when it is created, and; /// decrements its refcount when it's destroyed (or is changed to point to a; /// different object).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h:55,inherit,inherits,55,interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntrusiveRefCntPtr.h,1,['inherit'],['inherits']
Modifiability,"/// A source selection range that's specified in a test file using an inline; /// command in the comment. These commands can take the following forms:; ///; /// - /*range=*/ will create an empty selection range in the default group; /// right after the comment.; /// - /*range a=*/ will create an empty selection range in the 'a' group right; /// after the comment.; /// - /*range = +1*/ will create an empty selection range at a location that's; /// right after the comment with one offset to the column.; /// - /*range= -> +2:3*/ will create a selection range that starts at the; /// location right after the comment, and ends at column 3 of the 2nd line; /// after the line of the starting location.; ///; /// Clang-refactor will expected all ranges in one test group to produce; /// identical results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h:719,refactor,refactor,719,interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h,1,['refactor'],['refactor']
Modifiability,"/// A spilled register may indicate that we have to end the current range of; /// a variable and create a new one for the spill location.; /// A restored register may indicate the reverse situation.; /// We don't want to insert any instructions in process(), so we just create; /// the DBG_VALUE without inserting it and keep track of it in \p Transfers.; /// It will be inserted into the BB when we're done iterating over the; /// instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:84,variab,variable,84,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// A stack-allocated class that identifies which local; /// variable declaration instantiations are present in this scope.; ///; /// A new instance of this class type will be created whenever we; /// instantiate a new function declaration, which will have its own; /// set of parameter declarations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:61,variab,variable,61,interpreter/llvm-project/clang/include/clang/Sema/Template.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h,1,['variab'],['variable']
Modifiability,/// A struct for saving information about induction variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h:52,variab,variables,52,interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,1,['variab'],['variables']
Modifiability,"/// A struct with extended info about a syntactic; /// name qualifier, to be used for the case of out-of-line declarations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:18,extend,extended,18,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['extend'],['extended']
Modifiability,/// A subcommand that corresponds to individual refactoring action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:48,refactor,refactoring,48,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,1,['refactor'],['refactoring']
Modifiability,"/// A template class designed to allow other frontends to; /// easily customize the builder classes used by ConstantInitBuilder,; /// and thus to extend the API to work with the abstractions they; /// prefer. This would probably not be necessary if C++ just; /// supported extension methods.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:146,extend,extend,146,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,2,['extend'],['extend']
Modifiability,/// A template wrapper used to implement the polymorphic API.; ///; /// Can be instantiated for any object which provides a \c run method accepting; /// an \c IRUnitT& and an \c AnalysisManager<IRUnit>&. It requires the pass to; /// be a copyable object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:45,polymorphi,polymorphic,45,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,1,['polymorphi'],['polymorphic']
Modifiability,/// A templated variable's definition was implicitly instantiated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTMutationListener.h:16,variab,variable,16,interpreter/llvm-project/clang/include/clang/AST/ASTMutationListener.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTMutationListener.h,1,['variab'],['variable']
Modifiability,/// A temporary or local variable. This will be one of:; /// * A MaterializeTemporaryExpr.; /// * A DeclRefExpr whose declaration is a local.; /// * An AddrLabelExpr.; /// * A BlockExpr for a block with captures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:25,variab,variable,25,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['variab'],['variable']
Modifiability,/// A tool to run refactorings.; ///; /// This is a refactoring specific version of \see ClangTool. FrontendActions; /// passed to run() and runAndSave() should add replacements to; /// getReplacements().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring.h:18,refactor,refactorings,18,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring.h,2,['refactor'],"['refactoring', 'refactorings']"
Modifiability,/// A type of refactoring action rule that finds a set of symbol occurrences; /// that reference a particular symbol.; ///; /// This action rule is typically used for an interactive rename that allows; /// users to specify the new name and the set of selected occurrences during; /// the refactoring.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRules.h:14,refactor,refactoring,14,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRules.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRules.h,2,['refactor'],['refactoring']
Modifiability,/// A type of refactoring action rule that produces source replacements in the; /// form of atomic changes.; ///; /// This action rule is typically used for local refactorings that replace; /// source in a single AST unit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRules.h:14,refactor,refactoring,14,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRules.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRules.h,2,['refactor'],"['refactoring', 'refactorings']"
Modifiability,/// A unique identifier for the specific refactoring.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h:41,refactor,refactoring,41,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,1,['refactor'],['refactoring']
Modifiability,"/// A use of a variable, which might be uninitialized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h:15,variab,variable,15,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,1,['variab'],['variable']
Modifiability,/// A user value is a part of a debug info user variable.; ///; /// A DBG_VALUE instruction notes that (a sub-register of) a virtual register; /// holds part of a user variable. The part is identified by a byte offset.; ///; /// UserValues are grouped into equivalence classes for easier searching. Two; /// user values are related if they are held by the same virtual register. The; /// equivalence class is the transitive closure of that relation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:48,variab,variable,48,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,2,['variab'],['variable']
Modifiability,/// A utility class that uses RAII to save and restore the value of a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SaveAndRestore.h:70,variab,variable,70,interpreter/llvm-project/llvm/include/llvm/Support/SaveAndRestore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/SaveAndRestore.h,1,['variab'],['variable']
Modifiability,/// A utility pass template that simply runs another pass multiple times.; ///; /// This can be useful when debugging or testing passes. It also serves as an; /// example of how to extend the pass manager in ways beyond composition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:181,extend,extend,181,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,1,['extend'],['extend']
Modifiability,"/// A value escapes in these possible cases:; ///; /// - binding to something that is not a memory region.; /// - binding to a memregion that does not have stack storage; /// - binding to a variable that has a destructor attached using CleanupAttr; ///; /// We do not currently model what happens when a symbol is; /// assigned to a struct field, unless it is a known smart pointer; /// implementation, about which we know that it is inlined.; /// FIXME: This could definitely be improved upon.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp:190,variab,variable,190,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.cpp,1,['variab'],['variable']
Modifiability,/// A variable or parameter storing global thread id for OpenMP; /// constructs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:6,variab,variable,6,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,2,['variab'],['variable']
Modifiability,"/// A variant matcher object.; ///; /// The purpose of this object is to abstract simple and polymorphic matchers; /// into a single object type.; /// Polymorphic matchers might be implemented as a list of all the possible; /// overloads of the matcher. \c VariantMatcher knows how to select the; /// appropriate overload when needed.; /// To get a real matcher object out of a \c VariantMatcher you can do:; /// - getSingleMatcher() which returns a matcher, only if it is not ambiguous; /// to decide which matcher to return. Eg. it contains only a single; /// matcher, or a polymorphic one with only one overload.; /// - hasTypedMatcher<T>()/getTypedMatcher<T>(): These calls will determine if; /// the underlying matcher(s) can unambiguously return a Matcher<T>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:93,polymorphi,polymorphic,93,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,3,"['Polymorphi', 'polymorphi']","['Polymorphic', 'polymorphic']"
Modifiability,"/// A vector of macros that should be interpreted as conditionals; /// instead of as function calls.; ///; /// These are expected to be macros of the form:; /// \code; /// IF(...); /// <conditional-body>; /// else IF(...); /// <conditional-body>; /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// IfMacros: ['IF']; /// \endcode; ///; /// For example: `KJ_IF_MAYBE; /// <https://github.com/capnproto/capnproto/blob/master/kjdoc/tour.md#maybes>`_; /// \version 13",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:291,config,configuration,291,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,['config'],"['configuration', 'configured']"
Modifiability,"/// A vector of macros that should be interpreted as foreach loops; /// instead of as function calls.; ///; /// These are expected to be macros of the form:; /// \code; /// FOREACH(<variable-declaration>, ...); /// <loop-body>; /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// ForEachMacros: ['RANGES_FOR', 'FOREACH']; /// \endcode; ///; /// For example: BOOST_FOREACH.; /// \version 3.7",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:182,variab,variable-declaration,182,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,3,"['config', 'variab']","['configuration', 'configured', 'variable-declaration']"
Modifiability,"/// A vector of macros which are whitespace-sensitive and should not; /// be touched.; ///; /// These are expected to be macros of the form:; /// \code; /// STRINGIZE(...); /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// WhitespaceSensitiveMacros: ['STRINGIZE', 'PP_STRINGIZE']; /// \endcode; ///; /// For example: BOOST_PP_STRINGIZE; /// \version 11",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:217,config,configuration,217,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,['config'],"['configuration', 'configured']"
Modifiability,"/// A vector of prefixes ordered by the desired groups for Java imports.; ///; /// One group's prefix can be a subset of another - the longest prefix is; /// always matched. Within a group, the imports are ordered lexicographically.; /// Static imports are grouped separately and follow the same group rules.; /// By default, static imports are placed before non-static imports,; /// but this behavior is changed by another option,; /// ``SortJavaStaticImport``.; ///; /// In the .clang-format configuration file, this can be configured like; /// in the following yaml example. This will result in imports being; /// formatted as in the Java example below.; /// \code{.yaml}; /// JavaImportGroups: ['com.example', 'com', 'org']; /// \endcode; ///; /// \code{.java}; /// import static com.example.function1;; ///; /// import static com.test.function2;; ///; /// import static org.example.function3;; ///; /// import com.example.ClassA;; /// import com.example.Test;; /// import com.example.a.ClassB;; ///; /// import com.test.ClassC;; ///; /// import org.example.ClassD;; /// \endcode; /// \version 8",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:494,config,configuration,494,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,['config'],"['configuration', 'configured']"
Modifiability,"/// A vector of strings that should be interpreted as attributes/qualifiers; /// instead of identifiers. This can be useful for language extensions or; /// static analyzer annotations.; ///; /// For example:; /// \code; /// x = (char *__capability)&y;; /// int function(void) __unused;; /// void only_writes_to_buffer(char *__output buffer);; /// \endcode; ///; /// In the .clang-format configuration file, this can be configured like:; /// \code{.yaml}; /// AttributeMacros: ['__capability', '__output', '__unused']; /// \endcode; ///; /// \version 12",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:387,config,configuration,387,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,['config'],"['configuration', 'configured']"
Modifiability,/// A vector select of 2 constant vectors can be simplified to math/logic to; /// avoid a variable select instruction and possibly avoid constant loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:90,variab,variable,90,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['variab'],['variable']
Modifiability,"/// A vector that has set insertion semantics.; ///; /// This adapter class provides a way to keep a set of things that also has the; /// property of a deterministic iteration order. The order of iteration is the; /// order of insertion.; ///; /// The key and value types are derived from the Set and Vector types; /// respectively. This allows the vector-type operations and set-type operations; /// to have different types. In particular, this is useful when storing pointers; /// as ""Foo *"" values but looking them up as ""const Foo *"" keys.; ///; /// No constraint is placed on the key and value types, although it is assumed; /// that value_type can be converted into key_type for insertion. Users must be; /// aware of any loss of information in this conversion. For example, setting; /// value_type to float and key_type to int can produce very surprising results,; /// but it is not explicitly disallowed.; ///; /// The parameter N specifies the ""small"" size of the container, which is the; /// number of elements upto which a linear scan over the Vector will be used; /// when searching for elements instead of checking Set, due to it being better; /// for performance. A value of 0 means that this mode of operation is not used,; /// and is the default value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h:62,adapt,adapter,62,interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SetVector.h,1,['adapt'],['adapter']
Modifiability,"/// A virtual file system parsed from a YAML file.; ///; /// Currently, this class allows creating virtual files and directories. Virtual; /// files map to existing external files in \c ExternalFS, and virtual; /// directories may either map to existing directories in \c ExternalFS or list; /// their contents in the form of other virtual directories and/or files.; ///; /// The basic structure of the parsed file is:; /// \verbatim; /// {; /// 'version': <version number>,; /// <optional configuration>; /// 'roots': [; /// <directory entries>; /// ]; /// }; /// \endverbatim; ///; /// The roots may be absolute or relative. If relative they will be made; /// absolute against either current working directory or the directory where; /// the Overlay YAML file is located, depending on the 'root-relative'; /// configuration.; ///; /// All configuration options are optional.; /// 'case-sensitive': <boolean, default=(true for Posix, false for Windows)>; /// 'use-external-names': <boolean, default=true>; /// 'root-relative': <string, one of 'cwd' or 'overlay-dir', default='cwd'>; /// 'overlay-relative': <boolean, default=false>; /// 'fallthrough': <boolean, default=true, deprecated - use 'redirecting-with'; /// instead>; /// 'redirecting-with': <string, one of 'fallthrough', 'fallback', or; /// 'redirect-only', default='fallthrough'>; ///; /// To clarify, 'root-relative' option will prepend the current working; /// directory, or the overlay directory to the 'roots->name' field only if; /// 'roots->name' is a relative path. On the other hand, when 'overlay-relative'; /// is set to 'true', external paths will always be prepended with the overlay; /// directory, even if external paths are not relative paths. The; /// 'root-relative' option has no interaction with the 'overlay-relative'; /// option.; ///; /// Virtual directories that list their contents are represented as; /// \verbatim; /// {; /// 'type': 'directory',; /// 'name': <string>,; /// 'contents': [ <file or directory entr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h:490,config,configuration,490,interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/VirtualFileSystem.h,3,['config'],['configuration']
Modifiability,/// A whole (unfragmented) source variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,/// A worklist of select instructions to rewrite prior to promoting; /// allocas.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:41,rewrite,rewrite,41,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['rewrite'],['rewrite']
Modifiability,/// A wrapper interface to populate the PGO symtab with functions; /// decls from module \c M. This interface is used by transformation; /// passes such as indirect function call promotion. Variable \c InLTO; /// indicates if this is called from LTO optimization passes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:190,Variab,Variable,190,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['Variab'],['Variable']
Modifiability,"/// A wrapper on raw_string_ostream that contains its own buffer rather than; /// having to point it at one elsewhere. (In other words, it works just like; /// std::ostringstream; also, this makes it convenient to declare a whole array; /// of them at once.); ///; /// We have to set this up using multiple inheritance, to ensure that the; /// string member has been constructed before raw_string_ostream's constructor; /// is given a pointer to it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:307,inherit,inheritance,307,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['inherit'],['inheritance']
Modifiability,/// AArch64 Code Generator Pass Configuration Options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp:32,Config,Configuration,32,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp,1,['Config'],['Configuration']
Modifiability,"/// AMX tile register size can be configured, the maximum size is 16x64=1024; /// bytes. Since there is no 2D type in llvm IR, we use vector type to; /// represent 2D tile and the fixed size is maximum amx tile register size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h:34,config,configured,34,interpreter/llvm-project/clang/lib/Headers/amxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h,1,['config'],['configured']
Modifiability,"/// ANY_EXTEND_VECTOR_INREG(Vector) - This operator represents an; /// in-register any-extension of the low lanes of an integer vector. The; /// result type must have fewer elements than the operand type, and those; /// elements must be larger integer types such that the total size of the; /// operand type is less than or equal to the size of the result type. Each; /// of the low operand elements is any-extended into the corresponding,; /// wider result elements with the high bits becoming undef.; /// NOTE: The type legalizer prefers to make the operand and result size; /// the same to allow expansion to shuffle vector during op legalization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:407,extend,extended,407,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['extend'],['extended']
Modifiability,/// API notes for a variable/property.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h:20,variab,variable,20,interpreter/llvm-project/clang/include/clang/APINotes/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h,1,['variab'],['variable']
Modifiability,/// ARC Code Generator Pass Configuration Options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARC/ARCTargetMachine.cpp:28,Config,Configuration,28,interpreter/llvm-project/llvm/lib/Target/ARC/ARCTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARC/ARCTargetMachine.cpp,1,['Config'],['Configuration']
Modifiability,/// ARM Code Generator Pass Configuration Options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetMachine.cpp:28,Config,Configuration,28,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetMachine.cpp,1,['Config'],['Configuration']
Modifiability,"/// AST_MATCHER(Type, DefineMatcher) { ... }; /// defines a zero parameter function named DefineMatcher() that returns a; /// Matcher<Type> object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Node: the AST node being matched; its type is Type.; /// Finder: an ASTMatchFinder*.; /// Builder: a BoundNodesTreeBuilder*.; ///; /// The code should return true if 'Node' matches.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:220,variab,variables,220,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,1,['variab'],['variables']
Modifiability,"/// AST_MATCHER_FUNCTION_P(ReturnType, DefineMatcher, ParamType, Param) {; /// ... }; /// defines a single-parameter function named DefineMatcher() that returns a; /// ReturnType object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Param: the parameter passed to the function; its type; /// is ParamType.; ///; /// The code should return an instance of ReturnType.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:259,variab,variables,259,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,1,['variab'],['variables']
Modifiability,"/// AST_MATCHER_P(Type, DefineMatcher, ParamType, Param) { ... }; /// defines a single-parameter function named DefineMatcher() that returns a; /// Matcher<Type> object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Node: the AST node being matched; its type is Type.; /// Param: the parameter passed to the function; its type; /// is ParamType.; /// Finder: an ASTMatchFinder*.; /// Builder: a BoundNodesTreeBuilder*.; ///; /// The code should return true if 'Node' matches.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:242,variab,variables,242,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,1,['variab'],['variables']
Modifiability,"/// AST_MATCHER_P2(; /// Type, DefineMatcher, ParamType1, Param1, ParamType2, Param2) { ... }; /// defines a two-parameter function named DefineMatcher() that returns a; /// Matcher<Type> object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Node: the AST node being matched; its type is Type.; /// Param1, Param2: the parameters passed to the function; their types; /// are ParamType1 and ParamType2.; /// Finder: an ASTMatchFinder*.; /// Builder: a BoundNodesTreeBuilder*.; ///; /// The code should return true if 'Node' matches.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:268,variab,variables,268,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,1,['variab'],['variables']
Modifiability,"/// AST_MATCHER_REGEX(Type, DefineMatcher, Param) { ... }; /// defines a function named DefineMatcher() that takes a regular expression; /// string paramater and an optional RegexFlags parameter and returns a; /// Matcher<Type> object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Node: the AST node being matched; its type is Type.; /// Param: a pointer to an \ref llvm::Regex object; /// Finder: an ASTMatchFinder*.; /// Builder: a BoundNodesTreeBuilder*.; ///; /// The code should return true if 'Node' matches.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:308,variab,variables,308,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,1,['variab'],['variables']
Modifiability,"/// AST_POLYMORPHIC_MATCHER(DefineMatcher) { ... }; /// defines a single-parameter function named DefineMatcher() that is; /// polymorphic in the return type.; ///; /// The variables are the same as for AST_MATCHER, but NodeType will be deduced; /// from the calling context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:127,polymorphi,polymorphic,127,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,2,"['polymorphi', 'variab']","['polymorphic', 'variables']"
Modifiability,"/// AST_POLYMORPHIC_MATCHER_P(DefineMatcher, ParamType, Param) { ... }; /// defines a single-parameter function named DefineMatcher() that is; /// polymorphic in the return type.; ///; /// The variables are the same as for; /// AST_MATCHER_P, with the addition of NodeType, which specifies the node type; /// of the matcher Matcher<NodeType> returned by the function matcher().; ///; /// FIXME: Pull out common code with above macro?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:147,polymorphi,polymorphic,147,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,2,"['polymorphi', 'variab']","['polymorphic', 'variables']"
Modifiability,"/// AST_POLYMORPHIC_MATCHER_P2(; /// DefineMatcher, ParamType1, Param1, ParamType2, Param2) { ... }; /// defines a two-parameter function named matcher() that is polymorphic in; /// the return type.; ///; /// The variables are the same as for AST_MATCHER_P2, with the; /// addition of NodeType, which specifies the node type of the matcher; /// Matcher<NodeType> returned by the function DefineMatcher().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:162,polymorphi,polymorphic,162,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,2,"['polymorphi', 'variab']","['polymorphic', 'variables']"
Modifiability,"/// AST_POLYMORPHIC_MATCHER_REGEX(DefineMatcher, ReturnTypesF, Param) { ... }; /// defines a function named DefineMatcher() that takes a regular expression; /// string paramater and an optional RegexFlags parameter that is polymorphic in; /// the return type.; ///; /// The variables are the same as for; /// AST_MATCHER_REGEX, with the addition of NodeType, which specifies the node; /// type of the matcher Matcher<NodeType> returned by the function matcher().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:223,polymorphi,polymorphic,223,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,2,"['polymorphi', 'variab']","['polymorphic', 'variables']"
Modifiability,/// ATOMIC_CMP_SWAP - the exact same as the target-independent nodes; /// except they ensure that the compare input is zero-extended for; /// sub-word versions because the atomic loads zero-extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:124,extend,extended,124,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,2,['extend'],"['extend', 'extended']"
Modifiability,/// AVR Code Generator Pass Configuration Options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRTargetMachine.cpp:28,Config,Configuration,28,interpreter/llvm-project/llvm/lib/Target/AVR/AVRTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRTargetMachine.cpp,1,['Config'],['Configuration']
Modifiability,"/// Abstract class common to all of the C++ ""named""/""keyword"" casts.; ///; /// This abstract class is inherited by all of the classes; /// representing ""named"" casts: CXXStaticCastExpr for \c static_cast,; /// CXXDynamicCastExpr for \c dynamic_cast, CXXReinterpretCastExpr for; /// reinterpret_cast, CXXConstCastExpr for \c const_cast and; /// CXXAddrspaceCastExpr for addrspace_cast (in OpenCL).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:102,inherit,inherited,102,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['inherit'],['inherited']
Modifiability,/// Abstract concept of an analysis pass.; ///; /// This concept is parameterized over the IR unit that it can run over and; /// produce an analysis result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:68,parameteriz,parameterized,68,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,1,['parameteriz'],['parameterized']
Modifiability,/// Abstract concept of an analysis result.; ///; /// This concept is parameterized over the IR unit that this result pertains; /// to.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:70,parameteriz,parameterized,70,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,1,['parameteriz'],['parameterized']
Modifiability,"/// According to the property that indexed load/store instructions zero-extend; /// their indices, try to narrow the type of index operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:72,extend,extend,72,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extend']
Modifiability,"/// Account for a location \p mloc being clobbered. Examine the variable; /// locations that will be terminated: and try to recover them by using; /// another location. Optionally, given \p MakeUndef, emit a DBG_VALUE to; /// explicitly terminate a location if it can't be recovered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:64,variab,variable,64,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// Accumulate a mapping between each DILocalVariable fragment and other; /// fragments of that DILocalVariable which overlap. This reduces work during; /// the data-flow stage from ""Find any overlapping fragments"" to ""Check if the; /// known-to-overlap fragments are present"".; /// \param MI A previously unprocessed DEBUG_VALUE instruction to analyze for; /// fragment usage.; /// \param SeenFragments Map from DILocalVariable to all fragments of that; /// Variable which are known to exist.; /// \param OverlappingFragments The overlap map being constructed, from one; /// Var/Fragment pair to a vector of fragments known to overlap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:459,Variab,Variable,459,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['Variab'],['Variable']
Modifiability,/// Act on the iterator variable declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"/// ActOnInitializerError - Given that there was an error parsing an; /// initializer for the given declaration, try to at least re-establish; /// invariants such as whether a variable's type is either dependent or; /// complete.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:176,variab,variable,176,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,/// Adapt a InMemoryFile for VFS' File interface. The goal is to make; /// \p InMemoryFileAdaptor mimic as much as possible the behavior of; /// \p RealFile.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:4,Adapt,Adapt,4,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,1,['Adapt'],['Adapt']
Modifiability,/// Adapt std::less<T> for array_pod_sort.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:4,Adapt,Adapt,4,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['Adapt'],['Adapt']
Modifiability,"/// Adapt the metadata for the specified instruction according to the; /// provided mapping. This is normally used after cloning an instruction, when; /// some noalias scopes needed to be cloned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:4,Adapt,Adapt,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,1,['Adapt'],['Adapt']
Modifiability,/// Adapter to write values to a stream in a particular byte order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/EndianStream.h:4,Adapt,Adapter,4,interpreter/llvm-project/llvm/include/llvm/Support/EndianStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/EndianStream.h,1,['Adapt'],['Adapter']
Modifiability,/// Adaptor between \c ast_matchers::MatchFinder and \c; /// tooling::RefactoringTool.; ///; /// Runs AST matchers and stores the \c tooling::Replacements in a map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/RefactoringCallbacks.h:4,Adapt,Adaptor,4,interpreter/llvm-project/clang/include/clang/Tooling/RefactoringCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/RefactoringCallbacks.h,2,"['Adapt', 'Refactor']","['Adaptor', 'RefactoringTool']"
Modifiability,/// Adaptor from InMemoryDir::iterator to directory_iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:4,Adapt,Adaptor,4,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,1,['Adapt'],['Adaptor']
Modifiability,/// Adaptor that maps from a SCC to its functions.; ///; /// Designed to allow composition of a FunctionPass(Manager) and; /// a CGSCCPassManager. Note that if this pass is constructed with a pointer; /// to a \c CGSCCAnalysisManager it will run the; /// \c FunctionAnalysisManagerCGSCCProxy analysis prior to running the function; /// pass over the SCC to enable a \c FunctionAnalysisManager to be used; /// within this run safely.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:4,Adapt,Adaptor,4,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['Adapt'],['Adaptor']
Modifiability,"/// Adaptor that maps from a function to its loops.; ///; /// Designed to allow composition of a LoopPass(Manager) and a; /// FunctionPassManager. Note that if this pass is constructed with a \c; /// FunctionAnalysisManager it will run the \c LoopAnalysisManagerFunctionProxy; /// analysis prior to running the loop passes over the function to enable a \c; /// LoopAnalysisManager to be used within this run safely.; ///; /// The adaptor comes with two modes: the loop mode and the loop-nest mode, and; /// the worklist updater lived inside will be in the same mode as the adaptor; /// (refer to the documentation of \c LPMUpdater for more detailed explanation).; /// Specifically, in loop mode, all loops in the function will be pushed into; /// the worklist and processed by \p Pass, while only top-level loops are; /// processed in loop-nest mode. Please refer to the various specializations of; /// \fn createLoopFunctionToLoopPassAdaptor to see when loop mode and loop-nest; /// mode are used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:4,Adapt,Adaptor,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,3,"['Adapt', 'adapt']","['Adaptor', 'adaptor']"
Modifiability,/// Adapts design from MacroFusion; /// Puts valid candidate instructions back-to-back so they can easily; /// be turned into VOPD instructions; /// Greedily pairs instruction candidates. O(n^2) algorithm.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNVOPDUtils.cpp:4,Adapt,Adapts,4,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNVOPDUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNVOPDUtils.cpp,1,['Adapt'],['Adapts']
Modifiability,/// Adapts the indent levels of comment lines to the indent of the; /// subsequent line.; // FIXME: Can/should this be done in the UnwrappedLineParser?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.h:4,Adapt,Adapts,4,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.h,1,['Adapt'],['Adapts']
Modifiability,"/// Add CFG elements corresponding to call destructor and end of lifetime; /// of all automatic variables with non-trivial destructor in range [B, E).; /// This include AutomaticObjectDtor and LifetimeEnds elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:96,variab,variables,96,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variables']
Modifiability,"/// Add CFG elements corresponding to leaving a scope.; /// Assumes that range [B, E) corresponds to single scope.; /// This add following elements:; /// * LifetimeEnds for all variables with non-trivial destructor; /// * ScopeEnd for each scope left",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:177,variab,variables,177,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variables']
Modifiability,"/// Add ObjC Category record.; ///; /// \param ClassToExtend The name of class that is being extended by the; /// category, not symbol.; /// \param Category The name of category.; /// \return The non-owning pointer to added record in slice.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h:93,extend,extended,93,interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,1,['extend'],['extended']
Modifiability,"/// Add a declaration to the list of declarations that are initialized; /// for a module. This will typically be a global variable (with internal; /// linkage) that runs module initializers, such as the iostream initializer,; /// or an ImportDecl nominating another module that has initializers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:122,variab,variable,122,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['variab'],['variable']
Modifiability,/// Add a def for a variable that is valid for its lifetime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:20,variab,variable,20,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,/// Add a new bare JITDylib to this ExecutionSession.; ///; /// The JITDylib Name is required to be unique. Clients should verify that; /// names are not being re-used (E.g. by calling getJITDylibByName) if names; /// are based on user input.; ///; /// This call does not install any library code or symbols into the newly; /// created JITDylib. The client is responsible for all configuration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h:380,config,configuration,380,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Core.h,1,['config'],['configuration']
Modifiability,/// Add a new iterator variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,/// Add a new step binding a reference to an object.; ///; /// \param BindingTemporary True if we are binding a reference to a temporary; /// object (thereby extending its lifetime); false if we are binding to an; /// lvalue or an lvalue treated as an rvalue.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:158,extend,extending,158,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,1,['extend'],['extending']
Modifiability,/// Add a new variable to the SSA rewriter. This needs to be called before; /// AddAvailableValue or AddUse calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdaterBulk.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdaterBulk.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SSAUpdaterBulk.cpp,2,"['rewrite', 'variab']","['rewriter', 'variable']"
Modifiability,"/// Add a new variable to the SSA rewriter. This needs to be called before; /// AddAvailableValue or AddUse calls. The return value is the variable ID,; /// which needs to be passed to AddAvailableValue and AddUse.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterBulk.h:14,variab,variable,14,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterBulk.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterBulk.h,3,"['rewrite', 'variab']","['rewriter', 'variable']"
Modifiability,/// Add a node to the Registry: this is the interface between the plugin and; /// the executable.; ///; /// This function is exported by the executable and called by the plugin to; /// add a node to the executable's registry. Therefore it's not defined here; /// to avoid it being instantiated in the plugin and is instead defined in; /// the executable (see LLVM_INSTANTIATE_REGISTRY below).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h:66,plugin,plugin,66,interpreter/llvm-project/llvm/include/llvm/Support/Registry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Registry.h,3,['plugin'],['plugin']
Modifiability,/// Add a pass-config modifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:15,config,config,15,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,1,['config'],['config']
Modifiability,"/// Add a stack map intrinsic call's live variable operands to a stackmap; /// or patchpoint target node's operand list.; ///; /// Constants are converted to TargetConstants purely as an optimization to; /// avoid constant materialization and register allocation.; ///; /// FrameIndex operands are converted to TargetFrameIndex so that ISEL does not; /// generate addess computation nodes, and so FinalizeISel can convert the; /// TargetFrameIndex into a DirectMemRefOp StackMap location. This avoids; /// address materialization and register allocation, but may also be required; /// for correctness. If a StackMap (or PatchPoint) intrinsic directly uses an; /// alloca in the entry block, then the runtime may assume that the alloca's; /// StackMap location can be read immediately after compilation and that the; /// location is valid at any point during execution (this is similar to the; /// assumption made by the llvm.gcroot intrinsic). If the alloca's location were; /// only available in a register, then the runtime would need to trap when; /// execution reaches the StackMap in order to read the alloca's location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:42,variab,variable,42,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['variab'],['variable']
Modifiability,/// Add a stackmap or patchpoint intrinsic call's live variable; /// operands to a stackmap or patchpoint machine instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h:55,variab,variable,55,interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,1,['variab'],['variable']
Modifiability,/// Add a symbol to the symbols list or extend an existing one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h:40,extend,extend,40,interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/InterfaceFile.h,1,['extend'],['extend']
Modifiability,"/// Add a variable that might potentially be captured by the; /// lambda and therefore the enclosing lambdas.; ///; /// This is also used by enclosing lambda's to speculatively capture; /// variables that nested lambda's - depending on their enclosing; /// specialization - might need to capture.; /// Consider:; /// void f(int, int); <-- don't capture; /// void f(const int&, double); <-- capture; /// void foo() {; /// const int x = 10;; /// auto L = [=](auto a) { // capture 'x'; /// return [=](auto b) {; /// f(x, a); // we may or may not need to capture 'x'; /// };; /// };; /// }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:10,variab,variable,10,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Add all of the module level global variables (and their initializers); /// and function declarations, but not the contents of those functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp:39,variab,variables,39,interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,1,['variab'],['variables']
Modifiability,/// Add an assignment to memory for the variable /p Var.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:40,variab,variable,40,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,/// Add an assignment to the variable /p Var.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:29,variab,variable,29,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"/// Add attributes to \p Var which reflect the common attributes of \p; /// VariableDie, namely those which are not dependant on the active variant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h:76,Variab,VariableDie,76,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h,1,['Variab'],['VariableDie']
Modifiability,/// Add common target configurable passes that perform LLVM IR to IR transforms; /// following machine independent optimization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h:22,config,configurable,22,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,2,['config'],['configurable']
Modifiability,/// Add common target configurable passes that perform LLVM IR to IR; /// transforms following machine independent optimization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h:22,config,configurable,22,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,2,['config'],['configurable']
Modifiability,/// Add constant value entry in variable DIE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.h:32,variab,variable,32,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.h,2,['variab'],['variable']
Modifiability,/// Add information about a global variable.; ///; /// \param Name The name of this global variable.; /// \param Info Information about this global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/APINotesWriter.h:35,variab,variable,35,interpreter/llvm-project/clang/include/clang/APINotes/APINotesWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/APINotesWriter.h,3,['variab'],['variable']
Modifiability,"/// Add the complete set of target-independent postISel code generator passes.; ///; /// This can be read as the standard order of major LLVM CodeGen stages. Stages; /// with nontrivial configuration or multiple passes are broken out below in; /// add%Stage routines.; ///; /// Any CodeGenPassBuilder<Derived>::addXX routine may be overriden by the; /// Target. The addPre/Post methods with empty header implementations allow; /// injecting target-specific fixups just before or after major stages.; /// Additionally, targets have the flexibility to change pass order within a; /// stage by overriding default implementation of add%Stage routines below. Each; /// technique has maintainability tradeoffs because alternate pass orders are; /// not well supported. addPre/Post works better if the target pass is easily; /// tied to a common pass. But if it has subtle dependencies on multiple passes,; /// the target should override the stage instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h:186,config,configuration,186,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,2,"['config', 'maintainab']","['configuration', 'maintainability']"
Modifiability,"/// Add the complete set of target-independent postISel code generator passes.; ///; /// This can be read as the standard order of major LLVM CodeGen stages. Stages; /// with nontrivial configuration or multiple passes are broken out below in; /// add%Stage routines.; ///; /// Any TargetPassConfig::addXX routine may be overriden by the Target. The; /// addPre/Post methods with empty header implementations allow injecting; /// target-specific fixups just before or after major stages. Additionally,; /// targets have the flexibility to change pass order within a stage by; /// overriding default implementation of add%Stage routines below. Each; /// technique has maintainability tradeoffs because alternate pass orders are; /// not well supported. addPre/Post works better if the target pass is easily; /// tied to a common pass. But if it has subtle dependencies on multiple passes,; /// the target should override the stage instead.; ///; /// TODO: We could use a single addPre/Post(ID) hook to allow pass injection; /// before/after any target-independent pass. But it's currently overkill.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp:186,config,configuration,186,interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,2,"['config', 'maintainab']","['configuration', 'maintainability']"
Modifiability,/// Add uses of our data variables and runtime hook.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:25,variab,variables,25,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variables']
Modifiability,"/// Add variable locations to \p FnVarLocs so that any bits of a variable; /// with a memory location have that location explicitly reinstated at each; /// subsequent variable location definition that that doesn't overwrite those; /// bits. i.e. after a variable location def, insert new defs for the memory; /// location with fragments for the difference of ""all bits currently in; /// memory"" and ""the fragment of the second def"". e.g.; ///; /// Before:; ///; /// var x bits 0 to 63: value in memory; /// more instructions; /// var x bits 0 to 31: value is %0; ///; /// After:; ///; /// var x bits 0 to 63: value in memory; /// more instructions; /// var x bits 0 to 31: value is %0; /// var x bits 32 to 61: value in memory ; <-- new loc def; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,4,['variab'],['variable']
Modifiability,"/// AddInitializerToStaticVarDecl - Add the initializer for 'D' to the; /// global variable that has already been created for it. If the initializer; /// has a different type than GV does, this may free GV and return a different; /// one. Otherwise it just returns GV.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:83,variab,variable,83,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,2,['variab'],['variable']
Modifiability,"/// AddMemberPointerWithMoreQualifiedTypeVariants - Add the pointer type @p Ty; /// to the set of pointer types along with any more-qualified variants of; /// that type. For example, if @p Ty is ""int const *"", this routine; /// will add ""int const *"", ""int const volatile *"", ""int const; /// restrict *"", and ""int const volatile restrict *"" to the set of; /// pointer types. Returns true if the add of @p Ty itself succeeded,; /// false otherwise.; ///; /// FIXME: what to do about extended qualifiers?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:482,extend,extended,482,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['extend'],['extended']
Modifiability,/// AddRequiredExtensionForVMULL - Add a sign/zero extension to extend the total; /// value size to 64 bits. We need a 64-bit D register as an operand to VMULL.; /// We insert the required extension here to get the vector to fill a D register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:64,extend,extend,64,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extend']
Modifiability,/// AddToken - Add the specified token into the Rewriter before the other; /// position.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/TokenRewriter.h:48,Rewrite,Rewriter,48,interpreter/llvm-project/clang/include/clang/Rewrite/Core/TokenRewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/TokenRewriter.h,2,['Rewrite'],['Rewriter']
Modifiability,"/// AddTypeInfo - Add a chunk to this declarator. Also extend the range to; /// EndLoc, which should be the last token of the chunk.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:55,extend,extend,55,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,1,['extend'],['extend']
Modifiability,"/// AddTypeInfo - Add a chunk to this declarator. Also extend the range to; /// EndLoc, which should be the last token of the chunk.; /// This function takes attrs by R-Value reference because it takes ownership; /// of those attributes from the parameter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:55,extend,extend,55,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,1,['extend'],['extend']
Modifiability,/// AddVariableConstraints - Look at AsmExpr and if it is a variable declared; /// as using a particular register add that as a constraint that will be used; /// in this asm stmt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:60,variab,variable,60,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['variab'],['variable']
Modifiability,/// Adding OMPDeclareTargetDeclAttr to variables with static storage; /// duration that are referenced in the initializer expression list of; /// variables with static storage duration in declare target directive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:39,variab,variables,39,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variables']
Modifiability,"/// Additional information about basic blocks where the current variable is; /// live. Such a block will look like one of these templates:; ///; /// 1. | o---x | Internal to block. Variable is only live in this block.; /// 2. |---x | Live-in, kill.; /// 3. | o---| Def, live-out.; /// 4. |---x o---| Live-in, kill, def, live-out. Counted by NumGapBlocks.; /// 5. |---o---o---| Live-through with uses or defs.; /// 6. |-----------| Live-through without uses. Counted by NumThroughBlocks.; ///; /// Two BlockInfo entries are created for template 4. One for the live-in; /// segment, and one for the live-out segment. These entries look as if the; /// block were split in the middle where the live range isn't live.; ///; /// Live-through blocks without any uses don't get BlockInfo entries. They; /// are simply listed in ThroughBlocks instead.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h:64,variab,variable,64,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// Additional parameterized data on each node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/trie-node.h:15,parameteriz,parameterized,15,interpreter/llvm-project/llvm/tools/llvm-xray/trie-node.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/trie-node.h,1,['parameteriz'],['parameterized']
Modifiability,/// Additional variable properties.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:15,variab,variable,15,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,/// Address of the output variable in which the flag of the last iteration; /// is returned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,variab,variable,26,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,/// Address of the output variable in which the lower iteration number is; /// returned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,variab,variable,26,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,/// Address of the output variable in which the stride value is returned; /// necessary to generated the static_chunked scheduled loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,variab,variable,26,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,/// Address of the output variable in which the upper iteration number is; /// returned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,variab,variable,26,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,/// Address with original alloca instruction. Invalid if the variable was; /// emitted as a global constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:61,variab,variable,61,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,/// Adds OMPDeclareTargetDeclAttr to referenced variables in declare target; /// directive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:48,variab,variables,48,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variables']
Modifiability,"/// Adds a checker to the registry. Use this templated overload when your; /// checker does not require any custom initialization.; /// This function isn't really needed and probably causes more headaches than; /// the tiny convenience that it provides, but external plugins might use it,; /// and there isn't a strong incentive to remove it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:267,plugin,plugins,267,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,1,['plugin'],['plugins']
Modifiability,/// Adds a new variable referenced to this pattern.; /// \param VarDecl The declaration of the variable that is referenced.; /// \param Mention The SourceRange where this variable is referenced.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:15,variab,variable,15,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,3,['variab'],['variable']
Modifiability,/// Adds a statistics gathering plugin if any stats options are used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h:32,plugin,plugin,32,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h,1,['plugin'],['plugin']
Modifiability,/// Adds each referenced variable from the given statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:25,variab,variable,25,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,1,['variab'],['variable']
Modifiability,"/// Adds register output and data dependencies from this SUnit to instructions; /// that occur later in the same scheduling region if they read from or write to; /// the virtual register defined at OperIdx.; ///; /// TODO: Hoist loop induction variable increments. This has to be; /// reevaluated. Generally, IV scheduling should be done before coalescing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp:244,variab,variable,244,interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ScheduleDAGInstrs.cpp,1,['variab'],['variable']
Modifiability,"/// Adds the CFG elements for leaving the scope of automatic objects in; /// range [B, E). This include following:; /// * AutomaticObjectDtor for variables with non-trivial destructor; /// * LifetimeEnds for all variables; /// * ScopeEnd for each scope left",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:146,variab,variables,146,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,2,['variab'],['variables']
Modifiability,/// Adjust linkage of shadow variables in host compilation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:29,variab,variables,29,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,1,['variab'],['variables']
Modifiability,"/// Adjust some parameters for the target-based directives, like addresses of; /// the variables captured by reference in lambdas.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:87,variab,variables,87,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['variab'],['variables']
Modifiability,/// Adjust the \c DeclContext for a function or variable that might be a; /// function-local external declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:48,variab,variable,48,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"/// Adjust the type of an Objective-C object that doesn't match up due; /// to type erasure at various points, e.g., related result types or the use; /// of parameterized classes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:157,parameteriz,parameterized,157,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['parameteriz'],['parameterized']
Modifiability,/// Adjusts \p PrivatedAddr for using instead of the original variable; /// address in normal operations.; /// \param N Number of the reduction item.; /// \param PrivateAddr Address of the corresponding private item.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:62,variab,variable,62,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,"/// After the instruction at index \p Inst and position \p pos has been; /// processed, check whether it defines a variable value in a use-before-def.; /// If so, and the variable value hasn't changed since the start of the; /// block, create a DBG_VALUE.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:115,variab,variable,115,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['variab'],['variable']
Modifiability,"/// All field IDs of late model extensions for efficient lookup. When a column gets added to the extension; /// header, this enables us to determine if the column belongs to a field of the header extension of if it; /// belongs to a field of the regular header that gets extended by additional column representations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:271,extend,extended,271,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['extend'],['extended']
Modifiability,"/// All logical column IDs of columns that extend, with additional column representations, fields of the regular; /// header. During serialization, these columns are not picked up as columns of `fFieldIdsOrder`. But instead; /// these columns need to be serialized in the extension header without re-serializing the field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:43,extend,extend,43,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['extend'],['extend']
Modifiability,/// All occurrences of referenced variables in the order of appearance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,1,['variab'],['variables']
Modifiability,/// All the locations in which the variable is stored.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:35,variab,variable,35,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,1,['variab'],['variable']
Modifiability,"/// Allocate a User with an operand pointer co-allocated.; ///; /// This is used for subclasses which need to allocate a variable number; /// of operands, ie, 'hung off uses'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h:121,variab,variable,121,interpreter/llvm-project/llvm/include/llvm/IR/User.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/User.h,1,['variab'],['variable']
Modifiability,"/// Allocate a buffer of memory with the given size and alignment.; ///; /// When the compiler supports aligned operator new, this will use it to; /// handle even over-aligned allocations.; ///; /// However, this doesn't make any attempt to leverage the fancier techniques; /// like posix_memalign due to portability. It is mostly intended to allow; /// compatibility with platforms that, after aligned allocation was added, use; /// reduced default alignment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h:305,portab,portability,305,interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MemAlloc.h,1,['portab'],['portability']
Modifiability,"/// Allow standard passes to be disabled by the command line, regardless of who; /// is adding the pass.; ///; /// StandardID is the pass identified in the standard pass pipeline and provided; /// to addPass(). It may be a target-specific ID in the case that the target; /// directly adds its own pass, but in that case we harmlessly fall through.; ///; /// TargetID is the pass that the target has configured to override StandardID.; ///; /// StandardID may be a pseudo ID. In that case TargetID is the name of the real; /// pass to run. This allows multiple options to control a single pass depending; /// on where in the pipeline that pass is added.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp:399,config,configured,399,interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetPassConfig.cpp,1,['config'],['configured']
Modifiability,/// Allowed outside users. This holds the variables that can be accessed from; /// outside the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:42,variab,variables,42,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,1,['variab'],['variables']
Modifiability,"/// An ""Extract Function"" refactoring moves code into a new function that's; /// then called from the place where the original code was.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/Extract/Extract.h:26,refactor,refactoring,26,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/Extract/Extract.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/Extract/Extract.h,1,['refactor'],['refactoring']
Modifiability,"/// An (optional) label that prefixes the executable statements in the block.; /// When this variable is non-NULL, it is either an instance of LabelStmt,; /// SwitchCase or CXXCatchStmt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h:93,variab,variable,93,interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,1,['variab'],['variable']
Modifiability,/// An AST selection requirement is satisfied when any portion of the AST; /// overlaps with the selection range.; ///; /// The requirement will be evaluated only once during the initiation and; /// search of matching refactoring action rules.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h:218,refactor,refactoring,218,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,1,['refactor'],['refactoring']
Modifiability,"/// An Iterator adapter using an InnerInvGraphT::iterator as a base iterator,; /// and storing the VertexIdentifier the iterator range comes from. The; /// dereference operator is then performed using a pointer to the graph's edge; /// set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h:16,adapt,adapter,16,interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/Graph.h,1,['adapt'],['adapter']
Modifiability,"/// An LinkGraph pass configuration, consisting of a list of pre-prune,; /// post-prune, and post-fixup passes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:22,config,configuration,22,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,1,['config'],['configuration']
Modifiability,/// An Objective-C object type followed by '<' is a specialization of; /// a parameterized class type or a protocol-qualified type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp:77,parameteriz,parameterized,77,interpreter/llvm-project/clang/lib/Parse/Parser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/Parser.cpp,2,['parameteriz'],['parameterized']
Modifiability,/// An abstract base class for local variable constructors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:37,variab,variable,37,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,1,['variab'],['variable']
Modifiability,/// An abstract interface that consumes the various refactoring results that can; /// be produced by refactoring actions.; ///; /// A valid refactoring result must be handled by a \c handle method.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringResultConsumer.h:52,refactor,refactoring,52,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringResultConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringResultConsumer.h,3,['refactor'],['refactoring']
Modifiability,"/// An abstraction for the result of a tool execution. For example, the; /// underlying result can be in-memory or on-disk.; ///; /// Results should be string key-value pairs. For example, a refactoring tool; /// can use source location as key and a replacement in YAML format as value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Execution.h:191,refactor,refactoring,191,interpreter/llvm-project/clang/include/clang/Tooling/Execution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Execution.h,1,['refactor'],['refactoring']
Modifiability,"/// An abstraction of the assignment of a value to a variable or memory; /// location.; ///; /// An Assignment is Known or NoneOrPhi. A Known Assignment means we have a; /// DIAssignID ptr that represents it. NoneOrPhi means that we don't (or; /// can't) know the ID of the last assignment that took place.; ///; /// The Status of the Assignment (Known or NoneOrPhi) is another; /// join-semilattice. The partial order is:; /// NoneOrPhi > Known {id_0, id_1, ...id_N}; ///; /// i.e. for all values x and y where x != y:; /// join(x, x) = x; /// join(x, y) = NoneOrPhi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:53,variab,variable,53,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,/// An access class for ilist_node private API.; ///; /// This gives access to the private parts of ilist nodes. Nodes for an ilist; /// should friend this class if they inherit privately from ilist_node.; ///; /// Using this class outside of the ilist implementation is unsupported.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:170,inherit,inherit,170,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,1,['inherit'],['inherit']
Modifiability,"/// An adapter for std::invoke_result that falls back to std::result_of if the former is not available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/TypeTraits.hxx:7,adapt,adapter,7,core/foundation/inc/ROOT/TypeTraits.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/TypeTraits.hxx,1,['adapt'],['adapter']
Modifiability,"/// An adapter that can be used to translate diagnostics from one or more; /// llvm::SourceMgr instances to a ,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:7,adapt,adapter,7,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,1,['adapt'],['adapter']
Modifiability,/// An extended version of LLJIT that supports lazy function-at-a-time; /// compilation of LLVM IR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:7,extend,extended,7,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,1,['extend'],['extended']
Modifiability,/// An i1 variable indicating whether or not the @finally is; /// running for an exception.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:10,variab,variable,10,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,/// An i8* variable into which the exception pointer to rethrow; /// has been saved.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:11,variab,variable,11,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,"/// An identifier, e.g. 'foo' or 'x'.; /// This is a pseduo-term; it will be lowered to a variable or projection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:90,variab,variable,90,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['variab'],['variable']
Modifiability,/// An inductive range check is conditional branch in a loop with; ///; /// 1. a very cold successor (i.e. the branch jumps to that successor very; /// rarely); ///; /// and; ///; /// 2. a condition that is provably true for some contiguous range of values; /// taken by the containing loop's induction variable.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp:303,variab,variable,303,interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,1,['variab'],['variable']
Modifiability,"/// An interface layer with SCEV used to manage how we see SCEV expressions; /// for values in the context of existing predicates. We can add new; /// predicates, but we cannot remove them.; ///; /// This layer has multiple purposes:; /// - provides a simple interface for SCEV versioning.; /// - guarantees that the order of transformations applied on a SCEV; /// expression for a single Value is consistent across two different; /// getSCEV calls. This means that, for example, once we've obtained; /// an AddRec expression for a certain value through expression; /// rewriting, we will continue to get an AddRec expression for that; /// Value.; /// - lowers the number of expression rewrites.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:686,rewrite,rewrites,686,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['rewrite'],['rewrites']
Modifiability,/// An interface that declares functions that handle different refactoring; /// option types.; ///; /// A valid refactoring option type must have a corresponding \c visit; /// declaration in this interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptionVisitor.h:63,refactor,refactoring,63,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptionVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptionVisitor.h,2,['refactor'],['refactoring']
Modifiability,/// An interface that subclasses the \c RefactoringResultConsumer interface; /// that stores the reference to the TU-specific diagnostics engine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ToolRefactoringResultConsumer.h:40,Refactor,RefactoringResultConsumer,40,interpreter/llvm-project/clang/tools/clang-refactor/ToolRefactoringResultConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ToolRefactoringResultConsumer.h,1,['Refactor'],['RefactoringResultConsumer']
Modifiability,"/// An interface to query the internal state of an abstract attribute.; ///; /// The abstract state is a minimal interface that allows the Attributor to; /// communicate with the abstract attributes about their internal state without; /// enforcing or exposing implementation details, e.g., the (existence of an); /// underlying lattice.; ///; /// It is sufficient to be able to query if a state is (1) valid or invalid, (2); /// at a fixpoint, and to indicate to the state that (3) an optimistic fixpoint; /// was reached or (4) a pessimistic fixpoint was enforced.; ///; /// All methods need to be implemented by the subclass. For the common use case,; /// a single boolean state or a bit-encoded state, the BooleanState and; /// {Inc,Dec,Bit}IntegerState classes are already provided. An abstract; /// attribute can inherit from them to get the abstract state interface and; /// additional methods to directly modify the state based if needed. See the; /// class comments for help.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:819,inherit,inherit,819,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['inherit'],['inherit']
Modifiability,"/// An intrusive list node.; ///; /// A base class to enable membership in intrusive lists, including \a; /// simple_ilist, \a iplist, and \a ilist. The first template parameter is the; /// \a value_type for the list.; ///; /// An ilist node can be configured with compile-time options to change; /// behaviour and/or add API.; ///; /// By default, an \a ilist_node knows whether it is the list sentinel (an; /// instance of \a ilist_sentinel) if and only if; /// LLVM_ENABLE_ABI_BREAKING_CHECKS. The function \a isKnownSentinel() always; /// returns \c false tracking is off. Sentinel tracking steals a bit from the; /// ""prev"" link, which adds a mask operation when decrementing an iterator, but; /// enables bug-finding assertions in \a ilist_iterator.; ///; /// To turn sentinel tracking on all the time, pass in the; /// ilist_sentinel_tracking<true> template parameter. This also enables the \a; /// isSentinel() function. The same option must be passed to the intrusive; /// list. (ilist_sentinel_tracking<false> turns sentinel tracking off all the; /// time.); ///; /// A type can inherit from ilist_node multiple times by passing in different; /// \a ilist_tag options. This allows a single instance to be inserted into; /// multiple lists simultaneously, where each list is given the same tag.; ///; /// \example; /// struct A {};; /// struct B {};; /// struct N : ilist_node<N, ilist_tag<A>>, ilist_node<N, ilist_tag<B>> {};; ///; /// void foo() {; /// simple_ilist<N, ilist_tag<A>> ListA;; /// simple_ilist<N, ilist_tag<B>> ListB;; /// N N1;; /// ListA.push_back(N1);; /// ListB.push_back(N1);; /// }; /// \endexample; ///; /// See \a is_valid_option for steps on adding a new option.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:249,config,configured,249,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,2,"['config', 'inherit']","['configured', 'inherit']"
Modifiability,"/// An intrusive list with ownership and callbacks specified/controlled by; /// ilist_traits, only with API safe for polymorphic types.; ///; /// The \p Options parameters are the same as those for \a simple_ilist. See; /// there for a description of what's available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:117,polymorphi,polymorphic,117,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,1,['polymorphi'],['polymorphic']
Modifiability,"/// An iterator adaptor that filters the elements of given inner iterators.; ///; /// The predicate parameter should be a callable object that accepts the wrapped; /// iterator's reference type and returns a bool. When incrementing or; /// decrementing the iterator, it will call the predicate on each element and; /// skip any where it returns false.; ///; /// \code; /// int A[] = { 1, 2, 3, 4 };; /// auto R = make_filter_range(A, [](int N) { return N % 2 == 1; });; /// // R contains { 1, 3 }.; /// \endcode; ///; /// Note: filter_iterator_base implements support for forward iteration.; /// filter_iterator_impl exists to provide support for bidirectional iteration,; /// conditional on whether the wrapped iterator supports it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:16,adapt,adaptor,16,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['adapt'],['adaptor']
Modifiability,"/// An operation on a type.; ///; /// \tparam ImplClass Class implementing the operation. Must be inherited from; /// TypeVisitor.; /// \tparam RetTy %Type of result produced by the operation.; ///; /// The class implements polymorphic operation on an object of type derived; /// from Type. The operation is performed by calling method Visit. It then; /// dispatches the call to function \c VisitFooType, if actual argument type; /// is \c FooType.; ///; /// The class implements static polymorphism using Curiously Recurring; /// Template Pattern. It is designed to be a base class for some concrete; /// class:; ///; /// \code; /// class SomeVisitor : public TypeVisitor<SomeVisitor,sometype> { ... };; /// ...; /// Type *atype = ...; /// ...; /// SomeVisitor avisitor;; /// sometype result = avisitor.Visit(atype);; /// \endcode; ///; /// Actual treatment is made by methods of the derived class, TypeVisitor only; /// dispatches call to the appropriate method. If the implementation class; /// \c ImplClass provides specific action for some type, say; /// \c ConstantArrayType, it should define method; /// <tt>VisitConstantArrayType(const ConstantArrayType*)</tt>. Otherwise; /// \c TypeVisitor dispatches call to the method that handles parent type. In; /// this example handlers are tried in the sequence:; ///; /// \li <tt>ImplClass::VisitConstantArrayType(const ConstantArrayType*)</tt>; /// \li <tt>ImplClass::VisitArrayType(const ArrayType*)</tt>; /// \li <tt>ImplClass::VisitType(const Type*)</tt>; /// \li <tt>TypeVisitor::VisitType(const Type*)</tt>; ///; /// The first function of this sequence that is defined will handle object of; /// type \c ConstantArrayType.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h:98,inherit,inherited,98,interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h,3,"['inherit', 'polymorphi']","['inherited', 'polymorphic', 'polymorphism']"
Modifiability,/// An optional AST for the translation unit on which a refactoring action; /// might operate on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringRuleContext.h:56,refactor,refactoring,56,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringRuleContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringRuleContext.h,1,['refactor'],['refactoring']
Modifiability,/// An optional i1 variable indicating whether this cleanup has been; /// activated yet.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:19,variab,variable,19,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,1,['variab'],['variable']
Modifiability,"/// An ordered map of auto-generated variables to their unique names.; /// It stores variables with the following names: 1) "".gomp_critical_user_"" +; /// <critical_section_name> + "".var"" for ""omp critical"" directives; 2); /// <mangled_name_for_global_var> + "".cache."" for cache for threadprivate; /// variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:37,variab,variables,37,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,6,['variab'],['variables']
Modifiability,"/// Analyze the loop code, return true if it cannot be understood. Upon; /// success, this function returns false and returns information about the; /// induction variable and compare instruction used at the end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:163,variab,variable,163,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['variab'],['variable']
Modifiability,"/// Analyze the specified global variable and optimize it if possible. If we; /// make a change, return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:33,variab,variable,33,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['variab'],['variable']
Modifiability,"/// Analyze the specified global variable and optimize; /// it if possible. If we make a change, return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:33,variab,variable,33,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['variab'],['variable']
Modifiability,"/// Analyze the statements in a loop to determine if the loop has; /// a computable trip count and, if so, return a value that represents; /// the trip count expression.; ///; /// This function iterates over the phi nodes in the loop to check for; /// induction variable patterns that are used in the calculation for; /// the number of time the loop is executed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:262,variab,variable,262,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,1,['variab'],['variable']
Modifiability,"/// AnalyzeIndirectGlobalMemory - We found an non-address-taken global variable; /// which holds a pointer type. See if the global always points to non-aliased; /// heap memory: that is, all initializers of the globals store a value known; /// to be obtained via a noalias return function call which have no other use.; /// Further, all loads out of GV must directly use the memory, not store the; /// pointer somewhere. If this is true, we consider the memory pointed to by; /// GV to be owned by GV and can disambiguate other pointers from it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp:71,variab,variable,71,interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,1,['variab'],['variable']
Modifiability,/// Analyzes the pattern of the referenced variables in a statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:43,variab,variables,43,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,1,['variab'],['variables']
Modifiability,"/// Annotations lets you mark points and ranges inside source code, for tests:; ///; /// Annotations Example(R""cpp(; /// int complete() { x.pri^ } // ^ indicates a point; /// void err() { [[""hello"" == 42]]; } // [[this is a range]]; /// $definition^class Foo{}; // points can be named: ""definition""; /// $(foo)^class Foo{}; // ...or have a payload: ""foo""; /// $definition(foo)^class Foo{}; // ...or both; /// $fail(runtime)[[assert(false)]] // ranges can have names/payloads too; /// )cpp"");; ///; /// StringRef Code = Example.code(); // annotations stripped.; /// std::vector<size_t> PP = Example.points(); // all unnamed points; /// size_t P = Example.point(); // there must be exactly one; /// llvm::Range R = Example.range(""fail""); // find named ranges; ///; /// Points/ranges are coordinated into `code()` which is stripped of; /// annotations.; ///; /// Names consist of only alphanumeric characters or '_'.; /// Payloads can contain any character expect '(' and ')'.; ///; /// Ranges may be nested (and points can be inside ranges), but there's no way; /// to define general overlapping ranges.; ///; /// FIXME: the choice of the marking syntax makes it impossible to represent; /// some of the C++ and Objective C constructs (including common ones; /// like C++ attributes). We can fix this by:; /// 1. introducing an escaping mechanism for the special characters,; /// 2. making characters for marking points and ranges configurable,; /// 3. changing the syntax to something less commonly used,; /// 4. ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h:1429,config,configurable,1429,interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/Annotations/Annotations.h,1,['config'],['configurable']
Modifiability,/// Append F to the list of global ctors of module M with the given Priority.; /// This wraps the function in the appropriate structure and stores it along; /// side other global constructors. For details see; /// https://llvm.org/docs/LangRef.html#the-llvm-global-ctors-global-variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h:278,variab,variable,278,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ModuleUtils.h,1,['variab'],['variable']
Modifiability,"/// Append all `events` to the internal RooDataSet or increment the bins of a RooDataHist at the given locations.; ///; /// \param events Events to fill into `data`. The layout is assumed to be `(x, y, z, ...) (x, y, z, ...), (...)`.; /// \note The order of the variables inside `events` must be consistent with the order given in the constructor.; /// No matching by name is performed.; /// \param eventSize Size of a single event.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx:262,variab,variables,262,roofit/roofitcore/src/RooAbsDataHelper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx,1,['variab'],['variables']
Modifiability,"/// Applies `Rule` to all descendants of the node bound to `NodeId`. `Rule` can; /// refer to nodes bound by the calling rule. `Rule` is not applied to the node; /// itself.; ///; /// For example,; /// ```; /// auto InlineX =; /// makeRule(declRefExpr(to(varDecl(hasName(""x"")))), changeTo(cat(""3"")));; /// makeRule(functionDecl(hasName(""f""), hasBody(stmt().bind(""body""))).bind(""f""),; /// flatten(; /// changeTo(name(""f""), cat(""newName"")),; /// rewriteDescendants(""body"", InlineX)));; /// ```; /// Here, we find the function `f`, change its name to `newName` and change all; /// appearances of `x` in its body to `3`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:444,rewrite,rewriteDescendants,444,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,1,['rewrite'],['rewriteDescendants']
Modifiability,"/// Applies new addresses to the list of the variables.; /// \return true if at least one variable is using new address, false; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:45,variab,variables,45,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Applies simplifications while building up a BooleanFormula.; /// We keep track of unit clauses, which tell us variables that must be; /// true/false in any model that satisfies the overall formula.; /// Such variables can be dropped from subsequently-added clauses, which; /// may in turn yield more unit clauses or even a contradiction.; /// The total added complexity of this preprocessing is O(N) where we; /// for every clause, we do a lookup for each unit clauses.; /// The lookup is O(1) on average. This method won't catch all; /// contradictory formulas, more passes can in principle catch; /// more cases but we leave all these and the general case to the; /// proper SAT solver.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:114,variab,variables,114,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,2,['variab'],['variables']
Modifiability,"/// Applies the first rule whose pattern matches; other rules are ignored. If; /// the matchers are independent then order doesn't matter. In that case,; /// `applyFirst` is simply joining the set of rules into one.; //; // `applyFirst` is like an `anyOf` matcher with an edit action attached to each; // of its cases. Anywhere you'd use `anyOf(m1.bind(""id1""), m2.bind(""id2""))` and; // then dispatch on those ids in your code for control flow, `applyFirst` lifts; // that behavior to the rule level. So, you can write `applyFirst({makeRule(m1,; // action1), makeRule(m2, action2), ...});`; //; // For example, consider a type `T` with a deterministic serialization function,; // `serialize()`. For performance reasons, we would like to make it; // non-deterministic. Therefore, we want to drop the expectation that; // `a.serialize() = b.serialize() iff a = b` (although we'll maintain; // `deserialize(a.serialize()) = a`).; //; // We have three cases to consider (for some equality function, `eq`):; // ```; // eq(a.serialize(), b.serialize()) --> eq(a,b); // eq(a, b.serialize()) --> eq(deserialize(a), b); // eq(a.serialize(), b) --> eq(a, deserialize(b)); // ```; //; // `applyFirst` allows us to specify each independently:; // ```; // auto eq_fun = functionDecl(...);; // auto method_call = cxxMemberCallExpr(...);; //; // auto two_calls = callExpr(callee(eq_fun), hasArgument(0, method_call),; // hasArgument(1, method_call));; // auto left_call =; // callExpr(callee(eq_fun), callExpr(hasArgument(0, method_call)));; // auto right_call =; // callExpr(callee(eq_fun), callExpr(hasArgument(1, method_call)));; //; // RewriteRule R = applyFirst({makeRule(two_calls, two_calls_action),; // makeRule(left_call, left_call_action),; // makeRule(right_call, right_call_action)});; // ```; /// @{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:1624,Rewrite,RewriteRule,1624,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,1,['Rewrite'],['RewriteRule']
Modifiability,"/// Applies the transformations described by \p Config to \p In and writes; /// the result into \p Out. This function does the dispatch based on the; /// format of the input binary (COFF, ELF, MachO or wasm).; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h:48,Config,Config,48,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,1,['Config'],['Config']
Modifiability,/// Applies the transformations described by \p Config to; /// each member in archive \p Ar.; /// Writes a result in a file specified by \p Config.OutputFilename.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h:48,Config,Config,48,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ObjCopy.h,2,['Config'],['Config']
Modifiability,/// Applies the transformations described by \p Config to; /// each member in archive \p Ar.; /// \returns Vector of transformed archive members.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/Archive.h:48,Config,Config,48,interpreter/llvm-project/llvm/lib/ObjCopy/Archive.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/Archive.h,1,['Config'],['Config']
Modifiability,/// Apply a Cache-Directed Sort with a custom config.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h:46,config,config,46,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/CodeLayout.h,1,['config'],['config']
Modifiability,"/// Apply a set of heuristics to a new candidate. Heuristics are currently; /// hierarchical. This may be more efficient than a graduated cost model because; /// we don't need to evaluate all aspects of the model for each node in the; /// queue. But it's really done to make the heuristics easier to debug and; /// statistically analyze.; ///; /// \param Cand provides the policy and current best candidate.; /// \param TryCand refers to the next SUnit candidate, otherwise uninitialized.; /// \param Zone describes the scheduled zone that we are extending, or nullptr; /// if Cand is from a different zone than TryCand.; /// \return \c true if TryCand is better than Cand (Reason is NOT NoCand)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:547,extend,extending,547,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['extend'],['extending']
Modifiability,/// Apply a sign-extend or truncate operation on the polynomial.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,1,['extend'],['extend']
Modifiability,/// Apply all replacements in \p Replaces to the Rewriter \p Rewrite.; ///; /// Replacement applications happen independently of the success of; /// other applications.; ///; /// \returns true if all replacements apply. false otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h:49,Rewrite,Rewriter,49,interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Core/Replacement.h,2,['Rewrite'],"['Rewrite', 'Rewriter']"
Modifiability,/// Apply all requested function signature rewrites; /// (\see registerFunctionSignatureRewrite) and return Changed if the module; /// was altered.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:43,rewrite,rewrites,43,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['rewrite'],['rewrites']
Modifiability,/// Apply all stored replacements to the given Rewriter.; ///; /// FileToReplaces will be deduplicated with `groupReplacementsByFile` before; /// application.; ///; /// Replacement applications happen independently of the success of other; /// applications.; ///; /// \returns true if all replacements apply. false otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring.h:47,Rewrite,Rewriter,47,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring.h,1,['Rewrite'],['Rewriter']
Modifiability,"/// Apply special rules for handling extern ""C"" declarations. Returns \c true; /// if we have found that this is a redeclaration of some prior entity.; ///; /// Per C++ [dcl.link]p6:; /// Two declarations [for a function or variable] with C language linkage; /// with the same name that appear in different scopes refer to the same; /// [entity]. An entity with C language linkage shall not be declared with; /// the same name as an entity in global scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:224,variab,variable,224,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,/// Apply specific state changes related to the errno variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:54,variab,variable,54,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['variab'],['variable']
Modifiability,/// Apply the transformations described by \p Config and \p COFFConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h:46,Config,Config,46,interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/COFF/COFFObjcopy.h,1,['Config'],['Config']
Modifiability,/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:46,Config,Config,46,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,1,['Config'],['Config']
Modifiability,"/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In, which is treated as a raw binary input, and writes the result; /// into \p Out.; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:46,Config,Config,46,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,1,['Config'],['Config']
Modifiability,"/// Apply the transformations described by \p Config and \p ELFConfig to; /// \p In, which must represent an IHex file, and writes the result; /// into \p Out.; /// \returns any Error encountered whilst performing the operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h:46,Config,Config,46,interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/ELF/ELFObjcopy.h,1,['Config'],['Config']
Modifiability,/// Apply the transformations described by \p Config and \p MachOConfig to; /// \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h:46,Config,Config,46,interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/MachO/MachOObjcopy.h,2,['Config'],['Config']
Modifiability,/// Apply the transformations described by \p Config and \p WasmConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h:46,Config,Config,46,interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmObjcopy.h,1,['Config'],['Config']
Modifiability,/// Apply the transformations described by \p Config and \p XCOFFConfig; /// to \p In and writes the result into \p Out.; /// \returns any Error encountered whilst performing the operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h:46,Config,Config,46,interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFObjcopy.h,1,['Config'],['Config']
Modifiability,/// Arbitrary value for uninitialized variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/IntegralAP.h:38,variab,variables,38,interpreter/llvm-project/clang/lib/AST/Interp/IntegralAP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/IntegralAP.h,1,['variab'],['variables']
Modifiability,/// Are we within a context in which references to resolved functions or to; /// variables result in odr-use?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:81,variab,variables,81,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,/// Args to pass to the plugins,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:24,plugin,plugins,24,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['plugin'],['plugins']
Modifiability,/// Argument adaptative overload.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:13,adapt,adaptative,13,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,1,['adapt'],['adaptative']
Modifiability,/// Arguments originated from configuration file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:30,config,configuration,30,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['config'],['configuration']
Modifiability,/// Array element access. This extends the array if necessary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp:31,extend,extends,31,interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/MsgPackDocument.cpp,1,['extend'],['extends']
Modifiability,"/// Array of [0..NumFiles) DBI name buffer offsets. In the reference; /// implementation this field is a pointer. But since you can't portably; /// serialize a pointer, on 64-bit platforms they copy all the values except; /// this one into the 32-bit version of the struct and use that for; /// serialization. Regardless, this field is unused, it is only there to; /// store a pointer that can be accessed at runtime.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:134,portab,portably,134,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,1,['portab'],['portably']
Modifiability,"/// ArrayRef - Represent a constant reference to an array (0 or more elements; /// consecutively in memory), i.e. a start pointer and a length. It allows; /// various APIs to take consecutive elements easily and conveniently.; ///; /// This class does not own the underlying data, it is expected to be used in; /// situations where the data resides in some other buffer, whose lifetime; /// extends past that of the ArrayRef. For this reason, it is not in general; /// safe to store an ArrayRef.; ///; /// This is intended to be trivially copyable, so it should be passed by; /// value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:391,extend,extends,391,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['extend'],['extends']
Modifiability,"/// AssertSext, AssertZext - These nodes record if a register contains a; /// value that has already been zero or sign extended from a narrower type.; /// These nodes take two operands. The first is the node that has already; /// been extended, and the second is a value type node indicating the width; /// of the extension.; /// NOTE: In case of the source value (or any vector element value) is; /// poisoned the assertion will not be true for that value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:119,extend,extended,119,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,2,['extend'],['extended']
Modifiability,/// Assign counters to regions and configure them for PGO of a given; /// function. Does nothing if instrumentation is not enabled and either; /// generates global variables or associates PGO data with each of the; /// counters depending on whether we are generating or using instrumentation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h:35,config,configure,35,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h,2,"['config', 'variab']","['configure', 'variables']"
Modifiability,"/// Assign serial numbers to values from left function, and values from; /// right function.; /// Explanation:; /// Being comparing functions we need to compare values we meet at left and; /// right sides.; /// Its easy to sort things out for external values. It just should be; /// the same value at left and right.; /// But for local values (those were introduced inside function body); /// we have to ensure they were introduced at exactly the same place,; /// and plays the same role.; /// Let's assign serial number to each value when we meet it first time.; /// Values that were met at same place will be with same serial numbers.; /// In this case it would be good to explain few points about values assigned; /// to BBs and other ways of implementation (see below).; ///; /// 1. Safety of BB reordering.; /// It's safe to change the order of BasicBlocks in function.; /// Relationship with other functions and serial numbering will not be; /// changed in this case.; /// As follows from FunctionComparator::compare(), we do CFG walk: we start; /// from the entry, and then take each terminator. So it doesn't matter how in; /// fact BBs are ordered in function. And since cmpValues are called during; /// this walk, the numbering depends only on how BBs located inside the CFG.; /// So the answer is - yes. We will get the same numbering.; ///; /// 2. Impossibility to use dominance properties of values.; /// If we compare two instruction operands: first is usage of local; /// variable AL from function FL, and second is usage of local variable AR; /// from FR, we could compare their origins and check whether they are; /// defined at the same place.; /// But, we are still not able to compare operands of PHI nodes, since those; /// could be operands from further BBs we didn't scan yet.; /// So it's impossible to use dominance properties in general.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h:1487,variab,variable,1487,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionComparator.h,2,['variab'],['variable']
Modifiability,/// Assign variable names to all MatchDatas used by a pattern. This must be; /// called after all MatchData decls have been parsed for a given processing; /// unit (e.g. a combine rule); ///; /// Requires an array of MatchDataInfo so we can handle cases where a pattern; /// uses multiple instances of the same MatchData type.; ///; /// Writes to \ref AllMatchDataVars.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/MatchDataInfo.h:11,variab,variable,11,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/MatchDataInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/MatchDataInfo.h,1,['variab'],['variable']
Modifiability,/// Assigned inheritance model for a class in the MS C++ ABI. Must match order; /// of spellings in MSInheritanceAttr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:13,inherit,inheritance,13,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,1,['inherit'],['inheritance']
Modifiability,/// AssignmentTrackingLowering encapsulates a dataflow analysis over a function; /// that interprets assignment tracking debug info metadata and stores in IR to; /// create a map of variable locations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:182,variab,variable,182,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"/// Assigns storage locations and values to all global variables, fields; /// and functions referenced in `FuncDecl`. `FuncDecl` must have a body.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h:55,variab,variables,55,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,1,['variab'],['variables']
Modifiability,"/// Assigns storage locations and values to all parameters, captures, global; /// variables, fields and functions referenced in the function currently being; /// analyzed.; ///; /// Requirements:; ///; /// The function must have a body, i.e.; /// `FunctionDecl::doesThisDecalarationHaveABody()` must be true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h:82,variab,variables,82,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,1,['variab'],['variables']
Modifiability,"/// Assuming ValNo is going to clobber some valid lanes in Other.LR, compute; /// the extent of the tainted lanes in the block.; ///; /// Multiple values in Other.LR can be affected since partial redefinitions; /// can preserve previously tainted lanes.; ///; /// 1 %dst = VLOAD <-- Define all lanes in %dst; /// 2 %src = FOO <-- ValNo to be joined with %dst:ssub0; /// 3 %dst:ssub1 = BAR <-- Partial redef doesn't clear taint in ssub0; /// 4 %dst:ssub0 = COPY %src <-- Conflict resolved, ssub0 wasn't read; ///; /// For each ValNo in Other that is affected, add an (EndIndex, TaintedLanes); /// entry to TaintedVals.; ///; /// Returns false if the tainted lanes extend beyond the basic block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:663,extend,extend,663,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['extend'],['extend']
Modifiability,"/// At this point:; /// - We've broken a ""main loop"" out of the loop in a way that the ""main loop""; /// runs with the induction variable in a subset of [Begin, End).; /// - There is no overflow when computing ""main loop"" exit limit.; /// - Max latch taken count of the loop is limited.; /// It guarantees that induction variable will not overflow iterating in the; /// ""main loop"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp:128,variab,variable,128,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp,2,['variab'],['variable']
Modifiability,/// Attempt to be ABI-compatible with code generated by Clang 12.0.x; /// (git 8e464dd76bef). This causes clang to mangle lambdas within; /// global-scope inline variables incorrectly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:162,variab,variables,162,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['variab'],['variables']
Modifiability,"/// Attempt to extend a value defined after @p StartIdx to include @p Use.; /// Both @p StartIdx and @p Use should be in the same basic block. In case; /// of subranges, an extension could be prevented by an explicit ""undef""; /// caused by a <def,read-undef> on a non-overlapping lane. The list of; /// location of such ""undefs"" should be provided in @p Undefs.; /// The return value is a pair: the first element is VNInfo of the value; /// that was extended (possibly nullptr), the second is a boolean value; /// indicating whether an ""undef"" was encountered.; /// If this range is live before @p Use in the basic block that starts at; /// @p StartIdx, and there is no intervening ""undef"", extend it to be live; /// up to @p Use, and return the pair {value, false}. If there is no; /// segment before @p Use and there is no ""undef"" between @p StartIdx and; /// @p Use, return {nullptr, false}. If there is an ""undef"" before @p Use,; /// return {nullptr, true}.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h:15,extend,extend,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,3,['extend'],"['extend', 'extended']"
Modifiability,"/// Attempt to fold a variable-sized type to a constant-sized type, returning; /// true if we were successful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:22,variab,variable-sized,22,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable-sized']
Modifiability,"/// Attempt to match a simple first order recurrence cycle of the form:; /// %iv = phi Ty [%Start, %Entry], [%Inc, %backedge]; /// %inc = binop %iv, %step; /// OR; /// %iv = phi Ty [%Start, %Entry], [%Inc, %backedge]; /// %inc = binop %step, %iv; ///; /// A first order recurrence is a formula with the form: X_n = f(X_(n-1)); ///; /// A couple of notes on subtleties in that definition:; /// * The Step does not have to be loop invariant. In math terms, it can; /// be a free variable. We allow recurrences with both constant and; /// variable coefficients. Callers may wish to filter cases where Step; /// does not dominate P.; /// * For non-commutative operators, we will match both forms. This; /// results in some odd recurrence structures. Callers may wish to filter; /// out recurrences where the phi is not the LHS of the returned operator.; /// * Because of the structure matched, the caller can assume as a post; /// condition of the match the presence of a Loop with P's parent as it's; /// header *except* in unreachable code. (Dominance decays in unreachable; /// code.); ///; /// NOTE: This is intentional simple. If you want the ability to analyze; /// non-trivial loop conditons, see ScalarEvolution instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:477,variab,variable,477,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,2,['variab'],['variable']
Modifiability,"/// Attempt to merge D with a previous declaration of the same lambda, which is; /// found by its index within its context declaration, if it has one.; ///; /// We can't look up lambdas in their enclosing lexical or semantic context in; /// general, because for lambdas in variables, both of those might be a; /// namespace or the translation unit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:273,variab,variables,273,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,1,['variab'],['variables']
Modifiability,"/// Attempt to unwrap two types that may be similar (C++ [conv.qual]).; ///; /// If T1 and T2 are both pointer types of the same kind, or both array types; /// with the same bound, unwraps layers from T1 and T2 until a pointer type is; /// unwrapped. Top-level qualifiers on T1 and T2 are ignored.; ///; /// This function will typically be called in a loop that successively; /// ""unwraps"" pointer and pointer-to-member types to compare them at each; /// level.; ///; /// \param AllowPiMismatch Allow the Pi1 and Pi2 to differ as described in; /// C++20 [conv.qual], if permitted by the current language mode.; ///; /// \return \c true if a pointer type was unwrapped, \c false if we reached a; /// pair of types that can't be unwrapped further.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:189,layers,layers,189,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['layers'],['layers']
Modifiability,"/// Attempts to load a pass plugin from a given file.; ///; /// \returns Returns an error if either the library cannot be found or loaded,; /// there is no public entry point, or the plugin implements the wrong API; /// version.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:28,plugin,plugin,28,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,2,['plugin'],['plugin']
Modifiability,"/// Attempts to resolve the given range to one that can be edited by a rewrite;; /// generally, one that starts and ends within a particular file. If a value is; /// returned, it satisfies \c validateEditRange.; ///; /// If \c IncludeMacroExpansion is true, a limited set of cases involving source; /// locations in macro expansions is supported. For example, if we're looking to; /// rewrite the int literal 3 to 6, and we have the following definition:; /// #define DO_NOTHING(x) x; /// then; /// foo(DO_NOTHING(3)); /// will be rewritten to; /// foo(6)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h:71,rewrite,rewrite,71,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,2,['rewrite'],['rewrite']
Modifiability,"/// Attempts to rewrite the location operand of debug intrinsics in terms of; /// the coroutine frame pointer, folding pointer offsets into the DIExpression; /// of the intrinsic.; /// If the frame pointer is an Argument, store it into an alloca if; /// OptimizeFrame is false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroInternal.h:16,rewrite,rewrite,16,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroInternal.h,1,['rewrite'],['rewrite']
Modifiability,/// Automatic variables in order of declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:14,variab,variables,14,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variables']
Modifiability,"/// Avoid compiler warning ""has virtual functions but non-virtual destructor; /// [-Wnon-virtual-dtor]"" in derived classes.; ///; /// DOTGraphTraitsPrinter is also used as a mixin for avoiding repeated; /// implementation of printer passes, ie there should be no; /// runtime-polymorphisms/downcasting involving this class and hence no; /// virtual destructor needed. Making this dtor protected stops accidental; /// invocation when the derived class destructor should have been called.; /// Those derived classes sould be marked final to avoid the warning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h:276,polymorphi,polymorphisms,276,interpreter/llvm-project/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h,1,['polymorphi'],['polymorphisms']
Modifiability,"/// Avoid compiler warning ""has virtual functions but non-virtual destructor; /// [-Wnon-virtual-dtor]"" in derived classes.; ///; /// DOTGraphTraitsViewer is also used as a mixin for avoiding repeated; /// implementation of viewer passes, ie there should be no; /// runtime-polymorphisms/downcasting involving this class and hence no; /// virtual destructor needed. Making this dtor protected stops accidental; /// invocation when the derived class destructor should have been called.; /// Those derived classes sould be marked final to avoid the warning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h:274,polymorphi,polymorphisms,274,interpreter/llvm-project/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DOTGraphTraitsPass.h,1,['polymorphi'],['polymorphisms']
Modifiability,"/// BUILD_VECTOR(ELT0, ELT1, ELT2, ELT3,...) - Return a fixed-width vector; /// with the specified, possibly variable, elements. The types of the; /// operands must match the vector element type, except that integer types; /// are allowed to be larger than the element type, in which case the; /// operands are implicitly truncated. The types of the operands must all; /// be the same.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:109,variab,variable,109,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['variab'],['variable']
Modifiability,/// Base class for RefactoringCallbacks.; ///; /// Collects \c tooling::Replacements while running.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/RefactoringCallbacks.h:19,Refactor,RefactoringCallbacks,19,interpreter/llvm-project/clang/include/clang/Tooling/RefactoringCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/RefactoringCallbacks.h,1,['Refactor'],['RefactoringCallbacks']
Modifiability,"/// Base class for all errors indicating malformed binary files.; ///; /// Having a subclass for all malformed binary files allows archive-walking; /// code to skip malformed files without having to understand every possible; /// way that a binary file might be malformed.; ///; /// Currently inherits from ECError for easy interoperability with; /// std::error_code, but this will be removed in the future.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h:293,inherit,inherits,293,interpreter/llvm-project/llvm/include/llvm/Object/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Error.h,1,['inherit'],['inherits']
Modifiability,/// Base class for debug information backends. Common functionality related to; /// tracking which variables and scopes are alive at a given PC live here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h:99,variab,variables,99,interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,1,['variab'],['variables']
Modifiability,/// Base class for elements of the local variable store and of the heap.; ///; /// Each storage location holds a value. The mapping from storage locations to; /// values is stored in the environment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/StorageLocation.h:41,variab,variable,41,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/StorageLocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/StorageLocation.h,1,['variab'],['variable']
Modifiability,/// Base class for error info classes. Do not extend this directly: Extend; /// the ErrorInfo template subclass instead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:46,extend,extend,46,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,2,"['Extend', 'extend']","['Extend', 'extend']"
Modifiability,"/// Base class for instruction visitors; ///; /// Instruction visitors are used when you want to perform different actions; /// for different kinds of instructions without having to use lots of casts; /// and a big switch statement (in your code, that is).; ///; /// To define your own visitor, inherit from this class, specifying your; /// new type for the 'SubClass' template parameter, and ""override"" visitXXX; /// functions in your class. I say ""override"" because this class is defined; /// in terms of statically resolved overloading, not virtual functions.; ///; /// For example, here is a visitor that counts the number of malloc; /// instructions processed:; ///; /// /// Declare the class. Note that we derive from InstVisitor instantiated; /// /// with _our new subclasses_ type.; /// ///; /// struct CountAllocaVisitor : public InstVisitor<CountAllocaVisitor> {; /// unsigned Count;; /// CountAllocaVisitor() : Count(0) {}; ///; /// void visitAllocaInst(AllocaInst &AI) { ++Count; }; /// };; ///; /// And this class would be used like this:; /// CountAllocaVisitor CAV;; /// CAV.visit(function);; /// NumAllocas = CAV.Count;; ///; /// The defined has 'visit' methods for Instruction, and also for BasicBlock,; /// Function, and Module, which recursively process all contained instructions.; ///; /// Note that if you don't implement visitXXX for some instruction type,; /// the visitXXX method for instruction superclass will be invoked. So; /// if instructions are added in the future, they will be automatically; /// supported, if you handle one of their superclasses.; ///; /// The optional second template argument specifies the type that instruction; /// visitation functions should return. If you specify this, you *MUST* provide; /// an implementation of visitInstruction though!.; ///; /// Note that this class is specifically designed as a template to avoid; /// virtual function call overhead. Defining and using an InstVisitor is just; /// as efficient as having your own switch ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h:295,inherit,inherit,295,interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstVisitor.h,1,['inherit'],['inherit']
Modifiability,"/// Base class for tokens / ranges of tokens that can allow breaking; /// within the tokens - for example, to avoid whitespace beyond the column; /// limit, or to reflow text.; ///; /// Generally, a breakable token consists of logical lines, addressed by a line; /// index. For example, in a sequence of line comments, each line comment is its; /// own logical line; similarly, for a block comment, each line in the block; /// comment is on its own logical line.; ///; /// There are two methods to compute the layout of the token:; /// - getRangeLength measures the number of columns needed for a range of text; /// within a logical line, and; /// - getContentStartColumn returns the start column at which we want the; /// content of a logical line to start (potentially after introducing a line; /// break).; ///; /// The mechanism to adapt the layout of the breakable token is organised; /// around the concept of a \c Split, which is a whitespace range that signifies; /// a position of the content of a token where a reformatting might be done.; ///; /// Operating with splits is divided into two operations:; /// - getSplit, for finding a split starting at a position,; /// - insertBreak, for executing the split using a whitespace manager.; ///; /// There is a pair of operations that are used to compress a long whitespace; /// range with a single space if that will bring the line length under the; /// column limit:; /// - getLineLengthAfterCompression, for calculating the size in columns of the; /// line after a whitespace range has been compressed, and; /// - compressWhitespace, for executing the whitespace compression using a; /// whitespace manager; note that the compressed whitespace may be in the; /// middle of the original line and of the reformatted line.; ///; /// For tokens where the whitespace before each line needs to be also; /// reformatted, for example for tokens supporting reflow, there are analogous; /// operations that might be executed before the main line breaki",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.h:836,adapt,adapt,836,interpreter/llvm-project/clang/lib/Format/BreakableToken.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.h,1,['adapt'],['adapt']
Modifiability,"/// Base class for tracking ValueAsMetadata/DIArgLists with user lookups and; /// Owner callbacks outside of ValueAsMetadata.; ///; /// Currently only inherited by DPValue; if other classes need to use it, then; /// a SubclassID will need to be added (either as a new field or by making; /// DebugValue into a PointerIntUnion) to discriminate between the subclasses in; /// lookup and callback handling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:151,inherit,inherited,151,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['inherit'],['inherited']
Modifiability,/// Base class for variables.; ///; /// Uses the SubclassData32 Metadata slot.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:19,variab,variables,19,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['variab'],['variables']
Modifiability,"/// Base class of the Configurations for the member wise looping routines.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfoActions.h:22,Config,Configurations,22,io/io/inc/TStreamerInfoActions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfoActions.h,1,['Config'],['Configurations']
Modifiability,"/// Base class of the Configurations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfoActions.h:22,Config,Configurations,22,io/io/inc/TStreamerInfoActions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfoActions.h,1,['Config'],['Configurations']
Modifiability,"/// BasePtr - ARM physical register used as a base ptr in complex stack; /// frames. I.e., when we need a 3rd base, not just SP and FP, due to; /// variable size stack objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseRegisterInfo.h:148,variab,variable,148,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseRegisterInfo.h,1,['variab'],['variable']
Modifiability,"/// BasePtr - X86 physical register used as a base ptr in complex stack; /// frames. I.e., when we need a 3rd base, not just SP and FP, due to; /// variable size stack objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86RegisterInfo.h:148,variab,variable,148,interpreter/llvm-project/llvm/lib/Target/X86/X86RegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86RegisterInfo.h,1,['variab'],['variable']
Modifiability,"/// Based on the way the client configured the Diagnostic; /// object, classify the specified diagnostic ID into a Level, consumable by; /// the DiagnosticClient.; ///; /// \param Loc The source location we are interested in finding out the; /// diagnostic state. Can be null in order to query the latest state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp:32,config,configured,32,interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/DiagnosticIDs.cpp,1,['config'],['configured']
Modifiability,"/// Based on the way the client configured the DiagnosticsEngine; /// object, classify the specified diagnostic ID into a Level, consumable by; /// the DiagnosticConsumer.; ///; /// To preserve invariant assumptions, this function should not be used to; /// influence parse or semantic analysis actions. Instead consider using; /// \c isIgnored().; ///; /// \param Loc The source location we are interested in finding out the; /// diagnostic state. Can be null in order to query the latest state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:32,config,configured,32,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['config'],['configured']
Modifiability,/// Begins a catch statement by initializing the catch variable and; /// calling __cxa_begin_catch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:55,variab,variable,55,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['variab'],['variable']
Modifiability,"/// Below are some utilities to get the loop guard, loop bounds and induction; /// variable, and to check if a given phinode is an auxiliary induction; /// variable, if the loop is guarded, and if the loop is canonical.; ///; /// Here is an example:; /// \code; /// for (int i = lb; i < ub; i+=step); /// <loop body>; /// --- pseudo LLVMIR ---; /// beforeloop:; /// guardcmp = (lb < ub); /// if (guardcmp) goto preheader; else goto afterloop; /// preheader:; /// loop:; /// i_1 = phi[{lb, preheader}, {i_2, latch}]; /// <loop body>; /// i_2 = i_1 + step; /// latch:; /// cmp = (i_2 < ub); /// if (cmp) goto loop; /// exit:; /// afterloop:; /// \endcode; ///; /// - getBounds; /// - getInitialIVValue --> lb; /// - getStepInst --> i_2 = i_1 + step; /// - getStepValue --> step; /// - getFinalIVValue --> ub; /// - getCanonicalPredicate --> '<'; /// - getDirection --> Increasing; ///; /// - getInductionVariable --> i_1; /// - isAuxiliaryInductionVariable(x) --> true if x == i_1; /// - getLoopGuardBranch(); /// --> `if (guardcmp) goto preheader; else goto afterloop`; /// - isGuarded() --> true; /// - isCanonical --> false",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:83,variab,variable,83,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,2,['variab'],['variable']
Modifiability,/// Binary functor that adapts to any other binary functor after dereferencing; /// operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:24,adapt,adapts,24,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['adapt'],['adapts']
Modifiability,"/// BinaryStreamRef is to BinaryStream what ArrayRef is to an Array. It; /// provides copy-semantics and read only access to a ""window"" of the underlying; /// BinaryStream. Note that BinaryStreamRef is *not* a BinaryStream. That is to; /// say, it does not inherit and override the methods of BinaryStream. In; /// general, you should not pass around pointers or references to BinaryStreams; /// and use inheritance to achieve polymorphism. Instead, you should pass; /// around BinaryStreamRefs by value and achieve polymorphism that way.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamRef.h:257,inherit,inherit,257,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamRef.h,4,"['inherit', 'polymorphi']","['inherit', 'inheritance', 'polymorphism']"
Modifiability,"/// Bind a TFx function to RooFit variables. Also see RooTFnBinding.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooTFnBinding.cxx:34,variab,variables,34,roofit/roofit/src/RooTFnBinding.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooTFnBinding.cxx,6,['variab'],['variables']
Modifiability,/// Bitfield of optional features to include in the PGO extended map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:56,extend,extended,56,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,1,['extend'],['extended']
Modifiability,/// Bitwise AND assignment operator.; ///; /// Performs a bitwise AND operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:130,extend,extended,130,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['extend'],['extended']
Modifiability,/// Bitwise OR assignment operator.; ///; /// Performs a bitwise OR operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:128,extend,extended,128,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['extend'],['extended']
Modifiability,/// Bitwise XOR assignment operator.; ///; /// Performs a bitwise XOR operation on this APInt and RHS. RHS is; /// logically zero-extended or truncated to match the bit-width of; /// the LHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:130,extend,extended,130,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['extend'],['extended']
Modifiability,"/// Block extends are net +0. Naively, we could just recurse on; /// the subexpression, but actually we need to ensure that the; /// value is copied as a block, so there's a little filter here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:10,extend,extends,10,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['extend'],['extends']
Modifiability,"/// BlockByrefInfos - For each __block variable, contains; /// information about the layout of the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:39,variab,variable,39,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,2,['variab'],['variable']
Modifiability,"/// BlockCodeRegion - A region that represents code texts of blocks (closures).; /// Blocks are represented with two kinds of regions. BlockCodeRegions; /// represent the ""code"", while BlockDataRegions represent instances of blocks,; /// which correspond to ""code+data"". The distinction is important, because; /// like a closure a block captures the values of externally referenced; /// variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:387,variab,variables,387,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,1,['variab'],['variables']
Modifiability,"/// BlockDataRegion - A region that represents a block instance.; /// Blocks are represented with two kinds of regions. BlockCodeRegions; /// represent the ""code"", while BlockDataRegions represent instances of blocks,; /// which correspond to ""code+data"". The distinction is important, because; /// like a closure a block captures the values of externally referenced; /// variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:372,variab,variables,372,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,1,['variab'],['variables']
Modifiability,"/// BlockExpr - Adaptor class for mixing a BlockDecl with expressions.; /// ^{ statement-body } or ^(int arg1, float arg2){ statement-body }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:16,Adapt,Adaptor,16,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['Adapt'],['Adaptor']
Modifiability,/// BlockInfo - This contains information emitted to BLOCKINFO_BLOCK blocks.; /// These describe abbreviations that all blocks of the specified ID inherit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamWriter.h:147,inherit,inherit,147,interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamWriter.h,1,['inherit'],['inherit']
Modifiability,"/// BlockRequiresCopying - Returns true if byref variable ""D"" of type ""Ty""; /// requires copy/dispose. Note that this must match the logic; /// in buildByrefHelpers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['variab'],['variable']
Modifiability,/// Branches which inevitably result in the variable being used uninitialized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h:44,variab,variable,44,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,1,['variab'],['variable']
Modifiability,"/// Break after a group of C++11 attributes before variable or function; /// (including constructor/destructor) declaration/definition names or before; /// control statements, i.e. ``if``, ``switch`` (including ``case`` and; /// ``default`` labels), ``for``, and ``while`` statements.; /// \version 16",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:51,variab,variable,51,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['variab'],['variable']
Modifiability,"/// Break inheritance list after the colon and commas.; /// \code; /// class Foo :; /// Base1,; /// Base2; /// {};; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,inherit,inheritance,10,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['inherit'],['inheritance']
Modifiability,"/// Break inheritance list before the colon and after the commas.; /// \code; /// class Foo; /// : Base1,; /// Base2; /// {};; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,inherit,inheritance,10,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['inherit'],['inheritance']
Modifiability,"/// Break inheritance list before the colon and commas, and align; /// the commas with the colon.; /// \code; /// class Foo; /// : Base1; /// , Base2; /// {};; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,inherit,inheritance,10,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['inherit'],['inheritance']
Modifiability,"/// Break inheritance list only after the commas.; /// \code; /// class Foo : Base1,; /// Base2; /// {};; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,inherit,inheritance,10,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['inherit'],['inheritance']
Modifiability,/// Build 'aligned' clause with given number of variables \a NumVars.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:48,variab,variables,48,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Build 'destroy' clause with an interop variable expression \a InteropVar.; ///; /// \param InteropVar The interop variable.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param VarLoc Location of the interop variable.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:43,variab,variable,43,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,3,['variab'],['variable']
Modifiability,/// Build 'init' clause.; ///; /// \param IsTarget Uses the 'target' interop-type.; /// \param IsTargetSync Uses the 'targetsync' interop-type.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param VarLoc Location of the interop variable.; /// \param EndLoc Ending location of the clause.; /// \param N Number of expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:280,variab,variable,280,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variable']
Modifiability,/// Build 'linear' clause with given number of variables \a NumVars.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param StepModifierLoc Location of 'step' modifier.; /// \param EndLoc Ending location of the clause.; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:47,variab,variables,47,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Build 'use' clause with and interop variable expression \a InteropVar.; ///; /// \param InteropVar The interop variable.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param VarLoc Location of the interop variable.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:40,variab,variable,40,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,3,['variab'],['variable']
Modifiability,/// Build DeclarationFragments for a parameter variable declaration; /// ParmVarDecl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h:47,variab,variable,47,interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h,1,['variab'],['variable']
Modifiability,/// Build DeclarationFragments for a variable declaration VarDecl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h:37,variab,variable,37,interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/DeclarationFragments.h,1,['variab'],['variable']
Modifiability,"/// Build VPlans for the full range of feasible VF's = {\p MinVF, 2 * \p MinVF,; /// 4 * \p MinVF, ..., \p MaxVF} by repeatedly building a VPlan for a sub-range; /// of VF's starting at a given VF and extending it as much as possible. Each; /// vectorization decision can potentially shorten this sub-range during; /// buildVPlan().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:201,extend,extending,201,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['extend'],['extending']
Modifiability,/// Build a CXXConstructExpr whose constructor has already been resolved if; /// it denotes an inherited constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:95,inherit,inherited,95,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['inherit'],['inherited']
Modifiability,/// Build a clause with \a N variables; ///; /// \param K Kind of the clause.; /// \param StartLoc Starting location of the clause (the clause keyword).; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:29,variab,variables,29,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,"/// Build a map of {Variable x: Variables y} where all variable fragments; /// contained within the variable fragment x are in set y. This means that; /// y does not contain all overlaps because partial overlaps are excluded.; ///; /// While we're iterating over the function, add single location defs for; /// dbg.declares to \p FnVarLocs.; ///; /// Variables that are interesting to this pass in are added to; /// FnVarLocs->Variables first. TrackedVariablesVectorSize is set to the ID of; /// the last interesting variable plus 1, meaning variables with ID 1; /// (inclusive) to TrackedVariablesVectorSize (exclusive) are interesting. The; /// subsequent variables are either stack homed or fully promoted.; ///; /// Finally, populate UntaggedStoreVars with a mapping of untagged stores to; /// the stored-to variable fragments.; ///; /// These tasks are bundled together to reduce the number of times we need; /// to iterate over the function as they can be achieved together in one pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:20,Variab,Variable,20,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,10,"['Variab', 'variab']","['Variable', 'Variables', 'variable', 'variables']"
Modifiability,"/// Build a new DependentAddressSpaceType or return the pointee; /// type variable with the correct address space (retrieved from; /// AddrSpaceExpr) applied to it. The former will be returned in cases; /// where the address space remains dependent.; ///; /// By default, performs semantic analysis when building the type with address; /// space applied. Subclasses may override this routine to provide different; /// behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:74,variab,variable,74,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['variab'],['variable']
Modifiability,"/// Build a new extended vector element access expression.; ///; /// By default, performs semantic analysis to build the new expression.; /// Subclasses may override this routine to provide different behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:16,extend,extended,16,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['extend'],['extended']
Modifiability,"/// Build a new extended vector type given the element type and; /// number of elements.; ///; /// By default, performs semantic analysis when building the vector type.; /// Subclasses may override this routine to provide different behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:16,extend,extended,16,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['extend'],['extended']
Modifiability,/// Build a new implicit construction via inherited constructor; /// expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:42,inherit,inherited,42,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['inherit'],['inherited']
Modifiability,"/// Build a new nested-name-specifier for ""identifier::"", as described; /// by ActOnCXXNestedNameSpecifier.; ///; /// \param S Scope in which the nested-name-specifier occurs.; /// \param IdInfo Parser information about an identifier in the; /// nested-name-spec.; /// \param EnteringContext If true, enter the context specified by the; /// nested-name-specifier.; /// \param SS Optional nested name specifier preceding the identifier.; /// \param ScopeLookupResult Provides the result of name lookup within the; /// scope of the nested-name-specifier that was computed at template; /// definition time.; /// \param ErrorRecoveryLookup Specifies if the method is called to improve; /// error recovery and what kind of recovery is performed.; /// \param IsCorrectedToColon If not null, suggestion of replace '::' -> ':'; /// are allowed. The bool value pointed by this parameter is set to; /// 'true' if the identifier is treated as if it was followed by ':',; /// not '::'.; /// \param OnlyNamespace If true, only considers namespaces in lookup.; ///; /// This routine differs only slightly from ActOnCXXNestedNameSpecifier, in; /// that it contains an extra parameter \p ScopeLookupResult, which provides; /// the result of name lookup within the scope of the nested-name-specifier; /// that was computed at template definition time.; ///; /// If ErrorRecoveryLookup is true, then this call is used to improve error; /// recovery. This means that it should not emit diagnostics, it should; /// just return true on failure. It also means it should only return a valid; /// scope if it *knows* that the result is correct. It should not return in a; /// dependent context, for example. Nor will it extend \p SS with the scope; /// specifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp:1696,extend,extend,1696,interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,1,['extend'],['extend']
Modifiability,"/// Build a new potentially dependently-sized extended vector type; /// given the element type and number of elements.; ///; /// By default, performs semantic analysis when building the vector type.; /// Subclasses may override this routine to provide different behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:46,extend,extended,46,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,2,['extend'],['extended']
Modifiability,"/// Build a new variable-length array type given the element type,; /// size modifier, size expression, and index type qualifiers.; ///; /// By default, performs semantic analysis when building the array type.; /// Subclasses may override this routine to provide different behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:16,variab,variable-length,16,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['variab'],['variable-length']
Modifiability,/// Build a parameter variable suitable for 'this'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:22,variab,variable,22,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,1,['variab'],['variable']
Modifiability,/// Build a type-check a new Objective-C exception variable declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:51,variab,variable,51,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['variab'],['variable']
Modifiability,/// Build a variable declaration for OpenMP loop iteration variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:12,variab,variable,12,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,/// Build a variable declaration for a for-range statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:12,variab,variable,12,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['variab'],['variable']
Modifiability,/// Build a variable declaration for move parameter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp:12,variab,variable,12,interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,1,['variab'],['variable']
Modifiability,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,variab,variables,56,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,14,['variab'],['variables']
Modifiability,/// Build an empty clause.; ///; /// \param N Number of variables.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,variab,variables,56,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Build an empty clause.; ///; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:62,variab,variables,62,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Build an ext-vector type.; ///; /// Run the required checks for the extended vector type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:72,extend,extended,72,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['extend'],['extended']
Modifiability,"/// Build and insert \p Res = G_ANYEXT \p Op0; ///; /// G_ANYEXT produces a register of the specified width, with bits 0 to; /// sizeof(\p Ty) * 8 set to \p Op. The remaining bits are unspecified; /// (i.e. this is neither zero nor sign-extension). For a vector register,; /// each element is extended individually.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be smaller than \p Res; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:293,extend,extended,293,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,1,['extend'],['extended']
Modifiability,/// Build and insert \p Res = G_CONSTANT \p Val; ///; /// G_CONSTANT is an integer constant with the specified size and value. \p; /// Val will be extended or truncated to the size of \p Reg.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or pointer; /// type.; ///; /// \return The newly created instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:147,extend,extended,147,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,1,['extend'],['extended']
Modifiability,"/// Build and insert \p Res = G_SEXT \p Op; ///; /// G_SEXT produces a register of the specified width, with bits 0 to; /// sizeof(\p Ty) * 8 set to \p Op. The remaining bits are duplicated from the; /// high bit of \p Op (i.e. 2s-complement sign extended).; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be smaller than \p Res; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:247,extend,extended,247,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,1,['extend'],['extended']
Modifiability,"/// Build and insert \p Res = G_ZEXT \p Op; ///; /// G_ZEXT produces a register of the specified width, with bits 0 to; /// sizeof(\p Ty) * 8 set to \p Op. The remaining bits are 0. For a vector; /// register, each element is extended individually.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be smaller than \p Res; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:226,extend,extended,226,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,1,['extend'],['extended']
Modifiability,/// Build and insert a DBG_VALUE instruction expressing the fact that the; /// associated \p Variable lives in \p Reg (suitably modified by \p Expr).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:93,Variab,Variable,93,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,1,['Variab'],['Variable']
Modifiability,/// Build and insert a DBG_VALUE instruction expressing the fact that the; /// associated \p Variable lives in memory at \p Reg (suitably modified by \p; /// Expr).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:93,Variab,Variable,93,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,1,['Variab'],['Variable']
Modifiability,/// Build and insert a DBG_VALUE instruction expressing the fact that the; /// associated \p Variable lives in the stack slot specified by \p FI; /// (suitably modified by \p Expr).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:93,Variab,Variable,93,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,1,['Variab'],['Variable']
Modifiability,/// Build and insert a DBG_VALUE instructions specifying that \p Variable is; /// given by \p C (suitably modified by \p Expr).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:65,Variab,Variable,65,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,1,['Variab'],['Variable']
Modifiability,"/// Build artificial debug info for C++ coroutine frames to allow users to; /// inspect the contents of the frame directly; ///; /// Create Debug information for coroutine frame with debug name ""__coro_frame"".; /// The debug information for the fields of coroutine frame is constructed from; /// the following way:; /// 1. For all the value in the Frame, we search the use of dbg.declare to find; /// the corresponding debug variables for the value. If we can find the; /// debug variable, we can get full and accurate debug information.; /// 2. If we can't get debug information in step 1 and 2, we could only try to; /// build the DIType by Type. We did this in solveDIType. We only handle; /// integer, float, double, integer type and struct type for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:425,variab,variables,425,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param Allocator Allocator expression.; /// \param ColonLoc Location of ':' delimiter.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,variab,variables,32,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,variab,variables,32,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param ColonLoc Location of ':'.; /// \param N Number of the variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,variab,variables,32,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,4,['variab'],['variables']
Modifiability,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,variab,variables,32,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,20,['variab'],['variables']
Modifiability,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,variab,variables,32,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ModifierLoc Modifier location.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,variab,variables,32,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Build clause with number of variables \a NumVars.; ///; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,variab,variables,32,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,4,['variab'],['variables']
Modifiability,/// Build clause with number of variables \a NumVars.; ///; /// \param TheMotionModifiers Motion-modifiers.; /// \param TheMotionModifiersLoc Locations of motion-modifiers.; /// \param MapperQualifierLoc C++ nested name specifier for the associated; /// user-defined mapper.; /// \param MapperIdInfo The identifier of associated user-defined mapper.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,variab,variables,32,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Build scope information for a captured block literal variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/JumpDiagnostics.cpp:57,variab,variables,57,interpreter/llvm-project/clang/lib/Sema/JumpDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/JumpDiagnostics.cpp,1,['variab'],['variables']
Modifiability,/// Build the copy and dispose helpers for the given __block variable; /// emission. Places the helpers in the global cache. Returns null; /// if no helpers are required.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:61,variab,variable,61,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,/// Build the copy helper for a __block variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:40,variab,variable,40,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,/// Build the dispose helper for a __block variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:43,variab,variable,43,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,"/// Build the location list for all DBG_VALUEs in the function that; /// describe the same variable. The resulting DebugLocEntries will have; /// strict monotonically increasing begin addresses and will never; /// overlap. If the resulting list has only one entry that is valid; /// throughout variable's scope return true.; //; // See the definition of DbgValueHistoryMap::Entry for an explanation of the; // different kinds of history map entries. One thing to be aware of is that if; // a debug value is ended by another entry (rather than being valid until the; // end of the function), that entry's instruction may or may not be included in; // the range, depending on if the entry is a clobbering entry (it has an; // instruction that clobbers one or more preceding locations), or if it is an; // (overlapping) debug value entry. This distinction can be seen in the example; // below. The first debug value is ended by the clobbering entry 2, and the; // second and third debug values are ended by the overlapping debug value entry; // 4.; //; // Input:; //; // History map entries [type, end index, mi]; //; // 0 | [DbgValue, 2, DBG_VALUE $reg0, [...] (fragment 0, 32)]; // 1 | | [DbgValue, 4, DBG_VALUE $reg1, [...] (fragment 32, 32)]; // 2 | | [Clobber, $reg0 = [...], -, -]; // 3 | | [DbgValue, 4, DBG_VALUE 123, [...] (fragment 64, 32)]; // 4 [DbgValue, ~0, DBG_VALUE @g, [...] (fragment 0, 96)]; //; // Output [start, end) [Value...]:; //; // [0-1) [(reg0, fragment 0, 32)]; // [1-3) [(reg0, fragment 0, 32), (reg1, fragment 32, 32)]; // [3-4) [(reg1, fragment 32, 32), (123, fragment 64, 32)]; // [4-) [(@g, fragment 0, 96)]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:91,variab,variable,91,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,2,['variab'],['variable']
Modifiability,/// Build the location list for all DBG_VALUEs in the; /// function that describe the same variable. If the resulting; /// list has only one entry that is valid for entire variable's; /// scope return true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:91,variab,variable,91,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,2,['variab'],['variable']
Modifiability,/// Build the mapper variable of '#pragma omp declare mapper'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:21,variab,variable,21,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// BuildAddressSpaceAttr - Builds a DependentAddressSpaceType if an expression; /// is uninstantiated. If instantiated it will apply the appropriate address; /// space to the type. This function allows dependent template variables to be; /// used in conjunction with the address_space attribute,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:222,variab,variables,222,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['variab'],['variables']
Modifiability,/// BuildBlockByrefAddress - Computes the location of the; /// data in a variable which is declared as __block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:73,variab,variable,73,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,/// BuildByrefInfo - This routine changes a __block variable declared as T x; /// into:; ///; /// struct {; /// void *__isa;; /// void *__forwarding;; /// int32_t __flags;; /// int32_t __size;; /// void *__copy_helper; // only if needed; /// void *__destroy_helper; // only if needed; /// void *__byref_variable_layout;// only if needed; /// char padding[X]; // only if needed; /// T x;; /// } x; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,"/// BuildSIClassTypeInfo - Build an abi::__si_class_type_info, used for single; /// inheritance, according to the Itanium C++ ABI, 2.9.5p6b.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:84,inherit,inheritance,84,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,"/// BuildSIClassTypeInfo - Build an abi::__si_class_type_info, used for single; /// inheritance, according to the Itanium C++ ABI, 2.95p6b.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:84,inherit,inheritance,84,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,/// BuildVariableInstantiation - Used after a new variable has been created.; /// Sets basic variable data and decides whether to postpone the; /// variable instantiation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:50,variab,variable,50,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,3,['variab'],['variable']
Modifiability,/// Builds a string representing ambiguous paths from a; /// specific derived class to different subobjects of the same base; /// class.; ///; /// This function builds a string that can be used in error messages; /// to show the different paths that one can take through the; /// inheritance hierarchy to go from the derived class to different; /// subobjects of a base class. The result looks something like this:; /// @code; /// struct D -> struct B -> struct A; /// struct D -> struct C -> struct A; /// @endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:280,inherit,inheritance,280,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inheritance']
Modifiability,/// Builds the variable map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:15,variab,variable,15,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,"/// By default, the POSIX extended regular expression (ERE) syntax is; /// assumed. Pass this flag to turn on basic regular expressions (BRE); /// instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:26,extend,extended,26,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,1,['extend'],['extended']
Modifiability,"/// Byte stream of .debug_loc entries.; ///; /// Stores a unified stream of .debug_loc entries. There's \a List for each; /// variable/inlined-at pair, and an \a Entry for each \a DebugLocEntry.; ///; /// FIXME: Do we need all these temp symbols?; /// FIXME: Why not output directly to the output stream?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocStream.h:126,variab,variable,126,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocStream.h,1,['variab'],['variable']
Modifiability,"/// Bytecode function.; ///; /// Contains links to the bytecode of the function, as well as metadata; /// describing all arguments and stack-local variables.; ///; /// # Calling Convention; ///; /// When calling a function, all argument values must be on the stack.; ///; /// If the function has a This pointer (i.e. hasThisPointer() returns true,; /// the argument values need to be preceeded by a Pointer for the This object.; ///; /// If the function uses Return Value Optimization, the arguments (and; /// potentially the This pointer) need to be preceeded by a Pointer pointing; /// to the location to construct the returned value.; ///; /// After the function has been called, it will remove all arguments,; /// including RVO and This pointer, from the stack.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Function.h:147,variab,variables,147,interpreter/llvm-project/clang/lib/AST/Interp/Function.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Function.h,1,['variab'],['variables']
Modifiability,/// CRTP base class for adapting an iterator to a different type.; ///; /// This class can be used through CRTP to adapt one iterator into another.; /// Typically this is done through providing in the derived class a custom \c; /// operator* implementation. Other methods can be overridden as well.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h:24,adapt,adapting,24,interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/iterator.h,2,['adapt'],"['adapt', 'adapting']"
Modifiability,/// CRTP base class for visiting operations performed by a special member; /// function (or inherited constructor).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:92,inherit,inherited,92,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherited']
Modifiability,/// Cache declarations relevant to DW_TAG_imported_declarations (C++; /// using declarations and global alias variables) that aren't covered; /// by other more specific caches.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:110,variab,variables,110,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['variab'],['variables']
Modifiability,/// Cache of replaceable forward declarations (functions and; /// variables) to RAUW at the end of compilation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:66,variab,variables,66,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['variab'],['variables']
Modifiability,/// Calculate the MaxCallFrameSize and AdjustsStack; /// variables for the function's frame information and eliminate call frame; /// pseudo instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PrologEpilogInserter.cpp:57,variab,variables,57,interpreter/llvm-project/llvm/lib/CodeGen/PrologEpilogInserter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PrologEpilogInserter.cpp,1,['variab'],['variables']
Modifiability,"/// Calculate the cost of an extended reduction pattern, similar to; /// getArithmeticReductionCost of a reduction with an extension.; /// This is the cost of as:; /// ResTy vecreduce.opcode(ext(Ty A)).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:29,extend,extended,29,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['extend'],['extended']
Modifiability,"/// Calculate the cost of an extended reduction pattern, similar to; /// getArithmeticReductionCost of an Add reduction with multiply and optional; /// extensions. This is the cost of as:; /// ResTy vecreduce.add(mul (A, B)).; /// ResTy vecreduce.add(mul(ext(Ty A), ext(Ty B)).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:29,extend,extended,29,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['extend'],['extended']
Modifiability,/// Calculate the fragment of the variable in \p DAI covered; /// from (Dest + SliceOffsetInBits) to; /// to (Dest + SliceOffsetInBits + SliceSizeInBits); ///; /// Return false if it can't be calculated for any reason.; /// Result is set to nullopt if the intersect equals the variable fragment (or; /// variable size) in DAI.; ///; /// Result contains a zero-sized fragment if there's no intersect.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:34,variab,variable,34,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,3,['variab'],['variable']
Modifiability,"/// Calculate the iterated-dominance-frontier for a set of defs, using the; /// existing LLVM facilities for this. Works for a single ""value"" or; /// machine/variable location.; /// \p AllBlocks Set of blocks where we might consume the value.; /// \p DefBlocks Set of blocks where the value/location is defined.; /// \p PHIBlocks Output set of blocks where PHIs must be placed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:158,variab,variable,158,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['variab'],['variable']
Modifiability,/// Calculate the liveness information for the given machine function and; /// extend ranges across basic blocks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:79,extend,extend,79,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['extend'],['extend']
Modifiability,/// Calculate what the inheritance model would be for this class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:23,inherit,inheritance,23,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inheritance']
Modifiability,"/// Calculates the SHA-1 state variable E from the SHA-1 state variables in; /// the 128-bit vector of [4 x i32] in \a __X, adds that to the next set of; /// four message elements in the 128-bit vector of [4 x i32] in \a __Y, and; /// returns the result.; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c SHA1NEXTE instruction.; ///; /// \param __X; /// A 128-bit vector of [4 x i32] containing the current SHA-1 state.; /// \param __Y; /// A 128-bit vector of [4 x i32] containing the next four elements of the; /// message.; /// \returns A 128-bit vector of [4 x i32] containing the updated SHA-1; /// values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h:31,variab,variable,31,interpreter/llvm-project/clang/lib/Headers/shaintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Calculates the closest parent of this iterator; /// that is in a scope reachable through the parents of L.; /// I.e. when using 'goto' from this to L, the lifetime of all variables; /// between this and shared_parent(L) end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:175,variab,variables,175,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variables']
Modifiability,"/// Calculates what the pre-extend type is, based on the extension; /// operation node provided by \p Extend.; ///; /// In the case that \p Extend is a SIGN_EXTEND or a ZERO_EXTEND, the; /// pre-extend type is pulled directly from the operand, while other extend; /// operations need a bit more inspection to get this information.; ///; /// \param Extend The SDNode from the DAG that represents the extend operation; ///; /// \returns The type representing the \p Extend source type, or \p MVT::Other; /// if no valid type can be determined",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:28,extend,extend,28,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,8,"['Extend', 'extend']","['Extend', 'extend']"
Modifiability,"/// Call __kmpc_dispatch_next(; /// ident_t *loc, kmp_int32 tid, kmp_int32 *p_lastiter,; /// kmp_int[32|64] *p_lower, kmp_int[32|64] *p_upper,; /// kmp_int[32|64] *p_stride);; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param IL Address of the output variable in which the flag of the; /// last iteration is returned.; /// \param LB Address of the output variable in which the lower iteration; /// number is returned.; /// \param UB Address of the output variable in which the upper iteration; /// number is returned.; /// \param ST Address of the output variable in which the stride value is; /// returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:216,variab,variable,216,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,12,['variab'],['variable']
Modifiability,/// Call sites that get wrapped by a gc.statepoint (currently only in; /// RewriteStatepointsForGC and potentially in other passes in the future) can; /// have attributes that describe properties of gc.statepoint call they will be; /// eventually be wrapped in. This struct is used represent such directives.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:75,Rewrite,RewriteStatepointsForGC,75,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,1,['Rewrite'],['RewriteStatepointsForGC']
Modifiability,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; /// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:611,variab,variable,611,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['variab'],['variable']
Modifiability,/// Call the appropriate runtime routine to notify that we finished; /// iteration of the ordered loop with the dynamic scheduling.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:271,variab,variable,271,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,4,['variab'],['variable']
Modifiability,/// Callback type for loop body code generation.; ///; /// \param CodeGenIP is the insertion point where the loop's body code must be; /// placed. This will be a dedicated BasicBlock with a; /// conditional branch from the loop condition check and; /// terminated with an unconditional branch to the loop; /// latch.; /// \param IndVar is the induction variable usable at the insertion point.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:353,variab,variable,353,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,"/// Callback type for variable finalization (think destructors).; ///; /// \param CodeGenIP is the insertion point at which the finalization code; /// should be placed.; ///; /// A finalize callback knows about all objects that need finalization, e.g.; /// destruction, when the scope of the currently generated construct is left; /// at the time, and location, the callback is invoked.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:22,variab,variable,22,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,"/// Callback type for variable privatization (think copy & default; /// constructor).; ///; /// \param AllocaIP is the insertion point at which new alloca instructions; /// should be placed.; /// \param CodeGenIP is the insertion point at which the privatization code; /// should be placed.; /// \param Original The value being copied/created, should not be used in the; /// generated IR.; /// \param Inner The equivalent of \p Original that should be used in the; /// generated IR; this is equal to \p Original if the value is; /// a pointer and can thus be passed directly, otherwise it is; /// an equivalent but different value.; /// \param ReplVal The replacement value, thus a copy or new created version; /// of \p Inner.; ///; /// \returns The new insertion point where code generation continues and; /// \p ReplVal the replacement value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:22,variab,variable,22,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,/// Called by JITLink prior to linking to determine whether default passes for; /// the target should be added. The default implementation returns true.; /// If subclasses override this method to return false for any target then; /// they are required to fully configure the pass pipeline for that target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h:261,config,configure,261,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/JITLink.h,1,['config'],['configure']
Modifiability,/// Called by gold to see whether this file is one that our plugin can handle.; /// We'll try to open it and register all the symbols with add_symbol if; /// possible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp:60,plugin,plugin,60,interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,1,['plugin'],['plugin']
Modifiability,/// Called when the live variables analysis registers; /// that a variable is killed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/LiveVariables.h:25,variab,variables,25,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/LiveVariables.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/LiveVariables.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// Called when the uninitialized variable analysis detects the; /// idiom 'int x = x'. All other uses of 'x' within the initializer; /// are handled by handleUseOfUninitVariable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h:34,variab,variable,34,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,2,['variab'],['variable']
Modifiability,/// Called when the uninitialized variable is used as const refernce argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h:34,variab,variable,34,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,1,['variab'],['variable']
Modifiability,/// Called when the uninitialized variable is used at the given expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h:34,variab,variable,34,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,1,['variab'],['variable']
Modifiability,/// Called whenever \@defs(ClassName) is encountered in the source. Inserts the; /// instance variables of ClassName into Decls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:94,variab,variables,94,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['variab'],['variables']
Modifiability,"/// Called whenever a symbol becomes dead.; ///; /// This callback should be used by the checkers to aggressively clean; /// up/reduce the checker state, which is important for reducing the overall; /// memory usage. Specifically, if a checker keeps symbol specific information; /// in the state, it can and should be dropped after the symbol becomes dead.; /// In addition, reporting a bug as soon as the checker becomes dead leads to; /// more precise diagnostics. (For example, one should report that a malloced; /// variable is not freed right after it goes out of scope.); ///; /// \param SR The SymbolReaper object can be queried to determine which; /// symbols are dead.; ///; /// check::DeadSymbols",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp:520,variab,variable,520,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckerDocumentation.cpp,1,['variab'],['variable']
Modifiability,"/// Can we constant-emit a load of a reference to a variable of the; /// given type? This is different from predicates like; /// Decl::mightBeUsableInConstantExpressions because we do want it to apply; /// in situations that don't necessarily satisfy the language's rules; /// for this (e.g. C++'s ODR-use rules). For example, we want to able; /// to do this with const float variables even if those variables; /// aren't marked 'constexpr'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,/// Canonical scalar induction phi of the vector loop. Starting at the specified; /// start value (either 0 or the resume value when vectorizing the epilogue; /// loop). VPWidenCanonicalIVRecipe represents the vector version of the; /// canonical induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:257,variab,variable,257,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['variab'],['variable']
Modifiability,"/// Canonicalize array indices to pointer-size integers. This helps to; /// simplify the logic of splitting a GEP. For example, if a + b is a; /// pointer-size integer, we have; /// gep base, a + b = gep (gep base, a), b; /// However, this equality may not hold if the size of a + b is smaller than; /// the pointer size, because LLVM conceptually sign-extends GEP indices to; /// pointer size before computing the address; /// (http://llvm.org/docs/LangRef.html#id181).; ///; /// This canonicalization is very likely already done in clang and; /// instcombine. Therefore, the program will probably remain the same.; ///; /// Returns true if the module changes.; ///; /// Verified in @i32_add in split-gep.ll",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:353,extend,extends,353,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,1,['extend'],['extends']
Modifiability,"/// Canonicalizer for mangled names.; ///; /// This class allows specifying a list of ""equivalent"" manglings. For example,; /// you can specify that Ss is equivalent to; /// NSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE; /// and then manglings that refer to libstdc++'s 'std::string' will be; /// considered equivalent to manglings that are the same except that they refer; /// to libc++'s 'std::string'.; ///; /// This can be used when data (eg, profiling data) is available for a version; /// of a program built in a different configuration, with correspondingly; /// different manglings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h:546,config,configuration,546,interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/ItaniumManglingCanonicalizer.h,1,['config'],['configuration']
Modifiability,/// Capture the given variable in the captured region.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,/// Capture the given variable in the lambda.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,/// Capture variable decl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:12,variab,variable,12,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,/// CaptureMap - A map of captured variables to (index+1) into Captures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:35,variab,variables,35,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['variab'],['variables']
Modifiability,"/// Captures attributes that affect generating LLVM-IR using the; /// OpenMPIRBuilder and related classes. Note that not all attributes are; /// required for all classes or functions. In some use cases the configuration; /// is not necessary at all, because because the only functions that are called; /// are ones that are not dependent on the configuration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:206,config,configuration,206,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,2,['config'],['configuration']
Modifiability,"/// Cast between two shadow types, extending or truncating as; /// necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:35,extend,extending,35,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['extend'],['extending']
Modifiability,"/// Causes all nested matchers to be matched with the specified traversal kind.; ///; /// Given; /// \code; /// void foo(); /// {; /// int i = 3.0;; /// }; /// \endcode; /// The matcher; /// \code; /// traverse(TK_IgnoreUnlessSpelledInSource,; /// varDecl(hasInitializer(floatLiteral().bind(""init""))); /// ); /// \endcode; /// matches the variable declaration with ""init"" bound to the ""3.0"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:339,variab,variable,339,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,/// Certain SIMD instructions with vector element operand are not efficient.; /// Rewrite them into SIMD instructions with vector operands. This rewrite; /// is driven by the latency of the instructions.; /// Return true if the SIMD instruction is modified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SIMDInstrOpt.cpp:82,Rewrite,Rewrite,82,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SIMDInstrOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SIMDInstrOpt.cpp,2,"['Rewrite', 'rewrite']","['Rewrite', 'rewrite']"
Modifiability,"/// Certain SIMD instructions with vector element operand are not efficient.; /// Rewrite them into SIMD instructions with vector operands. This rewrite; /// is driven by the latency of the instructions.; /// The instruction of concerns are for the time being FMLA, FMLS, FMUL,; /// and FMULX and hence they are hardcoded.; ///; /// For example:; /// fmla v0.4s, v1.4s, v2.s[1]; ///; /// Is rewritten into; /// dup v3.4s, v2.s[1] // DUP not necessary if redundant; /// fmla v0.4s, v1.4s, v3.4s; ///; /// Return true if the SIMD instruction is modified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SIMDInstrOpt.cpp:82,Rewrite,Rewrite,82,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SIMDInstrOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64SIMDInstrOpt.cpp,2,"['Rewrite', 'rewrite']","['Rewrite', 'rewrite']"
Modifiability,/// Change a variable value after encountering a DBG_VALUE inside a block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:13,variab,variable,13,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// Change the MachineInstr \p MI into the equivalent extend to 32 bit; /// register if it is safe to do so. Return the replacement instruction if; /// OK, otherwise return nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp:54,extend,extend,54,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,1,['extend'],['extend']
Modifiability,"/// Change the MachineInstr \p MI into the equivalent extending load to 32 bit; /// register if it is safe to do so. Return the replacement instruction if; /// OK, otherwise return nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp:54,extend,extending,54,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,1,['extend'],['extending']
Modifiability,"/// Change the value of this constant.; /// On purpose, this is not `setVal`, as this could be confused with the `setVal`; /// that is available for variables. Constants, however, should remain mostly constant.; /// This function is e.g. useful when reading the constant from a file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstVar.h:149,variab,variables,149,roofit/roofitcore/inc/RooConstVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstVar.h,1,['variab'],['variables']
Modifiability,"/// CharUnits - This is an opaque type for sizes expressed in character units.; /// Instances of this type represent a quantity as a multiple of the size; /// of the standard C type, char, on the target architecture. As an opaque; /// type, CharUnits protects you from accidentally combining operations on; /// quantities in bit units and character units.; ///; /// In both C and C++, an object of type 'char', 'signed char', or 'unsigned; /// char' occupies exactly one byte, so 'character unit' and 'byte' refer to; /// the same quantity of storage. However, we use the term 'character unit'; /// rather than 'byte' to avoid an implication that a character unit is; /// exactly 8 bits.; ///; /// For portability, never assume that a target character is 8 bits wide. Use; /// CharUnit values wherever you calculate sizes, offsets, or alignments; /// in character units.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h:702,portab,portability,702,interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,1,['portab'],['portability']
Modifiability,"/// Check for taint propagation sources.; /// A rule will make the destination variables tainted if PropSrcArgs; /// is empty (taints the destination; /// arguments unconditionally), or if any of its signified; /// args are tainted in context of the current CallEvent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:79,variab,variables,79,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,1,['variab'],['variables']
Modifiability,"/// Check if Ext1 and Ext2 are extends of the same type, doubling the bitwidth; /// of the vector elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:31,extend,extends,31,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['extend'],['extends']
Modifiability,/// Check if Op is an operation that could be folded into a zero extend x86; /// instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:65,extend,extend,65,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['extend'],['extend']
Modifiability,/// Check if a variable describing DIE should be kept.; /// \returns updated TraversalFlags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:15,variab,variable,15,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,2,['variab'],['variable']
Modifiability,"/// Check if the current lambda has any potential captures; /// that must be captured by any of its enclosing lambdas that are ready to; /// capture. If there is a lambda that can capture a nested; /// potential-capture, go ahead and do so. Also, check to see if any; /// variables are uncaptureable or do not involve an odr-use so do not; /// need to be captured.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:272,variab,variables,272,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['variab'],['variables']
Modifiability,"/// Check if the current region is an OpenMP loop region and if it is,; /// mark loop control variable, used in \p Init for loop initialization, as; /// private by default.; /// \param Init First part of the for loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:94,variab,variable,94,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Check if the expression consists of exactly one entry value operand.; /// (This is the only configuration of entry values that is supported.),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:96,config,configuration,96,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['config'],['configuration']
Modifiability,"/// Check if the given Cst should be converted into; /// a load of a global variable initialized with Cst.; /// A constant should be converted if it is likely that the materialization of; /// the constant will be tricky. Thus, we give up on zero or undef values.; ///; /// \todo Currently, accept only vector related types.; /// Also we give up on all simple vector type to keep the existing; /// behavior. Otherwise, we should push here all the check of the lowering of; /// BUILD_VECTOR. By giving up, we lose the potential benefit of merging; /// constant via global merge and the fact that the same constant is stored; /// only once with this method (versus, as many function that uses the constant; /// for the regular approach, even for float).; /// Again, the simplest solution would be to promote every; /// constant and rematerialize them when they are actually cheap to create.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:76,variab,variable,76,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,1,['variab'],['variable']
Modifiability,"/// Check if the given SHL node (\p N), can be used to form an; /// extended register for an addressing mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:68,extend,extended,68,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"/// Check if the given conditional branch is based on the comparison between; /// a variable and zero, and if the variable is non-zero or zero (JmpOnZero is; /// true), the control yields to the loop entry. If the branch matches the; /// behavior, the variable involved in the comparison is returned. This function; /// will be called to see if the precondition and postcondition of the loop are; /// in desirable form.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:84,variab,variable,84,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,3,['variab'],['variable']
Modifiability,"/// Check if the given use (Instruction + OpIdx) of Cst should be converted into; /// a load of a global variable initialized with Cst.; /// A use should be converted if it is legal to do so.; /// For instance, it is not legal to turn the mask operand of a shuffle vector; /// into a load of a global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:105,variab,variable,105,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,2,['variab'],['variable']
Modifiability,/// Check if the given variable has been identified as must keep; /// \pre setMustKeepGlobalVariables must have been called on the Module that; /// contains GV,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,1,['variab'],['variable']
Modifiability,"/// Check if the parameters have a range, and warn if the range extends below / above the set limits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:64,extend,extends,64,roofit/roofitcore/inc/RooHelpers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h,1,['extend'],['extends']
Modifiability,/// Check if the specified global variable must be captured by outer capture; /// regions.; /// \param Level Relative level of nested OpenMP construct for that; /// the check is performed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:34,variab,variable,34,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Check if the specified variable is a loop control variable for; /// current region.; /// \return The index of the loop control variable in the list of associated; /// for-loops (from outer to inner).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,6,['variab'],['variable']
Modifiability,/// Check if the specified variable is a loop control variable for; /// parent region.; /// \return The index of the loop control variable in the list of associated; /// for-loops (from outer to inner).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,3,['variab'],['variable']
Modifiability,/// Check if the specified variable is captured by 'target' directive.; /// \param Level Relative level of nested OpenMP construct for that the check; /// is performed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Check if the specified variable is used in 'private' clause.; /// \param Level Relative level of nested OpenMP construct for that the check; /// is performed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,"/// Check if the specified variable is used in one of the private; /// clauses (private, firstprivate, lastprivate, reduction etc.) in OpenMP; /// constructs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Check if the variable length declaration is delayed:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:17,variab,variable,17,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,/// Check if the variables in the mapping clause are externally visible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:17,variab,variables,17,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,/// Check if this is a global variable summary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:30,variab,variable,30,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['variab'],['variable']
Modifiability,/// Check if this node needs to be fully folded or extended for all users.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:51,extend,extended,51,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,"/// Check if this pointer is consecutive when vectorizing. This happens; /// when the last index of the GEP is the induction variable, or that the; /// pointer itself is an induction variable.; /// This check allows us to vectorize A[idx] into a wide load/store.; /// Returns:; /// 0 - Stride is unknown or non-consecutive.; /// 1 - Address is consecutive.; /// -1 - Address is consecutive, and decreasing.; /// NOTE: This method must only be used before modifying the original scalar; /// loop. Do not use after invoking 'createVectorizedLoopSkeleton' (PR34965).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:125,variab,variable,125,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,2,['variab'],['variable']
Modifiability,/// Check if type and variable info should be emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,1,['variab'],['variable']
Modifiability,/// Check if variable declaration is an iterator VarDecl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"/// Check if variable has a binning with given name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:13,variab,variable,13,roofit/roofitcore/inc/RooAbsRealLValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h,1,['variab'],['variable']
Modifiability,"/// Check if variable has a lower bound.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:13,variab,variable,13,roofit/roofitcore/inc/RooAbsRealLValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h,1,['variab'],['variable']
Modifiability,"/// Check if variable has an upper bound.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:13,variab,variable,13,roofit/roofitcore/inc/RooAbsRealLValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h,1,['variab'],['variable']
Modifiability,/// Check if we are casting to a struct with a flexible array at the end.; /// \code; /// struct foo {; /// size_t len;; /// struct bar data[];; /// };; /// \endcode; /// or; /// \code; /// struct foo {; /// size_t len;; /// struct bar data[0];; /// }; /// \endcode; /// In these cases it is also valid to allocate size of struct foo + a multiple; /// of struct bar.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CastSizeChecker.cpp:47,flexible,flexible,47,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CastSizeChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CastSizeChecker.cpp,1,['flexible'],['flexible']
Modifiability,"/// Check if we can change the instruction to use an offset value from the; /// previous iteration. If so, return true and set the base and offset values; /// so that we can rewrite the load, if necessary.; /// v1 = Phi(v0, v3); /// v2 = load v1, 0; /// v3 = post_store v1, 4, x; /// This function enables the load to be rewritten as v2 = load v3, 4.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:174,rewrite,rewrite,174,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// Check if we can rewrite a function signature.; ///; /// The argument \p Arg is replaced with new ones defined by the number,; /// order, and types in \p ReplacementTypes.; ///; /// \returns True, if the replacement can be registered, via; /// registerFunctionSignatureRewrite, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:20,rewrite,rewrite,20,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['rewrite'],['rewrite']
Modifiability,/// Check if we can safely rename this Comdat function. Instances of the same; /// comdat function may have different control flows thus can not share the; /// same counter variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:173,variab,variable,173,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variable']
Modifiability,/// Check if we can use Comdat for profile variables. This will eliminate; /// the duplicated profile variables for Comdat functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:43,variab,variables,43,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,2,['variab'],['variables']
Modifiability,/// Check init-expr for canonical loop form and save loop counter; /// variable - #Var and its initialization value - #LB.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:71,variab,variable,71,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"/// Check that a location is valid for this variable.; ///; /// Check that \c DL exists, is in the same subprogram, and has the same; /// inlined-at location as \c this. (Otherwise, it's not a valid attachment; /// to a \a DbgInfoIntrinsic.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:44,variab,variable,44,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['variab'],['variable']
Modifiability,"/// Check that the RooFormulaVar has the right number of servers when some; /// variables are unused.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:80,variab,variables,80,roofit/roofitcore/test/testRooFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx,1,['variab'],['variables']
Modifiability,"/// Check that the given template arguments can be provided to; /// the given template, converting the arguments along the way.; ///; /// \param Template The template to which the template arguments are being; /// provided.; ///; /// \param TemplateLoc The location of the template name in the source.; ///; /// \param TemplateArgs The list of template arguments. If the template is; /// a template template parameter, this function may extend the set of; /// template arguments to also include substituted, defaulted template; /// arguments.; ///; /// \param PartialTemplateArgs True if the list of template arguments is; /// intentionally partial, e.g., because we're checking just the initial; /// set of template arguments.; ///; /// \param Converted Will receive the converted, canonicalized template; /// arguments.; ///; /// \param UpdateArgsWithConversions If \c true, update \p TemplateArgs to; /// contain the converted forms of the template arguments as written.; /// Otherwise, \p TemplateArgs will not be modified.; ///; /// \param ConstraintsNotSatisfied If provided, and an error occurred, will; /// receive true if the cause for the error is the associated constraints of; /// the template not being satisfied by the template arguments.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:437,extend,extend,437,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['extend'],['extend']
Modifiability,/// Check that the instruction has outside loop users and is not an; /// identified reduction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp:94,variab,variable,94,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,1,['variab'],['variable']
Modifiability,/// Check the extended parameter information. Most of the necessary; /// checking should occur when applying the parameter attribute; the; /// only other checks required are positional restrictions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:14,extend,extended,14,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['extend'],['extended']
Modifiability,"/// Check the use of the given variable as a C++ condition in an if,; /// while, do-while, or switch statement.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['variab'],['variable']
Modifiability,"/// Check to see if the loop has a canonical induction variable: an integer; /// recurrence that starts at 0 and increments by one each time through the; /// loop. If so, return the phi node that corresponds to it.; ///; /// The IndVarSimplify pass transforms loops to have a canonical induction; /// variable.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:55,variab,variable,55,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,2,['variab'],['variable']
Modifiability,/// Check variable declaration in 'omp declare mapper' construct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:10,variab,variable,10,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Check whether a variable is a device variable and register it if true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:20,variab,variable,20,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,2,['variab'],['variable']
Modifiability,"/// Check whether an option is valid.; ///; /// The steps for adding and enabling a new ilist option include:; /// \li define the option, ilist_foo<Bar>, above;; /// \li add new parameters for Bar to \a ilist_detail::node_options;; /// \li add an extraction meta-function, ilist_detail::extract_foo;; /// \li call extract_foo from \a ilist_detail::compute_node_options and pass it; /// into \a ilist_detail::node_options; and; /// \li specialize \c is_valid_option<ilist_foo<Bar>> to inherit from \c; /// std::true_type to get static assertions passing in \a simple_ilist and \a; /// ilist_node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h:484,inherit,inherit,484,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node_options.h,1,['inherit'],['inherit']
Modifiability,"/// Check whether or not this function needs a stack protector based; /// upon the stack protector level.; ///; /// We use two heuristics: a standard (ssp) and strong (sspstrong).; /// The standard heuristic which will add a guard variable to functions that; /// call alloca with a either a variable size or a size >= SSPBufferSize,; /// functions with character buffers larger than SSPBufferSize, and functions; /// with aggregates containing character buffers larger than SSPBufferSize. The; /// strong heuristic will add a guard variables to functions that call alloca; /// regardless of size, functions with any buffer regardless of type and size,; /// functions with aggregates that contain any buffer regardless of type and; /// size, and functions that contain stack-based variables that have had their; /// address taken.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp:231,variab,variable,231,interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp,4,['variab'],"['variable', 'variables']"
Modifiability,"/// Check whether the given new method is a valid override of the; /// given overridden method, and set any properties that should be inherited.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:134,inherit,inherited,134,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['inherit'],['inherited']
Modifiability,"/// Check whether this array fits the idiom of a flexible array member,; /// depending on the value of -fstrict-flex-array.; /// When IgnoreTemplateOrMacroSubstitution is set, it doesn't consider sizes; /// resulting from the substitution of a macro or a template as special sizes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:49,flexible,flexible,49,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['flexible'],['flexible']
Modifiability,"/// Check whether this kills the address component. This doesn't take into; /// account the position of the intrinsic, therefore a returned value of false; /// does not guarentee the address is a valid location for the variable at the; /// intrinsic's position in IR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:219,variab,variable,219,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,2,['variab'],['variable']
Modifiability,/// Check whether this variable is defined in this translation unit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:23,variab,variable,23,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Check whether we're in an extern inline function and referring to a; /// variable or function with internal linkage (C11 6.7.4p3).; ///; /// This is only a warning because we used to silently accept this code, but; /// in many cases it will not behave correctly. This is not enabled in C++ mode; /// because the restriction language is a bit weaker (C++11 [basic.def.odr]p6); /// and so while there may still be user mistakes, most of the time we can't; /// prove that there are errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:77,variab,variable,77,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"/// CheckAssignmentConstraints - Perform type checking for assignment,; /// argument passing, variable initialization, and function return values.; /// C99 6.5.16.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:94,variab,variable,94,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,"/// CheckBooleanCondition - Diagnose problems involving the use of; /// the given expression as a boolean condition (e.g. in an if; /// statement). Also performs the standard function and array; /// decays, possibly changing the input variable.; ///; /// \param Loc - A location associated with the condition, e.g. the; /// 'if' keyword.; /// \return true iff there were any errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:235,variab,variable,235,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,"/// CheckDefaultArgumentVisitor - C++ [dcl.fct.default] Traverses; /// the default argument of a parameter to determine whether it; /// contains any ill-formed subexpressions. For example, this will; /// diagnose the use of local variables or parameters within the; /// default argument expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:230,variab,variables,230,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['variab'],['variables']
Modifiability,/// CheckImplementationIvars - This routine checks if the instance variables; /// listed in the implelementation match those listed in the interface.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:67,variab,variables,67,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variables']
Modifiability,"/// CheckLoopConditionForFloat - This check looks for 'for' statements that; /// use a floating point variable as a loop counter.; /// CERT: FLP30-C, FLP30-CPP.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp:102,variab,variable,102,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckSecuritySyntaxOnly.cpp,1,['variab'],['variable']
Modifiability,"/// CheckVectorCompareOperands - vector comparisons are a clang extension that; /// operates on extended vector types. Instead of producing an IntTy result,; /// like a scalar comparison, a vector comparison produces a vector of integer; /// types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:96,extend,extended,96,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['extend'],['extended']
Modifiability,/// Checker for the non-rectangular loops. Checks if the initializer or; /// condition expression references loop counter variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:122,variab,variable,122,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,/// Checks each jump and stores each variable declaration they bypass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp,1,['variab'],['variable']
Modifiability,"/// Checks if \p SymbolicPHI can be rewritten as an AddRecExpr under some; /// Predicates. If successful return these <AddRecExpr, Predicates>;; /// The function is intended to be called from PSCEV (the caller will decide; /// whether to actually add the predicates and carry out the rewrites).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:284,rewrite,rewrites,284,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['rewrite'],['rewrites']
Modifiability,/// Checks if the Descriptor is of a constexpr or const global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:63,variab,variable,63,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,1,['variab'],['variable']
Modifiability,/// Checks if the \p VD variable is marked as nontemporal declaration in; /// current context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:24,variab,variable,24,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,/// Checks if the clause is the extended clauses for 'depobj' directive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,extend,extended,32,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['extend'],['extended']
Modifiability,/// Checks if the escaped local variable is actually a parameter passed by; /// value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:32,variab,variable,32,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variable']
Modifiability,/// Checks if the given \p VD declaration is actually a taskgroup reduction; /// descriptor variable at the \p Level of OpenMP regions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:92,variab,variable,92,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,/// Checks if the global variable is captured in current function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:25,variab,variable,25,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,/// Checks if the lastprivate conditional variable is referenced in LHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:42,variab,variable,42,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable']
Modifiability,/// Checks if the provided \p LVal is lastprivate conditional and emits the; /// code to update the value of the original variable.; /// \code; /// lastprivate(conditional: a); /// ...; /// <type> a;; /// lp_a = ...;; /// #pragma omp critical(a); /// if (last_iv_a <= iv) {; /// last_iv_a = iv;; /// global_a = lp_a;; /// }; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:122,variab,variable,122,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,/// Checks if the provided global decl \a GD is a declare target variable and; /// registers it when emitting code for the host.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:65,variab,variable,65,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,/// Checks if the specified variable is a threadprivate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:28,variab,variable,28,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,/// Checks if the specified variables has data-sharing attributes which; /// match specified \a CPred predicate in any directive which matches \a DPred; /// predicate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:28,variab,variables,28,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,/// Checks if the specified variables has data-sharing attributes which; /// match specified \a CPred predicate in any innermost directive which; /// matches \a DPred predicate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:28,variab,variables,28,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,/// Checks if the specified variables has explicit data-sharing; /// attributes which match specified \a CPred predicate at the specified; /// OpenMP region.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:28,variab,variables,28,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,/// Checks if the variable has associated OMPAllocateDeclAttr attribute with; /// the predefined allocator and translates it into the corresponding address; /// space.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:18,variab,variable,18,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['variab'],['variable']
Modifiability,/// Checks if the variable has externally defined storage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:18,variab,variable,18,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,1,['variab'],['variable']
Modifiability,/// Checks if the variable is a local for OpenMP region.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:18,variab,variable,18,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,/// Checks if the variable must be captured.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:18,variab,variable,18,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Checks if the variable with the given name has been registered already.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:18,variab,variable,18,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,/// Checks if we can import global variable from another module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:35,variab,variable,35,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['variab'],['variable']
Modifiability,"/// Checks memory dependences among accesses to the same underlying; /// object to determine whether there vectorization is legal or not (and at; /// which vectorization factor).; ///; /// Note: This class will compute a conservative dependence for access to; /// different underlying pointers. Clients, such as the loop vectorizer, will; /// sometimes deal these potential dependencies by emitting runtime checks.; ///; /// We use the ScalarEvolution framework to symbolically evalutate access; /// functions pairs. Since we currently don't restructure the loop we can rely; /// on the program order of memory accesses to determine their safety.; /// At the moment we will only deem accesses as safe for:; /// * A negative constant distance assuming program order.; ///; /// Safe: tmp = a[i + 1]; OR a[i + 1] = x;; /// a[i] = tmp; y = a[i];; ///; /// The latter case is safe because later checks guarantuee that there can't; /// be a cycle through a phi node (that is, we check that ""x"" and ""y"" is not; /// the same variable: a header phi can only be an induction or a reduction, a; /// reduction can't have a memory sink, an induction can't have a memory; /// source). This is important and must not be violated (or we have to; /// resort to checking for cycles through memory).; ///; /// * A positive constant distance assuming program order that is bigger; /// than the biggest memory access.; ///; /// tmp = a[i] OR b[i] = x; /// a[i+2] = tmp y = b[i+2];; ///; /// Safe distance: 2 x sizeof(a[0]), and 2 x sizeof(b[0]), respectively.; ///; /// * Zero distances and all accesses have the same size.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h:1017,variab,variable,1017,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAccessAnalysis.h,1,['variab'],['variable']
Modifiability,/// Checks the jump and stores each variable declaration it bypasses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp,1,['variab'],['variable']
Modifiability,"/// Checks whether a region is the part of an array.; /// In case there is a derived to base cast above the array element, the; /// Polymorphic output value is set to true. AKind output value is set to the; /// allocation kind of the inspected region.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/PointerArithChecker.cpp:132,Polymorphi,Polymorphic,132,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/PointerArithChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/PointerArithChecker.cpp,1,['Polymorphi'],['Polymorphic']
Modifiability,/// Checks whether the given storage class is legal for variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:56,variab,variables,56,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,1,['variab'],['variables']
Modifiability,"/// Claim a possibly-autoreleased return value at +0. This is only; /// valid to do in contexts which do not rely on the retain to keep; /// the object valid for all of its uses; for example, when; /// the value is ignored, or when it is being assigned to an; /// __unsafe_unretained variable.; ///; /// call i8* \@objc_unsafeClaimAutoreleasedReturnValue(i8* %value)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:284,variab,variable,284,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['variab'],['variable']
Modifiability,"/// Class recording the (high level) _value_ of a variable. Identifies the value; /// of the variable as a list of ValueIDNums and constant MachineOperands, or as; /// an empty list for undef debug values or VPHI values which we have not found; /// valid locations for.; /// This class also stores meta-information about how the value is qualified.; /// Used to reason about variable values when performing the second; /// (DebugVariable specific) dataflow analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:50,variab,variable,50,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,3,['variab'],['variable']
Modifiability,/// Class representing a numeric variable and its associated current value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:33,variab,variable,33,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,"/// Class representing the legacy GCC Objective-C ABI. This is the default when; /// -fobjc-nonfragile-abi is not specified.; ///; /// The GCC ABI target actually generates code that is approximately compatible; /// with the new GNUstep runtime ABI, but refrains from using any features that; /// would not work with the GCC runtime. For example, clang always generates; /// the extended form of the class structure, and the extra fields are simply; /// ignored by GCC libobjc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:379,extend,extended,379,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['extend'],['extended']
Modifiability,/// Class representing the use of a numeric variable in the AST of an; /// expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:44,variab,variable,44,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,"/// Class to represent an undefined variable error, which quotes that; /// variable's name when printed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:36,variab,variable,36,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,2,['variab'],['variable']
Modifiability,"/// Class to represented the control flow structure of an OpenMP canonical loop.; ///; /// The control-flow structure is standardized for easy consumption by; /// directives associated with loops. For instance, the worksharing-loop; /// construct may change this control flow such that each loop iteration is; /// executed on only one thread. The constraints of a canonical loop in brief; /// are:; ///; /// * The number of loop iterations must have been computed before entering the; /// loop.; ///; /// * Has an (unsigned) logical induction variable that starts at zero and; /// increments by one.; ///; /// * The loop's CFG itself has no side-effects. The OpenMP specification; /// itself allows side-effects, but the order in which they happen, including; /// how often or whether at all, is unspecified. We expect that the frontend; /// will emit those side-effect instructions somewhere (e.g. before the loop); /// such that the CanonicalLoopInfo itself can be side-effect free.; ///; /// Keep in mind that CanonicalLoopInfo is meant to only describe a repeated; /// execution of a loop body that satifies these constraints. It does NOT; /// represent arbitrary SESE regions that happen to contain a loop. Do not use; /// CanonicalLoopInfo for such purposes.; ///; /// The control flow can be described as follows:; ///; /// Preheader; /// |; /// /-> Header; /// | |; /// | Cond---\; /// | | |; /// | Body |; /// | | | |; /// | <...> |; /// | | | |; /// \--Latch |; /// |; /// Exit; /// |; /// After; ///; /// The loop is thought to start at PreheaderIP (at the Preheader's terminator,; /// including) and end at AfterIP (at the After's first instruction, excluding).; /// That is, instructions in the Preheader and After blocks (except the; /// Preheader's terminator) are out of CanonicalLoopInfo's control and may have; /// side-effects. Typically, the Preheader is used to compute the loop's trip; /// count. The instructions from BodyIP (at the Body block's first instruction,; /// excludin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:543,variab,variable,543,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,/// Class to store bundler options in standard (non-cl::opt) data structures; // Avoid using cl::opt variables after these assignments when possible,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-offload-bundler/ClangOffloadBundler.cpp:101,variab,variables,101,interpreter/llvm-project/clang/tools/clang-offload-bundler/ClangOffloadBundler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-offload-bundler/ClangOffloadBundler.cpp,1,['variab'],['variables']
Modifiability,/// Classify a external variable reference for the current subtarget according; /// to how we should reference it in a non-pcrel context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kSubtarget.h:24,variab,variable,24,interpreter/llvm-project/llvm/lib/Target/M68k/M68kSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kSubtarget.h,1,['variab'],['variable']
Modifiability,/// Classify a global variable reference for the current subtarget according to; /// how we should reference it in a non-pcrel context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp:22,variab,variable,22,interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,1,['variab'],['variable']
Modifiability,/// Classify a global variable reference for the current subtarget according; /// to how we should reference it in a non-pcrel context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kSubtarget.h:22,variab,variable,22,interpreter/llvm-project/llvm/lib/Target/M68k/M68kSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kSubtarget.h,3,['variab'],['variable']
Modifiability,"/// Classify the specified diagnostic ID into a Level, consumable by; /// the DiagnosticClient.; ///; /// The classification is based on the way the client configured the; /// DiagnosticsEngine object.; ///; /// \param Loc The source location for which we are interested in finding out; /// the diagnostic state. Can be null in order to query the latest state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:156,config,configured,156,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,1,['config'],['configured']
Modifiability,/// Classify the specified global variable into a set of target independent; /// categories embodied in SectionKind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:34,variab,variable,34,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,1,['variab'],['variable']
Modifiability,"/// ClassifyModifiable - Classify this expression according to the; /// C++11 expression taxonomy, and see if it is valid on the left side; /// of an assignment.; ///; /// This function extends classify in that it also tests whether the; /// expression is modifiable (C99 6.3.2.1p1).; /// \param Loc A source location that might be filled with a relevant location; /// if the expression is not modifiable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:186,extend,extends,186,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['extend'],['extends']
Modifiability,/// Clear everything and initialise with ⊤-values for all variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:58,variab,variables,58,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variables']
Modifiability,/// Clears LocalValueMap and moves the area for the new local variables; /// to the beginning of the block. It helps to avoid spilling cached variables; /// across heavy instructions like calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h:62,variab,variables,62,interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,2,['variab'],['variables']
Modifiability,"/// Clears value of this numeric variable, regardless of whether it is; /// currently defined or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:33,variab,variable,33,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,/// Clone a global variable declaration into a new module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h:19,variab,variable,19,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/IndirectionUtils.h,1,['variab'],['variable']
Modifiability,"/// Clone instructions in range [BI, BE) to NewBB. For PHI nodes, we only clone; /// arguments that come from PredBB. Return the map from the variables in the; /// source basic block to the variables in the newly created basic block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp:142,variab,variables,142,interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/JumpThreading.cpp,2,['variab'],['variables']
Modifiability,/// Clone the specified noalias decl scopes. Then adapt all instructions in the; /// NewBlocks basicblocks to the cloned versions.; /// 'Ext' will be added to the duplicate scope names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:50,adapt,adapt,50,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,1,['adapt'],['adapt']
Modifiability,"/// Clone the specified noalias decl scopes. Then adapt all instructions in the; /// [IStart, IEnd] (IEnd included !) range to the cloned versions. 'Ext' will be; /// added to the duplicate scope names.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h:50,adapt,adapt,50,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Cloning.h,1,['adapt'],['adapt']
Modifiability,/// Clones the provided matchers.; ///; /// They should be the result of a polymorphic matcher.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:75,polymorphi,polymorphic,75,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,1,['polymorphi'],['polymorphic']
Modifiability,/// Coalesce adjacent dbg locs describing memory locations that have contiguous; /// fragments. This reduces the cost of LiveDebugValues which does SSA; /// construction for each explicitly stated variable fragment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:197,variab,variable,197,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"/// Code completion occurred where an existing name(such as type, function; /// or variable) is expected.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:83,variab,variable,83,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['variab'],['variable']
Modifiability,"/// Code completion occurred within the instance variable list of; /// an Objective-C interface, implementation, or category implementation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:49,variab,variable,49,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['variab'],['variable']
Modifiability,"/// Code completion occurs within the list of instance variables; /// in an Objective-C interface, protocol, category, or implementation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:55,variab,variables,55,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variables']
Modifiability,"/// Collapse a loop nest into a single loop.; ///; /// Merges loops of a loop nest into a single CanonicalLoopNest representation; /// that has the same number of innermost loop iterations as the origin loop; /// nest. The induction variables of the input loops are derived from the; /// collapsed loop's induction variable. This is intended to be used to; /// implement OpenMP's collapse clause. Before applying a directive,; /// collapseLoops normalizes a loop nest to contain only a single loop and the; /// directive's implementation does not need to handle multiple loops itself.; /// This does not remove the need to handle all loop nest handling by; /// directives, such as the ordered(<n>) clause or the simd schedule-clause; /// modifier of the worksharing-loop directive.; ///; /// Example:; /// \code; /// for (int i = 0; i < 7; ++i) // Canonical loop ""i""; /// for (int j = 0; j < 9; ++j) // Canonical loop ""j""; /// body(i, j);; /// \endcode; ///; /// After collapsing with Loops={i,j}, the loop is changed to; /// \code; /// for (int ij = 0; ij < 63; ++ij) {; /// int i = ij / 9;; /// int j = ij % 9;; /// body(i, j);; /// }; /// \endcode; ///; /// In the current implementation, the following limitations apply:; ///; /// * All input loops have an induction variable of the same type.; ///; /// * The collapsed loop will have the same trip count integer type as the; /// input loops. Therefore it is possible that the collapsed loop cannot; /// represent all iterations of the input loops. For instance, assuming a; /// 32 bit integer type, and two input loops both iterating 2^16 times, the; /// theoretical trip count of the collapsed loop would be 2^32 iteration,; /// which cannot be represented in an 32-bit integer. Behavior is undefined; /// in this case.; ///; /// * The trip counts of every input loop must be available at \p ComputeIP.; /// Non-rectangular loops are not yet supported.; ///; /// * At each nest level, code between a surrounding loop and its nested loop; /// is ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:233,variab,variables,233,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Collect every variables marked as ""used""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp:18,variab,variables,18,interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,1,['variab'],['variables']
Modifiability,"/// Collect every variables marked as ""used"" or used in a landing pad; /// instruction for this Module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp:18,variab,variables,18,interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,1,['variab'],['variables']
Modifiability,/// Collect information about induction variables that are used by sign/zero; /// extend operations. This information is recorded by CollectExtend and provides; /// the input to WidenIV.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:40,variab,variables,40,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,2,"['extend', 'variab']","['extend', 'variables']"
Modifiability,/// Collect information used to emit debugging information of a variable in; /// the entry value of a register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:64,variab,variable,64,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['variab'],['variable']
Modifiability,/// Collect the visible conversions of a base class.; ///; /// \param Record a base class of the class we're considering; /// \param InVirtual whether this base class is a virtual base (or a base; /// of a virtual base); /// \param Access the access along the inheritance path to this base; /// \param ParentHiddenTypes the conversions provided by the inheritors; /// of this base; /// \param Output the set to which to add conversions from non-virtual bases; /// \param VOutput the set to which to add conversions from virtual bases; /// \param HiddenVBaseCs the set of conversions which were hidden in a; /// virtual base along some inheritance path,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp:260,inherit,inheritance,260,interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclCXX.cpp,3,['inherit'],"['inheritance', 'inheritors']"
Modifiability,/// Collect variable information from the side table maintained by MF.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:12,variab,variable,12,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['variab'],['variable']
Modifiability,/// Collect zero location coverage for inlined variables which refer to; /// a DW_AT_inline copy of subprogram that is in a different CU.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:47,variab,variables,47,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,/// Collect zero location coverage for inlined variables which refer to; /// a DW_AT_inline copy of subprogram that is out of order in the DWARF.; /// Also cover the variables of a concrete function (represented with; /// the DW_TAG_subprogram) with an abstract_origin attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:47,variab,variables,47,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,2,['variab'],['variables']
Modifiability,/// CollectInheritedProtocols - Collect all protocols in current class and; /// those inherited by it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:86,inherit,inherited,86,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['inherit'],['inherited']
Modifiability,"/// Collection of DBG_VALUEs observed when traversing a block. Records each; /// variable and the value the DBG_VALUE refers to. Requires the machine value; /// location dataflow algorithm to have run already, so that values can be; /// identified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:81,variab,variable,81,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['variab'],['variable']
Modifiability,/// Collection of abstract variables/labels.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:27,variab,variables,27,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['variab'],['variables']
Modifiability,"/// Collects all bindings in \p Cluster that may refer to bindings within; /// \p Top.; ///; /// Each binding is a pair whose \c first is the key (a BindingKey) and whose; /// \c second is the value (an SVal).; ///; /// The \p IncludeAllDefaultBindings parameter specifies whether to include; /// default bindings that may extend beyond \p Top itself, e.g. if \p Top is; /// an aggregate within a larger aggregate with a default binding.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:323,extend,extend,323,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['extend'],['extend']
Modifiability,"/// Collects transformations and merges them before applying them with; /// with applyRewrites(). E.g. if the same source range; /// is requested to be removed twice, only one rewriter remove will be invoked.; /// Rewrites happen in ""transactions""; if one rewrite in the transaction cannot; /// be done (e.g. it resides in a macro) all rewrites in the transaction are; /// aborted.; /// FIXME: ""Transactional"" rewrites support should be baked in the Rewriter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransformActions.cpp:176,rewrite,rewriter,176,interpreter/llvm-project/clang/lib/ARCMigrate/TransformActions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransformActions.cpp,6,"['Rewrite', 'rewrite']","['Rewriter', 'Rewrites', 'rewrite', 'rewriter', 'rewrites']"
Modifiability,/// Colorslots - Color all spill stack slots and rewrite all frameindex machine; /// operands in the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp:49,rewrite,rewrite,49,interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// Combine two sets of facts about the same value into a single set of; /// facts. Note that this method is not suitable for merging facts along; /// different paths in a CFG; that's what the mergeIn function is for. This; /// is for merging facts gathered about the same value at the same location; /// through two independent means.; /// Notes:; /// * This method does not promise to return the most precise possible lattice; /// value implied by A and B. It is allowed to return any lattice element; /// which is at least as strong as *either* A or B (unless our facts; /// conflict, see below).; /// * Due to unreachable code, the intersection of two lattice values could be; /// contradictory. If this happens, we return some valid lattice value so as; /// not confuse the rest of LVI. Ideally, we'd always return Undefined, but; /// we do not make this guarantee. TODO: This would be a useful enhancement.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp:900,enhance,enhancement,900,interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,1,['enhance'],['enhancement']
Modifiability,"/// Commute a two-address instruction and update the basic block, distance map,; /// and live variables if needed. Return true if it is successful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:94,variab,variables,94,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['variab'],['variables']
Modifiability,"/// Compare two APSInts, extending and switching the sign as; /// necessary to compare their values regardless of underlying type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:25,extend,extending,25,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['extend'],['extending']
Modifiability,/// Compiles an initializer. This is like visit() but it will never; /// create a variable and instead rely on a variable already having; /// been created. visitInitializer() then relies on a pointer to this; /// variable being on top of the stack.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:82,variab,variable,82,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,3,['variab'],['variable']
Modifiability,"/// Complete template argument deduction for a class or variable template,; /// when partial ordering against a partial specialization.; // FIXME: Factor out duplication with partial specialization version above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:56,variab,variable,56,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['variab'],['variable']
Modifiability,/// Complete the redeclaration chain if it's been extended since the; /// previous generation of the AST source.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:50,extend,extended,50,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,1,['extend'],['extended']
Modifiability,"/// CompleteTentativeDefinition - Callback invoked at the end of a translation; /// unit to notify the consumer that the given tentative definition should be; /// completed.; ///; /// The variable declaration itself will be a tentative; /// definition. If it had an incomplete array type, its type will; /// have already been changed to an array of size 1. However, the; /// declaration remains a tentative definition and has not been; /// modified by the introduction of an implicit zero initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTConsumer.h:188,variab,variable,188,interpreter/llvm-project/clang/include/clang/AST/ASTConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTConsumer.h,1,['variab'],['variable']
Modifiability,"/// Compute a layout for a struct containing the given fields, making a; /// best-effort attempt to minimize the amount of space required.; ///; /// Two features are supported which require a more careful solution; /// than the well-known ""sort by decreasing alignment"" solution:; ///; /// - Fields may be assigned a fixed offset in the layout. If there are; /// gaps among the fixed-offset fields, the algorithm may attempt; /// to allocate flexible-offset fields into those gaps. If that's; /// undesirable, the caller should ""block out"" those gaps by e.g.; /// just creating a single fixed-offset field that represents the; /// entire ""header"".; ///; /// - The size of a field is not required to be a multiple of, or even; /// greater than, the field's required alignment. The only constraint; /// on fields is that they must not be zero-sized.; ///; /// To simplify the implementation, any fixed-offset fields in the; /// layout must appear at the start of the field array, and they must; /// be ordered by increasing offset.; ///; /// The algorithm will produce a guaranteed-minimal layout with no; /// interior padding in the following ""C-style"" case:; ///; /// - every field's size is a multiple of its required alignment and; /// - either no fields have initially fixed offsets, or the fixed-offset; /// fields have no interior padding and end at an offset that is at; /// least as aligned as all the flexible-offset fields.; ///; /// Otherwise, while the algorithm will make a best-effort attempt to; /// avoid padding, it cannot guarantee a minimal layout, as there is; /// no known efficient algorithm for doing so.; ///; /// The layout produced by this algorithm may not be stable across LLVM; /// releases. Do not use this anywhere where ABI stability is required.; ///; /// Flexible-offset fields with the same size and alignment will be ordered; /// the same way they were in the initial array. Otherwise the current; /// algorithm makes no effort to preserve the initial order of; /// ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:442,flexible,flexible-offset,442,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,1,['flexible'],['flexible-offset']
Modifiability,"/// Compute and return the use operand latency of a given pair of def and use.; /// In most cases, the static scheduling itinerary was enough to determine the; /// operand latency. But it may not be possible for instructions with variable; /// number of defs / uses.; ///; /// This is a raw interface to the itinerary that may be directly overridden; /// by a target. Use computeOperandLatency to get the best estimate of; /// latency.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:230,variab,variable,230,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['variab'],['variable']
Modifiability,"/// Compute bin index for all values of the observable(s) in `evalData`, and return their volumes or inverse volumes, depending; /// on the configuration chosen in the constructor.; /// If a bin is not valid, return a volume of 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx:140,config,configuration,140,roofit/roofitcore/src/RooBinWidthFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx,1,['config'],['configuration']
Modifiability,"/// Compute current bin of observable, and return its volume or inverse volume, depending; /// on configuration chosen in the constructor.; /// If the bin is not valid, return a volume of 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx:98,config,configuration,98,roofit/roofitcore/src/RooBinWidthFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx,1,['config'],['configuration']
Modifiability,/// Compute known bits from sign-extended multiply-hi.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h:33,extend,extended,33,interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,1,['extend'],['extended']
Modifiability,/// Compute known bits from zero-extended multiply-hi.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h:33,extend,extended,33,interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,1,['extend'],['extended']
Modifiability,/// Compute output and input types by applying different config (basic type; /// and LMUL with type transformers). It also record result of type in legal; /// or illegal set to avoid compute the same config again. The result maybe; /// have illegal RVVType.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:57,config,config,57,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,2,['config'],['config']
Modifiability,"/// Compute scalar induction steps. \p ScalarIV is the scalar induction; /// variable on which to base the steps, \p Step is the size of the step.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp:77,variab,variable,77,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,1,['variab'],['variable']
Modifiability,"/// Compute the base of the whole preserve_* intrinsics chains, i.e., the base; /// pointer of the first preserve_*_access_index call, and construct the access; /// string, which will be the name of a global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:208,variab,variable,208,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,1,['variab'],['variable']
Modifiability,"/// Compute the cost of a representative reference in reference group \p RG; /// when the given loop \p L is considered as the innermost loop in the nest.; /// The computed cost is an estimate for the number of cache lines used by the; /// reference group. The representative reference cost is defined as:; /// - equal to one if the reference is loop invariant, or; /// - equal to '(TripCount * stride) / cache_line_size' if (a) loop \p L's; /// induction variable is used only in the reference subscript associated; /// with loop \p L, and (b) the reference stride is less than the cache; /// line size, or; /// - TripCount otherwise",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h:456,variab,variable,456,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,1,['variab'],['variable']
Modifiability,"/// Compute the cost of the reference w.r.t. the given loop \p L when it is; /// considered in the innermost position in the loop nest.; /// The cost is defined as:; /// - equal to one if the reference is loop invariant, or; /// - equal to '(TripCount * stride) / cache_line_size' if:; /// + the reference stride is less than the cache line size, and; /// + the coefficient of this loop's index variable used in all other; /// subscripts is zero; /// - or otherwise equal to 'TripCount'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h:395,variab,variable,395,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,1,['variab'],['variable']
Modifiability,"/// Compute the gradient employing automatic differentiation.; ///; /// \param[in] x - The given variables, if nullptr the already stored; /// variables are used.; /// \param[out] result - The 2D hessian matrix flattened to form a vector; /// in row-major order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:97,variab,variables,97,hist/hist/inc/TFormula.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h,2,['variab'],['variables']
Modifiability,"/// Compute the gradient employing automatic differentiation.; ///; /// \param[in] x - The given variables, if nullptr the already stored; /// variables are used.; /// \param[out] result - The result of the computation wrt each direction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h:97,variab,variables,97,hist/hist/inc/TFormula.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TFormula.h,2,['variab'],['variables']
Modifiability,"/// Compute the maximum backedge count based on the range of values; /// permitted by Start, End, and Stride. This is for loops of the form; /// {Start, +, Stride} LT End.; ///; /// Preconditions:; /// * the induction variable is known to be positive.; /// * the induction variable is assumed not to overflow (i.e. either it; /// actually doesn't, or we'd have to immediately execute UB); /// We *don't* assert these preconditions so please be careful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:218,variab,variable,218,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,2,['variab'],['variable']
Modifiability,/// Compute the number of Global Variables that uses a Constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:33,Variab,Variables,33,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,1,['Variab'],['Variables']
Modifiability,"/// Compute the size of the object pointed by Ptr. Returns true and the; /// object size in Size if successful, and false otherwise.; /// If RoundToAlign is true, then Size is rounded up to the alignment of; /// allocas, byval arguments, and global variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryBuiltins.cpp:249,variab,variables,249,interpreter/llvm-project/llvm/lib/Analysis/MemoryBuiltins.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryBuiltins.cpp,1,['variab'],['variables']
Modifiability,"/// Computes a range for the induction variable (IndVar) in which the range; /// check is redundant and can be constant-folded away. The induction; /// variable is not required to be the canonical {0,+,1} induction variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,3,['variab'],['variable']
Modifiability,"/// Computes and returns a range of values for the induction variable (IndVar); /// in which the range check can be safely elided. If it cannot compute such a; /// range, returns std::nullopt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp:61,variab,variable,61,interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,1,['variab'],['variable']
Modifiability,"/// Computes four sum of absolute difference (SAD) operations on sets of eight; /// unsigned 8-bit integers from the 256-bit integer vectors \a __a and; /// \a __b.; ///; /// One SAD result is computed for each set of eight bytes from \a __a and; /// eight bytes from \a __b. The zero-extended SAD value is returned in the; /// corresponding 64-bit element of the result.; ///; /// A single SAD operation takes the differences between the corresponding; /// bytes of \a __a and \a __b, takes the absolute value of each difference,; /// and sums these eight values to form one 16-bit result. This operation; /// is repeated four times with successive sets of eight bytes.; ///; /// \code{.operation}; /// FOR i := 0 TO 3; /// j := i*64; /// temp0 := ABS(__a[j+7:j] - __b[j+7:j]); /// temp1 := ABS(__a[j+15:j+8] - __b[j+15:j+8]); /// temp2 := ABS(__a[j+23:j+16] - __b[j+23:j+16]); /// temp3 := ABS(__a[j+31:j+24] - __b[j+31:j+24]); /// temp4 := ABS(__a[j+39:j+32] - __b[j+39:j+32]); /// temp5 := ABS(__a[j+47:j+40] - __b[j+47:j+40]); /// temp6 := ABS(__a[j+55:j+48] - __b[j+55:j+48]); /// temp7 := ABS(__a[j+63:j+56] - __b[j+63:j+56]); /// result[j+15:j] := temp0 + temp1 + temp2 + temp3 +; /// temp4 + temp5 + temp6 + temp7; /// result[j+63:j+16] := 0; /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPSADBW instruction.; ///; /// \param __a; /// A 256-bit integer vector.; /// \param __b; /// A 256-bit integer vector.; /// \returns A 256-bit integer vector containing the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:285,extend,extended,285,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,1,['extend'],['extended']
Modifiability,"/// Computes the maximum between an atomic variable and a value, and returns the value previously; /// held by the atomic variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/utils.h:43,variab,variable,43,geom/geom/inc/bvh/v2/utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/utils.h,2,['variab'],['variable']
Modifiability,"/// Computes the multiplicative inverse of this APInt for a given modulo. The; /// iterative extended Euclidean algorithm is used to solve for this value,; /// however we simplify it to speed up calculating only the inverse, and take; /// advantage of div+rem calculations. We also use some tricks to avoid copying; /// (potentially large) APInts around.; /// WARNING: a value of '0' may be returned,; /// signifying that no multiplicative inverse exists!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:93,extend,extended,93,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['extend'],['extended']
Modifiability,"/// ConcurrentHashTable - is a resizeable concurrent hashtable.; /// The number of resizings limited up to x2^31. This hashtable is; /// useful to have efficient access to aggregate data(like strings,; /// type descriptors...) and to keep only single copy of such; /// an aggregate. The hashtable allows only concurrent insertions:; ///; /// KeyDataTy* = insert ( const KeyTy& );; ///; /// Data structure:; ///; /// Inserted value KeyTy is mapped to 64-bit hash value ->; ///; /// [------- 64-bit Hash value --------]; /// [ StartEntryIndex ][ Bucket Index ]; /// | |; /// points to the points to; /// first probe the bucket.; /// position inside; /// bucket entries; ///; /// After initialization, all buckets have an initial size. During insertions,; /// buckets might be extended to contain more entries. Each bucket can be; /// independently resized and rehashed(no need to lock the whole table).; /// Different buckets may have different sizes. If the single bucket is full; /// then the bucket is resized.; ///; /// BucketsArray keeps all buckets. Each bucket keeps an array of Entries; /// (pointers to KeyDataTy) and another array of entries hashes:; ///; /// BucketsArray[BucketIdx].Hashes[EntryIdx]:; /// BucketsArray[BucketIdx].Entries[EntryIdx]:; ///; /// [Bucket 0].Hashes -> [uint32_t][uint32_t]; /// [Bucket 0].Entries -> [KeyDataTy*][KeyDataTy*]; ///; /// [Bucket 1].Hashes -> [uint32_t][uint32_t][uint32_t][uint32_t]; /// [Bucket 1].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*][KeyDataTy*]; /// .........................; /// [Bucket N].Hashes -> [uint32_t][uint32_t][uint32_t]; /// [Bucket N].Entries -> [KeyDataTy*][KeyDataTy*][KeyDataTy*]; ///; /// ConcurrentHashTableByPtr uses an external thread-safe allocator to allocate; /// KeyDataTy items.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h:774,extend,extended,774,interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ConcurrentHashtable.h,1,['extend'],['extended']
Modifiability,"/// Config argument to RooMinimizer constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:4,Config,Config,4,roofit/roofitcore/inc/RooMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h,1,['Config'],['Config']
Modifiability,/// Config for the algorithm.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeLayout.cpp:4,Config,Config,4,interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeLayout.cpp,1,['Config'],['Config']
Modifiability,/// Configurable target specific flags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:4,Config,Configurable,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,1,['Config'],['Configurable']
Modifiability,"/// Configurables of this measurement",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/inc/RooStats/HistFactory/Measurement.h:4,Config,Configurables,4,roofit/histfactory/inc/RooStats/HistFactory/Measurement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/inc/RooStats/HistFactory/Measurement.h,1,['Config'],['Configurables']
Modifiability,/// Configuration class for Z3,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:4,Config,Configuration,4,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,1,['Config'],['Configuration']
Modifiability,/// Configuration for the Attributor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:4,Config,Configuration,4,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['Config'],['Configuration']
Modifiability,/// Configuration for the mach-o header of a JITDylib. Specify common load; /// commands that should be added to the header.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h:4,Config,Configuration,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/MachOPlatform.h,1,['Config'],['Configuration']
Modifiability,/// Configuration options and arrays for this bundler job,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:4,Config,Configuration,4,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,2,['Config'],['Configuration']
Modifiability,"/// Configuration options for parallel minimization with multiprocessing library",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h:4,Config,Configuration,4,roofit/roofitcore/inc/RooGlobalFunc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h,1,['Config'],['Configuration']
Modifiability,/// Configuration point for MDNodeInfo::isEqual().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h:4,Config,Configuration,4,interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,1,['Config'],['Configuration']
Modifiability,"/// Configuration struct for RooAbsPdf::minimizeNLL with all the default values; /// that also should be taked as the default values for RooAbsPdf::fitTo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:4,Config,Configuration,4,roofit/roofitcore/src/FitHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx,1,['Config'],['Configuration']
Modifiability,"/// Configure \p CI to use this preamble.; /// Like AddImplicitPreamble, but doesn't assume CanReuse() is true.; /// If this preamble does not match the file, it may parse differently.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h:4,Config,Configure,4,interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h,1,['Config'],['Configure']
Modifiability,/// Configure each individual brace in ``BraceWrapping``.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Config,Configure,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Config'],['Configure']
Modifiability,/// Configure each individual space before parentheses in; /// ``SpaceBeforeParensOptions``.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Config,Configure,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Config'],['Configure']
Modifiability,/// Configure each individual space in parentheses in; /// `SpacesInParensOptions`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:4,Config,Configure,4,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['Config'],['Configure']
Modifiability,"/// Configure the LLJIT instance to disable platform support explicitly. This is; /// useful in two cases: for platforms that don't have such requirements and for; /// platforms, that we have no explicit support yet and that don't work well; /// with the generic IR platform.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:4,Config,Configure,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,1,['Config'],['Configure']
Modifiability,/// Configure the LLJIT instance to scrape modules for llvm.global_ctors and; /// llvm.global_dtors variables and (if present) build initialization and; /// deinitialization functions. Platform specific initialization configurations; /// should be preferred where available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:4,Config,Configure,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,3,"['Config', 'config', 'variab']","['Configure', 'configurations', 'variables']"
Modifiability,/// Configure the LLJIT instance to use orc runtime support. This overload; /// assumes that the client has manually configured a Platform object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:4,Config,Configure,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,2,"['Config', 'config']","['Configure', 'configured']"
Modifiability,/// Configure the LLJIT instance to use the ORC runtime and the detected; /// native target for the executor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:4,Config,Configure,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,1,['Config'],['Configure']
Modifiability,/// Configure the diagnostics object for use with ASTUnit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp:4,Config,Configure,4,interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/ASTUnit.cpp,1,['Config'],['Configure']
Modifiability,"/// Configure whether new instances of RooPlot will add themselves to `gDirectory`.; /// Like TH1::AddDirectory().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h:4,Config,Configure,4,roofit/roofitcore/inc/RooPlot.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h,1,['Config'],['Configure']
Modifiability,"/// Consider the following situation when coalescing the copy between; /// %31 and %45 at 800. (The vertical lines represent live range segments.); ///; /// Main range Subrange 0004 (sub2); /// %31 %45 %31 %45; /// 544 %45 = COPY %28 + +; /// | v1 | v1; /// 560B bb.1: + +; /// 624 = %45.sub2 | v2 | v2; /// 800 %31 = COPY %45 + + + +; /// | v0 | v0; /// 816 %31.sub1 = ... + |; /// 880 %30 = COPY %31 | v1 +; /// 928 %45 = COPY %30 | + +; /// | | v0 | v0 <--+; /// 992B ; backedge -> bb.1 | + + |; /// 1040 = %31.sub0 + |; /// This value must remain; /// live-out!; ///; /// Assuming that %31 is coalesced into %45, the copy at 928 becomes; /// redundant, since it copies the value from %45 back into it. The; /// conflict resolution for the main range determines that %45.v0 is; /// to be erased, which is ok since %31.v1 is identical to it.; /// The problem happens with the subrange for sub2: it has to be live; /// on exit from the block, but since 928 was actually a point of; /// definition of %45.sub2, %45.sub2 was not live immediately prior; /// to that definition. As a result, when 928 was erased, the value v0; /// for %45.sub2 was pruned in pruneSubRegValues. Consequently, an; /// IMPLICIT_DEF was inserted as a ""backedge"" definition for %45.sub2,; /// providing an incorrect value to the use at 624.; ///; /// Since the main-range values %31.v1 and %45.v0 were proved to be; /// identical, the corresponding values in subranges must also be the; /// same. A redundant copy is removed because it's not needed, and not; /// because it copied an undefined value, so any liveness that originated; /// from that copy cannot disappear. When pruning a value that started; /// at the removed copy, the corresponding identical value must be; /// extended to replace it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:1753,extend,extended,1753,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['extend'],['extended']
Modifiability,/// Constant iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h:23,adapt,adapter,23,interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Instructions.h,1,['adapt'],['adapter']
Modifiability,"/// Construct SSA form, materializing a value that is live in the; /// middle of the specified block.; ///; /// \c GetValueInMiddleOfBlock is the same as \c GetValueAtEndOfBlock except; /// in one important case: if there is a definition of the rewritten value; /// after the 'use' in BB. Consider code like this:; ///; /// \code; /// X1 = ...; /// SomeBB:; /// use(X); /// X2 = ...; /// br Cond, SomeBB, OutBB; /// \endcode; ///; /// In this case, there are two values (X1 and X2) added to the AvailableVals; /// set by the client of the rewriter, and those values are both live out of; /// their respective blocks. However, the use of X happens in the *middle* of; /// a block. Because of this, we need to insert a new PHI node in SomeBB to; /// merge the appropriate values, and this value isn't live out of the block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h:539,rewrite,rewriter,539,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h,1,['rewrite'],['rewriter']
Modifiability,/// Construct a C++ inheriting construction expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:20,inherit,inheriting,20,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['inherit'],['inheriting']
Modifiability,/// Construct a DbgVariable.; ///; /// Creates a variable without any DW_AT_location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:49,variab,variable,49,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['variab'],['variable']
Modifiability,"/// Construct a FormatStyle based on ``StyleName``.; ///; /// ``StyleName`` can take several forms:; /// * ""{<key>: <value>, ...}"" - Set specic style parameters.; /// * ""<style name>"" - One of the style names supported by; /// getPredefinedStyle().; /// * ""file"" - Load style configuration from a file called ``.clang-format``; /// located in one of the parent directories of ``FileName`` or the current; /// directory if ``FileName`` is empty.; /// * ""file:<format_file_path>"" to explicitly specify the configuration file to; /// use.; ///; /// \param[in] StyleName Style name to interpret according to the description; /// above.; /// \param[in] FileName Path to start search for .clang-format if ``StyleName``; /// == ""file"".; /// \param[in] FallbackStyle The name of a predefined style used to fallback to; /// in case \p StyleName is ""file"" and no file can be found.; /// \param[in] Code The actual code to be formatted. Used to determine the; /// language if the filename isn't sufficient.; /// \param[in] FS The underlying file system, in which the file resides. By; /// default, the file system is the real file system.; /// \param[in] AllowUnknownOptions If true, unknown format options only; /// emit a warning. If false, errors are emitted on unknown format; /// options.; ///; /// \returns FormatStyle as specified by ``StyleName``. If ``StyleName`` is; /// ""file"" and no file is found, returns ``FallbackStyle``. If no style could be; /// determined, returns an Error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:276,config,configuration,276,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,['config'],['configuration']
Modifiability,"/// Construct a new assembler instance.; //; // FIXME: How are we going to parameterize this? Two obvious options are stay; // concrete and require clients to pass in a target like object. The other; // option is to make this abstract, and have targets provide concrete; // implementations as we do with AsmParser.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:75,parameteriz,parameterize,75,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,1,['parameteriz'],['parameterize']
Modifiability,"/// Construct a type-list to be passed to the AST_POLYMORPHIC_MATCHER*; /// macros.; ///; /// You can't pass something like \c TypeList<Foo, Bar> to a macro, because it; /// will look at that as two arguments. However, you can pass; /// \c void(TypeList<Foo, Bar>), which works thanks to the parenthesis.; /// The \c PolymorphicMatcherWithParam* classes will unpack the function type to; /// extract the TypeList object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:317,Polymorphi,PolymorphicMatcherWithParam,317,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,1,['Polymorphi'],['PolymorphicMatcherWithParam']
Modifiability,"/// Construct adapter from a batch of values.; /// - If `batch.size() == 1`, always return the value at `batch[0]`.; /// - Else, return `batch[i]`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h:14,adapt,adapter,14,roofit/roofitmore/src/BracketAdapters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h,1,['adapt'],['adapter']
Modifiability,"/// Construct adapter from a fallback value and a batch of values.; /// - If `batch.empty()`, always return `payload`.; /// - Else, return `batch[i]`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h:14,adapt,adapter,14,roofit/roofitmore/src/BracketAdapters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitmore/src/BracketAdapters.h,1,['adapt'],['adapter']
Modifiability,/// Construct an empty C++ inheriting construction expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:27,inherit,inheriting,27,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['inherit'],['inheriting']
Modifiability,"/// Construct the IR attribute list of a function or call.; ///; /// When adding an attribute, please consider where it should be handled:; ///; /// - getDefaultFunctionAttributes is for attributes that are essentially; /// part of the global target configuration (but perhaps can be; /// overridden on a per-function basis). Adding attributes there; /// will cause them to also be set in frontends that build on Clang's; /// target-configuration logic, as well as for code defined in library; /// modules such as CUDA's libdevice.; ///; /// - ConstructAttributeList builds on top of getDefaultFunctionAttributes; /// and adds declaration-specific, convention-specific, and; /// frontend-specific logic. The last is of particular importance:; /// attributes that restrict how the frontend generates code must be; /// added here rather than getDefaultFunctionAttributes.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:250,config,configuration,250,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,2,['config'],['configuration']
Modifiability,"/// Construction context can be seen as a linked list of multiple layers.; /// Sometimes a single trigger is not enough to describe the construction; /// site. That's what causing us to have a chain of ""partial"" construction; /// context layers. Some examples:; /// - A constructor within in an aggregate initializer list within a variable; /// would have a construction context of the initializer list with; /// the parent construction context of a variable.; /// - A constructor for a temporary that needs to be both destroyed; /// and materialized into an elidable copy constructor would have a; /// construction context of a CXXBindTemporaryExpr with the parent; /// construction context of a MaterializeTemproraryExpr.; /// Not all of these are currently supported.; /// Layers are created gradually while traversing the AST, and layers that; /// represent the outmost AST nodes are built first, while the node that; /// immediately contains the constructor would be built last and capture the; /// previous layers as its parents. Construction context captures the last layer; /// (which has links to the previous layers) and classifies the seemingly; /// arbitrary chain of layers into one of the possible ways of constructing; /// an object in C++ for user-friendly experience.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:66,layers,layers,66,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,9,"['Layers', 'layers', 'variab']","['Layers', 'layers', 'variable']"
Modifiability,/// Constructor for a variable \p Name with implicit format \p ImplicitFormat; /// defined at line \p DefLineNumber or defined before input is parsed if; /// \p DefLineNumber is std::nullopt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:22,variab,variable,22,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,"/// Constructor for automatic configuration with basic settings and a; /// ModelConfig. Uses a UniformProposal, 10,000 iterations, 40 burn in; /// steps, 50 bins for each RooRealVar, determines interval by histogram,; /// and finds a 95% confidence interval. Any of these basic settings can; /// be overridden by calling one of the Set...() methods.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:30,config,configuration,30,roofit/roostats/inc/RooStats/MCMCCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h,1,['config'],['configuration']
Modifiability,"/// Constructor for creating a spline from a TGraph.; /// \param[in] name The name of the spline.; /// \param[in] title The title of the spline.; /// \param[in] x The independent variable.; /// \param[in] gr The input TGraph containing the data points.; /// \param[in] order The order of the spline (3 or 5).; /// \param[in] logx If true, the x values are logarithmically scaled before spline creation.; /// \param[in] logy If true, the y values are logarithmically scaled before spline creation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooSpline.cxx:179,variab,variable,179,roofit/roofit/src/RooSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooSpline.cxx,1,['variab'],['variable']
Modifiability,"/// Constructor for creating a spline from raw data.; /// \param[in] name The name of the spline.; /// \param[in] title The title of the spline.; /// \param[in] x The independent variable.; /// \param[in] x0 The array of x values for the spline points.; /// \param[in] y0 The array of y values for the spline points.; /// \param[in] order The order of the spline (3 or 5).; /// \param[in] logx If true, the x values are logarithmically scaled before spline creation.; /// \param[in] logy If true, the y values are logarithmically scaled before spline creation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooSpline.cxx:179,variab,variable,179,roofit/roofit/src/RooSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooSpline.cxx,1,['variab'],['variable']
Modifiability,"/// Constructor for unweighted data; /// Varius option for TKDE can be passed in the option string as below.; /// Note that min and max will define the plotting range but will not restrict the data in the unbinned case; /// Instead when use binning, only the data in the range will be considered.; /// Note also, that when some data exists outside the range, one should not use the mirror option with unbinned.; /// Adaptive will be soon very slow especially for Nevents > 10000.; /// For this reason, by default for Nevents >=10000, the data are automatically binned in; /// nbins=Min(10000,Nevents/10); /// In case of ForceBinning option the default number of bins is 1000",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h:416,Adapt,Adaptive,416,hist/hist/inc/TKDE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TKDE.h,1,['Adapt'],['Adaptive']
Modifiability,"/// Constructor from data and a model configuration; /// If the ModelConfig defines a prior pdf for any of the parameters those will be included as constrained terms in the; /// likelihood function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h:38,config,configuration,38,roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodCalculator.h,1,['config'],['configuration']
Modifiability,"/// Constructor that clones the pdf/data and owns those cloned copies.; ///; /// This constructor is used for classes that need a pdf/data clone (RooBinnedL and RooUnbinnedL).; ///; /// \param in Struct containing raw pointers to the pdf and dataset that are to be cloned.; /// \param N_events The number of events in this likelihood's dataset.; /// \param N_components The number of components in the likelihood.; /// \param extended Set extended term calculation on, off or use Extended::Auto to determine automatically based on the; /// pdf whether to activate or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:426,extend,extended,426,roofit/roofitcore/src/TestStatistics/RooAbsL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx,3,"['Extend', 'extend']","['Extended', 'extended']"
Modifiability,"/// Constructor that does not clone pdf/data and uses the shared_ptr aliasing constructor to make it non-owning.; ///; /// This constructor is used for classes where a reference to the external pdf/dataset is good enough (RooSumL and; /// RooSubsidiaryL).; ///; /// \param inpdf Raw pointer to the pdf.; /// \param indata Raw pointer to the dataset.; /// \param N_events The number of events in this likelihood's dataset.; /// \param N_components The number of components in the likelihood.; /// \param extended Set extended term calculation on, off or use Extended::Auto to determine automatically based on the; /// pdf whether to activate or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:503,extend,extended,503,roofit/roofitcore/src/TestStatistics/RooAbsL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx,3,"['Extend', 'extend']","['Extended', 'extended']"
Modifiability,"/// Constructor, possibly for all members of a class (or globals).; /// Include (or not) the scope's using declarations of variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TListOfDataMembers.h:123,variab,variables,123,core/meta/inc/TListOfDataMembers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TListOfDataMembers.h,1,['variab'],['variables']
Modifiability,"/// Constructor. The ExtendPdf behaves identical to the supplied input pdf,; /// but adds an extended likelihood term. expectedEvents() will return; /// `norm` if `rangeName` remains empty. If `rangeName` is not empty,; /// `norm` will refer to this range, and expectedEvents will return the; /// total number of events over the full range of the observables.; /// \param[in] name Name of the pdf; /// \param[in] title Title of the pdf (for plotting); /// \param[in] pdf The pdf to be extended; /// \param[in] norm Expected number of events; /// \param[in] rangeName If given, the number of events denoted by `norm` is interpreted as; /// the number of events in this range only",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooExtendPdf.cxx:21,Extend,ExtendPdf,21,roofit/roofitcore/src/RooExtendPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooExtendPdf.cxx,3,"['Extend', 'extend']","['ExtendPdf', 'extended']"
Modifiability,/// Constructor; ///; /// \param Functions The set of functions we are deriving attributes for.; /// \param InfoCache Cache to hold various information accessible for; /// the abstract attributes.; /// \param Configuration The Attributor configuration which determines what; /// generic features to use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:209,Config,Configuration,209,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,2,"['Config', 'config']","['Configuration', 'configuration']"
Modifiability,/// Constructs a refactoring option of the given type.; ///; /// The ownership of options is shared among requirements that use it because; /// one option can be used by multiple rules in a refactoring action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOption.h:17,refactor,refactoring,17,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOption.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOption.h,2,['refactor'],['refactoring']
Modifiability,"/// Consume a Error without doing anything. This method should be used; /// only where an error can be considered a reasonable and expected return; /// value.; ///; /// Uses of this method are potentially indicative of design problems: If it's; /// legitimate to do nothing while processing an ""error"", the error-producer; /// might be more clearly refactored to return an std::optional<T>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:349,refactor,refactored,349,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['refactor'],['refactored']
Modifiability,"/// Consume the construction context layer, together with its parent layers,; /// and wrap it up into a complete construction context. May return null; /// if layers do not form any supported construction context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:69,layers,layers,69,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,2,['layers'],['layers']
Modifiability,/// Container for description of a global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:42,variab,variable,42,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,1,['variab'],['variable']
Modifiability,"/// Container for information extracted from TMVA XML config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:54,config,config,54,tmva/tmva/inc/TMVA/RReader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx,1,['config'],['config']
Modifiability,/// Contains all of the variables defined in this lambda that shadow variables; /// that were defined in parent contexts. Used to avoid warnings when the; /// shadowed variables are uncaptured by this lambda.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:24,variab,variables,24,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,3,['variab'],['variables']
Modifiability,"/// Contains all variable-referring-expressions (i.e. DeclRefExprs; /// or MemberExprs) that refer to local variables in a generic lambda; /// or a lambda in a potentially-evaluated-if-used context.; ///; /// Potentially capturable variables of a nested lambda that might need; /// to be captured by the lambda are housed here.; /// This is specifically useful for generic lambdas or; /// lambdas within a potentially evaluated-if-used context.; /// If an enclosing variable is named in an expression of a lambda nested; /// within a generic lambda, we don't always know whether the variable; /// will truly be odr-used (i.e. need to be captured) by that nested lambda,; /// until its instantiation. But we still need to capture it in the; /// enclosing lambda if all intervening lambdas can capture the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:17,variab,variable-referring-expressions,17,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,6,['variab'],"['variable', 'variable-referring-expressions', 'variables']"
Modifiability,/// Contains all variable-referring-expressions that refer; /// to local variables that are usable as constant expressions and; /// do not involve an odr-use (they may still need to be captured; /// if the enclosing full-expression is instantiation dependent).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:17,variab,variable-referring-expressions,17,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,2,['variab'],"['variable-referring-expressions', 'variables']"
Modifiability,/// Contains the lexed tokens of a pragma with arguments that; /// may reference member variables and so need to be parsed at the; /// end of the class declaration after parsing all other member; /// member declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:88,variab,variables,88,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['variab'],['variables']
Modifiability,/// Contains the lexed tokens of an attribute with arguments that; /// may reference member variables and so need to be parsed at the; /// end of the class declaration after parsing all other member; /// member declarations.; /// FIXME: Perhaps we should change the name of LateParsedDeclaration to; /// LateParsedTokens.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:92,variab,variables,92,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['variab'],['variables']
Modifiability,"/// Controls whether __builtin_extend_pointer should sign-extend; /// pointers to uint64_t or zero-extend them (the default). Has; /// no effect for targets:; /// - that have 64-bit pointers, or; /// - that cannot address through registers larger than pointers, or; /// - that implicitly ignore/truncate the top bits when addressing; /// through such registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:58,extend,extend,58,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,2,['extend'],['extend']
Modifiability,/// Convenience alias that captures the common use of map lattices to model; /// in-scope variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/MapLattice.h:90,variab,variables,90,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/MapLattice.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/MapLattice.h,1,['variab'],['variables']
Modifiability,/// Convenience overload which writes the DIE pointer into an out variable; /// ObjectPointer in addition to returning it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h:66,variab,variable,66,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h,1,['variab'],['variable']
Modifiability,"/// Convert ({u,s}itofp vec) --> ({u,s}itofp ({s,z}ext vec)) so it doesn't get; /// split up into scalar instructions during legalization, and the vector; /// extending instructions are selected in performVectorExtendCombine below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:159,extend,extending,159,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,1,['extend'],['extending']
Modifiability,"/// Convert One BF16 Data to One Single Float Data.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic does not correspond to a specific instruction.; ///; /// \param __A; /// A bfloat data.; /// \returns A float data whose sign field and exponent field keep unchanged,; /// and fraction field is extended to 23 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx512bf16intrin.h:307,extend,extended,307,interpreter/llvm-project/clang/lib/Headers/avx512bf16intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx512bf16intrin.h,1,['extend'],['extended']
Modifiability,"/// Convert Op, which must be a STRICT operation of float type, to the; /// float type VT, by either extending or rounding (by truncation).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:101,extend,extending,101,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['extend'],['extending']
Modifiability,"/// Convert Op, which must be of float type, to the; /// float type VT, by either extending or rounding (by truncation).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:82,extend,extending,82,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['extend'],['extending']
Modifiability,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by either any-extending or truncating it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:90,extend,extending,90,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['extend'],['extending']
Modifiability,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by either any/sign/zero-extending (depending on IsAny /; /// IsSigned) or truncating it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:100,extend,extending,100,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['extend'],['extending']
Modifiability,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by either sign-extending or truncating it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:91,extend,extending,91,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['extend'],['extending']
Modifiability,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by either sign/zero-extending (depending on IsSigned) or; /// truncating it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:96,extend,extending,96,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['extend'],['extending']
Modifiability,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by either zero-extending or truncating it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:91,extend,extending,91,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['extend'],['extending']
Modifiability,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by first bitcasting (from potential vector) to; /// corresponding scalar type then either any-extending or truncating it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:170,extend,extending,170,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['extend'],['extending']
Modifiability,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by first bitcasting (from potential vector) to; /// corresponding scalar type then either sign-extending or truncating it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:171,extend,extending,171,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['extend'],['extending']
Modifiability,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by first bitcasting (from potential vector) to; /// corresponding scalar type then either zero-extending or truncating it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:171,extend,extending,171,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['extend'],['extending']
Modifiability,"/// Convert a TLS address reference into the correct sequence of loads; /// and calls to compute the variable's address (for Darwin, currently) and; /// return an SDValue containing the final node.; /// Darwin only has one TLS scheme which must be capable of dealing with the; /// fully general situation, in the worst case. This means:; /// + ""extern __thread"" declaration.; /// + Defined in a possibly unknown dynamic library.; ///; /// The general system is that each __thread variable has a [3 x i64] descriptor; /// which contains information used by the runtime to calculate the address. The; /// only part of this the compiler needs to know about is the first xword, which; /// contains a function pointer that must be called with the address of the; /// entire descriptor in ""x0"".; ///; /// Since this descriptor may be in a different unit, in general even the; /// descriptor must be accessed via an indirect load. The ""ideal"" code sequence; /// is:; /// adrp x0, _var@TLVPPAGE; /// ldr x0, [x0, _var@TLVPPAGEOFF] ; x0 now contains address of descriptor; /// ldr x1, [x0] ; x1 contains 1st entry of descriptor,; /// ; the function pointer; /// blr x1 ; Uses descriptor address in x0; /// ; Address of _var is now in x0.; ///; /// If the address of _var's descriptor *is* known to the linker, then it can; /// change the first ""ldr"" instruction to an appropriate ""add x0, x0, #imm"" for; /// a slight efficiency gain.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:101,variab,variable,101,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['variab'],['variable']
Modifiability,"/// Convert a TLS address reference into the correct sequence of loads; /// and calls to compute the variable's address for Darwin, and return an; /// SDValue containing the final node.; /// Darwin only has one TLS scheme which must be capable of dealing with the; /// fully general situation, in the worst case. This means:; /// + ""extern __thread"" declaration.; /// + Defined in a possibly unknown dynamic library.; ///; /// The general system is that each __thread variable has a [3 x i32] descriptor; /// which contains information used by the runtime to calculate the address. The; /// only part of this the compiler needs to know about is the first word, which; /// contains a function pointer that must be called with the address of the; /// entire descriptor in ""r0"".; ///; /// Since this descriptor may be in a different unit, in general access must; /// proceed along the usual ARM rules. A common sequence to produce is:; ///; /// movw rT1, :lower16:_var$non_lazy_ptr; /// movt rT1, :upper16:_var$non_lazy_ptr; /// ldr r0, [rT1]; /// ldr rT2, [r0]; /// blx rT2; /// [...address now in r0...]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:101,variab,variable,101,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,2,['variab'],['variable']
Modifiability,/// Convert a thread-local variable reference into a sequence of instructions to; /// compute the variable's address for the local exec TLS model of ELF targets.; /// The sequence depends on the maximum TLS area size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:27,variab,variable,27,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['variab'],['variable']
Modifiability,"/// Convert character's value, interpreted as a code unit, to a string.; /// The value needs to be zero-extended to 32-bits.; /// FIXME: This assumes Unicode literal encodings",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:104,extend,extended,104,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['extend'],['extended']
Modifiability,"/// Convert the return values of the functions into a VariantMatcher.; ///; /// There are 2 cases right now: The return value is a Matcher<T> or is a; /// polymorphic matcher. For the former, we just construct the VariantMatcher.; /// For the latter, we instantiate all the possible Matcher<T> of the poly; /// matcher.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:155,polymorphi,polymorphic,155,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,1,['polymorphi'],['polymorphic']
Modifiability,/// Convert variable location debugging information stored in DPMarkers and; /// DPValues into the dbg.value intrinsic representation. Sets; /// IsNewDbgInfoFormat = false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:12,variab,variable,12,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,1,['variab'],['variable']
Modifiability,/// Convert variable location debugging information stored in dbg.value; /// intrinsics into DPMarker / DPValue records. Deletes all dbg.values in; /// the process and sets IsNewDbgInfoFormat = true. Only takes effect if; /// the UseNewDbgInfoFormat LLVM command line option is given.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h:12,variab,variable,12,interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BasicBlock.h,1,['variab'],['variable']
Modifiability,"/// Converts \p Op, which must be of floating point type, to the; /// floating point type \p VT, by either extending or truncating it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.h:107,extend,extending,107,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.h,1,['extend'],['extending']
Modifiability,"/// Converts a \c Matcher<InnerT> to a \c Matcher<OuterT>, where; /// \c OuterT is any type that is supported by \c Getter.; ///; /// \code Getter<OuterT>::value() \endcode returns a; /// \code InnerTBase (OuterT::*)() \endcode, which is used to adapt a \c OuterT; /// object into a \c InnerT",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:246,adapt,adapt,246,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['adapt'],['adapt']
Modifiability,"/// Converts a \c Matcher<T> to a matcher of desired type \c To by; /// ""adapting"" a \c To into a \c T.; ///; /// The \c ArgumentAdapterT argument specifies how the adaptation is done.; ///; /// For example:; /// \c ArgumentAdaptingMatcher<HasMatcher, T>(InnerMatcher);; /// Given that \c InnerMatcher is of type \c Matcher<T>, this returns a matcher; /// that is convertible into any matcher of type \c To by constructing; /// \c HasMatcher<To, T>(InnerMatcher).; ///; /// If a matcher does not need knowledge about the inner type, prefer to use; /// PolymorphicMatcher.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:73,adapt,adapting,73,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,3,"['Polymorphi', 'adapt']","['PolymorphicMatcher', 'adaptation', 'adapting']"
Modifiability,/// Copies final inscan reductions values to the original variables.; /// The code is the following:; /// \code; /// <orig_var> = buffer[num_iters-1];; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:58,variab,variables,58,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variables']
Modifiability,/// Copy initialization expr of a __block variable and a boolean flag that; /// indicates whether the expression can throw.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:42,variab,variable,42,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['variab'],['variable']
Modifiability,/// Copy over the debug info for a variable to its SRA replacements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:35,variab,variable,35,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['variab'],['variable']
Modifiability,"/// Cost of evicting interference - used by default advisor, and the eviction; /// chain heuristic in RegAllocGreedy.; // FIXME: this can be probably made an implementation detail of the default; // advisor, if the eviction chain logic can be refactored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h:243,refactor,refactored,243,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocEvictionAdvisor.h,1,['refactor'],['refactored']
Modifiability,"/// Counts the differences between this pattern and the given one.; /// \param Other The given VariablePattern to compare with.; /// \param FirstMismatch Output parameter that will be filled with information; /// about the first difference between the two patterns. This parameter; /// can be a nullptr, in which case it will be ignored.; /// \return Returns the number of differences between the pattern this object; /// is following and the given VariablePattern.; ///; /// For example, the following statements all have the same pattern and this; /// function would return zero:; ///; /// if (a < b) return a; return b;; /// if (x < y) return x; return y;; /// if (u2 < u1) return u2; return u1;; ///; /// But the following statement has a different pattern (note the changed; /// variables in the return statements) and would have two differences when; /// compared with one of the statements above.; ///; /// if (a < b) return b; return a;; ///; /// This function should only be called if the related statements of the given; /// pattern and the statements of this objects are clones of each other.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:95,Variab,VariablePattern,95,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,3,"['Variab', 'variab']","['VariablePattern', 'variables']"
Modifiability,/// Create @LINE pseudo variable. Value is set when pattern are being; /// matched.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:24,variab,variable,24,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,/// Create INSTR_PROF_DATA variable for counters and bitmaps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:27,variab,variable,27,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variable']
Modifiability,"/// Create XML files for this measurement in the given directory.; /// XML files can be configured with a different output prefix; /// Create an XML file for this measurement; /// First, create the XML driver; /// Then, create xml files for each channel",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Measurement.cxx:88,config,configured,88,roofit/histfactory/src/Measurement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Measurement.cxx,1,['config'],['configured']
Modifiability,/// Create a ASTUnit from an AST file.; ///; /// \param Filename - The AST file to load.; ///; /// \param PCHContainerRdr - The PCHContainerOperations to use for loading and; /// creating modules.; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \returns - The initialized ASTUnit or null if the AST failed to load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:302,extend,extend,302,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,1,['extend'],['extend']
Modifiability,"/// Create a CXXLifetimeExtendedObjectRegion for temporaries which are; /// lifetime-extended by *static* references.; /// This differs from \ref getCXXLifetimeExtendedObjectRegion(Expr const *,; /// ValueDecl const *, LocationContext const *) in the super-region used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:85,extend,extended,85,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,1,['extend'],['extended']
Modifiability,/// Create a CXXLifetimeExtendedObjectRegion for temporaries which are; /// lifetime-extended by local references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:85,extend,extended,85,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,1,['extend'],['extended']
Modifiability,"/// Create a DBG_VALUE based on debug operands \p DbgOps. Qualify it with the; /// information in \pProperties, for variable Var. Don't insert it anywhere,; /// just return the builder for it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:116,variab,variable,116,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['variab'],['variable']
Modifiability,"/// Create a DBG_VALUE representing this VarLoc in the given function.; /// Copies variable-specific information such as DILocalVariable and; /// inlining information from the original DBG_VALUE instruction, which may; /// have been several transfers ago.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:83,variab,variable-specific,83,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable-specific']
Modifiability,/// Create a DIExpression to describe one part of an aggregate variable that; /// is fragmented across multiple Values. The DW_OP_LLVM_fragment operation; /// will be appended to the elements of \c Expr. If \c Expr already contains; /// a \c DW_OP_LLVM_fragment \c OffsetInBits is interpreted as an offset; /// into the existing fragment.; ///; /// \param OffsetInBits Offset of the piece in bits.; /// \param SizeInBits Size of the piece in bits.; /// \return Creating a fragment expression may fail if \c Expr; /// contains arithmetic operations that would be; /// truncated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:63,variab,variable,63,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['variab'],['variable']
Modifiability,"/// Create a LOAD_STACK_GUARD node, and let it carry the target specific global; /// variable if there exists one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:85,variab,variable,85,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['variab'],['variable']
Modifiability,"/// Create a binary operation that may resolve to an overloaded; /// operator.; ///; /// \param OpLoc The location of the operator itself (e.g., '+').; ///; /// \param Opc The BinaryOperatorKind that describes this operator.; ///; /// \param Fns The set of non-member functions that will be; /// considered by overload resolution. The caller needs to build this; /// set based on the context using, e.g.,; /// LookupOverloadedOperatorName() and ArgumentDependentLookup(). This; /// set should not contain any member functions; those will be added; /// by CreateOverloadedBinOp().; ///; /// \param LHS Left-hand argument.; /// \param RHS Right-hand argument.; /// \param PerformADL Whether to consider operator candidates found by ADL.; /// \param AllowRewrittenCandidates Whether to consider candidates found by; /// C++20 operator rewrites.; /// \param DefaultedFn If we are synthesizing a defaulted operator function,; /// the function in question. Such a function is never a candidate in; /// our overload resolution. This also enables synthesizing a three-way; /// comparison from < and == as described in C++20 [class.spaceship]p1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:832,rewrite,rewrites,832,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['rewrite'],['rewrites']
Modifiability,/// Create a call to Masked Expand Load intrinsic; /// \p Ty - vector type to load; /// \p Ptr - base pointer for the load; /// \p Mask - vector of booleans which indicates what vector lanes should; /// be accessed in memory; /// \p PassThru - pass-through value that is used to fill the masked-off lanes; /// of the result; /// \p Name - name of the result variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp:358,variab,variable,358,interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp,1,['variab'],['variable']
Modifiability,/// Create a call to a Masked Gather intrinsic.; /// \p Ty - vector type to gather; /// \p Ptrs - vector of pointers for loading; /// \p Align - alignment for one element; /// \p Mask - vector of booleans which indicates what vector lanes should; /// be accessed in memory; /// \p PassThru - pass-through value that is used to fill the masked-off lanes; /// of the result; /// \p Name - name of the result variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp:406,variab,variable,406,interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp,1,['variab'],['variable']
Modifiability,/// Create a call to a Masked Load intrinsic.; /// \p Ty - vector type to load; /// \p Ptr - base pointer for the load; /// \p Alignment - alignment of the source location; /// \p Mask - vector of booleans which indicates what vector lanes should; /// be accessed in memory; /// \p PassThru - pass-through value that is used to fill the masked-off lanes; /// of the result; /// \p Name - name of the result variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp:407,variab,variable,407,interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp,1,['variab'],['variable']
Modifiability,/// Create a closure that computes the loop variable from the logical iteration; /// number.; ///; /// \param Actions The Sema object.; /// \param LoopVarTy Type for the loop variable used for result value.; /// \param LogicalTy Type for the logical iteration number.; /// \param StartExpr Value of the loop counter at the first iteration.; /// \param Step Amount of increment after each iteration.; /// \param Deref Whether the loop variable is a dereference of the loop; /// counter variable.; ///; /// \return Closure (CapturedStmt) of the loop value calculation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,4,['variab'],['variable']
Modifiability,"/// Create a combined index file from the input IR files and write it.; ///; /// This is meant to enable testing of ThinLTO combined index generation,; /// currently available via the gold plugin via -thinlto.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:189,plugin,plugin,189,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,1,['plugin'],['plugin']
Modifiability,/// Create a constant struct initializer used to register this global at; /// runtime.; /// \return the constant struct and the global variable holding the symbol name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h:135,variab,variable,135,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,1,['variab'],['variable']
Modifiability,"/// Create a descriptor for an imported function.; /// \param Context The scope this module is imported into.; /// \param Decl The declaration (or definition) of a function, type, or; /// variable.; /// \param File File where the declaration is located.; /// \param Line Line number of the declaration.; /// \param Elements Renamed elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:188,variab,variable,188,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,1,['variab'],['variable']
Modifiability,"/// Create a dummy variable within the declcontext of the lambda's; /// call operator, for name lookup purposes for a lambda init capture.; ///; /// CodeGen handles emission of lambda captures, ignoring these dummy; /// variables appropriately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:19,variab,variable,19,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Create a global function to register OpenMP requires flags into the; /// runtime, according to the `Config`.; ///; /// This function should be added to the list of constructors of the; /// compilation unit in order to be called before other OpenMP runtime; /// functions.; ///; /// \param Name Name of the created function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:104,Config,Config,104,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['Config'],['Config']
Modifiability,/// Create a global pointer to a function that will initialize a global; /// variable. The user has requested that this pointer be emitted in a specific; /// section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:77,variab,variable,77,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['variab'],['variable']
Modifiability,/// Create a global variable describing the forward declaration; /// represented in the given VarDecl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:20,variab,variable,20,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['variab'],['variable']
Modifiability,/// Create a global variable to flag FSDiscriminators are used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h:20,variab,variable,20,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SampleProfileLoaderBaseUtil.h,2,['variab'],['variable']
Modifiability,/// Create a legacy GVN pass. This also allows parameterizing whether or not; /// MemDep is enabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h:47,parameteriz,parameterizing,47,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/GVN.h,1,['parameteriz'],['parameterizing']
Modifiability,"/// Create a location list entry for the range [\p Begin, \p End).; ///; /// \param Vals One or more values describing (parts of) the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocEntry.h:134,variab,variable,134,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocEntry.h,1,['variab'],['variable']
Modifiability,"/// Create a location where the saved value is in (Deref == false) or at; /// (Deref == true) a regiser plus an offset and, optionally, in the specified; /// address space (used mostly for the CFA).; ///; /// The CFA is usually defined using this rule by using the stack pointer or; /// frame pointer as the register, with an offset that accounts for all; /// spilled registers and all local variables in a function, and Deref ==; /// false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:392,variab,variables,392,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,1,['variab'],['variables']
Modifiability,/// Create a new AAMDNode that describes this AAMDNode after extending it to; /// apply to a series of bytes of length Len. A size of -1 denotes an unknown; /// size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:61,extend,extending,61,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['extend'],['extending']
Modifiability,/// Create a new DeclRefExpr for the referenced variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp:48,variab,variable,48,interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,1,['variab'],['variable']
Modifiability,/// Create a new \c SourceMgr adaptor that maps to the given source; /// manager and diagnostics engine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:30,adapt,adaptor,30,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,1,['adapt'],['adaptor']
Modifiability,"/// Create a new capture of a variable or of \c this.; ///; /// \param Loc The source location associated with this capture.; ///; /// \param Kind The kind of capture (this, byref, bycopy), which must; /// not be init-capture.; ///; /// \param Implicit Whether the capture was implicit or explicit.; ///; /// \param Var The local variable being captured, or null if capturing; /// \c this.; ///; /// \param EllipsisLoc The location of the ellipsis (...) for a; /// capture that is a pack expansion, or an invalid source; /// location to indicate that this is not a pack expansion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:30,variab,variable,30,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,2,['variab'],['variable']
Modifiability,"/// Create a new capture.; ///; /// \param Loc The source location associated with this capture.; ///; /// \param Kind The kind of capture (this, ByRef, ...).; ///; /// \param Var The variable being captured, or null if capturing this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:184,variab,variable,184,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,"/// Create a new descriptor for a parameter variable.; ///; /// \c Scope must be a \a DILocalScope, and thus its scope chain eventually; /// leads to a \a DISubprogram.; ///; /// \c ArgNo is the index (starting from \c 1) of this variable in the; /// subprogram parameters. \c ArgNo should not conflict with other; /// parameters of the same subprogram.; ///; /// If \c AlwaysPreserve, this variable will be referenced from its; /// containing subprogram, and will survive some optimizations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:44,variab,variable,44,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,3,['variab'],['variable']
Modifiability,"/// Create a new descriptor for an auto variable. This is a local variable; /// that is not a subprogram parameter.; ///; /// \c Scope must be a \a DILocalScope, and thus its scope chain eventually; /// leads to a \a DISubprogram.; ///; /// If \c AlwaysPreserve, this variable will be referenced from its; /// containing subprogram, and will survive some optimizations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:40,variab,variable,40,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,3,['variab'],['variable']
Modifiability,"/// Create a new descriptor for the specified C++ method.; /// See comments in \a DISubprogram* for descriptions of these fields.; /// \param Scope Function scope.; /// \param Name Function name.; /// \param LinkageName Mangled function name.; /// \param File File where this variable is defined.; /// \param LineNo Line number.; /// \param Ty Function type.; /// \param VTableIndex Index no of this method in virtual table, or -1u if; /// unrepresentable.; /// \param ThisAdjustment; /// MS ABI-specific adjustment of 'this' that occurs; /// in the prologue.; /// \param VTableHolder Type that holds vtable.; /// \param Flags e.g. is this function prototyped or not.; /// This flags are used to emit dwarf attributes.; /// \param SPFlags Additional flags specific to subprograms.; /// \param TParams Function template parameters.; /// \param ThrownTypes Exception types this function may throw.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:276,variab,variable,276,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,1,['variab'],['variable']
Modifiability,/// Create a new descriptor for the specified subprogram.; /// See comments in DISubprogram* for descriptions of these fields.; /// \param Scope Function scope.; /// \param Name Function name.; /// \param LinkageName Mangled function name.; /// \param File File where this variable is defined.; /// \param LineNo Line number.; /// \param Ty Function type.; /// \param ScopeLine Set to the beginning of the scope this starts; /// \param Flags e.g. is this function prototyped or not.; /// These flags are used to emit dwarf attributes.; /// \param SPFlags Additional flags specific to subprograms.; /// \param TParams Function template parameters.; /// \param ThrownTypes Exception types this function may throw.; /// \param Annotations Attribute Annotations.; /// \param TargetFuncName The name of the target function if this is; /// a trampoline.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:273,variab,variable,273,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,1,['variab'],['variable']
Modifiability,/// Create a new descriptor for the specified variable.; /// \param Context Variable scope.; /// \param Name Name of the variable.; /// \param LinkageName Mangled name of the variable.; /// \param File File where this variable is defined.; /// \param LineNo Line number.; /// \param Ty Variable Type.; /// \param IsLocalToUnit Boolean flag indicate whether this variable is; /// externally visible or not.; /// \param Expr The location of the global relative to the attached; /// GlobalVariable.; /// \param Decl Reference to the corresponding declaration.; /// \param AlignInBits Variable alignment(or 0 if no alignment attr was; /// specified),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:46,variab,variable,46,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,8,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// Create a new descriptor for the specified; /// variable which has a complex address expression for its address.; /// \param Addr An array of complex address operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:51,variab,variable,51,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,1,['variab'],['variable']
Modifiability,"/// Create a new loop identifier for a loop created from a loop transformation.; ///; /// @param OrigLoopID The loop ID of the loop before the transformation.; /// @param FollowupAttrs List of attribute names that contain attributes to be; /// added to the new loop ID.; /// @param InheritOptionsAttrsPrefix Selects which attributes should be inherited; /// from the original loop. The following values; /// are considered:; /// nullptr : Inherit all attributes from @p OrigLoopID.; /// """" : Do not inherit any attribute from @p OrigLoopID; only use; /// those specified by a followup attribute.; /// ""<prefix>"": Inherit all attributes except those which start with; /// <prefix>; commonly used to remove metadata for the; /// applied transformation.; /// @param AlwaysNew If true, do not try to reuse OrigLoopID and never return; /// std::nullopt.; ///; /// @return The loop ID for the after-transformation loop. The following values; /// can be returned:; /// std::nullopt : No followup attribute was found; it is up to the; /// transformation to choose attributes that make sense.; /// @p OrigLoopID: The original identifier can be reused.; /// nullptr : The new loop has no attributes.; /// MDNode* : A new unique loop identifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:282,Inherit,InheritOptionsAttrsPrefix,282,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,5,"['Inherit', 'inherit']","['Inherit', 'InheritOptionsAttrsPrefix', 'inherit', 'inherited']"
Modifiability,"/// Create a new module for a C++ module interface unit.; /// The module must not already exist, and will be configured for the current; /// compilation.; ///; /// Note that this also sets the current module to the newly-created module.; ///; /// \returns The newly-created module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:109,config,configured,109,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,1,['config'],['configured']
Modifiability,"/// Create a new phi node for the induction variable \p OrigPhi to resume; /// iteration count in the scalar epilogue, from where the vectorized loop; /// left off. \p Step is the SCEV-expanded induction step to use. In cases; /// where the loop skeleton is more complicated (i.e., epilogue vectorization); /// and the resume values can come from an additional bypass block, the \p; /// AdditionalBypass pair provides information about the bypass block and the; /// end value on the edge from bypass to this loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:44,variab,variable,44,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,/// Create a new runtime global variable with the specified type and name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:32,variab,variable,32,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variable']
Modifiability,/// Create a pass configuration object to be used by addPassToEmitX methods; /// for generating a pipeline of CodeGen passes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:18,config,configuration,18,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,1,['config'],['configuration']
Modifiability,/// Create a pre-configured \c CompilerInstance for incremental processing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h:17,config,configured,17,interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Interpreter/Interpreter.h,1,['config'],['configured']
Modifiability,/// Create a reference to a variable at the given location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h:28,variab,variable,28,interpreter/llvm-project/clang/tools/libclang/CXCursor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CXCursor.h,1,['variab'],['variable']
Modifiability,/// Create a runtime call for __tgt_interop_destroy; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_destroy call,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:140,variab,variable,140,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,3,['variab'],"['variable', 'variables']"
Modifiability,/// Create a runtime call for __tgt_interop_init; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param InteropType type of interop operation; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_init call,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:137,variab,variable,137,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,3,['variab'],"['variable', 'variables']"
Modifiability,/// Create a runtime call for __tgt_interop_use; ///; /// \param Loc The insert and source location description.; /// \param InteropVar variable to be allocated; /// \param Device devide to which offloading will occur; /// \param NumDependences number of dependence variables; /// \param DependenceAddress pointer to dependence variables; /// \param HaveNowaitClause does nowait clause exist; ///; /// \returns CallInst to the __tgt_interop_use call,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:136,variab,variable,136,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,3,['variab'],"['variable', 'variables']"
Modifiability,/// Create a sequence of instructions to expand the value in \p SrcReg (of type; /// \p SrcTy) to the types in \p DstRegs (of type \p PartTy). \p ExtendOp should; /// contain the type of scalar value extension if necessary.; ///; /// This is used for outgoing values (vregs to physregs),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp:146,Extend,ExtendOp,146,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,1,['Extend'],['ExtendOp']
Modifiability,/// Create a symbol reference to describe the given TLS variable when; /// emitting the address in debug info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:56,variab,variable,56,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,1,['variab'],['variable']
Modifiability,/// Create a variable template node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:13,variab,variable,13,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['variab'],['variable']
Modifiability,"/// Create an ASTUnit from a source file, via a CompilerInvocation; /// object, by invoking the optionally provided ASTFrontendAction.; ///; /// \param CI - The compiler invocation to use; it must have exactly one input; /// source file. The ASTUnit takes ownership of the CompilerInvocation object.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param Action - The ASTFrontendAction to invoke. Its ownership is not; /// transferred.; ///; /// \param Unit - optionally an already created ASTUnit. Its ownership is not; /// transferred.; ///; /// \param Persistent - if true the returned ASTUnit will be complete.; /// false means the caller is only interested in getting info through the; /// provided \see Action.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; /// This will only receive an ASTUnit if a new one was created. If an already; /// created ASTUnit was passed in \p Unit then the caller can check that.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:518,extend,extend,518,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,1,['extend'],['extend']
Modifiability,"/// Create an LTO object. A default constructed LTO object has a reasonable; /// production configuration, but you can customize it by passing arguments to; /// this constructor.; /// FIXME: We do currently require the DiagHandler field to be set in Conf.; /// Until that is fixed, a Config argument is required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:92,config,configuration,92,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,2,"['Config', 'config']","['Config', 'configuration']"
Modifiability,/// Create an alloca instruction in the entry block of; /// the parent function. This is used for mutable variables etc.; /// @param function parent instance; /// @param varName stack variable name; /// @param type stack variable type; /// @param initWith optional constant initialization value; /// @returns AllocaInst instance,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:106,variab,variables,106,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,"/// Create an empty IfStmt optionally with storage for an else statement,; /// condition variable and init expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:89,variab,variable,89,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,/// Create an empty switch statement optionally with storage for; /// an init expression and a condition variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:105,variab,variable,105,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,/// Create an empty variable template node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:20,variab,variable,20,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['variab'],['variable']
Modifiability,/// Create an empty while statement optionally with storage for; /// a condition variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:81,variab,variable,81,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,"/// Create an expression for a variable that does not have an address, but; /// does have a constant value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:31,variab,variable,31,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,1,['variab'],['variable']
Modifiability,"/// Create and add a global variable record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:28,variab,variable,28,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,1,['variab'],['variable']
Modifiability,"/// Create and add an Objective-C instance variable record into the API set.; ///; /// Note: the caller is responsible for keeping the StringRef \p Name and; /// \p USR alive. APISet::copyString provides a way to copy strings into; /// APISet itself, and APISet::recordUSR(const Decl *D) is a helper method; /// to generate the USR for \c D and keep it alive in APISet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:43,variab,variable,43,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,1,['variab'],['variable']
Modifiability,/// Create and insert the idiom we use to indicate a block is unreachable; /// without having to rewrite the CFG from within InstCombine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h:97,rewrite,rewrite,97,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineInternal.h,1,['rewrite'],['rewrite']
Modifiability,/// Create and return a pass that writes the module to a global variable in the; /// module for later emission in the MCStreamer. Note that this pass is designed; /// for use with the legacy pass manager because it is run in CodeGen only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/DXILWriter/DXILWriterPass.h:64,variab,variable,64,interpreter/llvm-project/llvm/lib/Target/DirectX/DXILWriter/DXILWriterPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/DXILWriter/DXILWriterPass.h,1,['variab'],['variable']
Modifiability,/// Create and return the global variable for function name used in PGO; /// instrumentation. \c FuncName is the IRPGO function name (returned by; /// \c getIRPGOFuncName) for LLVM IR instrumentation and PGO function name; /// (returned by \c getPGOFuncName) for front-end instrumentation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:33,variab,variable,33,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,2,['variab'],['variable']
Modifiability,/// Create common block entry for a Fortran common block.; /// \param Scope Scope of this common block.; /// \param decl Global variable declaration.; /// \param Name The name of this common block.; /// \param File The file this common block is defined.; /// \param LineNo Line number.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:128,variab,variable,128,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,1,['variab'],['variable']
Modifiability,"/// Create debugging information entry for Objective-C; /// instance variable.; /// \param Name Member name.; /// \param File File where this member is defined.; /// \param LineNo Line number.; /// \param SizeInBits Member size.; /// \param AlignInBits Member alignment.; /// \param OffsetInBits Member offset.; /// \param Flags Flags to encode member attribute, e.g. private; /// \param Ty Parent type.; /// \param PropertyNode Property associated with this ivar.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:69,variab,variable,69,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,1,['variab'],['variable']
Modifiability,"/// Create debugging information entry for a typedef.; /// \param Ty Original type.; /// \param Name Typedef name.; /// \param File File where this type is defined.; /// \param LineNo Line number.; /// \param Context The surrounding context for the typedef.; /// \param AlignInBits Alignment. (optional); /// \param Flags Flags to describe inheritance attribute, e.g. private; /// \param Annotations Annotations. (optional)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:340,inherit,inheritance,340,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,1,['inherit'],['inheritance']
Modifiability,"/// Create debugging information entry to establish; /// inheritance relationship between two types.; /// \param Ty Original type.; /// \param BaseTy Base type. Ty is inherits from base.; /// \param BaseOffset Base offset.; /// \param VBPtrOffset Virtual base pointer offset.; /// \param Flags Flags to describe inheritance attribute,; /// e.g. private",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:57,inherit,inheritance,57,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,3,['inherit'],"['inheritance', 'inherits']"
Modifiability,"/// Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:86,config,configuration,86,roofit/roofitcore/inc/RooAbsReal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h,1,['config'],['configuration']
Modifiability,"/// Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while; /// using specified configuration for any numeric integration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:148,config,configuration,148,roofit/roofitcore/inc/RooAbsReal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h,1,['config'],['configuration']
Modifiability,"/// Create new TransferDebugPair and insert it in \p Transfers. The VarLoc; /// with \p OldVarID should be deleted form \p OpenRanges and replaced with; /// new VarLoc. If \p NewReg is different than default zero value then the; /// new location will be register location created by the copy like instruction,; /// otherwise it is variable's location on the stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:331,variab,variable,331,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// Create new phi nodes for the induction variables to resume iteration count; /// in the scalar epilogue, from where the vectorized loop left off.; /// In cases where the loop skeleton is more complicated (eg. epilogue; /// vectorization) and the resume values can come from an additional bypass; /// block, the \p AdditionalBypass pair provides information about the bypass; /// block and the end value on the edge from bypass to this loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:43,variab,variables,43,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variables']
Modifiability,/// Create the global variable holding the offload mappings information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:22,variab,variable,22,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,/// Create the global variable holding the offload names information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:22,variab,variable,22,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,/// Create the initialization entity for a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:43,variab,variable,43,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,2,['variab'],['variable']
Modifiability,"/// Create the plugin to submit DebugObjects for JITLink artifacts. For all; /// options the recommended setting is true.; ///; /// RequireDebugSections:; /// Submit debug objects to the executor only if they contain actual debug; /// info. Turning this off may allow minimal debugging based on raw symbol; /// names. Note that this may cause significant memory and transport; /// overhead for objects built with a release configuration.; ///; /// AutoRegisterCode:; /// Notify the debugger for each new debug object. This is a good default; /// mode, but it may cause significant overhead when adding many modules in; /// sequence. When turning this off, the user has to issue the call to; /// __jit_debug_register_code() on the executor side manually.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h:15,plugin,plugin,15,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h,2,"['config', 'plugin']","['configuration', 'plugin']"
Modifiability,"/// Create up to 4 fix-its for explicit reference and value capture of \p Var or; /// default capture. Fixes may be omitted if they aren't allowed by the; /// standard, for example we can't emit a default copy capture fix-it if we; /// already explicitly copy capture capture another variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:284,variab,variable,284,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,/// CreateEntryBlockAlloca - Create an alloca instruction in the entry block of; /// the function. This is used for mutable variables etc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:124,variab,variables,124,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,13,['variab'],['variables']
Modifiability,"/// CreateGlobalString - Make a new global variable with an initializer that; /// has array of i8 type filled in with the nul terminated string value; /// specified. If Name is specified, it is the name of the global variable; /// created.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp:43,variab,variable,43,interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/IRBuilder.cpp,2,['variab'],['variable']
Modifiability,/// CreateHTMLPrinter - Create an AST consumer which rewrites source code to; /// HTML with syntax highlighting suitable for viewing in a web-browser.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h:53,rewrite,rewrites,53,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/ASTConsumers.h,1,['rewrite'],['rewrites']
Modifiability,"/// CreateMetadataVar - Create a global variable with internal; /// linkage for use by the Objective-C runtime.; ///; /// This is a convenience wrapper which not only creates the; /// variable, but also sets the section and alignment and adds the; /// global to the ""llvm.used"" list.; ///; /// \param Name - The variable name.; /// \param Init - The variable initializer; this is also used to; /// define the type of the variable.; /// \param Section - The section the variable should go into, or empty.; /// \param Align - The alignment for the variable, or 0.; /// \param AddToUsed - Whether the variable should be added to; /// ""llvm.used"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:40,variab,variable,40,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,8,['variab'],['variable']
Modifiability,/// CreateRuntimeVariable - Create a new runtime global variable with the; /// specified type and name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:56,variab,variable,56,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variable']
Modifiability,"/// CreateTempAlloca - This creates an alloca and inserts it into the entry; /// block if \p ArraySize is nullptr, otherwise inserts it at the current; /// insertion point of the builder. The caller is responsible for setting an; /// appropriate alignment on; /// the alloca.; ///; /// \p ArraySize is the number of array elements to be allocated if it; /// is not nullptr.; ///; /// LangAS::Default is the address space of pointers to local variables and; /// temporaries, as exposed in the source language. In certain; /// configurations, this is not the same as the alloca address space, and a; /// cast is needed to lift the pointer from the alloca AS into; /// LangAS::Default. This can happen when the target uses a restricted; /// address space for the stack but the source language requires; /// LangAS::Default to be a generic address space. The latter condition is; /// common for most programming languages; OpenCL is an exception in that; /// LangAS::Default is the private address space, which naturally maps; /// to the stack.; ///; /// Because the address of a temporary is often exposed to the program in; /// various ways, this function will perform the cast. The original alloca; /// instruction is returned through \p Alloca if it is not nullptr.; ///; /// The cast is not performaed in CreateTempAllocaWithoutCast. This is; /// more efficient if the caller knows that the address will not be exposed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:442,variab,variables,442,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,2,"['config', 'variab']","['configurations', 'variables']"
Modifiability,"/// Creates a SemaDiagnosticBuilder that emits the diagnostic if the current; /// context is ""used as device code"".; ///; /// - If CurContext is a __host__ function, does not emit any diagnostics; /// unless \p EmitOnBothSides is true.; /// - If CurContext is a __device__ or __global__ function, emits the; /// diagnostics immediately.; /// - If CurContext is a __host__ __device__ function and we are compiling for; /// the device, creates a diagnostic which is emitted if and when we realize; /// that the function will be codegen'ed.; ///; /// Example usage:; ///; /// // Variable-length arrays are not allowed in CUDA device code.; /// if (CUDADiagIfDeviceCode(Loc, diag::err_cuda_vla) << CurrentCUDATarget()); /// return ExprError();; /// // Otherwise, continue parsing as normal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:576,Variab,Variable-length,576,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Variab'],['Variable-length']
Modifiability,"/// Creates a SemaDiagnosticBuilder that emits the diagnostic if the current; /// context is ""used as device code"".; ///; /// - If CurContext is a `declare target` function or it is known that the; /// function is emitted for the device, emits the diagnostics immediately.; /// - If CurContext is a non-`declare target` function and we are compiling; /// for the device, creates a diagnostic which is emitted if and when we; /// realize that the function will be codegen'ed.; ///; /// Example usage:; ///; /// // Variable-length arrays are not allowed in NVPTX device code.; /// if (diagIfOpenMPDeviceCode(Loc, diag::err_vla_unsupported)); /// return ExprError();; /// // Otherwise, continue parsing as normal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:513,Variab,Variable-length,513,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Variab'],['Variable-length']
Modifiability,"/// Creates a SemaDiagnosticBuilder that emits the diagnostic if the current; /// context is ""used as host code"".; ///; /// - If CurContext is a `declare target` function or it is known that the; /// function is emitted for the host, emits the diagnostics immediately.; /// - If CurContext is a non-host function, just ignore it.; ///; /// Example usage:; ///; /// // Variable-length arrays are not allowed in NVPTX device code.; /// if (diagIfOpenMPHostode(Loc, diag::err_vla_unsupported)); /// return ExprError();; /// // Otherwise, continue parsing as normal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:368,Variab,Variable-length,368,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Variab'],['Variable-length']
Modifiability,/// Creates a fully specified clause.; ///; /// \param C AST context.; /// \param InteropVar The interop variable.; /// \param InteropInfo The interop-type and prefer_type list.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param VarLoc Location of the interop variable.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:105,variab,variable,105,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variable']
Modifiability,"/// Creates a function that sets up state on the host side for CUDA objects that; /// have a presence on both the host and device sides. Specifically, registers; /// the host side of kernel functions and device global variables with the CUDA; /// runtime.; /// \code; /// void __cuda_register_globals(void** GpuBinaryHandle) {; /// __cudaRegisterFunction(GpuBinaryHandle,Kernel0,...);; /// ...; /// __cudaRegisterFunction(GpuBinaryHandle,KernelM,...);; /// __cudaRegisterVar(GpuBinaryHandle, GlobalVar0, ...);; /// ...; /// __cudaRegisterVar(GpuBinaryHandle, GlobalVarN, ...);; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:218,variab,variables,218,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['variab'],['variables']
Modifiability,/// Creates a global from a lifetime-extended temporary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h:37,extend,extended,37,interpreter/llvm-project/clang/lib/AST/Interp/Program.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Program.h,1,['extend'],['extended']
Modifiability,"/// Creates a new declaration scope for module names, allowing; /// previously defined modules to shadow definitions from the new scope.; ///; /// \note Module names from earlier scopes will shadow names from the new; /// scope, which is the opposite of how shadowing works for variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h:278,variab,variables,278,interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h,1,['variab'],['variables']
Modifiability,"/// Creates a new refactoring action rule that constructs and invokes the; /// \c RuleType rule when all of the requirements are satisfied.; ///; /// This function takes in a list of values whose type derives from; /// \c RefactoringActionRuleRequirement. These values describe the initiation; /// requirements that have to be satisfied by the refactoring engine before; /// the provided action rule can be constructed and invoked. The engine; /// verifies that the requirements are satisfied by evaluating them (using the; /// 'evaluate' member function) and checking that the results don't contain; /// any errors. Once all requirements are satisfied, the provided refactoring; /// rule is constructed by passing in the values returned by the requirements'; /// evaluate functions as arguments to the constructor. The rule is then invoked; /// immediately after construction.; ///; /// The separation of requirements, their evaluation and the invocation of the; /// refactoring action rule allows the refactoring clients to:; /// - Disable refactoring action rules whose requirements are not supported.; /// - Gather the set of options and define a command-line / visual interface; /// that allows users to input these options without ever invoking the; /// action.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRules.h:18,refactor,refactoring,18,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRules.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRules.h,7,"['Refactor', 'refactor']","['RefactoringActionRuleRequirement', 'refactoring']"
Modifiability,/// Creates a pair of globals used to iterate the array of offloading entries by; /// accessing the section variables provided by the linker.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h:108,variab,variables,108,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,1,['variab'],['variables']
Modifiability,/// Creates an VariablePattern object with information about the given; /// StmtSequence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:15,Variab,VariablePattern,15,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,1,['Variab'],['VariablePattern']
Modifiability,"/// Creates an atomic change around \p KeyPosition with the key being a; /// concatenation of the file name and the offset of \p KeyPosition.; /// \p KeyPosition should be the location of the key syntactical element that; /// is being changed, e.g. the call to a refactored method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h:263,refactor,refactored,263,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/AtomicChange.h,1,['refactor'],['refactored']
Modifiability,/// Creates an empty clause with \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:38,variab,variables,38,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,8,['variab'],['variables']
Modifiability,/// Creates an empty clause with \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:38,variab,variables,38,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param IsExtended true if extended clause for 'depobj' directive must be; /// created.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,variab,variables,52,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,"['extend', 'variab']","['extended', 'variables']"
Modifiability,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,variab,variables,52,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,18,['variab'],['variables']
Modifiability,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.; /// \param Modifier Reduction modifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,variab,variables,52,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Creates an empty clause with the place for \a NumVars variables.; ///; /// \param C AST context.; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:58,variab,variables,58,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,4,['variab'],['variables']
Modifiability,/// Creates an empty clause with the place for \a NumVars variables.; ///; /// \param C AST context.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:58,variab,variables,58,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,6,['variab'],['variables']
Modifiability,"/// Creates an object for the variable declaration `D`. If `D` has an; /// initializer and this initializer is associated with a value, initializes; /// the object with this value. Otherwise, initializes the object with a; /// value created using `createValue()`. Uses the storage location returned by; /// `DataflowAnalysisContext::getStableStorageLocation(D)`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h:30,variab,variable,30,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,1,['variab'],['variable']
Modifiability,"/// Creates an object for the variable declaration `D`. If `InitExpr` is; /// non-null and has a value associated with it, initializes the object with; /// this value. Otherwise, initializes the object with a value created using; /// `createValue()`. Uses the storage location returned by; /// `DataflowAnalysisContext::getStableStorageLocation(D)`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h:30,variab,variable,30,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,1,['variab'],['variable']
Modifiability,/// Creates and initializes a variable from the given decl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:30,variab,variable,30,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,1,['variab'],['variable']
Modifiability,"/// Creates and manages DebugObjects for JITLink artifacts.; ///; /// DebugObjects are created when linking for a MaterializationResponsibility; /// starts. They are pending as long as materialization is in progress.; ///; /// There can only be one pending DebugObject per MaterializationResponsibility.; /// If materialization fails, pending DebugObjects are discarded.; ///; /// Once executable code for the MaterializationResponsibility is emitted, the; /// corresponding DebugObject is finalized to target memory and the provided; /// DebugObjectRegistrar is notified. Ownership of DebugObjects remains with the; /// plugin.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h:621,plugin,plugin,621,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/DebugObjectManagerPlugin.h,1,['plugin'],['plugin']
Modifiability,/// Creates artificial threadprivate variable with name \p Name and type \p; /// VarType.; /// \param VarType Type of the artificial threadprivate variable.; /// \param Name Name of the artificial threadprivate variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:37,variab,variable,37,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,6,['variab'],['variable']
Modifiability,"/// Creates binary descriptor for the given device images. Binary descriptor; /// is an object that is passed to the offloading runtime at program startup; /// and it describes all device images available in the executable or shared; /// library. It is defined as follows; ///; /// __attribute__((visibility(""hidden""))); /// extern __tgt_offload_entry *__start_omp_offloading_entries;; /// __attribute__((visibility(""hidden""))); /// extern __tgt_offload_entry *__stop_omp_offloading_entries;; ///; /// static const char Image0[] = { <Bufs.front() contents> };; /// ...; /// static const char ImageN[] = { <Bufs.back() contents> };; ///; /// static const __tgt_device_image Images[] = {; /// {; /// Image0, /*ImageStart*/; /// Image0 + sizeof(Image0), /*ImageEnd*/; /// __start_omp_offloading_entries, /*EntriesBegin*/; /// __stop_omp_offloading_entries /*EntriesEnd*/; /// },; /// ...; /// {; /// ImageN, /*ImageStart*/; /// ImageN + sizeof(ImageN), /*ImageEnd*/; /// __start_omp_offloading_entries, /*EntriesBegin*/; /// __stop_omp_offloading_entries /*EntriesEnd*/; /// }; /// };; ///; /// static const __tgt_bin_desc BinDesc = {; /// sizeof(Images) / sizeof(Images[0]), /*NumDeviceImages*/; /// Images, /*DeviceImages*/; /// __start_omp_offloading_entries, /*HostEntriesBegin*/; /// __stop_omp_offloading_entries /*HostEntriesEnd*/; /// };; ///; /// Global variable that represents BinDesc is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/Offloading/OffloadWrapper.cpp:1360,variab,variable,1360,interpreter/llvm-project/llvm/lib/Frontend/Offloading/OffloadWrapper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/Offloading/OffloadWrapper.cpp,1,['variab'],['variable']
Modifiability,/// Creates clause with a list of variables \a VL and a linear step; /// \a Step.; ///; /// \param C AST Context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param Modifier Modifier of 'linear' clause.; /// \param ModifierLoc Modifier location.; /// \param ColonLoc Location of ':'.; /// \param StepModifierLoc Location of 'step' modifier.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param PL List of private copies of original variables.; /// \param IL List of initial values for the variables.; /// \param Step Linear step.; /// \param CalcStep Calculation of the linear step.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,4,['variab'],['variables']
Modifiability,/// Creates clause with a list of variables \a VL and alignment \a A.; ///; /// \param C AST Context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param A Alignment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Vars The original expression used in the clause.; /// \param Declarations Declarations used in the clause.; /// \param ComponentLists Component lists used in the clause.; /// \param UDMapperRefs References to user-defined mappers associated with; /// expressions used in the clause.; /// \param IteratorModifier Iterator modifier.; /// \param MapModifiers Map-type-modifiers.; /// \param MapModifiersLoc Location of map-type-modifiers.; /// \param UDMQualifierLoc C++ nested name specifier for the associated; /// user-defined mapper.; /// \param MapperId The identifier of associated user-defined mapper.; /// \param Type Map type.; /// \param TypeIsImplicit Map type is inferred implicitly.; /// \param TypeLoc Location of the map type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param Allocator Allocator expression.; /// \param ColonLoc Location of ':' delimiter.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param Data Dependency type and source locations.; /// \param VL List of references to the variables.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the original variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,4,['variab'],['variables']
Modifiability,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the original variables.; /// \param PrivateVL List of references to private copies with initializers.; /// \param InitVL List of references to auto generated variables used for; /// initialization of a single array element. Used if firstprivate variable is; /// of array type.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,4,['variab'],"['variable', 'variables']"
Modifiability,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,6,['variab'],['variables']
Modifiability,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param PrivateVL List of references to private copies with initializers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for copyin clause. This list represents; /// sources.; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for copyin clause. This list represents; /// destinations.; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of propagation of master's thread values of; /// threadprivate variables to local instances of that variables in other; /// implicit threads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,4,['variab'],['variables']
Modifiability,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// sources.; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// destinations.; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of final assignment performed by the; /// copyprivate clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,"/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for lastprivate clause. This list represents; /// private variables (for arrays, single array element).; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for lastprivate clause. This list represents; /// original variables (for arrays, single array element).; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of final assignment performed by the; /// lastprivate clause.; /// \param LPKind Lastprivate kind, e.g. 'conditional'.; /// \param LPKindLoc Location of the lastprivate kind.; /// \param ColonLoc Location of the ':' symbol if lastprivate kind is used.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,4,['variab'],['variables']
Modifiability,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,3,['variab'],['variables']
Modifiability,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param TaskgroupDescriptors List of helper taskgroup descriptors for; /// corresponding items in parent taskgroup task_reduction clause.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,3,['variab'],['variables']
Modifiability,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ModifierLoc Modifier location.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param CopyOps List of copy operations for inscan reductions:; /// \code; /// TempExprs = LHSExprs;; /// \endcode; /// \param CopyArrayTemps Temp arrays for prefix sums.; /// \param CopyArrayElems Temp arrays for prefix sums.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,3,['variab'],['variables']
Modifiability,/// Creates clause with a list of variables \a Vars.; ///; /// \param C AST context.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Vars The original expression used in the clause.; /// \param Declarations Declarations used in the clause.; /// \param ComponentLists Component lists used in the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,3,['variab'],['variables']
Modifiability,/// Creates clause with a list of variables \a Vars.; ///; /// \param C AST context.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Vars The original expression used in the clause.; /// \param Declarations Declarations used in the clause.; /// \param ComponentLists Component lists used in the clause.; /// \param MotionModifiers Motion-modifiers.; /// \param MotionModifiersLoc Location of motion-modifiers.; /// \param UDMapperRefs References to user-defined mappers associated with; /// expressions used in the clause.; /// \param UDMQualifierLoc C++ nested name specifier for the associated; /// user-defined mapper.; /// \param MapperId The identifier of associated user-defined mapper.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Creates clause with a list of variables \a Vars.; ///; /// \param C AST context.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Vars The original expression used in the clause.; /// \param PrivateVars Expressions referring to private copies.; /// \param Inits Expressions referring to private copy initializers.; /// \param Declarations Declarations used in the clause.; /// \param ComponentLists Component lists used in the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,variab,variables,34,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,"/// Creates directive.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the directive kind.; /// \param EndLoc Ending Location of the directive.; /// \param Clauses List of clauses.; /// \param AssociatedStmt Statement, associated with the directive.; /// \param ReductionRef Reference to the task_reduction return variable.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:340,variab,variable,340,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,"/// Creates test code by generating and organizing these functions into the; /// test case. The test case consists of an outer function setup to invoke; /// an inner function within an environment having multiple catch and single; /// finally blocks. This inner function is also setup to invoke a throw; /// function within an evironment similar in nature to the outer function's; /// catch and finally blocks. Each of these two functions catch mutually; /// exclusive subsets (even or odd) of the type info types configured; /// for this this. All generated functions have a runtime argument which; /// holds a type info type to throw that each function takes and passes it; /// to the inner one if such a inner function exists. This type info type is; /// looked at by the generated throw function to see whether or not it should; /// throw a generated exception with the same type info type, or instead call; /// a supplied a function which in turn will throw a foreign exception.; /// @param module code for module instance; /// @param builder builder instance; /// @param fpm a function pass manager holding optional IR to IR; /// transformations; /// @param nativeThrowFunctName name of external function which will throw; /// a foreign exception; /// @returns outermost generated test function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:514,config,configured,514,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,1,['config'],['configured']
Modifiability,/// Creates the refactoring options used by all the rules in a single; /// refactoring action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:16,refactor,refactoring,16,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,2,['refactor'],['refactoring']
Modifiability,/// CurScope - Innermost of the current nested scopes for 'defvar' variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:67,variab,variables,67,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,1,['variab'],['variables']
Modifiability,/// Current target configuration. Controls how the pass handles errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:19,config,configuration,19,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,2,['config'],['configuration']
Modifiability,"/// Custom traits to do nothing on deletion.; ///; /// Specialize ilist_alloc_traits to inherit from this to disable the; /// non-intrusive deletion in iplist (which implies ownership).; ///; /// If you want purely intrusive semantics with no callbacks, consider using \a; /// simple_ilist instead.; ///; /// \code; /// template <>; /// struct ilist_alloc_traits<MyType> : ilist_noalloc_traits<MyType> {};; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h:88,inherit,inherit,88,interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist.h,1,['inherit'],['inherit']
Modifiability,"/// DBG_VALUE pointer and flag. The flag is true if this DBG_VALUE is; /// post-dominated by another DBG_VALUE of the same variable location.; /// This is necessary to detect sequences such as:; /// %0 = someinst; /// DBG_VALUE %0, !123, !DIExpression(); /// %1 = anotherinst; /// DBG_VALUE %1, !123, !DIExpression(); /// Where if %0 were to sink, the DBG_VAUE should not sink with it, as that; /// would re-order assignments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp:123,variab,variable,123,interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,1,['variab'],['variable']
Modifiability,"/// DOTGraphTraits - Template class that can be specialized to customize how; /// graphs are converted to 'dot' graphs. When specializing, you may inherit; /// from DefaultDOTGraphTraits if you don't need to override everything.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DOTGraphTraits.h:147,inherit,inherit,147,interpreter/llvm-project/llvm/include/llvm/Support/DOTGraphTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DOTGraphTraits.h,1,['inherit'],['inherit']
Modifiability,"/// DWARF expression.; ///; /// This is (almost) a DWARF expression that modifies the location of a; /// variable, or the location of a single piece of a variable, or (when using; /// DW_OP_stack_value) is the constant variable value.; ///; /// TODO: Co-allocate the expression elements.; /// TODO: Separate from MDNode, or otherwise drop Distinct and Temporary; /// storage types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:105,variab,variable,105,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,3,['variab'],['variable']
Modifiability,"/// DWARFContextState; /// This structure contains all member variables for DWARFContext that need; /// to be protected in multi-threaded environments. Threading support can be; /// enabled by setting the ThreadSafe to true when constructing a; /// DWARFContext to allow DWARRContext to be able to be used in a; /// multi-threaded environment, or not enabled to allow for maximum; /// performance in single threaded environments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:62,variab,variables,62,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,1,['variab'],['variables']
Modifiability,/// Data structure describing the variable locations in a function. Used as the; /// result of the AssignmentTrackingAnalysis pass. Essentially read-only; /// outside of AssignmentTrackingAnalysis where it is built.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h:34,variab,variable,34,interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,1,['variab'],['variable']
Modifiability,"/// Data structure to hold cached (LLVM-IR) information.; ///; /// All attributes are given an InformationCache object at creation time to; /// avoid inspection of the IR by all of them individually. This default; /// InformationCache will hold information required by 'default' attributes,; /// thus the ones deduced when Attributor::identifyDefaultAbstractAttributes(..); /// is called.; ///; /// If custom abstract attributes, registered manually through; /// Attributor::registerAA(...), need more information, especially if it is not; /// reusable, it is advised to inherit from the InformationCache and cast the; /// instance down in the abstract attributes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:571,inherit,inherit,571,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['inherit'],['inherit']
Modifiability,/// Data that is common to all of the declarations of a given; /// variable template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:67,variab,variable,67,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['variab'],['variable']
Modifiability,/// Data used for processing a list of variables in OpenMP clauses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:39,variab,variables,39,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variables']
Modifiability,"/// DataStreamBasicReader provides convenience implementations for many; /// BasicReader methods based on the assumption that the; /// ultimate reader implementation is based on a variable-length stream; /// of unstructured data (like Clang's module files). It is designed; /// to pair with DataStreamBasicWriter.; ///; /// This class can also act as a PropertyReader, implementing find(""...""); /// by simply forwarding to itself.; ///; /// Unimplemented methods:; /// readBool; /// readUInt32; /// readUInt64; /// readIdentifier; /// readSelector; /// readSourceLocation; /// readQualType; /// readStmtRef; /// readDeclRef",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/AbstractBasicReader.h:180,variab,variable-length,180,interpreter/llvm-project/clang/include/clang/AST/AbstractBasicReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/AbstractBasicReader.h,1,['variab'],['variable-length']
Modifiability,"/// DataStreamBasicWriter provides convenience implementations for many; /// BasicWriter methods based on the assumption that the; /// ultimate writer implementation is based on a variable-length stream; /// of unstructured data (like Clang's module files). It is designed; /// to pair with DataStreamBasicReader.; ///; /// This class can also act as a PropertyWriter, implementing find(""...""); /// by simply forwarding to itself.; ///; /// Unimplemented methods:; /// writeBool; /// writeUInt32; /// writeUInt64; /// writeIdentifier; /// writeSelector; /// writeSourceLocation; /// writeQualType; /// writeStmtRef; /// writeDeclRef",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/AbstractBasicWriter.h:180,variab,variable-length,180,interpreter/llvm-project/clang/include/clang/AST/AbstractBasicWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/AbstractBasicWriter.h,1,['variab'],['variable-length']
Modifiability,/// DbgAssignIntrinsics linked to the alloca with at most one per variable; /// fragment. (i.e. not be a comprehensive set if there are multiple; /// dbg.assigns for one variable fragment).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp:66,variab,variable,66,interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,2,['variab'],['variable']
Modifiability,"/// Deals with Dwarf actions matching our type infos; /// (OurExceptionType_t instances). Returns whether or not a dwarf emitted; /// action matches the supplied exception type. If such a match succeeds,; /// the resultAction argument will be set with > 0 index value. Only; /// corresponding llvm.eh.selector type info arguments, cleanup arguments; /// are supported. Filters are not supported.; /// See Variable Length Data in:; /// @link http://dwarfstd.org/Dwarf3.pdf @unlink; /// Also see @link http://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html @unlink; /// @param resultAction reference variable which will be set with result; /// @param classInfo our array of type info pointers (to globals); /// @param actionEntry index into above type info array or 0 (clean up).; /// We do not support filters.; /// @param exceptionClass exception class (_Unwind_Exception::exception_class); /// of thrown exception.; /// @param exceptionObject thrown _Unwind_Exception instance.; /// @returns whether or not a type info was found. False is returned if only; /// a cleanup was found",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:405,Variab,Variable,405,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,"/// Debug value substitutions: a collection of DebugSubstitution objects,; /// recording changes in where a value is defined. For example, when one; /// instruction is substituted for another. Keeping a record allows recovery; /// of variable locations after compilation finishes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:234,variab,variable,234,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['variab'],['variable']
Modifiability,"/// Debug variable location tracking -- for each VReg, maintain an; /// ordered-by-slot-index set of DBG_VALUEs, to help quick; /// identification of whether coalescing may change location validity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['variab'],['variable']
Modifiability,/// Decide whether to extend the lifetime of the receiver of a; /// returns-inner-pointer message.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:22,extend,extend,22,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['extend'],['extend']
Modifiability,"/// Decide whether we should use bzero plus some stores to initialize a local; /// variable instead of using a memcpy from a constant global. It is beneficial; /// to use bzero if the global is all zeros, or mostly zeros and large.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:83,variab,variable,83,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,"/// Decide whether we should use memset to initialize a local variable instead; /// of using a memcpy from a constant global. Assumes we've already decided to; /// not user bzero.; /// FIXME We could be more clever, as we are for bzero above, and generate; /// memset followed by stores. It's unclear that's worth the effort.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:62,variab,variable,62,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,"/// Decl - This represents one declaration (or definition), e.g. a variable,; /// typedef, function, struct, etc.; ///; /// Note: There are objects tacked on before the *beginning* of Decl; /// (and its subclasses) in its Decl::operator new(). Proper alignment; /// of all subclasses (not requiring more than the alignment of Decl) is; /// asserted in DeclBase.cpp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:67,variab,variable,67,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['variab'],['variable']
Modifiability,"/// DeclStmt - Adaptor class for mixing declarations with statements and; /// expressions. For example, CompoundStmt mixes statements, expressions; /// and declarations (variables, types). Another example is ForStmt, where; /// the first statement can be an expression or a declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:15,Adapt,Adaptor,15,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,2,"['Adapt', 'variab']","['Adaptor', 'variables']"
Modifiability,/// Declaration of a variable template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:21,variab,variable,21,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['variab'],['variable']
Modifiability,"/// Declarations encountered that might be external; /// definitions.; ///; /// We keep track of external definitions and other 'interesting' declarations; /// as we are emitting declarations to the AST file. The AST file contains a; /// separate record for these declarations, which are provided to the AST; /// consumer by the AST reader. This is behavior is required to properly cope with,; /// e.g., tentative variable definitions that occur within; /// headers. The declarations themselves are stored as declaration; /// IDs, since they will be written out to an EAGERLY_DESERIALIZED_DECLS; /// record.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h:414,variab,variable,414,interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTWriter.h,1,['variab'],['variable']
Modifiability,/// Declare generalized virtual functions which need to be defined; /// by all specializations of OpenMPGPURuntime Targets like AMDGCN; /// and NVPTX.; /// Check if the variable length declaration is delayed:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:169,variab,variable,169,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['variab'],['variable']
Modifiability,/// Decode a VPERMIL2PD/VPERMIL2PS variable mask from a raw array of constants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.h:35,variab,variable,35,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.h,1,['variab'],['variable']
Modifiability,/// Decode a VPERMILP variable mask from an IR-level vector constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ShuffleDecodeConstantPool.h:22,variab,variable,22,interpreter/llvm-project/llvm/lib/Target/X86/X86ShuffleDecodeConstantPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ShuffleDecodeConstantPool.h,1,['variab'],['variable']
Modifiability,/// Decode a VPERMILP2 variable mask from an IR-level vector constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ShuffleDecodeConstantPool.h:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Target/X86/X86ShuffleDecodeConstantPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ShuffleDecodeConstantPool.h,1,['variab'],['variable']
Modifiability,/// Decode a VPERMILPD/VPERMILPS variable mask from a raw array of constants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.h:33,variab,variable,33,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.h,1,['variab'],['variable']
Modifiability,/// Decode a VPPERM variable mask from an IR-level vector constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ShuffleDecodeConstantPool.h:20,variab,variable,20,interpreter/llvm-project/llvm/lib/Target/X86/X86ShuffleDecodeConstantPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ShuffleDecodeConstantPool.h,1,['variab'],['variable']
Modifiability,"/// Decrements the LWP programmed value sample event counter. If the result is; /// negative, inserts an event record into the LWP event ring buffer in memory; /// and advances the ring buffer pointer.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> LWPVAL </c> instruction.; ///; /// \param DATA2; /// A 32-bit value is zero-extended and inserted into the 64-bit Data2 field.; /// \param DATA1; /// A 32-bit value is inserted into the 32-bit Data1 field.; /// \param FLAGS; /// A 32-bit immediate value is inserted into the 32-bit Flags field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/lwpintrin.h:362,extend,extended,362,interpreter/llvm-project/clang/lib/Headers/lwpintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/lwpintrin.h,1,['extend'],['extended']
Modifiability,"/// Deduce the type for an auto type-specifier (C++11 [dcl.spec.auto]p6); ///; /// Note that this is done even if the initializer is dependent. (This is; /// necessary to support partial ordering of templates using 'auto'.); /// A dependent type will be produced when deducing from a dependent type.; ///; /// \param Type the type pattern using the auto type-specifier.; /// \param Init the initializer for the variable whose type is to be deduced.; /// \param Result if type deduction was successful, this will be set to the; /// deduced type.; /// \param Info the argument will be updated to provide additional information; /// about template argument deduction.; /// \param DependentDeduction Set if we should permit deduction in; /// dependent cases. This is necessary for template partial ordering with; /// 'auto' template parameters. The template parameter depth to be used; /// should be specified in the 'Info' parameter.; /// \param IgnoreConstraints Set if we should not fail if the deduced type does; /// not satisfy the type-constraint in the auto type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:411,variab,variable,411,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['variab'],['variable']
Modifiability,"/// Default options when address sanitizer starts up in ROOT executables.; /// This is relevant when ROOT's build option `asan` is on.; /// These can be overridden / augmented by the ASAN_OPTIONS environment variable.; /// Using ASAN_OPTIONS=help=1 and starting an instrumented ROOT exectuable, available options will be printed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/SanitizerSetup.cxx:208,variab,variable,208,core/sanitizer/SanitizerSetup.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/SanitizerSetup.cxx,1,['variab'],['variable']
Modifiability,"/// Default options when leak sanitizer starts up in ROOT exectuables.; /// This is relevant when ROOT's build options `asan` is on.; /// These can be overridden / augmented by the LSAN_OPTIONS environment variable.; /// Using LSAN_OPTIONS=help=1 and starting an instrumented ROOT exectuable, available options will be printed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/SanitizerSetup.cxx:206,variab,variable,206,core/sanitizer/SanitizerSetup.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/sanitizer/SanitizerSetup.cxx,1,['variab'],['variable']
Modifiability,"/// Default propagation of shadow and/or origin.; ///; /// This class implements the general case of shadow propagation, used in all; /// cases where we don't know and/or don't care about what the operation; /// actually does. It converts all input shadow values to a common type; /// (extending or truncating as necessary), and bitwise OR's them.; ///; /// This is much cheaper than inserting checks (i.e. requiring inputs to be; /// fully initialized), and less prone to false positives.; ///; /// This class also implements the general case of origin propagation. For a; /// Nary operation, result origin is set to the origin of an argument that is; /// not entirely initialized. If there is more than one such arguments, the; /// rightmost of them is picked. It does not matter which one is picked if all; /// arguments are initialized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:286,extend,extending,286,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['extend'],['extending']
Modifiability,/// DefaultDOTGraphTraits - This class provides the default implementations of; /// all of the DOTGraphTraits methods. If a specialization does not need to; /// override all methods here it should inherit so that it can get the default; /// implementations.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DOTGraphTraits.h:197,inherit,inherit,197,interpreter/llvm-project/llvm/include/llvm/Support/DOTGraphTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DOTGraphTraits.h,1,['inherit'],['inherit']
Modifiability,"/// Define how a function affects the system variable 'errno'.; /// This works together with the \c ErrnoModeling and \c ErrnoChecker classes.; /// Currently 3 use cases exist: success, failure, irrelevant.; /// In the future the failure case can be customized to set \c errno to a; /// more specific constraint (for example > 0), or new case can be added; /// for functions which require check of \c errno in both success and failure; /// case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:45,variab,variable,45,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['variab'],['variable']
Modifiability,/// Define the specified inheriting constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:25,inherit,inheriting,25,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['inherit'],['inheriting']
Modifiability,"/// Defines hints for detecting supported languages code blocks in raw; /// strings.; ///; /// A raw string with a matching delimiter or a matching enclosing function; /// name will be reformatted assuming the specified language based on the; /// style for that language defined in the .clang-format file. If no style has; /// been defined in the .clang-format file for the specific language, a; /// predefined style given by 'BasedOnStyle' is used. If 'BasedOnStyle' is not; /// found, the formatting is based on llvm style. A matching delimiter takes; /// precedence over a matching enclosing function name for determining the; /// language of the raw string contents.; ///; /// If a canonical delimiter is specified, occurrences of other delimiters for; /// the same language will be updated to the canonical if possible.; ///; /// There should be at most one specification per language and each delimiter; /// and enclosing function should not occur in multiple specifications.; ///; /// To configure this in the .clang-format file, use:; /// \code{.yaml}; /// RawStringFormats:; /// - Language: TextProto; /// Delimiters:; /// - 'pb'; /// - 'proto'; /// EnclosingFunctions:; /// - 'PARSE_TEXT_PROTO'; /// BasedOnStyle: google; /// - Language: Cpp; /// Delimiters:; /// - 'cc'; /// - 'cpp'; /// BasedOnStyle: llvm; /// CanonicalDelimiter: 'cc'; /// \endcode; /// \version 6",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:995,config,configure,995,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['config'],['configure']
Modifiability,"/// Defines string and numeric variables from definitions given on the; /// command line, passed as a vector of [#]VAR=VAL strings in; /// \p CmdlineDefines. \returns an error list containing diagnostics against; /// \p SM for all definition parsing failures, if any, or Success otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:31,variab,variables,31,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variables']
Modifiability,/// Defines the different supported kind of a diagnostic.; /// This enum should be extended with a new ID for each added concrete subclass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:83,extend,extended,83,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,1,['extend'],['extended']
Modifiability,/// Defines when to put an empty line after access modifiers.; /// ``EmptyLineBeforeAccessModifier`` configuration handles the number of; /// empty lines between two access modifiers.; /// \version 13,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:101,config,configuration,101,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['config'],['configuration']
Modifiability,"/// Delegate resolving to a sub-resolver, but shadow some variable names.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:58,variab,variable,58,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['variab'],['variable']
Modifiability,/// Dependent variable map for CodeGenDAGPattern variant generation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,1,['variab'],['variable']
Modifiability,/// Dereferencing a variable (e.g. p in *p = 5;),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:20,variab,variable,20,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['variab'],['variable']
Modifiability,"/// Derived is the presumed address of an object of type T after a; /// cast. If T is a polymorphic class type, emit a check that the virtual; /// table for Derived belongs to a class derived from T.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:88,polymorphi,polymorphic,88,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['polymorphi'],['polymorphic']
Modifiability,"/// Derived types.; ///; /// This includes qualified types, pointers, references, friends, typedefs, and; /// class members.; ///; /// TODO: Split out members (inheritance, fields, methods, etc.).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:160,inherit,inheritance,160,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['inherit'],['inheritance']
Modifiability,/// Describe a TLS variable address within debug info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetObjectFile.h:19,variab,variable,19,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetObjectFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetObjectFile.h,4,['variab'],['variable']
Modifiability,/// Describes API notes data for a global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h:42,variab,variable,42,interpreter/llvm-project/clang/include/clang/APINotes/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h,1,['variab'],['variable']
Modifiability,/// Describes a debug variable value by location number and expression along; /// with some flags about the original usage of the location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:22,variab,variable,22,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['variab'],['variable']
Modifiability,/// Describes an occurrence of a variable reference in a statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,1,['variab'],['variable']
Modifiability,/// Describes the allocas introduced by rewritePartition in order to migrate; /// the debug info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:40,rewrite,rewritePartition,40,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['rewrite'],['rewritePartition']
Modifiability,"/// Describes the capture of a variable or of \c this, or of a; /// C++1y init-capture.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:31,variab,variable,31,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,1,['variab'],['variable']
Modifiability,"/// Describes the capture of either a variable, or 'this', or; /// variable-length array type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:38,variab,variable,38,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,2,['variab'],"['variable', 'variable-length']"
Modifiability,/// Describes two clones that reference their variables in a different pattern; /// which could indicate a programming error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:46,variab,variables,46,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,1,['variab'],['variables']
Modifiability,/// Description of a constructor that was inherited from a base class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:42,inherit,inherited,42,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inherited']
Modifiability,"/// Description of a source-code transformation.; //; // A *rewrite rule* describes a transformation of source code. A simple rule; // contains each of the following components:; //; // * Matcher: the pattern term, expressed as clang matchers (with Transformer; // extensions).; //; // * Edits: a set of Edits to the source code, described with ASTEdits.; //; // However, rules can also consist of (sub)rules, where the first that matches; // is applied and the rest are ignored. So, the above components together form; // a logical ""case"" and a rule is a sequence of cases.; //; // Rule cases have an additional, implicit, component: the parameters. These are; // portions of the pattern which are left unspecified, yet bound in the pattern; // so that we can reference them in the edits.; //; // The \c Transformer class can be used to apply the rewrite rule and obtain the; // corresponding replacements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:60,rewrite,rewrite,60,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,2,['rewrite'],['rewrite']
Modifiability,"/// Description of the location of a variable whose Address is valid and; /// unchanging during function execution. The Address may be:; /// * A stack index, which can be negative for fixed stack objects.; /// * A MCRegister, whose entry value contains the address of the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:37,variab,variable,37,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,2,['variab'],['variable']
Modifiability,/// Designated initializers are inherited for the super class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:32,inherit,inherited,32,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['inherit'],['inherited']
Modifiability,"/// Destroy a __strong variable.; ///; /// At -O0, emit a call to store 'null' into the address;; /// instrumenting tools prefer this because the address is exposed,; /// but it's relatively cumbersome to optimize.; ///; /// At -O1 and above, just load and call objc_release.; ///; /// call void \@objc_storeStrong(i8** %addr, i8* null)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['variab'],['variable']
Modifiability,/// Destroy the fix-it rewriter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:23,rewrite,rewriter,23,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,1,['rewrite'],['rewriter']
Modifiability,/// Detach global variable \p GV from the list but don't delete it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:18,variab,variable,18,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['variab'],['variable']
Modifiability,"/// Determine if VD, which must be a variable or function, is an external; /// symbol that nonetheless can't be referenced from outside this translation; /// unit because its type has no linkage and it's not extern ""C"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:37,variab,variable,37,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Determine if a C++ inheriting constructor should have parameters matching; /// those of its inherited constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:23,inherit,inheriting,23,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,2,['inherit'],"['inherited', 'inheriting']"
Modifiability,/// Determine if a `Decl` node related to 'errno'.; /// This is true if the declaration is the errno variable or a function; /// that returns a pointer to the 'errno' value (usually the 'errno' macro is; /// defined with this function). \p D is not required to be a canonical; /// declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.h:101,variab,variable,101,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.h,1,['variab'],['variable']
Modifiability,"/// Determine if it is beneficial to fuse two loops.; ///; /// For now, this method simply returns true because we want to fuse as much; /// as possible (primarily to test the pass). This method will evolve, over; /// time, to add heuristics for profitability of fusion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:200,evolve,evolve,200,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['evolve'],['evolve']
Modifiability,"/// Determine if the specified value can be computed in the specified wider type; /// and produce the same low bits. If not, return false.; ///; /// If this function returns true, it can also return a non-zero number of bits; /// (in BitsToClear) which indicates that the value it computes is correct for; /// the zero extend, but that the additional BitsToClear bits need to be zero'd; /// out. For example, to promote something like:; ///; /// %B = trunc i64 %A to i32; /// %C = lshr i32 %B, 8; /// %E = zext i32 %C to i64; ///; /// CanEvaluateZExtd for the 'lshr' will return true, and BitsToClear will be; /// set to 8 to indicate that the promoted value needs to have bits 24-31; /// cleared in addition to bits 32-63. Since an 'and' will be generated to; /// clear the top bits anyway, doing this has no extra cost.; ///; /// This function works on both vectors and scalars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:319,extend,extend,319,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extend']
Modifiability,/// Determine if the value maintained in the given global variable can be; /// tracked interprocedurally. A value can be tracked if the global variable; /// has local linkage and is only used by non-volatile loads and stores.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueLatticeUtils.h:58,variab,variable,58,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueLatticeUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueLatticeUtils.h,2,['variab'],['variable']
Modifiability,"/// Determine if two APInts have the same value, after zero-extending; /// one of them (if needed!) to ensure that the bit-widths match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:60,extend,extending,60,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,1,['extend'],['extending']
Modifiability,"/// Determine if two APSInts have the same value, zero- or; /// sign-extending as needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h:69,extend,extending,69,interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,1,['extend'],['extending']
Modifiability,"/// Determine the declaration which an initialized entity ultimately refers to,; /// for the purpose of lifetime-extending a temporary bound to a reference in; /// the initialization of \p Entity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:113,extend,extending,113,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extending']
Modifiability,/// Determine the kind of rewrite that should be performed for this; /// candidate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:26,rewrite,rewrite,26,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h,1,['rewrite'],['rewrite']
Modifiability,/// Determine the location of the capture when initializing; /// field from a captured variable in a lambda.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:87,variab,variable,87,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,1,['variab'],['variable']
Modifiability,/// Determine whether ND is an external-linkage function or variable whose; /// type has no linkage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:60,variab,variable,60,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['variab'],['variable']
Modifiability,"/// Determine whether a definition of this inline variable should; /// be treated as a weak or strong definition. For compatibility with; /// C++14 and before, for a constexpr static data member, if there is an; /// out-of-line declaration of the member, we may promote it from weak to; /// strong.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:50,variab,variable,50,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['variab'],['variable']
Modifiability,"/// Determine whether a lookup table should be built for this switch, based on; /// the number of cases, size of the table, and the types of the results.; // TODO: We could support larger than legal types by limiting based on the; // number of loads required and/or table size. If the constants are small we; // could use smaller table entries and extend after the load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:348,extend,extend,348,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['extend'],['extend']
Modifiability,"/// Determine whether a type has new-extended alignment. This may be called when; /// the type is incomplete (for a delete-expression with an incomplete pointee; /// type), in which case it will conservatively return false if the alignment is; /// not known.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:37,extend,extended,37,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['extend'],['extended']
Modifiability,"/// Determine whether a variable is extern ""C"" prior to attaching; /// an initializer. We can't just call isExternC() here, because that; /// will also compute and cache whether the declaration is externally; /// visible, which might change when we attach the initializer.; ///; /// This can only be used if the declaration is known to not be a; /// redeclaration of an internal linkage declaration.; ///; /// For instance:; ///; /// auto x = []{};; ///; /// Attaching the initializer here makes this declaration not externally; /// visible, because its type has internal linkage.; ///; /// FIXME: This is a hack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,/// Determine whether an identifier is reserved for use as a name at global; /// scope. Such identifiers might be implementation-specific global functions; /// or variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:163,variab,variables,163,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,1,['variab'],['variables']
Modifiability,/// Determine whether declaring a const variable with this type is ok; /// per core issue 253.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:40,variab,variable,40,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['variab'],['variable']
Modifiability,/// Determine whether it is worth to fold V into an extended register addressing; /// mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:52,extend,extended,52,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"/// Determine whether it is worth to fold V into an extended register of an; /// Add/Sub. LSL means we are folding into an `add w0, w1, w2, lsl #N`; /// instruction, and the shift should be treated as worth folding even if has; /// multiple uses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:52,extend,extended,52,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"/// Determine whether one partial specialization, P1, is at least as; /// specialized than another, P2.; ///; /// \tparam TemplateLikeDecl The kind of P2, which must be a; /// TemplateDecl or {Class,Var}TemplatePartialSpecializationDecl.; /// \param T1 The injected-class-name of P1 (faked for a variable template).; /// \param T2 The injected-class-name of P2 (faked for a variable template).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:296,variab,variable,296,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,2,['variab'],['variable']
Modifiability,/// Determine whether the default argument for this parameter was inherited; /// from a previous declaration of the same entity.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:66,inherit,inherited,66,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['inherit'],['inherited']
Modifiability,"/// Determine whether the given NRVO candidate variable is move-eligible or; /// copy-elidable, without considering function return type.; ///; /// \param VD The NRVO candidate variable.; ///; /// \returns An aggregate which contains the Candidate and isMoveEligible; /// and isCopyElidable methods. If Candidate is non-null, it means; /// isMoveEligible() would be true under the most permissive language standard.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:47,variab,variable,47,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,2,['variab'],['variable']
Modifiability,/// Determine whether the given class is or inherits from a class by; /// the given name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:44,inherit,inherits,44,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['inherit'],['inherits']
Modifiability,/// Determine whether the given declaration is a global variable or; /// static data member.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:56,variab,variable,56,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['variab'],['variable']
Modifiability,/// Determine whether the given variable has been captured.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:32,variab,variable,32,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['variab'],['variable']
Modifiability,/// Determine whether the given variable-array type has been captured.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:32,variab,variable-array,32,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['variab'],['variable-array']
Modifiability,"/// Determine whether the inherited constructor is inherited from a; /// virtual base of the object we construct. If so, we are not responsible; /// for calling the inherited constructor (the complete object constructor; /// does that), and so we don't need to pass any arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:26,inherit,inherited,26,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,3,['inherit'],['inherited']
Modifiability,"/// Determine whether the initializer of this variable is an integer constant; /// expression. For use in C++98, where this affects whether the variable is; /// usable in constant expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:46,variab,variable,46,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,/// Determine whether this base class's constructors get inherited.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:57,inherit,inherited,57,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inherited']
Modifiability,/// Determine whether this capture handles a variable (by reference).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:45,variab,variable,45,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,/// Determine whether this capture handles a variable by copy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:45,variab,variable,45,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,/// Determine whether this capture handles a variable-length array; /// type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:45,variab,variable-length,45,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable-length']
Modifiability,/// Determine whether this capture handles a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:45,variab,variable,45,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,1,['variab'],['variable']
Modifiability,/// Determine whether this captures a variable length array bound; /// expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:38,variab,variable,38,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,1,['variab'],['variable']
Modifiability,/// Determine whether this class has a pure virtual function.; ///; /// The class is abstract per (C++ [class.abstract]p2) if it declares; /// a pure virtual function or inherits a pure virtual function that is; /// not overridden.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:170,inherit,inherits,170,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inherits']
Modifiability,"/// Determine whether this class is derived from the class \p Base.; ///; /// This routine only determines whether this class is derived from \p Base,; /// but does not account for factors that may make a Derived -> Base class; /// ill-formed, such as private/protected inheritance or multiple, ambiguous; /// base class subobjects.; ///; /// \param Base the base class we are searching for.; ///; /// \returns true if this class is derived from Base, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:270,inherit,inheritance,270,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inheritance']
Modifiability,"/// Determine whether this class is derived from the type \p Base.; ///; /// This routine only determines whether this class is derived from \p Base,; /// but does not account for factors that may make a Derived -> Base class; /// ill-formed, such as private/protected inheritance or multiple, ambiguous; /// base class subobjects.; ///; /// \param Base the base class we are searching for.; ///; /// \param Paths will contain the paths taken from the current class to the; /// given \p Base class.; ///; /// \returns true if this class is derived from \p Base, false otherwise.; ///; /// \todo add a separate parameter to configure IsDerivedFrom, rather than; /// tangling input and output in \p Paths",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:269,inherit,inheritance,269,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,2,"['config', 'inherit']","['configure', 'inheritance']"
Modifiability,"/// Determine whether this class is virtually derived from; /// the class \p Base.; ///; /// This routine only determines whether this class is virtually; /// derived from \p Base, but does not account for factors that may; /// make a Derived -> Base class ill-formed, such as; /// private/protected inheritance or multiple, ambiguous base class; /// subobjects.; ///; /// \param Base the base class we are searching for.; ///; /// \returns true if this class is virtually derived from Base,; /// false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:300,inherit,inheritance,300,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inheritance']
Modifiability,"/// Determine whether this declaration, if known to be well-formed within; /// its context, will replace the declaration OldD if introduced into scope.; ///; /// A declaration will replace another declaration if, for example, it is; /// a redeclaration of the same variable or function, but not if it is a; /// declaration of a different kind (function vs. class) or an overloaded; /// function.; ///; /// \param IsKnownNewer \c true if this declaration is known to be newer; /// than \p OldD (for instance, if this declaration is newly-created).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:265,variab,variable,265,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Determine whether this instruction can constant evolve within this loop; /// assuming its operands can all constant evolve.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:52,evolve,evolve,52,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,['evolve'],['evolve']
Modifiability,"/// Determine whether this is a block-scope declaration with linkage.; /// This will either be a local variable declaration declared 'extern', or a; /// local function declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:103,variab,variable,103,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['variab'],['variable']
Modifiability,/// Determine whether this is an implicit constructor synthesized to; /// model a call to a constructor inherited from a base class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:104,inherit,inherited,104,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inherited']
Modifiability,/// Determine whether this is an indirect path to a temporary that we are; /// supposed to lifetime-extend along.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:100,extend,extend,100,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extend']
Modifiability,"/// Determine whether this local variable can be used with the named; /// return value optimization (NRVO).; ///; /// The named return value optimization (NRVO) works by marking certain; /// non-volatile local variables of class type as NRVO objects. These; /// locals can be allocated within the return slot of their containing; /// function, in which case there is no need to copy the object to the; /// return slot when returning from the function. Within the function body,; /// each return that returns the NRVO object will have this variable as its; /// NRVO candidate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,3,['variab'],"['variable', 'variables']"
Modifiability,/// Determine whether this member captures the variable length array; /// type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:47,variab,variable,47,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Determine whether this record is a record for captured variables in; /// CapturedStmt construct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:59,variab,variables,59,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variables']
Modifiability,"/// Determine whether this variable has constant initialization.; ///; /// This is only set in two cases: when the language semantics require; /// constant initialization (globals in C and some globals in C++), and when; /// the variable is usable in constant expressions (constexpr, const int, and; /// reference variables in C++).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,3,['variab'],"['variable', 'variables']"
Modifiability,/// Determine whether this variable is a for-loop declaration for a; /// for-in statement in Objective-C.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Determine whether this variable is actually a function parameter pack or; /// init-capture pack.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Determine whether this variable is an ARC pseudo-__strong variable. A; /// pseudo-__strong variable has a __strong-qualified type but does not; /// actually retain the object written into it. Generally such variables are; /// also 'const' for safety. There are 3 cases where this will be set, 1) if; /// the variable is annotated with the objc_externally_retained attribute, 2); /// if its 'self' in a non-init method, or 3) if its the variable in an for-in; /// loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,6,['variab'],"['variable', 'variables']"
Modifiability,/// Determine whether this variable is the exception variable in a; /// C++ catch statememt or an Objective-C \@catch statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,/// Determine whether this variable is the for-range-declaration in; /// a C++0x for-range statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Determine whether this variable's value can be used in a; /// constant expression, according to the relevant language standard,; /// including checking whether it was initialized by a constant expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Determine whether this variable's value might be usable in a; /// constant expression, according to the relevant language standard.; /// This only checks properties of the declaration, and does not check; /// whether the initializer is in fact a constant expression.; ///; /// This corresponds to C++20 [expr.const]p3's notion of a; /// ""potentially-constant"" variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,"/// Determine whether we can emit a reference to \p VD from the current; /// context, despite not necessarily having seen an odr-use of the variable in; /// this context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:140,variab,variable,140,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['variab'],['variable']
Modifiability,"/// Determine whether we could expand a pack expansion with the; /// given set of parameter packs into separate arguments by repeatedly; /// transforming the pattern.; ///; /// \param EllipsisLoc The location of the ellipsis that identifies the; /// pack expansion.; ///; /// \param PatternRange The source range that covers the entire pattern of; /// the pack expansion.; ///; /// \param Unexpanded The set of unexpanded parameter packs within the; /// pattern.; ///; /// \param ShouldExpand Will be set to \c true if the transformer should; /// expand the corresponding pack expansions into separate arguments. When; /// set, \c NumExpansions must also be set.; ///; /// \param RetainExpansion Whether the caller should add an unexpanded; /// pack expansion after all of the expanded arguments. This is used; /// when extending explicitly-specified template argument packs per; /// C++0x [temp.arg.explicit]p9.; ///; /// \param NumExpansions The number of separate arguments that will be in; /// the expanded form of the corresponding pack expansion. This is both an; /// input and an output parameter, which can be set by the caller if the; /// number of expansions is known a priori (e.g., due to a prior substitution); /// and will be set by the callee when the number of expansions is known.; /// The callee must set this value when \c ShouldExpand is \c true; it may; /// set this value in other cases.; ///; /// \returns true if an error occurred (e.g., because the parameter packs; /// are to be instantiated with arguments of different lengths), false; /// otherwise. If false, \c ShouldExpand (and possibly \c NumExpansions); /// must be set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:820,extend,extending,820,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['extend'],['extending']
Modifiability,"/// Determine whether we should expand a pack expansion with the; /// given set of parameter packs into separate arguments by repeatedly; /// transforming the pattern.; ///; /// By default, the transformer never tries to expand pack expansions.; /// Subclasses can override this routine to provide different behavior.; ///; /// \param EllipsisLoc The location of the ellipsis that identifies the; /// pack expansion.; ///; /// \param PatternRange The source range that covers the entire pattern of; /// the pack expansion.; ///; /// \param Unexpanded The set of unexpanded parameter packs within the; /// pattern.; ///; /// \param ShouldExpand Will be set to \c true if the transformer should; /// expand the corresponding pack expansions into separate arguments. When; /// set, \c NumExpansions must also be set.; ///; /// \param RetainExpansion Whether the caller should add an unexpanded; /// pack expansion after all of the expanded arguments. This is used; /// when extending explicitly-specified template argument packs per; /// C++0x [temp.arg.explicit]p9.; ///; /// \param NumExpansions The number of separate arguments that will be in; /// the expanded form of the corresponding pack expansion. This is both an; /// input and an output parameter, which can be set by the caller if the; /// number of expansions is known a priori (e.g., due to a prior substitution); /// and will be set by the callee when the number of expansions is known.; /// The callee must set this value when \c ShouldExpand is \c true; it may; /// set this value in other cases.; ///; /// \returns true if an error occurred (e.g., because the parameter packs; /// are to be instantiated with arguments of different lengths), false; /// otherwise. If false, \c ShouldExpand (and possibly \c NumExpansions); /// must be set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:971,extend,extending,971,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['extend'],['extending']
Modifiability,"/// Determine whether we will definitely emit this variable with a constant; /// initializer, either because the language semantics demand it or because; /// we know that the initializer is a constant.; // For weak definitions, any initializer available in the current translation; // is not necessarily reflective of the initializer used; such initializers; // are ignored unless if InspectInitForWeakDef is true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:51,variab,variable,51,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,1,['variab'],['variable']
Modifiability,"/// Determine whether, in the current machine configuration, we should use; /// instruction referencing or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:46,config,configuration,46,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['config'],['configuration']
Modifiability,"/// Determines if the contained matcher can be converted to; /// \c Matcher<T>.; ///; /// For the Single case, it returns true if it can be converted to; /// \c Matcher<T>.; /// For the Polymorphic case, it returns true if one, and only one, of the; /// overloads can be converted to \c Matcher<T>. If there are more than one; /// that can, the result would be ambiguous and false is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:186,Polymorphi,Polymorphic,186,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,1,['Polymorphi'],['Polymorphic']
Modifiability,/// Determines if this variable's alignment is dependent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:23,variab,variable,23,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Determines the size of the variable's type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:31,variab,variable,31,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['variab'],['variable']
Modifiability,"/// Determines whether \p Range is one that can be edited by a rewrite;; /// generally, one that starts and ends within a particular file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h:63,rewrite,rewrite,63,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,1,['rewrite'],['rewrite']
Modifiability,/// Determines whether the @p VariableType's declaration is a record with the; /// clang::trivial_abi attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:30,Variab,VariableType,30,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['Variab'],['VariableType']
Modifiability,/// Determines whether the default argument was inherited; /// from a previous declaration of this template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:48,inherit,inherited,48,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,3,['inherit'],['inherited']
Modifiability,/// Determines whether the given __block variable is potentially; /// captured by the given expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:41,variab,variable,41,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,/// Determines whether the given __block variable is potentially; /// captured by the given statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:41,variab,variable,41,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,/// Determines whether the given declaration is an Objective-C; /// instance variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:77,variab,variable,77,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['variab'],['variable']
Modifiability,"/// Determines whether the given declaration is an valid acceptable; /// result for name lookup of a nested-name-specifier.; /// \param SD Declaration checked for nested-name-specifier.; /// \param IsExtension If not null and the declaration is accepted as an; /// extension, the pointed variable is assigned true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp:288,variab,variable,288,interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp,1,['variab'],['variable']
Modifiability,/// Determines whether the given variable is emitted on host or device side.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Determines whether the instance variable for \p PropImpl must or must not be; /// released in -dealloc or whether it cannot be determined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['variab'],['variable']
Modifiability,/// Determines whether the module failed to load due to a configuration; /// mismatch with an explicitly-named .pcm file from the command line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:58,config,configuration,58,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,1,['config'],['configuration']
Modifiability,/// Determines whether the variable thrown by this expression (if any!); /// is within the innermost try block.; ///; /// This information is required to determine whether the NRVO can apply to; /// this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,2,['variab'],['variable']
Modifiability,"/// Determines whether this is a static data member.; ///; /// This will only be true in C++, and applies to, e.g., the; /// variable 'x' in:; /// \code; /// struct S {; /// static int x;; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:125,variab,variable,125,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Determines whether this scope is between inheritance colon and the real; /// class/struct definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:45,inherit,inheritance,45,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h,1,['inherit'],['inheritance']
Modifiability,"/// Determines whether this variable is a variable with external, C linkage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:28,variab,variable,28,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,"/// Determines whether this variable template partial specialization; /// was a specialization of a member partial specialization.; ///; /// In the following example, the member template partial specialization; /// \c X<int>::Inner<T*> is a member specialization.; ///; /// \code; /// template<typename T>; /// struct X {; /// template<typename U> U Inner;; /// template<typename U> U* Inner<U*> = (U*)(0);; /// };; ///; /// template<> template<typename T>; /// U* X<int>::Inner<T*> = (T*)(0) + 1;; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:28,variab,variable,28,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['variab'],['variable']
Modifiability,"/// Determines whether this variable's context is, or is nested within,; /// a C++ extern ""C"" linkage spec.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:28,variab,variable,28,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Determines whether this variable's context is, or is nested within,; /// a C++ extern ""C++"" linkage spec.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:28,variab,variable,28,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Device ID if the device was not defined, runtime should get it; /// from environment variables in the spec.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:89,variab,variables,89,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,1,['variab'],['variables']
Modifiability,/// Device global variable entries info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:18,variab,variable,18,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,"/// Diag - If this is non-null, it will be filled in with a stack of notes; /// indicating why evaluation failed (or why it failed to produce a constant; /// expression).; /// If the expression is unfoldable, the notes will indicate why it's not; /// foldable. If the expression is foldable, but not a constant expression,; /// the notes will describes why it isn't a constant expression. If the; /// expression *is* a constant expression, no notes will be produced.; ///; /// FIXME: this causes significant performance concerns and should be; /// refactored at some point. Not all evaluations of the constant; /// expression interpreter will display the given diagnostics, this means; /// those kinds of uses are paying the expense of generating a diagnostic; /// (which may include expensive operations like converting APValue objects; /// to a string representation).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:548,refactor,refactored,548,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['refactor'],['refactored']
Modifiability,/// DiagUninitUse -- Helper function to produce a diagnostic for an; /// uninitialized use of a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:96,variab,variable,96,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,1,['variab'],['variable']
Modifiability,/// Diagnose attempts to use flexible array member with retainable object type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:29,flexible,flexible,29,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['flexible'],['flexible']
Modifiability,/// Diagnose differences between the current definition of the given; /// configuration macro and the definition provided on the command line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:74,config,configuration,74,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['config'],['configuration']
Modifiability,/// Diagnose shadowing for variables shadowed in the lambda record \p LambdaRD; /// when these variables are captured by the lambda.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:27,variab,variables,27,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variables']
Modifiability,"/// Diagnose variable or built-in function shadowing. Implements; /// -Wshadow.; ///; /// This method is called whenever a VarDecl is added to a ""useful""; /// scope.; ///; /// \param ShadowedDecl the declaration that is shadowed by the given variable; /// \param R the lookup of the name; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variable']
Modifiability,"/// DiagnoseUninitializedUse -- Helper function for diagnosing uses of an; /// uninitialized variable. This manages the different forms of diagnostic; /// emitted for particular types of uses. Returns true if the use was diagnosed; /// as a warning. If a particular use is one we omit warnings for, returns; /// false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:93,variab,variable,93,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,1,['variab'],['variable']
Modifiability,/// Different styles for empty line after access modifiers.; /// ``EmptyLineBeforeAccessModifier`` configuration handles the number of; /// empty lines between two access modifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:99,config,configuration,99,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['config'],['configuration']
Modifiability,/// Different ways to break inheritance list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:28,inherit,inheritance,28,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['inherit'],['inheritance']
Modifiability,/// Directly construct a new DPValue representing a dbg.value intrinsic; /// assigning \p Location to the DV / Expr / DI variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:121,variab,variable,121,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,1,['variab'],['variable']
Modifiability,"/// Directly mark a variable odr-used. Given a choice, prefer to use; /// MarkVariableReferenced since it does additional checks and then; /// calls MarkVarDeclODRUsed.; /// If the variable must be captured:; /// - if FunctionScopeIndexToStopAt is null, capture it in the CurContext; /// - else capture it in the DeclContext that maps to the; /// *FunctionScopeIndexToStopAt on the FunctionScopeInfo stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:20,variab,variable,20,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['variab'],['variable']
Modifiability,/// Directories used for search of config files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:35,config,config,35,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,1,['config'],['config']
Modifiability,"/// Discriminated union of Pass ID types.; ///; /// The PassConfig API prefers dealing with IDs because they are safer and more; /// efficient. IDs decouple configuration from instantiation. This way, when a; /// pass is overriden, it isn't unnecessarily instantiated. It is also unsafe to; /// refer to a Pass pointer after adding it to a pass manager, which deletes; /// redundant pass instances.; ///; /// However, it is convient to directly instantiate target passes with; /// non-default ctors. These often don't have a registered PassInfo. Rather than; /// force all target passes to implement the pass registry boilerplate, allow; /// the PassConfig API to handle either type.; ///; /// AnalysisID is sadly char*, so PointerIntPair won't work.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:157,config,configuration,157,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,1,['config'],['configuration']
Modifiability,"/// Discriminator enum (for isa<>, dyn_cast<>, et al.); ///; /// This enum is laid out by a preorder traversal of the inheritance; /// hierarchy, and does not contain an entry for abstract classes, as per; /// the recommendation in docs/HowToSetUpLLVMStyleRTTI.rst.; ///; /// We also explicitly include ""first"" and ""last"" values for each; /// interior node of the inheritance tree, to make it easier to read the; /// corresponding classof().; ///; /// We could pack these a bit tighter by not having the IK_FirstXXXInit; /// and IK_LastXXXInit be their own values, but that would degrade; /// readability for really no benefit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:118,inherit,inheritance,118,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,2,['inherit'],['inheritance']
Modifiability,/// Distribute loop iteration variable init used when composing 'omp; /// distribute'; /// with 'omp for' in a same construct,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:30,variab,variable,30,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,/// Do an explicit extend of the given block pointer if we're in ARC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:19,extend,extend,19,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['extend'],['extend']
Modifiability,/// Do not allow wrong-sided variables in constant expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:29,variab,variables,29,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['variab'],['variables']
Modifiability,/// Do not lifetime extend along this path.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:20,extend,extend,20,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extend']
Modifiability,"/// Do not resolve anything, but keep track of whether a given variable was; /// referenced.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:63,variab,variable,63,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['variab'],['variable']
Modifiability,/// Does copying/destroying the captured variable have side effects?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:41,variab,variable,41,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Does the node inherit from the given TableGen class?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.h:18,inherit,inherit,18,interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.h,1,['inherit'],['inherit']
Modifiability,/// Does this DeclRefExpr refer to an enclosing local or a captured; /// variable?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:73,variab,variable,73,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['variab'],['variable']
Modifiability,"/// Does this attribute behave like a type qualifier?; ///; /// A type qualifier adjusts a type to provide specialized rules for; /// a specific object, like the standard const and volatile qualifiers.; /// This includes attributes controlling things like nullability,; /// address spaces, and ARC ownership. The value of the object is still; /// largely described by the modified type.; ///; /// In contrast, many type attributes ""rewrite"" their modified type to; /// produce a fundamentally different type, not necessarily related in any; /// formalizable way to the original type. For example, calling convention; /// and vector attributes are not simple type qualifiers.; ///; /// Type qualifiers are often, but not always, reflected in the canonical; /// type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:432,rewrite,rewrite,432,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['rewrite'],['rewrite']
Modifiability,"/// Does this describe the address of a local variable. True for dbg.addr; /// and dbg.declare, but not dbg.value, which describes its value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:46,variab,variable,46,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,1,['variab'],['variable']
Modifiability,"/// Does this describe the address of a local variable. True for dbg.declare,; /// but not dbg.value, which describes its value, or dbg.assign, which; /// describes a combination of the variable's value and address.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:46,variab,variable,46,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,2,['variab'],['variable']
Modifiability,"/// Dominating assignemnt to each variable, indexed by VariableID.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,"['Variab', 'variab']","['VariableID', 'variable']"
Modifiability,"/// Dominating assignment to memory for each variable, indexed by; /// VariableID.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:45,variab,variable,45,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,"['Variab', 'variab']","['VariableID', 'variable']"
Modifiability,"/// Don't change without adapting ReadAt()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/ROOT/RRawFile.hxx:25,adapt,adapting,25,io/io/inc/ROOT/RRawFile.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/ROOT/RRawFile.hxx,1,['adapt'],['adapting']
Modifiability,/// Drop any variable location debugging information associated with this; /// instruction. Use when an instruction is modified in such a way that it no; /// longer defines the value it used to. Variable locations using that value; /// will be dropped.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:13,variab,variable,13,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// Drop location ranges which exist entirely outside each variable's scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h:59,variab,variable,59,interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h,1,['variab'],['variable']
Modifiability,/// Dump the Workspace content as configuration file; /* It needs some workspace object list or something..*/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h:34,config,configuration,34,roofit/roostats/inc/RooStats/HLFactory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HLFactory.h,1,['config'],['configuration']
Modifiability,/// Dump the compiler configuration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:22,config,configuration,22,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['config'],['configuration']
Modifiability,/// Dump the dependent variable set:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,1,['variab'],['variable']
Modifiability,/// Dumps an ASCII representation of the variable map to llvm::errs(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:41,variab,variable,41,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,"/// EXTRACT_VECTOR_ELT(VECTOR, IDX) - Returns a single element from VECTOR; /// identified by the (potentially variable) element number IDX. If the return; /// type is an integer type larger than the element type of the vector, the; /// result is extended to the width of the return type. In that case, the high; /// bits are undefined.; ///; /// If VECTOR is a scalable vector, then IDX may be larger than the minimum; /// vector width. IDX is not first scaled by the runtime scaling factor of; /// VECTOR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:111,variab,variable,111,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,2,"['extend', 'variab']","['extended', 'variable']"
Modifiability,"/// EXTSWSLI = The PPC extswsli instruction, which does an extend-sign; /// word and shift left immediate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:59,extend,extend-sign,59,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['extend'],['extend-sign']
Modifiability,"/// Each subprogram's preserved local variables, labels and imported; /// entities.; ///; /// Do not use a std::vector. Some versions of libc++ apparently copy; /// instead of move on grow operations, and TrackingMDRef is expensive to; /// copy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:38,variab,variables,38,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,1,['variab'],['variables']
Modifiability,"/// Each table consists of sets of variable length entries. Each set describes; /// the names of global objects and functions, or global types, respectively,; /// whose definitions are represented by debugging information entries owned; /// by a single compilation unit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugPubTable.h:35,variab,variable,35,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugPubTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugPubTable.h,1,['variab'],['variable']
Modifiability,"/// Element access. This extends the array if necessary, with empty nodes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h:25,extend,extends,25,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MsgPackDocument.h,1,['extend'],['extends']
Modifiability,"/// Elf_Dyn_Impl: This inherits from Elf_Dyn_Base, adding getters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h:23,inherit,inherits,23,interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFTypes.h,1,['inherit'],['inherits']
Modifiability,"/// Emit REX prefix which specifies; /// 1) 64-bit instructions,; /// 2) non-default operand size, and; /// 3) use of X86-64 extended registers.; ///; /// \returns the used prefix (REX or None).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:125,extend,extended,125,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp,1,['extend'],['extended']
Modifiability,"/// Emit a DBG_VALUE $noreg, indicating a variable has no location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h:42,variab,variable,42,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h,1,['variab'],['variable']
Modifiability,/// Emit a DW_OP_piece or DW_OP_bit_piece operation for a variable fragment.; /// \param OffsetInBits This is an optional offset into the location that; /// is at the top of the DWARF stack.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.h:58,variab,variable,58,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.h,1,['variab'],['variable']
Modifiability,"/// Emit a call to a constructor inherited from a base class, passing the; /// current constructor's arguments along unmodified (without even making; /// a copy).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:33,inherit,inherited,33,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['inherit'],['inherited']
Modifiability,"/// Emit a call to an inheriting constructor (that is, one that invokes a; /// constructor inherited from a base class) by inlining its definition. This; /// is necessary if the ABI does not support forwarding the arguments to the; /// base class constructor (because they're variadic or similar).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:22,inherit,inheriting,22,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,2,['inherit'],"['inherited', 'inheriting']"
Modifiability,/// Emit a code for initialization of threadprivate variable. It emits; /// a call to runtime library which adds initial value to the newly created; /// threadprivate variable (if it is not constant) and registers destructor; /// for the variable (if any).; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of threadprivate declaration.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:52,variab,variable,52,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,10,['variab'],['variable']
Modifiability,/// Emit a constant global variable's debug info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:27,variab,variable,27,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['variab'],['variable']
Modifiability,/// Emit a dbg_value as a DBG_INSTR_REF. May produce DBG_VALUE $noreg instead; /// if there is no variable location; alternately a half-formed DBG_INSTR_REF; /// that refers to a virtual register and is corrected later in isel.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h:98,variab,variable,98,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h,1,['variab'],['variable']
Modifiability,/// Emit a diagnostic via the adapted diagnostic client.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:30,adapt,adapted,30,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,2,['adapt'],['adapted']
Modifiability,/// Emit a helper variable and return corresponding lvalue.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:18,variab,variable,18,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,2,['variab'],['variable']
Modifiability,/// Emit a load from an i1 flag variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h:32,variab,variable,32,interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h,1,['variab'],['variable']
Modifiability,"/// Emit a machine register location. As an optimization this may also consume; /// the prefix of a DwarfExpression if a more efficient representation for; /// combining the register location and the first operation exists.; ///; /// \param FragmentOffsetInBits If this is one fragment out of a; /// fragmented; /// location, this is the offset of the; /// fragment inside the entire variable.; /// \return false if no DWARF register exists; /// for MachineReg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.h:384,variab,variable,384,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.h,1,['variab'],['variable']
Modifiability,"/// Emit a privates mapping function for correct handling of private and; /// firstprivate variables.; /// \code; /// void .omp_task_privates_map.(const .privates. *noalias privs, <ty1>; /// **noalias priv1,..., <tyn> **noalias privn) {; /// *priv1 = &.privates.priv1;; /// ...;; /// *privn = &.privates.privn;; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:91,variab,variables,91,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,/// Emit a reference to a non-local thread_local variable (including; /// triggering the initialization of all thread_local variables in its; /// translation unit).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:49,variab,variable,49,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// Emit a serialized representation of the variable information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,1,['variab'],['variable']
Modifiability,/// Emit a store to an i1 flag variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h:31,variab,variable,31,interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuilder.h,1,['variab'],['variable']
Modifiability,"/// Emit a store/load combination to the stack. This stores; /// SrcOp to a stack slot of type SlotVT, truncating it if needed. It then does; /// a load from the stack slot to DestVT, extending it if needed.; /// The resultant code need not be legal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:184,extend,extending,184,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['extend'],['extending']
Modifiability,"/// Emit alignment assumption.; /// This is a general fallback that we take if either there is an offset,; /// or the alignment is variable or we are sanitizing for alignment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:131,variab,variable,131,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['variab'],['variable']
Modifiability,"/// Emit an expression as an initializer for an object (variable, field, etc.); /// at the given location. The expression is not necessarily the normal; /// initializer for the object, and the address is not necessarily; /// its normal location.; ///; /// \param init the initializing expression; /// \param D the object to act as if we're initializing; /// \param lvalue the lvalue to initialize; /// \param capturedByInit true if \p D is a __block variable; /// whose address is potentially changed by the initializer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:56,variab,variable,56,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,2,['variab'],['variable']
Modifiability,"/// Emit any tables needed to implement virtual inheritance. For Itanium,; /// this emits virtual table tables. For the MSVC++ ABI, this emits virtual; /// base tables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:48,inherit,inheritance,48,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,1,['inherit'],['inheritance']
Modifiability,/// Emit call to \c llvm.dbg.declare for an argument variable; /// declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:53,variab,variable,53,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['variab'],['variable']
Modifiability,"/// Emit call to \c llvm.dbg.declare for an automatic variable; /// declaration.; /// Returns a pointer to the DILocalVariable associated with the; /// llvm.dbg.declare, or nullptr otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:54,variab,variable,54,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['variab'],['variable']
Modifiability,/// Emit call to \c llvm.dbg.declare for an imported variable; /// declaration in a block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:53,variab,variable,53,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['variab'],['variable']
Modifiability,"/// Emit call to llvm.dbg.declare for a variable declaration.; /// Returns a pointer to the DILocalVariable associated with the; /// llvm.dbg.declare, or nullptr otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:40,variab,variable,40,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['variab'],['variable']
Modifiability,/// Emit capture info for lambdas for variables captured by reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:38,variab,variables,38,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,"/// Emit code for copyin clause in \a D directive. The next code is; /// generated at the start of outlined functions for directives:; /// \code; /// threadprivate_var1 = master_threadprivate_var1;; /// operator=(threadprivate_var2, master_threadprivate_var2);; /// ...; /// __kmpc_barrier(&loc, global_tid);; /// \endcode; ///; /// \param D OpenMP directive possibly with 'copyin' clause(s).; /// \returns true if at least one copyin variable is found, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:435,variab,variable,435,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,"/// Emit code in this function to perform a guarded variable; /// initialization. Guarded initializations are used when it's not; /// possible to prove that an initialization will be done exactly; /// once, e.g. with a static local variable or a static data member; /// of a class template.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:52,variab,variable,52,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,2,['variab'],['variable']
Modifiability,/// Emit code to cause the destruction of the given variable with; /// static storage duration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['variab'],['variable']
Modifiability,/// Emit code to cause the variable at the given address to be considered as; /// constant from this point onwards.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['variab'],['variable']
Modifiability,/// Emit deferred declare target variables marked for deferred emission.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:33,variab,variables,33,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variables']
Modifiability,/// Emit diagnostics for the user for potential configuration errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:48,config,configuration,48,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,1,['config'],['configuration']
Modifiability,"/// Emit final copying of lastprivate values to original variables at; /// the end of the worksharing or simd directive.; ///; /// \param D Directive that has at least one 'lastprivate' directives.; /// \param IsLastIterCond Boolean condition that must be set to 'i1 true' if; /// it is the last iteration of the loop code in associated directive, or to; /// 'i1 false' otherwise. If this item is nullptr, no final check is required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:57,variab,variables,57,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variables']
Modifiability,/// Emit final update of reduction values to original variables at; /// the end of the directive.; ///; /// \param D Directive that has at least one 'reduction' directives.; /// \param ReductionKind The kind of reduction to perform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:54,variab,variables,54,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variables']
Modifiability,/// Emit flush of the variables specified in 'omp flush' directive.; /// \param Vars List of variables to flush.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:22,variab,variables,22,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,4,['variab'],['variables']
Modifiability,/// Emit info for variables that are fully promoted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:18,variab,variables,18,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variables']
Modifiability,/// Emit information about a global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:36,variab,variable,36,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['variab'],['variable']
Modifiability,/// Emit information about an external variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:39,variab,variable,39,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['variab'],['variable']
Modifiability,/// Emit information about global variable alias.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:34,variab,variable,34,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,1,['variab'],['variable']
Modifiability,"/// Emit initial code for lastprivate variables. If some variable is; /// not also firstprivate, then the default initialization is used. Otherwise; /// initialization of this variable is performed by EmitOMPFirstprivateClause; /// method.; ///; /// \param D Directive that may have 'lastprivate' directives.; /// \param PrivateScope Private scope for capturing lastprivate variables for; /// proper codegen in internal captured statement.; ///; /// \returns true if there is at least one lastprivate variable, false; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:38,variab,variables,38,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,5,['variab'],"['variable', 'variables']"
Modifiability,"/// Emit initial code for linear variables. Creates private copies; /// and initializes them with the values according to OpenMP standard.; ///; /// \param D Directive (possibly) with the 'linear' clause.; /// \return true if at least one linear variable is found that should be; /// initialized with the value of the original variable, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:33,variab,variables,33,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,3,['variab'],"['variable', 'variables']"
Modifiability,/// Emit initial code for reduction variables. Creates reduction copies; /// and initializes them with the values according to OpenMP standard.; ///; /// \param D Directive (possibly) with the 'reduction' clause.; /// \param PrivateScope Private scope for capturing reduction variables for; /// proper codegen in internal captured statement.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:36,variab,variables,36,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,2,['variab'],['variables']
Modifiability,/// Emit initialization for private variables in task-based directives.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:36,variab,variables,36,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,"/// Emit inner loop of the worksharing/simd construct.; ///; /// \param S Directive, for which the inner loop must be emitted.; /// \param RequiresCleanup true, if directive has some associated private; /// variables.; /// \param LoopCond Bollean condition for loop continuation.; /// \param IncExpr Increment expression for loop control variable.; /// \param BodyGen Generator for the inner body of the inner loop.; /// \param PostIncGen Genrator for post-increment code (required for ordered; /// loop directvies).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:207,variab,variables,207,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Emit local annotations for the local variable V, declared by D.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:41,variab,variable,41,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,"/// Emit proper copying of data from one variable to another.; ///; /// \param OriginalType Original type of the copied variables.; /// \param DestAddr Destination address.; /// \param SrcAddr Source address.; /// \param DestVD Destination variable used in \a CopyExpr (for arrays, has; /// type of the base array element).; /// \param SrcVD Source variable used in \a CopyExpr (for arrays, has type of; /// the base array element).; /// \param Copy Actual copygin expression for copying data from \a SrcVD to \a; /// DestVD.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:41,variab,variable,41,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,4,['variab'],"['variable', 'variables']"
Modifiability,/// Emit reduction operation for each element of array (required for; /// array sections) LHS op = RHS.; /// \param Type Type of array.; /// \param LHSVar Variable on the left side of the reduction operation; /// (references element of array in original variable).; /// \param RHSVar Variable on the right side of the reduction operation; /// (references element of array in original variable).; /// \param RedOpGen Generator of reduction operation with use of LHSVar and; /// RHSVar.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:155,Variab,Variable,155,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,4,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// Emit runtime registration functions for each profile data variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:62,variab,variable,62,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variable']
Modifiability,"/// Emit task region for the task directive. The task region is emitted in; /// several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:509,variab,variables,509,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,3,['variab'],['variables']
Modifiability,"/// Emit task region for the task directive. The task region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to kmp_int32 __kmpc_omp_task(ident_t *, kmp_int32 gtid,; /// kmp_task_t *new_task), where new_task is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:509,variab,variables,509,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,6,['variab'],['variables']
Modifiability,"/// Emit task region for the taskloop directive. The taskloop region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to void __kmpc_taskloop(ident_t *loc, int gtid, kmp_task_t; /// *task, int if_val, kmp_uint64 *lb, kmp_uint64 *ub, kmp_int64 st, int; /// nogroup, int sched, kmp_uint64 grainsize, void *task_dup ), where new_task; /// is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:517,variab,variables,517,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,6,['variab'],['variables']
Modifiability,"/// Emit the ""read-only variable not assignable"" error and print notes to give; /// more information about why the variable is not assignable, such as pointing; /// to the declaration of a const variable, showing that a method is const, or; /// that the function is returning a const reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,3,['variab'],['variable']
Modifiability,"/// Emit the IR required for a work-group-local variable declaration, and add; /// an entry to CGF's LocalDeclMap for D. The base class does this using; /// CodeGenFunction::EmitStaticVarDecl to emit an internal global for D.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h:48,variab,variable,48,interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h,1,['variab'],['variable']
Modifiability,/// Emit the code necessary to initialize the given global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:59,variab,variable,59,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['variab'],['variable']
Modifiability,"/// Emit the code to initialize hidden members required; /// to handle virtual inheritance, if needed by the ABI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:79,inherit,inheritance,79,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,1,['inherit'],['inheritance']
Modifiability,/// Emit the function that initializes C++ thread_local variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:56,variab,variables,56,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variables']
Modifiability,/// Emit the function that initializes global variables for a C++ Module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:46,variab,variables,46,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variables']
Modifiability,/// Emit the global variable if it is a valid device global variable.; /// Returns true if \a GD was dealt with successfully.; /// \param GD Variable declaration to emit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:20,variab,variable,20,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,6,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// Emit the specified global variable to the .s file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h:30,variab,variable,30,interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,1,['variab'],['variable']
Modifiability,"/// Emit top-level description of module, including target triple, inline asm,; /// descriptors for global variables, and function prototype info.; /// Returns the bit offset to backpatch with the location of the real VST.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:107,variab,variables,107,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,2,['variab'],['variables']
Modifiability,/// Emit type info if type of an expression is a variably modified; /// type. Also emit proper debug info for cast types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:49,variab,variably,49,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variably']
Modifiability,/// Emit variable locations into a debug loc dwo section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:9,variab,variable,9,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['variab'],['variable']
Modifiability,/// Emit variable locations into a debug loc section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:9,variab,variable,9,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['variab'],['variable']
Modifiability,/// EmitAutoVarAlloca - Emit the alloca and debug information for a; /// local variable. Does not emit initialization or destruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:79,variab,variable,79,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,/// EmitAutoVarDecl - Emit an auto variable declaration.; ///; /// This function can be called with a null (unreachable) insert point.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:35,variab,variable,35,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,"/// EmitAutoVarDecl - Emit code and set up an entry in LocalDeclMap for a; /// variable declaration with auto, register, or no storage class specifier.; /// These turn into simple stack objects, or GlobalValues depending on target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:79,variab,variable,79,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,/// EmitCXXGlobalVarDeclInit - Create the initializer for a C++; /// variable with global storage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:69,variab,variable,69,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,/// EmitGlobalVariable - Emit the specified global variable to the .s file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:51,variab,variable,51,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,1,['variab'],['variable']
Modifiability,"/// EmitGlobals - Emit all of the global variables to memory, storing their; /// addresses into GlobalAddress. This must make sure to copy the contents of; /// their initializers into the memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp:41,variab,variables,41,interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/ExecutionEngine.cpp,1,['variab'],['variables']
Modifiability,"/// EmitLValue - Emit code to compute a designator that specifies the location; /// of the expression.; ///; /// This can return one of two things: a simple address or a bitfield reference.; /// In either case, the LLVM Value* in the LValue structure is guaranteed to be; /// an LLVM pointer type.; ///; /// If this returns a bitfield reference, nothing about the pointee type of the; /// LLVM value is known: For example, it may not be a pointer to an integer.; ///; /// If this returns a normal address, and if the lvalue's C type is fixed size,; /// this method guarantees that the returned pointer type will point to an LLVM; /// type of the same size of the lvalue's type. If the lvalue has a variable; /// length type, this is not possible.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:698,variab,variable,698,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['variab'],['variable']
Modifiability,"/// EmitLValue - Emit code to compute a designator that specifies the location; /// of the expression.; ///; /// This can return one of two things: a simple address or a bitfield; /// reference. In either case, the LLVM Value* in the LValue structure is; /// guaranteed to be an LLVM pointer type.; ///; /// If this returns a bitfield reference, nothing about the pointee type of; /// the LLVM value is known: For example, it may not be a pointer to an; /// integer.; ///; /// If this returns a normal address, and if the lvalue's C type is fixed; /// size, this method guarantees that the returned pointer type will point to; /// an LLVM type of the same size of the lvalue's type. If the lvalue has a; /// variable length type, this is not possible.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:708,variab,variable,708,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,"/// EmitPointerWithAlignment - Given an expression with a pointer type,; /// emit the value and compute our best estimate of the alignment of the; /// pointee.; ///; /// \param BaseInfo - If non-null, this will be initialized with; /// information about the source of the alignment and the may-alias; /// attribute. Note that this function will conservatively fall back on; /// the type when it doesn't recognize the expression and may-alias will; /// be set to false.; ///; /// One reasonable way to use this information is when there's a language; /// guarantee that the pointer must be aligned to some stricter value, and; /// we're simply trying to ensure that sufficiently obvious uses of under-; /// aligned objects don't get miscompiled; for example, a placement new; /// into the address of a local variable. In such a case, it's quite; /// reasonable to just ignore the returned alignment when it isn't from an; /// explicit source.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:807,variab,variable,807,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,/// EmitProtocolMethodTypes - Generate the array of extended method type; /// strings. The return value has type Int8PtrPtrTy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:52,extend,extended,52,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['extend'],['extended']
Modifiability,/// EmitVLASize - Capture all the sizes for the VLA expressions in; /// the given variably-modified type and store them in the VLASizeMap.; ///; /// This function can be called with a null (unreachable) insert point.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:82,variab,variably-modified,82,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variably-modified']
Modifiability,/// EmitVarDecl - Emit a local variable declaration.; ///; /// This function can be called with a null (unreachable) insert point.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:31,variab,variable,31,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,"/// EmitVarDecl - This method handles emission of any variable declaration; /// inside a function, including static vars etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:54,variab,variable,54,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,/// Emits `testMIPredicate_MI`.; /// \tparam PredicateObject An object representing a predicate to emit.; /// \param OS Output stream; /// \param AdditionalDecls Additional C++ variable declarations.; /// \param Predicates Predicates to emit.; /// \param GetPredEnumName Returns an enum name for a given predicate.; /// \param GetPredCode Returns the C++ code of a given predicate.; /// \param Comment Optional comment for the enum declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h:177,variab,variable,177,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h,1,['variab'],['variable']
Modifiability,"/// Emits a call to an LLVM variable-argument intrinsic, either; /// \c llvm.va_start or \c llvm.va_end.; /// \param ArgValue A reference to the \c va_list as emitted by either; /// \c EmitVAListRef or \c EmitMSVAListRef.; /// \param IsStart If \c true, emits a call to \c llvm.va_start; otherwise,; /// calls \c llvm.va_end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:28,variab,variable-argument,28,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable-argument']
Modifiability,"/// Emits code for parallel or serial call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run in parallel threads. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; /// \param IfCond Condition in the associated 'if' clause, if it was; /// specified, nullptr otherwise.; /// \param NumThreads The value corresponding to the num_threads clause, if; /// any, or nullptr.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:74,variab,variables,74,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,4,['variab'],['variables']
Modifiability,"/// Emits code for parallel or serial call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run in parallel threads. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; /// \param IfCond Condition in the associated 'if' clause, if it was; /// specified, nullptr otherwise.; /// \param NumThreads The value corresponding to the num_threads clause, if; /// any,; /// or nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:74,variab,variables,74,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,2,['variab'],['variables']
Modifiability,"/// Emits code for teams call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run by team masters. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:61,variab,variables,61,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,6,['variab'],['variables']
Modifiability,/// Emits initialization code for the threadprivate variables.; /// \param VDAddr Address of the global variable \a VD.; /// \param Ctor Pointer to a global init function for \a VD.; /// \param CopyCtor Pointer to a global copy function for \a VD.; /// \param Dtor Pointer to a global destructor function for \a VD.; /// \param Loc Location of threadprivate declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:52,variab,variables,52,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Emits inlined function for the specified OpenMP parallel; // directive.; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:305,Variab,Variable,305,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['Variab'],['Variable']
Modifiability,"/// Emits inlined function for the specified OpenMP teams; // directive.; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:302,Variab,Variable,302,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['Variab'],['Variable']
Modifiability,"/// Emits list of dependecies based on the provided data (array of; /// dependence/expression pairs) for depobj construct. In this case, the; /// variable is allocated in dynamically. \returns Pointer to the first; /// element of the array casted to VoidPtr type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:146,variab,variable,146,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,/// Emits local variables in the appropriate order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h:16,variab,variables,16,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,1,['variab'],['variables']
Modifiability,/// Emits metadata nodes for all the local variables in the current; /// function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:43,variab,variables,43,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variables']
Modifiability,"/// Emits outlined function for the OpenMP task directive \a D. This; /// outlined function has type void(*)(kmp_int32 ThreadID, struct task_t*; /// TaskT).; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param PartIDVar Variable for partition id in the current OpenMP untied; /// task region.; /// \param TaskTVar Variable for task_t argument.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.; /// \param Tied true if task is generated for tied task, false otherwise.; /// \param NumberOfParts Number of parts in untied task. Ignored for tied; /// tasks.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:213,Variab,Variable,213,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,6,['Variab'],['Variable']
Modifiability,"/// Emits outlined function for the specified OpenMP parallel directive; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:301,Variab,Variable,301,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['Variab'],['Variable']
Modifiability,"/// Emits outlined function for the specified OpenMP teams directive; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:298,Variab,Variable,298,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['Variab'],['Variable']
Modifiability,"/// Emits reduction function.; /// \param ReducerName Name of the function calling the reduction.; /// \param ArgsElemType Array type containing pointers to reduction variables.; /// \param Privates List of private copies for original reduction arguments.; /// \param LHSExprs List of LHS in \a ReductionOps reduction operations.; /// \param RHSExprs List of RHS in \a ReductionOps reduction operations.; /// \param ReductionOps List of reduction operations in form 'LHS binop RHS'; /// or 'operator binop(LHS, RHS)'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:167,variab,variables,167,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variables']
Modifiability,"/// Emits the code for the variable-modified type, if required.; /// \param N Number of the reduction item.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:27,variab,variable-modified,27,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable-modified']
Modifiability,"/// Emits the code for the variable-modified type, if required.; /// \param N Number of the reduction item.; /// \param Size Size of the type in chars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:27,variab,variable-modified,27,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable-modified']
Modifiability,/// Emits the copy/dispose helpers for a __block variable that is a non-trivial; /// C struct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,/// Emits the copy/dispose helpers for a __block variable with a; /// nontrivial copy constructor or destructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,/// Emits the copy/dispose helpers for an ARC __block __strong variable; /// that's not of block-pointer type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:63,variab,variable,63,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,/// Emits the copy/dispose helpers for an ARC __block __strong; /// variable that's of block-pointer type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:68,variab,variable,68,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,/// Emits the copy/dispose helpers for an ARC __block __weak variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:61,variab,variable,61,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,"/// Emits the destructors of the variables of \param OtherScope; /// when this scope is destroyed. Does not create a Scope in the bytecode at; /// all, this is just a RAII object to emit destructors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:33,variab,variables,33,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,1,['variab'],['variables']
Modifiability,/// Emits the lvalue for the expression with possibly captured variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:63,variab,variable,63,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,"/// Emitted as a unified address, e.g. managed variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:47,variab,variables,47,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variables']
Modifiability,/// Emitted on device side with a shadow variable on host side,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:41,variab,variable,41,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,"/// Enable enhanced dataflow scheme for lifetime analysis (treat first; /// use of stack slot as start of slot lifetime, as opposed to looking; /// for LIFETIME_START marker). See ""Implementation notes"" below for; /// more info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp:11,enhance,enhanced,11,interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,1,['enhance'],['enhanced']
Modifiability,"/// Enable or disable offsetting on the function to be minimized, which enhances numerical precision.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:72,enhance,enhances,72,roofit/roofitcore/src/RooAbsMinimizerFcn.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h,1,['enhance'],['enhances']
Modifiability,"/// Enable the grid mode; /// The grid Mode configure automatically all grid-CA path, VOMS authentication; /// and grid related extension for a grid analysis usage",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/davix/inc/TDavixFile.h:44,config,configure,44,net/davix/inc/TDavixFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/davix/inc/TDavixFile.h,1,['config'],['configure']
Modifiability,"/// Enables the default set of metrics provided by RPageSink. `prefix` will be used as the prefix for; /// the counters registered in the internal RNTupleMetrics object.; /// This set of counters can be extended by a subclass by calling `fMetrics.MakeCounter<...>()`.; ///; /// A subclass using the default set of metrics is always responsible for updating the counters; /// appropriately, e.g. `fCounters->fNPageCommited.Inc()`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:203,extend,extended,203,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['extend'],['extended']
Modifiability,/// Encapsulates information needed to describe a parameter.; ///; /// The description of the parameter is not linked directly to; /// OpenMP or any other vector function description. This structure; /// is extendible to handle other paradigms that describe vector; /// functions and their parameters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h:207,extend,extendible,207,interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/VFABIDemangler.h,1,['extend'],['extendible']
Modifiability,"/// Encode information on a single operation to perform on a byte; /// sequence (e.g., an encoded instruction) which requires assemble- or run-; /// time patching.; ///; /// Fixups are used any time the target instruction encoder needs to represent; /// some value in an instruction which is not yet concrete. The encoder will; /// encode the instruction assuming the value is 0, and emit a fixup which; /// communicates to the assembler backend how it should rewrite the encoded; /// value.; ///; /// During the process of relaxation, the assembler will apply fixups as; /// symbolic values become concrete. When relaxation is complete, any remaining; /// fixups become relocations in the object file (or errors, if the fixup cannot; /// be encoded on the target).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h:460,rewrite,rewrite,460,interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCFixup.h,1,['rewrite'],['rewrite']
Modifiability,/// End of range of VarLocRecords that represent variables with a single; /// location that is valid for the entire scope. Range starts at 0.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h:49,variab,variables,49,interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,1,['variab'],['variables']
Modifiability,/// Ensures that all clones reference variables in the same pattern.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:38,variab,variables,38,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,1,['variab'],['variables']
Modifiability,"/// Enter a cleanup to destroy a __block variable. Note that this; /// cleanup should be a no-op if the variable hasn't left the stack; /// yet; if a cleanup is required for the variable itself, that needs; /// to be done externally.; ///; /// \param Kind Cleanup kind.; ///; /// \param Addr When \p LoadBlockVarAddr is false, the address of the __block; /// structure that will be passed to _Block_object_dispose. When; /// \p LoadBlockVarAddr is true, the address of the field of the block; /// structure that holds the address of the __block structure.; ///; /// \param Flags The flag that will be passed to _Block_object_dispose.; ///; /// \param LoadBlockVarAddr Indicates whether we need to emit a load from; /// \p Addr to get the address of the __block structure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:41,variab,variable,41,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,3,['variab'],['variable']
Modifiability,/// Enter a destroy cleanup for the given local variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:48,variab,variable,48,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,"/// Entries in this vector represent a substitution of a string variable or; /// an expression in the RegExStr regex at match time. For example, in the; /// case of a CHECK directive with the pattern ""foo[[bar]]baz[[#N+1]]"",; /// RegExStr will contain ""foobaz"" and we'll get two entries in this vector; /// that tells us to insert the value of string variable ""bar"" at offset 3; /// and the value of expression ""N+1"" at offset 6.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:64,variab,variable,64,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,2,['variab'],['variable']
Modifiability,/// Entry is a declare target variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:30,variab,variable,30,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,/// Entry point for configuring and running IR mutations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h:20,config,configuring,20,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/IRMutator.h,1,['config'],['configuring']
Modifiability,"/// Enumeration specifying which axes can be extended",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h:45,extend,extended,45,hist/hist/inc/TH1.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TH1.h,1,['extend'],['extended']
Modifiability,/// Environment variable associated with this ICV.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:16,variab,variable,16,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['variab'],['variable']
Modifiability,"/// Erase a variable from the set of open ranges, and additionally erase any; /// fragments that may overlap it. If the VarLoc is a backup location, erase; /// the variable from the EntryValuesBackupVars set, indicating we should stop; /// tracking its backup entry location. Otherwise, if the VarLoc is primary; /// location, erase the variable from the Vars set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,3,['variab'],['variable']
Modifiability,"/// EscapeText - HTMLized the provided string so that special characters; /// in 's' are not interpreted as HTML tags. Unlike the version of; /// EscapeText that rewrites a file, this version by default replaces tabs; /// with spaces.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/HTMLRewrite.h:162,rewrite,rewrites,162,interpreter/llvm-project/clang/include/clang/Rewrite/Core/HTMLRewrite.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/HTMLRewrite.h,1,['rewrite'],['rewrites']
Modifiability,/// Evaluate a condition (either a variable declaration or an expression).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:35,variab,variable,35,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variable']
Modifiability,"/// Evaluate the destruction of this variable to determine if it constitutes; /// constant destruction.; ///; /// \pre hasConstantInitialization(); /// \return \c true if this variable has constant destruction, \c false if; /// not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:37,variab,variable,37,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,"/// Evaluate the initializer of this variable to determine whether it's a; /// constant initializer. Should only be called once, after completing the; /// definition of the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:37,variab,variable,37,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,"/// Evaluates an expression and places the result on the stack. If the; /// expression is of composite type, a local variable will be created; /// and a pointer to said variable will be placed on the stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:117,variab,variable,117,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,2,['variab'],['variable']
Modifiability,"/// Evaluates the value of the binary operation represented by this AST,; /// using EvalBinop on the result of recursively evaluating the operands.; /// \returns the expression value or an error if an undefined numeric; /// variable is used in one of the operands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:224,variab,variable,224,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,/// ExactFilter - The occasional extended opcode (such as VMCALL or MONITOR); /// requires the ModR/M byte to have a specific value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86ModRMFilters.h:33,extend,extended,33,interpreter/llvm-project/llvm/utils/TableGen/X86ModRMFilters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86ModRMFilters.h,1,['extend'],['extended']
Modifiability,"/// ExactSIVtest - Tests the SIV subscript pair; /// (Src and Dst) for dependence.; /// Things of the form [c1 + a1*i] and [c2 + a2*i],; /// where i is an induction variable, c1 and c2 are loop invariant,; /// and a1 and a2 are constant.; /// Returns true if any possible dependence is disproved.; /// If there might be a dependence, returns false.; /// Sets appropriate direction entry.; /// Set consistent to false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:165,variab,variable,165,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,1,['variab'],['variable']
Modifiability,"/// Exactly one of the record* APIs must be called. Implementers may extend; /// behavior by implementing the corresponding record*Impl.; ///; /// Call after inlining succeeded, and did not result in deleting the callee.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h:69,extend,extend,69,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,1,['extend'],['extend']
Modifiability,"/// Examines the FunctionScopeInfo stack to determine the nearest; /// enclosing lambda (to the current lambda) that is 'capture-capable' for; /// the variable referenced in the current lambda (i.e. \p VarToCapture).; /// If successful, returns the index into Sema's FunctionScopeInfo stack; /// of the capture-capable lambda's LambdaScopeInfo.; /// See Implementation for more detailed comments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaLambda.h:151,variab,variable,151,interpreter/llvm-project/clang/include/clang/Sema/SemaLambda.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/SemaLambda.h,1,['variab'],['variable']
Modifiability,"/// Examines the FunctionScopeInfo stack to determine the nearest; /// enclosing lambda (to the current lambda) that is 'capture-capable' for; /// the variable referenced in the current lambda (i.e. \p VarToCapture).; /// If successful, returns the index into Sema's FunctionScopeInfo stack; /// of the capture-capable lambda's LambdaScopeInfo.; ///; /// Given the current stack of lambdas being processed by Sema and; /// the variable of interest, to identify the nearest enclosing lambda (to the; /// current lambda at the top of the stack) that can truly capture; /// a variable, it has to have the following two properties:; /// a) 'capture-ready' - be the innermost lambda that is 'capture-ready':; /// - climb down the stack (i.e. starting from the innermost and examining; /// each outer lambda step by step) checking if each enclosing; /// lambda can either implicitly or explicitly capture the variable.; /// Record the first such lambda that is enclosed in a non-dependent; /// context. If no such lambda currently exists return failure.; /// b) 'capture-capable' - make sure the 'capture-ready' lambda can truly; /// capture the variable by checking all its enclosing lambdas:; /// - check if all outer lambdas enclosing the 'capture-ready' lambda; /// identified above in 'a' can also capture the variable (this is done; /// via tryCaptureVariable for variables and CheckCXXThisCapture for; /// 'this' by passing in the index of the Lambda identified in step 'a'); ///; /// \param FunctionScopes - Sema's stack of nested FunctionScopeInfo's (which a; /// LambdaScopeInfo inherits from). The current/deepest/innermost lambda; /// is at the top of the stack.; ///; /// \param VarToCapture - the variable to capture. If NULL, capture 'this'.; ///; ///; /// \returns An std::optional<unsigned> Index that if evaluates to 'true'; /// contains the index (into Sema's FunctionScopeInfo stack) of the innermost; /// lambda which is capture-capable. If the return value evaluates to 'false'; /// th",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp:151,variab,variable,151,interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,4,['variab'],['variable']
Modifiability,"/// Examines the FunctionScopeInfo stack to determine the nearest; /// enclosing lambda (to the current lambda) that is 'capture-ready' for; /// the variable referenced in the current lambda (i.e. \p VarToCapture).; /// If successful, returns the index into Sema's FunctionScopeInfo stack; /// of the capture-ready lambda's LambdaScopeInfo.; ///; /// Climbs down the stack of lambdas (deepest nested lambda - i.e. current; /// lambda - is on top) to determine the index of the nearest enclosing/outer; /// lambda that is ready to capture the \p VarToCapture being referenced in; /// the current lambda.; /// As we climb down the stack, we want the index of the first such lambda -; /// that is the lambda with the highest index that is 'capture-ready'.; ///; /// A lambda 'L' is capture-ready for 'V' (var or this) if:; /// - its enclosing context is non-dependent; /// - and if the chain of lambdas between L and the lambda in which; /// V is potentially used (i.e. the lambda at the top of the scope info; /// stack), can all capture or have already captured V.; /// If \p VarToCapture is 'null' then we are trying to capture 'this'.; ///; /// Note that a lambda that is deemed 'capture-ready' still needs to be checked; /// for whether it is 'capture-capable' (see; /// getStackIndexOfNearestEnclosingCaptureCapableLambda), before it can truly; /// capture.; ///; /// \param FunctionScopes - Sema's stack of nested FunctionScopeInfo's (which a; /// LambdaScopeInfo inherits from). The current/deepest/innermost lambda; /// is at the top of the stack and has the highest index.; /// \param VarToCapture - the variable to capture. If NULL, capture 'this'.; ///; /// \returns An std::optional<unsigned> Index that if evaluates to 'true'; /// contains the index (into Sema's FunctionScopeInfo stack) of the innermost; /// lambda which is capture-ready. If the return value evaluates to 'false'; /// then no lambda is capture-ready for \p VarToCapture.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp:149,variab,variable,149,interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,3,"['inherit', 'variab']","['inherits', 'variable']"
Modifiability,"/// ExceptionDataRecord - An entry in the table of exception data (.xdata); ///; /// The format on ARM is:; ///; /// 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0; /// 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0; /// +-------+---------+-+-+-+---+-----------------------------------+; /// | C Wrd | Epi Cnt |F|E|X|Ver| Function Length |; /// +-------+--------+'-'-'-'---'---+-------------------------------+; /// | Reserved |Ex. Code Words| (Extended Epilogue Count) |; /// +-------+--------+--------------+-------------------------------+; ///; /// The format on ARM64 is:; ///; /// 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0; /// 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0; /// +---------+---------+-+-+---+-----------------------------------+; /// | C Wrd | Epi Cnt |E|X|Ver| Function Length |; /// +---------+------+--'-'-'---'---+-------------------------------+; /// | Reserved |Ex. Code Words| (Extended Epilogue Count) |; /// +-------+--------+--------------+-------------------------------+; ///; /// Function Length : 18-bit field indicating the total length of the function; /// in bytes divided by 2. If a function is larger than; /// 512KB, then multiple pdata and xdata records must be used.; /// Vers : 2-bit field describing the version of the remaining structure. Only; /// version 0 is currently defined (values 1-3 are not permitted).; /// X : 1-bit field indicating the presence of exception data; /// E : 1-bit field indicating that the single epilogue is packed into the; /// header; /// F : 1-bit field indicating that the record describes a function fragment; /// (implies that no prologue is present, and prologue processing should be; /// skipped) (ARM only); /// Epilogue Count : 5-bit field that differs in meaning based on the E field.; ///; /// If E is set, then this field specifies the index of the; /// first unwind code describing the (only) epilogue.; ///; /// Otherwise, this field indi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ARMWinEH.h:479,Extend,Extended,479,interpreter/llvm-project/llvm/include/llvm/Support/ARMWinEH.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ARMWinEH.h,1,['Extend'],['Extended']
Modifiability,/// Exit scope - all the mapped variables are restored.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:32,variab,variables,32,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variables']
Modifiability,"/// Expand an atomic RMW instruction into a loop utilizing; /// cmpxchg. You'll want to make sure your target machine likes cmpxchg; /// instructions in the first place and that there isn't another, better,; /// transformation available (for example AArch32/AArch64 have linked loads).; ///; /// This is useful in passes which can't rewrite the more exotic RMW; /// instructions directly into a platform specific intrinsics (because, say,; /// those intrinsics don't exist). If such a pass is able to expand cmpxchg; /// instructions directly however, then, with this function, it could avoid two; /// extra module passes (avoiding passes by `-atomic-expand` and itself). A; /// specific example would be PNaCl's `RewriteAtomics` pass.; ///; /// Given: atomicrmw some_op iN* %addr, iN %incr ordering; ///; /// The standard expansion we produce is:; /// [...]; /// %init_loaded = load atomic iN* %addr; /// br label %loop; /// loop:; /// %loaded = phi iN [ %init_loaded, %entry ], [ %new_loaded, %loop ]; /// %new = some_op iN %loaded, %incr; /// ; This is what -atomic-expand will produce using this function on i686; /// targets:; /// %pair = cmpxchg iN* %addr, iN %loaded, iN %new_val; /// %new_loaded = extractvalue { iN, i1 } %pair, 0; /// %success = extractvalue { iN, i1 } %pair, 1; /// ; End callback produced IR; /// br i1 %success, label %atomicrmw.end, label %loop; /// atomicrmw.end:; /// [...]; ///; /// Returns true if the containing function was modified.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AtomicExpandUtils.h:333,rewrite,rewrite,333,interpreter/llvm-project/llvm/include/llvm/CodeGen/AtomicExpandUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AtomicExpandUtils.h,2,"['Rewrite', 'rewrite']","['RewriteAtomics', 'rewrite']"
Modifiability,/// Explicitly listed variables and functions in a 'to' or 'link' clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:22,variab,variables,22,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variables']
Modifiability,/// Expression scope which tracks potentially lifetime extended; /// temporaries which are hoisted to the parent scope on exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:55,extend,extended,55,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,1,['extend'],['extended']
Modifiability,/// ExtVectorDecls - This is a list all the extended vector types. This allows; /// us to associate a raw vector type with one of the ext_vector type names.; /// This is only necessary for issuing pretty diagnostics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:44,extend,extended,44,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['extend'],['extended']
Modifiability,"/// ExtVectorType - Extended vector type. This type is created using; /// __attribute__((ext_vector_type(n)), where ""n"" is the number of elements.; /// Unlike vector_size, ext_vector_type is only allowed on typedef's. This; /// class enables syntactic extensions, like Vector Components for accessing; /// points (as .xyzw), colors (as .rgba), and textures (modeled after OpenGL; /// Shading Language).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:20,Extend,Extended,20,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['Extend'],['Extended']
Modifiability,/// Extend - Valid only for integer argument types. Same as 'direct'; /// but also emit a zero/sign extension attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:4,Extend,Extend,4,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,1,['Extend'],['Extend']
Modifiability,"/// Extend a register to the location type given in VA, capped at extending; /// to at most MaxSize bits. If MaxSizeBits is 0 then no maximum is set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:4,Extend,Extend,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,2,"['Extend', 'extend']","['Extend', 'extending']"
Modifiability,"/// Extend a tree by creating new root with old root and a new node as; /// children",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:4,Extend,Extend,4,math/mathcore/src/CDT/KDTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h,1,['Extend'],['Extend']
Modifiability,/// Extend llvm::ore:: with MI-specific helper names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:4,Extend,Extend,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,1,['Extend'],['Extend']
Modifiability,"/// Extend the current definition as far as possible down.; ///; /// Stop when meeting an existing def or when leaving the live; /// range of VNI. End points where VNI is no longer live are added to Kills.; ///; /// We only propagate DBG_VALUES locally here. LiveDebugValues performs a; /// data-flow analysis to propagate them beyond basic block boundaries.; ///; /// \param Idx Starting point for the definition.; /// \param DbgValue value to propagate.; /// \param LiveIntervalInfo For each location number key in this map,; /// restricts liveness to where the LiveRange has the value equal to the\; /// VNInfo.; /// \param [out] Kills Append end points of VNI's live range to Kills.; /// \param LIS Live intervals analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:4,Extend,Extend,4,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['Extend'],['Extend']
Modifiability,/// Extend the current nested-name-specifier by another; /// nested-name-specifier component of the form 'identifier::'.; ///; /// \param Context The AST context in which this nested-name-specifier; /// resides.; ///; /// \param Identifier The identifier.; ///; /// \param IdentifierLoc The location of the identifier.; ///; /// \param ColonColonLoc The location of the trailing '::'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:4,Extend,Extend,4,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,2,['Extend'],['Extend']
Modifiability,/// Extend the current nested-name-specifier by another; /// nested-name-specifier component of the form 'namespace-alias::'.; ///; /// \param Context The AST context in which this nested-name-specifier; /// resides.; ///; /// \param Alias The namespace alias.; ///; /// \param AliasLoc The location of the namespace alias; /// name.; ///; /// \param ColonColonLoc The location of the trailing '::'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:4,Extend,Extend,4,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,2,['Extend'],['Extend']
Modifiability,/// Extend the current nested-name-specifier by another; /// nested-name-specifier component of the form 'namespace::'.; ///; /// \param Context The AST context in which this nested-name-specifier; /// resides.; ///; /// \param Namespace The namespace.; ///; /// \param NamespaceLoc The location of the namespace name.; ///; /// \param ColonColonLoc The location of the trailing '::'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:4,Extend,Extend,4,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,2,['Extend'],['Extend']
Modifiability,"/// Extend the current nested-name-specifier by another; /// nested-name-specifier component of the form 'type::'.; ///; /// \param Context The AST context in which this nested-name-specifier; /// resides.; ///; /// \param TemplateKWLoc The location of the 'template' keyword, if present.; ///; /// \param TL The TypeLoc that describes the type preceding the '::'.; ///; /// \param ColonColonLoc The location of the trailing '::'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:4,Extend,Extend,4,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,2,['Extend'],['Extend']
Modifiability,"/// Extend the generic ELFStreamer class so that it can emit mapping symbols at; /// the appropriate points in the object files. These symbols are defined in the; /// AArch64 ELF ABI:; /// infocenter.arm.com/help/topic/com.arm.doc.ihi0056a/IHI0056A_aaelf64.pdf; ///; /// In brief: $x or $d should be emitted at the start of each contiguous region; /// of A64 code or data in a section. In practice, this emission does not rely; /// on explicit assembler directives but on inherent properties of the; /// directives doing the emission (e.g. "".byte"" is data, ""add x0, x0, x0"" an; /// instruction).; ///; /// As a result this system is orthogonal to the DataRegion infrastructure used; /// by MachO. Beware!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64ELFStreamer.cpp:4,Extend,Extend,4,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64ELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64ELFStreamer.cpp,1,['Extend'],['Extend']
Modifiability,"/// Extend the generic ELFStreamer class so that it can emit mapping symbols at; /// the appropriate points in the object files. These symbols are defined in the; /// ARM ELF ABI: infocenter.arm.com/help/topic/com.arm.../IHI0044D_aaelf.pdf.; ///; /// In brief: $a, $t or $d should be emitted at the start of each contiguous; /// region of ARM code, Thumb code or data in a section. In practice, this; /// emission does not rely on explicit assembler directives but on inherent; /// properties of the directives doing the emission (e.g. "".byte"" is data, ""add; /// r0, r0, r0"" an instruction).; ///; /// As a result this system is orthogonal to the DataRegion infrastructure used; /// by MachO. Beware!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMELFStreamer.cpp:4,Extend,Extend,4,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMELFStreamer.cpp,1,['Extend'],['Extend']
Modifiability,/// Extend the generic MCELFStreamer class so that it can mask dangerous; /// instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:4,Extend,Extend,4,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Extend'],['Extend']
Modifiability,"/// Extend the live range \p LR to reach all points in \p Indices. The; /// points in the \p Indices array must be jointly dominated by the union; /// of the existing defs in \p LR and points in \p Undefs.; ///; /// PHI-defs are added as needed to maintain SSA form.; ///; /// If a SlotIndex in \p Indices is the end index of a basic block, \p LR; /// will be extended to be live out of the basic block.; /// If a SlotIndex in \p Indices is jointy dominated only by points in; /// \p Undefs, the live range will not be extended to that point.; ///; /// See also LiveRangeCalc::extend().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervals.h:4,Extend,Extend,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervals.h,4,"['Extend', 'extend']","['Extend', 'extend', 'extended']"
Modifiability,/// Extend the live range of @p LR to reach all uses of Reg.; ///; /// All uses must be jointly dominated by existing liveness. PHI-defs are; /// inserted as needed to preserve SSA form.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervalCalc.h:4,Extend,Extend,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervalCalc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervalCalc.h,1,['Extend'],['Extend']
Modifiability,"/// Extend the live range of @p LR to reach all uses of Reg.; ///; /// If @p LR is a main range, or if @p LI is null, then all uses must be; /// jointly dominated by the definitions from @p LR. If @p LR is a subrange; /// of the live interval @p LI, corresponding to lane mask @p LaneMask,; /// all uses must be jointly dominated by the definitions from @p LR; /// together with definitions of other lanes where @p LR becomes undefined; /// (via <def,read-undef> operands).; /// If @p LR is a main range, the @p LaneMask should be set to ~0, i.e.; /// LaneBitmask::getAll().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervalCalc.h:4,Extend,Extend,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervalCalc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervalCalc.h,1,['Extend'],['Extend']
Modifiability,"/// Extend the multi-lib re-use selection mechanism for RISC-V.; /// This function will try to re-use multi-lib if they are compatible.; /// Definition of compatible:; /// - ABI must be the same.; /// - multi-lib is a subset of current arch, e.g. multi-lib=march=rv32im; /// is a subset of march=rv32imc.; /// - march that contains atomic extension can't reuse multi-lib that; /// doesn't have atomic, vice versa. e.g. multi-lib=march=rv32im and; /// march=rv32ima are not compatible, because software and hardware; /// atomic operation can't work together correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp:4,Extend,Extend,4,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,1,['Extend'],['Extend']
Modifiability,/// Extend the standard ScheduleDAGMILive to provide more context and override; /// the top-level schedule() driver.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:4,Extend,Extend,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,1,['Extend'],['Extend']
Modifiability,"/// Extend this RPageRange to fit the given RColumnRange, i.e. prepend as many synthetic RPageInfos as needed to; /// cover the range in `columnRange`. `RPageInfo`s are constructed to contain as many elements of type `element`; /// given a page size limit of `pageSize` (in bytes); the locator for the referenced pages is `kTypePageZero`.; /// This function is used to make up `RPageRange`s for clusters that contain deferred columns.; /// \return The number of column elements covered by the synthesized RPageInfos",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:4,Extend,Extend,4,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['Extend'],['Extend']
Modifiability,"/// Extend/Truncate \p Expr to \p ToTy considering post-inc uses in \p Loops.; /// For all PostIncLoopSets in \p Loops, first de-normalize \p Expr, then; /// perform the extension/truncate and normalize again, as the normalized form; /// can result in folds that are not valid in the post-inc use contexts. The; /// expressions for all PostIncLoopSets must match, otherwise return nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:4,Extend,Extend,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['Extend'],['Extend']
Modifiability,"/// ExtendWithDeclSpec - Extend the declarator source range to include the; /// given declspec, unless its location is invalid. Adopts the range start if; /// the current range start is invalid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h:4,Extend,ExtendWithDeclSpec,4,interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/DeclSpec.h,2,['Extend'],"['Extend', 'ExtendWithDeclSpec']"
Modifiability,"/// Extended Value Type. Capable of holding value types which are not native; /// for any processor (such as the i12345 type), as well as the types an MVT; /// can represent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:4,Extend,Extended,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,1,['Extend'],['Extended']
Modifiability,/// Extended form to print edge weights.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h:4,Extend,Extended,4,interpreter/llvm-project/llvm/include/llvm/IR/Function.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Function.h,2,['Extend'],['Extended']
Modifiability,/// ExtendedFilter - Extended opcodes are classified based on the value of the; /// mod field [bits 7-6] and the value of the nnn field [bits 5-3].,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86ModRMFilters.h:4,Extend,ExtendedFilter,4,interpreter/llvm-project/llvm/utils/TableGen/X86ModRMFilters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86ModRMFilters.h,2,['Extend'],"['Extended', 'ExtendedFilter']"
Modifiability,/// ExtendedRMFilter - Extended opcodes are classified based on the value of the; /// mod field [bits 7-6] and the value of the nnn field [bits 2-0].,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86ModRMFilters.h:4,Extend,ExtendedRMFilter,4,interpreter/llvm-project/llvm/utils/TableGen/X86ModRMFilters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/X86ModRMFilters.h,2,['Extend'],"['Extended', 'ExtendedRMFilter']"
Modifiability,"/// Extends \p Range to include the token \p Terminator, if it immediately; /// follows the end of the range. Otherwise, returns \p Range unchanged.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h:4,Extend,Extends,4,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,1,['Extend'],['Extends']
Modifiability,/// Extends the flow condition of an environment based on a terminator; /// statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp:4,Extend,Extends,4,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp,1,['Extend'],['Extends']
Modifiability,/// Extends the scheduling region so that V is inside the region.; /// \returns true if the region size is within the limit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:4,Extend,Extends,4,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['Extend'],['Extends']
Modifiability,"/// Extension point for the Value hierarchy. All classes outside of lib/IR; /// that wish to inherit from User should instead inherit from DerivedUser; /// instead. Inheriting from this class is discouraged.; ///; /// Generally speaking, Value is the base of a closed class hierarchy; /// that can't be extended by code outside of lib/IR. This class creates a; /// loophole that allows classes outside of lib/IR to extend User to leverage; /// its use/def list machinery.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h:93,inherit,inherit,93,interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DerivedUser.h,5,"['Inherit', 'extend', 'inherit']","['Inheriting', 'extend', 'extended', 'inherit']"
Modifiability,"/// Extra TLS Variable Data section.; ///; /// If the target needs to put additional information for a TLS variable,; /// it'll go here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h:14,Variab,Variable,14,interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCObjectFileInfo.h,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,"/// Extract a 16-bit value from a vector and zero extend it to; /// i32, corresponds to X86::PEXTRW.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:50,extend,extend,50,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['extend'],['extend']
Modifiability,"/// Extract a C string from \a *offset_ptr.; ///; /// Returns a StringRef for the C String from the data at the offset; /// pointed to by \a offset_ptr. A variable length NULL terminated C; /// string will be extracted and the \a offset_ptr will be; /// updated with the offset of the byte that follows the NULL; /// terminator byte.; ///; /// \param[in,out] OffsetPtr; /// A pointer to an offset within the data that will be advanced; /// by the appropriate number of bytes if the value is extracted; /// correctly. If the offset is out of bounds or there are not; /// enough bytes to extract this value, the offset will be left; /// unmodified.; ///; /// @param[in,out] Err; /// A pointer to an Error object. Upon return the Error object is set to; /// indicate the result (success/failure) of the function. If the Error; /// object is already set when calling this function, no extraction is; /// performed.; ///; /// \return; /// A StringRef for the C string value in the data. If the offset; /// pointed to by \a offset_ptr is out of bounds, or if the; /// offset plus the length of the C string is out of bounds,; /// a default-initialized StringRef will be returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h:155,variab,variable,155,interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,1,['variab'],['variable']
Modifiability,"/// Extract a C string from \a *offset_ptr.; ///; /// Returns a pointer to a C String from the data at the offset; /// pointed to by \a offset_ptr. A variable length NULL terminated C; /// string will be extracted and the \a offset_ptr will be; /// updated with the offset of the byte that follows the NULL; /// terminator byte.; ///; /// @param[in,out] OffsetPtr; /// A pointer to an offset within the data that will be advanced; /// by the appropriate number of bytes if the value is extracted; /// correctly. If the offset is out of bounds or there are not; /// enough bytes to extract this value, the offset will be left; /// unmodified.; ///; /// @param[in,out] Err; /// A pointer to an Error object. Upon return the Error object is set to; /// indicate the result (success/failure) of the function. If the Error; /// object is already set when calling this function, no extraction is; /// performed.; ///; /// @return; /// A pointer to the C string value in the data. If the offset; /// pointed to by \a offset_ptr is out of bounds, or if the; /// offset plus the length of the C string is out of bounds,; /// NULL will be returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h:150,variab,variable,150,interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,1,['variab'],['variable']
Modifiability,"/// Extract a VariableLocation from a MachineInstr.; /// This will only work if Instruction is a debug value instruction; /// and the associated DIExpression is in one of the supported forms.; /// If these requirements are not met, the returned Optional will not; /// have a value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h:14,Variab,VariableLocation,14,interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,1,['Variab'],['VariableLocation']
Modifiability,"/// Extract an 8-bit value from a vector and zero extend it to; /// i32, corresponds to X86::PEXTRB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:50,extend,extend,50,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['extend'],['extend']
Modifiability,"/// Extract an signed integer of size \a byte_size from \a *offset_ptr.; ///; /// Extract a single signed integer value (sign extending if required); /// and update the offset pointed to by \a offset_ptr. The size of; /// the extracted integer is specified by the \a byte_size argument.; /// \a byte_size should have a value greater than or equal to one; /// and less than or equal to eight since the return value is 64; /// bits wide. Any \a byte_size values less than 1 or greater than; /// 8 will result in nothing being extracted, and zero being returned.; ///; /// @param[in,out] offset_ptr; /// A pointer to an offset within the data that will be advanced; /// by the appropriate number of bytes if the value is extracted; /// correctly. If the offset is out of bounds or there are not; /// enough bytes to extract this value, the offset will be left; /// unmodified.; ///; /// @param[in] size; /// The size in bytes of the integer to extract.; ///; /// @return; /// The sign extended signed integer value that was extracted,; /// or zero on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h:126,extend,extending,126,interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DataExtractor.h,2,['extend'],"['extended', 'extending']"
Modifiability,/// Extract the register this frame uses to refer to local variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolRecord.h:59,variab,variables,59,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolRecord.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolRecord.h,1,['variab'],['variables']
Modifiability,/// Extracts a register from the passed constraint (if it is a; /// single-register constraint) and the asm label expression related to a; /// variable in the input or output list of an inline asm statement.; ///; /// This function is used by Sema in order to diagnose conflicts between; /// the clobber list and the input/output lists.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:143,variab,variable,143,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['variab'],['variable']
Modifiability,"/// Extracts the grouped selection ranges from the file that's specified in; /// the -selection=test:<filename> option.; ///; /// The grouped ranges are specified in comments using the following syntax:; /// ""range"" [ group-name ] ""="" [ ""+"" starting-column-offset ] [ ""->""; /// ""+"" ending-line-offset "":""; /// ending-column-position ]; ///; /// The selection range is then computed from this command by taking the ending; /// location of the comment, and adding 'starting-column-offset' to the column; /// for that location. That location in turns becomes the whole selection range,; /// unless 'ending-line-offset' and 'ending-column-position' are specified. If; /// they are specified, then the ending location of the selection range is; /// the starting location's line + 'ending-line-offset' and the; /// 'ending-column-position' column.; ///; /// All selection ranges in one group are expected to produce the same; /// refactoring result.; ///; /// When testing, zero is returned from clang-refactor even when a group; /// produces an initiation error, which is different from normal invocation; /// that returns a non-zero value. This is done on purpose, to ensure that group; /// consistency checks can return non-zero, but still print the output of; /// the group. So even if a test matches the output of group, it will still fail; /// because clang-refactor should return zero on exit when the group results are; /// consistent.; ///; /// \returns std::nullopt on failure (errors are emitted to stderr), or a set of; /// grouped source ranges in the given file otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h:924,refactor,refactoring,924,interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.h,3,['refactor'],"['refactor', 'refactoring']"
Modifiability,/// FIXME: Collector instances are not useful on their own. These no longer; /// serve any purpose except to link in the plugins.; /// Ensure the definition of the builtin GCs gets linked in,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BuiltinGCs.h:121,plugin,plugins,121,interpreter/llvm-project/llvm/include/llvm/IR/BuiltinGCs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/BuiltinGCs.h,1,['plugin'],['plugins']
Modifiability,/// FIXME: this is copied from target AArch64. Needs some code refactor here to; /// put this function in class RegisterBankInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/GISel/PPCRegisterBankInfo.cpp:63,refactor,refactor,63,interpreter/llvm-project/llvm/lib/Target/PowerPC/GISel/PPCRegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/GISel/PPCRegisterBankInfo.cpp,3,['refactor'],['refactor']
Modifiability,"/// FP_EXTEND_HALF(VECTOR, IDX) - Custom extend upper (IDX=0) half or; /// lower (IDX=1) half of v4f32 to v2f64.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:41,extend,extend,41,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['extend'],['extend']
Modifiability,"/// FP_TO_[US]INT_SAT - Convert floating point value in operand 0 to a; /// signed or unsigned scalar integer type given in operand 1 with the; /// following semantics:; ///; /// * If the value is NaN, zero is returned.; /// * If the value is larger/smaller than the largest/smallest integer,; /// the largest/smallest integer is returned (saturation).; /// * Otherwise the result of rounding the value towards zero is returned.; ///; /// The scalar width of the type given in operand 1 must be equal to, or; /// smaller than, the scalar result type width. It may end up being smaller; /// than the result width as a result of integer type legalization.; ///; /// After converting to the scalar integer type in operand 1, the value is; /// extended to the result VT. FP_TO_SINT_SAT sign extends and FP_TO_UINT_SAT; /// zero extends.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:740,extend,extended,740,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,3,['extend'],"['extended', 'extends']"
Modifiability,/// Fetches list of all variables in the clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:24,variab,variables,24,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Fetches list of variables associated with this clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:20,variab,variables,20,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Finalize a specific subprogram - no new variables may be added to this; /// subprogram afterwards.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:44,variab,variables,44,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,1,['variab'],['variables']
Modifiability,/// FinalizeVarWithDestructor - Prepare for calling destructor on the; /// constructed variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:87,variab,variable,87,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Find DIE for the given subprogram and attach appropriate; /// DW_AT_low_pc and DW_AT_high_pc attributes. If there are global; /// variables in this scope then create and insert DIEs for these; /// variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h:134,variab,variables,134,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h,2,['variab'],['variables']
Modifiability,"/// Find ObjC Container. This is commonly used for assigning for looking up; /// instance variables that are assigned to either a category or class.; ///; /// \param IsIVar If true, the name is the name of the IVar, otherwise it will; /// be looked up as the name of the container.; /// \param Name Either the name of ivar or name of container.; /// \return The non-owning pointer to record in; /// slice.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h:90,variab,variables,90,interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,1,['variab'],['variables']
Modifiability,/// Find ObjC instance variable.; ///; /// \param IsScopedName This is used to determine how to parse the name.; /// \param Name Either the full name of the symbol or just the ivar.; /// \return The non-owning pointer to record in slice.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h:23,variab,variable,23,interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TextAPI/RecordsSlice.h,1,['variab'],['variable']
Modifiability,/// Find a target name such that looking for it in TargetRegistry by that name; /// returns the same target. We expect that there is at least one target; /// configured with this property.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/CommandLineArgs.h:158,config,configured,158,interpreter/llvm-project/clang/include/clang/Testing/CommandLineArgs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Testing/CommandLineArgs.h,1,['config'],['configured']
Modifiability,"/// Find a variable template partial specialization which was; /// instantiated; /// from the given member partial specialization.; ///; /// \param D a member variable template partial specialization.; ///; /// \returns the variable template partial specialization which was; /// instantiated; /// from the given member partial specialization, or nullptr if no such; /// partial specialization exists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:11,variab,variable,11,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,3,['variab'],['variable']
Modifiability,/// Find abstract variable associated with Var.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h:18,variab,variable,18,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h,1,['variab'],['variable']
Modifiability,/// Find all local variable captures in the statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,1,['variab'],['variable']
Modifiability,/// Find dependent variables within child patterns,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:19,variab,variables,19,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,1,['variab'],['variables']
Modifiability,/// Find linked dbg.assign and generate a new one with the correct; /// FragmentInfo. Link Inst to the new dbg.assign. If Value is nullptr the; /// value component is copied from the old dbg.assign to the new.; /// \param OldAlloca Alloca for the variable before splitting.; /// \param IsSplit True if the store (not necessarily alloca); /// is being split.; /// \param OldAllocaOffsetInBits Offset of the slice taken from OldAlloca.; /// \param SliceSizeInBits New number of bits being written to.; /// \param OldInst Instruction that is being split.; /// \param Inst New instruction performing this part of the; /// split store.; /// \param Dest Store destination.; /// \param Value Stored value.; /// \param DL Datalayout.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:247,variab,variable,247,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['variab'],['variable']
Modifiability,"/// Find matching pairs of integer div/rem ops (they have the same numerator,; /// denominator, and signedness). If they exist in different basic blocks, bring; /// them together by hoisting or replace the common division operation that is; /// implicit in the remainder:; /// X % Y <--> X - ((X / Y) * Y).; ///; /// We can largely ignore the normal safety and cost constraints on speculation; /// of these ops when we find a matching pair. This is because we are already; /// guaranteed that any exceptions and most cost are already incurred by the; /// first member of the pair.; ///; /// Note: This transform could be an oddball enhancement to EarlyCSE, GVN, or; /// SimplifyCFG, but it's split off on its own because it's different enough; /// that it doesn't quite match the stated objectives of those passes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp:632,enhance,enhancement,632,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp,1,['enhance'],['enhancement']
Modifiability,/// Find or create a global variable. It will be initialized by random; /// constants that satisfies \c Pred. It will also report whether this global; /// variable found or created.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/RandomIRBuilder.h:28,variab,variable,28,interpreter/llvm-project/llvm/include/llvm/FuzzMutate/RandomIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/FuzzMutate/RandomIRBuilder.h,2,['variab'],['variable']
Modifiability,"/// Find the block that contains the loop control variable and the; /// loop test. This will return the latch block if it's one of the exiting; /// blocks. Otherwise, return the exiting block. Return 'null' when; /// multiple exiting blocks are present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h:50,variab,variable,50,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h,1,['variab'],['variable']
Modifiability,"/// Find the constructor to use for inherited construction of a base class,; /// and whether that base class constructor inherits the constructor from a; /// virtual base class (in which case it won't actually invoke it).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:36,inherit,inherited,36,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,2,['inherit'],"['inherited', 'inherits']"
Modifiability,"/// Find the method in \p RD that corresponds to this one.; ///; /// Find if \p RD or one of the classes it inherits from override this method.; /// If so, return it. \p RD is assumed to be a subclass of the class defining; /// this method (or be the class itself), unless \p MayBeBase is set to true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:108,inherit,inherits,108,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inherits']
Modifiability,"/// Find the register that contains the loop controlling; /// induction variable.; /// If successful, it will return true and set the \p Reg, \p IVBump; /// and \p IVOp arguments. Otherwise it will return false.; /// The returned induction register is the register R that follows the; /// following induction pattern:; /// loop:; /// R = phi ..., [ R.next, LatchBlock ]; /// R.next = R + #bump; /// if (R.next < #N) goto loop; /// IVBump is the immediate value added to R, and IVOp is the instruction; /// ""R.next = R + #bump"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:72,variab,variable,72,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,1,['variab'],['variable']
Modifiability,/// FindGlobalVariableNamed - Search all of the active modules to find the global variable; /// that defines Name. This is very slow operation and shouldn't be used for; /// general code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h:82,variab,variable,82,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/ExecutionEngine.h,1,['variab'],['variable']
Modifiability,/// FindGlobalVariableNamed - Search all of the active modules to find the; /// global variable that defines Name. This is very slow operation and; /// shouldn't be used for general code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h:87,variab,variable,87,interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,1,['variab'],['variable']
Modifiability,"/// Finds a default timeout for debuginfod HTTP requests. Checks; /// DEBUGINFOD_TIMEOUT environment variable, default is 90 seconds (90000 ms).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:101,variab,variable,101,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,1,['variab'],['variable']
Modifiability,/// Finds dbg.declare intrinsics declaring local variables as living in the; /// memory that 'V' points to.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:49,variab,variables,49,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,1,['variab'],['variables']
Modifiability,/// Finds default array of Debuginfod server URLs by checking DEBUGINFOD_URLS; /// environment variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:95,variab,variable,95,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,1,['variab'],['variable']
Modifiability,"/// Finds the closing sequence of a regex variable usage or definition.; ///; /// \p Str has to point in the beginning of the definition (right after the; /// opening sequence). \p SM holds the SourceMgr used for error reporting.; /// \returns the offset of the closing sequence within Str, or npos if it; /// was not found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:42,variab,variable,42,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,"/// Finds the smallest simple value type that is greater than or equal to; /// half the width of this EVT. If no simple value type can be found, an; /// extended integer value type of half the size (rounded up) is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:153,extend,extended,153,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,1,['extend'],['extended']
Modifiability,/// Finish building a variable declaration for a for-range statement.; /// \return true if an error occurs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['variab'],['variable']
Modifiability,/// FinishCXXForRangeStmt - Attach the body to a C++0x for-range statement.; /// This is a separate step from ActOnCXXForRangeStmt because analysis of the; /// body cannot be performed until after the type of the range variable is; /// determined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:219,variab,variable,219,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['variab'],['variable']
Modifiability,/// First variable location definition that comes before \p Before.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h:10,variab,variable,10,interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,1,['variab'],['variable']
Modifiability,/// FirstNearlyEmptyVBase - The first nearly empty virtual base class in; /// inheritance graph order. Used for determining the primary base class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:78,inherit,inheritance,78,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['inherit'],['inheritance']
Modifiability,"/// Fix the data flow of the induction variable.; /// The desired flow is: phi ---> bump -+-> comparison-in-latch.; /// |; /// +-> back to phi; /// where ""bump"" is the increment of the induction variable:; /// iv = iv + #const.; /// Due to some prior code transformations, the actual flow may look; /// like this:; /// phi -+-> bump ---> back to phi; /// |; /// +-> comparison-in-latch (against upper_bound-bump),; /// i.e. the comparison that controls the loop execution may be using; /// the value of the induction variable from before the increment.; ///; /// Return true if the loop's flow is the desired one (i.e. it's; /// either been fixed, or no fixing was necessary).; /// Otherwise, return false. This can happen if the induction variable; /// couldn't be identified, or if the value in the latch's comparison; /// cannot be adjusted to reflect the post-bump value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,4,['variab'],['variable']
Modifiability,"/// Fixable gadgets correspond to code patterns that aren't always unsafe but need to be; /// properly recognized in order to emit fixes. For example, if a raw pointer-type; /// variable is replaced by a safe C++ container, every use of such variable must be; /// carefully considered and possibly updated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:178,variab,variable,178,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,2,['variab'],['variable']
Modifiability,"/// Fixed, initial storage for known local variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h:43,variab,variables,43,interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,1,['variab'],['variables']
Modifiability,/// Flag indicating if we're initializing a global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:51,variab,variable,51,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,1,['variab'],['variable']
Modifiability,/// Flag inidicating if we're initializing an already created; /// variable. This is set in visitInitializer().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:67,variab,variable,67,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,1,['variab'],['variable']
Modifiability,/// Flag to determine if we rewrite function signatures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:28,rewrite,rewrite,28,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['rewrite'],['rewrite']
Modifiability,"/// Fold an IV operand into its use. This removes increments of an; /// aligned IV when used by a instruction that ignores the low bits.; ///; /// IVOperand is guaranteed SCEVable, but UseInst may not be.; ///; /// Return the operand of IVOperand for this induction variable if IVOperand can; /// be folded (in case more folding opportunities have been exposed).; /// Otherwise return null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:266,variab,variable,266,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['variab'],['variable']
Modifiability,"/// Fold icmp Pred X, C.; /// TODO: This code structure does not make sense. The saturating add fold; /// should be moved to some other helper and extended as noted below (it is also; /// possible that code has been made unnecessary - do we canonicalize IR to; /// overflow/saturating intrinsics or not?).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:147,extend,extended,147,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['extend'],['extended']
Modifiability,/// For ARM targets returns a mask defining which coprocessors are configured; /// as Custom Datapath.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:67,config,configured,67,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['config'],['configured']
Modifiability,"/// For a block converted from a C++ lambda, returns the block; /// VarRegion for the variable holding the captured C++ lambda record.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:86,variab,variable,86,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['variab'],['variable']
Modifiability,"/// For a closure type, retrieve the mapping from captured; /// variables and \c this to the non-static data members that store the; /// values or references of the captures.; ///; /// \param Captures Will be populated with the mapping from captured; /// variables to the corresponding fields.; ///; /// \param ThisCapture Will be set to the field declaration for the; /// \c this capture.; ///; /// \note No entries will be added for init-captures, as they do not capture; /// variables.; ///; /// \note If multiple versions of the lambda are merged together, they may; /// have different variable declarations corresponding to the same capture.; /// In that case, all of those variable declarations will be added to the; /// Captures list, so it may have more than one variable listed per field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:64,variab,variables,64,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,6,['variab'],"['variable', 'variables']"
Modifiability,"/// For a variable \p Var with the live-in value \p Value, attempts to resolve; /// the DbgValue to a concrete DBG_VALUE, emitting that value and loading the; /// tracking information to track Var throughout the block.; /// \p ValueToLoc is a map containing the best known location for every; /// ValueIDNum that Value may use.; /// \p MBB is the basic block that we are loading the live-in value for.; /// \p DbgOpStore is the map containing the DbgOpID->DbgOp mapping needed to; /// determine the values used by Value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// For all of the arithmetic operators provided here any invalid state is; /// perpetuated and cannot be removed. Once a cost becomes invalid it stays; /// invalid, and it also inherits any invalid state from the RHS.; /// Arithmetic work on the actual values is implemented with saturation,; /// to avoid overflow when using more extreme cost values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h:178,inherit,inherits,178,interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/InstructionCost.h,1,['inherit'],['inherits']
Modifiability,"/// For binary operations which assign to a variable (writes), we need to check; /// whether we hold any required mutexes.; /// FIXME: Deal with non-primitive types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,"/// For each local variable that all of its user are only used inside one of; /// suspended region, we sink their lifetime.start markers to the place where; /// after the suspend block. Doing so minimizes the lifetime of each variable,; /// hence minimizing the amount of data we end up putting on the frame.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,2,['variab'],['variable']
Modifiability,"/// For each object containing debug info, installs JITLink passes to synthesize; /// a debug object and then register it via the GDB JIT-registration interface.; ///; /// Currently MachO only. For ELF use DebugObjectManagerPlugin. These two; /// plugins will be merged in the near future.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h:247,plugin,plugins,247,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebuggerSupportPlugin.h,1,['plugin'],['plugins']
Modifiability,"/// For each user variable, keep a list of instruction ranges where this; /// variable is accessible. The variables are listed in order of appearance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h:18,variab,variable,18,interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// For each variable in aset, prepend prefix to its name and add; /// to the internal store. Note this will not appear in the produced; /// dataset unless CommitSet is called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DetailedOutputAggregator.h:13,variab,variable,13,roofit/roostats/inc/RooStats/DetailedOutputAggregator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/DetailedOutputAggregator.h,1,['variab'],['variable']
Modifiability,"/// For every instruction from the worklist, check to see if it has any uses; /// that are outside the current loop. If so, insert LCSSA PHI nodes and; /// rewrite the uses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp:156,rewrite,rewrite,156,interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// For targets without i1 registers, this gives the nature of the high-bits; /// of boolean values held in types wider than i1.; ///; /// ""Boolean values"" are special true/false values produced by nodes like; /// SETCC and consumed (as the condition) by nodes like SELECT and BRCOND.; /// Not to be confused with general values promoted from i1. Some cpus; /// distinguish between vectors of boolean and scalars; the isVec parameter; /// selects between the two kinds. For example on X86 a scalar boolean should; /// be zero extended from i1, while the elements of a vector of booleans; /// should be sign extended from i1.; ///; /// Some cpus also treat floating point types the same way as they treat; /// vectors instead of the way they treat scalars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:526,extend,extended,526,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['extend'],['extended']
Modifiability,"/// For the given VF and UF and maximum trip count computed for the loop, return; /// whether the induction variable might overflow in the vectorized loop. If not,; /// then we know a runtime overflow check always evaluates to false and can be; /// removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:108,variab,variable,108,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,"/// For unary operations which read and write a variable, we need to; /// check whether we hold any required mutexes. Reads are checked in; /// VisitCastExpr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:48,variab,variable,48,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,"/// Forces the generation of exactly `n` events even for extended PDFs. Set to 0 to; /// use the Poisson-distributed events from the extended PDF.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h:57,extend,extended,57,roofit/roostats/inc/RooStats/ToyMCSampler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ToyMCSampler.h,2,['extend'],['extended']
Modifiability,"/// ForeachLoop - Record the iteration state associated with a for loop.; /// This is used to instantiate items in the loop body.; ///; /// IterVar is allowed to be null, in which case no iteration variable is; /// defined in the loop at all. (This happens when a ForeachLoop is; /// constructed by desugaring an if statement.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:198,variab,variable,198,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,1,['variab'],['variable']
Modifiability,"/// Form a reference to the specialization of the given variable template; /// corresponding to the specified argument list, or a null-but-valid result; /// if the arguments are dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:56,variab,variable,56,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Format to use for expressions using this variable without an explicit; /// format.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:45,variab,variable,45,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,/// Frame storing local variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h:24,variab,variables,24,interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,1,['variab'],['variables']
Modifiability,/// Freely adapt every user of V as-if V was changed to !V.; /// WARNING: only if canFreelyInvertAllUsersOf() said this can be done.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:11,adapt,adapt,11,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['adapt'],['adapt']
Modifiability,/// Function and variable summary information to aid decisions and; /// implementation of importing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:17,variab,variable,17,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['variab'],['variable']
Modifiability,/// Function called during global variable; /// initialization,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:34,variab,variable,34,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Function or variable declarations to be checked for whether the deferred; /// diagnostics should be emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:16,variab,variable,16,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Function tries to capture lambda's captured variables in the OpenMP region; /// before the original lambda is captured.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:48,variab,variables,48,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variables']
Modifiability,"/// Function type used by lookupInBases() to determine whether a; /// specific base class subobject matches the lookup criteria.; ///; /// \param Specifier the base-class specifier that describes the inheritance; /// from the base class we are trying to match.; ///; /// \param Path the current path, from the most-derived class down to the; /// base named by the \p Specifier.; ///; /// \returns true if this base matched the search criteria, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:200,inherit,inheritance,200,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inheritance']
Modifiability,/// Function with call of destructors for private variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:50,variab,variables,50,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,/// Functions for poisoning/unpoisoning local variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:46,variab,variables,46,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['variab'],['variables']
Modifiability,"/// GPRC = TLSGD_AIX, TOC_ENTRY, TOC_ENTRY; /// G8RC = TLSGD_AIX, TOC_ENTRY, TOC_ENTRY; /// Op that combines two register copies of TOC entries; /// (region handle into R3 and variable offset into R4) followed by a; /// GET_TLS_ADDR node which will be expanded to a call to __get_tls_addr.; /// This node is used in 64-bit mode as well (in which case the result is; /// G8RC and inputs are X3/X4).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:176,variab,variable,176,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['variab'],['variable']
Modifiability,"/// GPRC, CHAIN = LFIWAX CHAIN, Ptr - This is a floating-point; /// load which sign-extends from a 32-bit integer value into the; /// destination 64-bit register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:84,extend,extends,84,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['extend'],['extends']
Modifiability,"/// GPRC, CHAIN = LFIWZX CHAIN, Ptr - This is a floating-point; /// load which zero-extends from a 32-bit integer value into the; /// destination 64-bit register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:84,extend,extends,84,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['extend'],['extends']
Modifiability,"/// GPRC, CHAIN = LXSIZX, CHAIN, Ptr, ByteWidth - This is a load of an; /// integer smaller than 64 bits into a VSR. The integer is zero-extended.; /// This can be used for converting loaded integers to floating point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:137,extend,extended,137,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['extend'],['extended']
Modifiability,"/// Gather more information about \p V as a variable. This can be debug info,; /// information from the alloca, etc. Since \p V can represent more than a; /// single variable, they will all be added to the remark.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h:44,variab,variable,44,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/MemoryOpRemark.h,2,['variab'],['variable']
Modifiability,/// Generate a USR fragment for an Objective-C instance variable. The; /// complete USR can be created by concatenating the USR for the; /// encompassing class with this USR fragment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h:56,variab,variable,56,interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Index/USRGeneration.h,1,['variab'],['variable']
Modifiability,"/// Generate a canonical vector induction variable of the vector loop, with",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:42,variab,variable,42,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['variab'],['variable']
Modifiability,"/// Generate a canonical vector induction variable of the vector loop, with; /// start = {<Part*VF, Part*VF+1, ..., Part*VF+VF-1> for 0 <= Part < UF}, and; /// step = <VF*UF, VF*UF, ..., VF*UF>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h:42,variab,variable,42,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlan.h,1,['variab'],['variable']
Modifiability,"/// Generate an outlined function for the body of a CapturedStmt, store any; /// captured variables into the captured struct, and call the outlined function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:90,variab,variables,90,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['variab'],['variables']
Modifiability,/// Generate code for a __block variable's dispose helper.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:32,variab,variable,32,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,"/// Generate code to compute the remainder of two integers of bitwidth up to; /// 32 bits. Uses the above routines and extends the inputs/truncates the; /// outputs to operate in 32 bits; that is, these routines are good for targets; /// that have no or very little suppport for smaller than 32 bit integer; /// arithmetic.; ///; /// Replace Rem with emulation code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp:119,extend,extends,119,interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,1,['extend'],['extends']
Modifiability,/// Generate code to compute the remainder of two integers of bitwidth up to; /// 64 bits. Uses the above routines and extends the inputs/truncates the; /// outputs to operate in 64 bits.; ///; /// Replace Rem with emulation code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp:119,extend,extends,119,interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,1,['extend'],['extends']
Modifiability,"/// Generate code to divide two integers of bitwidth up to 32 bits. Uses the; /// above routines and extends the inputs/truncates the outputs to operate; /// in 32 bits; that is, these routines are good for targets that have no; /// or very little support for smaller than 32 bit integer arithmetic.; ///; /// Replace Div with emulation code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp:101,extend,extends,101,interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,1,['extend'],['extends']
Modifiability,/// Generate code to divide two integers of bitwidth up to 64 bits. Uses the; /// above routines and extends the inputs/truncates the outputs to operate; /// in 64 bits.; ///; /// Replace Div with emulation code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp:101,extend,extends,101,interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/IntegerDivision.cpp,1,['extend'],['extends']
Modifiability,/// Generate code to restore the stack after all stack restore points; /// in \p StackRestorePoints.; ///; /// \returns A local variable in which to maintain the dynamic top of the; /// unsafe stack if needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp:128,variab,variable,128,interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp,1,['variab'],['variable']
Modifiability,/// Generate conditional branch and relevant BasicBlocks through which private; /// threads copy the 'copyin' variables from Master copy to threadprivate; /// copies.; ///; /// \param IP insertion block for copyin conditional; /// \param MasterVarPtr a pointer to the master variable; /// \param PrivateVarPtr a pointer to the threadprivate variable; /// \param IntPtrTy Pointer size type; /// \param BranchtoEnd Create a branch between the copyin.not.master blocks; //				 and copy.in.end block; ///; /// \returns The insertion point where copying operation to be emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:110,variab,variables,110,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// Generate the copy-helper function for a block closure object:; /// static void block_copy_helper(block_t *dst, block_t *src);; /// The runtime will have previously initialized 'dst' by doing a; /// bit-copy of 'src'.; ///; /// Note that this copies an entire block closure object to the heap;; /// it should not be confused with a 'byref copy helper', which moves; /// the contents of an individual __block variable to the heap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:411,variab,variable,411,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,"/// Generate the destroy-helper function for a block closure object:; /// static void block_destroy_helper(block_t *theBlock);; ///; /// Note that this destroys a heap-allocated block closure object;; /// it should not be confused with a 'byref destroy helper', which; /// destroys the heap-allocated contents of an individual __block; /// variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:340,variab,variable,340,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,/// Generate types and variables for globals.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.h:23,variab,variables,23,interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.h,1,['variab'],['variables']
Modifiability,/// GenerateCXXGlobalCleanUpFunc - Generates code for cleaning up global; /// variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:78,variab,variables,78,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variables']
Modifiability,/// GenerateCXXGlobalInitFunc - Generates code for initializing global; /// variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:76,variab,variables,76,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variables']
Modifiability,/// Generates a list of property metadata structures. This follows the same; /// pattern as method and instance variable metadata lists.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:112,variab,variable,112,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['variab'],['variable']
Modifiability,/// Generates a unique string for an externally visible type for use with TBAA; /// or type uniquing.; /// TODO: Extend this to internal types by generating names that are unique; /// across translation units so it can be used with LTO.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Mangle.h:113,Extend,Extend,113,interpreter/llvm-project/clang/include/clang/AST/Mangle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Mangle.h,1,['Extend'],['Extend']
Modifiability,"/// Generates an instance variable list structure. This is a structure; /// containing a size and an array of structures containing instance variable; /// metadata. This is used purely for introspection in the fragile ABI. In; /// the non-fragile ABI, it's used for instance variable fixup.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,3,['variab'],['variable']
Modifiability,"/// Generates code to check that this instruction is a constant whose value; /// meets an immediate predicate.; ///; /// Immediates are slightly odd since they are typically used like an operand; /// but are represented as an operator internally. We typically write simm8:$src; /// in a tablegen pattern, but this is just syntactic sugar for; /// (imm:i32)<<P:Predicate_simm8>>:$imm which more directly describes the nodes; /// that will be matched and the predicate (which is attached to the imm; /// operator) that will be tested. In SelectionDAG this describes a; /// ConstantSDNode whose internal value will be tested using the simm8; /// predicate.; ///; /// The corresponding GlobalISel representation is %1 = G_CONSTANT iN Value. In; /// this representation, the immediate could be tested with an; /// InstructionMatcher, InstructionOpcodeMatcher, OperandMatcher, and a; /// OperandPredicateMatcher-subclass to check the Value meets the predicate but; /// there are two implementation issues with producing that matcher; /// configuration from the SelectionDAG pattern:; /// * ImmLeaf is a PatFrag whose root is an InstructionMatcher. This means that; /// were we to sink the immediate predicate to the operand we would have to; /// have two partial implementations of PatFrag support, one for immediates; /// and one for non-immediates.; /// * At the point we handle the predicate, the OperandMatcher hasn't been; /// created yet. If we were to sink the predicate to the OperandMatcher we; /// would also have to complicate (or duplicate) the code that descends and; /// creates matchers for the subtree.; /// Overall, it's simpler to handle it in the place it was found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:1032,config,configuration,1032,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['config'],['configuration']
Modifiability,"/// Generates unique name for artificial threadprivate variables.; /// Format is: <Prefix> ""."" <Decl_mangled_name> ""_"" ""<Decl_start_loc_raw_enc>""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:55,variab,variables,55,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,/// Generator for '#omp critical'; ///; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the region body code.; /// \param FiniCB Callback to finalize variable copies.; /// \param CriticalName name of the lock used by the critical directive; /// \param HintInst Hint Instruction for hint clause associated with critical; ///; /// \returns The insertion position *after* the critical.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:211,variab,variable,211,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,/// Generator for '#omp masked'; ///; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the region code.; /// \param FiniCB Callback to finialize variable copies.; ///; /// \returns The insertion position *after* the masked.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:205,variab,variable,205,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,/// Generator for '#omp master'; ///; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the region code.; /// \param FiniCB Callback to finalize variable copies.; ///; /// \returns The insertion position *after* the master.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:204,variab,variable,204,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,"/// Generator for '#omp ordered [threads | simd]'; ///; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the region code.; /// \param FiniCB Callback to finalize variable copies.; /// \param IsThreads If true, with threads clause or without clause;; /// otherwise, with simd clause;; ///; /// \returns The insertion position *after* the ordered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:222,variab,variable,222,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,"/// Generator for '#omp parallel'; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion points to be used for alloca instructions.; /// \param BodyGenCB Callback that will generate the region code.; /// \param PrivCB Callback to copy a given variable (think copy constructor).; /// \param FiniCB Callback to finalize variable copies.; /// \param IfCondition The evaluated 'if' clause expression, if any.; /// \param NumThreads The evaluated 'num_threads' clause expression, if any.; /// \param ProcBind The value of the 'proc_bind' clause (see ProcBindKind).; /// \param IsCancellable Flag to indicate a cancellable parallel region.; ///; /// \returns The insertion position *after* the parallel.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:288,variab,variable,288,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,2,['variab'],['variable']
Modifiability,/// Generator for '#omp section'; ///; /// \param Loc The insert and source location description.; /// \param BodyGenCB Callback that will generate the region body code.; /// \param FiniCB Callback to finalize variable copies.; /// \returns The insertion position *after* the section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:210,variab,variable,210,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,"/// Generator for '#omp sections'; ///; /// \param Loc The insert and source location description.; /// \param AllocaIP The insertion points to be used for alloca instructions.; /// \param SectionCBs Callbacks that will generate body of each section.; /// \param PrivCB Callback to copy a given variable (think copy constructor).; /// \param FiniCB Callback to finalize variable copies.; /// \param IsCancellable Flag to indicate a cancellable parallel region.; /// \param IsNowait If true, barrier - to ensure all sections are executed; /// before moving forward will not be generated.; /// \returns The insertion position *after* the sections.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:295,variab,variable,295,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,2,['variab'],['variable']
Modifiability,"/// Generator for '#omp single'; ///; /// \param Loc The source location description.; /// \param BodyGenCB Callback that will generate the region code.; /// \param FiniCB Callback to finalize variable copies.; /// \param IsNowait If false, a barrier is emitted.; /// \param DidIt Local variable used as a flag to indicate 'single' thread; ///; /// \returns The insertion position *after* the single call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:193,variab,variable,193,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,2,['variab'],['variable']
Modifiability,"/// Generator for __kmpc_copyprivate; ///; /// \param Loc The source location description.; /// \param BufSize Number of elements in the buffer.; /// \param CpyBuf List of pointers to data to be copied.; /// \param CpyFn function to call for copying data.; /// \param DidIt flag variable; 1 for 'single' thread, 0 otherwise.; ///; /// \return The insertion position *after* the CopyPrivate call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:279,variab,variable,279,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,"/// Generator for the control flow structure of an OpenMP canonical loop.; ///; /// This generator operates on the logical iteration space of the loop, i.e.; /// the caller only has to provide a loop trip count of the loop as defined by; /// base language semantics. The trip count is interpreted as an unsigned; /// integer. The induction variable passed to \p BodyGenCB will be of the same; /// type and run from 0 to \p TripCount - 1. It is up to the callback to; /// convert the logical iteration variable to the loop counter variable in the; /// loop body.; ///; /// \param Loc The insert and source location description. The insert; /// location can be between two instructions or the end of a; /// degenerate block (e.g. a BB under construction).; /// \param BodyGenCB Callback that will generate the loop body code.; /// \param TripCount Number of iterations the loop body is executed.; /// \param Name Base name used to derive BB and instruction names.; ///; /// \returns An object representing the created control flow structure which; /// can be used for loop-associated directives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:340,variab,variable,340,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,3,['variab'],['variable']
Modifiability,/// Generic information that describes an internal control variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:59,variab,variable,59,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['variab'],['variable']
Modifiability,"/// Generic interface for extending the MCAsmParser,; /// which is implemented by target and object file assembly parser; /// implementations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h:26,extend,extending,26,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParserExtension.h,1,['extend'],['extending']
Modifiability,/// Generic scope for local variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:28,variab,variables,28,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,1,['variab'],['variables']
Modifiability,/// Get In variable of the combiner.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:11,variab,variable,11,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,1,['variab'],['variable']
Modifiability,/// Get Orig variable of the initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:13,variab,variable,13,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,1,['variab'],['variable']
Modifiability,/// Get Out variable of the combiner.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,1,['variab'],['variable']
Modifiability,/// Get Priv variable of the initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:13,variab,variable,13,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,1,['variab'],['variable']
Modifiability,/// Get RewriteKind value in OverloadCandidateRewriteKind type (This; /// function is to workaround the spurious GCC bitfield enum warning),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:8,Rewrite,RewriteKind,8,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h,1,['Rewrite'],['RewriteKind']
Modifiability,"/// Get a clone of the NLL variable from the markov chain",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h:27,variab,variable,27,roofit/roostats/inc/RooStats/MCMCInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h,1,['variab'],['variable']
Modifiability,"/// Get a clone of the weight variable from the markov chain",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h:30,variab,variable,30,roofit/roostats/inc/RooStats/MCMCInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCInterval.h,1,['variab'],['variable']
Modifiability,"/// Get a constant N-bit value, zero extended or truncated from; /// a 64-bit value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h:37,extend,extended,37,interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IRBuilder.h,1,['extend'],['extended']
Modifiability,/// Get a promoted operand and sign extend it to the final size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:36,extend,extend,36,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,1,['extend'],['extend']
Modifiability,/// Get a promoted operand and zero extend it to the final size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:36,extend,extend,36,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,1,['extend'],['extend']
Modifiability,/// Get a section with the provided group identifier. This section is; /// named by concatenating \p Prefix with '.' then \p Suffix. The \p Type; /// describes the type of the section and \p Flags are used to further; /// configure this named section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:222,config,configure,222,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,1,['config'],['configure']
Modifiability,/// Get a variable from its \p ID.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,/// Get a variable or parameter for storing global thread id; /// inside OpenMP construct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,5,['variab'],['variable']
Modifiability,/// Get address size from CUs.; /// TODO: refactor compile_units() to make this const.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:42,refactor,refactor,42,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,1,['refactor'],['refactor']
Modifiability,/// Get all the concrete records that inherit from all the specified; /// classes. The classes must be defined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:38,inherit,inherit,38,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['inherit'],['inherit']
Modifiability,"/// Get all the concrete records that inherit from specified class, if the; /// class is defined. Returns an empty vector if the class is not defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:38,inherit,inherit,38,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['inherit'],['inherit']
Modifiability,/// Get all the loads/store uses for global variable \p GV.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:44,variab,variable,44,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['variab'],['variable']
Modifiability,/// Get an LValue for the current ThreadID variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:43,variab,variable,43,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,2,['variab'],['variable']
Modifiability,/// Get an LValue for the current ThreadID variable.; /// \return LValue for thread id variable. This LValue always has type int32*.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:43,variab,variable,43,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,2,['variab'],['variable']
Modifiability,"/// Get an appropriate address info offsets array.; ///; /// The address table in the GSYM file is stored as array of 1, 2, 4 or 8; /// byte offsets from the The gsym::Header::BaseAddress. The table is stored; /// internally as a array of bytes that are in the correct endianness. When; /// we access this table we must get an array that matches those sizes. This; /// templatized helper function is used when accessing address offsets in the; /// AddrOffsets member variable.; ///; /// \returns An ArrayRef of an appropriate address offset size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:467,variab,variable,467,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,1,['variab'],['variable']
Modifiability,"/// Get an immediate that must be 32-bits, and treated as zero extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:63,extend,extended,63,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,1,['extend'],['extended']
Modifiability,"/// Get descriptive name for memory region. The name is obtained from; /// the variable/field declaration retrieved from the memory region.; /// Regions that point to an element of an array are returned as: ""arr[0]"".; /// Regions that point to a struct are returned as: ""st.var"".; //; /// \param UseQuotes Set if the name should be quoted.; ///; /// \returns variable name for memory region",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:79,variab,variable,79,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,2,['variab'],['variable']
Modifiability,"/// Get extra data associated with this derived type.; ///; /// Class type for pointer-to-members, objective-c property node for ivars,; /// global constant wrapper for static members, or virtual base pointer offset; /// for inheritance.; ///; /// TODO: Separate out types that need this extra operand: pointer-to-member; /// types and member fields (static members and ivars).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:225,inherit,inheritance,225,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['inherit'],['inheritance']
Modifiability,"/// Get flags suitable for multilib selection, based on the provided clang; /// command line arguments. The command line arguments aren't suitable to be; /// used directly for multilib selection because they are not normalized and; /// normalization is a complex process. The result of this function is similar; /// to clang command line arguments except that the list of arguments is; /// incomplete. Only certain command line arguments are processed. If more; /// command line arguments are needed for multilib selection then this; /// function should be extended.; /// To allow users to find out what flags are returned, clang accepts a; /// -print-multi-flags-experimental argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:557,extend,extended,557,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['extend'],['extended']
Modifiability,/// Get list of lastprivate variables from the teams distribute ... or; /// teams {distribute ...} directives.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:28,variab,variables,28,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variables']
Modifiability,/// Get list of reduction variables from the teams ... directives.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:26,variab,variables,26,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variables']
Modifiability,/// Get list of variable names from the Value2Index map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstraintSystem.h:16,variab,variable,16,interpreter/llvm-project/llvm/include/llvm/Analysis/ConstraintSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ConstraintSystem.h,1,['variab'],['variable']
Modifiability,"/// Get low and high bound of the variable.; /// \param name Optional range name. If not given, the default range will be used.; /// \return A pair with [lowerBound, upperBound]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:34,variab,variable,34,roofit/roofitcore/inc/RooAbsRealLValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h,1,['variab'],['variable']
Modifiability,/// Get or create global variable DIE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h:25,variab,variable,25,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h,1,['variab'],['variable']
Modifiability,"/// Get reference to Fit configuration (NOTE: it will be invalid when class is deleted)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h:25,config,configuration,25,hist/hist/inc/TBackCompFitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h,1,['config'],['configuration']
Modifiability,/// Get sign extended value if possible; ///; /// This method attempts to return the value of this APInt as a sign extended; /// int64_t. The bitwidth must be <= 64 or the value must fit within an; /// int64_t. Otherwise no value is returned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:13,extend,extended,13,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,['extend'],['extended']
Modifiability,/// Get sign extended value; ///; /// This method attempts to return the value of this APInt as a sign extended; /// int64_t. The bit width must be <= 64 or the value must fit within an; /// int64_t. Otherwise an assertion will result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:13,extend,extended,13,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,['extend'],['extended']
Modifiability,"/// Get target favored AST address space of a global variable for languages; /// other than OpenCL and CUDA.; /// If \p D is nullptr, returns the default target favored address space; /// for global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:53,variab,variable,53,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,2,['variab'],['variable']
Modifiability,"/// Get the AutoType whose type will be deduced for a variable with; /// an initializer of this type. This looks through declarators like pointer; /// types, but not through decltype or typedefs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:54,variab,variable,54,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['variab'],['variable']
Modifiability,"/// Get the DeducedType whose type will be deduced for a variable with; /// an initializer of this type. This looks through declarators like pointer; /// types, but not through decltype or typedefs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:57,variab,variable,57,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['variab'],['variable']
Modifiability,"/// Get the FragmentInfo for the variable if it exists, otherwise return a; /// FragmentInfo that covers the entire variable if the variable size is; /// known, otherwise return a zero-sized fragment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:33,variab,variable,33,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,6,['variab'],['variable']
Modifiability,/// Get the FragmentInfo for the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:33,variab,variable,33,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['variab'],['variable']
Modifiability,"/// Get the MCSymbolizer's list of addresses that were referenced by; /// symbolizable operands but not resolved to a symbol. The caller (some; /// code that is disassembling a section or other chunk of code) would; /// typically create a synthetic label at each address and add them to its; /// list of symbols in the section, before creating a new MCSymbolizer with; /// the enhanced symbol list and retrying disassembling the section.; /// The returned array is unordered and may have duplicates.; /// The returned ArrayRef stops being valid on any call to or destruction of; /// the MCSymbolizer object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h:377,enhance,enhanced,377,interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCDisassembler/MCSymbolizer.h,1,['enhance'],['enhanced']
Modifiability,/// Get the Module's list of global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:36,variab,variables,36,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['variab'],['variables']
Modifiability,/// Get the Module's symbol table of global variable and function identifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:44,variab,variable,44,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['variab'],['variable']
Modifiability,/// Get the \p Init value of the specified global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:50,variab,variable,50,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['variab'],['variable']
Modifiability,"/// Get the action definition builder for the given set of opcodes. Use this; /// to define the action definitions for multiple opcodes at once. The first; /// opcode given will be considered the representative opcode and will hold; /// the definitions whereas the other opcodes will be configured to refer to; /// the representative opcode. This lowers memory requirements and very; /// slightly improves performance.; ///; /// It would be very easy to introduce unexpected side-effects as a result of; /// this aliasing if it were permitted to request different but intersecting; /// sets of opcodes but that is difficult to keep track of. It is therefore an; /// error to request the same opcode twice using this API, to request an; /// opcode that already has definitions, or to use the single-opcode API on an; /// opcode that has already been requested by this API.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:287,config,configured,287,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,1,['config'],['configured']
Modifiability,/// Get the action type for this plugin; ///; /// \return The action type. By default we use CmdlineAfterMainAction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:33,plugin,plugin,33,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,1,['plugin'],['plugin']
Modifiability,"/// Get the actual, stored name of the declaration, which may be a special; /// name.; ///; /// Note that generally in diagnostics, the non-null \p NamedDecl* itself; /// should be sent into the diagnostic instead of using the result of; /// \p getDeclName().; ///; /// A \p DeclarationName in a diagnostic will just be streamed to the output,; /// which will directly result in a call to \p DeclarationName::print.; ///; /// A \p NamedDecl* in a diagnostic will also ultimately result in a call to; /// \p DeclarationName::print, but with two customisation points along the; /// way (\p getNameForDiagnostic and \p printName). These are used to print; /// the template arguments if any, and to provide a user-friendly name for; /// some entities (such as unnamed variables and anonymous records).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:764,variab,variables,764,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variables']
Modifiability,"/// Get the appropriate linkage for the wrapper function. This is essentially; /// the weak form of the variable's linkage; every translation unit which needs; /// the wrapper emits a copy, and we want the linker to merge them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:104,variab,variable,104,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['variab'],['variable']
Modifiability,"/// Get the base of the exponentiated terms (aka. x variable).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooPowerSum.h:52,variab,variable,52,roofit/roofit/inc/RooPowerSum.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooPowerSum.h,1,['variab'],['variable']
Modifiability,/// Get the captured variable length array type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:21,variab,variable,21,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Get the constant integer value used by this variable to represent; /// the comparison category result type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ComparisonCategories.h:48,variab,variable,48,interpreter/llvm-project/clang/include/clang/AST/ComparisonCategories.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ComparisonCategories.h,1,['variab'],['variable']
Modifiability,/// Get the constructor that this inheriting constructor is based on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:34,inherit,inheriting,34,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inheriting']
Modifiability,/// Get the consumed state of a given variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h:38,variab,variable,38,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h,1,['variab'],['variable']
Modifiability,/// Get the correctly-extended \c int64_t value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h:22,extend,extended,22,interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,1,['extend'],['extended']
Modifiability,/// Get the cost delta from the threshold for inlining.; /// Only valid if the cost is of the variable kind. Returns a negative; /// value if the cost is too high to inline.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h:94,variab,variable,94,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,1,['variab'],['variable']
Modifiability,/// Get the current generation of this AST source. This number; /// is incremented each time the AST source lazily extends an existing; /// entity.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:115,extend,extends,115,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,1,['extend'],['extends']
Modifiability,/// Get the default trivial automatic variable initialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:38,variab,variable,38,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['variab'],['variable']
Modifiability,"/// Get the directory where packages should read user-specific configurations.; /// e.g. $XDG_CONFIG_HOME.; ///; /// @param result Holds the resulting path name.; /// @result True if the appropriate path was determined, it need not exist.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h:63,config,configurations,63,interpreter/llvm-project/llvm/include/llvm/Support/Path.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h,1,['config'],['configurations']
Modifiability,/// Get the filename of the loaded plugin.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:35,plugin,plugin,35,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,1,['plugin'],['plugin']
Modifiability,/// Get the final value of the loop induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:46,variab,variable,46,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,1,['variab'],['variable']
Modifiability,"/// Get the fixed byte size for a given form.; ///; /// If the form has a fixed byte size, then an Optional with a value will be; /// returned. If the form is always encoded using a variable length storage; /// format (ULEB or SLEB numbers or blocks) then std::nullopt will be returned.; ///; /// \param Form DWARF form to get the fixed byte size for.; /// \param Params DWARF parameters to help interpret forms.; /// \returns std::optional<uint8_t> value with the fixed byte size or; /// std::nullopt if \p Form doesn't have a fixed byte size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h:182,variab,variable,182,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,1,['variab'],['variable']
Modifiability,"/// Get the inheriting constructor declaration for the base class; /// for which we don't have an explicit initializer, if there is one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:12,inherit,inheriting,12,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inheriting']
Modifiability,/// Get the initial value of the loop induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:48,variab,variable,48,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,1,['variab'],['variable']
Modifiability,"/// Get the initializer for this variable, no matter which; /// declaration it is attached to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Get the initializer for this variable, no matter which; /// declaration it is attached to. Also get that declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Get the initializing declaration of this variable, if any. This is; /// usually the definition, except that for a static data member it can be; /// the in-class declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:45,variab,variable,45,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Get the instruction that updates the loop induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:56,variab,variable,56,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,1,['variab'],['variable']
Modifiability,/// Get the list of helper expressions for initialization of private; /// copies for lastprivate variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:97,variab,variables,97,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Get the list of variables declared in the context of the untied tasks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:20,variab,variables,20,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variables']
Modifiability,/// Get the list of variables that can escape their declaration context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:20,variab,variables,20,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variables']
Modifiability,/// Get the local scope for this variable.; ///; /// Variables must be defined in a local scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:33,variab,variable,33,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,2,"['Variab', 'variab']","['Variables', 'variable']"
Modifiability,"/// Get the locations corresponding to the variable referenced by the debug; /// info intrinsic. Depending on the intrinsic, this could be the; /// variable's value or its address.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:43,variab,variable,43,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,6,['variab'],['variable']
Modifiability,/// Get the loop control variable for the I-th loop (or nullptr) in; /// parent directive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:25,variab,variable,25,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,/// Get the loop induction descriptor for the loop induction variable. Return; /// true if the loop induction variable is found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:61,variab,variable,61,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,2,['variab'],['variable']
Modifiability,/// Get the lvalue for a variable reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h:25,variab,variable,25,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h,1,['variab'],['variable']
Modifiability,/// Get the map of global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:26,variab,variables,26,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['variab'],['variables']
Modifiability,/// Get the maximum address offset for the current address offset size.; ///; /// This is used when creating the address offset table to ensure we have; /// values that are in range so we don't end up truncating address offsets; /// when creating GSYM files as the code evolves.; ///; /// \returns The maximum address offset value that will be encoded into a GSYM; /// file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:270,evolve,evolves,270,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,1,['evolve'],['evolves']
Modifiability,/// Get the maximum alignment in bits for a static variable with; /// aligned attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:51,variab,variable,51,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['variab'],['variable']
Modifiability,/// Get the meta-variable list for this option.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h:17,variab,variable,17,interpreter/llvm-project/llvm/include/llvm/Option/Option.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/Option.h,1,['variab'],['variable']
Modifiability,/// Get the meta-variable name to use when describing; /// this options values in the help text.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:17,variab,variable,17,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,1,['variab'],['variable']
Modifiability,/// Get the name of a profiling variable for a particular function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:32,variab,variable,32,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variable']
Modifiability,/// Get the name of the global instance variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp:40,variab,variable,40,interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp,1,['variab'],['variable']
Modifiability,/// Get the name of the variable declared in the mapper,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:24,variab,variable,24,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,1,['variab'],['variable']
Modifiability,"/// Get the next available kind ID for a plugin diagnostic.; /// Each time this function is called, it returns a different number.; /// Therefore, a plugin that wants to ""identify"" its own classes; /// with a dynamic identifier, just have to use this method to get a new ID; /// and assign it to each of its classes.; /// The returned ID will be greater than or equal to DK_FirstPluginKind.; /// Thus, the plugin identifiers will not conflict with the; /// DiagnosticKind values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h:41,plugin,plugin,41,interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DiagnosticInfo.h,3,['plugin'],['plugin']
Modifiability,"/// Get the next rewritable source (SrcReg, SrcSubReg) and; /// the related value that it affects (DstReg, DstSubReg).; /// A source is considered rewritable if its register class and the; /// register class of the related DstReg may not be register; /// coalescer friendly. In other words, given a copy-like instruction; /// not all the arguments may be returned at rewritable source, since; /// some arguments are none to be register coalescer friendly.; ///; /// Each call of this method moves the current source to the next; /// rewritable source.; /// For instance, let CopyLike be the instruction to rewrite.; /// CopyLike has one definition and one source:; /// dst.dstSubIdx = CopyLike src.srcSubIdx.; ///; /// The first call will give the first rewritable source, i.e.,; /// the only source this instruction has:; /// (SrcReg, SrcSubReg) = (src, srcSubIdx).; /// This source defines the whole definition, i.e.,; /// (DstReg, DstSubReg) = (dst, dstSubIdx).; ///; /// The second and subsequent calls will return false, as there is only one; /// rewritable source.; ///; /// \return True if a rewritable source has been found, false otherwise.; /// The output arguments are valid if and only if true is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:606,rewrite,rewrite,606,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// Get the operand index of the variable list of non-argument operands.; /// These hold the ""live state"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:33,variab,variable,33,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,2,['variab'],['variable']
Modifiability,"/// Get the parameter from which we inherit the default argument, if any.; /// This is the parameter on which the default argument was actually written.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:36,inherit,inherit,36,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['inherit'],['inherit']
Modifiability,/// Get the plugin API version,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:12,plugin,plugin,12,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,1,['plugin'],['plugin']
Modifiability,/// Get the plugin name,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:12,plugin,plugin,12,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,1,['plugin'],['plugin']
Modifiability,/// Get the plugin version,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:12,plugin,plugin,12,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,1,['plugin'],['plugin']
Modifiability,"/// Get the region bitmaps for an increment, creating them if necessary.; ///; /// If the bitmap array doesn't yet exist, the profile data variables; /// referring to them will also be created.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:139,variab,variables,139,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variables']
Modifiability,"/// Get the region counters for an increment, creating them if necessary.; ///; /// If the counter array doesn't yet exist, the profile data variables; /// referring to them will also be created.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:141,variab,variables,141,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variables']
Modifiability,/// Get the set of all protocols implied by this protocols inheritance; /// hierarchy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:59,inherit,inheritance,59,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['inherit'],['inheritance']
Modifiability,"/// Get the size (in bits) of the variable, or fragment of the variable that; /// is described.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:34,variab,variable,34,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,4,['variab'],['variable']
Modifiability,"/// Get the specialization of the given variable template corresponding to; /// the specified argument list, or a null-but-valid result if the arguments; /// are dependent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:40,variab,variable,40,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Get the step that the loop induction variable gets updated by in each; /// loop iteration. Return nullptr if not found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:41,variab,variable,41,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,1,['variab'],['variable']
Modifiability,"/// Get the storage duration of this variable, per C++ [basic.stc].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:37,variab,variable,37,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Get the symbol table of global variable and function identifiers,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:35,variab,variable,35,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['variab'],['variable']
Modifiability,/// Get the template specialization kind of this variable for the purposes of; /// template instantiation. This differs from getTemplateSpecializationKind(); /// for an instantiation of a class-scope explicit specialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:49,variab,variable,49,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Get the typeloc of an AutoType whose type will be deduced for a variable; /// with an initializer of this type. This looks through declarators like; /// pointer types, but not through decltype or typedefs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:68,variab,variable,68,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['variab'],['variable']
Modifiability,"/// Get the typical temporary directory for the system, e.g.,; /// ""/var/tmp"" or ""C:/TEMP""; ///; /// @param erasedOnReboot Whether to favor a path that is erased on reboot; /// rather than one that potentially persists longer. This parameter will be; /// ignored if the user or system has set the typical environment variable; /// (e.g., TEMP on Windows, TMPDIR on *nix) to specify a temporary directory.; ///; /// @param result Holds the resulting path name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h:317,variab,variable,317,interpreter/llvm-project/llvm/include/llvm/Support/Path.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Path.h,1,['variab'],['variable']
Modifiability,/// Get the underlying variable declarations of the template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:23,variab,variable,23,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['variab'],['variable']
Modifiability,/// Get the variable (if any) that holds the value of evaluating the binding.; /// Only present for user-defined bindings for tuple-like types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['variab'],['variable']
Modifiability,/// Get the variable declared in the mapper,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,1,['variab'],['variable']
Modifiability,"/// Get the x variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooExponential.h:14,variab,variable,14,roofit/roofit/inc/RooExponential.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooExponential.h,6,['variab'],['variable']
Modifiability,/// Get zero extended value if possible; ///; /// This method attempts to return the value of this APInt as a zero extended; /// uint64_t. The bitwidth must be <= 64 or the value must fit within a; /// uint64_t. Otherwise no value is returned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:13,extend,extended,13,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,['extend'],['extended']
Modifiability,/// Get zero extended value; ///; /// This method attempts to return the value of this APInt as a zero extended; /// uint64_t. The bitwidth must be <= 64 or the value must fit within a; /// uint64_t. Otherwise an assertion will result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:13,extend,extended,13,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,['extend'],['extended']
Modifiability,/// Get/set whether referencing global variables can use direct access; /// relocations on ELF targets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:39,variab,variables,39,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['variab'],['variables']
Modifiability,"/// GetAddrOfGlobalVar - Return the llvm::Constant for the address of the; /// given global variable. If Ty is non-null and if the global doesn't exist,; /// then it will be created with the specified type instead of whatever the; /// normal requested type would be. If IsForDefinition is true, it is guaranteed; /// that an actual global with type Ty will be returned, not conversion of a; /// variable with the same mangled name but some other type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:92,variab,variable,92,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,2,['variab'],['variable']
Modifiability,/// GetAddrOfLocalVar - Return the address of a local variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:54,variab,variable,54,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,/// GetClassGlobal - Return the global variable for the Objective-C; /// class of the given name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:39,variab,variable,39,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variable']
Modifiability,/// GetFPLibCall - Return the right libcall for the given floating point type.; /// FIXME: This is a local version of RTLIB::getFPLibCall that should be; /// refactored away (see RTLIB::getPOWI for an example).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:158,refactor,refactored,158,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,1,['refactor'],['refactored']
Modifiability,"/// GetLiveOutRegInfo - Gets LiveOutInfo for a register, returning NULL if the; /// register is a PHI destination and the PHI's LiveOutInfo is not valid. If; /// the register's LiveOutInfo is for a smaller bit width, it is extended to; /// the larger bit width by zero extension. The bit width must be no smaller; /// than the LiveOutInfo's existing bit width.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h:223,extend,extended,223,interpreter/llvm-project/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h,2,['extend'],['extended']
Modifiability,"/// GetOrCreateLLVMGlobal - If the specified mangled name is not in the module,; /// create and return an llvm GlobalVariable with the specified type and address; /// space. If there is something in the module with the specified name, return; /// it potentially bitcasted to the right type.; ///; /// If D is non-null, it specifies a decl that correspond to this. This is used; /// to set the attributes on the global when it is first created.; ///; /// If IsForDefinition is true, it is guaranteed that an actual global with; /// type Ty will be returned, not conversion of a variable with the same; /// mangled name but some other type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:577,variab,variable,577,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variable']
Modifiability,/// GetOrEmitProtocol - Generate the protocol meta-data:; /// @code; /// struct _protocol_t {; /// id isa; // NULL; /// const char * const protocol_name;; /// const struct _protocol_list_t * protocol_list; // super protocols; /// const struct method_list_t * const instance_methods;; /// const struct method_list_t * const class_methods;; /// const struct method_list_t *optionalInstanceMethods;; /// const struct method_list_t *optionalClassMethods;; /// const struct _prop_list_t * properties;; /// const uint32_t size; // sizeof(struct _protocol_t); /// const uint32_t flags; // = 0; /// const char ** extendedMethodTypes;; /// const char *demangledName;; /// const struct _prop_list_t * class_properties;; /// }; /// @endcode; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:605,extend,extendedMethodTypes,605,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['extend'],['extendedMethodTypes']
Modifiability,"/// GetValueInMiddleOfBlock - Construct SSA form, materializing a value that; /// is live in the middle of the specified block. If ExistingValueOnly is; /// true then this will only return an existing value or $noreg; otherwise new; /// instructions may be inserted to materialize a value.; ///; /// GetValueInMiddleOfBlock is the same as GetValueAtEndOfBlock except in one; /// important case: if there is a definition of the rewritten value after the; /// 'use' in BB. Consider code like this:; ///; /// X1 = ...; /// SomeBB:; /// use(X); /// X2 = ...; /// br Cond, SomeBB, OutBB; ///; /// In this case, there are two values (X1 and X2) added to the AvailableVals; /// set by the client of the rewriter, and those values are both live out of; /// their respective blocks. However, the use of X happens in the *middle* of; /// a block. Because of this, we need to insert a new PHI node in SomeBB to; /// merge the appropriate values, and this value isn't live out of the block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:696,rewrite,rewriter,696,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,2,['rewrite'],['rewriter']
Modifiability,/// Gets (if variable with the given name already exist) or creates; /// internal global variable with the specified Name. The created variable has; /// linkage CommonLinkage by default and is initialized by null value.; /// \param Ty Type of the global variable. If it is exist already the type; /// must be the same.; /// \param Name Name of the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:13,variab,variable,13,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,5,['variab'],['variable']
Modifiability,/// Gets Address Access SCEV after verifying that the access pattern; /// is loop invariant except the induction variable dependence.; ///; /// This SCEV can be sent to the Target in order to estimate the address; /// calculation cost.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:113,variab,variable,113,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,/// Gets a pointer past the Info structure; useful for classes with; /// local data that can't be captured in the Info (e.g. because it's; /// of variable size).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:146,variab,variable,146,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,1,['variab'],['variable']
Modifiability,/// Gets a symbol that will be defined to the final stack offset of a local; /// variable after codegen.; ///; /// \param Idx - The index of a local variable passed to \@llvm.localescape.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:81,variab,variable,81,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,2,['variab'],['variable']
Modifiability,/// Gets an argument adjuster which strips plugin related command line; /// arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/ArgumentsAdjusters.h:43,plugin,plugin,43,interpreter/llvm-project/clang/include/clang/Tooling/ArgumentsAdjusters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/ArgumentsAdjusters.h,1,['plugin'],['plugin']
Modifiability,"/// Gets called after attributes have been manifested, cleans up the IR.; /// Deletes dead functions, blocks and instructions.; /// Rewrites function signitures and updates the call graph.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:132,Rewrite,Rewrites,132,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['Rewrite'],['Rewrites']
Modifiability,/// Gets configuration in a YAML string.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:9,config,configuration,9,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['config'],['configuration']
Modifiability,/// Gets the OpenMP-specific address of the local variable /p VD.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:50,variab,variable,50,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,/// Gets the OpenMP-specific address of the local variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:50,variab,variable,50,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,3,['variab'],['variable']
Modifiability,"/// Gets the beginning location of the source matched by a rewrite rule. If the; /// match occurs within a macro expansion, returns the beginning of the; /// expansion point. `Result` must come from the matching of a rewrite rule.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:59,rewrite,rewrite,59,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,2,['rewrite'],['rewrite']
Modifiability,"/// Gets the list of initial values for linear variables.; ///; /// There are NumVars expressions with initial values allocated after the; /// varlist, they are followed by NumVars update expressions (used to update; /// the linear variable's value on current iteration) and they are followed by; /// NumVars final expressions (used to calculate the linear variable's; /// value after the loop body). After these lists, there are 2 helper; /// expressions - linear step and a helper to calculate it before the; /// loop body (used when the linear step is not constant):; ///; /// { Vars[] /* in OMPVarListClause */; Privates[]; Inits[]; Updates[];; /// Finals[]; Step; CalcStep; }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:47,variab,variables,47,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,3,['variab'],"['variable', 'variables']"
Modifiability,/// Gets the list of references to initializer variables for new private; /// variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:47,variab,variables,47,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Gets the list of references to initializer variables for new; /// private variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:47,variab,variables,47,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Gets the list of references to private copies with initializers for new; /// private variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:89,variab,variables,89,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Gets the list of references to private copies with initializers for; /// new private variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:89,variab,variables,89,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Gets the list of used expressions for linear variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:49,variab,variables,49,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Gets the struct used to keep track of the extended descriptor for; /// pointer to blocks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:46,extend,extended,46,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['extend'],['extended']
Modifiability,"/// Given ChunksToKeep, produce a map of global variables/functions/calls; /// and indexes of attributes to be preserved for each of them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp:48,variab,variables,48,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp,1,['variab'],['variables']
Modifiability,"/// Given a \p Def.Reg and Def.SubReg pair, use \p RewriteMap to find; /// the new source to use for rewrite. If \p HandleMultipleSources is true and; /// multiple sources for a given \p Def are found along the way, we found a; /// PHI instructions that needs to be rewritten.; /// TODO: HandleMultipleSources should be removed once we test PHI handling; /// with coalescable copies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:51,Rewrite,RewriteMap,51,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,2,"['Rewrite', 'rewrite']","['RewriteMap', 'rewrite']"
Modifiability,"/// Given a loop with an deccreasing induction variable, is it possible to; /// safely calculate the bounds of a new loop using the given Predicate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp:47,variab,variable,47,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp,1,['variab'],['variable']
Modifiability,"/// Given a loop with an increasing induction variable, is it possible to; /// safely calculate the bounds of a new loop using the given Predicate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp:46,variab,variable,46,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp,1,['variab'],['variable']
Modifiability,"/// Given a non-bitfield struct field, return its index within the elements of; /// the struct's converted type. The returned index refers to a field number in; /// the complete object type which is returned by convertTypeForMemory. FD must; /// be a field in RD directly (i.e. not an inherited field).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:285,inherit,inherited,285,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,1,['inherit'],['inherited']
Modifiability,"/// Given a sign/zero extend instruction \p Ext, return the appropriate; /// action to promote the operand of \p Ext instead of using Ext.; /// \return NULL if no promotable action is possible with the current; /// sign extension.; /// \p InsertedInsts keeps track of all the instructions inserted by the; /// other CodeGenPrepare optimizations. This information is important; /// because we do not want to promote these instructions as CodeGenPrepare; /// will reinsert them later. Thus creating an infinite loop: create/remove.; /// \p PromotedInsts maps the instructions to their type before promotion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:22,extend,extend,22,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['extend'],['extend']
Modifiability,"/// Given a variable, determine the type that a reference to that; /// variable will have in the given scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['variab'],['variable']
Modifiability,"/// Given an EH pad, find where it unwinds. If it unwinds to an EH pad,; /// return that pad instruction. If it unwinds to caller, return; /// ConstantTokenNone. If it does not have a definitive unwind destination,; /// return nullptr.; ///; /// This routine gets invoked for calls in funclets in inlinees when inlining; /// an invoke. Since many funclets don't have calls inside them, it's queried; /// on-demand rather than building a map of pads to unwind dests up front.; /// Determining a funclet's unwind dest may require recursively searching its; /// descendants, and also ancestors and cousins if the descendants don't provide; /// an answer. Since most funclets will have their unwind dest immediately; /// available as the unwind dest of a catchswitch or cleanupret, this routine; /// searches top-down from the given pad and then up. To avoid worst-case; /// quadratic run-time given that approach, it uses a memo map to avoid; /// re-processing funclet trees. The callers that rewrite the IR as they go; /// take advantage of this, for correctness, by checking/forcing rewritten; /// pads' entries to match the original callee view.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:990,rewrite,rewrite,990,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// Given an array of pointers to variables, project the address of a; /// given variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:34,variab,variables,34,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Given an associative binary expression, return the leaf; /// nodes in Ops along with their weights (how many times the leaf occurs). The; /// original expression is the same as; /// (Ops[0].first op Ops[0].first op ... Ops[0].first) <- Ops[0].second times; /// op; /// (Ops[1].first op Ops[1].first op ... Ops[1].first) <- Ops[1].second times; /// op; /// ...; /// op; /// (Ops[N].first op Ops[N].first op ... Ops[N].first) <- Ops[N].second times; ///; /// Note that the values Ops[0].first, ..., Ops[N].first are all distinct.; ///; /// This routine may modify the function, in which case it returns 'true'. The; /// changes it makes may well be destructive, changing the value computed by 'I'; /// to something completely different. Thus if the routine returns 'true' then; /// you MUST either replace I with a new expression computed from the Ops array,; /// or use RewriteExprTree to put the values back in.; ///; /// A leaf node is either not a binary operation of the same kind as the root; /// node 'I' (i.e. is not a binary operator at all, or is, but with a different; /// opcode), or is the same kind of binary operator but has a use which either; /// does not belong to the expression, or does belong to the expression but is; /// a leaf node. Every leaf node has at least one use that is a non-leaf node; /// of the expression, while for non-leaf nodes (except for the root 'I') every; /// use is a non-leaf node of the expression.; ///; /// For example:; /// expression graph node names; ///; /// + | I; /// / \ |; /// + + | A, B; /// / \ / \ |; /// * + * | C, D, E; /// / \ / \ / \ |; /// + * | F, G; ///; /// The leaf nodes are C, E, F and G. The Ops array will contain (maybe not in; /// that order) (C, 1), (E, 1), (F, 2), (G, 2).; ///; /// The expression is maximal: if some instruction is a binary operator of the; /// same kind as 'I', and all of its uses are non-leaf nodes of the expression,; /// then the instruction also belongs to the expression, is not a leaf node of; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp:873,Rewrite,RewriteExprTree,873,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Reassociate.cpp,1,['Rewrite'],['RewriteExprTree']
Modifiability,"/// Given an extend instruction, determine the correct shift-extend type for; /// that instruction.; ///; /// If the instruction is going to be used in a load or store, pass; /// \p IsLoadStore = true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:13,extend,extend,13,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,2,['extend'],['extend']
Modifiability,"/// Given an extending node with a pop-count operand, if the target does not; /// support a pop-count in the narrow source type but does support it in the; /// destination type, widen the pop-count to the destination type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:13,extend,extending,13,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extending']
Modifiability,"/// Given i1 V, can every user of V be freely adapted if V is changed to !V ?; /// InstCombine's freelyInvertAllUsersOf() must be kept in sync with this fn.; /// NOTE: for Instructions only!; ///; /// See also: isFreeToInvert()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:46,adapt,adapted,46,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,1,['adapt'],['adapted']
Modifiability,"/// Given that this builder was created by beginning an array or struct; /// directly on a ConstantInitBuilder, finish the array/struct and; /// create a global variable with it as the initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:161,variab,variable,161,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,1,['variab'],['variable']
Modifiability,"/// Given that this builder was created by beginning an array or struct; /// directly on a ConstantInitBuilder, finish the array/struct and; /// set it as the initializer of the given global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:191,variab,variable,191,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,1,['variab'],['variable']
Modifiability,"/// Given the address of a temporary variable, produce an r-value of; /// its type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['variab'],['variable']
Modifiability,"/// Given the address of a variable of pointer type, find the correct; /// null to store into it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['variab'],['variable']
Modifiability,"/// Given the language and code-generation options that Clang was configured; /// with, set the default LLVM IR attributes for a function definition.; /// The attributes set here are mostly global target-configuration and; /// pipeline-configuration options like the target CPU, variant stack; /// rules, whether to optimize for size, and so on. This is useful for; /// frontends (such as Swift) that generally intend to interoperate with; /// C code and rely on Clang's target configuration logic.; ///; /// As a general rule, this function assumes that meaningful attributes; /// haven't already been added to the builder. It won't intentionally; /// displace any existing attributes, but it also won't check to avoid; /// overwriting them. Callers should generally apply customizations after; /// making this call.; ///; /// This function assumes that the caller is not defining a function that; /// requires special no-builtin treatment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:66,config,configured,66,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,4,['config'],"['configuration', 'configured']"
Modifiability,"/// Given the set of return statements within a function body,; /// compute the variables that are subject to the named return value; /// optimization.; ///; /// Each of the variables that is subject to the named return value; /// optimization will be marked as NRVO variables in the AST, and any; /// return statement that has a marked NRVO variable as its NRVO candidate can; /// use the named return value optimization.; ///; /// This function applies a very simplistic algorithm for NRVO: if every return; /// statement in the scope of a variable has the same NRVO candidate, that; /// candidate is an NRVO variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:80,variab,variables,80,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,6,['variab'],"['variable', 'variables']"
Modifiability,"/// Global variable summary information to aid decisions and; /// implementation of importing.; ///; /// Global variable summary has two extra flag, telling if it is; /// readonly or writeonly. Both readonly and writeonly variables; /// can be optimized in the backed: readonly variables can be; /// const-folded, while writeonly vars can be completely eliminated; /// together with corresponding stores. We let both things happen; /// by means of internalizing such variables after ThinLTO import.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:11,variab,variable,11,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,5,['variab'],"['variable', 'variables']"
Modifiability,/// Global variables with initializers that need to run before main.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:11,variab,variables,11,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variables']
Modifiability,/// Global variables with initializers whose order of initialization is set by; /// init_priority attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:11,variab,variables,11,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variables']
Modifiability,/// Global variables with sterm finalizers whose order of initialization is; /// set by init_priority attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:11,variab,variables,11,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variables']
Modifiability,/// Global variables.; ///; /// TODO: Remove DisplayName. It's always equal to Name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:11,variab,variables,11,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['variab'],['variables']
Modifiability,/// GlobalMerge - This pass merges internal (by default) globals into structs; /// to enable reuse of a base pointer by indexed addressing modes.; /// It can also be configured to focus on size optimizations only.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:166,config,configured,166,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,1,['config'],['configured']
Modifiability,"/// GlobalValue - If we are tracking any values for the contents of a global; /// variable, we keep a mapping from the constant accessor to the element of; /// the global, to the currently known value. If the value becomes; /// overdefined, it's entry is simply removed from this map.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp:82,variab,variable,82,interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SCCPSolver.cpp,1,['variab'],['variable']
Modifiability,"/// Groups \p Replaces by the file path and applies each group of; /// Replacements on the related file in \p Rewriter. In addition to applying; /// given Replacements, this function also formats the changed code.; ///; /// \pre Replacements must be conflict-free.; ///; /// FileToReplaces will be deduplicated with `groupReplacementsByFile` before; /// application.; ///; /// Replacement applications happen independently of the success of other; /// applications.; ///; /// \param[in] FileToReplaces Replacements (grouped by files) to apply.; /// \param[in] Rewrite The `Rewritter` to apply replacements on.; /// \param[in] Style The style name used for reformatting. See ```getStyle``` in; /// ""include/clang/Format/Format.h"" for all possible style forms.; ///; /// \returns true if all replacements applied and formatted. false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring.h:110,Rewrite,Rewriter,110,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring.h,2,['Rewrite'],"['Rewrite', 'Rewriter']"
Modifiability,"/// Groups multiple declarators (e.g. variables, typedefs, etc.) together. All; /// grouped declarators share the same declaration specifiers (e.g. 'int' or; /// 'typedef').",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h:38,variab,variables,38,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Nodes.h,1,['variab'],['variables']
Modifiability,"/// Grow this axis to make the ""virtual bin"" toBin in-range. This keeps the; /// non-affected axis limit unchanged, and extends the other axis limit such; /// that a number of consecutive bins are merged.; ///; /// Example, assuming an initial RAxisGrow with 10 bins from 0. to 1.:; /// - `Grow(0)`: that (virtual) bin spans from -0.1 to 0. To include it; /// in the axis range, the lower limit must be shifted. The minimal number; /// of bins that can be merged is 2, thus the new axis will span from; /// -1. to 1.; /// - `Grow(-1)`: that (virtual) bin spans from -0.2 to 0.1. To include it; /// in the axis range, the lower limit must be shifted. The minimal number; /// of bins that can be merged is 2, thus the new axis will span from; /// -1. to 1.; /// - `Grow(50)`: that (virtual) bin spans from 4.9 to 5.0. To include it; /// in the axis range, the higher limit must be shifted. Five bins need to; /// be merged, making the new axis range 0. to 5.0.; ///; /// \param toBin - the ""virtual"" bin number, as if the axis had an infinite; /// number of bins with the current bin width. For instance, for an axis; /// with ten bins in the range 0. to 1., the coordinate 2.05 has the virtual; /// bin index 20.; /// \return Returns the number of bins that were merged to reach the value.; /// A value of 1 means that no bins were merged (toBin was in the original; /// axis range).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RAxis.hxx:120,extend,extends,120,hist/histv7/inc/ROOT/RAxis.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RAxis.hxx,1,['extend'],['extends']
Modifiability,"/// Handle '#pragma pointers_to_members'; // The grammar for this pragma is as follows:; //; // <inheritance model> ::= ('single' | 'multiple' | 'virtual') '_inheritance'; //; // #pragma pointers_to_members '(' 'best_case' ')'; // #pragma pointers_to_members '(' 'full_generality' [',' inheritance-model] ')'; // #pragma pointers_to_members '(' inheritance-model ')'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParsePragma.cpp:97,inherit,inheritance,97,interpreter/llvm-project/clang/lib/Parse/ParsePragma.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParsePragma.cpp,3,['inherit'],"['inheritance', 'inheritance-model']"
Modifiability,"/// Handle a change in variable location within a block. Terminate the; /// variables current location, and record the value it now refers to, so; /// that we can detect location transfers later on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:564,variab,variable,564,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,1,['variab'],['variable']
Modifiability,"/// Handle load instructions. If the pointer operand of the load is a global; /// variable, we attempt to track the value. The loaded value state is the; /// merge of the loaded value state with the global variable state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp:82,variab,variable,82,interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp,2,['variab'],['variable']
Modifiability,/// Handle repeatedly extending a range by going to overdefined after a; /// number of steps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueLattice.h:22,extend,extending,22,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueLattice.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueLattice.h,1,['extend'],['extending']
Modifiability,"/// Handle store instructions. If the pointer operand of the store is a; /// global variable, we attempt to track the value. The global variable state; /// is the merge of the stored value state with the global variable state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp:84,variab,variable,84,interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp,3,['variab'],['variable']
Modifiability,"/// Handle the --lookup option and dump the DIEs and line info for the given; /// address.; /// TODO: specified Address for --lookup option could relate for several; /// different sections(in case not-linked object file). llvm-dwarfdump; /// need to do something with this: extend lookup option with section; /// information or probably display all matched entries, or something else...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/llvm-dwarfdump.cpp:274,extend,extend,274,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/llvm-dwarfdump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/llvm-dwarfdump.cpp,1,['extend'],['extend']
Modifiability,"/// Handle the result of the special case name lookup for inheriting; /// constructor declarations. 'NS::X::X' and 'NS::X<...>::X' are treated as; /// constructor names in member using declarations, even if 'X' is not the; /// name of the corresponding type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:58,inherit,inheriting,58,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['inherit'],['inheriting']
Modifiability,/// Handle variable instances,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.h:11,variab,variable,11,interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.h,1,['variab'],['variable']
Modifiability,/// HandleCXXStaticMemberVarInstantiation - Tell the consumer that this; // variable has been instantiated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTConsumer.h:76,variab,variable,76,interpreter/llvm-project/clang/include/clang/AST/ASTConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTConsumer.h,1,['variab'],['variable']
Modifiability,"/// HandleVectorSizeAttribute - this attribute is only applicable to integral; /// and float scalars, although arrays, pointers, and function return values are; /// allowed in conjunction with this construct. Aggregates with this attribute; /// are invalid, even if they are of the same size as a corresponding scalar.; /// The raw attribute should contain precisely 1 argument, the vector size for; /// the variable, measured in bytes. If curType and rawAttr are well formed,; /// this routine will return a new vector type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:408,variab,variable,408,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['variab'],['variable']
Modifiability,/// Handles check and update for lastprivate conditional variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:57,variab,variables,57,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['variab'],['variables']
Modifiability,"/// Handles the matcher and callback registration for a single `RewriteRule`, as; /// defined by the arguments of the constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Transformer.h:64,Rewrite,RewriteRule,64,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Transformer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Transformer.h,1,['Rewrite'],['RewriteRule']
Modifiability,/// Handles the source replacements that are produced by a refactoring action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringResultConsumer.h:59,refactor,refactoring,59,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringResultConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringResultConsumer.h,1,['refactor'],['refactoring']
Modifiability,/// Handles the symbol occurrences that are found by an interactive; /// refactoring action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringResultConsumer.h:73,refactor,refactoring,73,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringResultConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringResultConsumer.h,1,['refactor'],['refactoring']
Modifiability,/// HasCapturedVariableLayout : True if block has captured variables; /// and their layout meta-data has been generated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h:59,variab,variables,59,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,1,['variab'],['variables']
Modifiability,"/// HasOwnVFPtr - Whether the class provides its own vtable/vftbl; /// pointer, as opposed to inheriting one from a primary base class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:94,inherit,inheriting,94,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['inherit'],['inheriting']
Modifiability,"/// HasSideEffects - This routine returns true for all those expressions; /// which have any effect other than producing a value. Example is a function; /// call, volatile variable read, or throwing an exception. If; /// IncludePossibleEffects is false, this call treats certain expressions with; /// potential side effects (such as function call-like expressions,; /// instantiation-dependent expressions, or invocations from a macro) as not; /// having side effects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:172,variab,variable,172,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['variab'],['variable']
Modifiability,/// HasVFPtr - Does this class have a vftable that could be extended by; /// a derived class. The class may have inherited this pointer from; /// a primary base class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h:60,extend,extended,60,interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h,2,"['extend', 'inherit']","['extended', 'inherited']"
Modifiability,"/// Helper class for SSA formation on a set of values defined in multiple; /// blocks.; ///; /// This is used when code duplication or another unstructured transformation; /// wants to rewrite a set of uses of one value with uses of a set of values.; /// The update is done only when RewriteAllUses is called, all other methods are; /// used for book-keeping. That helps to share some common computations between; /// updates of different uses (which is not the case when traditional SSAUpdater; /// is used).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterBulk.h:185,rewrite,rewrite,185,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterBulk.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterBulk.h,2,"['Rewrite', 'rewrite']","['RewriteAllUses', 'rewrite']"
Modifiability,/// Helper class for SSA formation on a set of values defined in; /// multiple blocks.; ///; /// This is used when code duplication or another unstructured; /// transformation wants to rewrite a set of uses of one value with uses of a; /// set of values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h:185,rewrite,rewrite,185,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h,1,['rewrite'],['rewrite']
Modifiability,/// Helper class for printing source variable locations alongside disassembly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:37,variab,variable,37,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,1,['variab'],['variable']
Modifiability,"/// Helper class that emits deferred diagnostic messages if an entity directly; /// or indirectly using the function that causes the deferred diagnostic; /// messages is known to be emitted.; ///; /// During parsing of AST, certain diagnostic messages are recorded as deferred; /// diagnostics since it is unknown whether the functions containing such; /// diagnostics will be emitted. A list of potentially emitted functions and; /// variables that may potentially trigger emission of functions are also; /// recorded. DeferredDiagnosticsEmitter recursively visits used functions; /// by each function to emit deferred diagnostics.; ///; /// During the visit, certain OpenMP directives or initializer of variables; /// with certain OpenMP attributes will cause subsequent visiting of any; /// functions enter a state which is called OpenMP device context in this; /// implementation. The state is exited when the directive or initializer is; /// exited. This state can change the emission states of subsequent uses; /// of functions.; ///; /// Conceptually the functions or variables to be visited form a use graph; /// where the parent node uses the child node. At any point of the visit,; /// the tree nodes traversed from the tree root to the current node form a use; /// stack. The emission state of the current node depends on two factors:; /// 1. the emission state of the root node; /// 2. whether the current node is in OpenMP device context; /// If the function is decided to be emitted, its contained deferred diagnostics; /// are emitted, together with the information about the use stack.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:435,variab,variables,435,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,3,['variab'],['variables']
Modifiability,/// Helper class to rewrite uncoalescable copy like instructions; /// into new COPY (coalescable friendly) instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:20,rewrite,rewrite,20,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// Helper class to track the possible sources of a value defined by; /// a (chain of) copy related instructions.; /// Given a definition (instruction and definition index), this class; /// follows the use-def chain to find successive suitable sources.; /// The given source can be used to rewrite the definition into; /// def = COPY src.; ///; /// For instance, let us consider the following snippet:; /// v0 =; /// v2 = INSERT_SUBREG v1, v0, sub0; /// def = COPY v2.sub0; ///; /// Using a ValueTracker for def = COPY v2.sub0 will give the following; /// suitable sources:; /// v2.sub0 and v0.; /// Then, def can be rewritten into def = COPY v0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:290,rewrite,rewrite,290,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewrite']
Modifiability,/// Helper class used to collect all the possible overloads of an; /// argument adaptative matcher function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:80,adapt,adaptative,80,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,1,['adapt'],['adaptative']
Modifiability,"/// Helper for Rewrite. PHI nodes are special because the use of their operands; /// effectively happens in their predecessor blocks, so the expression may need; /// to be expanded in multiple places.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:15,Rewrite,Rewrite,15,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['Rewrite'],['Rewrite']
Modifiability,/// Helper for generic variables globalization epilog.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:23,variab,variables,23,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['variab'],['variables']
Modifiability,/// Helper for generic variables globalization prolog.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:23,variab,variables,23,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['variab'],['variables']
Modifiability,/// Helper for process methods to track variables touched each frame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:40,variab,variables,40,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variables']
Modifiability,/// Helper function for building a load instruction for loading a builtin global; /// variable of \p BuiltinValue value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp:86,variab,variable,86,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,1,['variab'],['variable']
Modifiability,/// Helper function to internalize functions and variables in a Module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h:49,variab,variables,49,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Internalize.h,1,['variab'],['variables']
Modifiability,/// Helper function to place all gc relocates necessary for the given; /// statepoint.; /// Inputs:; /// liveVariables - list of variables to be relocated.; /// basePtrs - base pointers.; /// statepointToken - statepoint instruction to which relocates should be; /// bound.; /// Builder - Llvm IR builder to be used to construct new calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:129,variab,variables,129,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['variab'],['variables']
Modifiability,/// Helper method returns the zero-extended integer value of a ConstantSDNode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:35,extend,extended,35,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['extend'],['extended']
Modifiability,/// Helper method to turn variable array types into constant array; /// types in certain situations which would otherwise be errors (for; /// GCC compatibility).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variable']
Modifiability,/// Helper methods to extract and merge all possible typed matchers; /// out of the polymorphic object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h:84,polymorphi,polymorphic,84,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Marshallers.h,1,['polymorphi'],['polymorphic']
Modifiability,"/// Helper struct for trackAssignments, below. We don't use the similar; /// DebugVariable class because trackAssignments doesn't (yet?) understand; /// partial variables (fragment info) as input and want to make that clear and; /// explicit using types. In addition, eventually we will want to understand; /// expressions that modify the base address too, which a DebugVariable doesn't; /// capture.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:161,variab,variables,161,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,1,['variab'],['variables']
Modifiability,/// Helper to build a ValuesClass by forwarding a variable number of arguments; /// as an initializer list to the ValuesClass constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:50,variab,variable,50,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,1,['variab'],['variable']
Modifiability,/// Helper to initialize all internal control variable information for those; /// defined in OMPKinds.def.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:46,variab,variable,46,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['variab'],['variable']
Modifiability,/// Helper to set loop counter variable and its initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,/// Helper variable for `-start-before/-start-after/-stop-before/-stop-after`,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h:11,variab,variable,11,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,1,['variab'],['variable']
Modifiability,/// Hexagon Code Generator Pass Configuration Options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetMachine.cpp:32,Config,Configuration,32,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetMachine.cpp,1,['Config'],['Configuration']
Modifiability,/// History of DBG_VALUE and clobber instructions for each user; /// variable. Variables are listed in order of appearance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h:69,variab,variable,69,interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,2,"['Variab', 'variab']","['Variables', 'variable']"
Modifiability,/// Holds a SCEV and the version number of the SCEV predicate used to; /// perform the rewrite of the expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:87,rewrite,rewrite,87,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['rewrite'],['rewrite']
Modifiability,/// Holds accumulated debug location statistics about local variables and; /// formal parameters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:60,variab,variables,60,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,/// Holds all of the induction variables that we found in the loop.; /// Notice that inductions don't need to start at zero and that induction; /// variables can be pointers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:31,variab,variables,31,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,2,['variab'],['variables']
Modifiability,"/// Holds all the casts that participate in the update chain of the induction; /// variables, and that have been proven to be redundant (possibly under a; /// runtime guard). These casts can be ignored when creating the vectorized; /// loop body.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:83,variab,variables,83,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,1,['variab'],['variables']
Modifiability,/// Holds information about the inheritance path to a virtual base or function; /// table pointer. A record may contain as many vfptrs or vbptrs as there are; /// base subobjects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h:32,inherit,inheritance,32,interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,1,['inherit'],['inheritance']
Modifiability,"/// Holds statistics for one function (or other entity that has a PC range and; /// contains variables, such as a compile unit).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:93,variab,variables,93,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,/// Holds the characteristics of one fragment of a larger variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:58,variab,variable,58,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['variab'],['variable']
Modifiability,/// Holds the number of the parenthesis group in RegExStr and pointer to the; /// corresponding NumericVariable class instance of all numeric variable; /// definitions. Used to set the matched value of all those variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:142,variab,variable,142,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// Holds the reduction variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:24,variab,variables,24,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,1,['variab'],['variables']
Modifiability,/// Holds the state of the program (store and heap) at a given program point.; ///; /// WARNING: Symbolic values that are created by the environment for static; /// local and global variables are not currently invalidated on function calls.; /// This is unsound and should be taken into account when designing dataflow; /// analyses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h:182,variab,variables,182,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,1,['variab'],['variables']
Modifiability,/// ID for the next instruction variable defined with; /// implicitlyDefineInsnVar(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:32,variab,variable,32,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['variab'],['variable']
Modifiability,/// IDs for all Internal Control Variables (ICVs).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h:33,Variab,Variables,33,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPConstants.h,1,['Variab'],['Variables']
Modifiability,"/// INLINEASM - Represents an inline asm block. This node always has two; /// return values: a chain and a flag result. The inputs are as follows:; /// Operand #0 : Input chain.; /// Operand #1 : a ExternalSymbolSDNode with a pointer to the asm string.; /// Operand #2 : a MDNodeSDNode with the !srcloc metadata.; /// Operand #3 : HasSideEffect, IsAlignStack bits.; /// After this, it is followed by a list of operands with this format:; /// ConstantSDNode: Flags that encode whether it is a mem or not, the; /// of operands that follow, etc. See InlineAsm.h.; /// ... however many operands ...; /// Operand #last: Optional, an incoming flag.; ///; /// The variable width operands are required to represent target addressing; /// modes as a single ""operand"", even though they may have multiple; /// SDOperands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:657,variab,variable,657,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['variab'],['variable']
Modifiability,"/// IVStrideUse - Keep track of one use of a strided induction variable.; /// The Expr member keeps track of the expression, User is the actual user; /// instruction of the operand, and 'OperandValToReplace' is the operand of; /// the User that is the use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVUsers.h:63,variab,variable,63,interpreter/llvm-project/llvm/include/llvm/Analysis/IVUsers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVUsers.h,1,['variab'],['variable']
Modifiability,/// IVUses - A list of all tracked IV uses of induction variable expressions; /// we are interested in.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVUsers.h:56,variab,variable,56,interpreter/llvm-project/llvm/include/llvm/Analysis/IVUsers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVUsers.h,1,['variab'],['variable']
Modifiability,"/// Identifies a unique instance of a variable.; ///; /// Storage for identifying a potentially inlined instance of a variable,; /// or a fragment thereof. This guarantees that exactly one variable instance; /// may be identified by this class, even when that variable is a fragment of; /// an aggregate variable and/or there is another inlined instance of the same; /// source code variable nearby.; /// This class does not necessarily uniquely identify that variable: it is; /// possible that a DebugVariable with different parameters may point to the; /// same variable instance, but not that one DebugVariable points to multiple; /// variable instances.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:38,variab,variable,38,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,9,['variab'],['variable']
Modifiability,/// Identifies a unique instance of a whole variable (discards/ignores fragment; /// information).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:44,variab,variable,44,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['variab'],['variable']
Modifiability,"/// Identifies an atomic boolean variable such as ""V1"".; ///; /// This often represents an assertion that is interesting to the analysis but; /// cannot immediately be proven true or false. For example:; /// - V1 may mean ""the program reaches this point"",; /// - V2 may mean ""the parameter was null""; ///; /// We can use these variables in formulas to describe relationships we know; /// to be true: ""if the parameter was null, the program reaches this point"".; /// We also express hypotheses as formulas, and use a SAT solver to check; /// whether they are consistent with the known facts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Formula.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// Identify connected sections of the control flow graph which have; /// dead terminators and rewrite the control flow graph to remove them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp:95,rewrite,rewrite,95,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,1,['rewrite'],['rewrite']
Modifiability,/// IdentifyTarget - Determine the CUDA compilation target for this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp:68,variab,variable,68,interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,1,['variab'],['variable']
Modifiability,/// Identity of the variable at this location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:20,variab,variable,20,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,/// Identity of this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:21,variab,variable,21,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// If 'aligned' declaration for given variable \a D was not seen yet,; /// add it and return NULL; otherwise return previous occurrence's expression; /// for diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:39,variab,variable,39,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"/// If 'nontemporal' declaration for given variable \a D was not seen yet,; /// add it and return NULL; otherwise return previous occurrence's expression; /// for diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:43,variab,variable,43,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"/// If E is an expression comprising a reference to a single variable, find that; /// variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:61,variab,variable,61,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,2,['variab'],['variable']
Modifiability,"/// If UseStatepoints is set, this determines whether; /// the RewriteStatepointsForGC pass should rewrite; /// this function's calls.; /// This should only be set if UseStatepoints is set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:63,Rewrite,RewriteStatepointsForGC,63,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,2,"['Rewrite', 'rewrite']","['RewriteStatepointsForGC', 'rewrite']"
Modifiability,"/// If VD is set but not otherwise used, diagnose, for a parameter or a; /// variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:77,variab,variable,77,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,"/// If \p Current is a raw string that is configured to be reformatted,; /// return the style to be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h:42,config,configured,42,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h,1,['config'],['configured']
Modifiability,"/// If \p LR has a live value at \p Kill, prune its live range by removing; /// any liveness reachable from Kill. Add live range end points to; /// EndPoints such that extendToIndices(LI, EndPoints) will reconstruct the; /// value's live range.; ///; /// Calling pruneValue() and extendToIndices() can be used to reconstruct; /// SSA form after adding defs to a virtual register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervals.h:168,extend,extendToIndices,168,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervals.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveIntervals.h,2,['extend'],['extendToIndices']
Modifiability,"/// If \p MI is extend that consumes the result of a load, try to combine it.; /// Returns true if MI changed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:16,extend,extend,16,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,1,['extend'],['extend']
Modifiability,"/// If \p Pass is a loop-nest pass, \p Pass will first be wrapped into a; /// \c LoopPassManager and the returned adaptor will be in loop-nest mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:114,adapt,adaptor,114,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,1,['adapt'],['adaptor']
Modifiability,"/// If \p Pass is an instance of \c LoopPassManager, the returned adaptor will; /// be in loop-nest mode if the pass manager contains only loop-nest passes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h:66,adapt,adaptor,66,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopPassManager.h,1,['adapt'],['adaptor']
Modifiability,"/// If ``false``, spaces will be removed before inheritance colon.; /// \code; /// true: false:; /// class Foo : Bar {} vs. class Foo: Bar {}; /// \endcode; /// \version 7",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:48,inherit,inheritance,48,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['inherit'],['inheritance']
Modifiability,"/// If ``true``, clang-format detects whether function calls and; /// definitions are formatted with one parameter per line.; ///; /// Each call can be bin-packed, one-per-line or inconclusive. If it is; /// inconclusive, e.g. completely on one line, but a decision needs to be; /// made, clang-format analyzes whether there are other bin-packed cases in; /// the input file and act accordingly.; ///; /// \note; /// This is an experimental flag, that might go away or be renamed. Do; /// not use this in config files, etc. Use at your own risk.; /// \endnote; /// \version 3.7",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:505,config,config,505,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['config'],['config']
Modifiability,"/// If ``true``, format braced lists as best suited for C++11 braced; /// lists.; ///; /// Important differences:; /// - No spaces inside the braced list.; /// - No line break before the closing brace.; /// - Indentation with the continuation indent, not with the block indent.; ///; /// Fundamentally, C++11 braced lists are formatted exactly like function; /// calls would be formatted in their place. If the braced list follows a name; /// (e.g. a type or variable name), clang-format formats as if the ``{}`` were; /// the parentheses of a function call with that name. If there is no name,; /// a zero-length name is assumed.; /// \code; /// true: false:; /// vector<int> x{1, 2, 3, 4}; vs. vector<int> x{ 1, 2, 3, 4 };; /// vector<T> x{{}, {}, {}, {}}; vector<T> x{ {}, {}, {}, {} };; /// f(MyMap[{composite, key}]); f(MyMap[{ composite, key }]);; /// new int[3]{1, 2, 3}; new int[3]{ 1, 2, 3 };; /// \endcode; /// \version 3.4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:459,variab,variable,459,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['variab'],['variable']
Modifiability,"/// If a builtin function has a pointer argument with no explicit address; /// space, then it should be able to accept a pointer to any address; /// space as input. In order to do this, we need to replace the; /// standard builtin declaration with one that uses the same address space; /// as the call.; ///; /// \returns nullptr If this builtin is not a candidate for a rewrite i.e.; /// it does not contain any pointer arguments without; /// an address space qualifer. Otherwise the rewritten; /// FunctionDecl is returned.; /// TODO: Handle pointer return types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:371,rewrite,rewrite,371,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// If a symbol has a Fragment, the section is implied, so we only need; /// one pointer.; /// The special AbsolutePseudoFragment value is for absolute symbols.; /// If this is a variable symbol, this caches the variable value's fragment.; /// FIXME: We might be able to simplify this by having the asm streamer create; /// dummy fragments.; /// If this is a section, then it gives the symbol is defined in. This is null; /// for undefined symbols.; ///; /// If this is a fragment, then it gives the fragment this symbol's value is; /// relative to, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:179,variab,variable,179,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,2,['variab'],['variable']
Modifiability,"/// If both the base vector and the inserted element are extended from the same; /// type, do the insert element in the narrow source type followed by extend.; /// TODO: This can be extended to include other cast opcodes, but particularly; /// if we create a wider insertelement, make sure codegen is not harmed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:57,extend,extended,57,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,3,['extend'],"['extend', 'extended']"
Modifiability,"/// If desirable, rewrite NewReg to a drop register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyPeephole.cpp:18,rewrite,rewrite,18,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyPeephole.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// If exactly one element of the mask is set for a non-extending masked load,; /// it is a scalar load and vector insert.; /// Note: It is expected that the degenerate cases of an all-zeros or all-ones; /// mask have already been optimized in IR, so we don't bother with those here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:56,extend,extending,56,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"/// If given \p PN is an inductive variable with value IVInc coming from the; /// backedge, and on each iteration it gets increased by Step, return pair; /// <IVInc, Step>. Otherwise, return std::nullopt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:35,variab,variable,35,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['variab'],['variable']
Modifiability,"/// If maxDynamicGroupSize is not enabled then must be 0, and any amount of; /// dynamic group segment can be allocated for a dispatch, otherwise the value; /// specifies the maximum number of bytes of dynamic group segment that can be; /// allocated for a dispatch. If the kernel being finalized has any; /// maxdynamicsize control directives, then the values must be the same, and; /// must be the same as this argument if it is enabled. This value can be used; /// by the finalizer to determine the maximum number of bytes of group memory; /// used by each work-group by adding this value to the group memory required; /// for all group segment variables used by the kernel and all functions it; /// calls, and group memory used to implement other HSAIL features such as; /// fbarriers and the detect exception operations. This can allow the finalizer; /// to determine the expected number of work-groups that can be executed by a; /// compute unit and allow more resources to be allocated to the work-items if; /// it is known that fewer work-groups can be executed due to group memory; /// limitations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h:648,variab,variables,648,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,1,['variab'],['variables']
Modifiability,"/// If non-null, the value for a variable symbol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h:33,variab,variable,33,interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCSymbol.h,1,['variab'],['variable']
Modifiability,"/// If non-zero, specifies a maximum alignment to truncate alignment; /// specified in the aligned attribute of a static variable to this value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:121,variab,variable,121,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['variab'],['variable']
Modifiability,"/// If set, this ObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:390,layers,layers,390,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,1,['layers'],['layers']
Modifiability,"/// If set, this RTDyldObjectLinkingLayer instance will claim responsibility; /// for any symbols provided by a given object file that were not already in; /// the MaterializationResponsibility instance. Setting this flag allows; /// higher-level program representations (e.g. LLVM IR) to be added based on; /// only a subset of the symbols they provide, without having to write; /// intervening layers to scan and add the additional symbols. This trades; /// diagnostic quality for convenience however: If all symbols are enumerated; /// up-front then clashes can be detected and reported early (and usually; /// deterministically). If this option is set, clashes for the additional; /// symbols may not be detected until late, and detection may depend on; /// the flow of control through JIT'd code. Use with care.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:396,layers,layers,396,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h,1,['layers'],['layers']
Modifiability,"/// If target-specific LLVM \p AddressSpace directly maps to target-specific; /// DWARF address space, appends extended dereferencing mechanism to complex; /// expression \p Expr. Otherwise, does nothing.; ///; /// Extended dereferencing mechanism is has the following format:; /// DW_OP_constu <DWARF Address Space> DW_OP_swap DW_OP_xderef",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:111,extend,extended,111,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,2,"['Extend', 'extend']","['Extended', 'extended']"
Modifiability,"/// If the (out-of-line) tag declaration name; /// is qualified, it points to the qualifier info (nns and range);; /// otherwise, if the tag declaration is anonymous and it is part of; /// a typedef or alias, it points to the TypedefNameDecl (used for mangling);; /// otherwise, if the tag declaration is anonymous and it is used as a; /// declaration specifier for variables, it points to the first VarDecl (used; /// for mangling);; /// otherwise, it is a null (TypedefNameDecl) pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:366,variab,variables,366,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variables']
Modifiability,"/// If the \p State's next token is an r_brace closing a nested block,; /// format the nested block before it.; ///; /// Returns \c true if all children could be placed successfully and adapts; /// \p Penalty as well as \p State. If \p DryRun is false, also directly; /// creates changes using \c Whitespaces.; ///; /// The crucial idea here is that children always get formatted upon; /// encountering the closing brace right after the nested block. Now, if we; /// are currently trying to keep the ""}"" on the same line (i.e. \p NewLine is; /// \c false), the entire block has to be kept on the same line (which is only; /// possible if it fits on the line, only contains a single statement, etc.; ///; /// If \p NewLine is true, we format the nested block on separate lines, i.e.; /// break after the ""{"", format all lines with correct indentation and the put; /// the closing ""}"" on yet another new line.; ///; /// This enables us to keep the simple structure of the; /// \c UnwrappedLineFormatter, where we only have two options for each token:; /// break or don't break.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp:186,adapt,adapts,186,interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,1,['adapt'],['adapts']
Modifiability,"/// If the given node corresponds to a PostStore program point,; /// retrieve the location region as it was uttered in the code.; ///; /// This utility can be useful for generating extensive diagnostics, for; /// example, for finding variables that the given symbol was assigned to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:234,variab,variables,234,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,1,['variab'],['variables']
Modifiability,"/// If the high bits of an 'and' operand are known zero, try setting the; /// high bits of an 'and' constant operand to produce a smaller encoding by; /// creating a small, sign-extended negative immediate rather than a large; /// positive one. This reverses a transform in SimplifyDemandedBits that; /// shrinks mask constants by clearing bits. There is also a possibility that; /// the 'and' mask can be made -1, so the 'and' itself is unnecessary. In that; /// case, just replace the 'and'. Return 'true' if the node is replaced.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:178,extend,extended,178,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"/// If the input value is the result of a 'not' op, constant integer, or vector; /// splat of a constant integer, return the bitwise-not source value.; /// TODO: This could be extended to handle non-splat vector integer constants.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:176,extend,extended,176,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['extend'],['extended']
Modifiability,"/// If the loop has floating induction variable then insert corresponding; /// integer induction variable if possible.; /// For example,; /// for(double i = 0; i < 10000; ++i); /// bar(i); /// is converted into; /// for(int i = 0; i < 10000; ++i); /// bar((double)i);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,2,['variab'],['variable']
Modifiability,"/// If the loop is known to execute a constant number of times (the; /// condition evolves only from constants), try to evaluate a few iterations; /// of the loop until we get the exit condition gets a value of ExitWhen; /// (true or false). If we cannot evaluate the exit count of the loop,; /// return CouldNotCompute.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:83,evolve,evolves,83,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['evolve'],['evolves']
Modifiability,"/// If the narrow use is a compare instruction, then widen the compare; // (and possibly the other operand). The extend operation is hoisted into the; // loop preheader as far as possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:113,extend,extend,113,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['extend'],['extend']
Modifiability,"/// If the result of a load is shifted/masked/truncated to an effectively; /// narrower type, try to transform the load to a narrower type and/or; /// use an extending load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:158,extend,extending,158,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extending']
Modifiability,"/// If the specified mangled name is not in the module, create and; /// return threadprivate cache object. This object is a pointer's worth of; /// storage that's reserved for use by the OpenMP runtime.; /// \param VD Threadprivate variable.; /// \return Cache variable for the specified threadprivate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:232,variab,variable,232,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['variab'],['variable']
Modifiability,"/// If the specified pointer points to an object that we control, try to modify; /// the object's alignment to PrefAlign. Returns a minimum known alignment of; /// the value after the operation, which may be lower than PrefAlign.; ///; /// Increating value alignment isn't often possible though. If alignment is; /// important, a more reliable approach is to simply align all global variables; /// and allocation instructions to their preferred alignment from the beginning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:383,variab,variables,383,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,1,['variab'],['variables']
Modifiability,"/// If the value isn't guaranteed to be sign-extended to 64-bits, extend it.; /// Otherwise just reinterpret it as a 64-bit value.; /// Useful when emitting comparison code for 32-bit values without using; /// the compare instruction (which only considers the lower 32-bits).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:45,extend,extended,45,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"/// If the value isn't guaranteed to be zero-extended to 64-bits, extend it.; /// Otherwise just reinterpret it as a 64-bit value.; /// Useful when emitting comparison code for 32-bit values without using; /// the compare instruction (which only considers the lower 32-bits).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:45,extend,extended,45,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"/// If the value to extend is a vector that needs to be scalarized, it must be; /// <1 x ty>. Convert the element instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:20,extend,extend,20,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,2,['extend'],['extend']
Modifiability,"/// If there were any appending global variables, link them together now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp:39,variab,variables,39,interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,1,['variab'],['variables']
Modifiability,"/// If this ForStmt has a condition variable, return the faux DeclStmt; /// associated with the creation of that condition variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:36,variab,variable,36,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,2,['variab'],['variable']
Modifiability,"/// If this IfStmt has a condition variable, return the faux DeclStmt; /// associated with the creation of that condition variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:35,variab,variable,35,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,2,['variab'],['variable']
Modifiability,"/// If this SwitchStmt has a condition variable, return the faux DeclStmt; /// associated with the creation of that condition variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:39,variab,variable,39,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,2,['variab'],['variable']
Modifiability,"/// If this WhileStmt has a condition variable, return the faux DeclStmt; /// associated with the creation of that condition variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:38,variab,variable,38,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,2,['variab'],['variable']
Modifiability,/// If this abbreviation has a fixed byte size then FixedAttributeSize member; /// variable below will have a value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h:83,variab,variable,83,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h,1,['variab'],['variable']
Modifiability,"/// If this constructor using declaration inherted the constructor; /// from an indirect base class, this is the ConstructorUsingShadowDecl; /// in the named direct base class from which the declaration was inherited.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:207,inherit,inherited,207,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inherited']
Modifiability,"/// If this function returns true, ^Str$ is an extended regular; /// expression that matches Str and only Str.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h:47,extend,extended,47,interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Regex.h,1,['extend'],['extended']
Modifiability,"/// If this is a *dynamic* select (non-constant condition) and we can match; /// this node with one of the variable blend instructions, restructure the; /// condition so that blends can use the high (sign) bit of each element.; /// This function will also call SimplifyDemandedBits on already created; /// BLENDV to perform additional simplifications.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:107,variab,variable,107,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"/// If this is an alias summary, returns the summary of the aliased object (a; /// global variable or function), otherwise returns itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:90,variab,variable,90,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['variab'],['variable']
Modifiability,"/// If this is the beginning of -dealloc, mark the values initially stored in; /// instance variables that must be released by the end of -dealloc; /// as unreleased in the state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:92,variab,variables,92,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['variab'],['variables']
Modifiability,"/// If this leaf stores a variable-sized array or a multi-dimensional array whose last dimension has variable size,; /// return a pointer to the TLeaf that stores such size. Return a nullptr otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TLeaf.h:26,variab,variable-sized,26,tree/tree/inc/TLeaf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TLeaf.h,2,['variab'],"['variable', 'variable-sized']"
Modifiability,/// If this symbol describes a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Demangle.h:31,variab,variable,31,interpreter/llvm-project/llvm/include/llvm/Demangle/Demangle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/Demangle.h,1,['variab'],['variable']
Modifiability,"/// If this user is to use the post-incremented value of an induction; /// variable, this set is non-empty and holds the loops associated with the; /// induction variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:75,variab,variable,75,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,2,['variab'],['variable']
Modifiability,"/// If this variable is an instantiated static data member of a; /// class template specialization, returns the templated static data member; /// from which it was instantiated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// If this variable is an instantiated static data member of a; /// class template specialization, returns the templated static data member; /// from which it was instantiated.; // FIXME: Remove ?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['variab'],['variable']
Modifiability,"/// If this variable is an instantiation of a static data member of a; /// class template specialization, retrieves the member specialization; /// information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// If this variable is an instantiation of a variable template or a; /// static data member of a class template, determine its point of; /// instantiation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,"/// If this variable is an instantiation of a variable template or a; /// static data member of a class template, determine what kind of; /// template specialization or instantiation this is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,"/// If this variable is described by register \p Reg holding a copy of the; /// entry value, return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// If this variable is described by register \p Reg holding the entry; /// value, return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// If this variable is described in whole or part by 1 or more registers,; /// add each of them to \p Regs and return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// If this variable is described in whole or part by \p Reg, return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,2,['variab'],['variable']
Modifiability,"/// If this variable is described in whole or part by \p SpillLocation,; /// return the index .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// If this variable is described in whole or part by \p SpillLocation,; /// return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// If this variable is described in whole or part by \p WasmLocation,; /// return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// If this variable template specialization is an instantiation of; /// a template (rather than an explicit specialization), return the; /// variable template or variable template partial specialization from which; /// it was instantiated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,3,['variab'],['variable']
Modifiability,"/// If true PDF must provide extended likelihood term.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:29,extend,extended,29,roofit/roofitcore/inc/RooAbsPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h,1,['extend'],['extended']
Modifiability,"/// If true and removing some text leaves a blank line; /// also remove the empty line (false by default).; ///; /// FIXME: This sometimes corrupts the file's rewrite buffer due to; /// incorrect indexing in the implementation (see the FIXME in; /// clang::RewriteBuffer::RemoveText). Moreover, it's inefficient because; /// it must scan the buffer from the beginning to find the start of the; /// line. When feasible, it's better for the caller to check for a blank; /// line and then, if found, expand the removal range to include it.; /// Checking for a blank line is easy if, for example, the caller can; /// guarantee this is the first edit of a line. In that case, it can just; /// scan before and after the removal range until the next newline or; /// begin/end of the input.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:159,rewrite,rewrite,159,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,2,"['Rewrite', 'rewrite']","['RewriteBuffer', 'rewrite']"
Modifiability,"/// If true extended mode generation is requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:12,extend,extended,12,roofit/roofitcore/inc/RooAbsMCStudyModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h,1,['extend'],['extended']
Modifiability,"/// If true, PDF can provide extended likelihood term.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:29,extend,extended,29,roofit/roofitcore/inc/RooAbsPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h,1,['extend'],['extended']
Modifiability,"/// If true, body of config file is expanded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:21,config,config,21,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,1,['config'],['config']
Modifiability,"/// If true, the object has been sign-extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:38,extend,extended,38,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,1,['extend'],['extended']
Modifiability,"/// If true, the object has been zero-extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:38,extend,extended,38,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,1,['extend'],['extended']
Modifiability,"/// If true, we drop variable location ranges which exist entirely outside the; /// variable's lexical scope instruction ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugHandlerBase.cpp:21,variab,variable,21,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugHandlerBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugHandlerBase.cpp,2,['variab'],['variable']
Modifiability,"/// If we are over the complexity limit, filter out any post-inc prefering; /// variables to only post-inc values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:80,variab,variables,80,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['variab'],['variables']
Modifiability,"/// If we have an insertelement instruction feeding into another insertelement; /// and the 2nd is inserting a constant into the vector, canonicalize that; /// constant insertion before the insertion of a variable:; ///; /// insertelement (insertelement X, Y, IdxC1), ScalarC, IdxC2 -->; /// insertelement (insertelement X, ScalarC, IdxC2), Y, IdxC1; ///; /// This has the potential of eliminating the 2nd insertelement instruction; /// via constant folding of the scalar constant into a vector constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:205,variab,variable,205,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['variab'],['variable']
Modifiability,"/// If we have dangling debug info that describes \p Variable, or an; /// overlapping part of variable considering the \p Expr, then this method; /// will drop that debug info as it isn't valid any longer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:53,Variab,Variable,53,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// If we have enhanced repmovs we use it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SelectionDAGInfo.cpp:15,enhance,enhanced,15,interpreter/llvm-project/llvm/lib/Target/X86/X86SelectionDAGInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SelectionDAGInfo.cpp,1,['enhance'],['enhanced']
Modifiability,"/// If we have zero-extended operands of an unsigned div or rem, we may be able; /// to narrow the operation (sink the zext below the math).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp:20,extend,extended,20,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,1,['extend'],['extended']
Modifiability,"/// If we're evaluating the object size of an instance of a struct that; /// contains a flexible array member, add the size of the initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:88,flexible,flexible,88,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['flexible'],['flexible']
Modifiability,"/// Ignore parenthesizes, implicit casts, copy constructor and return the; /// variable (which may be the loop variable) if possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:79,variab,variable,79,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,/// Implement expansion for ANY_EXTEND_VECTOR_INREG.; ///; /// Shuffles the low lanes of the operand into place and bitcasts to the proper; /// type. The contents of the bits in the extended part of each element are; /// undef.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:182,extend,extended,182,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,1,['extend'],['extended']
Modifiability,"/// Implement extending a 32-bit value to a 64-bit value. \p Lo32Reg is the; /// original 32-bit source value (to be inserted in the low part of the combined; /// 64-bit result), and \p Hi32Reg is the high half of the combined 64-bit; /// value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:14,extend,extending,14,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['extend'],['extending']
Modifiability,/// Implementation details of \c Transformer with type erasure around; /// \c RewriteRule<T> as well as the corresponding consumers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Transformer.h:78,Rewrite,RewriteRule,78,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Transformer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/Transformer.h,1,['Rewrite'],['RewriteRule']
Modifiability,"/// Implementation of CodeView type stream merging.; ///; /// A CodeView type stream is a series of records that reference each other; /// through type indices. A type index is either ""simple"", meaning it is less; /// than 0x1000 and refers to a builtin type, or it is complex, meaning it; /// refers to a prior type record in the current stream. The type index of a; /// record is equal to the number of records before it in the stream plus; /// 0x1000.; ///; /// Type records are only allowed to use type indices smaller than their own, so; /// a type stream is effectively a topologically sorted DAG. Cycles occurring in; /// the type graph of the source program are resolved with forward declarations; /// of composite types. This class implements the following type stream merging; /// algorithm, which relies on this DAG structure:; ///; /// - Begin with a new empty stream, and a new empty hash table that maps from; /// type record contents to new type index.; /// - For each new type stream, maintain a map from source type index to; /// destination type index.; /// - For each record, copy it and rewrite its type indices to be valid in the; /// destination type stream.; /// - If the new type record is not already present in the destination stream; /// hash table, append it to the destination type stream, assign it the next; /// type index, and update the two hash tables.; /// - If the type record already exists in the destination stream, discard it; /// and update the type index map to forward the source type index to the; /// existing destination type index.; ///; /// As an additional complication, type stream merging actually produces two; /// streams: an item (or IPI) stream and a type stream, as this is what is; /// actually stored in the final PDB. We choose which records go where by; /// looking at the record kind.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeStreamMerger.cpp:1107,rewrite,rewrite,1107,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeStreamMerger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/TypeStreamMerger.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// Implementation of Knuth's Algorithm D (Division of nonnegative integers); /// from ""Art of Computer Programming, Volume 2"", section 4.3.1, p. 272. The; /// variables here have the same names as in the algorithm. Comments explain; /// the algorithm and any deviation from it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:160,variab,variables,160,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['variab'],['variables']
Modifiability,"/// Implementation of format_provider<T> for ranges.; ///; /// This will print an arbitrary range as a delimited sequence of items.; ///; /// The options string of a range type has the grammar:; ///; /// range_style ::= [separator] [element_style]; /// separator ::= ""$"" delimeted_expr; /// element_style ::= ""@"" delimeted_expr; /// delimeted_expr ::= ""["" expr ""]"" | ""("" expr "")"" | ""<"" expr "">""; /// expr ::= <any string not containing delimeter>; ///; /// where the separator expression is the string to insert between consecutive; /// items in the range and the argument expression is the Style specification to; /// be used when formatting the underlying type. The default separator if; /// unspecified is ' ' (space). The syntax of the argument expression follows; /// whatever grammar is dictated by the format provider or format adapter used; /// to format the value type.; ///; /// Note that attempting to format an `iterator_range<T>` where no format; /// provider can be found for T will result in a compile error.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h:835,adapt,adapter,835,interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatProviders.h,1,['adapt'],['adapter']
Modifiability,/// Implicit declaration of a temporary that was materialized by; /// a MaterializeTemporaryExpr and lifetime-extended by a declaration,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:110,extend,extended,110,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['extend'],['extended']
Modifiability,"/// In C++98, whether the initializer is an ICE. This affects whether the; /// variable is usable in constant expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:79,variab,variable,79,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// In dwarf emission, the following sequence; /// 1. dbg.value ... Fragment(0, 64); /// 2. dbg.value ... Fragment(0, 32); /// effectively sets Fragment(32, 32) to undef (each def sets all bits not in; /// the intersection of the fragments to having ""no location""). This makes; /// sense for implicit location values because splitting the computed values; /// could be troublesome, and is probably quite uncommon. When we convert; /// dbg.assigns to dbg.value+deref this kind of thing is common, and describing; /// a location (memory) rather than a value means we don't need to worry about; /// splitting any values, so we try to recover the rest of the fragment; /// location here.; /// This class performs a(nother) dataflow analysis over the function, adding; /// variable locations so that any bits of a variable with a memory location; /// have that location explicitly reinstated at each subsequent variable; /// location definition that that doesn't overwrite those bits. i.e. after a; /// variable location def, insert new defs for the memory location with; /// fragments for the difference of ""all bits currently in memory"" and ""the; /// fragment of the second def"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:768,variab,variable,768,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,4,['variab'],['variable']
Modifiability,"/// In the ""DisableDerivedAbiTags"" mode derived ABI tags are not calculated.; /// This mode is used when mangler creates another mangler recursively to; /// calculate ABI tags for the function return value or the variable type.; /// Also it is required to avoid infinite recursion in some cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:213,variab,variable,213,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['variab'],['variable']
Modifiability,"/// In the Microsoft ABI, this controls the placement of virtual displacement; /// members used to implement virtual inheritance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:117,inherit,inheritance,117,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['inherit'],['inheritance']
Modifiability,"/// In the Microsoft C++ ABI, use zero for the field offset of a null data; /// member pointer if we can guarantee that zero is not a valid field offset,; /// or if the member pointer has multiple fields. Polymorphic classes have a; /// vfptr at offset zero, so we can use zero for null. If there are multiple; /// fields, we can use zero even if it is a valid field offset because; /// null-ness testing will check the other fields.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:205,Polymorphi,Polymorphic,205,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['Polymorphi'],['Polymorphic']
Modifiability,"/// In the case of std::vector<bool> `PushProxy` also creates a temporary bool variable the address of which; /// is returned from these calls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderArray.cxx:79,variab,variable,79,tree/treeplayer/src/TTreeReaderArray.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderArray.cxx,1,['variab'],['variable']
Modifiability,"/// In the v2 ABI, ivar offset variables use the type encoding in their name; /// to trigger linker failures if the types don't match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:31,variab,variables,31,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['variab'],['variables']
Modifiability,/// Indicate to the backend that \c GV has had its storage changed to inside; /// a constant pool. This means it no longer needs to be emitted as a; /// global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMMachineFunctionInfo.h:160,variab,variable,160,interpreter/llvm-project/llvm/lib/Target/ARM/ARMMachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMMachineFunctionInfo.h,1,['variab'],['variable']
Modifiability,/// Indicates if there are any fixed size allocas present.; /// Note that if there are only variable sized allocas this is set to false.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRMachineFunctionInfo.h:92,variab,variable,92,interpreter/llvm-project/llvm/lib/Target/AVR/AVRMachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRMachineFunctionInfo.h,1,['variab'],['variable']
Modifiability,/// Indicates that variable data is stored in memory relative to the; /// specified register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h:19,variab,variable,19,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,1,['variab'],['variable']
Modifiability,/// Indicates that variable is initialized with mismatching form of \a new.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['variab'],['variable']
Modifiability,/// Indicates the capture is a __block variable that is captured by a block; /// that can potentially escape (a block for which BlockDecl::doesNotEscape; /// returns false).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:39,variab,variable,39,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Indicates the capture is a __block variable that is never captured by an; /// escaping block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:39,variab,variable,39,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Indicates whether an instance variable is required to be released in; /// -dealloc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:34,variab,variable,34,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['variab'],['variable']
Modifiability,"/// IndirectAliased - Similar to Indirect, but the pointer may be to an; /// object that is otherwise referenced. The object is known to not be; /// modified through any other references for the duration of the call, and; /// the callee must not itself modify the object. Because C allows; /// parameter variables to be modified and guarantees that they have unique; /// addresses, the callee must defensively copy the object into a local; /// variable if it might be modified or its address might be compared.; /// Since those are uncommon, in principle this convention allows programs; /// to avoid copies in more situations. However, it may introduce *extra*; /// copies if the callee fails to prove that a copy is unnecessary and the; /// caller naturally produces an unaliased object for the argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:304,variab,variables,304,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// Induction variables that were generated and inserted by the SCEV Expander.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:14,variab,variables,14,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['variab'],['variables']
Modifiability,/// InductionList saves induction variables and maps them to the; /// induction descriptor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:34,variab,variables,34,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,1,['variab'],['variables']
Modifiability,"/// Infer range information from the given integer constant.; ///; /// It's not a real ""inference"", but is here for operating with; /// sub-expressions in a more polymorphic manner.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:162,polymorphi,polymorphic,162,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['polymorphi'],['polymorphic']
Modifiability,/// Info on the global variable used to guard initialization of static locals.; /// The BitIndex field is only used for externally invisible declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['variab'],['variable']
Modifiability,"/// Information about global variables.; ///; /// Indexed by the context ID, contextKind, identifier ID.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp:29,variab,variables,29,interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,1,['variab'],['variables']
Modifiability,/// Information about operands; // TODO: Will be extended when additional optimizations are added,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp:49,extend,extended,49,interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp,1,['extend'],['extended']
Modifiability,/// Information about operator rewrites to consider when adding operator; /// functions to a candidate set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:31,rewrite,rewrites,31,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h,1,['rewrite'],['rewrites']
Modifiability,"/// Information about stack frame layout on the target. It holds the direction; /// of stack growth, the known stack alignment on entry to each function, and; /// the offset to the locals area.; ///; /// The offset to the local area is the offset from the stack pointer on; /// function entry to the first location where function data (local variables,; /// spill locations) can be stored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:342,variab,variables,342,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,1,['variab'],['variables']
Modifiability,/// Information about the layout of a __block variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h:46,variab,variable,46,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,1,['variab'],['variable']
Modifiability,/// Information about the plugin required to load its passes; ///; /// This struct defines the core interface for pass plugins and is supposed to; /// be filled out by plugin implementors. LLVM-side users of a plugin are; /// expected to use the \c PassPlugin class below to interface with it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:26,plugin,plugin,26,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,4,['plugin'],"['plugin', 'plugins']"
Modifiability,/// Inherit the default template argument from \p From to \p To. Returns; /// \c false if there is no default template for \p From.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:4,Inherit,Inherit,4,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,1,['Inherit'],['Inherit']
Modifiability,"/// Inheritance utility for extensible RTTI.; ///; /// Supports single inheritance only: A class can only have one; /// ExtensibleRTTI-parent (i.e. a parent for which the isa<> test will work),; /// though it can have many non-ExtensibleRTTI parents.; ///; /// RTTIExtents uses CRTP so the first template argument to RTTIExtends is the; /// newly introduced type, and the *second* argument is the parent class.; ///; /// class MyType : public RTTIExtends<MyType, RTTIRoot> {; /// public:; /// static char ID;; /// };; ///; /// class MyDerivedType : public RTTIExtends<MyDerivedType, MyType> {; /// public:; /// static char ID;; /// };; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h:4,Inherit,Inheritance,4,interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ExtensibleRTTI.h,2,"['Inherit', 'inherit']","['Inheritance', 'inheritance']"
Modifiability,"/// InheritanceHierarchyWriter - Helper class that writes out a; /// GraphViz file that diagrams the inheritance hierarchy starting at; /// a given C++ class type. Note that we do not use LLVM's; /// GraphWriter, because the interface does not permit us to properly; /// differentiate between uses of types as virtual bases; /// vs. non-virtual bases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/InheritViz.cpp:4,Inherit,InheritanceHierarchyWriter,4,interpreter/llvm-project/clang/lib/AST/InheritViz.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/InheritViz.cpp,2,"['Inherit', 'inherit']","['InheritanceHierarchyWriter', 'inheritance']"
Modifiability,/// Initialize - Start this rewrite buffer out with a copy of the unmodified; /// input buffer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h:28,rewrite,rewrite,28,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,1,['rewrite'],['rewrite']
Modifiability,/// Initialize a new fix-it rewriter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:28,rewrite,rewriter,28,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,1,['rewrite'],['rewriter']
Modifiability,/// Initialize declare reduction construct initializer.; /// \return omp_priv variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:78,variab,variable,78,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Initialize device global variable entry.; /// This is ONLY used for DEVICE compilation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:29,variab,variable,29,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,"/// Initialize the structural components of a __block variable, i.e.; /// everything but the actual object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:54,variab,variable,54,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,/// Initialize the time trace profiler.; /// This sets up the global \p TimeTraceProfilerInstance; /// variable to be the profiler instance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h:103,variab,variable,103,interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TimeProfiler.h,1,['variab'],['variable']
Modifiability,"/// InitializeAllAsmParsers - The main program should call this function if it; /// wants all asm parsers that LLVM is configured to support, to make them; /// available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:119,config,configured,119,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,1,['config'],['configured']
Modifiability,"/// InitializeAllAsmPrinters - The main program should call this function if; /// it wants all asm printers that LLVM is configured to support, to make them; /// available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:121,config,configured,121,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,1,['config'],['configured']
Modifiability,"/// InitializeAllDisassemblers - The main program should call this function if; /// it wants all disassemblers that LLVM is configured to support, to make; /// them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:124,config,configured,124,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,1,['config'],['configured']
Modifiability,"/// InitializeAllTargetInfos - The main program should call this function if; /// it wants access to all available targets that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:136,config,configured,136,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,1,['config'],['configured']
Modifiability,"/// InitializeAllTargetMCs - The main program should call this function if it; /// wants access to all available target MC that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:136,config,configured,136,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,1,['config'],['configured']
Modifiability,"/// InitializeAllTargets - The main program should call this function if it; /// wants access to all available target machines that LLVM is configured to; /// support, to make them available via the TargetRegistry.; ///; /// It is legal for a client to make multiple calls to this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h:140,config,configured,140,interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TargetSelect.h,1,['config'],['configured']
Modifiability,"/// Initializers for a module, in order. Each Decl will be either; /// something that has a semantic effect on startup (such as a variable with; /// a non-constant initializer), or an ImportDecl (which recursively triggers; /// initialization of another module).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:130,variab,variable,130,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['variab'],['variable']
Modifiability,/// Initiates and performs a specific refactoring action.; ///; /// The specific rule will invoke an appropriate \c handle method on a; /// consumer to propagate the result of the refactoring action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h:38,refactor,refactoring,38,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,2,['refactor'],['refactoring']
Modifiability,"/// Initiates the extract function refactoring operation.; ///; /// \param Code The selected set of statements.; /// \param DeclName The name of the extract function. If None,; /// ""extracted"" is used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/Extract/Extract.h:35,refactor,refactoring,35,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/Extract/Extract.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/Extract/Extract.h,1,['refactor'],['refactoring']
Modifiability,"/// Inline information stores the name of the inline function along with; /// an array of address ranges. It also stores the call file and call line; /// that called this inline function. This allows us to unwind inline call; /// stacks back to the inline or concrete function that called this; /// function. Inlined functions contained in this function are stored in the; /// ""Children"" variable. All address ranges must be sorted and all address; /// ranges of all children must be contained in the ranges of this function.; /// Any clients that encode information will need to ensure the ranges are; /// all contined correctly or lookups could fail. Add ranges in these objects; /// must be contained in the top level FunctionInfo address ranges as well.; ///; /// ENCODING; ///; /// When saved to disk, the inline info encodes all ranges to be relative to; /// a parent address range. This will be the FunctionInfo's start address if; /// the InlineInfo is directly contained in a FunctionInfo, or a the start; /// address of the containing parent InlineInfo's first ""Ranges"" member. This; /// allows address ranges to be efficiently encoded using ULEB128 encodings as; /// we encode the offset and size of each range instead of full addresses. This; /// also makes any encoded addresses easy to relocate as we just need to; /// relocate the FunctionInfo's start address.; ///; /// - The AddressRanges member ""Ranges"" is encoded using an appropriate base; /// address as described above.; /// - UINT8 boolean value that specifies if the InlineInfo object has children.; /// - UINT32 string table offset that points to the name of the inline; /// function.; /// - ULEB128 integer that specifies the file of the call site that called; /// this function.; /// - ULEB128 integer that specifies the source line of the call site that; /// called this function.; /// - if this object has children, enocode each child InlineInfo using the; /// the first address range's start address as the base address.;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:388,variab,variable,388,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,1,['variab'],['variable']
Modifiability,"/// InlineLayoutInstruction - This routine produce an inline instruction for the; /// block variable layout if it can. If not, it returns 0. Rules are as follow:; /// If ((uintptr_t) layout) < (1 << 12), the layout is inline. In the 64bit world,; /// an inline layout of value 0x0000000000000xyz is interpreted as follows:; /// x captured object pointers of BLOCK_LAYOUT_STRONG. Followed by; /// y captured object of BLOCK_LAYOUT_BYREF. Followed by; /// z captured object of BLOCK_LAYOUT_WEAK. If any of the above is missing, zero; /// replaces it. For example, 0x00000x00 means x BLOCK_LAYOUT_STRONG and no; /// BLOCK_LAYOUT_BYREF and no BLOCK_LAYOUT_WEAK objects are captured.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:92,variab,variable,92,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variable']
Modifiability,"/// InnerLoopVectorizer vectorizes loops which contain only one basic; /// block to a specified vectorization factor (VF).; /// This class performs the widening of scalars into vectors, or multiple; /// scalars. This class also implements the following features:; /// * It inserts an epilogue loop for handling loops that don't have iteration; /// counts that are known to be a multiple of the vectorization factor.; /// * It handles the code generation for reduction variables.; /// * Scalarization (implementation using scalars) of un-vectorizable; /// instructions.; /// InnerLoopVectorizer does not perform any vectorization-legality; /// checks, and relies on the caller to check for the different legality; /// aspects. The InnerLoopVectorizer relies on the; /// LoopVectorizationLegality class to provide information about the induction; /// and reduction variables that were found to a given vectorization factor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:468,variab,variables,468,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['variab'],['variables']
Modifiability,/// Insert a definition of a new global variable at each point contained in; /// InsPtsPerFunc and update the related uses (also contained in; /// InsPtsPerFunc).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:40,variab,variable,40,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,1,['variab'],['variable']
Modifiability,"/// Insert a file into this GSYM creator.; ///; /// Inserts a file by adding a FileEntry into the ""Files"" member variable if; /// the file has not already been added. The file path is split into; /// directory and filename which are both added to the string table. This; /// allows paths to be stored efficiently by reusing the directories that are; /// common between multiple files.; ///; /// \param Path The path to the file to insert.; /// \param Style The path style for the ""Path"" parameter.; /// \returns The unique file index for the inserted file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:113,variab,variable,113,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,1,['variab'],['variable']
Modifiability,"/// Insert a for (int i = 0; i < End; i++) loop structure (with the exception; /// that \p End is assumed > 0, and thus not checked on entry) at \p; /// SplitBefore. Returns the first insert point in the loop body, and the; /// PHINode for the induction variable (i.e. ""i"" above).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h:254,variab,variable,254,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/BasicBlockUtils.h,1,['variab'],['variable']
Modifiability,"/// Insert a new llvm.dbg.assign intrinsic call.; /// \param LinkedInstr Instruction with a DIAssignID to link with the new; /// intrinsic. The intrinsic will be inserted after; /// this instruction.; /// \param Val The value component of this dbg.assign.; /// \param SrcVar Variable's debug info descriptor.; /// \param ValExpr A complex location expression to modify \p Val.; /// \param Addr The address component (store destination).; /// \param AddrExpr A complex location expression to modify \p Addr.; /// NOTE: \p ValExpr carries the FragInfo for the; /// variable.; /// \param DL Debug info location, usually: (line: 0,; /// column: 0, scope: var-decl-scope). See; /// getDebugValueLoc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:275,Variab,Variable,275,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// Insert a new llvm.dbg.declare intrinsic call.; /// \param Storage llvm::Value of the variable; /// \param VarInfo Variable's debug info descriptor.; /// \param Expr A complex location expression.; /// \param DL Debug info location.; /// \param InsertAtEnd Location for the new intrinsic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:89,variab,variable,89,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// Insert a new llvm.dbg.declare intrinsic call.; /// \param Storage llvm::Value of the variable; /// \param VarInfo Variable's debug info descriptor.; /// \param Expr A complex location expression.; /// \param DL Debug info location.; /// \param InsertBefore Location for the new intrinsic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:89,variab,variable,89,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// Insert a new llvm.dbg.value intrinsic call.; /// \param Val llvm::Value of the variable; /// \param VarInfo Variable's debug info descriptor.; /// \param Expr A complex location expression.; /// \param DL Debug info location.; /// \param InsertAtEnd Location for the new intrinsic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:83,variab,variable,83,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// Insert a new llvm.dbg.value intrinsic call.; /// \param Val llvm::Value of the variable; /// \param VarInfo Variable's debug info descriptor.; /// \param Expr A complex location expression.; /// \param DL Debug info location.; /// \param InsertBefore Location for the new intrinsic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:83,variab,variable,83,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,"/// Insert code into the entry block that stores the stack guard; /// variable onto the stack:; ///; /// entry:; /// StackGuardSlot = alloca i8*; /// StackGuard = <stack guard>; /// call void @llvm.stackprotector(StackGuard, StackGuardSlot); ///; /// Returns true if the platform/triple supports the stackprotectorcreate pseudo; /// node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp:70,variab,variable,70,interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp,1,['variab'],['variable']
Modifiability,/// Insert global variable \p GV at the end of the global variable list and; /// take ownership.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:18,variab,variable,18,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,2,['variab'],['variable']
Modifiability,/// Insert global variable \p GV into the global variable list before \p; /// Where and take ownership.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:18,variab,variable,18,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,2,['variab'],['variable']
Modifiability,/// Insert selects and rewrite PHI operands to use them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp:23,rewrite,rewrite,23,interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp,1,['rewrite'],['rewrite']
Modifiability,/// Insert truncates and extends for any truncated recipe. Redundant casts; /// will be folded later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.h:25,extend,extends,25,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.h,1,['extend'],['extends']
Modifiability,"/// Inserts programmed event record into the LWP event ring buffer; /// and advances the ring buffer pointer.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> LWPINS </c> instruction.; ///; /// \param DATA2; /// A 32-bit value is zero-extended and inserted into the 64-bit Data2 field.; /// \param DATA1; /// A 32-bit value is inserted into the 32-bit Data1 field.; /// \param FLAGS; /// A 32-bit immediate value is inserted into the 32-bit Flags field.; /// \returns If the ring buffer is full and LWP is running in Synchronized Mode,; /// the event record overwrites the last record in the buffer, the MissedEvents; /// counter in the LWPCB is incremented, the head pointer is not advanced, and; /// 1 is returned. Otherwise 0 is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/lwpintrin.h:270,extend,extended,270,interpreter/llvm-project/clang/lib/Headers/lwpintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/lwpintrin.h,1,['extend'],['extended']
Modifiability,/// Install the initializer into a global variable. This cannot; /// be called multiple times.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitFuture.h:42,variab,variable,42,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitFuture.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitFuture.h,1,['variab'],['variable']
Modifiability,/// Instantiate a ScheduleDAGInstrs for PostRA scheduling that will be owned by; /// the caller. We don't have a command line option to override the postRA; /// scheduler. The Target must configure it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:188,config,configure,188,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['config'],['configure']
Modifiability,"/// Instantiate the declaration of a variable template partial; /// specialization.; ///; /// \param VarTemplate the (instantiated) variable template that is partially; /// specialized by the instantiation of \p PartialSpec.; ///; /// \param PartialSpec the (uninstantiated) variable template partial; /// specialization that we are instantiating.; ///; /// \returns The instantiated partial specialization, if successful; otherwise,; /// NULL to indicate an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,3,['variab'],['variable']
Modifiability,"/// Instantiate the definition of the given variable from its; /// template.; ///; /// \param PointOfInstantiation the point at which the instantiation was; /// required. Note that this is not precisely a ""point of instantiation""; /// for the variable, but it's close.; ///; /// \param Var the already-instantiated declaration of a templated variable.; ///; /// \param Recursive if true, recursively instantiates any functions that; /// are required by this instantiation.; ///; /// \param DefinitionRequired if true, then we are performing an explicit; /// instantiation where a definition of the variable is required. Complain; /// if there is no such definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,4,['variab'],['variable']
Modifiability,/// Instantiate the initializer of a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,/// Instantiates a variable template specialization by completing it; /// with appropriate type information and initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,"/// Instructions that accept extend modifiers like UXTW expect the register; /// being extended to be a GPR32, but the incoming DAG might be acting on a; /// GPR64 (either via SEXT_INREG or AND). Extract the appropriate low bits if; /// this is the case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:29,extend,extend,29,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"/// Instructions which will become dead if we rewrite the alloca.; ///; /// Note that these are not separated by slice. This is because we expect an; /// alloca to be completely rewritten or not rewritten at all. If rewritten,; /// all these instructions can simply be removed and replaced with poison as; /// they come from outside of the allocated space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:46,rewrite,rewrite,46,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['rewrite'],['rewrite']
Modifiability,/// Integer arguments are sign or zero extended to 32/64 bits; /// during default argument promotions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:39,extend,extended,39,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['extend'],['extended']
Modifiability,"/// Integrate other statistical data into the current data.; ///; /// The implementation assumes that the other statistics were recorded with; /// the same binning configuration, and that the statistics of `OtherData`; /// are a superset of those recorded by the active `RHistData` instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx:164,config,configuration,164,hist/histv7/inc/ROOT/RHistData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx,1,['config'],['configuration']
Modifiability,/// Interface for Layers that accept object files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:18,Layers,Layers,18,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,1,['Layers'],['Layers']
Modifiability,"/// Interface for compilation database plugins.; ///; /// A compilation database plugin allows the user to register custom compilation; /// databases that are picked up as compilation database if the corresponding; /// library is linked in. To register a plugin, declare a static variable like:; ///; /// \code; /// static CompilationDatabasePluginRegistry::Add<MyDatabasePlugin>; /// X(""my-compilation-database"", ""Reads my own compilation database"");; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabasePluginRegistry.h:39,plugin,plugins,39,interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabasePluginRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabasePluginRegistry.h,4,"['plugin', 'variab']","['plugin', 'plugins', 'variable']"
Modifiability,"/// Interface for executing clang frontend actions.; ///; /// This can be extended to support running tool actions in different; /// execution mode, e.g. on a specific set of TUs or many TUs in parallel.; ///; /// New executors can be registered as ToolExecutorPlugins via the; /// `ToolExecutorPluginRegistry`. CLI tools can use; /// `createExecutorFromCommandLineArgs` to create a specific registered; /// executor according to the command-line arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Execution.h:74,extend,extended,74,interpreter/llvm-project/clang/include/clang/Tooling/Execution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Execution.h,1,['extend'],['extended']
Modifiability,/// Interface for factories that create specific executors. This is also; /// used as a plugin to be registered into ToolExecutorPluginRegistry.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Execution.h:88,plugin,plugin,88,interpreter/llvm-project/clang/include/clang/Tooling/Execution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Execution.h,1,['plugin'],['plugin']
Modifiability,/// Interface for layers that accept LLVM IR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h:18,layers,layers,18,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Layer.h,1,['layers'],['layers']
Modifiability,"/// Interface function. If true, min/max of binning is parameterized by external RooAbsReals.; /// Default to `false`, unless overridden by a sub class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsBinning.h:55,parameteriz,parameterized,55,roofit/roofitcore/inc/RooAbsBinning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsBinning.h,1,['parameteriz'],['parameterized']
Modifiability,"/// Interpret clang arguments in preparation to parse a file.; ///; /// This simulates a number of steps Clang takes when its driver is invoked:; /// - choosing actions (e.g compile + link) to run; /// - probing the system for settings like standard library locations; /// - spawning a cc1 subprocess to compile code, with more explicit arguments; /// - in the cc1 process, assembling those arguments into a CompilerInvocation; /// which is used to configure the parser; ///; /// This simulation is lossy, e.g. in some situations one driver run would; /// result in multiple parses. (Multi-arch, CUDA, ...).; /// This function tries to select a reasonable invocation that tools should use.; ///; /// Args[0] should be the driver name, such as ""clang"" or ""/usr/bin/g++"".; /// Absolute path is preferred - this affects searching for system headers.; ///; /// May return nullptr if an invocation could not be determined.; /// See CreateInvocationOptions::ShouldRecoverOnErrors to try harder!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h:449,config,configure,449,interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/Utils.h,1,['config'],['configure']
Modifiability,"/// Interprets an option's string value as a boolean. The ""true"" string is; /// interpreted as true and the ""false"" string is interpreted as false.; ///; /// If an option value is not provided, returns the given \p DefaultVal.; /// @param [in] CheckerName The *full name* of the checker. One may retrieve; /// this from the checker object's field \c Name, or through \c; /// CheckerManager::getCurrentCheckerName within the checker's registry; /// function.; /// Checker options are retrieved in the following format:; /// `-analyzer-config CheckerName:OptionName=Value.; /// @param [in] OptionName Name for option to retrieve.; /// @param [in] SearchInParents If set to true and the searched option was not; /// specified for the given checker the options for the parent packages will; /// be searched as well. The inner packages take precedence over the outer; /// ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:534,config,config,534,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,1,['config'],['config']
Modifiability,"/// Interprets an option's string value as an integer value.; ///; /// If an option value is not provided, returns the given \p DefaultVal.; /// @param [in] CheckerName The *full name* of the checker. One may retrieve; /// this from the checker object's field \c Name, or through \c; /// CheckerManager::getCurrentCheckerName within the checker's registry; /// function.; /// Checker options are retrieved in the following format:; /// `-analyzer-config CheckerName:OptionName=Value.; /// @param [in] OptionName Name for option to retrieve.; /// @param [in] SearchInParents If set to true and the searched option was not; /// specified for the given checker the options for the parent packages will; /// be searched as well. The inner packages take precedence over the outer; /// ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:447,config,config,447,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,1,['config'],['config']
Modifiability,/// Introduce the instantiated local variables into the local; /// instantiation scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:37,variab,variables,37,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['variab'],['variables']
Modifiability,/// Invoked when a fix is suggested against a variable. This function groups; /// all variables that must be fixed together (i.e their types must be changed; /// to the same target type to prevent type mismatches) into a single fixit.; ///; /// `D` is the declaration of the callable under analysis that owns `Variable`; /// and all of its group mates.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h:46,variab,variable,46,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,3,"['Variab', 'variab']","['Variable', 'variable', 'variables']"
Modifiability,"/// Is destruction of this variable entirely suppressed? If so, the variable; /// need not have a usable destructor at all.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,"/// Is the given expression (which must be 'const') a reference to a; /// variable which was originally non-const, but which has become; /// 'const' due to being captured within a block?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:74,variab,variable,74,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,/// Is the value of the given expression possibly a reference to or; /// into a __block variable?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:88,variab,variable,88,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,1,['variab'],['variable']
Modifiability,/// Is this a variable with a location attribute referencing address?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h:14,variab,variable,14,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h,1,['variab'],['variable']
Modifiability,"/// Is this global variable possibly used by a leak checker as a root? If so,; /// we might not really want to eliminate the stores to it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['variab'],['variable']
Modifiability,"/// Is this instruction potentially interesting for further simplification after; /// widening it's type? In other words, can the extend be safely hoisted out of; /// the loop with SCEV reducing the value to a recurrence on the same loop. If; /// so, return the extended recurrence and the kind of extension used. Otherwise; /// return {nullptr, ExtendKind::Unknown}.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:130,extend,extend,130,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,3,"['Extend', 'extend']","['ExtendKind', 'extend', 'extended']"
Modifiability,/// Is this predicate the predefined any-extend load predicate?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:41,extend,extend,41,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,1,['extend'],['extend']
Modifiability,/// Is this predicate the predefined non-extending load predicate?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:41,extend,extending,41,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,1,['extend'],['extending']
Modifiability,/// Is this predicate the predefined sign-extend load predicate?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:42,extend,extend,42,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,1,['extend'],['extend']
Modifiability,/// Is this predicate the predefined zero-extend load predicate?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:42,extend,extend,42,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,1,['extend'],['extend']
Modifiability,/// Is this token part of a \c DeclStmt defining multiple variables?; ///; /// Only set if \c Type == \c TT_StartOfName.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h:58,variab,variables,58,interpreter/llvm-project/clang/lib/Format/FormatToken.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h,1,['variab'],['variables']
Modifiability,/// Is this use uninitialized whenever the variable declaration is reached?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h:43,variab,variable,43,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,1,['variab'],['variable']
Modifiability,/// IsEncodeExtendedBlockSignatureDefault - Does this tool chain enable; /// -fencode-extended-block-signature by default.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h:86,extend,extended-block-signature,86,interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/ToolChain.h,1,['extend'],['extended-block-signature']
Modifiability,/// IsLastIteration - local flag variable passed to runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,"/// It is illegal to modify a const object after initialization.; /// Therefore, if a const object has a constant initializer, we don't; /// actually need to keep storage for it in the block; we'll just; /// rematerialize it at the start of the block function. This is; /// acceptable because we make no promises about address stability of; /// captured variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:354,variab,variables,354,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variables']
Modifiability,/// Iterate over the functions and promote the interesting constants into; /// global variables with module scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:86,variab,variables,86,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,1,['variab'],['variables']
Modifiability,/// Iteration adapter for range-for loops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:14,adapt,adapter,14,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,2,['adapt'],['adapter']
Modifiability,/// Iteratively perform simplification on a worklist of users of the; /// specified induction variable. This is the top-level driver that applies; /// all simplifications to users of an IV.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:94,variab,variable,94,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['variab'],['variable']
Modifiability,"/// Iteratively perform simplification on a worklist of users; /// of the specified induction variable. Each successive simplification may push; /// more users which may themselves be candidates for simplification.; ///; /// This algorithm does not require IVUsers analysis. Instead, it simplifies; /// instructions in-place during analysis. Rather than rewriting induction; /// variables bottom-up from their users, it transforms a chain of IVUsers; /// top-down, updating the IR only when it encounters a clear optimization; /// opportunity.; ///; /// Once DisableIVRewrite is default, LSR will be the only client of IVUsers.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:94,variab,variable,94,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,/// Iterator adaptor that invents template argument location information; /// for each of the template arguments in its underlying iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:13,adapt,adaptor,13,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['adapt'],['adaptor']
Modifiability,/// Iterator to variable in previous scope that was declared just before; /// begin of this scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:16,variab,variable,16,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variable']
Modifiability,/// JITLink sub-arch configuration for Arm CPU models,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:21,config,configuration,21,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,1,['config'],['configuration']
Modifiability,"/// Just like getFuncOrVarName, except that it will return literal string; /// 'External Symbol' if the function or global variable is external to; /// this symbol table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:123,variab,variable,123,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variable']
Modifiability,"/// Keep track of CUDA/HIP device-side variables ODR-used by host code.; /// This does not include extern shared variables used by device host; /// functions as addresses of shared variables are per warp, therefore; /// cannot be accessed by host code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:39,variab,variables,39,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,3,['variab'],['variables']
Modifiability,/// Keep track of CUDA/HIP external kernels or device variables ODR-used by; /// host code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:54,variab,variables,54,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['variab'],['variables']
Modifiability,/// Keeps track of TLS variable candidates found in the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:23,variab,variable,23,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,1,['variab'],['variable']
Modifiability,/// Keeps track of a TLS variable candidate and its users.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:25,variab,variable,25,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,1,['variab'],['variable']
Modifiability,/// Keeps track of the user of a TLS variable and the operand index; /// where the variable is used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h:37,variab,variable,37,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/TLSVariableHoist.h,2,['variab'],['variable']
Modifiability,/// Keeps track of variable containing handle of GPU binary. Populated by; /// ModuleCtorFunction() and used to create corresponding cleanup calls in; /// ModuleDtorFunction(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['variab'],['variable']
Modifiability,"/// Key used to identify LifetimeExtendedTemporaryDecl for merging,; /// containing the lifetime-extending declaration and the mangling number.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:97,extend,extending,97,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['extend'],['extending']
Modifiability,/// Kind of device clause for declare target variables; /// and functions; /// NOTE: Currently not used as a part of a variable entry; /// used for Flang and Clang to interface with the variable; /// related registration functions,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:45,variab,variables,45,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// LLT is packed into 64 bits as follows:; /// isScalar : 1; /// isPointer : 1; /// isVector : 1; /// with 61 bits remaining for Kind-specific data, packed in bitfields; /// as described below. As there isn't a simple portable way to pack bits; /// into bitfields, here the different fields in the packed structure is; /// described in static const *Field variables. Each of these variables; /// is a 2-element array, with the first element describing the bitfield size; /// and the second element describing the bitfield offset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LowLevelType.h:219,portab,portable,219,interpreter/llvm-project/llvm/include/llvm/CodeGen/LowLevelType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LowLevelType.h,3,"['portab', 'variab']","['portable', 'variables']"
Modifiability,/// LLVM type for C int*. Used for GCC-ABI-compatible non-fragile instance; /// variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:80,variab,variables,80,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['variab'],['variables']
Modifiability,/// LTO configuration. A linker can configure LTO by setting fields in this data; /// structure and passing it to the lto::LTO constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:8,config,configuration,8,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,2,['config'],"['configuration', 'configure']"
Modifiability,"/// LXVRZX - Load VSX Vector Rightmost and Zero Extend; /// This node represents v1i128 BUILD_VECTOR of a zero extending load; /// instruction from <byte, halfword, word, or doubleword> to i128.; /// Allows utilization of the Load VSX Vector Rightmost Instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:48,Extend,Extend,48,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,2,"['Extend', 'extend']","['Extend', 'extending']"
Modifiability,"/// Last legal insert point in each basic block in the current function.; /// The first entry is the first terminator, the second entry is the; /// last valid point to insert a split or spill for a variable that is; /// live into a landing pad or inlineasm_br successor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h:198,variab,variable,198,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,1,['variab'],['variable']
Modifiability,/// Lazily build the copy and dispose helpers for a __block variable; /// with the given information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:60,variab,variable,60,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,/// Legacy symbol lookup - DEPRECATED! Please override findSymbol instead.; ///; /// This method returns the address of the specified function or variable.; /// It is used to resolve symbols during module linking.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:146,variab,variable,146,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,1,['variab'],['variable']
Modifiability,"/// Legalize a single operand \p OpIdx of the machine instruction \p MI as a; /// Def by extending the operand's type to \p WideTy and truncating it back; /// with the \p TruncOpcode, and replacing the vreg of the operand in place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:89,extend,extending,89,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,1,['extend'],['extending']
Modifiability,"/// Legalize a single operand \p OpIdx of the machine instruction \p MI as a; /// Use by extending the operand's type to \p WideTy using the specified \p; /// ExtOpcode for the extension instruction, and replacing the vreg of the; /// operand in place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:89,extend,extending,89,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,1,['extend'],['extending']
Modifiability,/// Let-variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:8,variab,variable,8,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['variab'],['variable']
Modifiability,/// Lifetime would be extended by a reference binding to a temporary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:22,extend,extended,22,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extended']
Modifiability,/// Lifetime would be extended by a std::initializer_list object binding to; /// its backing array.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:22,extend,extended,22,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extended']
Modifiability,/// Lifetime-extend along this path.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:13,extend,extend,13,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extend']
Modifiability,"/// Like a regular LocalScope, except that the destructors of all local; /// variables are automatically emitted when the AutoScope is destroyed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:77,variab,variables,77,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,1,['variab'],['variables']
Modifiability,"/// Like the overload taking a `Function &`, but intended specifically; /// for frontends that want to build on Clang's target-configuration logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:127,config,configuration,127,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['config'],['configuration']
Modifiability,/// Line Number Extended Opcode Encodings.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h:16,Extend,Extended,16,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Dwarf.h,1,['Extend'],['Extended']
Modifiability,/// Line number for this CHECK pattern or std::nullopt if it is an implicit; /// pattern. Used to determine whether a variable definition is made on an; /// earlier line to the one with this CHECK.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:118,variab,variable,118,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,"/// Line number where this variable is defined, or std::nullopt if defined; /// before input is parsed. Used to determine whether a variable is defined on; /// the same line as a given use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:27,variab,variable,27,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,2,['variab'],['variable']
Modifiability,"/// List of DPValues, each recording a single variable assignment, the; /// equivalent of a dbg.value intrinsic. There is a one-to-one relationship; /// between each dbg.value in a block and each DPValue once the; /// representation has been converted, and the ordering of DPValues is; /// meaningful in the same was a dbg.values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:46,variab,variable,46,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,1,['variab'],['variable']
Modifiability,/// List of addresses of original variables/expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:34,variab,variables,34,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variables']
Modifiability,/// List of addresses of shared variables/expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:32,variab,variables,32,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variables']
Modifiability,/// List of all Variables and parameters in this function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:16,Variab,Variables,16,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['Variab'],['Variables']
Modifiability,/// List of dynamic shared object files to be loaded as pass plugins.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:61,plugin,plugins,61,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,1,['plugin'],['plugins']
Modifiability,"/// List of recently emitted OMPCanonicalLoops.; ///; /// Since OMPCanonicalLoops are nested inside other statements (in particular; /// CapturedStmt generated by OMPExecutableDirective and non-perfectly nested; /// loops), we cannot directly call OMPEmitOMPCanonicalLoop and receive its; /// llvm::CanonicalLoopInfo. Instead, we call EmitStmt and any; /// OMPEmitOMPCanonicalLoop called by it will add its CanonicalLoopInfo to; /// this stack when done. Entering a new loop requires clearing this list; it; /// either means we start parsing a new loop nest (in which case the previous; /// loop nest goes out of scope) or a second loop in the same level in which; /// case it would be ambiguous into which of the two (or more) loops the loop; /// nest would extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:759,extend,extend,759,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['extend'],['extend']
Modifiability,/// List of referenced variables in the order of appearance.; /// Every item in this list is unique.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:23,variab,variables,23,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,1,['variab'],['variables']
Modifiability,/// List of shared variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:19,variab,variables,19,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,/// List of the global variables with their addresses that should not be; /// emitted for the target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:23,variab,variables,23,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variables']
Modifiability,"/// List of values referenced by this global value's definition; /// (either by the initializer of a global variable, or referenced; /// from within a function). This does not include functions called, which; /// are listed in the derived FunctionSummary object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:108,variab,variable,108,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['variab'],['variable']
Modifiability,/// List of variable location changes grouped by the instruction the; /// change occurs before (see VarLocsBeforeInst). The elements from; /// zero to SingleVarLocEnd represent variables with a single location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h:12,variab,variable,12,interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// List of variables that can become declare target implicitly and, thus,; /// must be emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:12,variab,variables,12,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variables']
Modifiability,"/// List of vtable definitions decorated by a particular type identifier,; /// and their corresponding offsets in that type identifier's metadata.; /// Note that each type identifier may be compatible with multiple vtables, due; /// to inheritance, which is why this is a vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:236,inherit,inheritance,236,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['inherit'],['inheritance']
Modifiability,"/// Literals are represented as positive integers. Specifically, for a boolean; /// variable `V` that is represented as the positive integer `I`, the positive; /// literal `V` is represented as the integer `2*I` and the negative literal; /// `!V` is represented as the integer `2*I+1`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:84,variab,variable,84,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variable']
Modifiability,/// Live in/out structure for the variable values: a per-block map of; /// variables to their values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:34,variab,variable,34,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Live range @p LR corresponding to the lane Mask @p LM has a live; /// PHI def at the beginning of block @p B. Extend the range @p LR of; /// all predecessor values that reach this def. If @p LR is a subrange,; /// the array @p Undefs is the set of all locations where it is undefined; /// via <def,read-undef> in other subranges for the same register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h:114,Extend,Extend,114,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,1,['Extend'],['Extend']
Modifiability,/// LiveVariables pass - This pass computes the set of blocks in which each; /// variable is life and sets machine operand kill flags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:81,variab,variable,81,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,1,['variab'],['variable']
Modifiability,/// Load & Store {; // VE doesn't have i1 sign extending load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp:47,extend,extending,47,interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp,1,['extend'],['extending']
Modifiability,"/// Load a vtable from This, an object of polymorphic type RD, or from one of; /// its virtual bases if it does not have its own vtable. Returns the vtable; /// and the class from which the vtable was loaded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h:42,polymorphi,polymorphic,42,interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCXXABI.h,1,['polymorphi'],['polymorphic']
Modifiability,"/// Load object with live-in variable values. \p mlocs contains the live-in; /// values in each machine location, while \p vlocs the live-in variable; /// values. This method picks variable locations for the live-in variables,; /// creates DBG_VALUEs and puts them in #Transfers, then prepares the other; /// object fields to track variable locations as we step through the block.; /// FIXME: could just examine mloctracker instead of passing in \p mlocs?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:29,variab,variable,29,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,5,['variab'],"['variable', 'variables']"
Modifiability,"/// Load the AST file and validate its contents against the given; /// Preprocessor.; ///; /// \param PP the preprocessor associated with the context in which this; /// precompiled header will be loaded.; ///; /// \param Context the AST context that this precompiled header will be; /// loaded into, if any.; ///; /// \param PCHContainerRdr the PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Extensions the list of module file extensions that can be loaded; /// from the AST files.; ///; /// \param isysroot If non-NULL, the system include path specified by the; /// user. This is only used with relocatable PCH files. If non-NULL,; /// a relocatable PCH file will use the default path ""/"".; ///; /// \param DisableValidationKind If set, the AST reader will suppress most; /// of its regular consistency checking, allowing the use of precompiled; /// headers and module files that cannot be determined to be compatible.; ///; /// \param AllowASTWithCompilerErrors If true, the AST reader will accept an; /// AST file the was created out of an AST with compiler errors,; /// otherwise it will reject it.; ///; /// \param AllowConfigurationMismatch If true, the AST reader will not check; /// for configuration differences between the AST file and the invocation.; ///; /// \param ValidateSystemInputs If true, the AST reader will validate; /// system input files in addition to user input files. This is only; /// meaningful if \p DisableValidation is false.; ///; /// \param UseGlobalIndex If true, the AST reader will try to load and use; /// the global module index.; ///; /// \param ReadTimer If non-null, a timer used to track the time spent; /// deserializing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:1234,config,configuration,1234,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['config'],['configuration']
Modifiability,/// Load the list of plugins requested in the \c FrontendOptions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h:21,plugin,plugins,21,interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/CompilerInstance.h,1,['plugin'],['plugins']
Modifiability,"/// Load the set of used but not defined functions or variables with; /// internal linkage, or used but not defined inline functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h:54,variab,variables,54,interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/MultiplexExternalSemaSource.h,1,['variab'],['variables']
Modifiability,"/// Load the set of used but not defined functions or variables with; /// internal linkage, or used but not defined internal functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:54,variab,variables,54,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,1,['variab'],['variables']
Modifiability,"/// Load tile configuration from a 64-byte memory location specified by; /// ""mem_addr"". The tile configuration includes the tile type palette, the; /// number of bytes per row, and the number of rows. If the specified; /// palette_id is zero, that signifies the init state for both the tile; /// config and the tile data, and the tiles are zeroed. Any invalid; /// configurations will result in #GP fault.; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the <c> LDTILECFG </c> instruction.; ///; /// \param __config; /// A pointer to 512-bits configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h:14,config,configuration,14,interpreter/llvm-project/clang/lib/Headers/amxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h,5,['config'],"['config', 'configuration', 'configurations']"
Modifiability,"/// Load tile rows from memory specifieid by ""base"" address and ""stride"" into; /// destination tile ""dst"" using the tile configuration previously configured; /// via ""_tile_loadconfig"". This intrinsic provides a hint to the implementation; /// that the data will likely not be reused in the near future and the data; /// caching can be optimized accordingly.; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the <c> TILELOADDT1 </c> instruction.; ///; /// \param dst; /// A destination tile. Max size is 1024 Bytes.; /// \param base; /// A pointer to base address.; /// \param stride; /// The stride between the rows' data to be loaded in memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h:121,config,configuration,121,interpreter/llvm-project/clang/lib/Headers/amxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h,2,['config'],"['configuration', 'configured']"
Modifiability,"/// Load tile rows from memory specifieid by ""base"" address and ""stride"" into; /// destination tile ""dst"" using the tile configuration previously configured; /// via ""_tile_loadconfig"".; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the <c> TILELOADD </c> instruction.; ///; /// \param dst; /// A destination tile. Max size is 1024 Bytes.; /// \param base; /// A pointer to base address.; /// \param stride; /// The stride between the rows' data to be loaded in memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h:121,config,configuration,121,interpreter/llvm-project/clang/lib/Headers/amxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h,2,['config'],"['configuration', 'configured']"
Modifiability,"/// LoadFromCommandLine - Create an ASTUnit from a vector of command line; /// arguments, which must specify exactly one source file.; ///; /// \param ArgBegin - The beginning of the argument vector.; ///; /// \param ArgEnd - The end of the argument vector.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; ///; /// \param ResourceFilesPath - The path to the compiler resource files.; ///; /// \param StorePreamblesInMemory - Whether to store PCH in memory. If false,; /// PCH are stored in temporary files.; ///; /// \param PreambleStoragePath - The path to a directory, in which to create; /// temporary PCH files. If empty, the default system temporary directory is; /// used. This parameter is ignored if \p StorePreamblesInMemory is true.; ///; /// \param ModuleFormat - If provided, uses the specific module format.; ///; /// \param ErrAST - If non-null and parsing failed without any AST to return; /// (e.g. because the PCH could not be loaded), this accepts the ASTUnit; /// mainly to allow the caller to see the diagnostics.; ///; /// \param VFS - A llvm::vfs::FileSystem to be used for all file accesses.; /// Note that preamble is saved to a temporary directory on a RealFileSystem,; /// so in order for it to be loaded correctly, VFS should have access to; /// it(i.e., be an overlay over RealFileSystem). RealFileSystem will be used; /// if \p VFS is nullptr.; ///; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:476,extend,extend,476,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,1,['extend'],['extend']
Modifiability,"/// LoadFromCompilerInvocation - Create an ASTUnit from a source file, via a; /// CompilerInvocation object.; ///; /// \param CI - The compiler invocation to use; it must have exactly one input; /// source file. The ASTUnit takes ownership of the CompilerInvocation object.; ///; /// \param PCHContainerOps - The PCHContainerOperations to use for loading and; /// creating modules.; ///; /// \param Diags - The diagnostics engine to use for reporting errors; its; /// lifetime is expected to extend past that of the returned ASTUnit.; //; // FIXME: Move OnlyLocalDecls, UseBumpAllocator to setters on the ASTUnit, we; // shouldn't need to specify them at construction time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h:492,extend,extend,492,interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/ASTUnit.h,1,['extend'],['extend']
Modifiability,"/// Loading virtual member pointers using the virtual inheritance model; /// always results in an adjustment using the vbtable even if the index is; /// zero.; ///; /// This is usually OK because the first slot in the vbtable points; /// backwards to the top of the MDC. However, the MDC might be reusing a; /// vbptr from an nv-base. In this case, the first slot in the vbtable; /// points to the start of the nv-base which introduced the vbptr and *not*; /// the MDC. Modify the NonVirtualBaseAdjustment to account for this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:54,inherit,inheritance,54,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['inherit'],['inheritance']
Modifiability,"/// Loads a compilation database from a build directory.; ///; /// Looks at the specified 'BuildDirectory' and creates a compilation database; /// that allows to query compile commands for source files in the; /// corresponding source tree.; ///; /// Returns NULL and sets ErrorMessage if we were not able to build up a; /// compilation database for the build directory.; ///; /// FIXME: Currently only supports JSON compilation databases, which; /// are named 'compile_commands.json' in the given directory. Extend this; /// for other build types (like ninja build files).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h:509,Extend,Extend,509,interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h,1,['Extend'],['Extend']
Modifiability,"/// Loads the plugin that implements this class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RVirtualCanvasPainter.hxx:14,plugin,plugin,14,graf2d/gpadv7/inc/ROOT/RVirtualCanvasPainter.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/inc/ROOT/RVirtualCanvasPainter.hxx,1,['plugin'],['plugin']
Modifiability,/// Local ObjectLinkingLayer::Plugin class to forward modifyPassConfig to the; /// Session.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:30,Plugin,Plugin,30,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,1,['Plugin'],['Plugin']
Modifiability,"/// Local cache of what-value-is-in-what-LocIdx. Used to identify differences; /// between TransferTrackers view of variable locations and MLocTrackers. For; /// example, MLocTracker observes all clobbers, but TransferTracker lazily; /// does not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:116,variab,variable,116,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,/// Local variable.; ///; /// TODO: Split up flags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:10,variab,variable,10,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['variab'],['variable']
Modifiability,"/// LocalScope - Node in tree of local scopes created for C++ implicit; /// destructor calls generation. It contains list of automatic variables; /// declared in the scope and link to position in previous scope this scope; /// began in.; ///; /// The process of creating local scopes is as follows:; /// - Init CFGBuilder::ScopePos with invalid position (equivalent for null),; /// - Before processing statements in scope (e.g. CompoundStmt) create; /// LocalScope object using CFGBuilder::ScopePos as link to previous scope; /// and set CFGBuilder::ScopePos to the end of new scope,; /// - On every occurrence of VarDecl increase CFGBuilder::ScopePos if it points; /// at this VarDecl,; /// - For every normal (without jump) end of scope add to CFGBlock destructors; /// for objects in the current scope,; /// - For every jump add to CFGBlock destructors for objects; /// between CFGBuilder::ScopePos and local scope position saved for jump; /// target. Thanks to C++ restrictions on goto jumps we can be sure that; /// jump target position will be on the path to root from CFGBuilder::ScopePos; /// (adding any variable that doesn't need constructor to be called to; /// LocalScope can break this assumption),; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:135,variab,variables,135,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Location kind for each variable. LiveLoc indicates whether the; /// dominating assignment in StackHomeValue (LocKind::Mem), DebugValue; /// (LocKind::Val), or neither (LocKind::None) is valid, in that order of; /// preference. This cannot be derived by inspecting DebugValue and; /// StackHomeValue due to the fact that there's no distinction in; /// Assignment (the class) between whether an assignment is unknown or a; /// merge of multiple assignments (both are Status::NoneOrPhi). In other; /// words, the memory location may well be valid while both DebugValue and; /// StackHomeValue contain Assignments that have a Status of NoneOrPhi.; /// Indexed by VariableID.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:27,variab,variable,27,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,"['Variab', 'variab']","['VariableID', 'variable']"
Modifiability,"/// Location of a PHI instruction that is also a debug-info variable value,; /// for the duration of register allocation. Loaded by the PHI-elimination; /// pass, and emitted as DBG_PHI instructions during VirtRegRewriter, with; /// maintenance applied by intermediate passes that edit registers (such as; /// coalescing and the allocator passes).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:60,variab,variable,60,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['variab'],['variable']
Modifiability,/// Location of interop variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:24,variab,variable,24,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,3,['variab'],['variable']
Modifiability,"/// Lock used to serialize all jit registration events, since they; /// modify global variables.; ///; /// Only a single instance of GDBJITRegistrationListener is ever created,; /// and so the lock can be a member variable of that instance. This ensures; /// destructors are run in the correct order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/GDBRegistrationListener.cpp:86,variab,variables,86,interpreter/llvm-project/llvm/lib/ExecutionEngine/GDBRegistrationListener.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/GDBRegistrationListener.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,/// Locks in the inheritance model for the given class and all of its bases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:17,inherit,inheritance,17,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['inherit'],['inheritance']
Modifiability,/// Logs an individual refactoring action invocation to STDOUT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:23,refactor,refactoring,23,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,1,['refactor'],['refactoring']
Modifiability,"/// Look for all of the module files with information about the given; /// identifier, e.g., a global function, variable, or type with that name.; ///; /// \param Name The identifier to look for.; ///; /// \param Hits Will be populated with the set of module files that have; /// information about this name.; ///; /// \returns true if the identifier is known to the index, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:112,variab,variable,112,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,1,['variab'],['variable']
Modifiability,"/// Look for entities within the base classes of this C++ class,; /// transitively searching all base class subobjects.; ///; /// This routine uses the callback function \p BaseMatches to find base; /// classes meeting some search criteria, walking all base class subobjects; /// and populating the given \p Paths structure with the paths through the; /// inheritance hierarchy that resulted in a match. On a successful search,; /// the \p Paths structure can be queried to retrieve the matching paths and; /// to determine if there were any ambiguities.; ///; /// \param BaseMatches callback function used to determine whether a given; /// base matches the user-defined search criteria.; ///; /// \param Paths used to record the paths from this class to its base class; /// subobjects that match the search criteria.; ///; /// \param LookupInDependent can be set to true to extend the search to; /// dependent base classes.; ///; /// \returns true if there exists any path from this class to a base class; /// subobject that matches the search criteria.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:356,inherit,inheritance,356,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,2,"['extend', 'inherit']","['extend', 'inheritance']"
Modifiability,"/// Look for information regarding the given global variable.; ///; /// \param Name The name of the global variable.; ///; /// \returns information about the global variable, if known.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/APINotesReader.h:52,variab,variable,52,interpreter/llvm-project/clang/include/clang/APINotes/APINotesReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/APINotesReader.h,3,['variab'],['variable']
Modifiability,"/// Look for interesting constants used within the given function.; /// Promote them into global variables, load these global variables within; /// the related function, so that the number of inserted load is minimal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:97,variab,variables,97,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,2,['variab'],['variables']
Modifiability,/// Look for opportunities to create a VPERMV/VPERMILPV/PSHUFB variable permute; /// from a vector of source values and a vector of extraction indices.; /// The vectors might be manipulated to match the type of the permute op.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:63,variab,variable,63,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,/// Look for stack variables referring to popped stack variables.; /// Returns true only if it found some dangling stack variables; /// referred by an other stack variable from different stack frame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StackAddrEscapeChecker.cpp:19,variab,variables,19,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StackAddrEscapeChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StackAddrEscapeChecker.cpp,4,['variab'],"['variable', 'variables']"
Modifiability,"/// Look for the pattern that conditionally negates a value via math operations:; /// cond.splat = sext i1 cond; /// sub = add cond.splat, x; /// xor = xor sub, cond.splat; /// and rewrite it to do the same, but via logical operations:; /// value.neg = sub 0, value; /// cond = select i1 neg, value.neg, value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:181,rewrite,rewrite,181,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// Look through a chain of LocationContexts to either find the; /// StackFrameContext that matches a DeclContext, or find a VarRegion; /// for a variable captured by a block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp:146,variab,variable,146,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp,1,['variab'],['variable']
Modifiability,/// Look up the constructor for the specified base class to see if it's; /// overridden due to this being an inherited constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:109,inherit,inherited,109,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherited']
Modifiability,"/// Look up the specified global in the module symbol table. If required, this; /// overload constructs the global variable using its constructor's defaults.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:115,variab,variable,115,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['variab'],['variable']
Modifiability,"/// Looks for the specified configuration file.; ///; /// \param[in] FileName Name of the file to search for.; /// \param[out] FilePath File absolute path, if it was found.; /// \return True if file was found.; ///; /// If the specified file name contains a directory separator, it is searched; /// for by its absolute path. Otherwise looks for file sequentially in; /// directories specified by SearchDirs field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:28,config,configuration,28,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,1,['config'],['configuration']
Modifiability,"/// LooksLikeLoopIV - The variable defines what looks like it could be a loop; /// IV, where it defs a variable in the latch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h:26,variab,variable,26,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,2,['variab'],['variable']
Modifiability,"/// Lookup the ValueInfo struct for the specified ValueKind. If the; /// VarDecl for the value cannot be found, nullptr is returned.; ///; /// If the ValueInfo does not have a valid integer value the variable; /// is evaluated as a constant expression to determine that value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ComparisonCategories.h:200,variab,variable,200,interpreter/llvm-project/clang/include/clang/AST/ComparisonCategories.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ComparisonCategories.h,1,['variab'],['variable']
Modifiability,/// Lookup the captured field decl for a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:41,variab,variable,41,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,3,['variab'],['variable']
Modifiability,/// Loop for which to rewrite AddRecsFor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp:22,rewrite,rewrite,22,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,1,['rewrite'],['rewrite']
Modifiability,/// Loop iteration variable init.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:19,variab,variable,19,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,/// Loop iteration variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:19,variab,variable,19,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,/// Loop through the global variables in the src module and merge them into the; /// dest module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp:28,variab,variables,28,interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,1,['variab'],['variables']
Modifiability,/// Loop variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:9,variab,variable,9,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"/// LoopVectorizationLegality checks if it is legal to vectorize a loop, and; /// to what vectorization factor.; /// This class does not look at the profitability of vectorization, only the; /// legality. This class has two main kinds of checks:; /// * Memory checks - The code in canVectorizeMemory checks if vectorization; /// will change the order of memory accesses in a way that will change the; /// correctness of the program.; /// * Scalars checks - The code in canVectorizeInstrs and canVectorizeMemory; /// checks for a number of different conditions, such as the availability of a; /// single induction variable, that all types are supported and vectorize-able,; /// etc. This code reflects the capabilities of InnerLoopVectorizer.; /// This class is also used by InnerLoopVectorizer for identifying; /// induction variable and the different reduction variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:613,variab,variable,613,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// Lower a vector shuffle as a zero or any extension.; ///; /// Given a specific number of elements, element bit width, and extension; /// stride, produce either a zero or any extension based on the available; /// features of the subtarget. The extended elements are consecutive and; /// begin and can start from an offsetted element index in the input; to; /// avoid excess shuffling the offset must either being in the bottom lane; /// or at the start of a higher lane. All extended elements must be from; /// the same lane.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:246,extend,extended,246,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['extend'],['extended']
Modifiability,/// LowerBound - local variable passed to runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:23,variab,variable,23,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,/// LowerEmuTLS - This pass generates __emutls_[vt].xyz variables for all; /// TLS variables for the emulated TLS model.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:56,variab,variables,56,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,2,['variab'],['variables']
Modifiability,"/// LowerIntrinsics - This pass rewrites calls to the llvm.gcread or; /// llvm.gcwrite intrinsics, replacing them with simple loads and stores as; /// directed by the GCStrategy. It also performs automatic root initialization; /// and custom intrinsic lowering.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GCRootLowering.cpp:32,rewrite,rewrites,32,interpreter/llvm-project/llvm/lib/CodeGen/GCRootLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GCRootLowering.cpp,1,['rewrite'],['rewrites']
Modifiability,"/// LowerIntrinsics - This pass rewrites calls to the llvm.gcread or; /// llvm.gcwrite intrinsics, replacing them with simple loads and stores as; /// directed by the GCStrategy. It also performs automatic root initialization; /// and custom intrinsic lowering.; ///; /// This pass requires `CollectorMetadataAnalysis`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h:32,rewrite,rewrites,32,interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GCMetadata.h,1,['rewrite'],['rewrites']
Modifiability,/// Lowers thread local variables on the XCore. Each thread local variable is; /// expanded to an array of n elements indexed by the thread ID where n is the; /// fixed number hardware threads supported by the device.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/XCore/XCoreLowerThreadLocal.cpp:24,variab,variables,24,interpreter/llvm-project/llvm/lib/Target/XCore/XCoreLowerThreadLocal.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/XCore/XCoreLowerThreadLocal.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"/// MCRegisterInfo base class - We assume that the target defines a static; /// array of MCRegisterDesc objects that represent all of the machine; /// registers that the target has. As such, we simply have to track a pointer; /// to this array so that we can turn register number into a register; /// descriptor.; ///; /// Note this class is designed to be a base class of TargetRegisterInfo, which; /// is the interface used by codegen. However, specific targets *should never*; /// specialize this class. MCRegisterInfo should only contain getters to access; /// TableGen generated physical register data. It must not be extended with; /// virtual methods.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h:623,extend,extended,623,interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCRegisterInfo.h,1,['extend'],['extended']
Modifiability,/// MO_TLSGD - On a symbol operand this indicates that the immediate is; /// the offset of the GOT entry with the TLS index structure that contains; /// the module number and variable offset for the symbol. Used in the; /// general dynamic TLS access model.; /// See 'ELF Handling for Thread-Local Storage' for more details.; /// SYMBOL_LABEL @TLSGD,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:175,variab,variable,175,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['variab'],['variable']
Modifiability,/// MO_TLSGD_FLAG - If this bit is set the symbol reference is relative to; /// TLS General Dynamic model for Linux and the variable offset of TLS; /// General Dynamic model for AIX.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPC.h:124,variab,variable,124,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPC.h,1,['variab'],['variable']
Modifiability,"/// MRM0m-MRM7m - Instructions that operate on a memory r/m operand and use; /// reg field to hold extended opcode, which is represented as /0, /1, ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:99,extend,extended,99,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['extend'],['extended']
Modifiability,"/// MRM0r-MRM7r - Instructions that operate on a register r/m operand and use; /// reg field to hold extended opcode, which is represented as /0, /1, ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:101,extend,extended,101,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,1,['extend'],['extended']
Modifiability,/// MSP430 Code Generator Pass Configuration Options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430TargetMachine.cpp:31,Config,Configuration,31,interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430TargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430TargetMachine.cpp,1,['Config'],['Configuration']
Modifiability,"/// MachineFunctionPass - This class adapts the FunctionPass interface to; /// allow convenient creation of passes that operate on the MachineFunction; /// representation. Instead of overriding runOnFunction, subclasses; /// override runOnMachineFunction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunctionPass.h:37,adapt,adapts,37,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunctionPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunctionPass.h,1,['adapt'],['adapts']
Modifiability,/// MachineSSAUpdater - This class updates SSA form for a set of virtual; /// registers defined in multiple blocks. This is used when code duplication; /// or another unstructured transformation wants to rewrite a set of uses of one; /// vreg with uses of a set of vregs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:204,rewrite,rewrite,204,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,1,['rewrite'],['rewrite']
Modifiability,"/// Macros which are ignored in front of a statement, as if they were an; /// attribute. So that they are not parsed as identifier, for example for Qts; /// emit.; /// \code; /// AlignConsecutiveDeclarations: true; /// StatementAttributeLikeMacros: []; /// unsigned char data = 'x';; /// emit signal(data); // This is parsed as variable declaration.; ///; /// AlignConsecutiveDeclarations: true; /// StatementAttributeLikeMacros: [emit]; /// unsigned char data = 'x';; /// emit signal(data); // Now it's fine again.; /// \endcode; /// \version 12",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:328,variab,variable,328,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['variab'],['variable']
Modifiability,"/// Make RValue out of variable declaration, creating a temporary; /// DeclRefExpr in the process.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,1,['variab'],['variable']
Modifiability,"/// Make this range have the bit width given by \p BitWidth. The; /// value is sign extended, truncated, or left alone to make it that width.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:84,extend,extended,84,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['extend'],['extended']
Modifiability,"/// Make this range have the bit width given by \p BitWidth. The; /// value is zero extended, truncated, or left alone to make it that width.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:84,extend,extended,84,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['extend'],['extended']
Modifiability,/// Makes a new numeric variable and registers it for destruction when the; /// context is destroyed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:24,variab,variable,24,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,/// Makes sure all subscript pairs share the same integer type by; /// sign-extending as necessary.; /// Sign-extending a subscript is safe because getelementptr assumes the; /// array subscripts are signed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h:76,extend,extending,76,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceAnalysis.h,2,['extend'],['extending']
Modifiability,"/// Mangle an expression which refers to a parameter variable.; ///; /// <expression> ::= <function-param>; /// <function-param> ::= fp <top-level CV-qualifiers> _ # L == 0, I == 0; /// <function-param> ::= fp <top-level CV-qualifiers>; /// <parameter-2 non-negative number> _ # L == 0, I > 0; /// <function-param> ::= fL <L-1 non-negative number>; /// p <top-level CV-qualifiers> _ # L > 0, I == 0; /// <function-param> ::= fL <L-1 non-negative number>; /// p <top-level CV-qualifiers>; /// <I-1 non-negative number> _ # L > 0, I > 0; ///; /// L is the nesting depth of the parameter, defined as 1 if the; /// parameter comes from the innermost function prototype scope; /// enclosing the current context, 2 if from the next enclosing; /// function prototype scope, and so on, with one special case: if; /// we've processed the full parameter clause for the innermost; /// function type, then L is one less. This definition conveniently; /// makes it irrelevant whether a function's result type was written; /// trailing or leading, but is otherwise overly complicated; the; /// numbering was first designed without considering references to; /// parameter in locations other than return types, and then the; /// mangling had to be generalized without changing the existing; /// manglings.; ///; /// I is the zero-based index of the parameter within its parameter; /// declaration clause. Note that the original ABI document describes; /// this using 1-based ordinals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['variab'],['variable']
Modifiability,"/// Map DebugVariable to the latest Value it's defined to have.; /// Needs to be a MapVector because we determine order-in-the-input-MIR from; /// the order in this container.; /// We only retain the last DbgValue in each block for each variable, to; /// determine the blocks live-out variable value. The Vars container forms the; /// transfer function for this block, as part of the dataflow analysis. The; /// movement of values between locations inside of a block is handled at a; /// much later stage, in the TransferTracker class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:237,variab,variable,237,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,2,['variab'],['variable']
Modifiability,/// Map a variable to the set of variables that it fully contains.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,/// Map from DeclContext to the current guard variable. We assume that the; /// AST is visited in source code order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:46,variab,variable,46,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['variab'],['variable']
Modifiability,/// Map non debug entry values coverage for local variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:50,variab,variables,50,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,/// Map of aggregate variables to their fragment associated with OldAlloca.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:21,variab,variables,21,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['variab'],['variables']
Modifiability,/// Map of all string variables defined so far. Used at parse time to detect; /// a name conflict between a numeric variable and a string variable when; /// the former is defined on a later line than the latter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:22,variab,variables,22,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,3,['variab'],"['variable', 'variables']"
Modifiability,/// Map of backing storage to a set of variables that are stored to it.; /// TODO: Backing storage shouldn't be limited to allocas only. Some local; /// variables have their storage allocated by the calling function (addresses; /// passed in with sret & byval parameters).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:39,variab,variables,39,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,2,['variab'],['variables']
Modifiability,"/// Map the scope coverage decile to the number of variables in the decile.; /// The first element of the array (at the index zero) represents the number; /// of variables with the no debug location at all, but the last element; /// in the vector represents the number of fully covered variables within; /// its scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:51,variab,variables,51,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,3,['variab'],['variables']
Modifiability,/// Map untagged stores to the variable fragments they assign to. Used by; /// processUntaggedInstruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:31,variab,variable,31,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"/// Mapper variable, which is 'v' in the example above",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:11,variab,variable,11,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,1,['variab'],['variable']
Modifiability,/// Mapping from extend bits to required operation:; /// shifter: 000 ==> uxtb; /// 001 ==> uxth; /// 010 ==> uxtw; /// 011 ==> uxtx; /// 100 ==> sxtb; /// 101 ==> sxth; /// 110 ==> sxtw; /// 111 ==> sxtx,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64AddressingModes.h,1,['extend'],['extend']
Modifiability,"/// Mapping from lexical scopes to blocks where variables in that scope are; /// assigned. Such blocks aren't necessarily ""in"" the lexical scope, it's; /// just a block where an assignment happens.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:48,variab,variables,48,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['variab'],['variables']
Modifiability,/// Mapping from lexical scopes to variables in that scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:35,variab,variables,35,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['variab'],['variables']
Modifiability,/// Mapping from variables to pointers to captures in SortedCaptures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h:17,variab,variables,17,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.h,1,['variab'],['variables']
Modifiability,"/// Mapping of DBG_INSTR_REF instructions to their values, for those; /// DBG_INSTR_REFs that call resolveDbgPHIs. These variable references solve; /// a mini SSA problem caused by DBG_PHIs being cloned, this collection caches; /// the result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:121,variab,variable,121,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,1,['variab'],['variable']
Modifiability,"/// Mapping of blocks to collections of ""trailing"" DPValues. As part of the; /// ""RemoveDIs"" project, debug-info variable location records are going to; /// cease being instructions... which raises the problem of where should they; /// be recorded when we remove the terminator of a blocks, such as:; ///; /// %foo = add i32 0, 0; /// br label %bar; ///; /// If the branch is removed, a legitimate transient state while editing a; /// block, any debug-records between those two instructions will not have a; /// location. Each block thus records any DPValue records that ""trail"" in; /// such a way. These are stored in LLVMContext because typically LLVM only; /// edits a small number of blocks at a time, so there's no need to bloat; /// BasicBlock with such a data structure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h:113,variab,variable,113,interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,1,['variab'],['variable']
Modifiability,/// Maps VarLocInfo.VariableID to a DebugVariable for VarLocRecords.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h:20,Variab,VariableID,20,interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,1,['Variab'],['VariableID']
Modifiability,"/// Maps a SCEV to the rewrite result of that SCEV at a certain version; /// number. If this number doesn't match the current Generation, we will; /// need to do a rewrite. To preserve the transformation order of previous; /// rewrites, we will rewrite the previous result instead of the original; /// SCEV.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:23,rewrite,rewrite,23,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,4,['rewrite'],"['rewrite', 'rewrites']"
Modifiability,"/// Maps a match result to a list of concrete edits (with possible; /// failure). This type is a building block of rewrite rules, but users will; /// generally work in terms of `ASTEdit`s (below) rather than directly in terms; /// of `EditGenerator`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:115,rewrite,rewrite,115,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,1,['rewrite'],['rewrite']
Modifiability,/// Maps levels (indices of the vector) to variables (elements of the vector); /// that are assigned values at the respective levels.; ///; /// The element at index 0 isn't used. Variables start from the element at; /// index 1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:43,variab,variables,43,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,2,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,/// Maps local variables marked as lastprivate conditional to their internal; /// types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:15,variab,variables,15,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variables']
Modifiability,"/// Maps names of string variables defined in a pattern to the number of; /// their parenthesis group in RegExStr capturing their last definition.; ///; /// E.g. for the pattern ""foo[[bar:.*]]baz([[bar]][[QUUX]][[bar:.*]])"",; /// RegExStr will be ""foo(.*)baz(\1<quux value>(.*))"" where <quux value> is; /// the value captured for QUUX on the earlier line where it was defined, and; /// VariableDefs will map ""bar"" to the third parenthesis group which captures; /// the second definition of ""bar"".; ///; /// Note: uses std::map rather than StringMap to be able to get the key when; /// iterating over values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:25,variab,variables,25,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,2,"['Variab', 'variab']","['VariableDefs', 'variables']"
Modifiability,"/// Maps the expression for the lastprivate variable to the global copy used; /// to store new value because original variables are not mapped in inner; /// parallel regions. Only private copies are captured but we need also to; /// store private copy in shared address.; /// Also, stores the expression for the private loop counter and it; /// threaprivate name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:44,variab,variable,44,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// Maps the function to the list of the globalized variables with their; /// addresses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:52,variab,variables,52,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['variab'],['variables']
Modifiability,/// Maps variables (indices of the vector) to their assignments (elements of; /// the vector).; ///; /// The element at index 0 isn't used. Variable assignments start from the; /// element at index 1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:9,variab,variables,9,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,2,"['Variab', 'variab']","['Variable', 'variables']"
Modifiability,"/// Mark MI as dead. If a def of one of MI's operands, DefMI, would also be; /// dead due to MI being killed, then mark DefMI as dead too.; /// Some of the combines (extends(trunc)), try to walk through redundant; /// copies in between the extends and the truncs, and this attempts to collect; /// the in between copies if they're dead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:166,extend,extends,166,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,2,['extend'],['extends']
Modifiability,"/// Mark a variable referenced, and check whether it is odr-used; /// (C++ [basic.def.odr]p2, C99 6.9p3). Note that this should not be; /// used directly for normal expressions referring to VarDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:11,variab,variable,11,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"/// Mark a variable's reference in a lambda as non-odr using.; ///; /// For generic lambdas, if a variable is named in a potentially evaluated; /// expression, where the enclosing full expression is dependent then we; /// must capture the variable (given a default capture).; /// This is accomplished by recording all references to variables; /// (DeclRefExprs or MemberExprs) within said nested lambda in its array of; /// PotentialCaptures. All such variables have to be captured by that lambda,; /// except for as described below.; /// If that variable is usable as a constant expression and is named in a; /// manner that does not involve its odr-use (e.g. undergoes; /// lvalue-to-rvalue conversion, or discarded) record that it is so. Upon the; /// act of analyzing the enclosing full expression (ActOnFinishFullExpr); /// if we can determine that the full expression is not instantiation-; /// dependent, then we can entirely avoid its capture.; ///; /// const int n = 0;; /// [&] (auto x) {; /// (void)+n + x;; /// };; /// Interestingly, this strategy would involve a capture of n, even though; /// it's obviously not odr-used here, because the full-expression is; /// instantiation-dependent. It could be useful to avoid capturing such; /// variables, even when they are referred to in an instantiation-dependent; /// expression, if we can unambiguously determine that they shall never be; /// odr-used. This would involve removal of the variable-referring-expression; /// from the array of PotentialCaptures during the lvalue-to-rvalue; /// conversions. But per the working draft N3797, (post-chicago 2013) we must; /// capture such variables.; /// Before anyone is tempted to implement a strategy for not-capturing 'n',; /// consider the insightful warning in:; /// /cfe-commits/Week-of-Mon-20131104/092596.html; /// ""The problem is that the set of captures for a lambda is part of the ABI; /// (since lambda layout can be made visible through inline functions and the; /// like), and there",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:11,variab,variable,11,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,6,['variab'],"['variable', 'variables']"
Modifiability,/// Mark every DIE in this unit as kept. This function also; /// marks variables as InDebugMap so that they appear in the; /// reconstructed accelerator tables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h:71,variab,variables,71,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinkerCompileUnit.h,1,['variab'],['variables']
Modifiability,/// Mark the entry as a global entry. This indicates the presense of a; /// kernel if the size size field is zero and a variable otherwise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h:120,variab,variable,120,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,1,['variab'],['variable']
Modifiability,/// Mark the entry as a managed global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h:39,variab,variable,39,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,1,['variab'],['variable']
Modifiability,/// Mark the entry as a surface variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h:32,variab,variable,32,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,1,['variab'],['variable']
Modifiability,/// Mark the entry as a texture variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h:32,variab,variable,32,interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/Offloading/Utility.h,1,['variab'],['variable']
Modifiability,/// Mark the identifiers for all the builtins with their; /// appropriate builtin ID # and mark any non-portable builtin identifiers as; /// such.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Builtins.h:104,portab,portable,104,interpreter/llvm-project/clang/include/clang/Basic/Builtins.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Builtins.h,1,['portab'],['portable']
Modifiability,/// Mark the record as a record for captured variables in CapturedStmt; /// construct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:45,variab,variables,45,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variables']
Modifiability,"/// Marks the version of the SCEV predicate used. When rewriting a SCEV; /// expression we mark it with the version of the predicate. We use this to; /// figure out if the predicate has changed from the last rewrite of the; /// SCEV. If so, we need to perform a new rewrite.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:208,rewrite,rewrite,208,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,2,['rewrite'],['rewrite']
Modifiability,/// Match a zero extend from a 32-bit value to 64-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,1,['extend'],['extend']
Modifiability,/// Matcher for gtest's EXPECT_CALL macro. `MockCall` matches the whole mock; /// member method call. This API is more flexible but requires more knowledge of; /// the AST structure of EXPECT_CALL macros.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:119,flexible,flexible,119,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,1,['flexible'],['flexible']
Modifiability,"/// Matches C arrays with a specified size that is not an; /// integer-constant-expression.; ///; /// Given; /// \code; /// void f() {; /// int a[] = { 2, 3 }; /// int b[42];; /// int c[a[0]];; /// }; /// \endcode; /// variableArrayType(); /// matches ""int c[a[0]]""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:219,variab,variableArrayType,219,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variableArrayType']
Modifiability,/// Matches C or C++ elaborated `TypeLoc`s.; ///; /// Given; /// \code; /// struct s {};; /// struct s ss;; /// \endcode; /// elaboratedTypeLoc(); /// matches the `TypeLoc` of the variable declaration of `ss`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:180,variab,variable,180,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches C++ classes that have a direct or indirect base matching \p; /// BaseSpecMatcher.; ///; /// Example:; /// matcher hasAnyBase(hasType(cxxRecordDecl(hasName(""SpecialBase"")))); /// \code; /// class Foo;; /// class Bar : Foo {};; /// class Baz : Bar {};; /// class SpecialBase;; /// class Proxy : SpecialBase {}; // matches Proxy; /// class IndirectlyDerived : Proxy {}; //matches IndirectlyDerived; /// \endcode; ///; // FIXME: Refactor this and isDerivedFrom to reuse implementation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:437,Refactor,Refactor,437,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['Refactor'],['Refactor']
Modifiability,"/// Matches C++ extended vector type where either the type or size is; /// dependent.; ///; /// Given; /// \code; /// template<typename T, int Size>; /// class vector {; /// typedef T __attribute__((ext_vector_type(Size))) type;; /// };; /// \endcode; /// dependentSizedExtVectorType(); /// matches ""T __attribute__((ext_vector_type(Size)))""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:16,extend,extended,16,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['extend'],['extended']
Modifiability,"/// Matches C++17 deduced template specialization types, e.g. deduced class; /// template types.; ///; /// Given; /// \code; /// template <typename T>; /// class C { public: C(T); };; ///; /// C c(123);; /// \endcode; /// \c deducedTemplateSpecializationType() matches the type in the declaration; /// of the variable \c c.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:309,variab,variable,309,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches ElaboratedTypes whose named type matches \c InnerMatcher.; ///; /// Given; /// \code; /// namespace N {; /// namespace M {; /// class D {};; /// }; /// }; /// N::M::D d;; /// \endcode; ///; /// \c elaboratedType(namesType(recordType(; /// hasDeclaration(namedDecl(hasName(""D"")))))) matches the type of the variable; /// declaration of \c d.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:318,variab,variable,318,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches ElaboratedTypes whose qualifier, a NestedNameSpecifier,; /// matches \c InnerMatcher if the qualifier exists.; ///; /// Given; /// \code; /// namespace N {; /// namespace M {; /// class D {};; /// }; /// }; /// N::M::D d;; /// \endcode; ///; /// \c elaboratedType(hasQualifier(hasPrefix(specifiesNamespace(hasName(""N"")))); /// matches the type of the variable declaration of \c d.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:363,variab,variable,363,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,/// Matches Objective-C instance variable declarations.; ///; /// Example matches _enabled; /// \code; /// @implementation Foo {; /// BOOL _enabled;; /// }; /// @end; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches \c VariableArrayType nodes that have a specific size; /// expression.; ///; /// Given; /// \code; /// void f(int b) {; /// int a[b];; /// }; /// \endcode; /// variableArrayType(hasSizeExpr(ignoringImpCasts(declRefExpr(to(; /// varDecl(hasName(""b""))))))); /// matches ""int a[b]""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:15,Variab,VariableArrayType,15,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,"['Variab', 'variab']","['VariableArrayType', 'variableArrayType']"
Modifiability,"/// Matches `QualifiedTypeLoc`s that have an unqualified `TypeLoc` matching; /// `InnerMatcher`.; ///; /// Given; /// \code; /// int* const x;; /// const int y;; /// \endcode; /// qualifiedTypeLoc(hasUnqualifiedLoc(pointerTypeLoc())); /// matches the `TypeLoc` of the variable declaration of `x`, but not `y`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:268,variab,variable,268,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches a `LambdaCapture` that refers to the specified `VarDecl`. The; /// `VarDecl` can be a separate variable that is captured by value or; /// reference, or a synthesized variable if the capture has an initializer.; ///; /// Given; /// \code; /// void foo() {; /// int x;; /// auto f = [x](){};; /// auto g = [x = 1](){};; /// }; /// \endcode; /// In the matcher; /// lambdaExpr(hasAnyCapture(lambdaCapture(capturesVar(hasName(""x"")))),; /// capturesVar(hasName(""x"")) matches `x` and `x = 1`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:107,variab,variable,107,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['variab'],['variable']
Modifiability,/// Matches a variable declaration that does not have local storage.; ///; /// Example matches y and z (matcher = varDecl(hasGlobalStorage()); /// \code; /// void f() {; /// int x;; /// static int y;; /// }; /// int z;; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,variab,variable,14,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,/// Matches a variable declaration that has an initializer expression; /// that matches the given matcher.; ///; /// Example matches x (matcher = varDecl(hasInitializer(callExpr()))); /// \code; /// bool y() { return true; }; /// bool x = y();; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,variab,variable,14,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches a variable declaration that has automatic storage duration.; ///; /// Example matches x, but not y, z, or a.; /// (matcher = varDecl(hasAutomaticStorageDuration()); /// \code; /// void f() {; /// int x;; /// static int y;; /// thread_local int z;; /// }; /// int a;; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,variab,variable,14,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,/// Matches a variable declaration that has function scope and is a; /// non-static local variable.; ///; /// Example matches x (matcher = varDecl(hasLocalStorage()); /// \code; /// void f() {; /// int x;; /// static int y;; /// }; /// int z;; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,variab,variable,14,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['variab'],['variable']
Modifiability,"/// Matches a variable declaration that has static storage duration.; /// It includes the variable declared at namespace scope and those declared; /// with ""static"" and ""extern"" storage class specifiers.; ///; /// \code; /// void f() {; /// int x;; /// static int y;; /// thread_local int z;; /// }; /// int a;; /// static int b;; /// extern int c;; /// varDecl(hasStaticStorageDuration()); /// matches the function declaration y, a, b and c.; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,variab,variable,14,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['variab'],['variable']
Modifiability,"/// Matches a variable declaration that has thread storage duration.; ///; /// Example matches z, but not x, z, or a.; /// (matcher = varDecl(hasThreadStorageDuration()); /// \code; /// void f() {; /// int x;; /// static int y;; /// thread_local int z;; /// }; /// int a;; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,variab,variable,14,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches a variable declaration that is an exception variable from; /// a C++ catch block, or an Objective-C \@catch statement.; ///; /// Example matches x (matcher = varDecl(isExceptionVariable()); /// \code; /// void f(int y) {; /// try {; /// } catch (int x) {; /// }; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,variab,variable,14,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['variab'],['variable']
Modifiability,/// Matches a variable serving as the implicit variable for a lambda init-; /// capture.; ///; /// Example matches x (matcher = varDecl(isInitCapture())); /// \code; /// auto f = [x=3]() { return x; };; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,variab,variable,14,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['variab'],['variable']
Modifiability,"/// Matches constexpr variable and function declarations,; /// and if constexpr.; ///; /// Given:; /// \code; /// constexpr int foo = 42;; /// constexpr int bar();; /// void baz() { if constexpr(1 > 0) {} }; /// \endcode; /// varDecl(isConstexpr()); /// matches the declaration of foo.; /// functionDecl(isConstexpr()); /// matches the declaration of bar.; /// ifStmt(isConstexpr()); /// matches the if statement in baz.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches constinit variable declarations.; ///; /// Given:; /// \code; /// constinit int foo = 42;; /// constinit const char* bar = ""bar"";; /// int baz = 42;; /// [[clang::require_constant_initialization]] int xyz = 42;; /// \endcode; /// varDecl(isConstinit()); /// matches the declaration of `foo` and `bar`, but not `baz` and `xyz`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,/// Matches declarations for QualType and CallExpr.; ///; /// Type argument DeclMatcherT is required by PolymorphicMatcher but; /// not actually used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:104,Polymorphi,PolymorphicMatcher,104,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['Polymorphi'],['PolymorphicMatcher']
Modifiability,"/// Matches declarations of virtual methods and C++ base specifers that specify; /// virtual inheritance.; ///; /// Example:; /// \code; /// class A {; /// public:; /// virtual void x(); // matches x; /// };; /// \endcode; ///; /// Example:; /// \code; /// class Base {};; /// class DirectlyDerived : virtual Base {}; // matches Base; /// class IndirectlyDerived : DirectlyDerived, Base {}; // matches Base; /// \endcode; ///; /// Usable as: Matcher<CXXMethodDecl>, Matcher<CXXBaseSpecifier>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:93,inherit,inheritance,93,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['inherit'],['inheritance']
Modifiability,"/// Matches declarator declarations (field, variable, function; /// and non-type template parameter declarations).; ///; /// Given; /// \code; /// class X { int y; };; /// \endcode; /// declaratorDecl(); /// matches \c int y.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:44,variab,variable,44,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches each method overridden by the given method. This matcher may; /// produce multiple matches.; ///; /// Given; /// \code; /// class A { virtual void f(); };; /// class B : public A { void f(); };; /// class C : public B { void f(); };; /// \endcode; /// cxxMethodDecl(ofClass(hasName(""C"")),; /// forEachOverridden(cxxMethodDecl().bind(""b""))).bind(""d""); /// matches once, with ""b"" binding ""A::f"" and ""d"" binding ""C::f"" (Note; /// that B::f is not overridden by C::f).; ///; /// The check can produce multiple matches in case of multiple inheritance, e.g.; /// \code; /// class A1 { virtual void f(); };; /// class A2 { virtual void f(); };; /// class C : public A1, public A2 { void f(); };; /// \endcode; /// cxxMethodDecl(ofClass(hasName(""C"")),; /// forEachOverridden(cxxMethodDecl().bind(""b""))).bind(""d""); /// matches twice, once with ""b"" binding ""A1::f"" and ""d"" binding ""C::f"", and; /// once with ""b"" binding ""A2::f"" and ""d"" binding ""C::f"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:546,inherit,inheritance,546,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['inherit'],['inheritance']
Modifiability,"/// Matches elaborated `TypeLoc`s that have a named `TypeLoc` matching; /// `InnerMatcher`.; ///; /// Given; /// \code; /// template <typename T>; /// class C {};; /// class C<int> c;; ///; /// class D {};; /// class D d;; /// \endcode; /// elaboratedTypeLoc(hasNamedTypeLoc(templateSpecializationTypeLoc()));; /// matches the `TypeLoc` of the variable declaration of `c`, but not `d`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:344,variab,variable,344,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,/// Matches enum types.; ///; /// Given; /// \code; /// enum C { Green };; /// enum class S { Red };; ///; /// C c;; /// S s;; /// \endcode; //; /// \c enumType() matches the type of the variable declarations of both \c c and; /// \c s.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:187,variab,variable,187,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches explicit template specializations of function, class, or; /// static member variable template instantiations.; ///; /// Given; /// \code; /// template<typename T> void A(T t) { }; /// template<> void A(int N) { }; /// \endcode; /// functionDecl(isExplicitTemplateSpecialization()); /// matches the specialization A<int>().; ///; /// Usable as: Matcher<FunctionDecl>, Matcher<VarDecl>, Matcher<CXXRecordDecl>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:88,variab,variable,88,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches extern ""C"" function or variable declarations.; ///; /// Given:; /// \code; /// extern ""C"" void f() {}; /// extern ""C"" { void g() {} }; /// void h() {}; /// extern ""C"" int x = 1;; /// extern ""C"" int y = 2;; /// int z = 3;; /// \endcode; /// functionDecl(isExternC()); /// matches the declaration of f and g, but not the declaration of h.; /// varDecl(isExternC()); /// matches the declaration of x and y, but not the declaration of z.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:35,variab,variable,35,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches functions, variables and namespace declarations that are marked with; /// the inline keyword.; ///; /// Given; /// \code; /// inline void f();; /// void g();; /// namespace n {; /// inline namespace m {}; /// }; /// inline int Foo = 5;; /// \endcode; /// functionDecl(isInline()) will match ::f().; /// namespaceDecl(isInline()) will match n::m.; /// varDecl(isInline()) will match Foo;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:23,variab,variables,23,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variables']
Modifiability,"/// Matches if a declaration has a body attached.; ///; /// Example matches A, va, fa; /// \code; /// class A {};; /// class B; // Doesn't match, as it has no body.; /// int va;; /// extern int vb; // Doesn't match, as it doesn't define the variable.; /// void fa() {}; /// void fb(); // Doesn't match, as it has no body.; /// @interface X; /// - (void)ma; // Doesn't match, interface is declaration.; /// @end; /// @implementation X; /// - (void)ma {}; /// @end; /// \endcode; ///; /// Usable as: Matcher<TagDecl>, Matcher<VarDecl>, Matcher<FunctionDecl>,; /// Matcher<ObjCMethodDecl>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:241,variab,variable,241,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches if a node equals a previously bound node.; ///; /// Matches a node if it equals the node previously bound to \p ID.; ///; /// Given; /// \code; /// class X { int a; int b; };; /// \endcode; /// cxxRecordDecl(; /// has(fieldDecl(hasName(""a""), hasType(type().bind(""t"")))),; /// has(fieldDecl(hasName(""b""), hasType(type(equalsBoundNode(""t"")))))); /// matches the class \c X, as \c a and \c b have the same type.; ///; /// Note that when multiple matches are involved via \c forEach* matchers,; /// \c equalsBoundNodes acts as a filter.; /// For example:; /// compoundStmt(; /// forEachDescendant(varDecl().bind(""d"")),; /// forEachDescendant(declRefExpr(to(decl(equalsBoundNode(""d"")))))); /// will trigger a match for each combination of variable declaration; /// and reference to that variable declaration within a compound statement.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:746,variab,variable,746,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['variab'],['variable']
Modifiability,"/// Matches nodes of type T that have at least one descendant node for which the; /// given inner matcher matches. Will match for each descendant node that; /// matches. Based on ForEachDescendantMatcher, but takes a dynamic matcher,; /// instead of a static one, because it is used by RewriteRule, which carries; /// (only top-level) dynamic matchers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/RewriteRule.cpp:286,Rewrite,RewriteRule,286,interpreter/llvm-project/clang/lib/Tooling/Transformer/RewriteRule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/RewriteRule.cpp,1,['Rewrite'],['RewriteRule']
Modifiability,/// Matches overloaded operators with a specific name.; ///; /// The type argument ArgT is not used by this matcher but is used by; /// PolymorphicMatcher and should be StringRef.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:136,Polymorphi,PolymorphicMatcher,136,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['Polymorphi'],['PolymorphicMatcher']
Modifiability,/// Matches overloaded operators with a specific name.; ///; /// The type argument ArgT is not used by this matcher but is used by; /// PolymorphicMatcher and should be std::vector<std::string>>.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:136,Polymorphi,PolymorphicMatcher,136,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,1,['Polymorphi'],['PolymorphicMatcher']
Modifiability,/// Matches parameter variable declarations.; ///; /// Given; /// \code; /// void f(int x);; /// \endcode; /// parmVarDecl(); /// matches \c int x.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,/// Matches private C++ declarations and C++ base specifers that specify private; /// inheritance.; ///; /// Examples:; /// \code; /// class C {; /// public: int a;; /// protected: int b;; /// private: int c; // fieldDecl(isPrivate()) matches 'c'; /// };; /// \endcode; ///; /// \code; /// struct Base {};; /// struct Derived1 : private Base {}; // matches 'Base'; /// class Derived2 : Base {}; // matches 'Base'; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:86,inherit,inheritance,86,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['inherit'],['inheritance']
Modifiability,/// Matches protected C++ declarations and C++ base specifers that specify; /// protected inheritance.; ///; /// Examples:; /// \code; /// class C {; /// public: int a;; /// protected: int b; // fieldDecl(isProtected()) matches 'b'; /// private: int c;; /// };; /// \endcode; ///; /// \code; /// class Base {};; /// class Derived : protected Base {}; // matches 'Base'; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:90,inherit,inheritance,90,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['inherit'],['inheritance']
Modifiability,/// Matches public C++ declarations and C++ base specifers that specify public; /// inheritance.; ///; /// Examples:; /// \code; /// class C {; /// public: int a; // fieldDecl(isPublic()) matches 'a'; /// protected: int b;; /// private: int c;; /// };; /// \endcode; ///; /// \code; /// class Base {};; /// class Derived1 : public Base {}; // matches 'Base'; /// struct Derived2 : Base {}; // matches 'Base'; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:84,inherit,inheritance,84,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['inherit'],['inheritance']
Modifiability,"/// Matches record types (e.g. structs, classes).; ///; /// Given; /// \code; /// class C {};; /// struct S {};; ///; /// C c;; /// S s;; /// \endcode; ///; /// \c recordType() matches the type of the variable declarations of both \c c; /// and \c s.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:201,variab,variable,201,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,/// Matches tag types (record and enum types).; ///; /// Given; /// \code; /// enum E {};; /// class C {};; ///; /// E e;; /// C c;; /// \endcode; ///; /// \c tagType() matches the type of the variable declarations of both \c e; /// and \c c.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:193,variab,variable,193,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches template instantiations of function, class, or static; /// member variable template instantiations.; ///; /// Given; /// \code; /// template <typename T> class X {}; class A {}; X<A> x;; /// \endcode; /// or; /// \code; /// template <typename T> class X {}; class A {}; template class X<A>;; /// \endcode; /// or; /// \code; /// template <typename T> class X {}; class A {}; extern template class X<A>;; /// \endcode; /// cxxRecordDecl(hasName(""::X""), isTemplateInstantiation()); /// matches the template instantiation of X<A>.; ///; /// But given; /// \code; /// template <typename T> class X {}; class A {};; /// template <> class X<A> {}; X<A> x;; /// \endcode; /// cxxRecordDecl(hasName(""::X""), isTemplateInstantiation()); /// does not match, as X<A> is an explicit template specialization.; ///; /// Usable as: Matcher<FunctionDecl>, Matcher<VarDecl>, Matcher<CXXRecordDecl>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:78,variab,variable,78,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,/// Matches template specialization types.; ///; /// Given; /// \code; /// template <typename T>; /// class C { };; ///; /// template class C<int>; // A; /// C<char> var; // B; /// \endcode; ///; /// \c templateSpecializationType() matches the type of the explicit; /// instantiation in \c A and the type of the variable declaration in \c B.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:312,variab,variable,312,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,/// Matches the condition variable statement in an if statement.; ///; /// Given; /// \code; /// if (A* a = GetAPointer()) {}; /// \endcode; /// hasConditionVariableStatement(...); /// matches 'A* a = GetAPointer()'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:26,variab,variable,26,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches the pattern string against the input buffer \p Buffer.; ///; /// \returns either (1) an error resulting in no match or (2) a match possibly; /// with an error encountered while processing the match.; ///; /// The GlobalVariableTable StringMap in the FileCheckPatternContext class; /// instance provides the current values of FileCheck string variables and is; /// updated if this match defines new values. Likewise, the; /// GlobalNumericVariableTable StringMap in the same class provides the; /// current values of FileCheck numeric variables and is updated if this; /// match defines new numeric values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:354,variab,variables,354,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,2,['variab'],['variables']
Modifiability,/// Matches types specified through a using declaration.; ///; /// Given; /// \code; /// namespace a { struct S {}; }; /// using a::S;; /// S s;; /// \endcode; ///; /// \c usingType() matches the type of the variable declaration of \c s.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:208,variab,variable,208,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,/// Matches types specified with an elaborated type keyword or with a; /// qualified name.; ///; /// Given; /// \code; /// namespace N {; /// namespace M {; /// class D {};; /// }; /// }; /// class C {};; ///; /// class C c;; /// N::M::D d;; /// \endcode; ///; /// \c elaboratedType() matches the type of the variable declarations of both; /// \c c and \c d.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:309,variab,variable,309,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// Matches variable declarations.; ///; /// Note: this does not match declarations of member variables, which are; /// ""field"" declarations in Clang parlance.; ///; /// Example matches a; /// \code; /// int a;; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Matches variable/function declarations that have ""static"" storage; /// class specifier (""static"" keyword) written in the source.; ///; /// Given:; /// \code; /// static void f() {}; /// static int i = 0;; /// extern int j;; /// int k;; /// \endcode; /// functionDecl(isStaticStorageClass()); /// matches the function declaration f.; /// varDecl(isStaticStorageClass()); /// matches the variable declaration i.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,2,['variab'],['variable']
Modifiability,/// Max number of variables analyzed for uninitialized uses in a single; /// function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/AnalysisBasedWarnings.h:18,variab,variables,18,interpreter/llvm-project/clang/include/clang/Sema/AnalysisBasedWarnings.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/AnalysisBasedWarnings.h,1,['variab'],['variables']
Modifiability,/// Maximum byte alignment of variables used by the kernel in the; /// kernarg memory segment. Required.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/AMDGPUMetadata.h:30,variab,variables,30,interpreter/llvm-project/llvm/include/llvm/Support/AMDGPUMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/AMDGPUMetadata.h,1,['variab'],['variables']
Modifiability,"/// Maximum value that can have the loop control variable. Used to support; /// non-rectangular loops. Applied only for LCV with the non-iterator type,; /// since only such variables can be used in non-loop invariant expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Measure the specified inline asm to determine an approximation of its; /// length.; /// Comments (which run till the next SeparatorString or newline) do not; /// count as an instruction.; /// Any other non-whitespace text is considered an instruction, with; /// multiple instructions separated by SeparatorString or newlines.; /// Variable-length instructions are not handled here; this function; /// may be overloaded in the target code to do that.; /// Hexagon counts the number of ##'s and adjust for that many; /// constant exenders.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:335,Variab,Variable-length,335,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['Variab'],['Variable-length']
Modifiability,"/// Measure the specified inline asm to determine an approximation of its; /// length.; /// Comments (which run till the next SeparatorString or newline) do not; /// count as an instruction.; /// Any other non-whitespace text is considered an instruction, with; /// multiple instructions separated by SeparatorString or newlines.; /// Variable-length instructions are not handled here; this function; /// may be overloaded in the target code to do that.; /// We implement a special case of the .space directive which takes only a; /// single integer argument in base 10 that is the size in bytes. This is a; /// restricted form of the GAS directive in that we only interpret; /// simple--i.e. not a logical or arithmetic expression--size values without; /// the optional fill value. This is primarily used for creating arbitrary; /// sized inline asm blocks for testing purposes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp:335,Variab,Variable-length,335,interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetInstrInfo.cpp,1,['Variab'],['Variable-length']
Modifiability,"/// MemSpaceRegion - A memory region that represents a ""memory space"";; /// for example, the set of global variables, the stack frame, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:107,variab,variables,107,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,1,['variab'],['variables']
Modifiability,"/// Merge in template-related linkage and visibility for the given; /// variable template specialization. As usual, follow class template; /// specialization logic up to initialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:72,variab,variable,72,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variable']
Modifiability,/// Merge the exception specifications of two variable declarations.; ///; /// This is called when there's a redeclaration of a VarDecl. The function; /// checks if the redeclaration might have an exception specification and; /// validates compatibility and merges the specs if necessary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:46,variab,variable,46,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['variab'],['variable']
Modifiability,"/// Merge with other RHistStatContent, assuming same bin configuration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx:57,config,configuration,57,hist/histv7/inc/ROOT/RHistData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx,1,['config'],['configuration']
Modifiability,"/// Merge with other RHistStatTotalSumOfSquaredWeights data, assuming same bin configuration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx:79,config,configuration,79,hist/histv7/inc/ROOT/RHistData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx,1,['config'],['configuration']
Modifiability,"/// Merge with other RHistStatTotalSumOfWeights data, assuming same bin configuration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx:72,config,configuration,72,hist/histv7/inc/ROOT/RHistData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx,1,['config'],['configuration']
Modifiability,"/// Merge with other `RHistStatUncertainty` data, assuming same bin configuration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx:68,config,configuration,68,hist/histv7/inc/ROOT/RHistData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RHistData.hxx,1,['config'],['configuration']
Modifiability,"/// MergeVarDecl - We just parsed a variable 'New' which has the same name; /// and scope as a previous declaration 'Old'. Figure out how to resolve this; /// situation, merging decls or emitting diagnostics as appropriate.; ///; /// Tentative definition rules (C99 6.9.2p2) are checked by; /// FinalizeDeclaratorGroup. Unfortunately, we can't analyze tentative; /// definitions here, since the initializer hasn't been attached.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"/// MergeVarDeclTypes - We parsed a variable 'New' which has the same name and; /// scope as a previous declaration 'Old'. Figure out how to merge their types,; /// emitting diagnostics as appropriate.; ///; /// Declarations using the auto type specifier (C++ [decl.spec.auto]) call back; /// to here in AddInitializerToDecl. We can't check them before the initializer; /// is attached.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,/// MethodVarNames - uniqued method variable names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variable']
Modifiability,"/// Minimal configuration struct to steer the evaluation of a single node with; /// the RooBatchCompute library.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/res/RooBatchCompute.h:12,config,configuration,12,roofit/batchcompute/res/RooBatchCompute.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/batchcompute/res/RooBatchCompute.h,1,['config'],['configuration']
Modifiability,"/// Minimum value that can have the loop control variable. Used to support; /// non-rectangular loops. Applied only for LCV with the non-iterator types,; /// since only such variables can be used in non-loop invariant expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,/// Mips Code Generator Pass Configuration Options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsTargetMachine.cpp:29,Config,Configuration,29,interpreter/llvm-project/llvm/lib/Target/Mips/MipsTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsTargetMachine.cpp,1,['Config'],['Configuration']
Modifiability,"/// Models a value of `struct` or `class` type.; /// In C++, prvalues of class type serve only a limited purpose: They can only; /// be used to initialize a result object. It is not possible to access member; /// variables or call member functions on a prvalue of class type.; /// Correspondingly, `RecordValue` also serves only a limited purpose: It; /// conveys a prvalue of class type from the place where the object is; /// constructed to the result object that it initializes.; ///; /// When creating a prvalue of class type, we already need a storage location; /// for `this`, even though prvalues are otherwise not associated with storage; /// locations. `RecordValue` is therefore essentially a wrapper for a storage; /// location, which is then used to set the storage location for the result; /// object when we process the AST node for that result object.; ///; /// For example:; /// MyStruct S = MyStruct(3);; ///; /// In this example, `MyStruct(3) is a prvalue, which is modeled as a; /// `RecordValue` that wraps a `RecordStorageLocation`. This; /// `RecordStorageLocation` is then used as the storage location for `S`.; ///; /// Over time, we may eliminate `RecordValue` entirely. See also the discussion; /// here: https://reviews.llvm.org/D155204#inline-1503204",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Value.h:213,variab,variables,213,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Value.h,1,['variab'],['variables']
Modifiability,"/// Models memory deallocation.; ///; /// \param [in] ArgExpr The variable who's pointee needs to be freed.; /// \param [in] Call The expression that frees the memory.; /// \param [in] State The \c ProgramState right before allocation.; /// normally 0, but for custom free functions it may be different.; /// \param [in] Hold Whether the parameter at \p Index has the ownership_holds; /// attribute.; /// \param [out] IsKnownToBeAllocated Whether the memory to be freed is known; /// to have been allocated, or in other words, the symbol to be freed was; /// registered as allocated by this checker. In the following case, \c ptr; /// isn't known to be allocated.; /// void Haha(int *ptr) {; /// ptr = realloc(ptr, 67);; /// // ...; /// }; /// \param [in] ReturnsNullOnFailure Whether the memory deallocation function; /// we're modeling returns with Null on failure.; /// \returns The ProgramState right after deallocation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp:66,variab,variable,66,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,1,['variab'],['variable']
Modifiability,/// Module contains suppressed export information. This also infers that the; /// address taken IAT table is also present in the load config.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h:134,config,config,134,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h,1,['config'],['config']
Modifiability,"/// Module pass, wrapping the inliner pass. This works in conjunction with the; /// InlineAdvisorAnalysis to facilitate inlining decisions taking into account; /// module-wide state, that need to keep track of inter-inliner pass runs, for; /// a given module. An InlineAdvisor is configured and kept alive for the; /// duration of the ModuleInlinerWrapperPass::run.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h:280,config,configured,280,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Inliner.h,1,['config'],['configured']
Modifiability,"/// Move a zext or sext fed by a load into the same basic block as the load,; /// unless conditions are unfavorable. This allows SelectionDAG to fold the; /// extend into the load.; ///; /// E.g.,; /// \code; /// %ld = load i32* %addr; /// %add = add nuw i32 %ld, 4; /// %zext = zext i32 %add to i64; // \endcode; /// =>; /// \code; /// %ld = load i32* %addr; /// %zext = zext i32 %ld to i64; /// %add = add nuw i64 %zext, 4; /// \encode; /// Note that the promotion in %add to i64 is done in tryToPromoteExts(), which; /// allow us to match zext(load i32*) to i64.; ///; /// Also, try to promote the computations used to obtain a sign extended; /// value used into memory accesses.; /// E.g.,; /// \code; /// a = add nsw i32 b, 3; /// d = sext i32 a to i64; /// e = getelementptr ..., i64 d; /// \endcode; /// =>; /// \code; /// f = sext i32 b to i64; /// a = add nsw i64 f, 3; /// e = getelementptr ..., i64 a; /// \endcode; ///; /// \p Inst[in/out] the extension may be modified during the process if some; /// promotions apply.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:159,extend,extend,159,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,/// Move from memory and extend,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kInstrInfo.h:25,extend,extend,25,interpreter/llvm-project/llvm/lib/Target/M68k/M68kInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kInstrInfo.h,1,['extend'],['extend']
Modifiability,/// Move from register and extend,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kInstrInfo.h:27,extend,extend,27,interpreter/llvm-project/llvm/lib/Target/M68k/M68kInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kInstrInfo.h,1,['extend'],['extend']
Modifiability,"/// MutableArrayRef - Represent a mutable reference to an array (0 or more; /// elements consecutively in memory), i.e. a start pointer and a length. It; /// allows various APIs to take and modify consecutive elements easily and; /// conveniently.; ///; /// This class does not own the underlying data, it is expected to be used in; /// situations where the data resides in some other buffer, whose lifetime; /// extends past that of the MutableArrayRef. For this reason, it is not in; /// general safe to store a MutableArrayRef.; ///; /// This is intended to be trivially copyable, so it should be passed by; /// value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:413,extend,extends,413,interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ArrayRef.h,1,['extend'],['extends']
Modifiability,/// Mutates a local variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h:20,variab,variable,20,interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,1,['variab'],['variable']
Modifiability,"/// NEONThumb2DupPostEncoder - Post-process encoded NEON vdup; /// instructions, and rewrite them to their Thumb2 form if we are currently in; /// Thumb2 mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp:85,rewrite,rewrite,85,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// NEONThumb2LoadStorePostEncoder - Post-process encoded NEON load/store; /// instructions, and rewrite them to their Thumb2 form if we are currently in; /// Thumb2 mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp:97,rewrite,rewrite,97,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,1,['rewrite'],['rewrite']
Modifiability,/// Name lookup results in an ambiguity because multiple placeholder; /// variables were found in the same scope.; /// @code; /// void f() {; /// int _ = 0;; /// int _ = 0;; /// return _; // ambiguous use of placeholder variable; /// }; /// @endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:74,variab,variables,74,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// Name of the mapper variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:23,variab,variable,23,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,1,['variab'],['variable']
Modifiability,/// Name of the numeric variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:24,variab,variable,24,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,"/// No-wrap operations can transfer sign extension of their result to their; /// operands. Generate the SCEV value for the widened operation without; /// actually modifying the IR yet. If the expression after extending the; /// operands is an AddRec for this loop, return the AddRec and the kind of; /// extension used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:209,extend,extending,209,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['extend'],['extending']
Modifiability,"/// Node - Each edge bundle corresponds to a Hopfield node.; ///; /// The node contains precomputed frequency data that only depends on the CFG,; /// but Bias and Links are computed each time placeSpills is called.; ///; /// The node Value is positive when the variable should be in a register. The; /// value can change when linked nodes change, but convergence is very fast; /// because all weights are positive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.cpp:261,variab,variable,261,interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SpillPlacement.cpp,1,['variab'],['variable']
Modifiability,/// Not a TLS variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:14,variab,variable,14,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Not an inline variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18,variab,variable,18,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['variab'],['variable']
Modifiability,/// Note that this variable template specialization is actually an; /// instantiation of the given variable template partial specialization whose; /// template arguments have been deduced.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:19,variab,variable,19,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,['variab'],['variable']
Modifiability,/// Note that this variable template specialization is an instantiation; /// of the given variable template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:19,variab,variable,19,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,['variab'],['variable']
Modifiability,"/// Note that we are instantiating a class template,; /// function template, variable template, alias template,; /// or a member thereof.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:77,variab,variable,77,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// Note that we are instantiating as part of template; /// argument deduction for a variable template partial; /// specialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:85,variab,variable,85,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,"/// Notify the MachineFrameInfo object that a variable sized object has been; /// created. This must be created whenever a variable sized object is; /// created, whether or not the index returned is actually used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:46,variab,variable,46,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,2,['variab'],['variable']
Modifiability,"/// Number of arificial variables, parameters or members across all instances.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:24,variab,variables,24,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,/// Number of inherited and non-inherited bits in BlockDeclBitfields.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:14,inherit,inherited,14,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,2,['inherit'],['inherited']
Modifiability,/// Number of inherited and non-inherited bits in CXXConstructorDeclBitfields.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:14,inherit,inherited,14,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,2,['inherit'],['inherited']
Modifiability,/// Number of inherited and non-inherited bits in EnumDeclBitfields.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:14,inherit,inherited,14,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,2,['inherit'],['inherited']
Modifiability,/// Number of inherited and non-inherited bits in FunctionDeclBitfields.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:14,inherit,inherited,14,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,2,['inherit'],['inherited']
Modifiability,/// Number of inherited and non-inherited bits in LinkageSpecDeclBitfields.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:14,inherit,inherited,14,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,2,['inherit'],['inherited']
Modifiability,/// Number of inherited and non-inherited bits in ObjCContainerDeclBitfields.; /// Note that here we rely on the fact that SourceLocation is 32 bits; /// wide. We check this with the static_assert in the ctor of DeclContext.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:14,inherit,inherited,14,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,2,['inherit'],['inherited']
Modifiability,/// Number of inherited and non-inherited bits in ObjCMethodDeclBitfields.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:14,inherit,inherited,14,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,2,['inherit'],['inherited']
Modifiability,/// Number of inherited and non-inherited bits in RecordDeclBitfields.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:14,inherit,inherited,14,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,2,['inherit'],['inherited']
Modifiability,/// Number of inherited and non-inherited bits in TagDeclBitfields.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:14,inherit,inherited,14,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,2,['inherit'],['inherited']
Modifiability,/// Number of inherited and non-inherited bits in; /// OMPDeclareReductionDeclBitfields.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:14,inherit,inherited,14,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,2,['inherit'],['inherited']
Modifiability,/// Number of local variables with DW_AT_location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,/// Number of local variables with source location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,/// Number of local variables with type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,/// Number of local variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,/// Number of the parenthesis group in RegExStr that captures the value of; /// this numeric variable definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:93,variab,variable,93,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,/// Number of times a constant range has been extended with widening enabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueLattice.h:46,extend,extended,46,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueLattice.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueLattice.h,1,['extend'],['extended']
Modifiability,/// Number of variables and parameters with location across all inlined; /// instances.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:14,variab,variables,14,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,/// Number of variables in the list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:14,variab,variables,14,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// ObjC->C Rewriter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:12,Rewrite,Rewriter,12,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['Rewrite'],['Rewriter']
Modifiability,"/// ObjCImplementationDecl - Represents a class definition - this is where; /// method definitions are specified. For example:; ///; /// @code; /// \@implementation MyClass; /// - (void)myMethod { /* do something */ }; /// \@end; /// @endcode; ///; /// In a non-fragile runtime, instance variables can appear in the class; /// interface, class extensions (nameless categories), and in the implementation; /// itself, as well as being synthesized as backing storage for properties.; ///; /// In a fragile runtime, instance variables are specified in the class; /// interface, \em not in the implementation. Nevertheless (for legacy reasons),; /// we allow instance variables to be specified in the implementation. When; /// specified, they need to be \em identical to the interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:288,variab,variables,288,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,3,['variab'],['variables']
Modifiability,"/// ObjCIndirectCopyRestoreExpr - Represents the passing of a function; /// argument by indirect copy-restore in ARC. This is used to support; /// passing indirect arguments with the wrong lifetime, e.g. when; /// passing the address of a __strong local variable to an 'out'; /// parameter. This expression kind is only valid in an ""argument""; /// position to some sort of call expression.; ///; /// The parameter must have type 'pointer to T', and the argument must; /// have type 'pointer to U', where T and U agree except possibly in; /// qualification. If the argument value is null, then a null pointer; /// is passed; otherwise it points to an object A, and:; /// 1. A temporary object B of type T is initialized, either by; /// zero-initialization (used when initializing an 'out' parameter); /// or copy-initialization (used when initializing an 'inout'; /// parameter).; /// 2. The address of the temporary is passed to the function.; /// 3. If the call completes normally, A is move-assigned from B.; /// 4. Finally, A is destroyed immediately.; ///; /// Currently 'T' must be a retainable object lifetime and must be; /// __autoreleasing; this qualifier is ignored when initializing; /// the value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:254,variab,variable,254,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['variab'],['variable']
Modifiability,"/// ObjCIvarDecl - Represents an ObjC instance variable. In general, ObjC; /// instance variables are identical to C. The only exception is Objective-C; /// supports C++ style access control. For example:; ///; /// \@interface IvarExample : NSObject; /// {; /// id defaultToProtected;; /// \@public:; /// id canBePublic; // same as C++.; /// \@protected:; /// id canBeProtected; // same as C++.; /// \@package:; /// id canBePackage; // framework visibility (not available in C++).; /// }; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:47,variab,variable,47,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// ObjCIvarOffsetVariable - Returns the ivar offset variable for; /// the given ivar.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variable']
Modifiability,/// ObjCIvarOffsetVariable - Returns the ivar offset variable for; /// the given ivar.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variable']
Modifiability,/// ObjCIvarRefExpr - A reference to an ObjC instance variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:54,variab,variable,54,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,1,['variab'],['variable']
Modifiability,/// Object that stores strings read from configuration file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:41,config,configuration,41,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['config'],['configuration']
Modifiability,/// Obtain the CXXConstructExpr for the sub-class that inherited the current; /// constructor (possibly indirectly). It's the statement that contains; /// argument expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:55,inherit,inherited,55,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['inherit'],['inherited']
Modifiability,/// Obtain the stack frame of the inheriting constructor. Argument expressions; /// can be found on the call site of that stack frame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:34,inherit,inheriting,34,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['inherit'],['inheriting']
Modifiability,/// Obtain the sub-arch configuration for a given Arm CPU model.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h:24,config,configuration,24,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h,1,['config'],['configuration']
Modifiability,/// Obtains a sorted list of functions and variables that are undefined but; /// ODR-used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:43,variab,variables,43,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['variab'],['variables']
Modifiability,/// Offset of the next local variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.h:29,variab,variable,29,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.h,1,['variab'],['variable']
Modifiability,/// Offset of variable data in memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h:14,variab,variable,14,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,1,['variab'],['variable']
Modifiability,"/// On a symbol operand, this indicates that the immediate is the offset to; /// the slot in GOT which stores the information for accessing the TLS; /// variable. This is used when operating in Global Dynamic mode.; /// name@TLSGD",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h:153,variab,variable,153,interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,1,['variab'],['variable']
Modifiability,"/// On a symbol operand, this indicates that the immediate is the offset to; /// the slot in GOT which stores the information for accessing the TLS; /// variable. This is used when operating in Local Dynamic mode.; /// name@TLSLDM",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h:153,variab,variable,153,interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,1,['variab'],['variable']
Modifiability,"/// On a symbol operand, this indicates that the immediate is the offset to; /// the variable within in the thread local storage when operating in Local; /// Exec mode.; /// name@TLSLE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h:85,variab,variable,85,interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,1,['variab'],['variable']
Modifiability,"/// On a symbol operand, this indicates that the immediate is the offset to; /// the variable within the thread local storage when operating in Initial; /// Exec mode.; /// name@TLSIE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h:85,variab,variable,85,interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,1,['variab'],['variable']
Modifiability,"/// On a symbol operand, this indicates that the immediate is the offset to; /// variable within the thread local storage when operating in Local Dynamic; /// mode.; /// name@TLSLD",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h:81,variab,variable,81,interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,1,['variab'],['variable']
Modifiability,/// One of the \c InheritedDesignatedInitializersState enumeratos.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:18,Inherit,InheritedDesignatedInitializersState,18,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['Inherit'],['InheritedDesignatedInitializersState']
Modifiability,"/// One of these records is kept for each identifier that; /// is lexed. This contains information about whether the token was \#define'd,; /// is a language keyword, or if it is a front-end token of some sort (e.g. a; /// variable or function name). The preprocessor keeps this information in a; /// set, and all tok::identifier tokens have a pointer to one of these.; /// It is aligned to 8 bytes because DeclarationName needs the lower 3 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:223,variab,variable,223,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,1,['variab'],['variable']
Modifiability,/// One past the last single-location variable location definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h:38,variab,variable,38,interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,1,['variab'],['variable']
Modifiability,/// One past the last variable location definition that comes before \p; /// Before.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h:22,variab,variable,22,interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,1,['variab'],['variable']
Modifiability,"/// Only consider global GOT equivalents if at least one user is a; /// cstexpr inside an initializer of another global variables. Also, don't; /// handle cstexpr inside instructions. During global variable emission,; /// candidates are skipped and are emitted later in case at least one cstexpr; /// isn't replaced by a PC relative GOT entry access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:120,variab,variables,120,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,/// Opcode{0} - Represent access to one bit of a variable or field.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:49,variab,variable,49,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['variab'],['variable']
Modifiability,"/// OpenACC 3.3, section 1.6:; /// In this spec, a 'var' (in italics) is one of the following:; /// - a variable name (a scalar, array, or compisite variable name); /// - a subarray specification with subscript ranges; /// - an array element; /// - a member of a composite variable; /// - a common block name between slashes (fortran only)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp:104,variab,variable,104,interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,3,['variab'],['variable']
Modifiability,"/// OpenMP 5.0 [2.1.5, Array Sections].; /// To specify an array section in an OpenMP construct, array subscript; /// expressions are extended with the following syntax:; /// \code; /// [ lower-bound : length : stride ]; /// [ lower-bound : length : ]; /// [ lower-bound : length ]; /// [ lower-bound : : stride ]; /// [ lower-bound : : ]; /// [ lower-bound : ]; /// [ : length : stride ]; /// [ : length : ]; /// [ : length ]; /// [ : : stride ]; /// [ : : ]; /// [ : ]; /// \endcode; /// The array section must be a subset of the original array.; /// Array sections are allowed on multidimensional arrays. Base language array; /// subscript expressions can be used to specify length-one dimensions of; /// multidimensional array sections.; /// Each of the lower-bound, length, and stride expressions if specified must be; /// an integral type expressions of the base language. When evaluated; /// they represent a set of integer values as follows:; /// \code; /// { lower-bound, lower-bound + stride, lower-bound + 2 * stride,... ,; /// lower-bound + ((length - 1) * stride) }; /// \endcode; /// The lower-bound and length must evaluate to non-negative integers.; /// The stride must evaluate to a positive integer.; /// When the size of the array dimension is not known, the length must be; /// specified explicitly.; /// When the stride is absent it defaults to 1.; /// When the length is absent it defaults to ⌈(size − lower-bound)/stride⌉,; /// where size is the size of the array dimension. When the lower-bound is; /// absent it defaults to 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h:134,extend,extended,134,interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h,1,['extend'],['extended']
Modifiability,"/// Operand 0 and operand 1 are selection variable, operand 2; /// is condition code and operand 3 is flag operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h:42,variab,variable,42,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.h,1,['variab'],['variable']
Modifiability,"/// Operands which will become dead if we rewrite the alloca.; ///; /// These are operands that in their particular use can be replaced with; /// poison when we rewrite the alloca. These show up in out-of-bounds inputs; /// to PHI nodes and the like. They aren't entirely dead (there might be; /// a GEP back into the bounds using it elsewhere) and nor is the PHI, but we; /// want to swap this particular input for poison to simplify the use lists of; /// the alloca.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:42,rewrite,rewrite,42,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,2,['rewrite'],['rewrite']
Modifiability,/// Optimize expensive TLS variables in the given function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp:27,variab,variables,27,interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp,1,['variab'],['variables']
Modifiability,/// Optimize the special case where the operand of \p I is a constant integer; /// induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h:93,variab,variable,93,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h,1,['variab'],['variable']
Modifiability,"/// Option for debugging the pass, determines if the memory location fragment; /// filling happens after generating the variable locations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:120,variab,variable,120,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,/// Order of operands to transfer; // TODO: Will be extended when additional optimizations are added,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp:52,extend,extended,52,interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp,1,['extend'],['extended']
Modifiability,"/// Ordinary name lookup, which finds ordinary names (functions,; /// variables, typedefs, etc.) in C and most kinds of names; /// (functions, variables, members, types, etc.) in C++.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:70,variab,variables,70,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['variab'],['variables']
Modifiability,"/// Otherwise, the captured variable (if any).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:28,variab,variable,28,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['variab'],['variable']
Modifiability,"/// Overloaded to match the declaration of the expression's or value; /// declaration's type.; ///; /// In case of a value declaration (for example a variable declaration),; /// this resolves one layer of indirection. For example, in the value; /// declaration ""X x;"", cxxRecordDecl(hasName(""X"")) matches the declaration of; /// X, while varDecl(hasType(cxxRecordDecl(hasName(""X"")))) matches the; /// declaration of x.; ///; /// Example matches x (matcher = expr(hasType(cxxRecordDecl(hasName(""X""))))); /// and z (matcher = varDecl(hasType(cxxRecordDecl(hasName(""X""))))); /// and friend class X (matcher = friendDecl(hasType(""X"")); /// and public virtual X (matcher = cxxBaseSpecifier(hasType(; /// cxxRecordDecl(hasName(""X"")))); /// \code; /// class X {};; /// void y(X &x) { x; X z; }; /// class Y { friend class X; };; /// class Z : public virtual X {};; /// \endcode; ///; /// Example matches class Derived; /// (matcher = cxxRecordDecl(hasAnyBase(hasType(cxxRecordDecl(hasName(""Base"")))))); /// \code; /// class Base {};; /// class Derived : Base {};; /// \endcode; ///; /// Usable as: Matcher<Expr>, Matcher<FriendDecl>, Matcher<ValueDecl>,; /// Matcher<CXXBaseSpecifier>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:150,variab,variable,150,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['variab'],['variable']
Modifiability,"/// PDBSymbol defines the base of the inheritance hierarchy for concrete symbol; /// types (e.g. functions, executables, vtables, etc). All concrete symbol; /// types inherit from PDBSymbol and expose the exact set of methods that are; /// valid for that particular symbol type, as described in the Microsoft; /// reference ""Lexical and Class Hierarchy of Symbol Types"":; /// https://msdn.microsoft.com/en-us/library/370hs6k4.aspx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h:38,inherit,inheritance,38,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/PDBSymbol.h,2,['inherit'],"['inherit', 'inheritance']"
Modifiability,/// PPC Code Generator Pass Configuration Options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetMachine.cpp:28,Config,Configuration,28,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetMachine.cpp,1,['Config'],['Configuration']
Modifiability,/// Pair of the Non-SPMD team and all reductions variables in this team; /// region.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:49,variab,variables,49,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['variab'],['variables']
Modifiability,/// Parameter for Thread private variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Parse Objective-C type arguments and protocol qualifiers, extending the; /// current type with the parsed result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:62,extend,extending,62,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['extend'],['extending']
Modifiability,"/// Parse TMVA XML config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:19,config,config,19,tmva/tmva/inc/TMVA/RReader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx,1,['config'],['config']
Modifiability,"/// Parse a configuration macro declaration.; ///; /// module-declaration:; /// 'config_macros' attributes[opt] config-macro-list?; ///; /// config-macro-list:; /// identifier (',' identifier)?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp:12,config,configuration,12,interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,3,['config'],"['config-macro-list', 'configuration']"
Modifiability,"/// Parse a textual pass pipeline description into a \c; /// ModulePassManager.; ///; /// The format of the textual pass pipeline description looks something like:; ///; /// module(function(instcombine,sroa),dce,cgscc(inliner,function(...)),...); ///; /// Pass managers have ()s describing the nest structure of passes. All passes; /// are comma separated. As a special shortcut, if the very first pass is not; /// a module pass (as a module pass manager is), this will automatically form; /// the shortest stack of pass managers that allow inserting that first pass.; /// So, assuming function passes 'fpassN', CGSCC passes 'cgpassN', and loop; /// passes 'lpassN', all of these are valid:; ///; /// fpass1,fpass2,fpass3; /// cgpass1,cgpass2,cgpass3; /// lpass1,lpass2,lpass3; ///; /// And they are equivalent to the following (resp.):; ///; /// module(function(fpass1,fpass2,fpass3)); /// module(cgscc(cgpass1,cgpass2,cgpass3)); /// module(function(loop(lpass1,lpass2,lpass3))); ///; /// This shortcut is especially useful for debugging and testing small pass; /// combinations.; ///; /// The sequence of passes aren't necessarily the exact same kind of pass.; /// You can mix different levels implicitly if adaptor passes are defined to; /// make them work. For example,; ///; /// mpass1,fpass1,fpass2,mpass2,lpass1; ///; /// This pipeline uses only one pass manager: the top-level module manager.; /// fpass1,fpass2 and lpass1 are added into the top-level module manager; /// using only adaptor passes. No nested function/loop pass managers are; /// added. The purpose is to allow easy pass testing when the user; /// specifically want the pass to run under a adaptor directly. This is; /// preferred when a pipeline is largely of one type, but one or just a few; /// passes are of different types(See PassBuilder.cpp for examples).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:1210,adapt,adaptor,1210,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,3,['adapt'],['adaptor']
Modifiability,"/// Parse an list of arguments into an InputArgList.; ///; /// The resulting InputArgList will reference the strings in [\p ArgBegin,; /// \p ArgEnd), and their lifetime should extend past that of the returned; /// InputArgList.; ///; /// The only error that can occur in this routine is if an argument is; /// missing values; in this case \p MissingArgCount will be non-zero.; ///; /// \param MissingArgIndex - On error, the index of the option which could; /// not be parsed.; /// \param MissingArgCount - On error, the number of missing options.; /// \param VisibilityMask - Only include options with any of these; /// visibility flags set.; /// \return An InputArgList; on error this will contain all the options; /// which could be parsed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:177,extend,extend,177,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,1,['extend'],['extend']
Modifiability,"/// Parse configuration from YAML-formatted text.; ///; /// Style->Language is used to get the base style, if the ``BasedOnStyle``; /// option is present.; ///; /// The FormatStyleSet of Style is reset.; ///; /// When ``BasedOnStyle`` is not present, options not present in the YAML; /// document, are retained in \p Style.; ///; /// If AllowUnknownOptions is true, no errors are emitted if unknown; /// format options are occurred.; ///; /// If set all diagnostics are emitted through the DiagHandler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:10,config,configuration,10,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['config'],['configuration']
Modifiability,"/// Parse the 'LENGTH', 'TYPE' and 'SIZE' operators. The LENGTH operator; /// returns the number of elements in an array. It returns the value 1 for; /// non-array variables. The SIZE operator returns the size of a C or C++; /// variable. A variable's size is the product of its LENGTH and TYPE. The; /// TYPE operator returns the size of a C or C++ type or variable. If the; /// variable is an array, TYPE returns the size of a single element.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:164,variab,variables,164,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,5,['variab'],"['variable', 'variables']"
Modifiability,"/// Parse the 'LENGTHOF', 'SIZEOF', and 'TYPE' operators. The LENGTHOF operator; /// returns the number of elements in an array. It returns the value 1 for; /// non-array variables. The SIZEOF operator returns the size of a type or; /// variable in bytes. A variable's size is the product of its LENGTH and TYPE.; /// The TYPE operator returns the size of a variable. If the variable is an; /// array, TYPE returns the size of a single element.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:171,variab,variables,171,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,5,['variab'],"['variable', 'variables']"
Modifiability,"/// Parse the arguments to a parameterized GNU attribute or; /// a C++11 attribute in ""gnu"" namespace.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:29,parameteriz,parameterized,29,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['parameteriz'],['parameterized']
Modifiability,"/// Parse the current string as an integer of the specified \p Radix. If; /// \p Radix is specified as zero, this does radix autosensing using; /// extended C rules: 0 is octal, 0x is hex, 0b is binary.; ///; /// If the string does not begin with a number of the specified radix,; /// this returns true to signify the error. The string is considered; /// erroneous if empty.; /// The portion of the string representing the discovered numeric value; /// is removed from the beginning of the string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:148,extend,extended,148,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,1,['extend'],['extended']
Modifiability,"/// Parse the current string as an integer of the specified radix. If; /// \p Radix is specified as zero, this does radix autosensing using; /// extended C rules: 0 is octal, 0x is hex, 0b is binary.; ///; /// If the string does not begin with a number of the specified radix,; /// this returns true to signify the error. The string is considered; /// erroneous if empty or if it overflows T.; /// The portion of the string representing the discovered numeric value; /// is removed from the beginning of the string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:145,extend,extended,145,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,1,['extend'],['extended']
Modifiability,"/// Parse the current string as an integer of the specified radix. If; /// \p Radix is specified as zero, this does radix autosensing using; /// extended C rules: 0 is octal, 0x is hex, 0b is binary.; ///; /// If the string is invalid or if only a subset of the string is valid,; /// this returns true to signify the error. The string is considered; /// erroneous if empty or if it overflows T.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:145,extend,extended,145,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,1,['extend'],['extended']
Modifiability,"/// Parse the given plugin command line arguments.; ///; /// \param CI - The compiler instance, for use in reporting diagnostics.; /// \return True if the parsing succeeded; otherwise the plugin will be; /// destroyed and no action run. The plugin is responsible for using the; /// CompilerInstance's Diagnostic object to report errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h:20,plugin,plugin,20,interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendAction.h,3,['plugin'],['plugin']
Modifiability,"/// ParseAsmStatement - Parse a GNU extended asm statement.; /// asm-statement:; /// gnu-asm-statement; /// ms-asm-statement; ///; /// [GNU] gnu-asm-statement:; /// 'asm' asm-qualifier-list[opt] '(' asm-argument ')' ';'; ///; /// [GNU] asm-argument:; /// asm-string-literal; /// asm-string-literal ':' asm-operands[opt]; /// asm-string-literal ':' asm-operands[opt] ':' asm-operands[opt]; /// asm-string-literal ':' asm-operands[opt] ':' asm-operands[opt]; /// ':' asm-clobbers; ///; /// [GNU] asm-clobbers:; /// asm-string-literal; /// asm-clobbers ',' asm-string-literal; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp:36,extend,extended,36,interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmtAsm.cpp,1,['extend'],['extended']
Modifiability,"/// ParseDeclaratorInternal - Parse a C or C++ declarator. The direct-declarator; /// is parsed by the function passed to it. Pass null, and the direct-declarator; /// isn't parsed at all, making this function effectively parse the C++; /// ptr-operator production.; ///; /// If the grammar of this construct is extended, matching changes must also be; /// made to TryParseDeclarator and MightBeDeclarator, and possibly to; /// isConstructorDeclarator.; ///; /// declarator: [C99 6.7.5] [C++ 8p4, dcl.decl]; /// [C] pointer[opt] direct-declarator; /// [C++] direct-declarator; /// [C++] ptr-operator declarator; ///; /// pointer: [C99 6.7.5]; /// '*' type-qualifier-list[opt]; /// '*' type-qualifier-list[opt] pointer; ///; /// ptr-operator:; /// '*' cv-qualifier-seq[opt]; /// '&'; /// [C++0x] '&&'; /// [GNU] '&' restrict[opt] attributes[opt]; /// [GNU?] '&&' restrict[opt] attributes[opt]; /// '::'[opt] nested-name-specifier '*' cv-qualifier-seq[opt]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:312,extend,extended,312,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['extend'],['extended']
Modifiability,"/// Parses \p Expr for a numeric substitution block at line \p LineNumber,; /// or before input is parsed if \p LineNumber is None. Parameter; /// \p IsLegacyLineExpr indicates whether \p Expr should be a legacy @LINE; /// expression and \p Context points to the class instance holding the live; /// string and numeric variables. \returns a pointer to the class instance; /// representing the expression whose value must be substitued, or an error; /// holding a diagnostic against \p SM if parsing fails. If substitution was; /// successful, sets \p DefinedNumericVariable to point to the class; /// representing the numeric variable defined in this numeric substitution; /// block, or std::nullopt if this block does not define any variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:319,variab,variables,319,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// Parses \p Expr for an argument list belonging to a call to function \p; /// FuncName at line \p LineNumber, or before input is parsed if \p LineNumber; /// is None. Parameter \p FuncLoc is the source location used for diagnostics.; /// Parameter \p Context points to the class instance holding the live string; /// and numeric variables. \returns the class representing that call in the; /// AST of the expression or an error holding a diagnostic against \p SM; /// otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:331,variab,variables,331,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variables']
Modifiability,"/// Parses \p Expr for the name of a numeric variable to be defined at line; /// \p LineNumber, or before input is parsed if \p LineNumber is None.; /// \returns a pointer to the class instance representing that variable,; /// creating it if needed, or an error holding a diagnostic against \p SM; /// should defining such a variable be invalid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:45,variab,variable,45,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,3,['variab'],['variable']
Modifiability,"/// Parses \p Expr for use of a numeric operand at line \p LineNumber, or; /// before input is parsed if \p LineNumber is None. Accepts literal values,; /// numeric variables and function calls, depending on the value of \p AO.; /// \p MaybeInvalidConstraint indicates whether the text being parsed could; /// be an invalid constraint. \p Context points to the class instance holding; /// the live string and numeric variables. \returns the class representing; /// that operand in the AST of the expression or an error holding a; /// diagnostic against \p SM otherwise. If \p Expr starts with a ""("" this; /// function will attempt to parse a parenthesized expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:165,variab,variables,165,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,2,['variab'],['variables']
Modifiability,"/// Parses \p Name as a (pseudo if \p IsPseudo is true) numeric variable use; /// at line \p LineNumber, or before input is parsed if \p LineNumber is; /// None. Parameter \p Context points to the class instance holding the live; /// string and numeric variables. \returns the pointer to the class instance; /// representing that variable if successful, or an error holding a; /// diagnostic against \p SM otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:64,variab,variable,64,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// Parses a parenthesized expression inside \p Expr at line \p LineNumber, or; /// before input is parsed if \p LineNumber is None. \p Expr must start with; /// a '('. Accepts both literal values and numeric variables. Parameter \p; /// Context points to the class instance holding the live string and numeric; /// variables. \returns the class representing that operand in the AST of the; /// expression or an error holding a diagnostic against \p SM otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:209,variab,variables,209,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,2,['variab'],['variables']
Modifiability,/// Parses a single variable in a variable list for OpenACC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:20,variab,variable,20,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,2,['variab'],['variable']
Modifiability,"/// Parses and updates \p RemainingExpr for a binary operation at line; /// \p LineNumber, or before input is parsed if \p LineNumber is None. The; /// left operand of this binary operation is given in \p LeftOp and \p Expr; /// holds the string for the full expression, including the left operand.; /// Parameter \p IsLegacyLineExpr indicates whether we are parsing a legacy; /// @LINE expression. Parameter \p Context points to the class instance; /// holding the live string and numeric variables. \returns the class; /// representing the binary operation in the AST of the expression, or an; /// error holding a diagnostic against \p SM otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:490,variab,variables,490,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variables']
Modifiability,/// Parses clause with an interop variable of kind \a Kind.; ///; /// \param Kind Kind of current clause.; /// \param ParseOnly true to skip the clause's semantic actions and return; /// nullptr.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:34,variab,variable,34,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['variab'],['variable']
Modifiability,/// Parses clause with the list of variables of a kind \a Kind.; ///; /// \param Kind Kind of current clause.; /// \param ParseOnly true to skip the clause's semantic actions and return; /// nullptr.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:35,variab,variables,35,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['variab'],['variables']
Modifiability,"/// Parses simple list of variables.; ///; /// \param Kind Kind of the directive.; /// \param Callback Callback function to be called for the list elements.; /// \param AllowScopeSpecifier true, if the variables can have fully; /// qualified names.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:26,variab,variables,26,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,2,['variab'],['variables']
Modifiability,"/// Parses the string at the start of \p Str for a variable name. \returns; /// a VariableProperties structure holding the variable name and whether it; /// is the name of a pseudo variable, or an error holding a diagnostic; /// against \p SM if parsing fail. If parsing was successful, also strips; /// \p Str from the variable name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:51,variab,variable,51,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,5,"['Variab', 'variab']","['VariableProperties', 'variable']"
Modifiability,/// Parses the variable list for the `cache` construct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:15,variab,variable,15,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['variab'],['variable']
Modifiability,"/// Parses the variable list for the variety of clauses that take a var-list,; /// including the optional Special Token listed for some,based on clause type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:15,variab,variable,15,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['variab'],['variable']
Modifiability,/// Parses variable declaration in 'omp declare mapper' directive.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h:11,variab,variable,11,interpreter/llvm-project/clang/include/clang/Parse/Parser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/Parser.h,1,['variab'],['variable']
Modifiability,/// Parsing information about a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:32,variab,variable,32,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,"/// Parsing of declarative OpenMP directives.; ///; /// threadprivate-directive:; /// annot_pragma_openmp 'threadprivate' simple-variable-list; /// annot_pragma_openmp_end; ///; /// allocate-directive:; /// annot_pragma_openmp 'allocate' simple-variable-list [<clause>]; /// annot_pragma_openmp_end; ///; /// declare-reduction-directive:; /// annot_pragma_openmp 'declare' 'reduction' [...]; /// annot_pragma_openmp_end; ///; /// declare-mapper-directive:; /// annot_pragma_openmp 'declare' 'mapper' '(' [<mapper-identifer> ':']; /// <type> <var> ')' [<clause>[[,] <clause>] ... ]; /// annot_pragma_openmp_end; ///; /// declare-simd-directive:; /// annot_pragma_openmp 'declare simd' {<clause> [,]}; /// annot_pragma_openmp_end; /// <function declaration/definition>; ///; /// requires directive:; /// annot_pragma_openmp 'requires' <clause> [[[,] <clause>] ... ]; /// annot_pragma_openmp_end; ///; /// assumes directive:; /// annot_pragma_openmp 'assumes' <clause> [[[,] <clause>] ... ]; /// annot_pragma_openmp_end; /// or; /// annot_pragma_openmp 'begin assumes' <clause> [[[,] <clause>] ... ]; /// annot_pragma_openmp 'end assumes'; /// annot_pragma_openmp_end; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp:129,variab,variable-list,129,interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,2,['variab'],['variable-list']
Modifiability,"/// Parsing of declarative or executable OpenMP directives.; ///; /// threadprivate-directive:; /// annot_pragma_openmp 'threadprivate' simple-variable-list; /// annot_pragma_openmp_end; ///; /// allocate-directive:; /// annot_pragma_openmp 'allocate' simple-variable-list; /// annot_pragma_openmp_end; ///; /// declare-reduction-directive:; /// annot_pragma_openmp 'declare' 'reduction' '(' <reduction_id> ':'; /// <type> {',' <type>} ':' <expression> ')' ['initializer' '('; /// ('omp_priv' '=' <expression>|<function_call>) ')']; /// annot_pragma_openmp_end; ///; /// declare-mapper-directive:; /// annot_pragma_openmp 'declare' 'mapper' '(' [<mapper-identifer> ':']; /// <type> <var> ')' [<clause>[[,] <clause>] ... ]; /// annot_pragma_openmp_end; ///; /// executable-directive:; /// annot_pragma_openmp 'parallel' | 'simd' | 'for' | 'sections' |; /// 'section' | 'single' | 'master' | 'critical' [ '(' <name> ')' ] |; /// 'parallel for' | 'parallel sections' | 'parallel master' | 'task' |; /// 'taskyield' | 'barrier' | 'taskwait' | 'flush' | 'ordered' | 'error'; /// | 'atomic' | 'for simd' | 'parallel for simd' | 'target' | 'target; /// data' | 'taskgroup' | 'teams' | 'taskloop' | 'taskloop simd' |; /// 'master taskloop' | 'master taskloop simd' | 'parallel master; /// taskloop' | 'parallel master taskloop simd' | 'distribute' | 'target; /// enter data' | 'target exit data' | 'target parallel' | 'target; /// parallel for' | 'target update' | 'distribute parallel for' |; /// 'distribute paralle for simd' | 'distribute simd' | 'target parallel; /// for simd' | 'target simd' | 'teams distribute' | 'teams distribute; /// simd' | 'teams distribute parallel for simd' | 'teams distribute; /// parallel for' | 'target teams' | 'target teams distribute' | 'target; /// teams distribute parallel for' | 'target teams distribute parallel; /// for simd' | 'target teams distribute simd' | 'masked' |; /// 'parallel masked' {clause} annot_pragma_openmp_end; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp:143,variab,variable-list,143,interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,2,['variab'],['variable-list']
Modifiability,/// Pass embeds a copy of the module optimized with the provided pass pipeline; /// into a global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h:98,variab,variable,98,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/EmbedBitcodePass.h,1,['variab'],['variable']
Modifiability,/// Pass to perform split of global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h:36,variab,variables,36,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/GlobalSplit.h,1,['variab'],['variables']
Modifiability,/// Passes the command-line option values to the options used by a single; /// refactoring action rule.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:79,refactor,refactoring,79,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,1,['refactor'],['refactoring']
Modifiability,/// Passing a guarded variable by reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['variab'],['variable']
Modifiability,/// Passing a pt-guarded variable by reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:25,variab,variable,25,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['variab'],['variable']
Modifiability,/// Paths to configuration files used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:13,config,configuration,13,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['config'],['configuration']
Modifiability,"/// Paths to files specifying which objects; /// (files, functions, variables) should not be instrumented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:68,variab,variables,68,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['variab'],['variables']
Modifiability,"/// Paths to the XRay ""always instrument"" files specifying which; /// objects (files, functions, variables) should be imbued with the XRay; /// ""always instrument"" attribute.; /// WARNING: This is a deprecated field and will go away in the future.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:97,variab,variables,97,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['variab'],['variables']
Modifiability,"/// Paths to the XRay ""never instrument"" files specifying which; /// objects (files, functions, variables) should be imbued with the XRay; /// ""never instrument"" attribute.; /// WARNING: This is a deprecated field and will go away in the future.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:96,variab,variables,96,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['variab'],['variables']
Modifiability,"/// Paths to the XRay attribute list files, specifying which objects; /// (files, functions, variables) should be imbued with the appropriate XRay; /// attribute(s).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:93,variab,variables,93,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['variab'],['variables']
Modifiability,/// PatternRewriteNamedAliasDescriptor - represents a rewrite for global; /// aliases which match a given pattern. The provided transformation will be; /// applied to each of the matching names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp:54,rewrite,rewrite,54,interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,1,['rewrite'],['rewrite']
Modifiability,/// Pending queues extend the ready queues with the same ID and the; /// PendingFlag set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:19,extend,extend,19,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,2,['extend'],['extend']
Modifiability,"/// Perform an ""extended"" implicit conversion as returned by; /// TryClassUnification.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:16,extend,extended,16,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['extend'],['extended']
Modifiability,"/// Perform checking of type validity; ///; /// C++11 [dcl.align]p1:; /// An alignment-specifier may be applied to a variable or to a class; /// data member, but it shall not be applied to a bit-field, a function; /// parameter, the formal parameter of a catch clause, or a variable; /// declared with the register storage class specifier. An; /// alignment-specifier may also be applied to the declaration of a class; /// or enumeration type.; /// CWG 2354:; /// CWG agreed to remove permission for alignas to be applied to; /// enumerations.; /// C11 6.7.5/2:; /// An alignment attribute shall not be specified in a declaration of; /// a typedef, or a bit-field, or a function, or a parameter, or an; /// object declared with the register storage-class specifier.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:117,variab,variable,117,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,2,['variab'],['variable']
Modifiability,/// Perform initialization based on the user configured set of features.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp:45,config,configured,45,interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/RISCV.cpp,1,['config'],['configured']
Modifiability,"/// Perform initialization based on the user configured; /// set of features (e.g., +sse4).; ///; /// The list is guaranteed to have at most one entry per feature.; ///; /// The target may modify the features list, to change which options are; /// passed onwards to the backend.; /// FIXME: This part should be fixed so that we can change handleTargetFeatures; /// to merely a TargetInfo initialization routine.; ///; /// \return False on error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:45,config,configured,45,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['config'],['configured']
Modifiability,"/// Perform marking for a reference to an arbitrary declaration. It; /// marks the declaration referenced, and performs odr-use checking for; /// functions and variables. This method should not be used when building a; /// normal expression which refers to a variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:160,variab,variables,160,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,/// Perform scalar replacement of aggregates on the specified global variable.; /// This opens the door for other optimizations by exposing the behavior of the; /// program in a more fine-grained way. We have determined that this; /// transformation is safe already. We return the first global variable we; /// insert so that the caller can reprocess it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:69,variab,variable,69,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,2,['variab'],['variable']
Modifiability,"/// Perform semantic analysis for the variable declaration that; /// occurs within a C++ catch clause, returning the newly-created; /// variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:38,variab,variable,38,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,2,['variab'],['variable']
Modifiability,"/// Perform semantic checking on a newly-created variable; /// declaration.; ///; /// This routine performs all of the type-checking required for a; /// variable declaration once it has been built. It is used both to; /// check variables after they have been parsed and their declarators; /// have been translated into a declaration, and to check variables; /// that have been instantiated from a template.; ///; /// Sets NewVD->isInvalidDecl() if an error was encountered.; ///; /// Returns true if the variable declaration is a redeclaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,5,['variab'],"['variable', 'variables']"
Modifiability,"/// Perform several checks on the arguments of @llvm.get.active.lane.mask; /// intrinsic. E.g., check that the loop induction variable and the element; /// count are of the form we expect, and also perform overflow checks for; /// the new expressions that are created.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp:126,variab,variable,126,interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp,1,['variab'],['variable']
Modifiability,"/// Perform simplification of memcpy's. If we have memcpy A; /// which copies X to Y, and memcpy B which copies Y to Z, then we can rewrite; /// B to be a memcpy from X to Z (or potentially a memmove, depending on; /// circumstances). This allows later passes to remove the first memcpy; /// altogether.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:132,rewrite,rewrite,132,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['rewrite'],['rewrite']
Modifiability,/// Perform template argument deduction to determine whether; /// the given template arguments match the given variable template; /// partial specialization per C++ [temp.class.spec.match].,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:111,variab,variable,111,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['variab'],['variable']
Modifiability,/// Perform the TLS Variable Hoist optimization for the given function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp:20,Variab,Variable,20,interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp,1,['Variab'],['Variable']
Modifiability,"/// Perform the actual initialization of the given entity based on; /// the computed initialization sequence.; ///; /// \param S the semantic analysis object.; ///; /// \param Entity the entity being initialized.; ///; /// \param Kind the kind of initialization being performed.; ///; /// \param Args the argument(s) provided for initialization, ownership of; /// which is transferred into the routine.; ///; /// \param ResultType if non-NULL, will be set to the type of the; /// initialized object, which is the type of the declaration in most; /// cases. However, when the initialized object is a variable of; /// incomplete array type and the initializer is an initializer; /// list, this type will be set to the completed array type.; ///; /// \returns an expression that performs the actual object initialization, if; /// the initialization is well-formed. Otherwise, emits diagnostics; /// and returns an invalid expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:599,variab,variable,599,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,1,['variab'],['variable']
Modifiability,/// Perform tile register configure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp:26,config,configure,26,interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp,1,['config'],['configure']
Modifiability,/// Performs aggregate initialization.; /// \param N Number of reduction item in the common list.; /// \param PrivateAddr Address of the corresponding private item.; /// \param SharedAddr Address of the original shared variable.; /// \param DRD Declare reduction construct used for reduction item.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:219,variab,variable,219,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,"/// Performs four iterations of the inner loop of the SHA-1 message digest; /// algorithm using the starting SHA-1 state (A, B, C, D) from the 128-bit; /// vector of [4 x i32] in \a V1 and the next four 32-bit elements of the; /// message from the 128-bit vector of [4 x i32] in \a V2. Note that the; /// SHA-1 state variable E must have already been added to \a V2; /// (\c _mm_sha1nexte_epu32() can perform this step). Returns the updated; /// SHA-1 state (A, B, C, D) as a 128-bit vector of [4 x i32].; ///; /// The SHA-1 algorithm has an inner loop of 80 iterations, twenty each; /// with a different combining function and rounding constant. This; /// intrinsic performs four iterations using a combining function and; /// rounding constant selected by \a M[1:0].; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128i _mm_sha1rnds4_epu32(__m128i V1, __m128i V2, const int M);; /// \endcode; ///; /// This intrinsic corresponds to the \c SHA1RNDS4 instruction.; ///; /// \param V1; /// A 128-bit vector of [4 x i32] containing the initial SHA-1 state.; /// \param V2; /// A 128-bit vector of [4 x i32] containing the next four elements of; /// the message, plus SHA-1 state variable E.; /// \param M; /// An immediate value where bits [1:0] select among four possible; /// combining functions and rounding constants (not specified here).; /// \returns A 128-bit vector of [4 x i32] containing the updated SHA-1 state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h:317,variab,variable,317,interpreter/llvm-project/clang/lib/Headers/shaintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/shaintrin.h,2,['variab'],['variable']
Modifiability,/// Performs initialization of the private copy for the reduction item.; /// \param N Number of the reduction item.; /// \param PrivateAddr Address of the corresponding private item.; /// \param DefaultInit Default initialization sequence that should be; /// performed if no reduction specific initialization is found.; /// \param SharedAddr Address of the original shared variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:373,variab,variable,373,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,"/// Physical register used as a base ptr in complex stack frames. I.e., when; /// we need a 3rd base, not just SP and FP, due to variable size stack; /// objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kRegisterInfo.h:129,variab,variable,129,interpreter/llvm-project/llvm/lib/Target/M68k/M68kRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kRegisterInfo.h,1,['variab'],['variable']
Modifiability,"/// Please use getIRPGOFuncName for LLVM IR instrumentation. This function is; /// for front-end (Clang, etc) instrumentation.; /// Return the modified name for function \c F suitable to be; /// used the key for profile lookup. Variable \c InLTO indicates if this; /// is called in LTO optimization passes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:228,Variab,Variable,228,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['Variab'],['Variable']
Modifiability,"/// Plugin instances can be added to the ObjectLinkingLayer to receive; /// callbacks when code is loaded or emitted, and when JITLink is being; /// configured.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h:4,Plugin,Plugin,4,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h,2,"['Plugin', 'config']","['Plugin', 'configured']"
Modifiability,"/// Point debug users of \p From to \p To or salvage them. Use this function; /// only when replacing all uses of \p From with \p To, with a guarantee that; /// \p From is going to be deleted.; ///; /// Follow these rules to prevent use-before-def of \p To:; /// . If \p To is a linked Instruction, set \p DomPoint to \p To.; /// . If \p To is an unlinked Instruction, set \p DomPoint to the Instruction; /// \p To will be inserted after.; /// . If \p To is not an Instruction (e.g a Constant), the choice of; /// \p DomPoint is arbitrary. Pick \p From for simplicity.; ///; /// If a debug user cannot be preserved without reordering variable updates or; /// introducing a use-before-def, it is either salvaged (\ref salvageDebugInfo); /// or deleted. Returns true if any debug users were updated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:634,variab,variable,634,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,1,['variab'],['variable']
Modifiability,/// Pointer to a class instance holding the global state shared by all; /// patterns:; /// - separate tables with the values of live string and numeric variables; /// respectively at the start of any given CHECK line;; /// - table holding whether a string variable has been defined at any given; /// point during the parsing phase.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:152,variab,variables,152,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// Pointer to a class instance holding, among other things, the table with; /// the values of live string variables at the start of any given CHECK line.; /// Used for substituting string variables with the text they were defined; /// as. Expressions are linked to the numeric variables they use at; /// parse time and directly access the value of the numeric variable to; /// evaluate their value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:107,variab,variables,107,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,4,['variab'],"['variable', 'variables']"
Modifiability,/// Pointer to a reference expression and a flag which shows that the; /// variable is marked as lastprivate(true) or not (false).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:75,variab,variable,75,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,/// Pointer to class instance holding the value and matching format of the; /// numeric variable being defined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:88,variab,variable,88,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,"/// Pointer to the ValueConstraint. We need a copyable, polymorphic and; /// default initializable type (vector needs that). A raw pointer was good,; /// however, we cannot default initialize that. unique_ptr makes the Summary; /// class non-copyable, therefore not an option. Releasing the copyability; /// requirement would render the initialization of the Summary map infeasible.; /// Mind that a pointer to a new value constraint is created when the negate; /// function is used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:56,polymorphi,polymorphic,56,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['polymorphi'],['polymorphic']
Modifiability,/// Pointer to the class instance for the variable this use is about.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:42,variab,variable,42,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,/// Pointer to the class instance representing the @LINE pseudo variable for; /// easily updating its value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:64,variab,variable,64,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,"/// Polymorphic base class that represents a constraint on a given argument; /// (or return value) of a function. Derived classes implement different kind; /// of constraints, e.g range constraints or correlation between two; /// arguments.; /// These are used as argument constraints (preconditions) of functions, in; /// which case a bug report may be emitted if the constraint is not satisfied.; /// Another use is as conditions for summary cases, to create different; /// classes of behavior for a function. In this case no description of the; /// constraint is needed because the summary cases have an own (not generated); /// description string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:4,Polymorphi,Polymorphic,4,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['Polymorphi'],['Polymorphic']
Modifiability,/// Polymorphic method to access the name of a pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:4,Polymorphi,Polymorphic,4,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,2,['Polymorphi'],['Polymorphic']
Modifiability,"/// Polymorphic method to let a pass optionally exempted from skipping by; /// PassInstrumentation.; /// To opt-in, pass should implement `static bool isRequired()`. It's no-op; /// to have `isRequired` always return false since that is the default.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:4,Polymorphi,Polymorphic,4,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,1,['Polymorphi'],['Polymorphic']
Modifiability,"/// Pool of type -> variables used to emit MatchData variables declarations.; ///; /// e.g. if the map contains ""int64_t"" -> [""MD0"", ""MD1""], then two variable; /// declarations must be emitted: `int64_t MD0` and `int64_t MD1`.; ///; /// This has a static lifetime and will outlive all the `MatchDataInfo` objects; /// by design. It needs a static lifetime so the backends can emit variable; /// declarations after processing all the inputs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/MatchDataInfo.h:20,variab,variables,20,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/MatchDataInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/MatchDataInfo.h,4,['variab'],"['variable', 'variables']"
Modifiability,"/// Pop the last stack frame off of ECStack and then copy the result; /// back into the result variable if we are not returning void. The; /// result variable may be the ExitValue, or the Value of the calling; /// CallInst if there was a previous stack frame. This method may; /// invalidate any ECStack iterators you have. This method also takes; /// care of switching to the normal destination BB, if we are returning; /// from an invoke.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp:95,variab,variable,95,interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Interpreter/Execution.cpp,2,['variab'],['variable']
Modifiability,"/// Pops cleanup blocks until the given savepoint is reached, then add the; /// cleanups from the given savepoint in the lifetime-extended cleanups stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:130,extend,extended,130,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,1,['extend'],['extended']
Modifiability,/// Populate LexicalScope entries with variables' info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:39,variab,variables,39,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['variab'],['variables']
Modifiability,/// Populate the lexical blocks and local variable lists of the parent with; /// information about the specified lexical scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:42,variab,variable,42,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['variab'],['variable']
Modifiability,"/// Populate the vector of Chains.; ///; /// This decreases ILP at the architecture level. Targets with ample registers,; /// multiple memory ports, and no register renaming probably don't want; /// this. However, such targets should probably disable LSR altogether.; ///; /// The job of LSR is to make a reasonable choice of induction variables across; /// the loop. Subsequent passes can easily ""unchain"" computation exposing more; /// ILP *within the loop* if the target wants it.; ///; /// Finding the best IV chain is potentially a scheduling problem. Since LSR; /// will not reorder memory operations, it will recognize this as a chain, but; /// will generate redundant IV increments. Ideally this would be corrected later; /// by a smart scheduler:; /// = A[i]; /// = A[i+x]; /// A[i] =; /// A[i+x] =; ///; /// TODO: Walk the entire domtree within this loop, not just the path to the; /// loop latch. This will discover chains on side paths, but requires; /// maintaining multiple copies of the Chains state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:336,variab,variables,336,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['variab'],['variables']
Modifiability,"/// Post-process encoded NEON v8 instructions, and rewrite them to Thumb2 form; /// if we are in Thumb2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp:51,rewrite,rewrite,51,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// Post-process the DAG to create weak edges from all uses of a copy to; /// the one use that defines the copy's source vreg, most likely an induction; /// variable increment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:157,variab,variable,157,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['variab'],['variable']
Modifiability,"/// Postprocessing before final spilling. Sets basic block ""live in""; /// variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocPBQP.cpp:74,variab,variables,74,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocPBQP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocPBQP.cpp,1,['variab'],['variables']
Modifiability,/// Preferred loop exit.; /// Member variable for convenience. It may be removed by duplication deep; /// in the call stack.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:37,variab,variable,37,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['variab'],['variable']
Modifiability,/// Present if the location is part of a larger variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h:48,variab,variable,48,interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,1,['variab'],['variable']
Modifiability,"/// Preserved analyses across SCCs.; ///; /// We specifically want to allow CGSCC passes to mutate ancestor IR; /// (changing both the CG structure and the function IR itself). However,; /// this means we need to take special care to correctly mark what analyses; /// are preserved *across* SCCs. We have to track this out-of-band here; /// because within the main `PassManager` infrastructure we need to mark; /// everything within an SCC as preserved in order to avoid repeatedly; /// invalidating the same analyses as we unnest pass managers and adaptors.; /// So we track the cross-SCC version of the preserved analyses here from any; /// code that does direct invalidation of SCC analyses, and then use it; /// whenever we move forward in the post-order walk of SCCs before running; /// passes over the new SCC.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:549,adapt,adaptors,549,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['adapt'],['adaptors']
Modifiability,/// PreviousLowerBound - local variable passed to runtime in the; /// enclosing schedule or null if that does not apply.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:31,variab,variable,31,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,/// PreviousUpperBound - local variable passed to runtime in the; /// enclosing schedule or null if that does not apply.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:31,variab,variable,31,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,"/// Print a general LLVM constant to the .s file.; /// On AIX, when an alias refers to a sub-element of a global variable, the; /// label of that alias needs to be emitted before the corresponding element.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h:113,variab,variable,113,interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AsmPrinter.h,1,['variab'],['variable']
Modifiability,/// Print adaptors and pass managers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h:10,adapt,adaptors,10,interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/StandardInstrumentations.h,1,['adapt'],['adaptors']
Modifiability,"/// Print all the default options including the extra one specific for a given minimizer name.; /// If no minimizer name is given, all the extra default options, which have been set and configured will be printed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimizerOptions.h:186,config,configured,186,math/mathcore/inc/Math/MinimizerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimizerOptions.h,1,['config'],['configured']
Modifiability,"/// Print any live variable range info needed to the right of a; /// non-instruction line of disassembly. This is where we print the variable; /// names and expressions, with thin line-drawing characters connecting them; /// to the live range which starts at the next instruction. If MustPrint is; /// true, we have to print at least one line (with the continuation of any; /// already-active live ranges) because something has already been printed; /// earlier on this line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,4,['variab'],['variable']
Modifiability,/// Print name of variable associated with this error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:18,variab,variable,18,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,"/// Print the appropriate prefix and the specified global variable's name.; /// If the global variable doesn't have a name, this fills in a unique name; /// for the global.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h:58,variab,variable,58,interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h,2,['variab'],['variable']
Modifiability,/// Print the appropriate prefix and the specified name as the global variable; /// name. GVName must not be empty.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h:70,variab,variable,70,interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Mangler.h,1,['variab'],['variable']
Modifiability,/// Print the live variable ranges to the right of a disassembled instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,2,['variab'],['variable']
Modifiability,"/// Print the postfix for externalized static variable or kernels for single; /// source offloading languages CUDA and HIP. The unique postfix is created; /// using either the CUID argument, or the file's UniqueID and active macros.; /// The fallback method without a CUID requires that the offloading toolchain; /// does not define separate macros via the -cc1 options.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:46,variab,variable,46,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variable']
Modifiability,/// Print this object as an initializer suitable for a variable of the; /// object's type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:55,variab,variable,55,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['variab'],['variable']
Modifiability,/// Print to stderr the variable liveness information associated with; /// each basic block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/LiveVariables.h:24,variab,variable,24,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/LiveVariables.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/LiveVariables.h,1,['variab'],['variable']
Modifiability,/// PrintGlobalVariableList - prints out list of problematic global variables; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h:68,variab,variables,68,interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,1,['variab'],['variables']
Modifiability,"/// PrintSpecial - Print information related to the specified machine instr; /// that is independent of the operand, and may be independent of the instr; /// itself. This can be useful for portably encoding the comment character; /// or other bits of target-specific knowledge into the asmstrings. The; /// syntax used is ${:comment}. Targets can override this to add support; /// for their own strange codes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinterInlineAsm.cpp:189,portab,portably,189,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinterInlineAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinterInlineAsm.cpp,1,['portab'],['portably']
Modifiability,/// Private loop counter variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:25,variab,variable,25,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,/// Private scope to capture global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:36,variab,variables,36,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,"/// Privatizes local variables previously registered as private.; /// Registration is separate from the actual privatization to allow; /// initializers use values of the original variables, not the private one.; /// This is important, for example, if the private variable is a class; /// variable initialized by a constructor that references other private; /// variables. But at initialization original variables must be used, not; /// private copies.; /// \return true if at least one variable was privatized, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:21,variab,variables,21,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,7,['variab'],"['variable', 'variables']"
Modifiability,"/// Process a single induction variable. First use the SCEVExpander to create a; /// wide induction variable that evaluates to the same recurrence as the; /// original narrow IV. Then use a worklist to forward traverse the narrow IV's; /// def-use chain. After widenIVUse has processed all interesting IV users, the; /// narrow IV will be isolated for removal by DeleteDeadPHIs.; ///; /// It would be simpler to delete uses as they are processed, but we must avoid; /// invalidating SCEV expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:31,variab,variable,31,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,2,['variab'],['variable']
Modifiability,"/// Process a variable in the computation graph. This is a separate non-inlined; /// function such that we can see in performance profiles how long this takes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx:14,variab,variable,14,roofit/roofitcore/src/RooFit/Evaluator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx,1,['variab'],['variable']
Modifiability,/// Process clauses with list of variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:33,variab,variables,33,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,4,['variab'],['variables']
Modifiability,/// Process global variables referenced by relocation instructions; /// and extern function references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.h:19,variab,variables,19,interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BTFDebug.h,1,['variab'],['variables']
Modifiability,/// Process globals so that they can be used in ThinLTO. This includes; /// promoting local variables so that they can be reference externally by; /// thin lto imported globals and converting strong external globals to; /// available_externally.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h:92,variab,variables,92,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/FunctionImportUtils.h,1,['variab'],['variables']
Modifiability,/// Produce \c Result string with the same format described above. The input; /// is vector of PGO function name variables that are referenced.; /// The global variable element in 'NameVars' is a string containing the pgo; /// name of a function. See `createPGOFuncNameVar` that creates these global; /// variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:113,variab,variables,113,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// Produce a constant representing the entire accumulated value, ideally of; /// the specified type. If \p AllowOversized, the constant might be larger; /// than implied by \p DesiredTy (eg, if there is a flexible array member).; /// Otherwise, the constant will be of exactly the same size as \p DesiredTy; /// even if we can't represent it as that type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:206,flexible,flexible,206,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,1,['flexible'],['flexible']
Modifiability,"/// Produce a set of blocks that are in the current lexical scope. This means; /// those blocks that contain instructions ""in"" the scope, blocks where; /// assignments to variables in scope occur, and artificial blocks that are; /// successors to any of the earlier blocks. See https://llvm.org/PR48091 for; /// more commentry on what ""in scope"" means.; /// \p DILoc A location in the scope that we're fetching blocks for.; /// \p Output Set to put in-scope-blocks into.; /// \p AssignBlocks Blocks known to contain assignments of variables in scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:171,variab,variables,171,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,2,['variab'],['variables']
Modifiability,"/// Produces MSVC-compatible vbtable data. The symbols produced by this; /// algorithm match those produced by MSVC 2012 and newer, which is different; /// from MSVC 2010.; ///; /// MSVC 2012 appears to minimize the vbtable names using the following; /// algorithm. First, walk the class hierarchy in the usual order, depth first,; /// left to right, to find all of the subobjects which contain a vbptr field.; /// Visiting each class node yields a list of inheritance paths to vbptrs. Each; /// record with a vbptr creates an initially empty path.; ///; /// To combine paths from child nodes, the paths are compared to check for; /// ambiguity. Paths are ""ambiguous"" if multiple paths have the same set of; /// components in the same order. Each group of ambiguous paths is extended by; /// appending the class of the base from which it came. If the current class; /// node produced an ambiguous path, its path is extended with the current class.; /// After extending paths, MSVC again checks for ambiguity, and extends any; /// ambiguous path which wasn't already extended. Because each node yields an; /// unambiguous set of paths, MSVC doesn't need to extend any path more than once; /// to produce an unambiguous set of paths.; ///; /// TODO: Presumably vftables use the same algorithm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:457,inherit,inheritance,457,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,7,"['extend', 'inherit']","['extend', 'extended', 'extending', 'extends', 'inheritance']"
Modifiability,/// Produces a sign-extended result of comparing two 32-bit values according to; /// the passed condition code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:20,extend,extended,20,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,/// Produces a sign-extended result of comparing two 64-bit values according to; /// the passed condition code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:20,extend,extended,20,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,/// Produces a zero-extended result of comparing two 32-bit values according to; /// the passed condition code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:20,extend,extended,20,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,/// Produces a zero-extended result of comparing two 64-bit values according to; /// the passed condition code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:20,extend,extended,20,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"/// Promotes interesting constant into global variables.; /// The motivating example is:; /// static const uint16_t TableA[32] = {; /// 41944, 40330, 38837, 37450, 36158, 34953, 33826, 32768,; /// 31776, 30841, 29960, 29128, 28340, 27595, 26887, 26215,; /// 25576, 24967, 24386, 23832, 23302, 22796, 22311, 21846,; /// 21400, 20972, 20561, 20165, 19785, 19419, 19066, 18725,; /// };; ///; /// uint8x16x4_t LoadStatic(void) {; /// uint8x16x4_t ret;; /// ret.val[0] = vld1q_u16(TableA + 0);; /// ret.val[1] = vld1q_u16(TableA + 8);; /// ret.val[2] = vld1q_u16(TableA + 16);; /// ret.val[3] = vld1q_u16(TableA + 24);; /// return ret;; /// }; ///; /// The constants in this example are folded into the uses. Thus, 4 different; /// constants are created.; ///; /// As their type is vector the cheapest way to create them is to load them; /// for the memory.; ///; /// Therefore the final assembly final has 4 different loads. With this pass; /// enabled, only one load is issued for the constants.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:46,variab,variables,46,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,1,['variab'],['variables']
Modifiability,"/// Promotes uniform 'bitreverse' intrinsic \p I to 32 bit 'bitreverse'; /// intrinsic.; ///; /// \details \p I's base element bit width must be greater than 1 and less; /// than or equal 16. Promotion is done by zero extending the operand to 32; /// bits, replacing \p I with 32 bit 'bitreverse' intrinsic, shifting the; /// result of 32 bit 'bitreverse' intrinsic to the right with zero fill (the; /// shift amount is 32 minus \p I's base element bit width), and truncating; /// the result of the shift operation back to \p I's original type.; ///; /// \returns True.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:218,extend,extending,218,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,1,['extend'],['extending']
Modifiability,"/// Promotes uniform 'icmp' operation \p I to 32 bit 'icmp' operation.; ///; /// \details \p I's base element bit width must be greater than 1 and less; /// than or equal 16. Promotion is done by sign or zero extending operands to; /// 32 bits, and replacing \p I with 32 bit 'icmp' operation.; ///; /// \returns True.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:209,extend,extending,209,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,1,['extend'],['extending']
Modifiability,"/// Promotes uniform 'select' operation \p I to 32 bit 'select'; /// operation.; ///; /// \details \p I's base element bit width must be greater than 1 and less; /// than or equal 16. Promotion is done by sign or zero extending operands to; /// 32 bits, replacing \p I with 32 bit 'select' operation, and truncating the; /// result of 32 bit 'select' operation back to \p I's original type.; ///; /// \returns True.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:218,extend,extending,218,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,1,['extend'],['extending']
Modifiability,"/// Promotes uniform binary operation \p I to equivalent 32 bit binary; /// operation.; ///; /// \details \p I's base element bit width must be greater than 1 and less; /// than or equal 16. Promotion is done by sign or zero extending operands to; /// 32 bits, replacing \p I with equivalent 32 bit binary operation, and; /// truncating the result of 32 bit binary operation back to \p I's original; /// type. Division operation is not promoted.; ///; /// \returns True if \p I is promoted to equivalent 32 bit binary operation,; /// false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:225,extend,extending,225,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,1,['extend'],['extending']
Modifiability,/// Propagate variable values to blocks in the common case where there's; /// only one value assigned to the variable. This function has better; /// performance as it doesn't have to find the dominance frontier between; /// different assignments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:14,variab,variable,14,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,2,['variab'],['variable']
Modifiability,/// PropertyNames - uniqued method variable names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:35,variab,variable,35,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variable']
Modifiability,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:202,variab,variable-lengthed,202,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,1,['variab'],['variable-lengthed']
Modifiability,/// PruneBlocksHandler is a special UninitVariablesHandler that is used; /// to detect when a CFGBlock has any *potential* use of an uninitialized; /// variable. It is mainly used to prune out work during the final; /// reporting pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:152,variab,variable,152,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,1,['variab'],['variable']
Modifiability,"/// Pseudo declaration for capturing expressions. Also is used for capturing of; /// non-static data members in non-static member functions.; ///; /// Clang supports capturing of variables only, but OpenMP 4.5 allows to; /// privatize non-static members of current class in non-static member; /// functions. This pseudo-declaration allows properly handle this kind of; /// capture by wrapping captured expression into a variable-like declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:179,variab,variables,179,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,2,['variab'],"['variable-like', 'variables']"
Modifiability,"/// PseudoObjectExpr - An expression which accesses a pseudo-object; /// l-value. A pseudo-object is an abstract object, accesses to which; /// are translated to calls. The pseudo-object expression has a; /// syntactic form, which shows how the expression was actually; /// written in the source code, and a semantic form, which is a series; /// of expressions to be executed in order which detail how the; /// operation is actually evaluated. Optionally, one of the semantic; /// forms may also provide a result value for the expression.; ///; /// If any of the semantic-form expressions is an OpaqueValueExpr,; /// that OVE is required to have a source expression, and it is bound; /// to the result of that source expression. Such OVEs may appear; /// only in subsequent semantic-form expressions and as; /// sub-expressions of the syntactic form.; ///; /// PseudoObjectExpr should be used only when an operation can be; /// usefully described in terms of fairly simple rewrite rules on; /// objects and functions that are meant to be used by end-developers.; /// For example, under the Itanium ABI, dynamic casts are implemented; /// as a call to a runtime function called __dynamic_cast; using this; /// class to describe that would be inappropriate because that call is; /// not really part of the user-visible semantics, and instead the; /// cast is properly reflected in the AST and IR-generation has been; /// taught to generate the call as necessary. In contrast, an; /// Objective-C property access is semantically defined to be; /// equivalent to a particular message send, and this is very much; /// part of the user model. The name of this class encourages this; /// modelling design.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:973,rewrite,rewrite,973,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['rewrite'],['rewrite']
Modifiability,"/// Query an option's string value.; ///; /// If an option value is not provided, returns the given \p DefaultVal.; /// @param [in] CheckerName The *full name* of the checker. One may retrieve; /// this from the checker object's field \c Name, or through \c; /// CheckerManager::getCurrentCheckerName within the checker's registry; /// function.; /// Checker options are retrieved in the following format:; /// `-analyzer-config CheckerName:OptionName=Value.; /// @param [in] OptionName Name for option to retrieve.; /// @param [in] SearchInParents If set to true and the searched option was not; /// specified for the given checker the options for the parent packages will; /// be searched as well. The inner packages take precedence over the outer; /// ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:422,config,config,422,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,1,['config'],['config']
Modifiability,/// Queue a phi-node to be added to a basic-block for a specific Alloca.; ///; /// Returns true if there wasn't already a phi-node for that variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp:140,variab,variable,140,interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,1,['variab'],['variable']
Modifiability,/// Queue of pointer uses to analyze and potentially rewrite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:53,rewrite,rewrite,53,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// RAII object used to inform the actions that we're; /// currently parsing a declaration. This is active when parsing a; /// variable's initializer, but not when parsing the body of a; /// class or function definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h:127,variab,variable,127,interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h,1,['variab'],['variable']
Modifiability,"/// READ_REGISTER, WRITE_REGISTER - This node represents llvm.register on; /// the DAG, which implements the named register global variables extension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:131,variab,variables,131,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['variab'],['variables']
Modifiability,/// RISCVCCAssignFn - This target-specific function extends the default; /// CCValAssign with additional information used to lower RISC-V calling; /// conventions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:52,extend,extends,52,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['extend'],['extends']
Modifiability,"/// ROOT-10676; /// The RooDataSet warns that it's not using all variables if the selection string doesn't; /// make use of all variables. Although true, the user has no way to suppress this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:65,variab,variables,65,roofit/roofitcore/test/testRooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx,2,['variab'],['variables']
Modifiability,"/// ROOT-3579 Binned clone seemed to create problems with chains.; /// Code adapted from example in JIRA.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:76,adapt,adapted,76,roofit/roofitcore/test/testRooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx,1,['adapt'],['adapted']
Modifiability,"/// Reaching the latch indicates the end of the loop body code. In the; /// canonical control flow, it only contains the increment of the induction; /// variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:153,variab,variable,153,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,"/// Read a declaration name, advancing Idx.; // DeclarationName readDeclarationName(); (inherited)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h:88,inherit,inherited,88,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,1,['inherit'],['inherited']
Modifiability,/// Read a global index file for the given directory.; ///; /// \param Path The path to the specific module cache where the module files; /// for the intended configuration reside.; ///; /// \returns A pair containing the global module index (if it exists) and; /// the error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h:159,config,configuration,159,interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h,1,['config'],['configuration']
Modifiability,/// Read a pointer encoded value and advance pointer; /// See Variable Length Data in:; /// @link http://dwarfstd.org/Dwarf3.pdf @unlink; /// @param data reference variable holding memory pointer to decode from; /// @param encoding dwarf encoding type; /// @returns decoded value,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:62,Variab,Variable,62,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// Read a sleb128 encoded value and advance pointer; /// See Variable Length Data in:; /// @link http://dwarfstd.org/Dwarf3.pdf @unlink; /// @param data reference variable holding memory pointer to decode from; /// @returns decoded value,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:62,Variab,Variable,62,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,"/// Read a template name, advancing Idx.; // TemplateName readTemplateName(); (inherited); /// Read a template argument, advancing Idx. (inherited); // TemplateArgument readTemplateArgument();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h:79,inherit,inherited,79,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,2,['inherit'],['inherited']
Modifiability,/// Read a uleb128 encoded value and advance pointer; /// See Variable Length Data in:; /// @link http://dwarfstd.org/Dwarf3.pdf @unlink; /// @param data reference variable holding memory pointer to decode from; /// @returns decoded value,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:62,Variab,Variable,62,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,"/// Read an arbitrary constant value, advancing Idx.; // APValue readAPValue(); (inherited); /// Read an integral value, advancing Idx.; // llvm::APInt readAPInt(); (inherited); /// Read a signed integral value, advancing Idx.; // llvm::APSInt readAPSInt(); (inherited); /// Read a floating-point value, advancing Idx.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h:81,inherit,inherited,81,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,3,['inherit'],['inherited']
Modifiability,/// Read information about an exception specification (inherited).; //FunctionProtoType::ExceptionSpecInfo; //readExceptionSpecInfo(SmallVectorImpl<QualType> &ExceptionStorage);; /// Get the global offset corresponding to a local offset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h:55,inherit,inherited,55,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,1,['inherit'],['inherited']
Modifiability,/// Read serialized VariableInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesReader.cpp:20,Variab,VariableInfo,20,interpreter/llvm-project/clang/lib/APINotes/APINotesReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesReader.cpp,1,['Variab'],['VariableInfo']
Modifiability,/// Read the set of decls to be checked for deferred diags.; ///; /// The external source should append its own potentially emitted function; /// and variable decls which may cause deferred diags. Note that this routine; /// may be invoked multiple times; the external source should take care not to; /// introduce the same declarations repeatedly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h:150,variab,variable,150,interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ExternalSemaSource.h,2,['variab'],['variable']
Modifiability,"/// ReadOnlyWithRel - These are global variables that are never; /// written to by the program, but that have relocations, so they; /// must be stuck in a writeable section so that the dynamic linker; /// can write to them. If it chooses to, the dynamic linker can; /// mark the pages these globals end up on as read-only after it is; /// done with its relocation phase.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h:39,variab,variables,39,interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h,1,['variab'],['variables']
Modifiability,/// ReadVarName - Read the rest of a token containing a variable name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLLexer.cpp:56,variab,variable,56,interpreter/llvm-project/llvm/lib/AsmParser/LLLexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLLexer.cpp,1,['variab'],['variable']
Modifiability,/// Reading a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:14,variab,variable,14,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['variab'],['variable']
Modifiability,/// Reading or writing a variable (e.g. x in x = 5;),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:25,variab,variable,25,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['variab'],['variable']
Modifiability,"/// Reads command line options from the given configuration file.; ///; /// \param [in] CfgFile Path to configuration file.; /// \param [out] Argv Array to which the read options are added.; /// \return true if the file was successfully read.; ///; /// It reads content of the specified file, tokenizes it and expands ""@file""; /// commands resolving file names in them relative to the directory where; /// CfgFilename resides. It also expands ""<CFGDIR>"" to the base path of the; /// current config file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h:46,config,configuration,46,interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/CommandLine.h,3,['config'],"['config', 'configuration']"
Modifiability,"/// Recognize the distinctive (AND (setcc ...) (setcc ..)) where both setccs; /// reference the same FP CMP, and rewrite for CMPEQSS and friends. Likewise for; /// OR -> CMPNEQSS.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:113,rewrite,rewrite,113,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rewrite'],['rewrite']
Modifiability,/// Record a use of the symbolic value. This use will be updated with a; /// rewritten value when RewriteAllUses is called.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterBulk.h:98,Rewrite,RewriteAllUses,98,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterBulk.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdaterBulk.h,2,['Rewrite'],['RewriteAllUses']
Modifiability,/// Record code for undefined but used functions and variables that; /// need a definition in this TU.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:53,variab,variables,53,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,1,['variab'],['variables']
Modifiability,"/// Record of a variable value-assignment, aka a non instruction representation; /// of the dbg.value intrinsic. Features various methods copied across from the; /// Instruction class to aid ease-of-use. DPValue objects should always be; /// linked into a DPMarker's StoredDPValues list. The marker connects a DPValue; /// back to it's position in the BasicBlock.; ///; /// This class inherits from DebugValueUser to allow LLVM's metadata facilities; /// to update our references to metadata beneath our feet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h:16,variab,variable,16,interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugProgramInstruction.h,2,"['inherit', 'variab']","['inherits', 'variable']"
Modifiability,"/// Record of all changes in variable locations at a block position. Awkwardly; /// we allow inserting either before or after the point: MBB != nullptr; /// indicates it's before, otherwise after.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:29,variab,variable,29,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,/// Record of debug variables that have had their locations set in the; /// current block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,1,['variab'],['variables']
Modifiability,"/// Record that a given expression is a ""safe"" access of a weak object (e.g.; /// assigning it to a strong variable.); ///; /// Part of the implementation of -Wrepeated-use-of-weak.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:107,variab,variable,107,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['variab'],['variable']
Modifiability,"/// Record that a local context has been entered. Left and; /// Right are IR ""containers"" of some sort which are being; /// considered for structural equivalence: global variables,; /// functions, blocks, instructions, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffConsumer.h:170,variab,variables,170,interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DiffConsumer.h,1,['variab'],['variables']
Modifiability,/// Record the preferred extend type (ISD::SIGN_EXTEND or ISD::ZERO_EXTEND); /// for a value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h:25,extend,extend,25,interpreter/llvm-project/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h,1,['extend'],['extend']
Modifiability,/// Records if a CFGBlock had a potential use of an uninitialized variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:66,variab,variable,66,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,1,['variab'],['variable']
Modifiability,/// Records if any CFGBlock had a potential use of an uninitialized variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:68,variab,variable,68,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,1,['variab'],['variable']
Modifiability,"/// Records if this operand is like being sign extended.; /// Note: SupportsZExt and SupportsSExt are not mutually exclusive. For; /// instance, a splat constant (e.g., 3), would support being both sign and; /// zero extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:47,extend,extended,47,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['extend'],['extended']
Modifiability,/// Records if this operand is like being zero extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:47,extend,extended,47,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,"/// Records information about a local variable in the appropriate scope. In; /// particular, locals from inlined code live inside the inlining site.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h:38,variab,variable,38,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.h,1,['variab'],['variable']
Modifiability,/// Recovers the address of a local in a parent function. ParentVar is the; /// address of the variable used in the immediate parent function. It can; /// either be an alloca or a call to llvm.localrecover if there are nested; /// outlined functions. ParentFP is the frame pointer of the outermost parent; /// frame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:95,variab,variable,95,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,/// Recursively collect variables from subprogram with DW_AT_inline attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:24,variab,variables,24,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,/// Recursively update address to variable Die map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:34,variab,variable,34,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,1,['variab'],['variable']
Modifiability,"/// Recursively walk the \p DIE tree and look for DIEs to keep. Store that; /// information in \p CU's DIEInfo.; ///; /// This function is the entry point of the DIE selection algorithm. It is; /// expected to walk the DIE tree and(through the mediation of; /// Context.File.Addresses) ask for relocation adjustment value on each; /// DIE that might be a 'root DIE'(f.e. subprograms, variables).; ///; /// Returns true if all dependencies are correctly discovered. Inter-CU; /// dependencies cannot be discovered if referenced CU is not analyzed yet.; /// If that is the case this method returns false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h:384,variab,variables,384,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h,1,['variab'],['variables']
Modifiability,"/// ReduceCrashingGlobalInitializers - This works by removing global variable; /// initializers and seeing if the program still crashes. If it does, then we; /// keep that program and try again.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp:69,variab,variable,69,interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,1,['variab'],['variable']
Modifiability,"/// Reduction element type, must match pointee type of variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:55,variab,variable,55,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,/// Reduction type; // TODO: Will be extended when additional optimizations are added,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp:37,extend,extended,37,interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MicroMipsSizeReduction.cpp,1,['extend'],['extended']
Modifiability,/// Reduction variable of pointer type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:14,variab,variable,14,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,/// Reference to loop variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"/// Reformats the given \p Ranges in \p Code.; ///; /// Each range is extended on either end to its next bigger logic unit, i.e.; /// everything that might influence its formatting or might be influenced by its; /// formatting.; ///; /// Returns the ``Replacements`` necessary to make all \p Ranges comply with; /// \p Style.; ///; /// If ``Status`` is non-null, its value will be populated with the status of; /// this formatting attempt. See \c FormattingAttemptStatus.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:70,extend,extended,70,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['extend'],['extended']
Modifiability,"/// Reformats the given \p Ranges in the code fragment \p Code.; ///; /// A fragment of code could conceptually be surrounded by other code that might; /// constrain how that fragment is laid out.; /// For example, consider the fragment of code between 'R""(' and ')""',; /// exclusive, in the following code:; ///; /// void outer(int x) {; /// string inner = R""(name: data; /// ^ FirstStartColumn; /// value: {; /// x: 1; /// ^ NextStartColumn; /// }; /// )"";; /// ^ LastStartColumn; /// }; ///; /// The outer code can influence the inner fragment as follows:; /// * \p FirstStartColumn specifies the column at which \p Code starts.; /// * \p NextStartColumn specifies the additional indent dictated by the; /// surrounding code. It is applied to the rest of the lines of \p Code.; /// * \p LastStartColumn specifies the column at which the last line of; /// \p Code should end, in case the last line is an empty line.; ///; /// In the case where the last line of the fragment contains content,; /// the fragment ends at the end of that content and \p LastStartColumn is; /// not taken into account, for example in:; ///; /// void block() {; /// string inner = R""(name: value)"";; /// }; ///; /// Each range is extended on either end to its next bigger logic unit, i.e.; /// everything that might influence its formatting or might be influenced by its; /// formatting.; ///; /// Returns a pair P, where:; /// * P.first are the ``Replacements`` necessary to make all \p Ranges comply; /// with \p Style.; /// * P.second is the penalty induced by formatting the fragment \p Code.; /// If the formatting of the fragment doesn't have a notion of penalty,; /// returns 0.; ///; /// If ``Status`` is non-null, its value will be populated with the status of; /// this formatting attempt. See \c FormattingAttemptStatus.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatInternal.h:1209,extend,extended,1209,interpreter/llvm-project/clang/lib/Format/FormatInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatInternal.h,1,['extend'],['extended']
Modifiability,/// RegAllocBase provides the register allocation driver and interface that can; /// be extended to add interesting heuristics.; ///; /// Register allocators must override the selectOrSplit() method to implement; /// live range splitting. They must also override enqueue/dequeue to provide an; /// assignment order.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBase.h:88,extend,extended,88,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocBase.h,1,['extend'],['extended']
Modifiability,"/// Register \p CB as a simplification callback.; /// Similar to \p registerSimplificationCallback, the call back will be called; /// first when we simplify a global variable \p GV.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:166,variab,variable,166,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['variab'],['variable']
Modifiability,"/// Register a 'signal' value with the emitter to inform it where to; /// resolve a placeholder. The signal value must be unique in the; /// initializer; it might, for example, be the address of a global that; /// refers to the current-address value in its own initializer.; ///; /// Uses of the placeholder must be properly anchored before finalizing; /// the emitter, e.g. by being installed as the initializer of a global; /// variable. That is, it must be possible to replaceAllUsesWith; /// the placeholder with the proper address of the signal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h:430,variab,variable,430,interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,1,['variab'],['variable']
Modifiability,"/// Register a rewrite for a function signature.; ///; /// The argument \p Arg is replaced with new ones defined by the number,; /// order, and types in \p ReplacementTypes. The rewiring at the call sites is; /// done through \p ACSRepairCB and at the callee site through; /// \p CalleeRepairCB.; ///; /// \returns True, if the replacement was registered, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:15,rewrite,rewrite,15,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['rewrite'],['rewrite']
Modifiability,/// Register device global variable entry.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:27,variab,variable,27,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,/// Register specified variable as loop control variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,"/// Registers \p LocalVD variable as a private with \p Addr as the address; /// of the corresponding private variable. \p; /// PrivateGen is the address of the generated private variable.; /// \return true if the variable is registered as private, false if it has; /// been privatized already.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:25,variab,variable,25,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,4,['variab'],['variable']
Modifiability,"/// Registers a target variable for device or host.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable these are required by Clang for book; /// keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param Addr - the original llvm value (addr) of the variable to be; /// registered",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:23,variab,variable,23,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,14,"['Variab', 'variab']","['VariableLinkage', 'variable', 'variables']"
Modifiability,"/// Registers an option to a given checker. A checker option will always have; /// the following format:; /// CheckerFullName:OptionName=Value; /// And can be specified from the command line like this:; /// -analyzer-config CheckerFullName:OptionName=Value; ///; /// Options for unknown checkers, or unknown options for a given checker, or; /// invalid value types for that given option are reported as an error in; /// non-compatibility mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:217,config,config,217,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,1,['config'],['config']
Modifiability,"/// Registers an option to a given package. A package option will always have; /// the following format:; /// PackageFullName:OptionName=Value; /// And can be specified from the command line like this:; /// -analyzer-config PackageFullName:OptionName=Value; ///; /// Options for unknown packages, or unknown options for a given package, or; /// invalid value types for that given option are reported as an error in; /// non-compatibility mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h:217,config,config,217,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/CheckerRegistry.h,1,['config'],['config']
Modifiability,/// Registers that have been sign extended from i32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMachineFunctionInfo.h:34,extend,extended,34,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVMachineFunctionInfo.h,1,['extend'],['extended']
Modifiability,/// Registry of pragma handlers added by plugins,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:41,plugin,plugins,41,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['plugin'],['plugins']
Modifiability,"/// Regular expressions denoting the different ``#include`` categories; /// used for ordering ``#includes``.; ///; /// `POSIX extended; /// <https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html>`_; /// regular expressions are supported.; ///; /// These regular expressions are matched against the filename of an include; /// (including the <> or """") in order. The value belonging to the first; /// matching regular expression is assigned and ``#includes`` are sorted first; /// according to increasing category number and then alphabetically within; /// each category.; ///; /// If none of the regular expressions match, INT_MAX is assigned as; /// category. The main header for a source file automatically gets category 0.; /// so that it is generally kept at the beginning of the ``#includes``; /// (https://llvm.org/docs/CodingStandards.html#include-style). However, you; /// can also assign negative priorities if you have certain headers that; /// always need to be first.; ///; /// There is a third and optional field ``SortPriority`` which can used while; /// ``IncludeBlocks = IBS_Regroup`` to define the priority in which; /// ``#includes`` should be ordered. The value of ``Priority`` defines the; /// order of ``#include blocks`` and also allows the grouping of ``#includes``; /// of different priority. ``SortPriority`` is set to the value of; /// ``Priority`` as default if it is not assigned.; ///; /// Each regular expression can be marked as case sensitive with the field; /// ``CaseSensitive``, per default it is not.; ///; /// To configure this in the .clang-format file, use:; /// \code{.yaml}; /// IncludeCategories:; /// - Regex: '^""(llvm|llvm-c|clang|clang-c)/'; /// Priority: 2; /// SortPriority: 2; /// CaseSensitive: true; /// - Regex: '^((<|"")(gtest|gmock|isl|json)/)'; /// Priority: 3; /// - Regex: '<[[:alnum:].]+>'; /// Priority: 4; /// - Regex: '.*'; /// Priority: 1; /// SortPriority: 0; /// \endcode; /// \version 3.8",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/IncludeStyle.h:126,extend,extended,126,interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/IncludeStyle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/IncludeStyle.h,2,"['config', 'extend']","['configure', 'extended']"
Modifiability,/// Release a __block variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,"/// Release the tile configuration to return to the init state, which; /// releases all storage it currently holds.; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the <c> TILERELEASE </c> instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h:21,config,configuration,21,interpreter/llvm-project/clang/lib/Headers/amxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h,1,['config'],['configuration']
Modifiability,/// Relocation adjustment for the variable locations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DIEAttributeCloner.h:34,variab,variable,34,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DIEAttributeCloner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DIEAttributeCloner.h,1,['variab'],['variable']
Modifiability,/// Remove global variable \p GV from the list and delete it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:18,variab,variable,18,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['variab'],['variable']
Modifiability,"/// Remove instructions that generate values with no uses.; /// Typically, these are induction variable operations that generate values; /// used in the loop itself. A dead instruction has a definition with; /// no uses, or uses that occur in the original loop only.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp:95,variab,variable,95,interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,1,['variab'],['variable']
Modifiability,"/// Remove redundant casts of inductions.; ///; /// Such redundant casts are casts of induction variables that can be ignored,; /// because we already proved that the casted phi is equal to the uncasted phi; /// in the vectorized loop. There is no need to vectorize the cast - the same; /// value can be used for both the phi and casts in the vector loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.h:96,variab,variables,96,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.h,1,['variab'],['variables']
Modifiability,"/// Remove redundant dbg.value instructions using a forward scan. This can; /// remove a dbg.value instruction that is redundant due to indicating that a; /// variable has the same value as already being indicated by an earlier; /// dbg.value.; ///; /// ForwardScan strategy:; /// ---------------------; /// Given two identical dbg.value instructions, separated by a block of; /// instructions that isn't describing the same variable, like this; ///; /// dbg.value X1, ""x"", FragmentX1 (**); /// <block of instructions, none being ""dbg.value ..., ""x"", ..."">; /// dbg.value X1, ""x"", FragmentX1 (*); ///; /// then the instruction marked with (*) can be removed. Variable ""x"" is already; /// described as being mapped to the SSA value X1.; ///; /// Possible improvements:; /// - Keep track of non-overlapping fragments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp:159,variab,variable,159,interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// Remove redundant definitions within sequences of consecutive location defs.; /// This is done using a backward scan to keep the last def describing a; /// specific variable/fragment.; ///; /// This implements removeRedundantDbgInstrsUsingBackwardScan from; /// lib/Transforms/Utils/BasicBlockUtils.cpp for locations described with; /// FunctionVarLocsBuilder instead of with intrinsics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:168,variab,variable,168,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"/// Remove redundant instructions within sequences of consecutive dbg.value; /// instructions. This is done using a backward scan to keep the last dbg.value; /// describing a specific variable/fragment.; ///; /// BackwardScan strategy:; /// ----------------------; /// Given a sequence of consecutive DbgValueInst like this; ///; /// dbg.value ..., ""x"", FragmentX1 (*); /// dbg.value ..., ""y"", FragmentY1; /// dbg.value ..., ""x"", FragmentX2; /// dbg.value ..., ""x"", FragmentX1 (**); ///; /// then the instruction marked with (*) can be removed (it is guaranteed to be; /// obsoleted by the instruction marked with (**) as the latter instruction is; /// describing the same variable using the same fragment info).; ///; /// Possible improvements:; /// - Check fully overlapping fragments and not only identical fragments.; /// - Support dbg.declare. dbg.label, and possibly other meta instructions being; /// part of the sequence of consecutive instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp:184,variab,variable,184,interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,2,['variab'],['variable']
Modifiability,/// Remove redundant location defs using a forward scan. This can remove a; /// location definition that is redundant due to indicating that a variable has; /// the same value as is already being indicated by an earlier def.; ///; /// This implements removeRedundantDbgInstrsUsingForwardScan from; /// lib/Transforms/Utils/BasicBlockUtils.cpp for locations described with; /// FunctionVarLocsBuilder instead of with intrinsics,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:143,variab,variable,143,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"/// Remove redundant undef dbg.assign intrinsic from an entry block using a; /// forward scan.; /// Strategy:; /// ---------------------; /// Scanning forward, delete dbg.assign intrinsics iff they are undef, not; /// linked to an intrinsic, and don't share an aggregate variable with a debug; /// intrinsic that didn't meet the criteria. In other words, undef dbg.assigns; /// that come before non-undef debug intrinsics for the variable are; /// deleted. Given:; ///; /// dbg.assign undef, ""x"", FragmentX1 (*); /// <block of instructions, none being ""dbg.value ..., ""x"", ..."">; /// dbg.value %V, ""x"", FragmentX2; /// <block of instructions, none being ""dbg.value ..., ""x"", ..."">; /// dbg.assign undef, ""x"", FragmentX1; ///; /// then (only) the instruction marked with (*) can be removed.; /// Possible improvements:; /// - Keep track of non-overlapping fragments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp:271,variab,variable,271,interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,2,['variab'],['variable']
Modifiability,/// Remove stale types from the type cache when an inheritance model; /// gets assigned to a class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:51,inherit,inheritance,51,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,1,['inherit'],['inheritance']
Modifiability,"/// Remove the default argument, even if it was inherited.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:48,inherit,inherited,48,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['inherit'],['inherited']
Modifiability,/// Render a G_CONSTANT operator as a sign-extended immediate.; /// - NewInsnID(ULEB128) - Instruction ID to modify; /// - OldInsnID(ULEB128) - Instruction ID to copy from; /// The operand index is implicitly 1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:43,extend,extended,43,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,1,['extend'],['extended']
Modifiability,/// Render a G_FCONSTANT operator as a sign-extended immediate.; /// - NewInsnID(ULEB128) - Instruction ID to modify; /// - OldInsnID(ULEB128) - Instruction ID to copy from; /// The operand index is implicitly 1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:44,extend,extended,44,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,1,['extend'],['extended']
Modifiability,/// Renders and displays an inheritance diagram; /// for this C++ class and all of its base classes (transitively) using; /// GraphViz.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:28,inherit,inheritance,28,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inheritance']
Modifiability,/// Reorders the current graph to the most profitable order starting from the; /// root node to the leaf nodes. The best order is chosen only from the nodes; /// of the same size (vectorization factor). Smaller nodes are considered; /// parts of subgraph with smaller VF and they are reordered independently. We; /// can make it because we still need to extend smaller nodes to the wider VF; /// and we can merge reordering shuffles with the widening shuffles.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:354,extend,extend,354,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['extend'],['extend']
Modifiability,"/// Replace 'BB's terminator with one that does not have an unwind successor; /// block. Rewrites `invoke` to `call`, etc. Updates any PHIs in unwind; /// successor. Returns the instruction that replaced the original terminator,; /// which might be a call in case the original terminator was an invoke.; ///; /// \param BB Block whose terminator will be replaced. Its terminator must; /// have an unwind successor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:89,Rewrite,Rewrites,89,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,1,['Rewrite'],['Rewrites']
Modifiability,"/// Replace all the uses of an SSA value in @llvm.dbg intrinsics with; /// undef. This is useful for signaling that a variable, e.g. has been; /// found dead and hence it's unavailable at a given program point.; /// Returns true if the dbg values have been changed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h:118,variab,variable,118,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Local.h,1,['variab'],['variable']
Modifiability,"/// Replace all uses of the canonical induction variable in the loop body with; /// a new one.; ///; /// The intended use case is to update the induction variable for an updated; /// iteration space such that it can stay normalized in the 0...tripcount-1; /// range.; ///; /// The \p Updater is called with the (presumable updated) current normalized; /// induction variable and is expected to return the value that uses of the; /// pre-updated induction values should use instead, typically dependent on; /// the new induction variable. This is a lambda (instead of e.g. just passing; /// the new value) to be able to distinguish the uses of the pre-updated; /// induction variable and uses of the induction varible to compute the; /// updated induction variable value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:48,variab,variable,48,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,6,['variab'],['variable']
Modifiability,/// Replace loop instruction with the constant extended; /// version if the loop label is too far from the loop instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFixupHwLoops.cpp:47,extend,extended,47,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFixupHwLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFixupHwLoops.cpp,1,['extend'],['extended']
Modifiability,/// Replace loop instructions with the constant extended version.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFixupHwLoops.cpp:48,extend,extended,48,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFixupHwLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonFixupHwLoops.cpp,1,['extend'],['extended']
Modifiability,"/// Replaceable canonical proxy adaptor class that provides the link; /// between a canonical type and the accessors of the type.; ///; /// The CanProxyAdaptor is a replaceable class template that is instantiated; /// as part of each canonical proxy type. The primary template merely provides; /// redirection to the underlying type (T), e.g., @c PointerType. One can; /// provide specializations of this class template for each underlying type; /// that provide accessors returning canonical types (@c CanQualType) rather; /// than the more typical @c QualType, to propagate the notion of ""canonical""; /// through the system.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CanonicalType.h:32,adapt,adaptor,32,interpreter/llvm-project/clang/include/clang/AST/CanonicalType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CanonicalType.h,1,['adapt'],['adaptor']
Modifiability,"/// Replaces the entirety of a RewriteRule's match with \p Replacement. For; /// example, to replace a function call, one could write:; /// \code; /// makeRule(callExpr(callee(functionDecl(hasName(""foo"")))),; /// changeTo(cat(""bar()""))); /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:31,Rewrite,RewriteRule,31,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,1,['Rewrite'],['RewriteRule']
Modifiability,"/// Replaces the pointer to the plot variable with a pointer to a clone of the; /// plot variable that is owned by this RooPlot. The RooPlot references the; /// plotted variable by non-owning pointer by default since ROOT 6.28, which; /// resulted in a big speedup when plotting complicated pdfs that are expensive; /// to clone. However, going back to an owned clone is useful in rare cases.; /// For example in the RooUnitTest, where the registered plots need to live; /// longer than the scope of the unit test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx:37,variab,variable,37,roofit/roofitcore/src/RooPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx,3,['variab'],['variable']
Modifiability,/// Report any unreleased instance variables for the current instance being; /// dealloced.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:35,variab,variables,35,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['variab'],['variables']
Modifiability,"/// Represent a reference to a symbol from inside an expression.; ///; /// A symbol reference in an expression may be a use of a label, a use of an; /// assembler variable (defined constant), or constitute an implicit definition; /// of the symbol as external.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h:163,variab,variable,163,interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCExpr.h,1,['variab'],['variable']
Modifiability,/// Represent the declaration of a variable (in which case it is; /// an lvalue) a function (in which case it is a function designator) or; /// an enum constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:35,variab,variable,35,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Represents MatchData defined by the match stage and required by the apply; /// stage.; ///; /// This allows the plumbing of arbitrary data from C++ predicates between the; /// stages.; ///; /// When this class is initially created, it only has a pattern symbol and a; /// type. When all of the MatchDatas declarations of a given pattern have been; /// parsed, `AssignVariables` must be called to assign storage variable names to; /// each MatchDataInfo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/MatchDataInfo.h:415,variab,variable,415,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/MatchDataInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/MatchDataInfo.h,1,['variab'],['variable']
Modifiability,/// Represents a (Coefficient * Variable) entry after IR decomposition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:32,Variab,Variable,32,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['Variab'],['Variable']
Modifiability,"/// Represents a C array with a specified size that is not an; /// integer-constant-expression. For example, 'int s[x+foo()]'.; /// Since the size expression is an arbitrary expression, we store it as such.; ///; /// Note: VariableArrayType's aren't uniqued (since the expressions aren't) and; /// should not be: two lexically equivalent variable array types could mean; /// different things, for example, these variables do not have the same type; /// dynamically:; ///; /// void foo(int x) {; /// int Y[x];; /// ++x;; /// int Z[x];; /// }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:223,Variab,VariableArrayType,223,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,3,"['Variab', 'variab']","['VariableArrayType', 'variable', 'variables']"
Modifiability,"/// Represents a C++ base or member initializer.; ///; /// This is part of a constructor initializer that; /// initializes one non-static member variable or one base class. For; /// example, in the following, both 'A(a)' and 'f(3.14159)' are member; /// initializers:; ///; /// \code; /// class A { };; /// class B : public A {; /// float f;; /// public:; /// B(A& a) : A(a), f(3.14159) { }; /// };; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:145,variab,variable,145,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['variab'],['variable']
Modifiability,"/// Represents a C11 generic selection.; ///; /// A generic selection (C11 6.5.1.1) contains an unevaluated controlling; /// expression, followed by one or more generic associations. Each generic; /// association specifies a type name and an expression, or ""default"" and an; /// expression (in which case it is known as a default generic association).; /// The type and value of the generic selection are identical to those of its; /// result expression, which is defined as the expression in the generic; /// association with a type name that is compatible with the type of the; /// controlling expression, or the expression in the default generic association; /// if no types are compatible. For example:; ///; /// @code; /// _Generic(X, double: 1, float: 2, default: 3); /// @endcode; ///; /// The above expression evaluates to 1 if 1.0 is substituted for X, 2 if 1.0f; /// or 3 if ""hello"".; ///; /// As an extension, generic selections are allowed in C++, where the following; /// additional semantics apply:; ///; /// Any generic selection whose controlling expression is type-dependent or; /// which names a dependent type in its association list is result-dependent,; /// which means that the choice of result expression is dependent.; /// Result-dependent generic associations are both type- and value-dependent.; ///; /// We also allow an extended form in both C and C++ where the controlling; /// predicate for the selection expression is a type rather than an expression.; /// This type argument form does not perform any conversions for the; /// controlling type, which makes it suitable for use with qualified type; /// associations, which is not possible with the expression form.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1348,extend,extended,1348,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['extend'],['extended']
Modifiability,"/// Represents a call to a C++ inherited constructor.; ///; /// Example: \c class T : public S { using S::S; }; T(1);; ///; // Note, it is difficult to model the parameters. This is one of the reasons; // why we skip analysis of inheriting constructors as top-level functions.; // CXXInheritedCtorInitExpr doesn't take arguments and doesn't model parameter; // initialization because there is none: the arguments in the outer; // CXXConstructExpr directly initialize the parameters of the base class; // constructor, and no copies are made. (Making a copy of the parameter is; // incorrect, at least if it's done in an observable way.) The derived class; // constructor doesn't even exist in the formal model.; /// E.g., in:; ///; /// struct X { X *p = this; ~X() {} };; /// struct A { A(X x) : b(x.p == &x) {} bool b; };; /// struct B : A { using A::A; };; /// B b = X{};; ///; /// ... b.b is initialized to true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:31,inherit,inherited,31,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,2,['inherit'],"['inherited', 'inheriting']"
Modifiability,/// Represents a call to an inherited base class constructor from an; /// inheriting constructor. This call implicitly forwards the arguments from; /// the enclosing context (an inheriting constructor) to the specified inherited; /// base class constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:28,inherit,inherited,28,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,4,['inherit'],"['inherited', 'inheriting']"
Modifiability,"/// Represents a class type in Objective C.; ///; /// Every Objective C type is a combination of a base type, a set of; /// type arguments (optional, for parameterized classes) and a list of; /// protocols.; ///; /// Given the following declarations:; /// \code; /// \@class C<T>;; /// \@protocol P;; /// \endcode; ///; /// 'C' is an ObjCInterfaceType C. It is sugar for an ObjCObjectType; /// with base C and no protocols.; ///; /// 'C<P>' is an unspecialized ObjCObjectType with base C and protocol list [P].; /// 'C<C*>' is a specialized ObjCObjectType with type arguments 'C*' and no; /// protocol list.; /// 'C<C*><P>' is a specialized ObjCObjectType with base C, type arguments 'C*',; /// and protocol list [P].; ///; /// 'id' is a TypedefType which is sugar for an ObjCObjectPointerType whose; /// pointee is an ObjCObjectType with base BuiltinType::ObjCIdType; /// and no protocols.; ///; /// 'id<P>' is an ObjCObjectPointerType whose pointee is an ObjCObjectType; /// with base BuiltinType::ObjCIdType and protocol list [P]. Eventually; /// this should get its own sugar class to better represent the source.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:154,parameteriz,parameterized,154,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['parameteriz'],['parameterized']
Modifiability,/// Represents a gc.statepoint intrinsic call. This extends directly from; /// CallBase as the IntrinsicInst only supports calls and gc.statepoint is; /// invokable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h:52,extend,extends,52,interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Statepoint.h,1,['extend'],['extends']
Modifiability,"/// Represents a prvalue temporary that is written into memory so that; /// a reference can bind to it.; ///; /// Prvalue expressions are materialized when they need to have an address; /// in memory for a reference to bind to. This happens when binding a; /// reference to the result of a conversion, e.g.,; ///; /// \code; /// const int &r = 1.0;; /// \endcode; ///; /// Here, 1.0 is implicitly converted to an \c int. That resulting \c int is; /// then materialized via a \c MaterializeTemporaryExpr, and the reference; /// binds to the temporary. \c MaterializeTemporaryExprs are always glvalues; /// (either an lvalue or an xvalue, depending on the kind of reference binding; /// to it), maintaining the invariant that references always bind to glvalues.; ///; /// Reference binding and copy-elision can both extend the lifetime of a; /// temporary. When either happens, the expression will also track the; /// declaration which is responsible for the lifetime extension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:814,extend,extend,814,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,1,['extend'],['extend']
Modifiability,"/// Represents a range of memset'd bytes with the ByteVal value.; /// This allows us to analyze stores like:; /// store 0 -> P+1; /// store 0 -> P+0; /// store 0 -> P+3; /// store 0 -> P+2; /// which sometimes happens with stores to arrays of structs etc. When we see; /// the first store, we make a range [1, 2). The second store extends the range; /// to [0, 2). The third makes a new range [2, 3). The fourth store joins the; /// two ranges into [0, 3) which is memset'able.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp:331,extend,extends,331,interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp,1,['extend'],['extends']
Modifiability,/// Represents a rewrite for a global variable based upon a matching pattern.; /// Each global variable matching the provided pattern will be transformed as; /// described in the transformation pattern for the target. Applies only to; /// module level variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp:17,rewrite,rewrite,17,interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,4,"['rewrite', 'variab']","['rewrite', 'variable', 'variables']"
Modifiability,/// Represents a rewrite for a regular expression based pattern for functions.; /// A pattern for the function name is provided and a transformation for that; /// pattern to determine the target function name create the rewrite rule.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp:17,rewrite,rewrite,17,interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,2,['rewrite'],['rewrite']
Modifiability,/// Represents a rewrite for an explicitly named (function) symbol. Both the; /// source function name and target function name of the transformation are; /// explicitly spelt out.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp:17,rewrite,rewrite,17,interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,1,['rewrite'],['rewrite']
Modifiability,/// Represents a rewrite for an explicitly named (global variable) symbol. Both; /// the source variable name and target variable name are spelt out. This; /// applies only to module level variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp:17,rewrite,rewrite,17,interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,5,"['rewrite', 'variab']","['rewrite', 'variable', 'variables']"
Modifiability,/// Represents a rewrite for an explicitly named global alias. Both the source; /// and target name are explicitly spelt out.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp:17,rewrite,rewrite,17,interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// Represents a temporary object that is constructed for the sole purpose; /// of being immediately copied by an elidable copy/move constructor.; /// For example, T t = T(123); includes a temporary T(123) that is immediately; /// copied to variable t. In such cases the elidable copy can (but not; /// necessarily should) be omitted (""elided"") according to the rules of the; /// language; the constructor would then construct variable t directly.; /// This construction context contains information of the elidable constructor; /// and its respective construction context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:241,variab,variable,241,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,2,['variab'],['variable']
Modifiability,"/// Represents a temporary object that is not constructed for the purpose of; /// being immediately copied/moved by an elidable copy/move-constructor.; /// This includes temporary objects ""in the middle of nowhere"" like T(123) and; /// lifetime-extended temporaries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:245,extend,extended,245,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,1,['extend'],['extended']
Modifiability,/// Represents a variable declaration or definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:17,variab,variable,17,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Represents a variable template specialization, which refers to; /// a variable template with a given set of template arguments.; ///; /// Variable template specializations represent both explicit; /// specializations of variable templates, as in the example below, and; /// implicit instantiations of variable templates.; ///; /// \code; /// template<typename T> constexpr T pi = T(3.1415926535897932385);; ///; /// template<>; /// constexpr float pi<float>; // variable template specialization pi<float>; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:17,variab,variable,17,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,6,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// Represents a variable-width value in a bitcode record.; ///; /// The \p Width parameter should include the continuation bit.; ///; /// Note that the LLVM bitcode format only supports unsigned values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeConvenience.h:17,variab,variable-width,17,interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeConvenience.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/BitcodeConvenience.h,1,['variab'],['variable-width']
Modifiability,"/// Represents an ObjC class declaration.; ///; /// For example:; ///; /// \code; /// // MostPrimitive declares no super class (not particularly useful).; /// \@interface MostPrimitive; /// // no instance variables or methods.; /// \@end; ///; /// // NSResponder inherits from NSObject & implements NSCoding (a protocol).; /// \@interface NSResponder : NSObject \<NSCoding>; /// { // instance variables are represented by ObjCIvarDecl.; /// id nextResponder; // nextResponder instance variable.; /// }; /// - (NSResponder *)nextResponder; // return a pointer to NSResponder.; /// - (void)mouseMoved:(NSEvent *)theEvent; // return void, takes a pointer; /// \@end // to an NSEvent.; /// \endcode; ///; /// Unlike C/C++, forward class declarations are accomplished with \@class.; /// Unlike C/C++, \@class allows for a list of classes to be forward declared.; /// Unlike C++, ObjC is a single-rooted class model. In Cocoa, classes; /// typically inherit from NSObject (an exception is NSProxy).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:205,variab,variables,205,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,5,"['inherit', 'variab']","['inherit', 'inherits', 'variable', 'variables']"
Modifiability,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:137,variab,variables,137,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['variab'],['variables']
Modifiability,"/// Represents an array type in C++ whose size is a value-dependent expression.; ///; /// For example:; /// \code; /// template<typename T, int Size>; /// class array {; /// T data[Size];; /// };; /// \endcode; ///; /// For these types, we won't actually know what the array bound is; /// until template instantiation occurs, at which point this will; /// become either a ConstantArrayType or a VariableArrayType.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:395,Variab,VariableArrayType,395,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['Variab'],['VariableArrayType']
Modifiability,"/// Represents an extended address space qualifier where the input address space; /// value is dependent. Non-dependent address spaces are not represented with a; /// special Type subclass; they are stored on an ExtQuals node as part of a QualType.; ///; /// For example:; /// \code; /// template<typename T, int AddrSpace>; /// class AddressSpace {; /// typedef T __attribute__((address_space(AddrSpace))) type;; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:18,extend,extended,18,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['extend'],['extended']
Modifiability,"/// Represents an extended vector type where either the type or size is; /// dependent.; ///; /// For example:; /// \code; /// template<typename T, int Size>; /// class vector {; /// typedef T __attribute__((ext_vector_type(Size))) type;; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:18,extend,extended,18,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['extend'],['extended']
Modifiability,"/// Represents an induction variable check:; /// icmp Pred, <induction variable>, <loop invariant limit>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp:28,variab,variable,28,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPredication.cpp,2,['variab'],['variable']
Modifiability,/// Represents any constructor invocation. This includes regular constructors; /// and inherited constructors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:87,inherit,inherited,87,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['inherit'],['inherited']
Modifiability,"/// Represents any generic load, including sign/zero extending variants.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:53,extend,extending,53,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,1,['extend'],['extending']
Modifiability,"/// Represents construction into a simple local variable, eg. T var(123);.; /// If a variable has an initializer, eg. T var = makeT();, then the final; /// elidable copy-constructor from makeT() into var would also be a simple; /// variable constructor handled by this class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:48,variab,variable,48,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,3,['variab'],['variable']
Modifiability,"/// Represents construction into a simple variable with an initializer syntax,; /// with a single constructor, eg. T var = makeT();. Such construction context; /// may only appear in C++17 because previously it was split into a temporary; /// object constructor and an elidable simple variable copy-constructor and; /// we were producing separate construction contexts for these constructors.; /// In C++17 we have a single construction context that combines both.; /// Note that if the object has trivial destructor, then this code is; /// indistinguishable from a simple variable constructor on the AST level;; /// in this case we provide a simple variable construction context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:42,variab,variable,42,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,4,['variab'],['variable']
Modifiability,"/// Represents return slots for NRVO candidates in the current scope.; /// If a variable is present in this set, it means that a return slot is; /// available for this variable in the current scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:80,variab,variable,80,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h,2,['variab'],['variable']
Modifiability,/// Represents the location at which a variable is stored.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h:39,variab,variable,39,interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DebugHandlerBase.h,1,['variab'],['variable']
Modifiability,/// Represents the point where a loop ends.; /// This element is only produced when building the CFG for the static; /// analyzer and hidden behind the 'cfg-loopexit' analyzer config flag.; ///; /// Note: a loop exit element can be reached even when the loop body was never; /// entered.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h:176,config,config,176,interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CFG.h,1,['config'],['config']
Modifiability,/// Required to resolve existing problems in the runtime. Emits threadprivate; /// variables to store the size of the VLAs/array sections for; /// initializer/combiner/finalizer functions + emits threadprivate variable to; /// store the pointer to the original reduction item for the custom; /// initializer defined by declare reduction construct.; /// \param RCG Allows to reuse an existing data for the reductions.; /// \param N Reduction item for which fixups must be emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:83,variab,variables,83,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// Required to resolve existing problems in the runtime. Emits threadprivate; /// variables to store the size of the VLAs/array sections for; /// initializer/combiner/finalizer functions.; /// \param RCG Allows to reuse an existing data for the reductions.; /// \param N Reduction item for which fixups must be emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:83,variab,variables,83,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variables']
Modifiability,/// Reset state that only changes when we switch functions.; ///; /// This currently includes:; ///; /// 1. FailureMBB since we reuse the failure code path for all stack; /// protector checks created in an individual function.; ///; /// 2.The guard variable since the guard variable we are checking against is; /// always the same.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h:249,variab,variable,249,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenCommonISel.h,2,['variab'],['variable']
Modifiability,"/// Reset the state of the diagnostic object to its initial configuration.; /// \param[in] soft - if true, doesn't reset the diagnostic mappings and state",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:60,config,configuration,60,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['config'],['configuration']
Modifiability,"/// Resize \p FD to \p Size before mapping \a mapped_file_region::readwrite. On; /// non-Windows, this calls \a resize_file(). On Windows, this is a no-op,; /// since the subsequent mapping (via \c CreateFileMapping) automatically; /// extends the file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h:236,extend,extends,236,interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FileSystem.h,1,['extend'],['extends']
Modifiability,/// Resolve all variables from a record except for unset variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:16,variab,variables,16,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,2,['variab'],['variables']
Modifiability,"/// Restore SSA form after cloning blocks.; ///; /// Each cloned block creates new defs for a variable, and the uses need to be; /// updated to reflect this. The uses may be replaced with a cloned value, or; /// some derived phi instruction. Note that all uses of a value defined in the; /// same block were already remapped when cloning the block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp:94,variab,variable,94,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DFAJumpThreading.cpp,1,['variab'],['variable']
Modifiability,"/// Restore all mapped variables w/o clean up. This is usefully when we want; /// to reference the original variables but don't want the clean up because; /// that could emit lifetime end too early, causing backend issue #56913.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:23,variab,variables,23,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,2,['variab'],['variables']
Modifiability,/// Restore the z/OS enhanced ASCII auto-conversion for the std handle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/AutoConvert.h:21,enhance,enhanced,21,interpreter/llvm-project/llvm/include/llvm/Support/AutoConvert.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/AutoConvert.h,1,['enhance'],['enhanced']
Modifiability,/// Restores original addresses of the variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:39,variab,variables,39,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variables']
Modifiability,"/// Retrieve (or create if non-existent) the address of a declare; /// target variable, used in conjunction with registerTargetGlobalVariable; /// to create declare target global variables.; ///; /// \param CaptureClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (link,; /// to, enter).; /// \param DeviceClause - enumerator corresponding to the OpenMP capture; /// clause used in conjunction with the variable being registered (nohost,; /// host, any); /// \param IsDeclaration - boolean stating if the variable being registered; /// is a declaration-only and not a definition; /// \param IsExternallyVisible - boolean stating if the variable is externally; /// visible; /// \param EntryInfo - Unique entry information for the value generated; /// using getTargetEntryUniqueInfo, used to name generated pointer references; /// to the declare target variable; /// \param MangledName - the mangled name of the variable being registered; /// \param GeneratedRefs - references generated by invocations of; /// registerTargetGlobalVariable invoked from getAddrOfDeclareTargetVar,; /// these are required by Clang for book keeping.; /// \param OpenMPSIMD - if OpenMP SIMD mode is currently enabled; /// \param TargetTriple - The OpenMP device target triple we are compiling; /// for; /// \param LlvmPtrTy - The type of the variable we are generating or; /// retrieving an address for; /// \param GlobalInitializer - a lambda function which creates a constant; /// used for initializing a pointer reference to the variable in certain; /// cases. If a nullptr is passed, it will default to utilising the original; /// variable to initialize the pointer reference.; /// \param VariableLinkage - a lambda function which returns the variables; /// linkage type, if unspecified and a nullptr is given, it will instead; /// utilise the linkage stored on the existing global variable in the; /// LLVMModule.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:78,variab,variable,78,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,14,"['Variab', 'variab']","['VariableLinkage', 'variable', 'variables']"
Modifiability,"/// Retrieve binning configuration with given name or default binning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:21,config,configuration,21,roofit/roofitcore/inc/RooAbsRealLValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h,1,['config'],['configuration']
Modifiability,"/// Retrieve the capture of the given variable, if it has been; /// captured already.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:38,variab,variable,38,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['variab'],['variable']
Modifiability,"/// Retrieve the config object which can be used to set flags for things like offsetting the likelihood; /// or using the error wall for the minimiser.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h:17,config,config,17,roofit/roostats/inc/RooStats/RooStatsUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h,1,['config'],['config']
Modifiability,"/// Retrieve the convolution variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsAnaConvPdf.h:29,variab,variable,29,roofit/roofitcore/inc/RooAbsAnaConvPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsAnaConvPdf.h,2,['variab'],['variable']
Modifiability,/// Retrieve the declaration of the local variable being; /// captured.; ///; /// This operation is only valid if this capture is a variable capture; /// (other than a capture of \c this).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:42,variab,variable,42,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,2,['variab'],['variable']
Modifiability,/// Retrieve the declaration of the variable being captured.; ///; /// This operation is only valid if this capture captures a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:36,variab,variable,36,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,2,['variab'],['variable']
Modifiability,/// Retrieve the location at which this variable was captured.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:40,variab,variable,40,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['variab'],['variable']
Modifiability,/// Retrieve the mangling number of a static local variable within; /// this context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h:51,variab,variable,51,interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h,2,['variab'],['variable']
Modifiability,/// Retrieve the parameter containing captured variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:47,variab,variables,47,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variables']
Modifiability,"/// Retrieve the previous declaration of this variable template, or; /// nullptr if no such declaration exists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:46,variab,variable,46,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['variab'],['variable']
Modifiability,"/// Retrieve the proxy-adaptor type.; ///; /// This arrow operator is used when CanProxyAdaptor has been specialized; /// for the given type T. In that case, we reference members of the; /// CanProxyAdaptor specialization. Otherwise, this operator will be hidden; /// by the arrow operator in the primary CanProxyAdaptor template.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CanonicalType.h:23,adapt,adaptor,23,interpreter/llvm-project/clang/include/clang/AST/CanonicalType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CanonicalType.h,1,['adapt'],['adaptor']
Modifiability,/// Retrieve the record declaration for captured variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:49,variab,variables,49,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variables']
Modifiability,"/// Retrieve the serialized size of the given VariableInfo, for use in; /// on-disk hash tables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp:46,Variab,VariableInfo,46,interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesWriter.cpp,1,['Variab'],['VariableInfo']
Modifiability,/// Retrieve the set of specializations of this variable template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:48,variab,variable,48,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['variab'],['variable']
Modifiability,"/// Retrieve the set of template arguments that should be used; /// to instantiate the initializer of the variable template or variable; /// template partial specialization from which this variable template; /// specialization was instantiated.; ///; /// \returns For a variable template specialization instantiated from the; /// primary template, this function will return the same template arguments; /// as getTemplateArgs(). For a variable template specialization instantiated; /// from a variable template partial specialization, this function will the; /// return deduced template arguments for the variable template partial; /// specialization itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:106,variab,variable,106,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,7,['variab'],['variable']
Modifiability,/// Retrieve the source location at which the variable or 'this' was; /// first used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:46,variab,variable,46,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,"/// Retrieve the source location of the capture.; ///; /// For an explicit capture, this returns the location of the; /// explicit capture in the source. For an implicit capture, this; /// returns the location at which the variable or \c this was first; /// used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:223,variab,variable,223,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,1,['variab'],['variable']
Modifiability,/// Retrieve the template arguments of the variable template; /// specialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:43,variab,variable,43,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['variab'],['variable']
Modifiability,/// Retrieve the total of all weights from MD_prof data.; ///; /// \param ProfileData The profile data to extract the total weight from; /// \param [out] TotalWeights input variable to fill with total weights; /// \returns True on success with profile total weights filled in. False if no; /// metadata was found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h:173,variab,variable,173,interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h,1,['variab'],['variable']
Modifiability,/// Retrieve the total of all weights from an instruction.; ///; /// \param I The instruction to extract the total weight from; /// \param [out] TotalWeights input variable to fill with total weights; /// \returns True on success with profile total weights filled in. False if no; /// metadata was found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h:164,variab,variable,164,interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ProfDataUtils.h,1,['variab'],['variable']
Modifiability,/// Retrieve the type of the temporary object whose lifetime was; /// extended by a local reference with the given initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:70,extend,extended,70,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['extend'],['extended']
Modifiability,/// Retrieve the type of this instance variable when viewed as a member of a; /// specific object type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:39,variab,variable,39,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['variab'],['variable']
Modifiability,"/// Retrieve the type that this expression would prefer to have, e.g.,; /// if the expression is a variable initializer or a function argument, the; /// type of the corresponding variable or function parameter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:99,variab,variable,99,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,2,['variab'],['variable']
Modifiability,"/// Retrieve the variable declaration from which this variable could; /// be instantiated, if it is an instantiation (rather than a non-template).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:17,variab,variable,17,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,"/// Retrieve the variable declared in this ""for"" statement, if any.; ///; /// In the following example, ""y"" is the condition variable.; /// \code; /// for (int x = random(); int y = mangle(x); ++x) {; /// // ...; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:17,variab,variable,17,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,2,['variab'],['variable']
Modifiability,"/// Retrieve the variable declared in this ""if"" statement, if any.; ///; /// In the following example, ""x"" is the condition variable.; /// \code; /// if (int x = foo()) {; /// printf(""x is %d"", x);; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:17,variab,variable,17,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,2,['variab'],['variable']
Modifiability,"/// Retrieve the variable declared in this ""switch"" statement, if any.; ///; /// In the following example, ""x"" is the condition variable.; /// \code; /// switch (int x = foo()) {; /// case 0: break;; /// // ...; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:17,variab,variable,17,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,2,['variab'],['variable']
Modifiability,"/// Retrieve the variable declared in this ""while"" statement, if any.; ///; /// In the following example, ""x"" is the condition variable.; /// \code; /// while (int x = random()) {; /// // ...; /// }; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:17,variab,variable,17,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,2,['variab'],['variable']
Modifiability,/// Retrieve the variable template or variable template partial; /// specialization which was specialized by this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:17,variab,variable,17,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,['variab'],['variable']
Modifiability,/// Retrieve the variable that might be used for the named return; /// value optimization.; ///; /// The optimization itself can only be performed if the variable is; /// also marked as an NRVO object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:17,variab,variable,17,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,2,['variab'],['variable']
Modifiability,"/// Retrieve the variable, parameter, or field being; /// initialized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:17,variab,variable,17,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,1,['variab'],['variable']
Modifiability,"/// Retrieves the ""raw"" cursor extent, which is then extended to include; /// the decl-specifier-seq for declarations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:53,extend,extended,53,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,1,['extend'],['extended']
Modifiability,/// Retrieves the list of checkers generated from Checkers.td. This doesn't; /// contain statically linked but non-generated checkers and plugin checkers!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:138,plugin,plugin,138,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,1,['plugin'],['plugin']
Modifiability,/// Retrieves the list of packages generated from Checkers.td. This doesn't; /// contain statically linked but non-generated packages and plugin packages!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:138,plugin,plugin,138,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,1,['plugin'],['plugin']
Modifiability,"/// Retrieves the variable template that is described by this; /// variable declaration.; ///; /// Every variable template is represented as a VarTemplateDecl and a; /// VarDecl. The former contains template properties (such as; /// the template parameter lists) while the latter contains the; /// actual description of the template's; /// contents. VarTemplateDecl::getTemplatedDecl() retrieves the; /// VarDecl that from a VarTemplateDecl, while; /// getDescribedVarTemplate() retrieves the VarTemplateDecl from; /// a VarDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:18,variab,variable,18,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,3,['variab'],['variable']
Modifiability,"/// Return (and \p Op, \p Mask) for compare instructions or; /// (vselect \p Mask, \p Op, \p PreservedSrc) for others along with the; /// necessary casting or extending for \p Mask when lowering masking intrinsics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:159,extend,extending,159,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,/// Return Mask with the necessary casting or extending; /// for \p Mask according to \p MaskVT when lowering masking intrinsics,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:46,extend,extending,46,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,/// Return True if instruction \p I is an optimizable truncate whose operand; /// is an induction variable. Such a truncate will be removed by adding a new; /// induction variable with the destination type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:98,variab,variable,98,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,2,['variab'],['variable']
Modifiability,"/// Return a ConstantInt with the specified integer value for the specified; /// type. If the type is wider than 64 bits, the value will be zero-extended; /// to fit the type, unless IsSigned is true, in which case the value will; /// be interpreted as a 64-bit signed integer and sign-extended to fit; /// the type.; /// Get a ConstantInt for a specific value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:145,extend,extended,145,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,2,['extend'],['extended']
Modifiability,"/// Return a SCEV corresponding to a conversion of the input value to the; /// specified type. If the type must be extended, it is extended with; /// unspecified bits. The conversion must not be narrowing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:115,extend,extended,115,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,2,['extend'],['extended']
Modifiability,"/// Return a SCEV corresponding to a conversion of the input value to the; /// specified type. If the type must be extended, it is sign extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:115,extend,extended,115,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,2,['extend'],['extended']
Modifiability,"/// Return a SCEV corresponding to a conversion of the input value to the; /// specified type. If the type must be extended, it is sign extended. The; /// conversion must not be narrowing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:115,extend,extended,115,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,2,['extend'],['extended']
Modifiability,"/// Return a SCEV corresponding to a conversion of the input value to the; /// specified type. If the type must be extended, it is zero extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:115,extend,extended,115,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,2,['extend'],['extended']
Modifiability,"/// Return a SCEV corresponding to a conversion of the input value to the; /// specified type. If the type must be extended, it is zero extended. The; /// conversion must not be narrowing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:115,extend,extended,115,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,2,['extend'],['extended']
Modifiability,"/// Return a SCEV expression for the specified value at the specified scope; /// in the program. The L value specifies a loop nest to evaluate the; /// expression at, where null is the top-level or a specified loop is; /// immediately inside of the loop.; ///; /// This method can be used to compute the exit value for a variable defined; /// in a loop by querying what the value will hold in the parent loop.; ///; /// In the case that a relevant loop exit value cannot be computed, the; /// original value V is returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:321,variab,variable,321,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['variab'],['variable']
Modifiability,/// Return a VPRecipeOrValueTy with VPRecipeBase * being set. This can be used to force the use as VPRecipeBase* for recipe sub-types that also inherit from VPValue.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h:144,inherit,inherit,144,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPRecipeBuilder.h,1,['inherit'],['inherit']
Modifiability,/// Return a VT for an integer vector type with the size of the; /// elements doubled. The typed returned may be an extended type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:116,extend,extended,116,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,1,['extend'],['extended']
Modifiability,/// Return a global variable that represents one of the collection of global; /// variables created for an anonmyous union.; ///; /// Recursively collect all of the member fields of a global; /// anonymous decl and create static variables for them. The first; /// time this is called it needs to be on a union and then from; /// there we can have additional unnamed fields.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h:20,variab,variable,20,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// Return a list of registers that are potentially read by any; /// instance of this machine instruction. For example, on X86, the ""adc""; /// instruction adds two register operands and adds the carry bit in from the; /// flags register. In this case, the instruction is marked as implicitly; /// reading the flags. Likewise, the variable shift instruction on X86 is; /// marked as implicitly reading the 'CL' register, which it always does.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:330,variab,variable,330,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,1,['variab'],['variable']
Modifiability,"/// Return a nested name specifier, advancing Idx.; // NestedNameSpecifier *readNestedNameSpecifier(); (inherited)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h:104,inherit,inherited,104,interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h,1,['inherit'],['inherited']
Modifiability,"/// Return a new range in the specified integer type, which must; /// be strictly larger than the current type. The returned range will; /// correspond to the possible range of values if the source range had been; /// sign extended to BitWidth.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:223,extend,extended,223,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['extend'],['extended']
Modifiability,"/// Return a new range in the specified integer type, which must; /// be strictly larger than the current type. The returned range will; /// correspond to the possible range of values if the source range had been; /// zero extended to BitWidth.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h:223,extend,extended,223,interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ConstantRange.h,1,['extend'],['extended']
Modifiability,/// Return a non-unique reference to the type for a variable array of; /// the specified element type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:52,variab,variable,52,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['variab'],['variable']
Modifiability,/// Return a pass that config the tile registers after fast reg allocation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86.h:23,config,config,23,interpreter/llvm-project/llvm/lib/Target/X86/X86.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86.h,1,['config'],['config']
Modifiability,/// Return a pass that config the tile registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86.h:23,config,config,23,interpreter/llvm-project/llvm/lib/Target/X86/X86.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86.h,1,['config'],['config']
Modifiability,/// Return a pass that insert pseudo tile config instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86.h:42,config,config,42,interpreter/llvm-project/llvm/lib/Target/X86/X86.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86.h,1,['config'],['config']
Modifiability,/// Return a reference to the configured CUDA runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:30,config,configured,30,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['config'],['configured']
Modifiability,/// Return a reference to the configured HLSL runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:30,config,configured,30,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['config'],['configured']
Modifiability,/// Return a reference to the configured Objective-C runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:30,config,configured,30,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['config'],['configured']
Modifiability,/// Return a reference to the configured OpenCL runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:30,config,configured,30,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['config'],['configured']
Modifiability,/// Return a reference to the configured OpenMP runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:30,config,configured,30,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['config'],['configured']
Modifiability,/// Return a set of properties that are unnecessary when serializing; /// this AST node. Generally this is used for inherited properties; /// that are derived for this subclass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.h:116,inherit,inherited,116,interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ASTTableGen.h,1,['inherit'],['inherited']
Modifiability,"/// Return a single matcher, if there is no ambiguity.; ///; /// \returns the matcher, if there is only one matcher. An empty Optional, if; /// the underlying matcher is a polymorphic matcher with more than one; /// representation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:172,polymorphi,polymorphic,172,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,1,['polymorphi'],['polymorphic']
Modifiability,"/// Return a string containing the type of the given branch. Works both with real TTree branches and with temporary; /// column created by Define. Throws if type name deduction fails.; /// Note that for fixed- or variable-sized c-style arrays the returned type name will be RVec<T>.; /// vector2RVec specifies whether typename 'std::vector<T>' should be converted to 'RVec<T>' or returned as is",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFUtils.cxx:213,variab,variable-sized,213,tree/dataframe/src/RDFUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFUtils.cxx,1,['variab'],['variable-sized']
Modifiability,"/// Return a table that associates command line option specifiers with the; /// frontend action. Note: The pair {frontend::PluginAction, OPT_plugin} is; /// intentionally missing, as this case is handled separately from other; /// frontend options.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:123,Plugin,PluginAction,123,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['Plugin'],['PluginAction']
Modifiability,/// Return a type with extended qualifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:23,extend,extended,23,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['extend'],['extended']
Modifiability,"/// Return an ID for the concrete type of this object.; ///; /// This is used to implement the classof checks. This should not be used; /// for any other purpose, as the values may change as LLVM evolves. Also,; /// note that for instructions, the Instruction's opcode is added to; /// InstructionVal. So this means three things:; /// # there is no value with code InstructionVal (no opcode==0).; /// # there are more possible values for the value type than in ValueTy enum.; /// # the InstructionVal enumerator must be the highest valued enumerator in; /// the ValueTy enum.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:196,evolve,evolves,196,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h,1,['evolve'],['evolves']
Modifiability,/// Return an MCExpr to use for a reference to the specified global variable; /// from exception handling information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:68,variab,variable,68,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,1,['variab'],['variable']
Modifiability,/// Return an MCExpr to use for a reference to the specified type info global; /// variable from exception handling information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h:83,variab,variable,83,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h,1,['variab'],['variable']
Modifiability,"/// Return copies of colsWithoutAliases and colsWithAliases with size branches for variable-sized array branches added; /// in the right positions (i.e. before the array branches that need them).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx:83,variab,variable-sized,83,tree/dataframe/src/RDFInterfaceUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx,1,['variab'],['variable-sized']
Modifiability,"/// Return expected number of events for extended likelihood calculation, which; /// is the sum of all coefficients.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h:41,extend,extended,41,roofit/roofitcore/inc/RooAddModel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h,3,['extend'],['extended']
Modifiability,"/// Return expected number of events to be used in calculation of extended; /// likelihood.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:66,extend,extended,66,roofit/roofitcore/inc/RooAbsPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h,1,['extend'],['extended']
Modifiability,"/// Return expected number of events to be used in calculation of extended; /// likelihood. This function should not be overridden, as it just redirects; /// to the actual virtual function but takes a RooArgSet reference instead of; /// pointer. \see expectedEvents(const RooArgSet*) const",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:66,extend,extended,66,roofit/roofitcore/inc/RooAbsPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h,1,['extend'],['extended']
Modifiability,"/// Return extended mode capabilities",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h:11,extend,extended,11,roofit/roofitcore/inc/RooAddModel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h,1,['extend'],['extended']
Modifiability,/// Return false if the instruction should not be hoisted by MachineLICM.; ///; /// MachineLICM determines on its own whether the instruction is safe to; /// hoist; this gives the target a hook to extend this assessment and prevent; /// an instruction being hoisted from a given loop for target specific; /// reasons.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:197,extend,extend,197,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['extend'],['extend']
Modifiability,/// Return if \p N is a True value when extended to \p VT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:40,extend,extended,40,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['extend'],['extended']
Modifiability,"/// Return information about target-specific builtins for; /// the current primary target, and info about which builtins are non-portable; /// across the current set of primary and secondary targets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:129,portab,portable,129,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['portab'],['portable']
Modifiability,"/// Return known bits for an ""any"" extension of the value we're tracking,; /// where we don't know anything about the extended bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h:118,extend,extended,118,interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/KnownBits.h,1,['extend'],['extended']
Modifiability,"/// Return name of functions or global variables from the name's md5 hash; /// value. If not found, return an empty string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:39,variab,variables,39,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variables']
Modifiability,"/// Return pointer to RooAbsReal parameterized lower bound, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsBinning.h:33,parameteriz,parameterized,33,roofit/roofitcore/inc/RooAbsBinning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsBinning.h,1,['parameteriz'],['parameterized']
Modifiability,"/// Return pointer to RooAbsReal parameterized upper bound, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsBinning.h:33,parameteriz,parameterized,33,roofit/roofitcore/inc/RooAbsBinning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsBinning.h,1,['parameteriz'],['parameterized']
Modifiability,"/// Return the AST address space of constant literal, which is used to emit; /// the constant literal as global variable in LLVM IR.; /// Note: This is not necessarily the address space of the constant literal; /// in AST. For address space agnostic language, e.g. C++, constant literal; /// in AST is always in default address space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:112,variab,variable,112,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variable']
Modifiability,"/// Return the AST address space of the underlying global variable for D, as; /// determined by its declaration. Normally this is the same as the address; /// space of D's type, but in CUDA, address spaces are associated with; /// declarations, not types. If D is nullptr, return the default address; /// space for global variable.; ///; /// For languages without explicit address spaces, if D has default address; /// space, target-specific global or constant address space may be returned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:58,variab,variable,58,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,2,['variab'],['variable']
Modifiability,/// Return the DILocalVariable of the variable represented by \p ID.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h:38,variab,variable,38,interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AssignmentTrackingAnalysis.h,1,['variab'],['variable']
Modifiability,"/// Return the Loc ID of an entry value backup location, if it exists for the; /// variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:83,variab,variable,83,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,/// Return the LoopBounds object if; /// - the given \p IndVar is an induction variable; /// - the initial value of the induction variable can be found; /// - the step instruction of the induction variable can be found; /// - the final value of the induction variable can be found; ///; /// Else std::nullopt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:79,variab,variable,79,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,4,['variab'],['variable']
Modifiability,/// Return the alignment in bits that should be given to a; /// global variable with type \p T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:71,variab,variable,71,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['variab'],['variable']
Modifiability,/// Return the alignment in characters that should be given to a; /// global variable with type \p T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:77,variab,variable,77,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['variab'],['variable']
Modifiability,/// Return the alignment that is the largest alignment ever used for any; /// scalar/SIMD data type on the target machine you are compiling for; /// (including types with an extended alignment requirement).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:174,extend,extended,174,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['extend'],['extended']
Modifiability,"/// Return the already-evaluated value of this variable's; /// initializer, or NULL if the value is not yet known. Returns pointer; /// to untyped APValue if the value could not be evaluated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:47,variab,variable,47,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Return the clang declaration for this variable, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:42,variab,variable,42,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['variab'],['variable']
Modifiability,"/// Return the clang declaration of the variable for this Phi node, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:40,variab,variable,40,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['variab'],['variable']
Modifiability,/// Return the constant as a 64-bit integer value after it has been sign; /// extended as appropriate for the type of this constant. Note that; /// this method can assert if the value does not fit in 64 bits.; /// Return the sign extended value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:78,extend,extended,78,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,2,['extend'],['extended']
Modifiability,/// Return the constant as a 64-bit unsigned integer value after it; /// has been zero extended as appropriate for the type of this constant. Note; /// that this method can assert if the value does not fit in 64 bits.; /// Return the zero extended value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h:87,extend,extended,87,interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constants.h,2,['extend'],['extended']
Modifiability,"/// Return the convolution variable of the resolution model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooResolutionModel.h:27,variab,variable,27,roofit/roofitcore/inc/RooResolutionModel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooResolutionModel.h,1,['variab'],['variable']
Modifiability,/// Return the cost of full scalarization of gather / scatter operation.; ///; /// Opcode - Load or Store instruction.; /// SrcVTy - The type of the data vector that should be gathered or scattered.; /// VariableMask - The mask is non-constant at compile time.; /// Alignment - Alignment for one element.; /// AddressSpace - pointer[s] address space.; ///; /// FIXME: Add TargetCostKind support.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:204,Variab,VariableMask,204,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['Variab'],['VariableMask']
Modifiability,"/// Return the current thread id, as used in various OS system calls.; /// Note that not all platforms guarantee that the value returned will be; /// unique across the entire system, so portable code should not assume; /// this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:186,portab,portable,186,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,1,['portab'],['portable']
Modifiability,/// Return the debug variable referenced by; /// this DBG_VALUE instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:21,variab,variable,21,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['variab'],['variable']
Modifiability,"/// Return the declaration shadowed by the given variable \p D, or null; /// if it doesn't shadow any declaration or shadowing warnings are disabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variable']
Modifiability,"/// Return the definition of the variable.; /// For let-vars, this is the setting expression.; /// For function and self parameters, it is the type of the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,2,['variab'],['variable']
Modifiability,/// Return the expression required to extend the Op as a pointer value; /// assuming it was the smaller SrcTy value. This may be either a zero extend; /// or a sign extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:38,extend,extend,38,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,3,['extend'],['extend']
Modifiability,/// Return the expression required to zero extend the Op; /// value assuming it was the smaller SrcTy value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:43,extend,extend,43,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,1,['extend'],['extend']
Modifiability,/// Return the final value of the loop induction variable if found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopInfo.cpp:49,variab,variable,49,interpreter/llvm-project/llvm/lib/Analysis/LoopInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopInfo.cpp,1,['variab'],['variable']
Modifiability,"/// Return the fixed length of this leaf.; /// If the leaf stores a fixed-length array, this is the size of the array.; /// If the leaf stores a non-array or a variable-sized array, this method returns 1.; /// If the leaf stores an array with 2 or more dimensions, this method returns the total number of elements in the; /// dimensions with static length: for example for float[3][2][] it would return 6.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TLeaf.h:160,variab,variable-sized,160,tree/tree/inc/TLeaf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/inc/TLeaf.h,1,['variab'],['variable-sized']
Modifiability,"/// Return the global variable in the module with the specified name, of; /// arbitrary type. This method returns null if a global with the specified; /// name is not found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:22,variab,variable,22,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['variab'],['variable']
Modifiability,/// Return the induction variable increment's IV operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:25,variab,variable,25,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,1,['variab'],['variable']
Modifiability,"/// Return the initializer for the given variable name (should normally be a; /// StringInit), or nullptr if the name could not be resolved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:41,variab,variable,41,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['variab'],['variable']
Modifiability,"/// Return the kind of variable (let, function param, or self)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:23,variab,variable,23,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['variab'],['variable']
Modifiability,"/// Return the llvm::Constant for the address of the given global variable.; /// If Ty is non-null and if the global doesn't exist, then it will be created; /// with the specified type instead of whatever the normal requested type; /// would be. If IsForDefinition is true, it is guaranteed that an actual; /// global with type Ty will be returned, not conversion of a variable with; /// the same mangled name but some other type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:66,variab,variable,66,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,2,['variab'],['variable']
Modifiability,"/// Return the location of the capture if the given lambda captures the given; /// variable \p VD, or an invalid source location otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:83,variab,variable,83,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,/// Return the loop counter variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:28,variab,variable,28,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"/// Return the loop induction variable if found, else return nullptr.; /// An instruction is considered as the loop induction variable if; /// - it is an induction variable of the loop; and; /// - it is used to determine the condition of the branch in the loop latch; ///; /// Note: the induction variable doesn't need to be canonical, i.e. starts at; /// zero and increments by one each time through the loop (but it can be).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:30,variab,variable,30,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,4,['variab'],['variable']
Modifiability,/// Return the maximum alignment (in bits) of a TLS variable; ///; /// Gets the maximum alignment (in bits) of a TLS variable on this target.; /// Returns zero if there is no such constraint.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:52,variab,variable,52,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,2,['variab'],['variable']
Modifiability,/// Return the maximum value of an extendable operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.cpp:35,extend,extendable,35,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.cpp,1,['extend'],['extendable']
Modifiability,/// Return the minimum value of an extendable operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.cpp:35,extend,extendable,35,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.cpp,1,['extend'],['extendable']
Modifiability,/// Return the name of a covarage mapping variable (internal linkage); /// for each instrumented source module. Such variables are allocated; /// in the __llvm_covmap section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:42,variab,variable,42,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// Return the name of the compiler generated function that references the; /// runtime hook variable. The function is a weak global.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:93,variab,variable,93,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variable']
Modifiability,/// Return the name of the global variable used to store a function; /// name in PGO instrumentation. \c FuncName is the IRPGO function name; /// (returned by \c getIRPGOFuncName) for LLVM IR instrumentation and PGO; /// function name (returned by \c getPGOFuncName) for front-end instrumentation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:34,variab,variable,34,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variable']
Modifiability,/// Return the name of the hook variable defined in profile runtime library.; /// A reference to the variable causes the linker to link in the runtime; /// initialization module (which defines the hook variable).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:32,variab,variable,32,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,3,['variab'],['variable']
Modifiability,"/// Return the name of the internal variable recording the array; /// of PGO name vars referenced by the coverage mapping. The owning; /// functions of those names are not emitted by FE (e.g, unused inline; /// functions.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:36,variab,variable,36,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variable']
Modifiability,/// Return the name of the variable holding the strings (possibly compressed); /// of all function's PGO names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:27,variab,variable,27,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variable']
Modifiability,"/// Return the name of the variable, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['variab'],['variable']
Modifiability,/// Return the name of value profile node array variables:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:48,variab,variables,48,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variables']
Modifiability,/// Return the name prefix of profile bitmap variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:45,variab,variables,45,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variables']
Modifiability,/// Return the name prefix of profile counter variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:46,variab,variables,46,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variables']
Modifiability,/// Return the name prefix of value profile variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:44,variab,variables,44,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variables']
Modifiability,/// Return the name prefix of variables containing instrumented function names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:30,variab,variables,30,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variables']
Modifiability,/// Return the name prefix of variables containing per-function control data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:30,variab,variables,30,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variables']
Modifiability,"/// Return the number of expected events over the full range of all variables.; /// `norm`, the variable set as normalisation constant in the constructor,; /// will yield the number of events in the range set in the constructor. That is, the function returns; /// \f[; /// N = \mathrm{norm} \; \cdot \; \frac{\int_{(x_F,y_F)} \mathrm{pdf}(x,y) }{\int_{(x_C,y_F)} \mathrm{pdf}(x,y)}; /// \f]; /// Where \f$ x \f$ is the set of dependents with a restricted range (defined by `rangeName` in the constructor),; /// and \f$ y \f$ are the other dependents. \f$ x_C \f$ is the integration; /// of \f$ x \f$ over the restricted range, and \f$ x_F \f$ is the integration of; /// \f$ x \f$ over the full range. `norm` is the number of events given as parameter to the constructor.; ///; /// If the nested PDF can be extended, \f$ N \f$ is further scaled by its expected number of events.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooExtendPdf.cxx:68,variab,variables,68,roofit/roofitcore/src/RooExtendPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooExtendPdf.cxx,3,"['extend', 'variab']","['extended', 'variable', 'variables']"
Modifiability,/// Return the operand for the debug variable referenced by; /// this DBG_VALUE instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:37,variab,variable,37,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['variab'],['variable']
Modifiability,/// Return the reference expression to loop counter variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,/// Return the register ID of the name passed in. Used by named register; /// global variables extension. There is no target-independent behaviour; /// so the default action is to bail.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:85,variab,variables,85,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['variab'],['variables']
Modifiability,/// Return the set of VariableIDs corresponding the fragments contained fully; /// within the variable/fragment \p Var.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:22,Variab,VariableIDs,22,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,"['Variab', 'variab']","['VariableIDs', 'variable']"
Modifiability,"/// Return the signedness of this variable's type, or std::nullopt if this; /// type is neither signed nor unsigned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:34,variab,variable,34,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['variab'],['variable']
Modifiability,"/// Return the static global map of Filter/Define functions that have been jitted.; /// It's used to check whether a given expression has already been jitted, and; /// to look up its associated variable name if it is.; /// Keys in the map are the body of the expression, values are the name of the; /// jitted variable that corresponds to that expression. For example, for:; /// auto f1(){ return 42; }; /// key would be ""(){ return 42; }"" and value would be ""f1"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx:194,variab,variable,194,tree/dataframe/src/RDFInterfaceUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx,2,['variab'],['variable']
Modifiability,"/// Return the strategy currently used to fill the buffer:; /// 'Extend' means is that the input p.d.f convolution observable range is widened to include the buffer range; /// 'Flat' means that the buffer is filled with the p.d.f. value at the boundary of the observable range; /// 'Mirror' means that the buffer is filled with a mirror image of the p.d.f. around the convolution observable boundary",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFFTConvPdf.h:65,Extend,Extend,65,roofit/roofitcore/inc/RooFFTConvPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFFTConvPdf.h,1,['Extend'],['Extend']
Modifiability,/// Return the type of the induction variable (and the trip count).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:37,variab,variable,37,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,"/// Return the type that should be used to zero or sign extend a; /// zeroext/signext integer return value. FIXME: Some C calling conventions; /// require the return type to be promoted, but this is not true all the time,; /// e.g. i1/i8/i16 on x86/x86_64. It is also not necessary for non-C calling; /// conventions. The frontend should handle this and include all of the; /// necessary information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:56,extend,extend,56,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['extend'],['extend']
Modifiability,"/// Return the typename of object colName stored in t, if any. Return an empty string if colName is not in t.; /// Supported cases:; /// - leaves corresponding to single values, variable- and fixed-length arrays, with following syntax:; /// - ""leafname"", as long as TTree::GetLeaf resolves it; /// - ""b1.b2...leafname"", as long as TTree::GetLeaf(""b1.b2...."", ""leafname"") resolves it; /// - TBranchElements, as long as TTree::GetBranch resolves their names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFUtils.cxx:178,variab,variable,178,tree/dataframe/src/RDFUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFUtils.cxx,1,['variab'],['variable']
Modifiability,/// Return the unique reference to an extended vector type; /// of the specified element type and size.; ///; /// \pre \p VectorType must be a built-in type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:38,extend,extended,38,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,1,['extend'],['extended']
Modifiability,"/// Return the variable that's previously inserted by insertSSPDeclarations,; /// if any, otherwise return nullptr. Should be used only when; /// getIRStackGuard returns nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:15,variab,variable,15,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['variab'],['variable']
Modifiability,"/// Return this matcher as a \c Matcher<T>.; ///; /// Handles the different types (Single, Polymorphic) accordingly.; /// Asserts that \c hasTypedMatcher<T>() is true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:91,Polymorphi,Polymorphic,91,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,1,['Polymorphi'],['Polymorphic']
Modifiability,"/// Return true if `ExtendOpTy`({`Start`,+,`Step`}) can be proved to be; /// equal to {`ExtendOpTy`(`Start`),+,`ExtendOpTy`(`Step`)}. This is; /// equivalent to proving no signed (resp. unsigned) wrap in; /// {`Start`,+,`Step`} if `ExtendOpTy` is `SCEVSignExtendExpr`; /// (resp. `SCEVZeroExtendExpr`).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:20,Extend,ExtendOpTy,20,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,4,['Extend'],['ExtendOpTy']
Modifiability,/// Return true if a variable is live at the end of a; /// specified block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/LiveVariables.h:21,variab,variable,21,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/LiveVariables.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/LiveVariables.h,1,['variab'],['variable']
Modifiability,"/// Return true if an fpext operation input to an \p Opcode operation is free; /// (for instance, because half-precision floating-point numbers are; /// implicitly extended to float-precision) for an FMA instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:164,extend,extended,164,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['extend'],['extended']
Modifiability,"/// Return true if an fpext operation is free (for instance, because; /// single-precision floating-point numbers are implicitly extended to; /// double-precision).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:129,extend,extended,129,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['extend'],['extended']
Modifiability,"/// Return true if any actual instruction that defines a value of type FromTy; /// implicitly zero-extends the value to ToTy in the result register.; ///; /// The function should return true when it is likely that the truncate can; /// be freely folded with an instruction defining a value of FromTy. If; /// the defining instruction is unknown (because you're looking at a; /// function argument, PHI, etc.) then the target may require an; /// explicit truncate, which is not necessarily free, but this function; /// does not deal with those cases.; /// Targets must return false when FromTy >= ToTy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:99,extend,extends,99,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['extend'],['extends']
Modifiability,"/// Return true if any actual instruction that defines a; /// value of type Ty1 implicit zero-extends the value to Ty2 in the result; /// register. This does not necessarily include registers defined in; /// unknown ways, such as incoming arguments, or copies from unknown; /// virtual registers. Also, if isTruncateFree(Ty2, Ty1) is true, this; /// does not necessarily apply to truncate instructions. e.g. on x86-64,; /// all instructions that define 32-bit values implicit zero-extend the; /// result out to 64 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:94,extend,extends,94,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,2,['extend'],"['extend', 'extends']"
Modifiability,"/// Return true if folding a vector load into ExtVal (a sign, zero, or any; /// extend node) is profitable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:80,extend,extend,80,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['extend'],['extend']
Modifiability,/// Return true if inserting a scalar into a variable element of an undef; /// vector is more efficiently handled by splatting the scalar instead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:45,variab,variable,45,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['variab'],['variable']
Modifiability,"/// Return true if it is worth folding MI into an extended register. That is,; /// if it's safe to pull it into the addressing mode of a load or store as a; /// shift.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:50,extend,extended,50,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['extend'],['extended']
Modifiability,/// Return true if it's know this can never be interpreted as a zero. This; /// extends isKnownNeverZero to cover the case where the assumed; /// floating-point mode for the function interprets denormals as zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h:80,extend,extends,80,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueTracking.h,1,['extend'],['extends']
Modifiability,"/// Return true if the Context runtime configuration is set to discard all; /// value names. When true, only GlobalValue names will be available in the; /// IR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:39,config,configuration,39,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,1,['config'],['configuration']
Modifiability,/// Return true if the coefficient corresponding to induction variable of; /// loop \p L in the given \p Subscript is zero or is loop invariant in \p L.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h:62,variab,variable,62,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,1,['variab'],['variable']
Modifiability,"/// Return true if the extension represented by \p I is free.; /// Unlikely the is[Z|FP]ExtFree family which is based on types,; /// this method can use the context provided by \p I to decide; /// whether or not \p I is free.; /// This method extends the behavior of the is[Z|FP]ExtFree family.; /// In other words, if is[Z|FP]Free returns true, then this method; /// returns true as well. The converse is not true.; /// The target can perform the adequate checks by overriding isExtFreeImpl.; /// \pre \p I must be a sign, zero, or fp extension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:243,extend,extends,243,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['extend'],['extends']
Modifiability,/// Return true if the given PHINode \p AuxIndVar is; /// - in the loop header; /// - not used outside of the loop; /// - incremented by a loop invariant step for each loop iteration; /// - step instruction opcode should be add or sub; /// Note: auxiliary induction variable is not required to be used in the; /// conditional branch in the loop latch. (but it can be),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:266,variab,variable,266,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,1,['variab'],['variable']
Modifiability,/// Return true if the given add can be sign-extended without changing its; /// value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:45,extend,extended,45,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['extend'],['extended']
Modifiability,/// Return true if the given addrec can be sign-extended without changing its; /// value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:48,extend,extended,48,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['extend'],['extended']
Modifiability,/// Return true if the given decl has function type (function or; /// function-typed variable) or an Objective-C method or a block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:85,variab,variable,85,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['variab'],['variable']
Modifiability,"/// Return true if the given instruction should not be pipelined and should; /// be ignored. An example could be a loop comparison, or induction variable; /// update with no users being pipelined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:145,variab,variable,145,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,1,['variab'],['variable']
Modifiability,/// Return true if the given mul can be sign-extended without changing its; /// value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:45,extend,extended,45,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['extend'],['extended']
Modifiability,"/// Return true if the indexed reference is 'consecutive' in loop \p L.; /// An indexed reference is 'consecutive' if the only coefficient that uses; /// the loop induction variable is the rightmost one, and the access stride is; /// smaller than the cache line size \p CLS. Provide a valid \p Stride value; /// if the indexed reference is 'consecutive'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h:173,variab,variable,173,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopCacheAnalysis.h,1,['variab'],['variable']
Modifiability,/// Return true if the induction variable \p IV in a Loop whose latch is; /// \p LatchBlock would become dead if the exit test \p Cond were removed.; /// Conservatively returns false if analysis is insufficient.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h:33,variab,variable,33,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopUtils.h,1,['variab'],['variable']
Modifiability,"/// Return true if the induction variable can underflow in the first iteration.; /// An example, is an initial unsigned value that is 0 and is decrement in the; /// first itertion of a do-while loop. In this case, we cannot generate a; /// hardware loop because the endloop instruction does not decrement the loop; /// counter if it is <= 1. We only need to perform this analysis if the; /// initial value is a register.; ///; /// This function assumes the initial value may underfow unless proven; /// otherwise. If the type is signed, then we don't care because signed; /// underflow is undefined. We attempt to prove the initial value is not; /// zero by perfoming a crude analysis of the loop counter. This function; /// checks if the initial value is used in any comparison prior to the loop; /// and, if so, assumes the comparison is a range check. This is inexact,; /// but will catch the simple cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:33,variab,variable,33,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,1,['variab'],['variable']
Modifiability,/// Return true if the induction variable may underflow an unsigned; /// value in the first iteration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp:33,variab,variable,33,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonHardwareLoops.cpp,1,['variab'],['variable']
Modifiability,/// Return true if the instruction is a debug value which describes a part of; /// a variable as unavailable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:85,variab,variable,85,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['variab'],['variable']
Modifiability,/// Return true if the loop induction variable starts at zero and increments; /// by one each time through the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:38,variab,variable,38,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,1,['variab'],['variable']
Modifiability,"/// Return true if the specified function should have a dedicated frame; /// pointer register. This is true if the function has variable sized; /// allocas, if it needs dynamic stack realignment, if frame pointer; /// elimination is disabled, or if the frame address is taken.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.h:128,variab,variable,128,interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.h,1,['variab'],['variable']
Modifiability,"/// Return true if the specified instruction was inserted by the code; /// rewriter. If so, the client should not modify the instruction. Note that; /// this also includes instructions re-used during expansion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:75,rewrite,rewriter,75,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,1,['rewrite'],['rewriter']
Modifiability,/// Return true if the value is dependent on a dllimport variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:57,variab,variable,57,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,1,['variab'],['variable']
Modifiability,/// Return true if there is an assignment matching \p AV in the \p Kind; /// assignment map. Does consider assignments for VariableIDs of fragments; /// contained win \p Var.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:123,Variab,VariableIDs,123,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['Variab'],['VariableIDs']
Modifiability,/// Return true if this constant should be sign extended when promoting to; /// a larger type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:48,extend,extended,48,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['extend'],['extended']
Modifiability,"/// Return true if this heuristic determines order.; /// TODO: Consider refactor return type of these functions as integer or enum,; /// as we may need to differentiate whether TryCand is better than Cand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:72,refactor,refactor,72,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['refactor'],['refactor']
Modifiability,"/// Return true if this instruction can have a variable number of operands.; /// In this case, the variable operands will be after the normal; /// operands but before the implicit definitions and uses (if any are; /// present).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:47,variab,variable,47,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,2,['variab'],['variable']
Modifiability,"/// Return true if this instruction can have a variable number of; /// operands. In this case, the variable operands will be after the normal; /// operands but before the implicit definitions and uses (if any are; /// present).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h:47,variab,variable,47,interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCInstrDesc.h,2,['variab'],['variable']
Modifiability,"/// Return true if this is not a variable sized type,; /// according to the rules of C99 6.7.5p3. It is not legal to call this on; /// incomplete types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['variab'],['variable']
Modifiability,/// Return true if this pointer refers to a distinct and identifiable object.; /// This returns true for:; /// Global Variables and Functions (but not Global Aliases); /// Allocas; /// ByVal and NoAlias Arguments; /// NoAlias returns (e.g. calls to malloc); ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:118,Variab,Variables,118,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['Variab'],['Variables']
Modifiability,/// Return true if this variable is in a stack slot.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:24,variab,variable,24,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['variab'],['variable']
Modifiability,/// Return true if this variable is in the entry value of a register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:24,variab,variable,24,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['variab'],['variable']
Modifiability,/// Return true if users of \p UserI might access the underlying; /// variable/location described by \p U and should therefore be analyzed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:70,variab,variable,70,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['variab'],['variable']
Modifiability,/// Return true if we can simplify X / Y to 0. Remainder can adapt that answer; /// to simplify X % Y to X.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:61,adapt,adapt,61,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['adapt'],['adapt']
Modifiability,/// Return true if zero-extending the specific node Val to type VT2 is free; /// (either because it's implicitly zero-extended such as ARM ldrb / ldrh or; /// because it's folded such as X86 zero-extending loads).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:24,extend,extending,24,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,3,['extend'],"['extended', 'extending']"
Modifiability,/// Return true iff an Objective-C runtime has been configured.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:52,config,configured,52,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['config'],['configured']
Modifiability,"/// Return values used for llvm.get.rounding; ///; /// When both the F32 and F64/F16 modes are the same, returns the standard; /// values. If they differ, returns an extended mode starting at 8.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIModeRegisterDefaults.h:166,extend,extended,166,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIModeRegisterDefaults.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIModeRegisterDefaults.h,1,['extend'],['extended']
Modifiability,"/// Return whether FrameLowering should always set the ""extended frame; /// present"" bit in FP, or set it based on a symbol in the runtime.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Subtarget.h:56,extend,extended,56,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Subtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Subtarget.h,2,['extend'],['extended']
Modifiability,/// Return whether the base is an inherited virtual base.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:34,inherit,inherited,34,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,1,['inherit'],['inherited']
Modifiability,/// Return whether the operand is extendable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.cpp:34,extend,extendable,34,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.cpp,1,['extend'],['extendable']
Modifiability,/// Return whether this is a piece of an aggregate variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h:51,variab,variable,51,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfoMetadata.h,1,['variab'],['variable']
Modifiability,"/// Return whether this is a plain node,; /// or one of the varieties of value-extending loads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:79,extend,extending,79,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['extend'],['extending']
Modifiability,/// Return whether we can safely mutate V's type to ExtTy without having to be; /// concerned with zero extending or truncation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp:104,extend,extending,104,interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp,1,['extend'],['extending']
Modifiability,/// Returning a guarded variable by reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:24,variab,variable,24,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['variab'],['variable']
Modifiability,/// Returning a pt-guarded variable by reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['variab'],['variable']
Modifiability,/// Returns True if PN is a reduction variable in this loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:38,variab,variable,38,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,1,['variab'],['variable']
Modifiability,"/// Returns True if V can be considered as an induction variable in this; /// loop. V can be the induction phi, or some redundant cast in the def-use; /// chain of the inducion phi.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:56,variab,variable,56,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,1,['variab'],['variable']
Modifiability,/// Returns True if V is a Phi node of an induction variable in this loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:52,variab,variable,52,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,1,['variab'],['variable']
Modifiability,"/// Returns a \p ComplexRendererFns which contains a base, offset, and whether; /// or not a shift + extend should be folded into an addressing mode. Returns; /// None when this is not profitable or possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:101,extend,extend,101,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['extend'],['extend']
Modifiability,"/// Returns a boolean variable that identifies the flow condition (FC).; ///; /// The flow condition is a set of facts that are necessarily true when the; /// program reaches the current point, expressed as boolean formulas.; /// The flow condition token is equivalent to the AND of these facts.; ///; /// These may e.g. constrain the value of certain variables. A pointer; /// variable may have a consistent modeled PointerValue throughout, but at a; /// given point the Environment may tell us that the value must be non-null.; ///; /// The FC is necessary but not sufficient for this point to be reachable.; /// In particular, where the FC token appears in flow conditions of successor; /// environments, it means ""point X may have been reached"", not; /// ""point X was reached"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// Returns a default thread strategy where all available hardware resources; /// are to be used, except for those initially excluded by an affinity mask.; /// This function takes affinity into consideration. Returns 1 when LLVM is; /// configured with LLVM_ENABLE_THREADS=OFF.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:237,config,configured,237,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,1,['config'],['configured']
Modifiability,/// Returns a formula for the variable A.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Arena.h:30,variab,variable,30,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Arena.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Arena.h,1,['variab'],['variable']
Modifiability,/// Returns a hash of the module \p M by hashing all functions and global; /// variables contained within. \param M The module to hash. \param DetailedHash; /// Whether or not to encode additional information in the function hashes that; /// composed the module hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h:79,variab,variables,79,interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/StructuralHash.h,1,['variab'],['variables']
Modifiability,/// Returns a list of two elements where the first element is the LHS of a pointer assignment; /// statement and the second element is the RHS. This two-element list represents the fact that; /// the LHS buffer gets its bounds information from the RHS buffer. This information will be used; /// later to group all those variables whose types must be modified together to prevent type; /// mismatches.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:320,variab,variables,320,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variables']
Modifiability,"/// Returns a new atomic boolean variable, distinct from any other.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Arena.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Arena.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/Arena.h,1,['variab'],['variable']
Modifiability,/// Returns a pointer to a constant global variable for the given file-scope; /// compound literal expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:43,variab,variable,43,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variable']
Modifiability,/// Returns a pointer to a global variable representing a temporary; /// with static or thread storage duration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:34,variab,variable,34,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variable']
Modifiability,/// Returns a pointer to a local variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h:33,variab,variables,33,interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,1,['variab'],['variables']
Modifiability,"/// Returns a pointer to the weight variable (if set).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h:36,variab,variable,36,roofit/roofitcore/inc/RooDataSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h,1,['variab'],['variable']
Modifiability,/// Returns a range over all operands that are used to determine the variable; /// location for this DBG_VALUE instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:69,variab,variable,69,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['variab'],['variable']
Modifiability,/// Returns a replacement refactoring result consumer (if any) that should; /// consume the results of a refactoring operation.; ///; /// The replacement refactoring result consumer is used by \c; /// TestSourceSelectionArgument to inject a test-specific result handling; /// logic into the refactoring operation. The test-specific consumer; /// ensures that the individual results in a particular test group are; /// identical.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:26,refactor,refactoring,26,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,4,['refactor'],['refactoring']
Modifiability,/// Returns a set of refactoring actions rules that are defined by this; /// action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringAction.h:21,refactor,refactoring,21,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringAction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringAction.h,3,['refactor'],['refactoring']
Modifiability,/// Returns a struct describing if the instruction 'I' can be a recurrence; /// variable of type 'Kind' for a Loop \p L and reduction PHI \p Phi.; /// If the recurrence is a min/max pattern of select(icmp()) this function; /// advances the instruction pointer 'I' from the compare instruction to the; /// select instruction and stores this pointer in 'PatternLastInst' member of; /// the returned struct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h:80,variab,variable,80,interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,1,['variab'],['variable']
Modifiability,"/// Returns a thread strategy for tasks requiring significant memory or other; /// resources. To be used for workloads where hardware_concurrency() proves to; /// be less efficient. Avoid this strategy if doing lots of I/O. Currently; /// based on physical cores, if available for the host system, otherwise falls; /// back to hardware_concurrency(). Returns 1 when LLVM is configured with; /// LLVM_ENABLE_THREADS = OFF.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h:374,config,configured,374,interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Threading.h,1,['config'],['configured']
Modifiability,"/// Returns a vector of BBAddrMap structs corresponding to each function; /// within the text section that the SHT_LLVM_BB_ADDR_MAP section \p Sec; /// is associated with. If the current ELFFile is relocatable, a corresponding; /// \p RelaSec must be passed in as an argument.; /// Optional out variable to collect all PGO Analyses. New elements are only; /// added if no error occurs. If not provided, the PGO Analyses are decoded; /// then ignored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:295,variab,variable,295,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,1,['variab'],['variable']
Modifiability,"/// Returns ability of PDF to provide extended likelihood terms. Possible; /// answers are in the enumerator RooAbsPdf::ExtendMode.; /// This default implementation always returns CanNotBeExtended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:38,extend,extended,38,roofit/roofitcore/inc/RooAbsPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h,2,"['Extend', 'extend']","['ExtendMode', 'extended']"
Modifiability,/// Returns address of the threadprivate variable for the current; /// thread. This Also create any necessary OMP runtime calls.; ///; /// \param VD VarDecl for Threadprivate variable.; /// \param VDAddr Address of the Vardecl; /// \param Loc The location where the barrier directive was encountered,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:41,variab,variable,41,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,2,['variab'],['variable']
Modifiability,/// Returns address of the threadprivate variable for the current; /// thread.; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of the reference to threadprivate var.; /// \return Address of the threadprivate variable for the current thread.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:41,variab,variable,41,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,8,['variab'],['variable']
Modifiability,"/// Returns an LLVM value that corresponds to the size,; /// in non-variably-sized elements, of a variable length array type,; /// plus that largest non-variably-sized element type. Assumes that; /// the type has already been emitted with EmitVariablyModifiedType.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:68,variab,variably-sized,68,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,3,['variab'],"['variable', 'variably-sized']"
Modifiability,/// Returns an assignment for an unassigned variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variable']
Modifiability,/// Returns an instance of the Post Rewrite pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZPostRewrite.cpp:36,Rewrite,Rewrite,36,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZPostRewrite.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZPostRewrite.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// Returns an opaque, unique ID for this analysis type.; ///; /// This ID is a pointer type that is guaranteed to be 8-byte aligned and thus; /// suitable for use in sets, maps, and other data structures that use the low; /// bits of pointers.; ///; /// Note that this requires the derived type provide a static \c AnalysisKey; /// member called \c Key.; ///; /// FIXME: The only reason the mixin type itself can't declare the Key value; /// is that some compilers cannot correctly unique a templated static variable; /// so it has the same addresses in each instantiation. The only currently; /// known platform with this limitation is Windows DLL builds, specifically; /// building each part of LLVM as a DLL. If we ever remove that build; /// configuration, this mixin can provide the static key as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h:509,variab,variable,509,interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManager.h,2,"['config', 'variab']","['configuration', 'variable']"
Modifiability,"/// Returns false if \p VirtReg is known to not live out of the current config.; /// If \p VirtReg live out of the current MBB, it must live out of the current; /// config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp:72,config,config,72,interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp,2,['config'],['config']
Modifiability,/// Returns function or variable name on device side even if the current; /// compilation is for host.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:24,variab,variable,24,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,1,['variab'],['variable']
Modifiability,"/// Returns how the platform's atomic compare and swap expects its comparison; /// value to be extended (ZERO_EXTEND, SIGN_EXTEND, or ANY_EXTEND). This is; /// separate from getExtendForAtomicOps, which is concerned with the; /// sign-extension of the instruction's output, whereas here we are concerned; /// with the sign-extension of the input. For targets with compare-and-swap; /// instructions (or sub-word comparisons in their LL/SC loop expansions),; /// the input can be ANY_EXTEND, but the output will still have a specific; /// extension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:95,extend,extended,95,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['extend'],['extended']
Modifiability,"/// Returns how the platform's atomic operations are extended (ZERO_EXTEND,; /// SIGN_EXTEND, or ANY_EXTEND).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:53,extend,extended,53,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['extend'],['extended']
Modifiability,"/// Returns loop size estimation for unrolled loop, given the unrolling; /// configuration specified by UP.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/UnrollLoop.h:77,config,configuration,77,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/UnrollLoop.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/UnrollLoop.h,1,['config'],['configuration']
Modifiability,/// Returns memory location for a parameter variable within the callee stack; /// frame. The behavior is undefined if the block count is different from the; /// one that is there when call happens. May fail; returns null on failure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:44,variab,variable,44,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['variab'],['variable']
Modifiability,/// Returns nullptr if the assignment shouldn't be attributed to this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp:70,variab,variable,70,interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,1,['variab'],['variable']
Modifiability,/// Returns reference to the task_reduction return variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:51,variab,variable,51,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,"/// Returns the DIE map slot for the specified debug variable.; ///; /// We delegate the request to DwarfDebug when the MDNode can be part of the; /// type system, since DIEs for the type system can be shared across CUs and; /// the mappings are kept in DwarfDebug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.h:53,variab,variable,53,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfUnit.h,1,['variab'],['variable']
Modifiability,/// Returns the DIVariable pointer for the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:43,variab,variable,43,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,1,['variab'],['variable']
Modifiability,"/// Returns the MCRegister of this variable, assuming; /// `inEntryValueRegister()` is true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:35,variab,variable,35,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['variab'],['variable']
Modifiability,/// Returns the OS version with the argument / environment variable that; /// specified it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp:59,variab,variable,59,interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,1,['variab'],['variable']
Modifiability,/// Returns the TLS model which should be used for the given global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h:68,variab,variable,68,interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetMachine.h,1,['variab'],['variable']
Modifiability,/// Returns the address of the variable marked as declare target with link; /// clause OR as declare target with to clause and unified memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:31,variab,variable,31,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,"/// Returns the alignment of the given variable or function.; ///; /// Note that for functions this is the alignment of the code, not the; /// alignment of a function pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalObject.h:39,variab,variable,39,interpreter/llvm-project/llvm/include/llvm/IR/GlobalObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalObject.h,1,['variab'],['variable']
Modifiability,/// Returns the collection of variables for which we have debug info and that; /// have been assigned a stack slot.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:30,variab,variables,30,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,2,['variab'],['variables']
Modifiability,/// Returns the collection of variables for which we have debug info and that; /// have been assigned an entry value register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:30,variab,variables,30,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['variab'],['variables']
Modifiability,/// Returns the current source selection range as set by the; /// refactoring engine. Can be invalid.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringRuleContext.h:66,refactor,refactoring,66,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringRuleContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringRuleContext.h,1,['refactor'],['refactoring']
Modifiability,/// Returns the deployment target that's specified using the; /// OS_DEPLOYMENT_TARGET environment variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp:99,variab,variable,99,interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,1,['variab'],['variable']
Modifiability,/// Returns the designated initializers for the interface.; ///; /// If this declaration does not have methods marked as designated; /// initializers then the interface inherits the designated initializers of; /// its super class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:169,inherit,inherits,169,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['inherit'],['inherits']
Modifiability,/// Returns the field in the globalized record for the escaped variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:63,variab,variable,63,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variable']
Modifiability,/// Returns the induction variables found in the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:26,variab,variables,26,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,1,['variab'],['variables']
Modifiability,/// Returns the inheritance model used for this record.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:16,inherit,inheritance,16,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inheritance']
Modifiability,"/// Returns the instruction representing the current logical induction; /// variable. Always unsigned, always starting at 0 with an increment of one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:76,variab,variable,76,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,/// Returns the interop variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:24,variab,variable,24,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,3,['variab'],['variable']
Modifiability,/// Returns the list of all the available refactoring actions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringAction.h:42,refactor,refactoring,42,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringAction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringAction.h,1,['refactor'],['refactoring']
Modifiability,"/// Returns the list of pointer-type variables on which this gadget performs; /// its operation. Typically, there's only one variable. This isn't a list; /// of all DeclRefExprs in the gadget's AST!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:37,variab,variables,37,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,/// Returns the list of the delayed variables with the variably modified; /// types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:36,variab,variables,36,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,2,['variab'],"['variables', 'variably']"
Modifiability,/// Returns the list of the escaped local variables/parameters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:42,variab,variables,42,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variables']
Modifiability,/// Returns the list of the escaped variables with the variably modified; /// types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:36,variab,variables,36,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,2,['variab'],"['variables', 'variably']"
Modifiability,/// Returns the location of the interop variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:40,variab,variable,40,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,3,['variab'],['variable']
Modifiability,"/// Returns the location of the result object for a record-type prvalue.; ///; /// In C++, prvalues of record type serve only a limited purpose: They can; /// only be used to initialize a result object (e.g. a variable or a; /// temporary). This function returns the location of that result object.; ///; /// When creating a prvalue of record type, we already need the storage; /// location of the result object to pass in `this`, even though prvalues are; /// otherwise not associated with storage locations.; ///; /// FIXME: Currently, this simply returns a stable storage location for `E`,; /// but this doesn't do the right thing in scenarios like the following:; /// ```; /// MyClass c = some_condition()? MyClass(foo) : MyClass(bar);; /// ```; /// Here, `MyClass(foo)` and `MyClass(bar)` will have two different storage; /// locations, when in fact their storage locations should be the same.; /// Eventually, we want to propagate storage locations from result objects; /// down to the prvalues that initialize them, similar to the way that this is; /// done in Clang's CodeGen.; ///; /// Requirements:; /// `E` must be a prvalue of record type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h:210,variab,variable,210,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,1,['variab'],['variable']
Modifiability,"/// Returns the logical source range of the node extended to include associated; /// comments and whitespace before and after the node, and associated; /// terminators. The returned range consists of file locations, if valid file; /// locations can be found for the associated content; otherwise, an invalid; /// range is returned.; ///; /// Note that parsing comments is disabled by default. In order to select a; /// range containing associated comments, you may need to invoke the tool with; /// `-fparse-all-comments`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h:49,extend,extended,49,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,1,['extend'],['extended']
Modifiability,/// Returns the mangled name for a guard variable for the passed in VarDecl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:41,variab,variable,41,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['variab'],['variable']
Modifiability,"/// Returns the name of ivar offset variables. In the GNUstep v1 ABI, this; /// contains the class and ivar names, in the v2 ABI this contains the type; /// encoding as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:36,variab,variables,36,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['variab'],['variables']
Modifiability,"/// Returns the name of the launch configuration function. This is the name; /// of the function that will be called to configure kernel call, with the; /// parameters specified via <<<>>>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:35,config,configuration,35,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,2,['config'],"['configuration', 'configure']"
Modifiability,/// Returns the name of the refactoring option.; ///; /// Each refactoring option must have a unique name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOption.h:28,refactor,refactoring,28,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOption.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOption.h,2,['refactor'],['refactoring']
Modifiability,/// Returns the name of the subcommand that's used by clang-refactor for this; /// action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringAction.h:60,refactor,refactor,60,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringAction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringAction.h,1,['refactor'],['refactor']
Modifiability,"/// Returns the non-empty group of variables that include parameters of the; /// analyzing function, if such a group exists. An empty group, otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h:35,variab,variables,35,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,1,['variab'],['variables']
Modifiability,/// Returns the number of captured variables.; /// Does not include an entry for 'this'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:35,variab,variables,35,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variables']
Modifiability,/// Returns the option controlling which C++ member functions will be; /// considered for inlining.; ///; /// This is controlled by the 'c++-inlining' config option.; ///; /// \sa CXXMemberInliningMode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:151,config,config,151,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,1,['config'],['config']
Modifiability,/// Returns the primary induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:34,variab,variable,34,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,1,['variab'],['variable']
Modifiability,/// Returns the record that handles all the escaped local variables and used; /// instead of their original storage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:58,variab,variables,58,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variables']
Modifiability,/// Returns the reduction variables found in the loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h:26,variab,variables,26,interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Vectorize/LoopVectorizationLegality.h,1,['variab'],['variables']
Modifiability,/// Returns the released value if M is a call a setter that releases; /// and nils out its underlying instance variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:111,variab,variable,111,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['variab'],['variable']
Modifiability,/// Returns the set of refactoring options that are used when evaluating this; /// requirement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h:23,refactor,refactoring,23,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,1,['refactor'],['refactoring']
Modifiability,"/// Returns the set of variables (including `Var`) that need to be fixed; /// together in one step.; ///; /// `Var` must be a variable that needs fix (so it must be in a group).; /// `HasParm` is an optional argument that will be set to true if the set of; /// variables, where `Var` is in, contains parameters.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h:23,variab,variables,23,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// Returns the source range spanning the node, extended to include \p Next, if; /// it immediately follows \p Node. Otherwise, returns the normal range of \p; /// Node. See comments on `getExtendedText()` for examples.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h:48,extend,extended,48,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,1,['extend'],['extended']
Modifiability,"/// Returns the source text of the node, extended to include \p Next, if it; /// immediately follows the node. Otherwise, returns the text of just \p Node.; ///; /// For example, given statements S1 and S2 below:; /// \code; /// {; /// // S1:; /// if (!x) return foo();; /// // S2:; /// if (!x) { return 3; }; /// }; /// \endcode; /// then; /// \code; /// getText(S1, Context) = ""if (!x) return foo()""; /// getExtendedText(S1, tok::TokenKind::semi, Context); /// = ""if (!x) return foo();""; /// getExtendedText(*S1.getThen(), tok::TokenKind::semi, Context); /// = ""return foo();""; /// getExtendedText(*S2.getThen(), tok::TokenKind::semi, Context); /// = getText(S2, Context) = ""{ return 3; }""; /// \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h:41,extend,extended,41,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/SourceCode.h,1,['extend'],['extended']
Modifiability,"/// Returns the stack slot of this variable, assuming `inStackSlot()` is; /// true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:35,variab,variable,35,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['variab'],['variable']
Modifiability,/// Returns the structure that describes the refactoring.; // static const RefactoringDescriptor &describe() = 0;,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h:45,refactor,refactoring,45,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,2,"['Refactor', 'refactor']","['RefactoringDescriptor', 'refactoring']"
Modifiability,"/// Returns the subrange of spelled tokens corresponding to AST node spanning; /// \p Expanded. This is the text that should be replaced if a refactoring; /// were to rewrite the node. If \p Expanded is empty, the returned value is; /// std::nullopt.; ///; /// Will fail if the expanded tokens do not correspond to a sequence of; /// spelled tokens. E.g. for the following example:; ///; /// #define FIRST f1 f2 f3; /// #define SECOND s1 s2 s3; /// #define ID2(X, Y) X Y; ///; /// a FIRST b SECOND c // expanded tokens are: a f1 f2 f3 b s1 s2 s3 c; /// d ID2(e f g, h) i // expanded tokens are: d e f g h i; ///; /// the results would be:; /// expanded => spelled; /// ------------------------; /// a => a; /// s1 s2 s3 => SECOND; /// a f1 f2 f3 => a FIRST; /// a f1 => can't map; /// s1 s2 => can't map; /// e f => e f; /// g h => can't map; ///; /// EXPECTS: \p Expanded is a subrange of expandedTokens().; /// Complexity is logarithmic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h:142,refactor,refactoring,142,interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Syntax/Tokens.h,2,"['refactor', 'rewrite']","['refactoring', 'rewrite']"
Modifiability,"/// Returns the type to be used for the EVL/AVL operand of VP nodes:; /// ISD::VP_ADD, ISD::VP_SUB, etc. It must be a legal scalar integer type,; /// and must be at least as large as i32. The EVL is implicitly zero-extended; /// to any larger type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:215,extend,extended,215,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['extend'],['extended']
Modifiability,/// Returns the value of a local variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h:33,variab,variable,33,interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/InterpFrame.h,1,['variab'],['variable']
Modifiability,/// Returns the variable of `L`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:16,variab,variable,16,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variable']
Modifiability,/// Returns the variable used to store the offset of an instance variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:16,variab,variable,16,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,2,['variab'],['variable']
Modifiability,/// Returns true for all variables that do not have local storage.; ///; /// This includes all global variables as well as static variables declared; /// within a function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:25,variab,variables,25,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,3,['variab'],['variables']
Modifiability,/// Returns true for file scoped variable declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Returns true for local variable declarations other than parameters.; /// Note that this includes static variables inside of functions. It also; /// includes variables inside blocks.; ///; /// void foo() { int x; static int y; extern int z; },MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:27,variab,variable,27,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// Returns true if \p MI is guaranteed to have the high-half of a 64-bit; /// register zeroed out. In other words, the result of MI has been explicitly; /// zero extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:163,extend,extended,163,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['extend'],['extended']
Modifiability,/// Returns true if \param S is a DeclStmt for a local variable that; /// ObjC automated reference counting initialized with zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp:55,variab,variable,55,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,1,['variab'],['variable']
Modifiability,/// Returns true if a variable has extern or __private_extern__; /// storage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Returns true if a variable is live at the beginning of the; /// the statement. This query only works if liveness information; /// has been recorded at the statement level (see runOnAllBlocks), and; /// only returns liveness information for block-level expressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/LiveVariables.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/LiveVariables.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/LiveVariables.h,1,['variab'],['variable']
Modifiability,/// Returns true if a variable with function scope is a non-static local; /// variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,/// Returns true if a variable with function scope is a static local; /// variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,/// Returns true if and only if all active variables are unassigned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:43,variab,variables,43,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variables']
Modifiability,/// Returns true if and only if all active variables form watched literals.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:43,variab,variables,43,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variables']
Modifiability,/// Returns true if and only if all unassigned variables that are forming; /// watched literals are active.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:47,variab,variables,47,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variables']
Modifiability,/// Returns true if arguments should be extended in lib calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:40,extend,extended,40,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['extend'],['extended']
Modifiability,/// Returns true if arguments should be sign-extended in lib calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:45,extend,extended,45,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['extend'],['extended']
Modifiability,"/// Returns true if it makes sense to import a foreign variable definition.; /// For instance, we don't want to import variables that have non-trivial types; /// because the constructor might have side-effects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:55,variab,variable,55,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// Returns true if specified variable references live code section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h:30,variab,variable,30,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.h,1,['variab'],['variable']
Modifiability,/// Returns true if the RewriteStatepointsForGC pass should run on functions; /// using this GC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:24,Rewrite,RewriteStatepointsForGC,24,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,1,['Rewrite'],['RewriteStatepointsForGC']
Modifiability,/// Returns true if the call is diagnosable in the current analyzer; /// configuration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp:73,config,configuration,73,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,1,['config'],['configuration']
Modifiability,/// Returns true if the exploded icmp can be expressed as a signed comparison; /// to zero and updates the predicate accordingly.; /// The signedness of the comparison is preserved.; /// TODO: Refactor with decomposeBitTestICmp()?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:193,Refactor,Refactor,193,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['Refactor'],['Refactor']
Modifiability,/// Returns true if the function's variable locations are tracked with; /// instruction referencing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h:35,variab,variable,35,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFunction.h,1,['variab'],['variable']
Modifiability,"/// Returns true if the given selector is a designated initializer for the; /// interface.; ///; /// If this declaration does not have methods marked as designated; /// initializers then the interface inherits the designated initializers of; /// its super class.; ///; /// \param InitMethod if non-null and the function returns true, it receives; /// the method that was marked as a designated initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:201,inherit,inherits,201,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['inherit'],['inherits']
Modifiability,"/// Returns true if the immediate message arguments of \c Msg should not; /// be rewritten because it will interfere with the rewrite of the parent; /// message expression. e.g.; /// \code; /// [NSDictionary dictionaryWithObjects:; /// [NSArray arrayWithObjects:@""1"", @""2"", nil]; /// forKeys:[NSArray arrayWithObjects:@""A"", @""B"", nil]];; /// \endcode; /// It will return true for this because we are going to rewrite this directly; /// to a dictionary literal without any array literals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Edit/RewriteObjCFoundationAPI.cpp:126,rewrite,rewrite,126,interpreter/llvm-project/clang/lib/Edit/RewriteObjCFoundationAPI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Edit/RewriteObjCFoundationAPI.cpp,2,['rewrite'],['rewrite']
Modifiability,/// Returns true if the index type for a masked gather/scatter requires; /// extending,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:77,extend,extending,77,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['extend'],['extending']
Modifiability,/// Returns true if the loop is annotated parallel.; ///; /// Derived classes can override this method using static template; /// polymorphism.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h:130,polymorphi,polymorphism,130,interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericLoopInfo.h,1,['polymorphi'],['polymorphism']
Modifiability,"/// Returns true if the object base specifies a known object in memory,; /// rather than, say, an instance variable or property of another object.; ///; /// Note that this ignores the effects of aliasing; that is, \c foo.bar is; /// considered an exact profile if \c foo is a local variable, even if; /// another variable \c foo2 refers to the same object as \c foo.; ///; /// For increased precision, accesses with base variables that are; /// properties or ivars of 'self' (e.g. self.prop1.prop2) are considered to; /// be exact, though this is not true for arbitrary variables; /// (foo.prop1.prop2).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:107,variab,variable,107,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,5,['variab'],"['variable', 'variables']"
Modifiability,/// Returns true if the specified index corresponds to a variable sized; /// object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:57,variab,variable,57,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,1,['variab'],['variable']
Modifiability,/// Returns true if the specified node is a non-extending and unindexed load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:48,extend,extending,48,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['extend'],['extending']
Modifiability,/// Returns true if the specified node is a non-extending load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:48,extend,extending,48,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['extend'],['extending']
Modifiability,/// Returns true if the statement is expanded from a configuration macro.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp:53,config,configuration,53,interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp,1,['config'],['configuration']
Modifiability,"/// Returns true if the statement represents a configuration value.; ///; /// A configuration value is something usually determined at compile-time; /// to conditionally always execute some branch. Such guards are for; /// ""sometimes unreachable"" code. Such code is usually not interesting; /// to report as unreachable, and may mask truly unreachable code within; /// those blocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp:47,config,configuration,47,interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp,2,['config'],['configuration']
Modifiability,/// Returns true if the target machine supports all of the reduction; /// variables found for the given VF.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:74,variab,variables,74,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variables']
Modifiability,/// Returns true if the variable declaration was by bypassed by any goto or; /// switch statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:24,variab,variable,24,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,1,['variab'],['variable']
Modifiability,/// Returns true if the variable is a local variable in untied task.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:24,variab,variable,24,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['variab'],['variable']
Modifiability,"/// Returns true if this function needs a local user-space stack pointer.; /// Unlike a machine stack pointer, the wasm user stack pointer is a global; /// variable, so it is loaded into a register in the prolog.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFrameLowering.cpp:156,variab,variable,156,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFrameLowering.cpp,1,['variab'],['variable']
Modifiability,"/// Returns true if this instruction is a debug instruction that represents an; /// identical debug value to \p Other.; /// This function considers these debug instructions equivalent if they have; /// identical variables, debug locations, and debug operands, and if the; /// DIExpressions combined with the directness flags are equivalent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:212,variab,variables,212,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,1,['variab'],['variables']
Modifiability,/// Returns true if this interface decl declares a designated initializer; /// or it inherites one from its super class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:85,inherit,inherites,85,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['inherit'],['inherites']
Modifiability,/// Returns true if we can rewrite Start as a GEP with pointer Base; /// and some integer offset. The nodes that need to be re-written; /// for this transformation will be added to Explored.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:27,rewrite,rewrite,27,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// Returns true when a selected code range is in a function-like body; /// of code, like a function, method or a block.; ///; /// This function can be used to test against selected expressions that are; /// located outside of a function, e.g. global variable initializers, default; /// argument values, or even template arguments.; ///; /// Use the \c getFunctionLikeNearestParent to get the function-like parent; /// declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/ASTSelection.h:251,variab,variable,251,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/ASTSelection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/ASTSelection.h,1,['variab'],['variable']
Modifiability,/// Returns true when the rule has a source selection requirement that has; /// to be fulfilled before refactoring can be performed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h:103,refactor,refactoring,103,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h,1,['refactor'],['refactoring']
Modifiability,"/// Returns true, if given type has a known lifetime. HasByrefExtendedLayout; /// is set to false in this case. If HasByrefExtendedLayout returns true,; /// byref variable has extended lifetime.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:163,variab,variable,163,interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h,2,"['extend', 'variab']","['extended', 'variable']"
Modifiability,/// Returns variable DIE for the address provided. The pointer is alive as; /// long as parsed compile unit DIEs are not cleared.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:12,variab,variable,12,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,1,['variab'],['variable']
Modifiability,"/// Returns what the analyzer knows about direct accesses to a particular; /// instance variable.; ///; /// If the object with this refcount wasn't originally from an Objective-C; /// ivar region, this should always return IvarAccessHistory::None.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.h:88,variab,variable,88,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountChecker.h,1,['variab'],['variable']
Modifiability,"/// Returns whether opcode \p Opc is a pre-isel generic floating-point opcode,; /// having only floating-point operands.; /// FIXME: this is copied from target AArch64. Needs some code refactor here to; /// put this function in GlobalISel/Utils.cpp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/GISel/PPCRegisterBankInfo.cpp:185,refactor,refactor,185,interpreter/llvm-project/llvm/lib/Target/PowerPC/GISel/PPCRegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/GISel/PPCRegisterBankInfo.cpp,2,['refactor'],['refactor']
Modifiability,"/// Returns whether this `Environment` can be extended to analyze the given; /// `Callee` (i.e. if `pushCall` can be used), with recursion disallowed and a; /// given `MaxDepth`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h:46,extend,extended,46,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h,1,['extend'],['extended']
Modifiability,/// Returns whether this expression refers to a global register; /// variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:69,variab,variable,69,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['variab'],['variable']
Modifiability,"/// Returns whether this function may read any global variable, and we don't; /// know which global.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp:54,variab,variable,54,interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,1,['variab'],['variable']
Modifiability,/// Returns whether this template declaration defines the primary; /// variable pattern.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:71,variab,variable,71,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['variab'],['variable']
Modifiability,"/// Returns whether variable is initialized with mismatching form of; /// \c new.; ///; /// If variable is initialized with matching form of \c new or variable is not; /// initialized with a \c new expression, this function will return true.; /// If variable is initialized with mismatching form of \c new, returns false.; /// \param D Variable to analyze.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:20,variab,variable,20,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,5,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,/// Returns whether we should create a global variable for the; /// given ValueDecl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.h:46,variab,variable,46,interpreter/llvm-project/clang/lib/AST/Interp/Context.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Context.h,1,['variab'],['variable']
Modifiability,/// Returns with Field's name. This is a helper function to get the correct name; /// even if Field is a captured lambda variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h:121,variab,variable,121,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,1,['variab'],['variable']
Modifiability,/// Reverses forced moves until the most recent level where a decision was; /// made on the assignment of a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:108,variab,variable,108,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variable']
Modifiability,"/// Rewrite GEP input to gather/scatter to enable SelectionDAGBuilder to find; /// a uniform base to use for ISD::MGATHER/MSCATTER. SelectionDAGBuilder can; /// only handle a 2 operand GEP in the same basic block or a splat constant; /// vector. The 2 operands to the GEP must have a scalar pointer and a vector; /// index.; ///; /// If the existing GEP has a vector base pointer that is splat, we can look; /// through the splat to find the scalar pointer. If we can't find a scalar; /// pointer there's nothing we can do.; ///; /// If we have a GEP with more than 2 indices where the middle indices are all; /// zeroes, we can replace it with 2 GEPs where the second has 2 operands.; ///; /// If the final index isn't a vector or is a splat, we can emit a scalar GEP; /// followed by a GEP with an all zeroes vector index. This will enable; /// SelectionDAGBuilder to use the scalar GEP as the uniform base and have a; /// zero index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['Rewrite'],['Rewrite']
Modifiability,/// Rewrite Machine Operands to use the new vreg belonging to their class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RenameIndependentSubregs.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/CodeGen/RenameIndependentSubregs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RenameIndependentSubregs.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// Rewrite a previously scheduled instruction to use the register value; /// from the new instruction. Make sure the instruction occurs in the; /// basic block, and we don't change the uses in the new instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// Rewrite a use like \c RewriteUse but handling in-block definitions.; ///; /// This version of the method can rewrite uses in the same block as; /// a definition, because it assumes that all uses of a value are below any; /// inserted values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h,3,"['Rewrite', 'rewrite']","['Rewrite', 'RewriteUse', 'rewrite']"
Modifiability,"/// Rewrite a use of the symbolic value.; ///; /// This handles PHI nodes, which use their value in the corresponding; /// predecessor. Note that this will not work if the use is supposed to be; /// rewritten to a value defined in the same block as the use, but above it.; /// Any 'AddAvailableValue's added for the use's block will be considered to; /// be below it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h,1,['Rewrite'],['Rewrite']
Modifiability,/// Rewrite all additive recurrences in a SCEV to use a new loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// Rewrite all the fixup locations with new values, following the chosen; /// solution.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// Rewrite an alloca partition's users.; ///; /// This routine drives both of the rewriting goals of the SROA pass. It tries; /// to rewrite uses of an alloca partition to be conducive for SSA value; /// promotion. If the partition needs a new, more refined alloca, this will; /// build that new alloca, preserving as much type information as possible, and; /// rewrite the uses of the old alloca to point at the new one and have the; /// appropriate new offsets. It also evaluates how successful the rewrite was; /// at enabling promotion and if it was successful queues the alloca to be; /// promoted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,4,"['Rewrite', 'rewrite']","['Rewrite', 'rewrite']"
Modifiability,"/// Rewrite as many loads as possible given a single store.; ///; /// When there is only a single store, we can use the domtree to trivially; /// replace all of the dominated loads with the stored value. Do so, and return; /// true if this has successfully promoted the alloca entirely. If this returns; /// false there were some loads which were not dominated by the single store; /// and thus must be phi-ed with undef. We fall back to the standard alloca; /// promotion algorithm in that case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// Rewrite debug value intrinsics to conform to a new SSA form.; ///; /// This will scout out all the debug value instrinsics associated with; /// the instruction. Anything outside of its block will have its; /// value set to the new SSA value if available, and undef if not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SSAUpdater.h,1,['Rewrite'],['Rewrite']
Modifiability,/// Rewrite for the base load/store of a chain.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp,1,['Rewrite'],['Rewrite']
Modifiability,/// Rewrite for the other load/stores of a chain according to the new \p; /// Base.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// Rewrite image intrinsics to use register layouts expected by the subtarget.; ///; /// Depending on the subtarget, load/store with 16-bit element data need to be; /// rewritten to use the low half of 32-bit registers, or directly use a packed; /// layout. 16-bit addresses should also sometimes be packed into 32-bit; /// registers.; ///; /// We don't want to directly select image instructions just yet, but also want; /// to exposes all register repacking to the legalizer/combiners. We also don't; /// want a selected instruction entering RegBankSelect. In order to avoid; /// defining a multitude of intermediate image instructions, directly hack on; /// the intrinsic's arguments. In cases like a16 addresses, this requires; /// padding now unnecessary arguments with $noreg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// Rewrite input constraint references after adding some output constraints.; /// In the case where there is one output and one input and we add one output,; /// we need to replace all operand references greater than or equal to 1:; /// mov $0, $1; /// mov eax, $1; /// The result will be:; /// mov $0, $2; /// mov eax, $2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// Rewrite intrinsic call \p II such that \p OldV will be replaced with \p; /// NewV, which has a different address space. This should happen for every; /// operand index that collectFlatAddressOperands returned for the intrinsic.; /// \returns nullptr if the intrinsic was not handled. Otherwise, returns the; /// new value (which may be the original \p II with modified operands).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/TargetTransformInfo.h,1,['Rewrite'],['Rewrite']
Modifiability,/// Rewrite load/store according to the common chains.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp,1,['Rewrite'],['Rewrite']
Modifiability,/// Rewrite load/store instructions in \p BucketChain according to; /// preparation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCLoopInstrFormPrep.cpp,1,['Rewrite'],['Rewrite']
Modifiability,/// Rewrite loads and stores through a pointer and all pointers derived from; /// it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['Rewrite'],['Rewrite']
Modifiability,/// Rewrite partially used register Reg by shifting all its subregisters to; /// the right and replacing the original register with a register of minimal; /// size. Return true if the change has been made.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNRewritePartialRegUses.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNRewritePartialRegUses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNRewritePartialRegUses.cpp,1,['Rewrite'],['Rewrite']
Modifiability,/// Rewrite relative include-like flag paths to absolute ones.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/clang/lib/Driver/Job.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp,1,['Rewrite'],['Rewrite']
Modifiability,/// Rewrite statements and expressions for Sema \p Actions CurContext.; ///; /// Used to wrap already parsed statements/expressions into a new CapturedStmt; /// context. DeclRefExpr used inside the new context are changed to refer to the; /// captured variable instead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,"['Rewrite', 'variab']","['Rewrite', 'variable']"
Modifiability,/// Rewrite the BranchInsts in the incoming blocks to \p PHIBlock that are found; /// in \p Included to branch to BasicBlock \p Replace if they currently branch; /// to the BasicBlock \p Find. This is used to fix up the incoming basic blocks; /// when PHINodes are included in outlined regions.; ///; /// \param PHIBlock - The BasicBlock containing the PHINodes that need to be; /// checked.; /// \param Find - The successor block to be replaced.; /// \param Replace - The new succesor block to branch to.; /// \param Included - The set of blocks about to be outlined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// Rewrite the PHI nodes in an unswitched loop exit basic block.; ///; /// Requires that the loop exit and unswitched basic block are the same, and; /// that the exiting block was a unique predecessor of that block. Rewrites the; /// PHI nodes in that block such that what were LCSSA PHI nodes become trivial; /// PHI nodes from the old preheader that now contains the unswitched; /// terminator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,2,['Rewrite'],"['Rewrite', 'Rewrites']"
Modifiability,"/// Rewrite the PHI nodes in the loop exit basic block and the split off; /// unswitched block.; ///; /// Because the exit block remains an exit from the loop, this rewrites the; /// LCSSA PHI nodes in it to remove the unswitched edge and introduces PHI; /// nodes into the unswitched basic block to select between the value in the; /// old preheader and the loop exit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,2,"['Rewrite', 'rewrite']","['Rewrite', 'rewrites']"
Modifiability,"/// Rewrite the Phi values in the specified block to use the mappings; /// from the initial operand. Once the Phi is scheduled, we switch; /// to using the loop value instead of the Phi value, so those names; /// do not need to be rewritten.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// Rewrite the current source with \p NewReg and \p NewSubReg if possible.; /// \return True if the rewriting was possible, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['Rewrite'],['Rewrite']
Modifiability,/// Rewrite the device (=GPU) code state machine create in non-SPMD mode in; /// the cases we can avoid taking the address of a function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['Rewrite'],['Rewrite']
Modifiability,/// Rewrite the function info so that all memory arguments use; /// inalloca.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// Rewrite the loop's terminating condition if it uses a max computation.; ///; /// This is a narrow solution to a specific, but acute, problem. For loops; /// like this:; ///; /// i = 0;; /// do {; /// p[i] = 0.0;; /// } while (++i < n);; ///; /// the trip count isn't just 'n', because 'n' might not be positive. And; /// unfortunately this can come up even for loops where the user didn't use; /// a C do-while loop. For example, seemingly well-behaved top-test loops; /// will commonly be lowered like this:; ///; /// if (n > 0) {; /// i = 0;; /// do {; /// p[i] = 0.0;; /// } while (++i < n);; /// }; ///; /// and then it's possible for subsequent optimization to obscure the if; /// test in such a way that indvars can't find it.; ///; /// When indvars can't find the if test in loops like this, it creates a; /// max expression, which allows it to give the loop a canonical; /// induction variable:; ///; /// i = 0;; /// max = n < 1 ? 1 : n;; /// do {; /// p[i] = 0.0;; /// } while (++i != max);; ///; /// Canonical induction variables are necessary because the loop passes; /// are designed around them. The most obvious example of this is the; /// LoopInfo analysis, which doesn't remember trip count values. It; /// expects to be able to rediscover the trip count each time it is; /// needed, and it does this using a simple analysis that only succeeds if; /// the loop has a canonical induction variable.; ///; /// However, when it comes time to generate code, the maximum operation; /// can be quite costly, especially if it's inside of an outer loop.; ///; /// This function solves this problem by detecting this type of loop and; /// rewriting their conditions from ICMP_NE back to ICMP_SLT, and deleting; /// the instructions for the maximum computation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,4,"['Rewrite', 'variab']","['Rewrite', 'variable', 'variables']"
Modifiability,/// Rewrite the null checks in NullCheckList into implicit null checks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// Rewrite the source found through \p Def, by using the \p RewriteMap; /// and create a new COPY instruction. More info about RewriteMap in; /// PeepholeOptimizer::findNextSource. Right now this is only used to handle; /// Uncoalescable copies, since they are copy like instructions that aren't; /// recognized by the register allocator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,3,['Rewrite'],"['Rewrite', 'RewriteMap']"
Modifiability,/// Rewrite virtual register locations according to the provided virtual; /// register map. Record the stack slot offsets for the locations that; /// were spilled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:4,Rewrite,Rewrite,4,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['Rewrite'],['Rewrite']
Modifiability,/// RewriteBreakStmt - Rewrite for a break-stmt inside an ObjC2's foreach; /// statement to exit to its outer synthesized loop.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteBreakStmt,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,4,['Rewrite'],"['Rewrite', 'RewriteBreakStmt']"
Modifiability,"/// RewriteBuffer - As code is rewritten, SourceBuffer's from the original; /// input with modifications get a new RewriteBuffer associated with them. The; /// RewriteBuffer captures the modified text itself as well as information used; /// to map between SourceLocation's in the original input and offsets in the; /// RewriteBuffer. For example, if text is inserted into the buffer, any; /// locations after the insertion point have to be mapped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h:4,Rewrite,RewriteBuffer,4,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteBuffer.h,4,['Rewrite'],['RewriteBuffer']
Modifiability,"/// RewriteByRefVar - For each __block typex ND variable this routine transforms; /// the declaration into:; /// struct __Block_byref_ND {; /// void *__isa; // NULL for everything except __weak pointers; /// struct __Block_byref_ND *__forwarding;; /// int32_t __flags;; /// int32_t __size;; /// void *__Block_byref_id_object_copy; // If variable is __block ObjC object; /// void *__Block_byref_id_object_dispose; // If variable is __block ObjC object; /// typex ND;; /// };; ///; /// It then replaces declaration of ND variable with:; /// struct __Block_byref_ND ND = {__isa=0B, __forwarding=&ND, __flags=some_flag,; /// __size=sizeof(struct __Block_byref_ND),; /// ND=initializer-if-any};; ///; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteByRefVar,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,10,"['Rewrite', 'variab']","['RewriteByRefVar', 'variable']"
Modifiability,/// RewriteContinueStmt - Rewrite for a continue-stmt inside an ObjC2's foreach; /// statement to continue with its inner synthesized loop.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteContinueStmt,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,4,['Rewrite'],"['Rewrite', 'RewriteContinueStmt']"
Modifiability,/// RewriteIncludesInInput - Implement -frewrite-includes mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h:4,Rewrite,RewriteIncludesInInput,4,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,1,['Rewrite'],['RewriteIncludesInInput']
Modifiability,/// RewriteInstruction - Rewrite specified instruction by replacing references; /// to old frame index with new one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp:4,Rewrite,RewriteInstruction,4,interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackSlotColoring.cpp,2,['Rewrite'],"['Rewrite', 'RewriteInstruction']"
Modifiability,/// RewriteIvarOffsetComputation - This routine synthesizes computation of; /// ivar offset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteIvarOffsetComputation,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['Rewrite'],['RewriteIvarOffsetComputation']
Modifiability,/// RewriteIvarOffsetSymbols - Rewrite ivar offset symbols of those ivars which; /// have been referenced in an ivar access expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteIvarOffsetSymbols,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['Rewrite'],"['Rewrite', 'RewriteIvarOffsetSymbols']"
Modifiability,/// RewriteLocallyDefinedNamedAggregates - This routine rewrites locally defined; /// named aggregate types into the input buffer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteLocallyDefinedNamedAggregates,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,"['Rewrite', 'rewrite']","['RewriteLocallyDefinedNamedAggregates', 'rewrites']"
Modifiability,/// RewriteMacrosInInput - Implement -rewrite-macros mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h:4,Rewrite,RewriteMacrosInInput,4,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/Rewriters.h,4,"['Rewrite', 'rewrite']","['RewriteMacrosInInput', 'rewrite-macros']"
Modifiability,/// RewriteObjCCategoryImplDecl - Rewrite metadata for each category; /// implementation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteObjCCategoryImplDecl,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,4,['Rewrite'],"['Rewrite', 'RewriteObjCCategoryImplDecl']"
Modifiability,"/// RewriteObjCFieldDecl - This routine rewrites a field into the buffer.; /// It handles elaborated types, as well as enum types in the process.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteObjCFieldDecl,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,"['Rewrite', 'rewrite']","['RewriteObjCFieldDecl', 'rewrites']"
Modifiability,"/// RewriteObjCFieldDeclType - This routine rewrites a type into the buffer.; /// It handles elaborated types, as well as enum types in the process.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteObjCFieldDeclType,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,"['Rewrite', 'rewrite']","['RewriteObjCFieldDeclType', 'rewrites']"
Modifiability,/// RewriteObjCForCollectionStmt - Rewriter for ObjC2's foreach statement.; /// It rewrites:; /// for ( type elem in collection) { stmts; }; /// Into:; /// {; /// type elem;; /// struct __objcFastEnumerationState enumState = { 0 };; /// id __rw_items[16];; /// id l_collection = (id)collection;; /// NSUInteger limit = [l_collection countByEnumeratingWithState:&enumState; /// objects:__rw_items count:16];; /// if (limit) {; /// unsigned long startMutations = *enumState.mutationsPtr;; /// do {; /// unsigned long counter = 0;; /// do {; /// if (startMutations != *enumState.mutationsPtr); /// objc_enumerationMutation(l_collection);; /// elem = (type)enumState.itemsPtr[counter++];; /// stmts;; /// __continue_label: ;; /// } while (counter < limit);; /// } while ((limit = [l_collection countByEnumeratingWithState:&enumState; /// objects:__rw_items count:16]));; /// elem = nil;; /// __break_label: ;; /// }; /// else; /// elem = nil;; /// }; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteObjCForCollectionStmt,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,3,"['Rewrite', 'rewrite']","['RewriteObjCForCollectionStmt', 'Rewriter', 'rewrites']"
Modifiability,/// RewriteObjCForCollectionStmt - Rewriter for ObjC2's foreach statement.; /// It rewrites:; /// for ( type elem in collection) { stmts; }; /// Into:; /// {; /// type elem;; /// struct __objcFastEnumerationState enumState = { 0 };; /// id __rw_items[16];; /// id l_collection = (id)collection;; /// unsigned long limit = [l_collection countByEnumeratingWithState:&enumState; /// objects:__rw_items count:16];; /// if (limit) {; /// unsigned long startMutations = *enumState.mutationsPtr;; /// do {; /// unsigned long counter = 0;; /// do {; /// if (startMutations != *enumState.mutationsPtr); /// objc_enumerationMutation(l_collection);; /// elem = (type)enumState.itemsPtr[counter++];; /// stmts;; /// __continue_label: ;; /// } while (counter < limit);; /// } while (limit = [l_collection countByEnumeratingWithState:&enumState; /// objects:__rw_items count:16]);; /// elem = nil;; /// __break_label: ;; /// }; /// else; /// elem = nil;; /// }; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp:4,Rewrite,RewriteObjCForCollectionStmt,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,3,"['Rewrite', 'rewrite']","['RewriteObjCForCollectionStmt', 'Rewriter', 'rewrites']"
Modifiability,/// RewriteObjCInternalStruct - Rewrite one internal struct corresponding to; /// an objective-c class with ivars.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteObjCInternalStruct,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,4,['Rewrite'],"['Rewrite', 'RewriteObjCInternalStruct']"
Modifiability,/// RewriteObjCProtocolExpr - Rewrite a protocol expression into; /// a synthesized/forward data reference (to the protocol's metadata).; /// The forward references (and metadata) are generated in; /// RewriteModernObjC::HandleTranslationUnit().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteObjCProtocolExpr,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,3,['Rewrite'],"['Rewrite', 'RewriteModernObjC', 'RewriteObjCProtocolExpr']"
Modifiability,/// RewriteObjCProtocolExpr - Rewrite a protocol expression into; /// a synthesized/forward data reference (to the protocol's metadata).; /// The forward references (and metadata) are generated in; /// RewriteObjC::HandleTranslationUnit().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp:4,Rewrite,RewriteObjCProtocolExpr,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,3,['Rewrite'],"['Rewrite', 'RewriteObjC', 'RewriteObjCProtocolExpr']"
Modifiability,/// RewriteObjCProtocolMetaData - Rewrite protocols meta-data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteObjCProtocolMetaData,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,4,['Rewrite'],"['Rewrite', 'RewriteObjCProtocolMetaData']"
Modifiability,/// RewriteObjCSynchronizedStmt -; /// This routine rewrites @synchronized(expr) stmt;; /// into:; /// objc_sync_enter(expr);; /// @try stmt @finally { objc_sync_exit(expr); }; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:4,Rewrite,RewriteObjCSynchronizedStmt,4,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,4,"['Rewrite', 'rewrite']","['RewriteObjCSynchronizedStmt', 'rewrites']"
Modifiability,"/// RewriteRope is a ""strong"" string class, designed to make insertions and; /// deletions in the middle of the string nearly constant time (really, they are; /// O(log N), but with a very low constant factor).; ///; /// The implementation of this datastructure is a conceptual linear sequence of; /// RopePiece elements. Each RopePiece represents a view on a separately; /// allocated and reference counted string. This means that splitting a very; /// long string can be done in constant time by splitting a RopePiece that; /// references the whole string into two rope pieces that reference each half.; /// Once split, another string can be inserted in between the two halves by; /// inserting a RopePiece in between the two others. All of this is very; /// inexpensive: it takes time proportional to the number of RopePieces, not the; /// length of the strings they represent.; ///; /// While a linear sequences of RopePieces is the conceptual model, the actual; /// implementation captures them in an adapted B+ Tree. Using a B+ tree (which; /// is a tree that keeps the values in the leaves and has where each node; /// contains a reasonable number of pointers to children/values) allows us to; /// maintain efficient operation when the RewriteRope contains a *huge* number; /// of RopePieces. The basic idea of the B+ Tree is that it allows us to find; /// the RopePiece corresponding to some offset very efficiently, and it; /// automatically balances itself on insertions of RopePieces (which can happen; /// for both insertions and erases of string ranges).; ///; /// The one wrinkle on the theory is that we don't attempt to keep the tree; /// properly balanced when erases happen. Erases of string data can both insert; /// new RopePieces (e.g. when the middle of some other rope piece is deleted,; /// which results in two rope pieces, which is just like an insert) or it can; /// reduce the number of RopePieces maintained by the B+Tree. In the case when; /// the number of RopePieces is",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp:4,Rewrite,RewriteRope,4,interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/RewriteRope.cpp,2,"['Rewrite', 'adapt']","['RewriteRope', 'adapted']"
Modifiability,"/// RewriteUse - Rewrite a use of the symbolic value. This handles PHI nodes,; /// which use their value in the corresponding predecessor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSSAUpdater.cpp:4,Rewrite,RewriteUse,4,interpreter/llvm-project/llvm/lib/CodeGen/MachineSSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSSAUpdater.cpp,2,['Rewrite'],"['Rewrite', 'RewriteUse']"
Modifiability,"/// RewriteUse - Rewrite a use of the symbolic value. This handles PHI nodes,; /// which use their value in the corresponding predecessor. Note that this; /// will not work if the use is supposed to be rewritten to a value defined in; /// the same block as the use, but above it. Any 'AddAvailableValue's added; /// for the use's block will be considered to be below it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:4,Rewrite,RewriteUse,4,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,2,['Rewrite'],"['Rewrite', 'RewriteUse']"
Modifiability,"/// RewriteUsesOfClonedInstructions - We just cloned the instructions from the; /// old header into the preheader. If there were uses of the values produced by; /// these instruction that were outside of the loop, we have to insert PHI nodes; /// to merge the two values. Do this now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp:4,Rewrite,RewriteUsesOfClonedInstructions,4,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,1,['Rewrite'],['RewriteUsesOfClonedInstructions']
Modifiability,/// Rewriter - This is the main interface to the rewrite buffers. Its primary; /// job is to dispatch high-level requests to the low-level RewriteBuffers that; /// are involved.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h:4,Rewrite,Rewriter,4,interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/Rewriter.h,3,"['Rewrite', 'rewrite']","['RewriteBuffers', 'Rewriter', 'rewrite']"
Modifiability,/// Rewriter for COPY instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:4,Rewrite,Rewriter,4,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['Rewrite'],['Rewriter']
Modifiability,/// Rewriter playground,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:4,Rewrite,Rewriter,4,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['Rewrite'],['Rewriter']
Modifiability,"/// Rewrites \p S in the context of a loop L and the SCEV predication; /// infrastructure.; ///; /// If \p Pred is non-null, the SCEV expression is rewritten to respect the; /// equivalences present in \p Pred.; ///; /// If \p NewPreds is non-null, rewrite is free to add further predicates to; /// \p NewPreds such that the result will be an AddRecExpr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:4,Rewrite,Rewrites,4,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,"['Rewrite', 'rewrite']","['Rewrites', 'rewrite']"
Modifiability,/// Rewrites the kernel block in-place to adhere to the given schedule.; /// KernelRewriter holds all of the state required to perform the rewriting.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp:4,Rewrite,Rewrites,4,interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,1,['Rewrite'],['Rewrites']
Modifiability,/// Roles a token can take in a configured macro expansion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h:32,config,configured,32,interpreter/llvm-project/clang/lib/Format/FormatToken.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h,1,['config'],['configured']
Modifiability,"/// Run a plugin action, \see ActionName.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:10,plugin,plugin,10,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['plugin'],['plugin']
Modifiability,"/// Run numeric integrations using RooRombergIntegrator and ROOT's adaptive integrator. Ensure that; /// they reach the requested precision.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:67,adapt,adaptive,67,roofit/roofitcore/test/testRooRombergIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx,1,['adapt'],['adaptive']
Modifiability,"/// Run the analysis, adding variable location info to \p FnVarLocs. Returns; /// true if any variable locations have been added to FnVarLocs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:29,variab,variable,29,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,['variab'],['variable']
Modifiability,"/// Run the analyzer's garbage collection - remove dead symbols and; /// bindings from the state.; ///; /// Checkers can participate in this process with two callbacks:; /// \c checkLiveSymbols and \c checkDeadSymbols. See the CheckerDocumentation; /// class for more information.; ///; /// \param Node The predecessor node, from which the processing should start.; /// \param Out The returned set of output nodes.; /// \param ReferenceStmt The statement which is about to be processed.; /// Everything needed for this statement should be considered live.; /// A null statement means that everything in child LocationContexts; /// is dead.; /// \param LC The location context of the \p ReferenceStmt. A null location; /// context means that we have reached the end of analysis and that; /// all statements and local variables should be considered dead.; /// \param DiagnosticStmt Used as a location for any warnings that should; /// occur while removing the dead (e.g. leaks). By default, the; /// \p ReferenceStmt is used.; /// \param K Denotes whether this is a pre- or post-statement purge. This; /// must only be ProgramPoint::PostStmtPurgeDeadSymbolsKind if an; /// entire location context is being cleared, in which case the; /// \p ReferenceStmt must either be a ReturnStmt or \c NULL. Otherwise,; /// it must be ProgramPoint::PreStmtPurgeDeadSymbolsKind (the default); /// and \p ReferenceStmt must be valid (non-null).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:816,variab,variables,816,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['variab'],['variables']
Modifiability,"/// Run the wrapper pass to rebuild an aggregation over known AA passes.; ///; /// This is the legacy pass manager's interface to the new-style AA results; /// aggregation object. Because this is somewhat shoe-horned into the legacy; /// pass manager, we hard code all the specific alias analyses available into; /// it. While the particular set enabled is configured via commandline flags,; /// adding a new alias analysis to LLVM will require adding support for it to; /// this list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp:357,config,configured,357,interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AliasAnalysis.cpp,1,['config'],['configured']
Modifiability,"/// Runs the give refactoring function for each specified selection.; ///; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp:18,refactor,refactoring,18,interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/ClangRefactor.cpp,1,['refactor'],['refactoring']
Modifiability,"/// SELECT_CC - Operand 0 and operand 1 are selection variable, operand 3; /// is condition code and operand 4 is flag operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.h:54,variab,variable,54,interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MSP430ISelLowering.h,1,['variab'],['variable']
Modifiability,"/// SIGN_EXTEND_INREG - This operator atomically performs a SHL/SRA pair to; /// sign extend a small value in a large integer register (e.g. sign; /// extending the low 8 bits of a 32-bit register to fill the top 24 bits; /// with the 7th bit). The size of the smaller type is indicated by the 1th; /// operand, a ValueType node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:86,extend,extend,86,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,2,['extend'],"['extend', 'extending']"
Modifiability,"/// SIGN_EXTEND_VECTOR_INREG(Vector) - This operator represents an; /// in-register sign-extension of the low lanes of an integer vector. The; /// result type must have fewer elements than the operand type, and those; /// elements must be larger integer types such that the total size of the; /// operand type is less than or equal to the size of the result type. Each; /// of the low operand elements is sign-extended into the corresponding,; /// wider result elements.; /// NOTE: The type legalizer prefers to make the operand and result size; /// the same to allow expansion to shuffle vector during op legalization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h:410,extend,extended,410,interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ISDOpcodes.h,1,['extend'],['extended']
Modifiability,/// S_THREAD_LOCAL_INIT_FUNCTION_POINTERS - Section with thread local; /// variable initialization pointers to functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:75,variab,variable,75,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['variab'],['variable']
Modifiability,/// S_THREAD_LOCAL_VARIABLES - Section with thread local variable; /// structure data.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:57,variab,variable,57,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['variab'],['variable']
Modifiability,"/// SampleProfileReaderExtBinaryBase/SampleProfileWriterExtBinaryBase defines; /// the basic structure of the extensible binary format.; /// The format is organized in sections except the magic and version number; /// at the beginning. There is a section table before all the sections, and; /// each entry in the table describes the entry type, start, size and; /// attributes. The format in each section is defined by the section itself.; ///; /// It is easy to add a new section while maintaining the backward; /// compatibility of the profile. Nothing extra needs to be done. If we want; /// to extend an existing section, like add cache misses information in; /// addition to the sample count in the profile body, we can add a new section; /// with the extension and retire the existing section, and we could choose; /// to keep the parser of the old section if we want the reader to be able; /// to read both new and old format profile.; ///; /// SampleProfileReaderExtBinary/SampleProfileWriterExtBinary define the; /// commonly used sections of a profile in extensible binary format. It is; /// possible to define other types of profile inherited from; /// SampleProfileReaderExtBinaryBase/SampleProfileWriterExtBinaryBase.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h:598,extend,extend,598,interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/SampleProfReader.h,2,"['extend', 'inherit']","['extend', 'inherited']"
Modifiability,/// Scans the list of requirements in a rule and visits all the refactoring; /// options that are used by all the requirements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRulesInternal.h:64,refactor,refactoring,64,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRulesInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRulesInternal.h,1,['refactor'],['refactoring']
Modifiability,/// Scheduling class.; ///; /// Each instruction description will be mapped to a scheduling class. There are; /// four types of classes:; ///; /// 1) An explicitly defined itinerary class with ItinClassDef set.; /// Writes and ReadDefs are empty. ProcIndices contains 0 for any processor.; ///; /// 2) An implied class with a list of SchedWrites and SchedReads that are; /// defined in an instruction definition and which are common across all; /// subtargets. ProcIndices contains 0 for any processor.; ///; /// 3) An implied class with a list of InstRW records that map instructions to; /// SchedWrites and SchedReads per-processor. InstrClassMap should map the same; /// instructions to this class. ProcIndices contains all the processors that; /// provided InstrRW records for this class. ItinClassDef or Writes/Reads may; /// still be defined for processors with no InstRW entry.; ///; /// 4) An inferred class represents a variant of another class that may be; /// resolved at runtime. ProcIndices contains the set of processors that may; /// require the class. ProcIndices are propagated through SchedClasses as; /// variants are expanded. Multiple SchedClasses may be inferred from an; /// itinerary class. Each inherits the processor index from the ItinRW record; /// that mapped the itinerary class to the variant Writes or Reads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h:1220,inherit,inherits,1220,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h,1,['inherit'],['inherits']
Modifiability,/// Scope chain managing the variable lifetimes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h:29,variab,variable,29,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.h,1,['variab'],['variable']
Modifiability,/// Scope used to handle temporaries in toplevel variable declarations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,1,['variab'],['variable']
Modifiability,"/// Search for subprograms and variables referencing live code and discover; /// dependend DIEs. Mark live DIEs, set placement for DIEs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h:31,variab,variables,31,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.h,1,['variab'],['variables']
Modifiability,"/// Searches the expression that computes V for a non-zero constant C s.t.; /// V can be reassociated into the form V' + C. If the searching is; /// successful, returns C and update UserChain as a def-use chain from C to V;; /// otherwise, UserChain is empty.; ///; /// \p V The given expression; /// \p SignExtended Whether V will be sign-extended in the computation of the; /// GEP index; /// \p ZeroExtended Whether V will be zero-extended in the computation of the; /// GEP index; /// \p NonNegative Whether V is guaranteed to be non-negative. For example,; /// an index of an inbounds GEP is guaranteed to be; /// non-negative. Levaraging this, we can better split; /// inbounds GEPs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:340,extend,extended,340,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,2,['extend'],['extended']
Modifiability,"/// SectionKind - This is a simple POD value that classifies the properties of; /// a section. A section is classified into the deepest possible; /// classification, and then the target maps them onto their sections based on; /// what capabilities they have.; ///; /// The comments below describe these as if they were an inheritance hierarchy; /// in order to explain the predicates below.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h:322,inherit,inheritance,322,interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/SectionKind.h,1,['inherit'],['inheritance']
Modifiability,"/// See if \p I should be considered for address type promotion. We check if \p; /// I is a sext with right type and used in memory accesses. If it used in a; /// ""complex"" getelementptr, we allow it to be promoted without finding other; /// sext instructions that sign extended the same initial value. A getelementptr; /// is considered as ""complex"" if it has more than 2 operands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:270,extend,extended,270,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extended']
Modifiability,/// See if there are any new constant values for the callers of \p F via; /// stack variables and promote them to global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h:84,variab,variables,84,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionSpecialization.h,2,['variab'],['variables']
Modifiability,"/// Select an ""extended register"" operand. This operand folds in an extend; /// followed by an optional left shift.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:15,extend,extended,15,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"/// SelectArithExtendedRegister - Select a ""extended register"" operand. This; /// operand folds in an extend followed by an optional left shift.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:44,extend,extended,44,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"/// SelectPropertyForSynthesisFromProtocols - Finds the most appropriate; /// property declaration that should be synthesised in all of the inherited; /// protocols. It also diagnoses properties declared in inherited protocols with; /// mismatched types or attributes, since any of them can be candidate for; /// synthesis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp:140,inherit,inherited,140,interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaObjCProperty.cpp,2,['inherit'],['inherited']
Modifiability,"/// Separated Dwarf Variables; /// In general these will all be for bits that are left in the; /// original object file, rather than things that are meant; /// to be in the .dwo sections.; /// Holder for the skeleton information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:20,Variab,Variables,20,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,1,['Variab'],['Variables']
Modifiability,"/// Separator format of integer literals of different bases.; ///; /// If negative, remove separators. If ``0``, leave the literal as is. If; /// positive, insert separators between digits starting from the rightmost; /// digit.; ///; /// For example, the config below will leave separators in binary literals; /// alone, insert separators in decimal literals to separate the digits into; /// groups of 3, and remove separators in hexadecimal literals.; /// \code; /// IntegerLiteralSeparator:; /// Binary: 0; /// Decimal: 3; /// Hex: -1; /// \endcode; ///; /// You can also specify a minimum number of digits (``BinaryMinDigits``,; /// ``DecimalMinDigits``, and ``HexMinDigits``) the integer literal must; /// have in order for the separators to be inserted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:256,config,config,256,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['config'],['config']
Modifiability,/// Serializable representation of the MCRegister variant of; /// MachineFunction::VariableDbgInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h:83,Variab,VariableDbgInfo,83,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h,1,['Variab'],['VariableDbgInfo']
Modifiability,/// Set LocKind for \p Var only: does not set LocKind for VariableIDs of; /// fragments contained win \p Var.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:58,Variab,VariableIDs,58,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['Variab'],['VariableIDs']
Modifiability,"/// Set TargetOptions.; ///; /// Note: This operation will overwrite any previously configured options,; /// including EmulatedTLS and UseInitArray which the JITTargetMachineBuilder; /// sets by default. Clients are responsible for re-enabling these overwritten; /// options.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h:84,config,configured,84,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/JITTargetMachineBuilder.h,1,['config'],['configured']
Modifiability,"/// Set a setup function for the process symbols dylib. If not provided,; /// but LinkProcessSymbolsJITDylibByDefault is true, then the process-symbols; /// JITDylib will be configured with a DynamicLibrarySearchGenerator with a; /// default symbol filter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:174,config,configured,174,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,1,['config'],['configured']
Modifiability,/// Set a setup function to be run just before the PlatformSetupFunction is; /// run.; ///; /// This can be used to customize the LLJIT instance before the platform is; /// set up. E.g. By installing a debugger support plugin before the platform; /// is set up (when the ORC runtime is loaded) we enable debugging of the; /// runtime itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:219,plugin,plugin,219,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,1,['plugin'],['plugin']
Modifiability,"/// Set additional minimizer options as pair of (string,value).; /// Extra option defaults can be configured for a specific algorithm and; /// then if a matching with the correct option name exists it will be used; /// whenever creating a new minimizer instance.; /// For example for changing the default number of steps of the Genetic minimizer from 100 to 500 do; ///; /// auto extraOpt = ROOT::Math::MinimizerOptions::Default(""Genetic""); /// extraOpts.SetValue(""Steps"",500);; ///; /// and when creating the Genetic minimizer you will have the new value for the option:; ///; /// auto gmin = ROOT::Math::Factory::CreateMinimizer(""Genetic"");; /// gmin->Options().Print();; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimizerOptions.h:98,config,configured,98,math/mathcore/inc/Math/MinimizerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimizerOptions.h,1,['config'],['configured']
Modifiability,"/// Set attributes which are common to any form of a global definition (alias,; /// Objective-C method, function, global variable).; ///; /// NOTE: This should only be called for definitions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:121,variab,variable,121,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variable']
Modifiability,/// Set forced language options.; ///; /// Apply changes to the target information with respect to certain; /// language options which change the target configuration and adjust; /// the language based on the target options where applicable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:153,config,configuration,153,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['config'],['configuration']
Modifiability,"/// Set list of helper assignment expressions, required for proper; /// codegen of the clause. These expressions are assignment expressions that; /// assign private copy of the variable to original variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:177,variab,variable,177,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variable']
Modifiability,"/// Set list of helper expressions, required for generation of private; /// copies of original lastprivate variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:107,variab,variables,107,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,"/// Set list of helper expressions, required for proper codegen of the clause.; /// These expressions represent RHS expression in the final reduction; /// expression performed by the reduction clause. Also, variables in these; /// expressions are used for proper initialization of reduction copies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:207,variab,variables,207,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,"/// Set list of helper expressions, required for proper codegen of the clause.; /// These expressions represent private copy of the reduction variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:142,variab,variable,142,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variable']
Modifiability,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent RHS expression in the final; /// reduction expression performed by the reduction clause.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:212,variab,variables,212,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent original variables (for arrays, single; /// array element) in the final assignment statement performed by the; /// lastprivate clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:121,variab,variables,121,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent private copy of the reduction; /// variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:147,variab,variable,147,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variable']
Modifiability,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent private variables (for arrays, single; /// array element) in the final assignment statement performed by the; /// lastprivate clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:120,variab,variables,120,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,"/// Set of all first private variables in the current directive.; /// bool data is set to true if the variable is implicitly marked as; /// firstprivate, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:29,variab,variables,29,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,/// Set of declare target variables with the generated initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,variab,variables,26,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variables']
Modifiability,/// Set of threadprivate variables with the generated initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:25,variab,variables,25,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variables']
Modifiability,/// Set that the default argument was inherited from another parameter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:38,inherit,inherited,38,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['inherit'],['inherited']
Modifiability,/// Set that this base class's constructors should be inherited.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:54,inherit,inherited,54,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inherited']
Modifiability,/// Set that this default argument was inherited from another; /// parameter.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:39,inherit,inherited,39,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['inherit'],['inherited']
Modifiability,"/// Set the Context runtime configuration to discard all value name (but; /// GlobalValue). Clients can use this flag to save memory and runtime,; /// especially in release mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:28,config,configuration,28,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,1,['config'],['configuration']
Modifiability,"/// Set the Lattice Value for the arguments of a specialization \p F.; /// If an argument is Constant then its lattice value is marked with the; /// corresponding actual argument in \p Args. Otherwise, its lattice value; /// is inherited (copied) from the corresponding formal argument in \p Args.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h:228,inherit,inherited,228,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SCCPSolver.h,1,['inherit'],['inherited']
Modifiability,/// Set the TLS mode for the given LLVM GlobalValue for the thread-local; /// variable declaration D.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:78,variab,variable,78,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variable']
Modifiability,/// Set the address of a local variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:31,variab,variable,31,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,/// Set the assignment in the \p Kind assignment map for \p Var only: does; /// not set the assignment for VariableIDs of fragments contained win \p; /// Var.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:107,Variab,VariableIDs,107,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['Variab'],['VariableIDs']
Modifiability,/// Set the base path of a built module file to be the current working; /// directory. This is useful for sharing module files across machines; /// that build with different paths without having to rewrite all; /// modulemap files to have working directory relative paths.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h:198,rewrite,rewrite,198,interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h,1,['rewrite'],['rewrite']
Modifiability,/// Set the captured variable length array type for this field.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:21,variab,variable,21,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Set the clang variable associated with this Phi node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:18,variab,variable,18,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['variab'],['variable']
Modifiability,/// Set the condition variable for this if statement.; /// The if statement must have storage for the condition variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,2,['variab'],['variable']
Modifiability,/// Set the condition variable in this switch statement.; /// The switch statement must have storage for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,/// Set the condition variable of this while statement.; /// The while statement must have storage for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,/// Set the consumed state of a given variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h:38,variab,variable,38,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/Consumed.h,1,['variab'],['variable']
Modifiability,/// Set the decomposed variable for this BindingDecl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:23,variab,variable,23,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['variab'],['variable']
Modifiability,"/// Set the default argument for this template parameter, and; /// whether that default argument was inherited from another; /// declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:101,inherit,inherited,101,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,['inherit'],['inherited']
Modifiability,"/// Set the desired order for executing tasks of a Job.; ///; /// See Config::Queue::suggestTaskOrder.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/PriorityQueue.cxx:70,Config,Config,70,roofit/multiprocess/src/PriorityQueue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/PriorityQueue.cxx,1,['Config'],['Config']
Modifiability,/// Set the interop variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:20,variab,variable,20,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variable']
Modifiability,"/// Set the left side tail fraction. This will automatically configure the; /// MCMCInterval to find a tail-fraction interval.; /// Note: that `a' must be in the range 0 <= a <= 1; /// or the user will be notified of the error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h:61,config,configure,61,roofit/roostats/inc/RooStats/MCMCCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MCMCCalculator.h,1,['config'],['configure']
Modifiability,/// Set the object which can disable optional passes and individual; /// optimizations at compile time.; ///; /// The lifetime of the object must be guaranteed to extend as long as the; /// LLVMContext is used by compilation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h:163,extend,extend,163,interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/LLVMContext.h,2,['extend'],['extend']
Modifiability,"/// Set the priority for Job tasks.; ///; /// See Config::Queue::setTaskPriorities.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/PriorityQueue.cxx:50,Config,Config,50,roofit/multiprocess/src/PriorityQueue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/PriorityQueue.cxx,1,['Config'],['Config']
Modifiability,/// Set the record declaration for captured variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:44,variab,variables,44,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variables']
Modifiability,/// Set the section that this DIEUnit will be emitted into.; ///; /// This function is used by some clients to set the section. Not all clients; /// that emit DWARF use this section variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h:182,variab,variable,182,interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,1,['variab'],['variable']
Modifiability,/// Set the variable declared in the mapper,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,1,['variab'],['variable']
Modifiability,"/// Set the variable that might be used for the named return value; /// optimization. The return statement must have storage for it,; /// which is the case if and only if hasNRVOCandidate() is true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:12,variab,variable,12,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,/// Set to keep the enclosing function for a static variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h:52,variab,variable,52,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerImpl.h,1,['variab'],['variable']
Modifiability,/// Set type used to track multiply used variables in patterns,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:41,variab,variables,41,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,1,['variab'],['variables']
Modifiability,/// Set up an PlatformSetupFunction.; ///; /// If this method is not called then setUpGenericLLVMIRPlatform; /// will be used to configure the JIT's platform support.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h:129,config,configure,129,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/LLJIT.h,1,['config'],['configure']
Modifiability,/// Set whether to keep the enclosing function for a static variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h:60,variab,variable,60,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/DWARFLinkerBase.h,2,['variab'],['variable']
Modifiability,"/// Sets the address of the variable \p LocalVD to be \p TempAddr in; /// function \p CGF.; /// \return true if at least one variable was set already, false otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:28,variab,variable,28,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,2,['variab'],['variable']
Modifiability,"/// Sets the environment to be used by the new process.; /// \param NewEnvironment An array of environment variables.; /// \remark If the environment remains unset, then the environment; /// from the parent process will be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h:107,variab,variables,107,interpreter/llvm-project/clang/include/clang/Driver/Job.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Job.h,1,['variab'],['variables']
Modifiability,"/// Sets the extended token mode back to its initial value, according to the; /// language options and preprocessor. This controls whether the lexer; /// produces comment and whitespace tokens.; ///; /// This requires the lexer to have an associated preprocessor. A standalone; /// lexer has nothing to reset to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h:13,extend,extended,13,interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Lexer.h,1,['extend'],['extended']
Modifiability,/// Sets the list of debuginfod server URLs to query. This overrides the; /// environment variable DEBUGINFOD_URLS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h:90,variab,variable,90,interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Debuginfod/Debuginfod.h,1,['variab'],['variable']
Modifiability,/// Sets the list of final update expressions for linear variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:57,variab,variables,57,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Sets the list of final update expressions for linear variables.; /// \param FL List of expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:57,variab,variables,57,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Sets the list of references to initializer variables for new private; /// variables.; /// \param VL List of references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:47,variab,variables,47,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Sets the list of references to initializer variables for new; /// private variables.; /// \param VL List of references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:47,variab,variables,47,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Sets the list of references to private copies with initializers for new; /// private variables.; /// \param VL List of references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:89,variab,variables,89,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Sets the list of references to private copies with initializers for; /// new private variables.; /// \param VL List of references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:89,variab,variables,89,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variables']
Modifiability,/// Sets the list of the copies of original linear variables.; /// \param PL List of expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:51,variab,variables,51,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Sets the list of the initial values for linear variables.; /// \param IL List of expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:51,variab,variables,51,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Sets the list of update expressions for linear variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:51,variab,variables,51,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Sets the list of update expressions for linear variables.; /// \param UL List of expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:51,variab,variables,51,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Sets the list of variables for this clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:21,variab,variables,21,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Sets the list of variables for this clause.; ///; /// \param Clauses The list of clauses for the directive.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:21,variab,variables,21,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// Sets the location of the interop variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:37,variab,variable,37,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,3,['variab'],['variable']
Modifiability,/// Sets the task_reduction return variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:35,variab,variable,35,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,/// Sets up the specified scope flags and adjusts the scope state; /// variables accordingly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:71,variab,variables,71,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h,1,['variab'],['variables']
Modifiability,"/// Sets value of this numeric variable to \p NewValue, and sets the input; /// buffer string from which it was parsed to \p NewStrValue. See comments on; /// getStringValue for a discussion of when the latter can be std::nullopt.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:31,variab,variable,31,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,/// Several SCEV types are sequences of the same arithmetic operator applied; /// to constants and values that may be extended or truncated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:118,extend,extended,118,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['extend'],['extended']
Modifiability,/// Should this attribute be inherited from a prior declaration even if it's; /// explicitly provided in the current declaration?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Attr.h:29,inherit,inherited,29,interpreter/llvm-project/clang/include/clang/AST/Attr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Attr.h,1,['inherit'],['inherited']
Modifiability,/// Should value-tracking variable locations / instruction referencing be; /// enabled by default for this triple?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CommandFlags.h:26,variab,variable,26,interpreter/llvm-project/llvm/include/llvm/CodeGen/CommandFlags.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CommandFlags.h,1,['variab'],['variable']
Modifiability,"/// Should we consider visibility associated with the template; /// arguments and parameters of the given variable template; /// specialization? As usual, follow class template specialization; /// logic up to initialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:106,variab,variable,106,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variable']
Modifiability,"/// ShuffleVectorExpr - clang-specific builtin-in function; /// __builtin_shufflevector.; /// This AST node represents a operator that does a constant; /// shuffle, similar to LLVM's shufflevector instruction. It takes; /// two vectors and a variable number of constant indices,; /// and returns the appropriately shuffled vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:242,variab,variable,242,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['variab'],['variable']
Modifiability,/// Shuffles \p Mask in accordance with the given \p SubMask.; /// \param ExtendingManyInputs Supports reshuffling of the mask with not only; /// one but two input vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:74,Extend,ExtendingManyInputs,74,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['Extend'],['ExtendingManyInputs']
Modifiability,"/// Sign extend or truncate to width; ///; /// Make this APInt have the bit width given by \p width. The value is sign; /// extended, truncated, or left alone to make it that width.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:9,extend,extend,9,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,['extend'],"['extend', 'extended']"
Modifiability,"/// Sign extend to a new width.; ///; /// This operation sign extends the APInt to a new width. If the high order; /// bit is set, the fill on the left will be done with 1 bits, otherwise zero.; /// It is an error to specify a width that is less than the; /// current width.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h:9,extend,extend,9,interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APInt.h,2,['extend'],"['extend', 'extends']"
Modifiability,/// Sign of the iteration variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,variab,variable,26,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,/// Sign-extend the number in the bottom B bits of X to a 32-bit integer.; /// Requires 0 < B <= 32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:9,extend,extend,9,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,2,['extend'],['extend']
Modifiability,/// Sign-extend the number in the bottom B bits of X to a 64-bit integer.; /// Requires 0 < B <= 64.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h:9,extend,extend,9,interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/MathExtras.h,2,['extend'],['extend']
Modifiability,/// Sign-extends 16-bit elements from the 128-bit vector of [8 x i16] in; /// \a __V and returns the 32-bit values in the corresponding elements of a; /// 256-bit vector of [8 x i32].; ///; /// \code{.operation}; /// FOR i := 0 TO 7; /// j := i*16; /// k := i*32; /// result[k+31:k] := SignExtend(__V[j+15:j]); /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMOVSXWD instruction.; ///; /// \param __V; /// A 128-bit vector of [8 x i16] containing the source values.; /// \returns A 256-bit vector of [8 x i32] containing the sign-extended; /// values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:9,extend,extends,9,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['extend'],"['extended', 'extends']"
Modifiability,/// Sign-extends 16-bit elements from the lower half of the 128-bit vector of; /// [8 x i16] in \a __V and returns the 64-bit values in the corresponding; /// elements of a 256-bit vector of [4 x i64].; ///; /// \code{.operation}; /// result[63:0] := SignExtend(__V[15:0]); /// result[127:64] := SignExtend(__V[31:16]); /// result[191:128] := SignExtend(__V[47:32]); /// result[255:192] := SignExtend(__V[64:48]); /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMOVSXWQ instruction.; ///; /// \param __V; /// A 128-bit vector of [8 x i16] containing the source values.; /// \returns A 256-bit vector of [4 x i64] containing the sign-extended; /// values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:9,extend,extends,9,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['extend'],"['extended', 'extends']"
Modifiability,/// Sign-extends 32-bit elements from the 128-bit vector of [4 x i32] in; /// \a __V and returns the 64-bit values in the corresponding elements of a; /// 256-bit vector of [4 x i64].; ///; /// \code{.operation}; /// result[63:0] := SignExtend(__V[31:0]); /// result[127:64] := SignExtend(__V[63:32]); /// result[191:128] := SignExtend(__V[95:64]); /// result[255:192] := SignExtend(__V[127:96]); /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMOVSXDQ instruction.; ///; /// \param __V; /// A 128-bit vector of [4 x i32] containing the source values.; /// \returns A 256-bit vector of [4 x i64] containing the sign-extended; /// values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:9,extend,extends,9,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['extend'],"['extended', 'extends']"
Modifiability,/// Sign-extends bytes from the 128-bit integer vector in \a __V and returns; /// the 16-bit values in the corresponding elements of a 256-bit vector; /// of [16 x i16].; ///; /// \code{.operation}; /// FOR i := 0 TO 15; /// j := i*8; /// k := i*16; /// result[k+15:k] := SignExtend(__V[j+7:j]); /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMOVSXBW instruction.; ///; /// \param __V; /// A 128-bit integer vector containing the source bytes.; /// \returns A 256-bit vector of [16 x i16] containing the sign-extended; /// values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:9,extend,extends,9,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['extend'],"['extended', 'extends']"
Modifiability,/// Sign-extends bytes from the lower half of the 128-bit integer vector in; /// \a __V and returns the 32-bit values in the corresponding elements of a; /// 256-bit vector of [8 x i32].; ///; /// \code{.operation}; /// FOR i := 0 TO 7; /// j := i*8; /// k := i*32; /// result[k+31:k] := SignExtend(__V[j+7:j]); /// ENDFOR; /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMOVSXBD instruction.; ///; /// \param __V; /// A 128-bit integer vector containing the source bytes.; /// \returns A 256-bit vector of [8 x i32] containing the sign-extended; /// values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:9,extend,extends,9,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['extend'],"['extended', 'extends']"
Modifiability,/// Sign-extends each of the lower four 16-bit integer elements of a; /// 128-bit integer vector of [8 x i16] to 32-bit values and returns them in; /// a 128-bit vector of [4 x i32]. The upper four elements of the input; /// vector are unused.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VPMOVSXWD / PMOVSXWD </c> instruction.; ///; /// \param __V; /// A 128-bit vector of [8 x i16]. The lower four 16-bit elements are; /// sign-extended to 32-bit values.; /// \returns A 128-bit vector of [4 x i32] containing the sign-extended values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h:9,extend,extends,9,interpreter/llvm-project/clang/lib/Headers/smmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h,3,['extend'],"['extended', 'extends']"
Modifiability,/// Sign-extends each of the lower four 8-bit integer elements of a; /// 128-bit vector of [16 x i8] to 32-bit values and returns them in a; /// 128-bit vector of [4 x i32]. The upper twelve elements of the input; /// vector are unused.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VPMOVSXBD / PMOVSXBD </c> instruction.; ///; /// \param __V; /// A 128-bit vector of [16 x i8]. The lower four 8-bit elements are; /// sign-extended to 32-bit values.; /// \returns A 128-bit vector of [4 x i32] containing the sign-extended values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h:9,extend,extends,9,interpreter/llvm-project/clang/lib/Headers/smmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h,3,['extend'],"['extended', 'extends']"
Modifiability,/// Sign-extends each of the lower two 16-bit integer elements of a; /// 128-bit integer vector of [8 x i16] to 64-bit values and returns them in; /// a 128-bit vector of [2 x i64]. The upper six elements of the input; /// vector are unused.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VPMOVSXWQ / PMOVSXWQ </c> instruction.; ///; /// \param __V; /// A 128-bit vector of [8 x i16]. The lower two 16-bit elements are; /// sign-extended to 64-bit values.; /// \returns A 128-bit vector of [2 x i64] containing the sign-extended values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h:9,extend,extends,9,interpreter/llvm-project/clang/lib/Headers/smmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h,3,['extend'],"['extended', 'extends']"
Modifiability,/// Sign-extends each of the lower two 32-bit integer elements of a; /// 128-bit integer vector of [4 x i32] to 64-bit values and returns them in; /// a 128-bit vector of [2 x i64]. The upper two elements of the input vector; /// are unused.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VPMOVSXDQ / PMOVSXDQ </c> instruction.; ///; /// \param __V; /// A 128-bit vector of [4 x i32]. The lower two 32-bit elements are; /// sign-extended to 64-bit values.; /// \returns A 128-bit vector of [2 x i64] containing the sign-extended values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h:9,extend,extends,9,interpreter/llvm-project/clang/lib/Headers/smmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h,3,['extend'],"['extended', 'extends']"
Modifiability,/// Sign-extends each of the lower two 8-bit integer elements of a; /// 128-bit integer vector of [16 x i8] to 64-bit values and returns them in; /// a 128-bit vector of [2 x i64]. The upper fourteen elements of the input; /// vector are unused.; ///; /// \headerfile <x86intrin.h>; ///; /// This intrinsic corresponds to the <c> VPMOVSXBQ / PMOVSXBQ </c> instruction.; ///; /// \param __V; /// A 128-bit vector of [16 x i8]. The lower two 8-bit elements are; /// sign-extended to 64-bit values.; /// \returns A 128-bit vector of [2 x i64] containing the sign-extended values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h:9,extend,extends,9,interpreter/llvm-project/clang/lib/Headers/smmintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/smmintrin.h,3,['extend'],"['extended', 'extends']"
Modifiability,/// Sign-extends the first four bytes from the 128-bit integer vector in; /// \a __V and returns the 64-bit values in the corresponding elements of a; /// 256-bit vector of [4 x i64].; ///; /// \code{.operation}; /// result[63:0] := SignExtend(__V[7:0]); /// result[127:64] := SignExtend(__V[15:8]); /// result[191:128] := SignExtend(__V[23:16]); /// result[255:192] := SignExtend(__V[31:24]); /// \endcode; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the \c VPMOVSXBQ instruction.; ///; /// \param __V; /// A 128-bit integer vector containing the source bytes.; /// \returns A 256-bit vector of [4 x i64] containing the sign-extended; /// values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h:9,extend,extends,9,interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avx2intrin.h,2,['extend'],"['extended', 'extends']"
Modifiability,"/// Similar to SCEV::NoWrapFlags, but with slightly different semantics; /// for FlagNUSW. The increment is considered to be signed, and a + b; /// (where b is the increment) is considered to wrap if:; /// zext(a + b) != zext(a) + sext(b); ///; /// If Signed is a function that takes an n-bit tuple and maps to the; /// integer domain as the tuples value interpreted as twos complement,; /// and Unsigned a function that takes an n-bit tuple and maps to the; /// integer domain as the base two value of input tuple, then a + b; /// has IncrementNUSW iff:; ///; /// 0 <= Unsigned(a) + Signed(b) < 2^n; ///; /// The IncrementNSSW flag has identical semantics with SCEV::FlagNSW.; ///; /// Note that the IncrementNUSW flag is not commutative: if base + inc; /// has IncrementNUSW, then inc + base doesn't neccessarily have this; /// property. The reason for this is that this is used for sign/zero; /// extending affine AddRec SCEV expressions when a SCEVWrapPredicate is; /// assumed. A {base,+,inc} expression is already non-commutative with; /// regards to base and inc, since it is interpreted as:; /// (((base + inc) + inc) + inc) ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:900,extend,extending,900,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['extend'],['extending']
Modifiability,"/// Similar to isLocalVarDecl, but excludes variables declared in blocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:44,variab,variables,44,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variables']
Modifiability,"/// Simple on-disk locators consisting of a 64-bit offset use variant type `uint64_t`; extended locators have; /// `fPosition.index()` > 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx:87,extend,extended,87,tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,1,['extend'],['extended']
Modifiability,/// Simple wrapper that does the following.; /// 1) Lazily evaluate the MachineFunction to compute CSEable instructions.; /// 2) Allows configuration of which instructions are CSEd through CSEConfig; /// object. Provides a method called get which takes a CSEConfig object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:136,config,configuration,136,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,1,['config'],['configuration']
Modifiability,"/// Simplified version of the above ""extendInBlock"", which assumes that; /// no register lanes are undefined by <def,read-undef> operands.; /// If this range is live before @p Use in the basic block that starts; /// at @p StartIdx, extend it to be live up to @p Use, and return the; /// value. If there is no segment before @p Use, return nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h:37,extend,extendInBlock,37,interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LiveInterval.h,2,['extend'],"['extend', 'extendInBlock']"
Modifiability,/// Simplify instructions that use this induction variable; /// by using ScalarEvolution to analyze the IV's recurrence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:50,variab,variable,50,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['variab'],['variable']
Modifiability,/// Simplify users of induction variables within this; /// loop. This does not actually change or add IVs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:32,variab,variables,32,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['variab'],['variables']
Modifiability,/// SimplifyIVUsers helper for eliminating useless remainder operations; /// operating on an induction variable or replacing srem by urem.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:103,variab,variable,103,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['variab'],['variable']
Modifiability,/// SimplifyIVUsers helper for eliminating useless; /// comparisons against an induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:89,variab,variable,89,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['variab'],['variable']
Modifiability,/// SimplifyLoopIVs - Simplify users of induction variables within this; /// loop. This does not actually change or add IVs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h:50,variab,variables,50,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SimplifyIndVar.h,1,['variab'],['variables']
Modifiability,/// Size of the iteration variable in bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,variab,variable,26,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,1,['variab'],['variable']
Modifiability,"/// SkipExtensionForVMULL - For a node that is a SIGN_EXTEND, ZERO_EXTEND,; /// ANY_EXTEND, extending load, or BUILD_VECTOR with extended elements, return; /// the unextended value. The unextended vector should be 64 bits so that it can; /// be used as an operand to a VMULL instruction. If the original vector size; /// before extension is less than 64 bits we add a an extension to resize; /// the vector to 64 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:92,extend,extending,92,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,2,['extend'],"['extended', 'extending']"
Modifiability,"/// SkipLoadExtensionForVMULL - return a load of the original vector size that; /// does not do any sign/zero extension. If the original vector is less; /// than 64 bits, an appropriate extension will be added after the load to; /// reach a total size of 64 bits. We have to add the extension separately; /// because ARM does not have a sign/zero extending load for vectors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:347,extend,extending,347,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extending']
Modifiability,"/// Solve the variable value dataflow problem, for a single lexical scope.; /// Uses the algorithm from the file comment to resolve control flow joins; /// using PHI placement and value propagation. Reads the locations of machine; /// values from the \p MInLocs and \p MOutLocs arrays (see buildMLocValueMap); /// and reads the variable values transfer function from \p AllTheVlocs.; /// Live-in and Live-out variable values are stored locally, with the live-ins; /// permanently stored to \p Output once a fixedpoint is reached.; /// \p VarsWeCareAbout contains a collection of the variables in \p Scope; /// that we should be tracking.; /// \p AssignBlocks contains the set of blocks that aren't in \p DILoc's; /// scope, but which do contain DBG_VALUEs, which VarLocBasedImpl tracks; /// locations through.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h:14,variab,variable,14,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.h,4,['variab'],"['variable', 'variables']"
Modifiability,/// Some calls have parameter numbering mismatched from argument numbering.; /// This function converts an argument index to the corresponding; /// parameter index. Returns std::nullopt is the argument doesn't correspond; /// to any parameter variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h:243,variab,variable,243,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h,1,['variab'],['variable']
Modifiability,/// Some insns are not extended and thus have no bits. These cases require; /// a more brute force method for determining the correct relocation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCCodeEmitter.cpp:23,extend,extended,23,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCCodeEmitter.cpp,1,['extend'],['extended']
Modifiability,"/// Some objects use this value to denote that the compression algorithm; /// should be inherited from the parent object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/inc/Compression.h:88,inherit,inherited,88,core/zip/inc/Compression.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/inc/Compression.h,1,['inherit'],['inherited']
Modifiability,"/// Some objects use this value to denote that the compression algorithm; /// should be inherited from the parent object (e.g., TBranch should get the algorithm from the TTree)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/inc/Compression.h:88,inherit,inherited,88,core/zip/inc/Compression.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/inc/Compression.h,1,['inherit'],['inherited']
Modifiability,"/// Some of the values are stored in bitfields. Since this needs to be portable; /// across compilers and architectures (big / little endian in particular) we; /// can't use the actual structures below, but must instead do the shifting; /// and masking ourselves. The struct definitions are provided for reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:71,portab,portable,71,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,1,['portab'],['portable']
Modifiability,"/// Some target cannot handle a variable insertion index for the; /// INSERT_VECTOR_ELT instruction. In this case, it; /// is necessary to spill the vector being inserted into to memory, perform; /// the insert there, and then read the result back.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:32,variab,variable,32,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['variab'],['variable']
Modifiability,"/// Some targets cannot handle a variable; /// insertion index for the INSERT_VECTOR_ELT instruction. In this case, it; /// is necessary to spill the vector being inserted into to memory, perform; /// the insert there, and then read the result back.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:33,variab,variable,33,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['variab'],['variable']
Modifiability,"/// Something that we consider a ""variable"":; /// \li namespace scope variables and variable templates;; /// \li static and non-static class data members and member templates;; /// \li enumerators.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Comment.h:34,variab,variable,34,interpreter/llvm-project/clang/include/clang/AST/Comment.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Comment.h,3,['variab'],"['variable', 'variables']"
Modifiability,/// Sort local variables so that variables appearing inside of helper; /// expressions come first.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:15,variab,variables,15,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,2,['variab'],['variables']
Modifiability,"/// Sort numeric integration variables in summation and integration lists.; /// To be used during construction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:29,variab,variables,29,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,1,['variab'],['variables']
Modifiability,/// Sparc Code Generator Pass Configuration Options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcTargetMachine.cpp:30,Config,Configuration,30,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcTargetMachine.cpp,1,['Config'],['Configuration']
Modifiability,"/// Specialization of \ref TargetInstrInfo::describeLoadedValue, used to; /// enhance debug entry value descriptions for ARM targets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.h:78,enhance,enhance,78,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseInstrInfo.h,1,['enhance'],['enhance']
Modifiability,/// Specialized rewriter for EXTRACT_SUBREG instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:16,rewrite,rewriter,16,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewriter']
Modifiability,/// Specialized rewriter for INSERT_SUBREG instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:16,rewrite,rewriter,16,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewriter']
Modifiability,/// Specialized rewriter for REG_SEQUENCE instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:16,rewrite,rewriter,16,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewriter']
Modifiability,"/// Specifies a change in a variable's debug value history.; ///; /// There exist two types of entries:; ///; /// * Debug value entry:; ///; /// A new debug value becomes live. If the entry's \p EndIndex is \p NoEntry,; /// the value is valid until the end of the function. For other values, the; /// index points to the entry in the entry vector that ends this debug; /// value. The ending entry can either be an overlapping debug value, or; /// an instruction that clobbers the value.; ///; /// * Clobbering entry:; ///; /// This entry's instruction clobbers one or more preceding; /// register-described debug values that have their end index; /// set to this entry's position in the entry vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h:28,variab,variable,28,interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DbgEntityHistoryCalculator.h,1,['variab'],['variable']
Modifiability,/// Specifies a configuration macro for this module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:16,config,configuration,16,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,1,['config'],['configuration']
Modifiability,"/// Specify a regular expression for files being formatted; /// that are allowed to be considered ""main"" in the; /// file-to-main-include mapping.; ///; /// By default, clang-format considers files as ""main"" only when they end; /// with: ``.c``, ``.cc``, ``.cpp``, ``.c++``, ``.cxx``, ``.m`` or ``.mm``; /// extensions.; /// For these files a guessing of ""main"" include takes place; /// (to assign category 0, see above). This config option allows for; /// additional suffixes and extensions for files to be considered as ""main"".; ///; /// For example, if this option is configured to ``(Impl\.hpp)$``,; /// then a file ``ClassImpl.hpp`` is considered ""main"" (in addition to; /// ``Class.c``, ``Class.cc``, ``Class.cpp`` and so on) and ""main; /// include file"" logic will be executed (with *IncludeIsMainRegex* setting; /// also being respected in later phase). Without this option set,; /// ``ClassImpl.hpp`` would not have the main include file put on top; /// before any other include.; /// \version 10",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/IncludeStyle.h:427,config,config,427,interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/IncludeStyle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/IncludeStyle.h,2,['config'],"['config', 'configured']"
Modifiability,"/// Specify a regular expression of suffixes that are allowed in the; /// file-to-main-include mapping.; ///; /// When guessing whether a #include is the ""main"" include (to assign; /// category 0, see above), use this regex of allowed suffixes to the header; /// stem. A partial match is done, so that:; /// - """" means ""arbitrary suffix""; /// - ""$"" means ""no suffix""; ///; /// For example, if configured to ""(_test)?$"", then a header a.h would be seen; /// as the ""main"" include in both a.cc and a_test.cc.; /// \version 3.9",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/IncludeStyle.h:393,config,configured,393,interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/IncludeStyle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Inclusions/IncludeStyle.h,1,['config'],['configured']
Modifiability,/// Specify how the target extends the result of a vector boolean value from a; /// vector of i1 to a wider type. See getBooleanContents.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:27,extend,extends,27,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['extend'],['extends']
Modifiability,/// Specify how the target extends the result of integer and floating point; /// boolean values from i1 to a wider type. See getBooleanContents.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:27,extend,extends,27,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,2,['extend'],['extends']
Modifiability,/// Specify that this variable is an instantiation of the; /// static data member VD.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,/// Specify the environment variable where initial options should be read.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h:28,variab,variable,28,interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Option/OptTable.h,1,['variab'],['variable']
Modifiability,/// Split an immediate offset \p ImmOffset depending on whether it fits in the; /// immediate field. Modifies \p ImmOffset and sets \p SOffset to the variable; /// component.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:150,variab,variable,150,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,1,['variab'],['variable']
Modifiability,/// SplitEditor - Edit machine code and LiveIntervals for live range; /// splitting.; ///; /// - Create a SplitEditor from a SplitAnalysis.; /// - Start a new live interval with openIntv.; /// - Mark the places where the new interval is entered using enterIntv*; /// - Mark the ranges where the new interval is used with useIntv*; /// - Mark the places where the interval is exited with exitIntv*.; /// - Finish the current interval with closeIntv and repeat from 2.; /// - Rewrite instructions with finish().; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h:474,Rewrite,Rewrite,474,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.h,1,['Rewrite'],['Rewrite']
Modifiability,"/// SplitStaticCtorDtor - A module was recently split into two parts, M1/M2, and; /// M1 has all of the global variables. If M2 contains any functions that are; /// static ctors/dtors, we need to add an llvm.global_[cd]tors global to M2, and; /// prune appropriate entries out of M1s list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ExtractFunction.cpp:111,variab,variables,111,interpreter/llvm-project/llvm/tools/bugpoint/ExtractFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ExtractFunction.cpp,1,['variab'],['variables']
Modifiability,/// StackFramePrinter - This pass prints the stack frame layout and variable; /// mappings.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:68,variab,variable,68,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,1,['variab'],['variable']
Modifiability,/// Stage 1: Find all the DAG roots for the induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:54,variab,variable,54,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['variab'],['variable']
Modifiability,/// Start capturing of the variables in the loop context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:27,variab,variables,27,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,"/// Start with the address based on the location provided, and generate the; /// DWARF information necessary to find the actual variable (navigating the; /// extra location information encoded in the type) based on the starting; /// location. Add the DWARF information to the die.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h:128,variab,variable,128,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.h,1,['variab'],['variable']
Modifiability,"/// Start with the address based on the location provided, and generate the; /// DWARF information necessary to find the actual variable given the extra; /// address information encoded in the DbgVariable, starting from the starting; /// location. Add the DWARF information to the die.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:128,variab,variable,128,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,1,['variab'],['variable']
Modifiability,/// State that this function inherited its prototype from a; /// previous declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:29,inherit,inherited,29,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['inherit'],['inherited']
Modifiability,/// State that this is an implicit constructor synthesized to; /// model a call to a constructor inherited from a base class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:97,inherit,inherited,97,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inherited']
Modifiability,/// Static polymorphism: delegate implementation (via isEqualTo) to the; /// derived class.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h:11,polymorphi,polymorphism,11,interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DirectedGraph.h,2,['polymorphi'],['polymorphism']
Modifiability,"/// Status variable indicating if this diagnostic is still active.; ///; // NOTE: This field is redundant with DiagObj (IsActive iff (DiagObj == 0)),; // but LLVM is not currently smart enough to eliminate the null check that; // Emit() would end up with if we used that as our status variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:11,variab,variable,11,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,2,['variab'],['variable']
Modifiability,/// Stop tracking variables that contain abstract_origin with a location.; /// This is used for out-of-order DW_AT_inline subprograms only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:18,variab,variables,18,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,/// Storage for both the value *and* another parameter from which we inherit; /// the default argument. This is used when multiple default arguments for a; /// parameter are merged together from different modules.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:69,inherit,inherit,69,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['inherit'],['inherit']
Modifiability,/// Storage for device global variable entries kind. The storage is to be; /// indexed by mangled name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:30,variab,variable,30,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,"/// Storage for either the bit-width, the in-class initializer, or; /// both (via InitAndBitWidth), or the captured variable length array bound.; ///; /// If the storage kind is ISK_InClassCopyInit or; /// ISK_InClassListInit, but the initializer is null, then this; /// field has an in-class initializer that has not yet been parsed; /// and attached.; // FIXME: Tail-allocate this to reduce the size of FieldDecl in the; // overwhelmingly common case that we have none of these things.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:116,variab,variable,116,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// Store a set of either DeclRefExprs or MemberExprs that contain a reference; /// to a variable (constant) that may or may not be odr-used in this Expr, and; /// we won't know until all lvalue-to-rvalue and discarded value conversions; /// have been applied to all subexpressions of the enclosing full expression.; /// This is cleared at the end of each full expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:89,variab,variable,89,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,"/// Store the location of a C++ object corresponding to a statement; /// until the statement is actually encountered. For example, if a DeclStmt; /// has CXXConstructExpr as its initializer, the object would be considered; /// to be ""under construction"" between CXXConstructExpr and DeclStmt.; /// This allows, among other things, to keep bindings to variable's fields; /// made within the constructor alive until its declaration actually; /// goes into scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:351,variab,variable,351,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['variab'],['variable']
Modifiability,"/// Store the tile specified by ""src"" to memory specifieid by ""base"" address and; /// ""stride"" using the tile configuration previously configured via; /// ""_tile_loadconfig"".; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the <c> TILESTORED </c> instruction.; ///; /// \param dst; /// A destination tile. Max size is 1024 Bytes.; /// \param base; /// A pointer to base address.; /// \param stride; /// The stride between the rows' data to be stored in memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h:110,config,configuration,110,interpreter/llvm-project/clang/lib/Headers/amxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h,2,['config'],"['configuration', 'configured']"
Modifiability,/// Stores a list of Objective-C type parameters for a parameterized class; /// or a category/extension thereof.; ///; /// \code; /// @interface NSArray<T> // stores the <T>; /// @end; /// \endcode,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:55,parameteriz,parameterized,55,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['parameteriz'],['parameterized']
Modifiability,"/// Stores a single expression representing the location of a source-level; /// variable, along with the PC range for which that expression is valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:80,variab,variable,80,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,1,['variab'],['variable']
Modifiability,"/// Stores options for the analyzer from the command line.; ///; /// Some options are frontend flags (e.g.: -analyzer-output), but some are; /// analyzer configuration options, which are preceded by -analyzer-config; /// (e.g.: -analyzer-config notes-as-events=true).; ///; /// If you'd like to add a new frontend flag, add it to; /// include/clang/Driver/CC1Options.td, add a new field to store the value of; /// that flag in this class, and initialize it in; /// lib/Frontend/CompilerInvocation.cpp.; ///; /// If you'd like to add a new non-checker configuration, register it in; /// include/clang/StaticAnalyzer/Core/AnalyzerOptions.def, and refer to the; /// top of the file for documentation.; ///; /// If you'd like to add a new checker option, call getChecker*Option(); /// whenever.; ///; /// Some of the options are controlled by raw frontend flags for no good reason,; /// and should be eventually converted into -analyzer-config flags. New analyzer; /// options should not be implemented as frontend flags. Frontend flags still; /// make sense for things that do not affect the actual analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h:154,config,configuration,154,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/AnalyzerOptions.h,5,['config'],"['config', 'configuration']"
Modifiability,"/// Stores the configuration parameters for RooAbsTestStatistic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:15,config,configuration,15,roofit/roofitcore/src/RooAbsTestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h,1,['config'],['configuration']
Modifiability,"/// Stores the current tile configuration to a 64-byte memory location; /// specified by ""mem_addr"". The tile configuration includes the tile type; /// palette, the number of bytes per row, and the number of rows. If tiles; /// are not configured, all zeroes will be stored to memory.; ///; /// \headerfile <immintrin.h>; ///; /// This intrinsic corresponds to the <c> STTILECFG </c> instruction.; ///; /// \param __config; /// A pointer to 512-bits configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h:28,config,configuration,28,interpreter/llvm-project/clang/lib/Headers/amxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/amxintrin.h,4,['config'],"['configuration', 'configured']"
Modifiability,/// Stores the variable identifier and Atom for atomic booleans in the; /// formula.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:15,variab,variable,15,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variable']
Modifiability,"/// StrInStrNoCase - Portable version of strcasestr. Locates the first; /// occurrence of string 's1' in string 's2', ignoring case. Returns; /// the offset of s2 in s1 or npos if s2 cannot be found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringExtras.h:21,Portab,Portable,21,interpreter/llvm-project/llvm/include/llvm/ADT/StringExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringExtras.h,2,['Portab'],['Portable']
Modifiability,"/// Stream adapter for standard library input streams.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/stream.h:11,adapt,adapter,11,geom/geom/inc/bvh/v2/stream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/stream.h,1,['adapt'],['adapter']
Modifiability,"/// Stream adapter for standard library output streams.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/stream.h:11,adapt,adapter,11,geom/geom/inc/bvh/v2/stream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/bvh/v2/stream.h,1,['adapt'],['adapter']
Modifiability,/// Stride - local variable passed to runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:19,variab,variable,19,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,"/// String representation of the type of the value.; ///; /// If the underlying matcher is a polymorphic one, the string will show all; /// the types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:93,polymorphi,polymorphic,93,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,1,['polymorphi'],['polymorphic']
Modifiability,"/// StringLiteral - This represents a string literal expression, e.g. ""foo""; /// or L""bar"" (wide strings). The actual string data can be obtained with; /// getBytes() and is NOT null-terminated. The length of the string data is; /// determined by calling getByteLength().; ///; /// The C type for a string is always a ConstantArrayType. In C++, the char; /// type is const qualified, in C it is not.; ///; /// Note that strings in C can be formed by concatenation of multiple string; /// literal pptokens in translation phase #6. This keeps track of the locations; /// of each of these pieces.; ///; /// Strings in C can also be truncated and extended by assigning into arrays,; /// e.g. with constructs like:; /// char X[2] = ""foobar"";; /// In this case, getByteLength() will return 6, but the string literal will; /// have type ""char[2]"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:643,extend,extended,643,interpreter/llvm-project/clang/include/clang/AST/Expr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h,1,['extend'],['extended']
Modifiability,"/// StringRef - Represent a constant reference to a string, i.e. a character; /// array and a length, which need not be null terminated.; ///; /// This class does not own the string data, it is expected to be used in; /// situations where the character data resides in some other buffer, whose; /// lifetime extends past that of the StringRef. For this reason, it is not in; /// general safe to store a StringRef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h:308,extend,extends,308,interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/StringRef.h,1,['extend'],['extends']
Modifiability,"/// Struct to store and manipulate GCC versions.; ///; /// We rely on assumptions about the form and structure of GCC version; /// numbers: they consist of at most three '.'-separated components, and each; /// component is a non-negative integer except for the last component. For; /// the last component we are very flexible in order to tolerate release; /// candidates or 'x' wildcards.; ///; /// Note that the ordering established among GCCVersions is based on the; /// preferred version string to use. For example we prefer versions without; /// a hard-coded patch number to those with a hard coded patch number.; ///; /// Currently this doesn't provide any logic for textual suffixes to patches; /// in the way that (for example) Debian's version format does. If that ever; /// becomes necessary, it can be added.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.h:317,flexible,flexible,317,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.h,1,['flexible'],['flexible']
Modifiability,/// Structure representing the definition of a numeric variable in a pattern.; /// It holds the pointer to the class instance holding the value and matching; /// format of the numeric variable whose value is being defined and the; /// number of the parenthesis group in RegExStr to capture that value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:55,variab,variable,55,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,2,['variab'],['variable']
Modifiability,/// Structure that stores information about a variable template; /// specialization that was instantiated from a variable template partial; /// specialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:46,variab,variable,46,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,['variab'],['variable']
Modifiability,"/// Subclasses of GCStrategy are made available for use during compilation by; /// adding them to the global GCRegistry. This can done either within the; /// LLVM source tree or via a loadable plugin. An example registeration; /// would be:; /// static GCRegistry::Add<CustomGC> X(""custom-name"",; /// ""my custom supper fancy gc strategy"");; ///; /// Note that to use a custom GCMetadataPrinter, you must also; /// register your GCMetadataPrinter subclass with the; /// GCMetadataPrinterRegistery as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h:193,plugin,plugin,193,interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GCStrategy.h,1,['plugin'],['plugin']
Modifiability,"/// Supported languages.; ///; /// When stored in a configuration file, specifies the language, that the; /// configuration targets. When passed to the ``reformat()`` function, enables; /// syntax features specific to the language.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:52,config,configuration,52,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,2,['config'],['configuration']
Modifiability,"/// Suppress printing of variable initializers.; ///; /// This flag is used when printing the loop variable in a for-range; /// statement. For example, given:; ///; /// \code; /// for (auto x : coll); /// \endcode; ///; /// SuppressInitializers will be true when printing ""auto x"", so that the; /// internal initializer constructed for x will not be printed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h:25,variab,variable,25,interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,2,['variab'],['variable']
Modifiability,"/// Synthesize a body for a declaration; ///; /// This method first looks up the appropriate model file based on the; /// model-path configuration option and the name of the declaration that is; /// looked up. If no model were synthesized yet for a function with that name; /// it will create a new compiler instance to parse the model file using the; /// ASTContext, Preprocessor, SourceManager of the original compiler instance.; /// The former resources are shared between the two compiler instance, so the; /// newly created instance have to ""leak"" these objects, since they are owned; /// by the original instance.; ///; /// The model-path should be either an absolute path or relative to the; /// working directory of the compiler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/ModelInjector.h:133,config,configuration,133,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/ModelInjector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/ModelInjector.h,1,['config'],['configuration']
Modifiability,/// Synthesizes a variable for a parameter arising from a; /// typedef.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:18,variab,variable,18,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,/// System directory for config files.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:25,config,config,25,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['config'],['config']
Modifiability,/// SystemZ Code Generator Pass Configuration Options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetMachine.cpp:32,Config,Configuration,32,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetMachine.cpp,1,['Config'],['Configuration']
Modifiability,/// TODO refactor this function to be able to search independently for; /// Dereferencability and Alignment requirements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:9,refactor,refactor,9,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['refactor'],['refactor']
Modifiability,/// Take a guess at whether \p Tok starts a name of a function or; /// variable declaration.; ///; /// This is a heuristic based on whether \p Tok is an identifier following; /// something that is likely a type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:71,variab,variable,71,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['variab'],['variable']
Modifiability,"/// Take the variable and machine-location from the DBG_VALUE (from the; /// function entry), and build a copy of an entry value backup location by; /// setting the register location to NewReg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:13,variab,variable,13,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// Take the variable and machine-location from the DBG_VALUE (from the; /// function entry), and build an entry value backup location. The backup; /// location will turn into the normal location if the backup is valid at; /// the time of the primary location clobbering.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:13,variab,variable,13,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// Take the variable and machine-location in DBG_VALUE MI, and build an; /// entry location using the given expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:13,variab,variable,13,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// Take the variable described by DBG_VALUE* MI, and create a VarLoc; /// locating it in the specified spill location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:13,variab,variable,13,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// Takes SCEV S and Loop L. For each AddRec sub-expression, use its post; /// increment expression in case its Loop is L. If it is not L then; /// use AddRec itself.; /// If SCEV contains non-invariant unknown SCEV rewrite cannot be done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:216,rewrite,rewrite,216,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// Takes SCEV S and Loop L. For each AddRec sub-expression, use its start; /// expression in case its Loop is L. If it is not L then; /// if IgnoreOtherLoops is true then use AddRec itself; /// otherwise rewrite cannot be done.; /// If SCEV contains non-invariant unknown SCEV rewrite cannot be done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:205,rewrite,rewrite,205,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,['rewrite'],['rewrite']
Modifiability,"/// Takes a [16 x i16] vector and returns the vector element value; /// indexed by the immediate constant operand.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// int _mm256_extract_epi16(__m256i X, const int N);; /// \endcode; ///; /// This intrinsic corresponds to the <c> VEXTRACTF128+COMPOSITE </c>; /// instruction.; ///; /// \param X; /// A 256-bit integer vector of [16 x i16].; /// \param N; /// An immediate integer operand with bits [3:0] determining which vector; /// element is extracted and returned.; /// \returns A 32-bit integer containing the extracted 16 bits of zero extended; /// packed data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h:595,extend,extended,595,interpreter/llvm-project/clang/lib/Headers/avxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h,1,['extend'],['extended']
Modifiability,"/// Takes a [32 x i8] vector and returns the vector element value; /// indexed by the immediate constant operand.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// int _mm256_extract_epi8(__m256i X, const int N);; /// \endcode; ///; /// This intrinsic corresponds to the <c> VEXTRACTF128+COMPOSITE </c>; /// instruction.; ///; /// \param X; /// A 256-bit integer vector of [32 x i8].; /// \param N; /// An immediate integer operand with bits [4:0] determining which vector; /// element is extracted and returned.; /// \returns A 32-bit integer containing the extracted 8 bits of zero extended; /// packed data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h:591,extend,extended,591,interpreter/llvm-project/clang/lib/Headers/avxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h,1,['extend'],['extended']
Modifiability,"/// Takes a [4 x i64] vector and returns the vector element value; /// indexed by the immediate constant operand.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// long long _mm256_extract_epi64(__m256i X, const int N);; /// \endcode; ///; /// This intrinsic corresponds to the <c> VEXTRACTF128+COMPOSITE </c>; /// instruction.; ///; /// \param X; /// A 256-bit integer vector of [4 x i64].; /// \param N; /// An immediate integer operand with bits [1:0] determining which vector; /// element is extracted and returned.; /// \returns A 64-bit integer containing the extracted 64 bits of extended; /// packed data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h:594,extend,extended,594,interpreter/llvm-project/clang/lib/Headers/avxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h,1,['extend'],['extended']
Modifiability,"/// Takes a [8 x i32] vector and returns the vector element value; /// indexed by the immediate constant operand.; ///; /// \headerfile <x86intrin.h>; ///; /// \code; /// int _mm256_extract_epi32(__m256i X, const int N);; /// \endcode; ///; /// This intrinsic corresponds to the <c> VEXTRACTF128+COMPOSITE </c>; /// instruction.; ///; /// \param X; /// A 256-bit vector of [8 x i32].; /// \param N; /// An immediate integer operand with bits [2:0] determining which vector; /// element is extracted and returned.; /// \returns A 32-bit integer containing the extracted 32 bits of extended; /// packed data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h:580,extend,extended,580,interpreter/llvm-project/clang/lib/Headers/avxintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/avxintrin.h,1,['extend'],['extended']
Modifiability,"/// Takes the old cleanup stack size and emits the cleanup blocks; /// that have been added, then adds all lifetime-extended cleanups from; /// the given position to the stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:116,extend,extended,116,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['extend'],['extended']
Modifiability,"/// Target codegen is specialized based on two data-sharing modes: CUDA, in; /// which the local variables are actually global threadlocal, and Generic, in; /// which the local variables are placed in global memory if they may escape; /// their declaration context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:97,variab,variables,97,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,2,['variab'],['variables']
Modifiability,/// Target-Independent Code Generator Pass Configuration Options.; ///; /// This is an ImmutablePass solely for the purpose of exposing CodeGen options; /// to the internals of other CodeGen passes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:43,Config,Configuration,43,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,1,['Config'],['Configuration']
Modifiability,/// Tell the consumer that this variable has been instantiated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:32,variab,variable,32,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['variab'],['variable']
Modifiability,/// Template for the abstract base class used to dispatch; /// polymorphically over pass objects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:63,polymorphi,polymorphically,63,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,1,['polymorphi'],['polymorphically']
Modifiability,/// Test if the given EVT is extended (as opposed to being simple).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:29,extend,extended,29,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,1,['extend'],['extended']
Modifiability,/// Test if the given EVT is simple (as opposed to being extended).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:57,extend,extended,57,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,1,['extend'],['extended']
Modifiability,/// Test if the given class represents instructions which do nothing if; /// passed a global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h:93,variab,variable,93,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCInstKind.h,2,['variab'],['variable']
Modifiability,/// Test whether the given alloca partition's integer operations can be; /// widened to promotable ones.; ///; /// This is a quick test to check whether we can rewrite the integer loads and; /// stores to a particular alloca into wider loads and stores and be able to; /// promote the resulting alloca.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:160,rewrite,rewrite,160,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// Test whether the given alloca partitioning and range of slices can be; /// promoted to a vector.; ///; /// This is a quick test to check whether we can rewrite a particular alloca; /// partition (and its newly formed alloca) into a vector alloca with only; /// whole-vector loads and stores such that it could be promoted to a vector; /// SSA value. We only can ensure this for a limited set of operations, and we; /// don't want to do the rewrites unless we are confident that the result will; /// be promotable, so we have an early test here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:156,rewrite,rewrite,156,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,2,['rewrite'],"['rewrite', 'rewrites']"
Modifiability,"/// The ""base"" type of an extended qualifiers type (\c ExtQuals) or; /// a self-referential pointer (for \c Type).; ///; /// This pointer allows an efficient mapping from a QualType to its; /// underlying type pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:26,extend,extended,26,interpreter/llvm-project/clang/include/clang/AST/Type.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h,1,['extend'],['extended']
Modifiability,"/// The ""candidate"" is actually a variable, expression, or block; /// for which we only have a function prototype.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:34,variab,variable,34,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['variab'],['variable']
Modifiability,"/// The -dealloc method in CIFilter highly unusual in that is will release; /// instance variables belonging to its *subclasses* if the variable name; /// starts with ""input"" or backs a property whose name starts with ""input"".; /// Subclasses should not release these ivars in their own -dealloc method --; /// doing so could result in an over release.; ///; /// This method returns true if the property will be released by; /// -[CIFilter dealloc].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:89,variab,variables,89,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"/// The API version understood by this plugin, usually \c; /// LLVM_PLUGIN_API_VERSION",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:39,plugin,plugin,39,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,1,['plugin'],['plugin']
Modifiability,/// The AST file was written with a different language/target; /// configuration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:67,config,configuration,67,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['config'],['configuration']
Modifiability,"/// The AST-based call graph.; ///; /// The call graph extends itself with the given declarations by implementing; /// the recursive AST visitor, which constructs the graph by visiting the given; /// declarations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CallGraph.h:55,extend,extends,55,interpreter/llvm-project/clang/include/clang/Analysis/CallGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CallGraph.h,1,['extend'],['extends']
Modifiability,/// The BugReporter associated with this engine. It is important that; /// this object be placed at the very end of member variables so that its; /// destructor is called before the rest of the ExprEngine is destroyed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:123,variab,variables,123,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['variab'],['variables']
Modifiability,"/// The C type of the variable, as a string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h:22,variab,variable,22,interpreter/llvm-project/clang/include/clang/APINotes/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/APINotes/Types.h,1,['variab'],['variable']
Modifiability,/// The CGSCC analysis manager.; ///; /// See the documentation for the AnalysisManager template for detail; /// documentation. This type serves as a convenient way to refer to this; /// construct in the adaptors and proxies used to integrate this into the larger; /// pass manager infrastructure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h:204,adapt,adaptors,204,interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/CGSCCPassManager.h,1,['adapt'],['adaptors']
Modifiability,/// The GDM component containing the set of global variables which have been; /// previously initialized with explicit initializers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:51,variab,variables,51,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['variab'],['variables']
Modifiability,/// The Global Variable constant iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:15,Variab,Variable,15,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['Variab'],['Variable']
Modifiability,/// The Global Variable iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:15,Variab,Variable,15,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['Variab'],['Variable']
Modifiability,"/// The IR fed into RewriteStatepointsForGC may have had attributes and; /// metadata implying dereferenceability that are no longer valid/correct after; /// RewriteStatepointsForGC has run. This is because semantically, after; /// RewriteStatepointsForGC runs, all calls to gc.statepoint ""free"" the entire; /// heap. stripNonValidData (conservatively) restores; /// correctness by erasing all attributes in the module that externally imply; /// dereferenceability. Similar reasoning also applies to the noalias; /// attributes and metadata. gc.statepoint can touch the entire heap including; /// noalias objects.; /// Apart from attributes and metadata, we also remove instructions that imply; /// constant physical memory: llvm.invariant.start.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:20,Rewrite,RewriteStatepointsForGC,20,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,3,['Rewrite'],['RewriteStatepointsForGC']
Modifiability,"/// The MachineFrameInfo class represents an abstract stack frame until; /// prolog/epilog code is inserted. This class is key to allowing stack frame; /// representation optimizations, such as frame pointer elimination. It also; /// allows more mundane (but still important) optimizations, such as reordering; /// of abstract objects on the stack frame.; ///; /// To support this, the class assigns unique integer identifiers to stack; /// objects requested clients. These identifiers are negative integers for; /// fixed stack objects (such as arguments passed on the stack) or nonnegative; /// for objects that may be reordered. Instructions which refer to stack; /// objects use a special MO_FrameIndex operand to represent these frame; /// indexes.; ///; /// Because this class keeps track of all references to the stack frame, it; /// knows when a variable sized object is allocated on the stack. This is the; /// sole condition which prevents frame pointer elimination, which is an; /// important optimization on register-poor architectures. Because original; /// variable sized alloca's in the source program are the only source of; /// variable sized stack objects, it is safe to decide whether there will be; /// any variable sized objects before all stack objects are known (for; /// example, register allocator spill code never needs variable sized; /// objects).; ///; /// When prolog/epilog code emission is performed, the final stack frame is; /// built and the machine instructions are modified to refer to the actual; /// stack offsets of the object, eliminating all MO_FrameIndex operands from; /// the program.; ///; /// Abstract Stack Frame Information",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:854,variab,variable,854,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,5,['variab'],['variable']
Modifiability,"/// The MatchTable is encoded as an array of bytes.; /// Thus, opcodes are expected to be <255.; ///; /// Operands can be variable-sized, their size is always after their name; /// in the docs, e.g. ""Foo(4)"" means that ""Foo"" takes 4 entries in the table,; /// so 4 bytes. ""Foo()""; ///; /// As a general rule of thumb:; /// - Instruction & Operand IDs are ULEB128; /// - LLT IDs are 1 byte; /// - Predicates and target opcodes, register and register class IDs are 2; /// bytes.; /// - Indexes into the table are 4 bytes.; /// - Inline constants are 8 bytes; ///; /// Design notes:; /// - Inst/Op IDs have to be LEB128 because some targets generate; /// extremely long patterns which need more than 255 temporaries.; /// We could just use 2 bytes everytime, but then some targets like; /// X86/AMDGPU that have no need for it will pay the price all the time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:122,variab,variable-sized,122,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,1,['variab'],['variable-sized']
Modifiability,/// The OpenMPIRBuilder Configuration,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:24,Config,Configuration,24,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['Config'],['Configuration']
Modifiability,"/// The RecurrenceDescriptor is used to identify recurrences variables in a; /// loop. Reduction is a special case of recurrence that has uses of the; /// recurrence variable outside the loop. The method isReductionPHI identifies; /// reductions that are basic recurrences.; ///; /// Basic recurrences are defined as the summation, product, OR, AND, XOR, min,; /// or max of a set of terms. For example: for(i=0; i<n; i++) { total +=; /// array[i]; } is a summation of array elements. Basic recurrences are a; /// special case of chains of recurrences (CR). See ScalarEvolution for CR; /// references.; /// This struct holds information about recurrence variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h:61,variab,variables,61,interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IVDescriptors.h,3,['variab'],"['variable', 'variables']"
Modifiability,/// The SCEVPredicate that forms our context. We will rewrite all; /// expressions assuming that this predicate true.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h:54,rewrite,rewrite,54,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolution.h,1,['rewrite'],['rewrite']
Modifiability,"/// The SafeStack pass splits the stack of each function into the safe; /// stack, which is only accessed through memory safe dereferences (as; /// determined statically), and the unsafe stack, which contains all; /// local variables that are accessed in ways that we can't prove to; /// be safe.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp:224,variab,variables,224,interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SafeStack.cpp,1,['variab'],['variables']
Modifiability,/// The TLS Variable hoist pass.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp:12,Variab,Variable,12,interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp,1,['Variab'],['Variable']
Modifiability,"/// The XCore ABI includes a type information section that communicates symbol; /// type information to the linker. The linker uses this information to verify; /// safety/correctness of things such as array bound and pointers et al.; /// The ABI only requires C (and XC) language modules to emit TypeStrings.; /// This type information (TypeString) is emitted into meta data for all global; /// symbols: definitions, declarations, functions & variables.; ///; /// The TypeString carries type, qualifier, name, size & value details.; /// Please see 'Tools Development Guide' section 2.16.2 for format details:; /// https://www.xmos.com/download/public/Tools-Development-Guide%28X9114A%29.pdf; /// The output is tested by test/CodeGen/xcore-stringtype.c.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:443,variab,variables,443,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,1,['variab'],['variables']
Modifiability,/// The ``FormatStyle`` is used to configure the formatting to follow; /// specific guidelines.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:35,config,configure,35,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['config'],['configure']
Modifiability,/// The access along this inheritance path. This is only; /// calculated when recording paths. AS_none is a special value; /// used to indicate a path which permits no legal access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h:26,inherit,inheritance,26,interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CXXInheritance.h,1,['inherit'],['inheritance']
Modifiability,/// The action that the merge action adapts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h:37,adapt,adapts,37,interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendActions.h,1,['adapt'],['adapts']
Modifiability,"/// The adaptor from a function pass to a loop pass computes these analyses and; /// makes them available to the loop passes ""for free"". Each loop pass is; /// expected to update these analyses if necessary to ensure they're; /// valid after it runs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h:8,adapt,adaptor,8,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h,1,['adapt'],['adaptor']
Modifiability,/// The address of the alloca for languages with explicit address space; /// (e.g. OpenCL) or alloca casted to generic pointer for address space; /// agnostic languages (e.g. C++). Invalid if the variable was emitted; /// as a global constant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:196,variab,variable,196,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variable']
Modifiability,/// The bases from the inheritance path that got used to mangle the vbtable; /// name. This is not really a full path like a CXXBasePath. It holds the; /// subset of records that need to be mangled into the vbtable symbol name in; /// order to get a unique name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h:23,inherit,inheritance,23,interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,1,['inherit'],['inheritance']
Modifiability,"/// The basic entity representing a rewrite operation. It serves as the base; /// class for any rewrite descriptor. It has a certain set of specializations; /// which describe a particular rewrite.; ///; /// The RewriteMapParser can be used to parse a mapping file that provides the; /// mapping for rewriting the symbols. The descriptors individually describe; /// whether to rewrite a function, global variable, or global alias. Each of; /// these can be selected either by explicitly providing a name for the ones to; /// be rewritten or providing a (posix compatible) regular expression that will; /// select the symbols to rewrite. This descriptor list is passed to the; /// SymbolRewriter pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SymbolRewriter.h:36,rewrite,rewrite,36,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SymbolRewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/SymbolRewriter.h,7,"['Rewrite', 'rewrite', 'variab']","['RewriteMapParser', 'rewrite', 'variable']"
Modifiability,/// The bitvector index used by loop induction variables and other; /// instructions that belong to all iterations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:47,variab,variables,47,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['variab'],['variables']
Modifiability,"/// The block of configuration options, used to check that; /// a module is being used in a configuration compatible with the; /// configuration in which it was built.; ///; /// This block is part of the control block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h:17,config,configuration,17,interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTBitCodes.h,3,['config'],['configuration']
Modifiability,/// The callback for registering plugin passes with a \c PassBuilder; /// instance,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:33,plugin,plugin,33,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,1,['plugin'],['plugin']
Modifiability,/// The candidate is a variable or expression of function type; /// for which we have the location of the prototype declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h:23,variab,variable,23,interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/CodeCompleteConsumer.h,1,['variab'],['variable']
Modifiability,"/// The class detects jumps which bypass local variables declaration:; /// goto L;; /// int a;; /// L:; ///; /// This is simplified version of JumpScopeChecker. Primary differences:; /// * Detects only jumps into the scope local variables.; /// * Does not detect jumps out of the scope of local variables.; /// * Not limited to variables with initializers, JumpScopeChecker is limited.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:47,variab,variables,47,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,4,['variab'],['variables']
Modifiability,/// The class does not inherit designated initializers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:23,inherit,inherit,23,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,1,['inherit'],['inherit']
Modifiability,/// The class used to assign some variables some temporarily addresses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:34,variab,variables,34,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variables']
Modifiability,/// The client can handle an AST file that cannot load because it's; /// compiled configuration doesn't match that of the context it was; /// loaded into.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:82,config,configuration,82,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,1,['config'],['configuration']
Modifiability,/// The column of the first variable name in a variable declaration.; ///; /// Used to align further variables if necessary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h:28,variab,variable,28,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// The compile unit or type unit DIE. This variable must be an instance of; /// DIE so that we can calculate the DIEUnit from any DIE by traversing the; /// parent backchain and getting the Unit DIE, and then casting itself to a; /// DIEUnit. This allows us to be able to find the DIEUnit for any DIE without; /// having to store a pointer to the DIEUnit in each DIE instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h:44,variab,variable,44,interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DIE.h,1,['variab'],['variable']
Modifiability,"/// The construction site - the statement that triggered the construction; /// for one of its parts. For instance, stack variable declaration statement; /// triggers construction of itself or its elements if it's an array,; /// new-expression triggers construction of the newly allocated object(s).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:121,variab,variable,121,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,1,['variab'],['variable']
Modifiability,"/// The construction site is not necessarily a statement. It may also be a; /// CXXCtorInitializer, which means that a member variable is being; /// constructed during initialization of the object that contains it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h:126,variab,variable,126,interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/ConstructionContext.h,1,['variab'],['variable']
Modifiability,/// The conversion functions of this C++ class (but not its; /// inherited conversion functions).; ///; /// Each of the entries in this overload set is a CXXConversionDecl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:65,inherit,inherited,65,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inherited']
Modifiability,/// The conversion functions of this C++ class and all those; /// inherited conversion functions that are visible in this class.; ///; /// Each of the entries in this overload set is a CXXConversionDecl or a; /// FunctionTemplateDecl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:66,inherit,inherited,66,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['inherit'],['inherited']
Modifiability,"/// The copy expression, expressed in terms of a DeclRef (or; /// BlockDeclRef) to the captured variable. Only required if the; /// variable has a C++ class type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:96,variab,variable,96,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,"/// The core of the Dwarf linking logic.; ///; /// The generation of the dwarf information from the object files will be; /// driven by the selection of 'root DIEs', which are DIEs that; /// describe variables or functions that resolves to the corresponding; /// code section(and thus have entries in the Addresses map). All the debug; /// information that will be generated(the DIEs, but also the line; /// tables, ranges, ...) is derived from that set of root DIEs.; ///; /// The root DIEs are identified because they contain relocations that; /// points to code section(the low_pc for a function, the location for; /// a variable). These relocations are called ValidRelocs in the; /// AddressesInfo and are gathered as a very first step when we start; /// processing a object file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h:200,variab,variables,200,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/Classic/DWARFLinker.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// The current instantiation scope used to store local; /// variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:61,variab,variables,61,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variables']
Modifiability,"/// The custom lattice function used by the generic sparse propagation solver.; /// It handles merging lattice values and computing new lattice values for; /// constants, arguments, values returned from trackable functions, and values; /// located in trackable global variables. It also computes the lattice values; /// that change as a result of executing instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp:268,variab,variables,268,interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/CalledValuePropagation.cpp,1,['variab'],['variables']
Modifiability,/// The data for the single globalized variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:39,variab,variable,39,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['variab'],['variable']
Modifiability,/// The debug location statistics for local variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:44,variab,variables,44,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,"/// The declaration which lifetime-extended this reference, if any.; /// Either a VarDecl, or (for a ctor-initializer) a FieldDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:35,extend,extended,35,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['extend'],['extended']
Modifiability,"/// The default method filter, which is used to filter out the methods on which; /// the check should not be performed.; ///; /// Checks for the init, dealloc, and any other functions that might be allowed; /// to perform direct instance variable assignment based on their name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DirectIvarAssignment.cpp:238,variab,variable,238,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DirectIvarAssignment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DirectIvarAssignment.cpp,1,['variab'],['variable']
Modifiability,"/// The default rule for __unsafe_unretained emits the RHS recursively,; /// stores into the unsafe variable, and propagates the result outward.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:100,variab,variable,100,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['variab'],['variable']
Modifiability,"/// The default template argument, if any, and whether or not; /// it was inherited.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:74,inherit,inherited,74,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['inherit'],['inherited']
Modifiability,/// The dependency scanning service contains shared configuration and state that; /// is used by the individual dependency scanning workers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h:52,config,configuration,52,interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningService.h,1,['config'],['configuration']
Modifiability,"/// The different capture forms in a lambda introducer; ///; /// C++11 allows capture of \c this, or of local variables by copy or; /// by reference. C++1y also allows ""init-capture"", where the initializer; /// is an expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Lambda.h:110,variab,variables,110,interpreter/llvm-project/clang/include/clang/Basic/Lambda.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Lambda.h,1,['variab'],['variables']
Modifiability,"/// The different capture forms: by 'this', by reference, capture for; /// variable-length array type etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:75,variab,variable-length,75,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable-length']
Modifiability,/// The entity being initialized is a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:38,variab,variable,38,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,1,['variab'],['variable']
Modifiability,/// The entity being initialized is the field that captures a; /// variable in a lambda.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:67,variab,variable,67,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,1,['variab'],['variable']
Modifiability,/// The expression which uses this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h:35,variab,variable,35,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,1,['variab'],['variable']
Modifiability,/// The file name of the log file from the environment variable; /// AS_SECURE_LOG_FILE. Which must be set before the .secure_log_unique; /// directive is used or it is an error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h:55,variab,variable,55,interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCContext.h,1,['variab'],['variable']
Modifiability,/// The filename with path we use for coverage data files. The runtime; /// allows further manipulation with the GCOV_PREFIX and GCOV_PREFIX_STRIP; /// environment variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:164,variab,variables,164,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,1,['variab'],['variables']
Modifiability,/// The first clone in the pair which always has a suggested variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:61,variab,variable,61,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,1,['variab'],['variable']
Modifiability,"/// The flag variable that marks whether we allow calls to be marked as; /// similar if they do not have the same name, only the same calling; /// convention, attributes and type signature.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:13,variab,variable,13,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['variab'],['variable']
Modifiability,"/// The flag variable that marks whether we allow indirect calls to be checked; /// for similarity, or exclude them as a legal instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:13,variab,variable,13,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['variab'],['variable']
Modifiability,"/// The flag variable that marks whether we should check branches for; /// similarity, or only look within basic blocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:13,variab,variable,13,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['variab'],['variable']
Modifiability,/// The flag variable that marks whether we should check intrinsics for; /// similarity.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:13,variab,variable,13,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['variab'],['variable']
Modifiability,"/// The following overload set is a version of `rewriteDescendants` that; /// operates directly on the AST, rather than generating a Transformer; /// combinator. It applies `Rule` to all descendants of `Node`, although not; /// `Node` itself. `Rule` can refer to nodes bound in `Result`.; ///; /// For example, assuming that ""body"" is bound to a function body in MatchResult; /// `Results`, this will produce edits to change all appearances of `x` in that; /// body to `3`.; /// ```; /// auto InlineX =; /// makeRule(declRefExpr(to(varDecl(hasName(""x"")))), changeTo(cat(""3"")));; /// const auto *Node = Results.Nodes.getNodeAs<Stmt>(""body"");; /// auto Edits = rewriteDescendants(*Node, InlineX, Results);; /// ```; /// @{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:48,rewrite,rewriteDescendants,48,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,2,['rewrite'],['rewriteDescendants']
Modifiability,"/// The following three functions are a low-level part of the RewriteRule; /// API. We expose them for use in implementing the fixtures that interpret; /// RewriteRule, like Transformer and TransfomerTidy, or for more advanced; /// users.; //; // FIXME: These functions are really public, if advanced, elements of the; // RewriteRule API. Recast them as such. Or, just declare these functions; // public and well-supported and move them out of `detail`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:62,Rewrite,RewriteRule,62,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,3,['Rewrite'],['RewriteRule']
Modifiability,"/// The format of the header information that is emitted. If CC_PRINT_HEADERS; /// is set, the format is textual. Otherwise, the format is determined by the; /// enviroment variable CC_PRINT_HEADERS_FORMAT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:173,variab,variable,173,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['variab'],['variable']
Modifiability,/// The frontend plugin registry.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendPluginRegistry.h:17,plugin,plugin,17,interpreter/llvm-project/clang/include/clang/Frontend/FrontendPluginRegistry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendPluginRegistry.h,1,['plugin'],['plugin']
Modifiability,"/// The future section header string table section, if a unique string table; /// is needed. Don't reference this variable direectly: use the; /// ShStrtabStrings member instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:114,variab,variable,114,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,1,['variab'],['variable']
Modifiability,/// The given cleanup block is changing activation state. Configure a; /// cleanup variable if necessary.; ///; /// It would be good if we had some way of determining if there were; /// extra uses *after* the change-over point.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp:58,Config,Configure,58,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.cpp,2,"['Config', 'variab']","['Configure', 'variable']"
Modifiability,"/// The global settings depend on a global variable named R__ZipMode which can be; /// modified by a global function named R__SetZipMode. Both are defined in Bits.h.; ///; /// - The default is to use the global setting and the default of the global; /// setting is to use the ZLIB compression algorithm.; /// - The LZMA algorithm (from the XZ package) is also available. The LZMA; /// compression usually results in greater compression factors, but takes; /// more CPU time and memory when compressing. LZMA memory usage is particularly; /// high for compression levels 8 and 9.; /// - Finally, the LZ4 package results in worse compression ratios; /// than ZLIB but achieves much faster decompression rates.; ///; /// The current algorithms support level 1 to 9. The higher the level the greater; /// the compression and more CPU time and memory resources used during compression.; /// Level 0 means no compression.; ///; /// Recommendation for the compression algorithm's levels:; /// - ZLIB is recommended to be used with compression level 1 [101]; /// - LZMA is recommended to be used with compression level 7-8 (higher is better,; /// since in the case of LZMA we don't care about compression/decompression speed); /// [207 - 208]; /// - LZ4 is recommended to be used with compression level 4 [404]; /// - ZSTD is recommended to be used with compression level 5 [505]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/inc/Compression.h:43,variab,variable,43,core/zip/inc/Compression.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/inc/Compression.h,1,['variab'],['variable']
Modifiability,/// The global variable table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesReader.cpp:15,variab,variable,15,interpreter/llvm-project/clang/lib/APINotes/APINotesReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesReader.cpp,1,['variab'],['variable']
Modifiability,"/// The global variables data block, which maps global variable names to; /// information about the global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesFormat.h:15,variab,variables,15,interpreter/llvm-project/clang/lib/APINotes/APINotesFormat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesFormat.h,3,['variab'],"['variable', 'variables']"
Modifiability,"/// The header is the entry for each iteration. In the canonical control flow,; /// it only contains the PHINode for the induction variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:131,variab,variable,131,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variable']
Modifiability,"/// The highest numbered VariableID for partially promoted variables plus 1,; /// the values for which start at 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:25,Variab,VariableID,25,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,"['Variab', 'variab']","['VariableID', 'variables']"
Modifiability,/// The implicit parameter for the captured variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:44,variab,variables,44,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['variab'],['variables']
Modifiability,/// The index of the associated VarDecl in the Variables vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:47,Variab,Variables,47,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,1,['Variab'],['Variables']
Modifiability,/// The index of the first temporary variable allocated to this operand. The; /// number of allocated temporaries can be found with; /// countRendererFns().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:37,variab,variable,37,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['variab'],['variable']
Modifiability,/// The index of the key type passed to CGBuiltin.cpp for polymorphic calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:58,polymorphi,polymorphic,58,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['polymorphi'],['polymorphic']
Modifiability,/// The inheritance list style to use.; /// \version 7,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:8,inherit,inheritance,8,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['inherit'],['inheritance']
Modifiability,"/// The initializer for this variable or, for a ParmVarDecl, the; /// C++ default argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:29,variab,variable,29,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['variab'],['variable']
Modifiability,"/// The input program may contain instructions which are not inside lifetime; /// markers. This can happen due to a bug in the compiler or due to a bug in; /// user code (for example, returning a reference to a local variable).; /// This procedure checks all of the instructions in the function and; /// invalidates lifetime ranges which do not contain all of the instructions; /// which access that frame slot.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp:217,variab,variable,217,interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,1,['variab'],['variable']
Modifiability,"/// The instance variable must be released, either by calling; /// -release on it directly or by nilling it out with a property setter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['variab'],['variable']
Modifiability,/// The instance variable must not be directly released with -release.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['variab'],['variable']
Modifiability,"/// The instantiation of a templated function or variable was; /// requested. In particular, the point of instantiation and template; /// specialization kind of \p D may have changed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTMutationListener.h:49,variab,variable,49,interpreter/llvm-project/clang/include/clang/AST/ASTMutationListener.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ASTMutationListener.h,1,['variab'],['variable']
Modifiability,"/// The interleave (swizzle) element size in bytes required by the; /// code for private memory. This must be 2, 4, 8 or 16. This value; /// is provided to the finalizer when it is invoked and is recorded; /// here. The hardware will interleave the memory requests of each; /// lane of a wavefront by this element size to ensure each; /// work-item gets a distinct memory location. Therefore, the; /// finalizer ensures that all load and store operations done to; /// private memory do not exceed this size. For example, if the; /// element size is 4 (32-bits or dword) and a 64-bit value must be; /// loaded, the finalizer will generate two 32-bit loads. This; /// ensures that the interleaving will get the work-item; /// specific dword for both halves of the 64-bit value. If it just; /// did a 64-bit load then it would get one dword which belonged to; /// its own work-item, but the second dword would belong to the; /// adjacent lane work-item since the interleaving is in dwords.; ///; /// The value used must match the value that the runtime configures; /// the GPU flat scratch (SH_STATIC_MEM_CONFIG.ELEMENT_SIZE). This; /// is generally DWORD.; ///; /// uSE VALUES FROM THE AMD_ELEMENT_BYTE_SIZE_T ENUM.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h:1050,config,configures,1050,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,1,['config'],['configures']
Modifiability,/// The interop variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:16,variab,variable,16,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,2,['variab'],['variable']
Modifiability,"/// The kind of location in use for a variable, where Mem is the stack home,; /// Val is an SSA value or const, and None means that there is not one single; /// kind (either because there are multiple or because there is none; it may; /// prove useful to split this into two values in the future).; ///; /// LocKind is a join-semilattice with the partial order:; /// None > Mem, Val; ///; /// i.e.; /// join(Mem, Mem) = Mem; /// join(Val, Val) = Val; /// join(Mem, Val) = None; /// join(None, Mem) = None; /// join(None, Val) = None; /// join(None, None) = None; ///; /// Note: the order is not `None > Val > Mem` because we're using DIAssignID; /// to name assignments and are not tracking the actual stored values.; /// Therefore currently there's no way to ensure that Mem values and Val; /// values are the same. This could be a future extension, though it's not; /// clear that many additional locations would be recovered that way in; /// practice as the likelihood of this sitation arising naturally seems; /// incredibly low.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:38,variab,variable,38,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,/// The kinds of rewrite we perform on overload candidates. Note that the; /// values here are chosen to serve as both bitflags and as a rank (lower; /// values are preferred by overload resolution).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:17,rewrite,rewrite,17,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h,1,['rewrite'],['rewrite']
Modifiability,/// The lifetime of a temporary bound to this entity is extended to the; /// lifeitme of the entity itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:56,extend,extended,56,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extended']
Modifiability,"/// The list of deduced variable types that we have not yet read, because; /// they might contain a deduced type that refers to a local type declared; /// within the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h:24,variab,variable,24,interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h,2,['variab'],['variable']
Modifiability,/// The list of plugin actions to run in addition to the normal action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:16,plugin,plugin,16,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['plugin'],['plugin']
Modifiability,/// The list of plugins to load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:16,plugin,plugins,16,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['plugin'],['plugins']
Modifiability,"/// The list of variable names used in fExpr, with same ordering and size as fUsedCols",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx:16,variab,variable,16,tree/dataframe/src/RDFInterfaceUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx,1,['variab'],['variable']
Modifiability,/// The local variables defined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:14,variab,variables,14,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['variab'],['variables']
Modifiability,"/// The location of a single variable, composed of an expression and 0 or more; /// DbgValueLocEntries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocEntry.h:29,variab,variable,29,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugLocEntry.h,1,['variab'],['variable']
Modifiability,/// The loop analysis manager.; ///; /// See the documentation for the AnalysisManager template for detail; /// documentation. This typedef serves as a convenient way to refer to this; /// construct in the adaptors and proxies used to integrate this into the larger; /// pass manager infrastructure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h:206,adapt,adaptors,206,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopAnalysisManager.h,1,['adapt'],['adaptors']
Modifiability,/// The loop counter variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:21,variab,variable,21,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,/// The map of local variables to their addresses in the global memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:21,variab,variables,21,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['variab'],['variables']
Modifiability,/// The maximum byte alignment of variables used by the kernel in; /// the specified memory segment. Expressed as a power of two. Must; /// be at least HSA_POWERTWO_16.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h:34,variab,variables,34,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDKernelCodeT.h,1,['variab'],['variables']
Modifiability,/// The memory buffer containing the remapping configuration. Remappings; /// holds pointers into this buffer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:47,config,configuration,47,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,1,['config'],['configuration']
Modifiability,/// The name of the action to run when using a plugin action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h:47,plugin,plugin,47,interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Frontend/FrontendOptions.h,1,['plugin'],['plugin']
Modifiability,/// The name of the variable being captured by an EK_LambdaCapture.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h:20,variab,variable,20,interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Initialization.h,1,['variab'],['variable']
Modifiability,/// The name refers to a variable template whose specialization produces a; /// variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h:25,variab,variable,25,interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h,2,['variab'],['variable']
Modifiability,/// The name was classified as a variable template name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:33,variab,variable,33,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variable']
Modifiability,/// The next I+1 words are pointers to __block variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:47,variab,variables,47,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variables']
Modifiability,"/// The number of \p CodeSynthesisContexts that are not template; /// instantiations and, therefore, should not be counted as part of the; /// instantiation depth.; ///; /// When the instantiation depth reaches the user-configurable limit; /// \p LangOptions::InstantiationDepth we will abort instantiation.; // FIXME: Should we have a similar limit for other forms of synthesis?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:220,config,configurable,220,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['config'],['configurable']
Modifiability,/// The number of rewriter failures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:18,rewrite,rewriter,18,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,1,['rewrite'],['rewriter']
Modifiability,"/// The number of variable captured, including 'this'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:18,variab,variable,18,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,"/// The offset of this field in the final layout. If this is; /// initialized to FlexibleOffset, layout will overwrite it with; /// the assigned offset of the field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h:81,Flexible,FlexibleOffset,81,interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/OptimizedStructLayout.h,1,['Flexible'],['FlexibleOffset']
Modifiability,"/// The original 0-based column of this token, including expanded tabs.; /// The configured TabWidth is used as tab width.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h:81,config,configured,81,interpreter/llvm-project/clang/lib/Format/FormatToken.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h,1,['config'],['configured']
Modifiability,"/// The outer scope, which contains local variable; /// definitions from some other instantiation (that may not be; /// relevant to this particular scope).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h:42,variab,variable,42,interpreter/llvm-project/clang/include/clang/Sema/Template.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Template.h,1,['variab'],['variable']
Modifiability,"/// The parameter ordering that will be used for the candidate. This is; /// used to represent C++20 binary operator rewrites that reverse the order; /// of the arguments. If the parameter ordering is Reversed, the Args list is; /// reversed (but obviously the ParamDecls for the function are not).; ///; /// After forming an OverloadCandidate with reversed parameters, the list; /// of conversions will (as always) be indexed by argument, so will be; /// in reverse parameter order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:117,rewrite,rewrites,117,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h,1,['rewrite'],['rewrites']
Modifiability,/// The partially-owned option.; ///; /// The ownership of the option is shared among the different requirements; /// because the same option can be used by multiple rules in one refactoring; /// action.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h:179,refactor,refactoring,179,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h,1,['refactor'],['refactoring']
Modifiability,"/// The plugin creates a debug object from when JITLink starts processing the; /// corresponding LinkGraph. It provides access to the pass configuration of; /// the LinkGraph and calls the finalization function, once the resulting link; /// artifact was emitted.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/DebugObjectManagerPlugin.cpp:8,plugin,plugin,8,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/DebugObjectManagerPlugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/DebugObjectManagerPlugin.cpp,2,"['config', 'plugin']","['configuration', 'plugin']"
Modifiability,"/// The point here is that we can only tell at run time if a class has an associated collection proxy.; /// For compile time, in the first iteration of this PR we had an extra template argument that acted as a ""tag"" to; /// differentiate the RField specialization for classes with an associated collection proxy (inherits; /// `RProxiedCollectionField`) from the RField primary template definition (`RClassField`-derived), as in:; /// ```; /// auto field = std::make_unique<RField<MyClass>>(""klass"");; /// // vs; /// auto otherField = std::make_unique<RField<MyClass, ROOT::Experimental::TagIsCollectionProxy>>(""klass"");; /// ```; ///; /// That is convenient only for non-nested types, i.e. it doesn't work with, e.g. `RField<std::vector<MyClass>,; /// ROOT::Experimental::TagIsCollectionProxy>`, as the tag is not forwarded to the instantiation of the inner RField; /// (that for the value type of the vector). The following two possible solutions were considered:; /// - A wrapper type (much like `ntuple/v7/inc/ROOT/RNTupleUtil.hxx:49`), that helps to differentiate both cases.; /// There we would have:; /// ```; /// auto field = std::make_unique<RField<RProxiedCollection<MyClass>>>(""klass""); // Using collection proxy; /// ```; /// - A helper `IsCollectionProxy<T>` type, that can be used in a similar way to those in the `<type_traits>` header.; /// We found this more convenient and is the implemented thing below. Here, classes can be marked as a; /// collection proxy with either of the following two forms (whichever is more convenient for the user):; /// ```; /// template <>; /// struct IsCollectionProxy<MyClass> : std::true_type {};; /// ```; /// or by adding a member type to the class as follows:; /// ```; /// class MyClass {; /// public:; /// using IsCollectionProxy = std::true_type;; /// };; /// ```; ///; /// Of course, there is another possible solution which is to have a single `RClassField` that implements both; /// the regular-class and the collection-proxy behaviors, and ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx:313,inherit,inherits,313,tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RField/RFieldProxiedCollection.hxx,1,['inherit'],['inherits']
Modifiability,/// The pointer is a VariableArrayType* that's been captured;; /// the enclosing context is a lambda or captured statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:21,Variab,VariableArrayType,21,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,1,['Variab'],['VariableArrayType']
Modifiability,/// The polymorphic API which runs the pass over a given IR entity.; ///; /// Note that actual pass object can omit the analysis manager argument if; /// desired. Also that the analysis manager may be null if there is no; /// analysis manager in the pass pipeline.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h:8,polymorphi,polymorphic,8,interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassManagerInternal.h,1,['polymorphi'],['polymorphic']
Modifiability,"/// The public entry point for a pass plugin.; ///; /// When a plugin is loaded by the driver, it will call this entry point to; /// obtain information about this plugin and about how to register its passes.; /// This function needs to be implemented by the plugin, see the example below:; ///; /// ```; /// extern ""C"" ::llvm::PassPluginLibraryInfo LLVM_ATTRIBUTE_WEAK; /// llvmGetPassPluginInfo() {; /// return {; /// LLVM_PLUGIN_API_VERSION, ""MyPlugin"", ""v0.1"", [](PassBuilder &PB) { ... }; /// };; /// }; /// ```",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:38,plugin,plugin,38,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,4,['plugin'],['plugin']
Modifiability,"/// The queue of implicit template instantiations that are required; /// and must be performed within the current local scope.; ///; /// This queue is only used for member functions of local classes in; /// templates, which must be instantiated in the same scope as their; /// enclosing function, so that they can reference function-local; /// types, static variables, enumerators, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:358,variab,variables,358,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['variab'],['variables']
Modifiability,"/// The record for captured variables, a RecordDecl or CXXRecordDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:28,variab,variables,28,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variables']
Modifiability,/// The refactoring rule context stores all of the inputs that might be needed; /// by a refactoring action rule. It can create the specialized; /// \c ASTRefactoringOperation or \c PreprocessorRefactoringOperation values; /// that can be used by the refactoring action rules.; ///; /// The following inputs are stored by the operation:; ///; /// - SourceManager: a reference to a valid source manager.; ///; /// - SelectionRange: an optional source selection ranges that can be used; /// to represent a selection in an editor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringRuleContext.h:8,refactor,refactoring,8,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringRuleContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringRuleContext.h,3,['refactor'],['refactoring']
Modifiability,"/// The region for all the non-static global variables.; ///; /// This class is further split into subclasses for efficient implementation of; /// invalidating a set of related global values as is done in; /// RegionStoreManager::invalidateRegions (instead of finding all the dependent; /// globals, we invalidate the whole parent region).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:45,variab,variables,45,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,1,['variab'],['variables']
Modifiability,"/// The region of the static variables within the current CodeTextRegion; /// scope.; ///; /// Currently, only the static locals are placed there, so we know that these; /// variables do not get invalidated by calls to other functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:29,variab,variables,29,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,2,['variab'],['variables']
Modifiability,/// The registers to use for the variable argument list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsABIInfo.h:33,variab,variable,33,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsABIInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsABIInfo.h,1,['variab'],['variable']
Modifiability,/// The renderer number. This must be unique within a rule since it's used to; /// identify a temporary variable to hold the renderer function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:104,variab,variable,104,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,1,['variab'],['variable']
Modifiability,/// The requirement for the instance variable could not be determined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/CheckObjCDealloc.cpp,1,['variab'],['variable']
Modifiability,/// The return variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:15,variab,variable,15,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['variab'],['variable']
Modifiability,/// The rewriter used to perform the various code; /// modifications.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h:8,rewrite,rewriter,8,interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Frontend/FixItRewriter.h,1,['rewrite'],['rewriter']
Modifiability,"/// The scope used to remap some variables as private in the OpenMP loop body; /// (or other captured region emitted without outlining), and to restore old; /// vars back on exit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:33,variab,variables,33,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variables']
Modifiability,"/// The search for a satisfying assignment of the variables in `Formula` will; /// proceed in levels, starting from 1 and going up to `Formula.LargestVar`; /// (inclusive). The current level is stored in `Level`. At each level the; /// solver will assign a value to an unassigned variable. If this leads to a; /// consistent partial assignment, `Level` will be incremented. Otherwise, if; /// it results in a conflict, the solver will backtrack by decrementing; /// `Level` until it reaches the most recent level where a decision was made.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:50,variab,variables,50,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"/// The set of ""configuration macros"", which are macros that; /// (intentionally) change how this module is built.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:16,config,configuration,16,interpreter/llvm-project/clang/include/clang/Basic/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h,1,['config'],['configuration']
Modifiability,/// The set of __block variables that are introduced in this function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:23,variab,variables,23,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,1,['variab'],['variables']
Modifiability,"/// The set of function symbols for which a .thumb_func directive has; /// been seen.; //; // FIXME: We really would like this in target specific code rather than; // here. Maybe when the relocation stuff moves to target specific,; // this can go with it? The streamer would need some target specific; // refactoring too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h:305,refactor,refactoring,305,interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCAssembler.h,1,['refactor'],['refactoring']
Modifiability,"/// The set of machine locations used to determine the variable's value, in; /// conjunction with Expr. Initially populated with MI's debug operands,; /// but may be transformed independently afterwards.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:55,variab,variable,55,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// The set of possibly indirect vbases that contain this vbtable. When a; /// derived class indirectly inherits from the same vbase twice, we only keep; /// vtables and their paths from the first instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h:104,inherit,inherits,104,interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,1,['inherit'],['inherits']
Modifiability,/// The set of variables (VariableID) being tracked in this block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:15,variab,variables,15,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,"['Variab', 'variab']","['VariableID', 'variables']"
Modifiability,/// The set of variables that are in UseBeforeDefs and can become a location; /// once the relevant value is defined. An element being erased from this; /// collection prevents the use-before-def materializing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:15,variab,variables,15,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,/// The set of variables that sometimes are not located in their stack home.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:15,variab,variables,15,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variables']
Modifiability,"/// The size in bits of elements of this column. Most columns have the size fixed by their type; /// but low-precision float columns have variable bit widths.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:138,variab,variable,138,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['variab'],['variable']
Modifiability,/// The source manager for the translation unit / file on which a refactoring; /// action might operate on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringRuleContext.h:66,refactor,refactoring,66,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringRuleContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringRuleContext.h,1,['refactor'],['refactoring']
Modifiability,/// The source symbol is an extension to the target symbol.; /// For example Objective-C categories extending an external type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h:100,extend,extending,100,interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h,1,['extend'],['extending']
Modifiability,/// The source symbol is inherited from the target symbol.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h:25,inherit,inherited,25,interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/Serialization/SymbolGraphSerializer.h,1,['inherit'],['inherited']
Modifiability,/// The statement in the code where the variable was referenced.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:40,variab,variable,40,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,1,['variab'],['variable']
Modifiability,/// The status wrt. a rewrite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:22,rewrite,rewrite,22,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['rewrite'],['rewrite']
Modifiability,"/// The string expression with the dummy variable names in fVarNames in place of the original column names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx:41,variab,variable,41,tree/dataframe/src/RDFInterfaceUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx,1,['variab'],['variable']
Modifiability,"/// The string that needs to be substituted for something else. For a; /// string variable this is its name, otherwise this is the whole expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h:82,variab,variable,82,interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheckImpl.h,1,['variab'],['variable']
Modifiability,/// The template argument list deduced for the variable template; /// partial specialization itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:47,variab,variable,47,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,1,['variab'],['variable']
Modifiability,"/// The top most instruction in the current block that is allowed for; /// emitting local variables. LastLocalValue resets to EmitStartPt when it; /// makes sense (for example, on function calls)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h:90,variab,variables,90,interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,1,['variab'],['variables']
Modifiability,/// The translation unit is a is a complete translation unit that we might; /// incrementally extend later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:94,extend,extend,94,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,1,['extend'],['extend']
Modifiability,/// The type PluginChainFinal is the final chain of plugins that will be used by; /// ValueProfileCollectorImpl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.cpp:13,Plugin,PluginChainFinal,13,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.cpp,2,"['Plugin', 'plugin']","['PluginChainFinal', 'plugins']"
Modifiability,/// The type for the list of global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:36,variab,variables,36,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,1,['variab'],['variables']
Modifiability,/// The use is uninitialized the first time it is reached after we reach; /// the variable's declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h:82,variab,variable,82,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UninitializedValues.h,1,['variab'],['variable']
Modifiability,"/// The user provided compilation unit ID, if non-empty. This is used to; /// externalize static variables which is needed to support accessing static; /// device variables in host code for single source offloading languages; /// like CUDA/HIP.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:97,variab,variables,97,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,2,['variab'],['variables']
Modifiability,"/// The value got stored into the region as block capture.; /// Block data is modeled as a separate region, thus whenever; /// the analyzer sees a captured variable, its value is copied; /// into a special block region.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h:156,variab,variable,156,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h,1,['variab'],['variable']
Modifiability,"/// The value in LI may be copies to other registers. Determine if; /// any of the copies are available at the kill points, and add defs if; /// possible.; ///; /// \param DbgValue Location number of LI->reg, and DIExpression.; /// \param LocIntervals Scan for copies of the value for each location in the; /// corresponding LiveInterval->reg.; /// \param KilledAt The point where the range of DbgValue could be extended.; /// \param [in,out] NewDefs Append (Idx, DbgValue) of inserted defs here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:412,extend,extended,412,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['extend'],['extended']
Modifiability,/// The variable being captured.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h:8,variab,variable,8,interpreter/llvm-project/clang/include/clang/AST/Decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Decl.h,2,['variab'],['variable']
Modifiability,/// The variable declaration used for the data mapping.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable']
Modifiability,/// The variable template partial specialization from which this; /// variable template partial specialization was instantiated.; ///; /// The boolean value will be true to indicate that this variable template; /// partial specialization was specialized at this level.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:8,variab,variable,8,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,3,['variab'],['variable']
Modifiability,/// The variable template partial specialization from which this; /// variable template specialization was instantiated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:8,variab,variable,8,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,['variab'],['variable']
Modifiability,/// The variable template partial specializations for this variable; /// template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:8,variab,variable,8,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,['variab'],['variable']
Modifiability,"/// The variable template specializations for this variable; /// template, including explicit specializations and instantiations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:8,variab,variable,8,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,2,['variab'],['variable']
Modifiability,/// The variable that should have been referenced to follow the pattern.; /// If Suggestion is a nullptr then it's not possible to fix the pattern; /// by referencing a different variable in this clone.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:8,variab,variable,8,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,2,['variab'],['variable']
Modifiability,/// The variable which referencing in this clone was against the pattern.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:8,variab,variable,8,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,1,['variab'],['variable']
Modifiability,/// The variables of a lexical scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfFile.h:8,variab,variables,8,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfFile.h,1,['variab'],['variables']
Modifiability,/// The vector with all simplification callbacks for global variables; /// registered by outside AAs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:60,variab,variables,60,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['variab'],['variables']
Modifiability,/// The version of the plugin.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h:23,plugin,plugin,23,interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassPlugin.h,1,['plugin'],['plugin']
Modifiability,"/// There are 4 scenarios we can use the InlineAdvisor:; /// - Default - use manual heuristics.; ///; /// - Release mode, the expected mode for production, day to day deployments.; /// In this mode, when building the compiler, we also compile a pre-trained ML; /// model to native code, and link it as a static library. This mode has low; /// overhead and no additional dependencies for the compiler runtime.; ///; /// - Development mode, for training new models.; /// In this mode, we trade off runtime performance for flexibility. This mode; /// requires the TFLite library, and evaluates models dynamically. This mode; /// also permits generating training logs, for offline training.; ///; /// - Dynamically load an advisor via a plugin (PluginInlineAdvisorAnalysis)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h:733,plugin,plugin,733,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineAdvisor.h,2,"['Plugin', 'plugin']","['PluginInlineAdvisorAnalysis', 'plugin']"
Modifiability,"/// There are two checks handled by this function:; /// 1. Find a law-of-excluded-middle or law-of-noncontradiction expression; /// e.g. if (x || !x), if (x && !x); /// 2. Find a pair of comparison expressions with or without parentheses; /// with a shared variable and constants and a logical operator between them; /// that always evaluates to either true or false.; /// e.g. if (x != 3 || x != 4)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:257,variab,variable,257,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variable']
Modifiability,/// There are two ways to clear extreme bits (either low or high):; /// Mask: x & (-1 << y) (the instcombine canonical form); /// Shifts: x >> y << y; /// Return true if the variant with 2 variable shifts is preferred.; /// Return false if there is no preference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:189,variab,variable,189,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['variab'],['variable']
Modifiability,/// These global variables have been marked invariant by the static; /// constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h:17,variab,variables,17,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h,1,['variab'],['variables']
Modifiability,/// This abstract builder class defines a set of high-level steps for creating; /// DDG-like graphs. The client code is expected to inherit from this class and; /// define concrete implementation for each of the pure virtual functions used; /// in the high-level algorithm.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceGraphBuilder.h:132,inherit,inherit,132,interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceGraphBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/DependenceGraphBuilder.h,1,['inherit'],['inherit']
Modifiability,"/// This axis cannot be extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RAxis.hxx:24,extend,extended,24,hist/histv7/inc/ROOT/RAxis.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RAxis.hxx,1,['extend'],['extended']
Modifiability,/// This boolean keeps track of whether any variable; /// sized objects have been allocated yet.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:44,variab,variable,44,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,1,['variab'],['variable']
Modifiability,"/// This call is a constructor for a temporary that is lifetime-extended; /// by binding it to a reference-type field within an aggregate,; /// for example 'A { const C &c; }; A a = { C() };'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h:64,extend,extended,64,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h,1,['extend'],['extended']
Modifiability,/// This callback is used to infer the types for Class variables. This info is; /// used later to validate messages that sent to classes. Class variables are; /// initialized with by invoking the 'class' method on a class.; /// This method is also used to infer the type information for the return; /// types.; // TODO: right now it only tracks generic types. Extend this to track every; // type in the DynamicTypeMap and diagnose type errors!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:55,variab,variables,55,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,3,"['Extend', 'variab']","['Extend', 'variables']"
Modifiability,"/// This checks for global variables which should be upgraded. If it requires; /// upgrading, returns a pointer to the upgraded variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h:27,variab,variables,27,interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/AutoUpgrade.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// This class augments a recipe with a set of VPValues defined by the recipe.; /// It allows recipes to define zero, one or multiple VPValues. A VPDef owns; /// the VPValues it defines and is responsible for deleting its defined values.; /// Single-value VPDefs that also inherit from VPValue must make sure to inherit; /// from VPDef before VPValue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanValue.h:273,inherit,inherit,273,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanValue.h,2,['inherit'],['inherit']
Modifiability,"/// This class define an interface similar to the LTOCodeGenerator, but adapted; /// for ThinLTO processing.; /// The ThinLTOCodeGenerator is not intended to be reuse for multiple; /// compilation: the model is that the client adds modules to the generator and; /// ask to perform the ThinLTO optimizations / codegen, and finally destroys the; /// codegenerator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h:72,adapt,adapted,72,interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h,1,['adapt'],['adapted']
Modifiability,/// This class defines the default behavior for configurable aspects of; /// ValueMap<>. User Configs should inherit from this class to be as compatible; /// as possible with future versions of ValueMap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:48,config,configurable,48,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,3,"['Config', 'config', 'inherit']","['Configs', 'configurable', 'inherit']"
Modifiability,"/// This class evaluates LLVM IR, producing the Constant representing each SSA; /// instruction. Changes to global variables are stored in a mapping that can; /// be iterated over after the evaluation is complete. Once an evaluation call; /// fails, the evaluation object should not be reused.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h:115,variab,variables,115,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/Evaluator.h,1,['variab'],['variables']
Modifiability,"/// This class holds an abstract representation of an Accelerator Table,; /// consisting of a sequence of buckets, each bucket containint a sequence of; /// HashData entries. The class is parameterized by the type of entries it; /// holds. The type template parameter also defines the hash function to use for; /// hashing names.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h:188,parameteriz,parameterized,188,interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/AccelTable.h,1,['parameteriz'],['parameterized']
Modifiability,"/// This class implements a resolution-based interface to LLVM's LTO; /// functionality. It supports regular LTO, parallel LTO code generation and; /// ThinLTO. You can use it from a linker in the following way:; /// - Set hooks and code generation options (see lto::Config struct defined in; /// Config.h), and use the lto::Config object to create an lto::LTO object.; /// - Create lto::InputFile objects using lto::InputFile::create(), then use; /// the symbols() function to enumerate its symbols and compute a resolution; /// for each symbol (see SymbolResolution below).; /// - After the linker has visited each input file (and each regular object; /// file) and computed a resolution for each symbol, take each lto::InputFile; /// and pass it and an array of symbol resolutions to the add() function.; /// - Call the getMaxTasks() function to get an upper bound on the number of; /// native object files that LTO may add to the link.; /// - Call the run() function. This function will use the supplied AddStream; /// and Cache functions to add up to getMaxTasks() native object files to; /// the link.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:267,Config,Config,267,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,3,['Config'],['Config']
Modifiability,"/// This class is used to constrain loops to run within a given iteration space.; /// The algorithm this class implements is given a Loop and a range [Begin,; /// End). The algorithm then tries to break out a ""main loop"" out of the loop; /// it is given in a way that the ""main loop"" runs with the induction variable; /// in a subset of [Begin, End). The algorithm emits appropriate pre and post; /// loops to run any remaining iterations. The pre loop runs any iterations in; /// which the induction variable is < Begin, and the post loop runs any; /// iterations in which the induction variable is >= End.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h:308,variab,variable,308,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,3,['variab'],['variable']
Modifiability,"/// This class is used to represent EVT's, which are used; /// to parameterize some operations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:66,parameteriz,parameterize,66,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['parameteriz'],['parameterize']
Modifiability,"/// This class keeps track of the SPI_SP_INPUT_ADDR config register, which; /// tells the hardware which interpolation parameters to load.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.h:52,config,config,52,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.h,1,['config'],['config']
Modifiability,"/// This class provides a portable interface to dynamic libraries which also; /// might be known as shared libraries, shared objects, dynamic shared; /// objects, or dynamic link libraries. Regardless of the terminology or the; /// operating system interface, this class provides a portable interface that; /// allows dynamic libraries to be loaded and searched for externally; /// defined symbols. This is typically used to provide ""plug-in"" support.; /// It also allows for symbols to be defined which don't live in any library,; /// but rather the main program itself, useful on Windows where the main; /// executable cannot be searched.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DynamicLibrary.h:26,portab,portable,26,interpreter/llvm-project/llvm/include/llvm/Support/DynamicLibrary.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/DynamicLibrary.h,3,"['plug-in', 'portab']","['plug-in', 'portable']"
Modifiability,"/// This class should be specialized by any type that can be represented as; /// a scalar, map, or sequence, decided dynamically. For example:; ///; /// typedef std::unique_ptr<MyBase> MyPoly;; ///; /// template<>; /// struct PolymorphicTraits<MyPoly> {; /// static NodeKind getKind(const MyPoly &poly) {; /// return poly->getKind();; /// }; /// static MyScalar& getAsScalar(MyPoly &poly) {; /// if (!poly || !isa<MyScalar>(poly)); /// poly.reset(new MyScalar());; /// return *cast<MyScalar>(poly.get());; /// }; /// // ...; /// };",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:226,Polymorphi,PolymorphicTraits,226,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Polymorphi'],['PolymorphicTraits']
Modifiability,"/// This class stores info we want to provide to or retain within an alias; /// query. By default, the root query is stateless and starts with a freshly; /// constructed info object. Specific alias analyses can use this query info to; /// store per-query state that is important for recursive or nested queries to; /// avoid recomputing. To enable preserving this state across multiple queries; /// where safe (due to the IR not changing), use a `BatchAAResults` wrapper.; /// The information stored in an `AAQueryInfo` is currently limitted to the; /// caches used by BasicAA, but can further be extended to fit other AA needs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h:597,extend,extended,597,interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/AliasAnalysis.h,1,['extend'],['extended']
Modifiability,"/// This class uses information about analyze scalars to rewrite expressions; /// in canonical form.; ///; /// Clients should create an instance of this class when rewriting is needed,; /// and destroy it when finished to allow the release of the associated; /// memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:57,rewrite,rewrite,57,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,1,['rewrite'],['rewrite']
Modifiability,"/// This combine tries do what performExtractVectorEltCombine does in SDAG.; /// Rewrite for pairwise fadd pattern; /// (s32 (g_extract_vector_elt; /// (g_fadd (vXs32 Other); /// (g_vector_shuffle (vXs32 Other) undef <1,X,...> )) 0)); /// ->; /// (s32 (g_fadd (g_extract_vector_elt (vXs32 Other) 0); /// (g_extract_vector_elt (vXs32 Other) 1))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerCombiner.cpp:81,Rewrite,Rewrite,81,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerCombiner.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"/// This constructor is meaningless.; /// It just provides a default constructor that can be used at link time; /// when GlobalISel is not built.; /// That way, targets can still inherit from this class without doing; /// crazy gymnastic to avoid link time failures.; /// \note That works because the constructor is inlined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:179,inherit,inherit,179,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,1,['inherit'],['inherit']
Modifiability,/// This contains information emitted to BLOCKINFO_BLOCK blocks. These; /// describe abbreviations that all blocks of the specified ID inherit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamReader.h:135,inherit,inherit,135,interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitstream/BitstreamReader.h,1,['inherit'],['inherit']
Modifiability,/// This creates a descriptor for a lexical block with a new file; /// attached. This merely extends the existing; /// lexical block as it crosses a file.; /// \param Scope Lexical block.; /// \param File Source file.; /// \param Discriminator DWARF path discriminator value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:93,extend,extends,93,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,1,['extend'],['extends']
Modifiability,"/// This creates new descriptor for a module with the specified; /// parent scope.; /// \param Scope Parent scope; /// \param Name Name of this module; /// \param ConfigurationMacros; /// A space-separated shell-quoted list of -D macro; /// definitions as they would appear on a command line.; /// \param IncludePath The path to the module map file.; /// \param APINotesFile The path to an API notes file for this module.; /// \param File Source file of the module.; /// Used for Fortran modules.; /// \param LineNo Source line number of the module.; /// Used for Fortran modules.; /// \param IsDecl This is a module declaration; default to false;; /// when set to true, only Scope and Name are required; /// as this entry is just a hint for the debugger to find; /// the corresponding definition in the global scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h:163,Config,ConfigurationMacros,163,interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DIBuilder.h,1,['Config'],['ConfigurationMacros']
Modifiability,"/// This declaration is a function-local extern declaration of a; /// variable or function. This may also be IDNS_Ordinary if it; /// has been declared outside any function. These act mostly like; /// invisible friend declarations, but are also visible to unqualified; /// lookup within the scope of the declaring function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:70,variab,variable,70,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['variab'],['variable']
Modifiability,"/// This enum distinguishes between different kinds of lock actions. For; /// example, it is an error to write a variable protected by shared version of a; /// mutex.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:113,variab,variable,113,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['variab'],['variable']
Modifiability,/// This enum distinguishes between different ways to access (read or write) a; /// variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h:84,variab,variable,84,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h,1,['variab'],['variable']
Modifiability,"/// This flag determines whether clang should filter the header information; /// that is emitted. If enviroment variable CC_PRINT_HEADERS_FILTERING is set; /// to ""only-direct-system"", only system headers that are directly included; /// from non-system headers are emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h:112,variab,variable,112,interpreter/llvm-project/clang/include/clang/Driver/Driver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Driver.h,1,['variab'],['variable']
Modifiability,"/// This function adds; /// (StartIdx * Step, (StartIdx + 1) * Step, (StartIdx + 2) * Step, ...); /// to each vector element of Val. The sequence starts at StartIndex.; /// \p Opcode is relevant for FP induction variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp:212,variab,variable,212,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,1,['variab'],['variable']
Modifiability,"/// This function checks whether variable has DWARF expression containing; /// operation referencing live address(f.e. DW_OP_addr, DW_OP_addrx...).; /// \returns first is true if the expression has an operation referencing an; /// address.; /// second is the relocation adjustment value if the live address is; /// referenced.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h:33,variab,variable,33,interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DWARFLinker/AddressesMap.h,2,['variab'],['variable']
Modifiability,/// This function creates calls to one of two shuffle functions to copy; /// variables between lanes in a warp.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:77,variab,variables,77,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variables']
Modifiability,"/// This function de-facto defines a set of transformations that we consider; /// safe (in heuristical sense). These transformation if passed a safe value as; /// an input should provide a safe value (or an object that provides safe; /// values).; ///; /// For more context see Static Analyzer checkers documentation - specifically; /// webkit.UncountedCallArgsChecker checker. Allowed list of transformations:; /// - constructors of ref-counted types (including factory methods); /// - getters of ref-counted types; /// - member overloaded operators; /// - casts; /// - unary operators like ``&`` or ``*``; ///; /// If passed expression is of type uncounted pointer/reference we try to find; /// the ""origin"" of the pointer value.; /// Origin can be for example a local variable, nullptr, constant or; /// this-pointer.; ///; /// Certain subexpression nodes represent transformations that don't affect; /// where the memory address originates from. We try to traverse such; /// subexpressions to get to the relevant child nodes. Whenever we encounter a; /// subexpression that either can't be ignored, we don't model its semantics or; /// that has multiple children we stop.; ///; /// \p E is an expression of uncounted pointer/reference type.; /// If \p StopAtFirstRefCountedObj is true and we encounter a subexpression that; /// represents ref-counted object during the traversal we return relevant; /// sub-expression and true.; ///; /// \returns subexpression that we traversed to and if \p; /// StopAtFirstRefCountedObj is true we also return whether we stopped early.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/ASTUtils.h:771,variab,variable,771,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/ASTUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/ASTUtils.h,1,['variab'],['variable']
Modifiability,"/// This function emits a helper that copies all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void list_to_global_copy_func(void *buffer, int Idx, void *reduce_data); /// For all data entries D in reduce_data:; /// Copy buffer.D[Idx] to local D;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:63,variab,variables,63,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,2,['variab'],['variables']
Modifiability,"/// This function emits a helper that copies all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void list_to_global_copy_func(void *buffer, int Idx, void *reduce_data); /// For all data entries D in reduce_data:; /// Copy local D to buffer.D[Idx]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:63,variab,variables,63,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,2,['variab'],['variables']
Modifiability,"/// This function emits a helper that reduces all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void global_to_list_reduce_func(void *buffer, int Idx, void *reduce_data); /// void *GlobPtrs[];; /// GlobPtrs[0] = (void*)&buffer.D0[Idx];; /// ...; /// GlobPtrs[N] = (void*)&buffer.DN[Idx];; /// reduce_function(reduce_data, GlobPtrs);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:64,variab,variables,64,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,2,['variab'],['variables']
Modifiability,"/// This function emits a helper that reduces all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void list_to_global_reduce_func(void *buffer, int Idx, void *reduce_data); /// void *GlobPtrs[];; /// GlobPtrs[0] = (void*)&buffer.D0[Idx];; /// ...; /// GlobPtrs[N] = (void*)&buffer.DN[Idx];; /// reduce_function(GlobPtrs, reduce_data);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:64,variab,variables,64,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,2,['variab'],['variables']
Modifiability,"/// This function executes the program using the arguments provided. The; /// invoked program will inherit the stdin, stdout, and stderr file; /// descriptors, the environment and other configuration settings of the; /// invoking program.; /// This function waits for the program to finish, so should be avoided in; /// library functions that aren't expected to block. Consider using; /// ExecuteNoWait() instead.; /// \returns an integer result code indicating the status of the program.; /// A zero or positive value indicates the result code of the program.; /// -1 indicates failure to execute; /// -2 indicates a crash during execution or timeout",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:99,inherit,inherit,99,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h,2,"['config', 'inherit']","['configuration', 'inherit']"
Modifiability,"/// This function is called when we suspect that the update-chain of a phi node; /// (whose symbolic SCEV expression sin \p PhiScev) contains redundant casts,; /// that can be ignored. (This can happen when the PSCEV rewriter adds a runtime; /// predicate P under which the SCEV expression for the phi can be the; /// AddRecurrence \p AR; See createAddRecFromPHIWithCast). We want to find the; /// cast instructions that are involved in the update-chain of this induction.; /// A caller that adds the required runtime predicate can be free to drop these; /// cast instructions, and compute the phi using \p AR (instead of some scev; /// expression with casts).; ///; /// For example, without a predicate the scev expression can take the following; /// form:; /// (Ext ix (Trunc iy ( Start + i*Step ) to ix) to iy); ///; /// It corresponds to the following IR sequence:; /// %for.body:; /// %x = phi i64 [ 0, %ph ], [ %add, %for.body ]; /// %casted_phi = ""ExtTrunc i64 %x""; /// %add = add i64 %casted_phi, %step; ///; /// where %x is given in \p PN,; /// PSE.getSCEV(%x) is equal to PSE.getSCEV(%casted_phi) under a predicate,; /// and the IR sequence that ""ExtTrunc i64 %x"" represents can take one of; /// several forms, for example, such as:; /// ExtTrunc1: %casted_phi = and %x, 2^n-1; /// or:; /// ExtTrunc2: %t = shl %x, m; /// %casted_phi = ashr %t, m; ///; /// If we are able to find such sequence, we return the instructions; /// we found, namely %casted_phi and the instructions on its use-def chain up; /// to the phi (not including the phi).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:217,rewrite,rewriter,217,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['rewrite'],['rewriter']
Modifiability,"/// This function is used by classes that refer to other; /// variables which may not be defined at the time the expression is formed.; /// If a value is set for the variable later, this method will be called on; /// users of the value to allow the value to propagate out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:62,variab,variables,62,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,2,['variab'],"['variable', 'variables']"
Modifiability,"/// This function loads a function or variable definition from an; /// external AST file and merges it into the original AST.; ///; /// This method should only be used on functions that have no definitions or; /// variables that have no initializer in; /// the current translation unit. A function definition with the same; /// declaration will be looked up in the index file which should be in the; /// \p CrossTUDir directory, called \p IndexName. In case the declaration is; /// found in the index the corresponding AST will be loaded and the; /// definition will be merged into the original AST using the AST Importer.; ///; /// \return The declaration with the definition will be returned.; /// If no suitable definition is found in the index file or multiple; /// definitions found error will be returned.; ///; /// Note that the AST files should also be in the \p CrossTUDir.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:38,variab,variable,38,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,2,['variab'],"['variable', 'variables']"
Modifiability,/// This function lowers a vector truncation of 'extended sign-bits' or; /// 'extended zero-bits' values.; /// vXi16/vXi32/vXi64 to vXi8/vXi16/vXi32 into X86ISD::PACKSS/PACKUS operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:49,extend,extended,49,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['extend'],['extended']
Modifiability,"/// This function must be overridden in the derived class to pass on constant term optimization configuration; /// to the function to be minimized. For a RooAbsArg, this would be RooAbsArg::constOptimizeTestStatistic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:96,config,configuration,96,roofit/roofitcore/src/RooAbsMinimizerFcn.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h,1,['config'],['configuration']
Modifiability,"/// This function ought to emit, in the general case, a call to; // the openmp runtime kmpc_push_num_teams. In NVPTX backend it is not needed; // as these numbers are obtained through the PTX grid and block configuration.; /// \param NumTeams An integer expression of teams.; /// \param ThreadLimit An integer expression of threads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:207,config,configuration,207,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,1,['config'],['configuration']
Modifiability,/// This function returns true if the specified vreg is; /// a live-in register and sign-extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h:89,extend,extended,89,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h,1,['extend'],['extended']
Modifiability,/// This function returns true if the specified vreg is; /// a live-in register and zero-extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h:89,extend,extended,89,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMachineFunctionInfo.h,1,['extend'],['extended']
Modifiability,"/// This function searches for an existing file in the list of directories; /// in a PATH like environment variable, and returns the first file found,; /// according to the order of the entries in the PATH like environment; /// variable. If an ignore list is specified, then any folder which is in; /// the PATH like environment variable but is also in IgnoreList is not; /// considered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:107,variab,variable,107,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h,3,['variab'],['variable']
Modifiability,"/// This function takes the specified global variable, and transforms the; /// program as if it always contained the result of the specified malloc.; /// Because it is always the result of the specified malloc, there is no reason; /// to actually DO the malloc. Instead, turn the malloc into a global, and any; /// loads of GV as uses of the new global.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:45,variab,variable,45,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['variab'],['variable']
Modifiability,/// This holds information associated with Objective-C instance variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h:64,variab,variables,64,interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/API.h,1,['variab'],['variables']
Modifiability,"/// This holds the working set of currently open ranges. For fast; /// access, this is done both as a set of VarLocIDs, and a map of; /// DebugVariable to recent VarLocID. Note that a DBG_VALUE ends all; /// previous open ranges for the same variable. In addition, we keep; /// two different maps (Vars/EntryValuesBackupVars), so erase/insert; /// methods act differently depending on whether a VarLoc is primary; /// location or backup one. In the case the VarLoc is backup location; /// we will erase/insert from the EntryValuesBackupVars map, otherwise; /// we perform the operation on the Vars.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:242,variab,variable,242,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"/// This hook behaves as the extended lowerReturn function, but for targets; /// that do not support swifterror value promotion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:29,extend,extended,29,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,1,['extend'],['extended']
Modifiability,/// This inherited constructor is not viable because it would slice the; /// argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h:9,inherit,inherited,9,interpreter/llvm-project/clang/include/clang/Sema/Overload.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Overload.h,1,['inherit'],['inherited']
Modifiability,"/// This input value (which is known to have vector type) is being zero extended; /// or truncated to the specified vector type. Since the zext/trunc is done; /// using an integer type, we have a (bitcast(cast(bitcast))) pattern,; /// endianness will impact which end of the vector that is extended or; /// truncated.; ///; /// A vector is always stored with index 0 at the lowest address, which; /// corresponds to the most significant bits for a big endian stored integer and; /// the least significant bits for little endian. A trunc/zext of an integer; /// impacts the big end of the integer. Thus, we need to add/remove elements at; /// the front of the vector for big endian targets, and the back of the vector; /// for little endian targets.; ///; /// Try to replace it with a shuffle (and vector/vector bitcast) if possible.; ///; /// The source and destination vector types may have different element types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:72,extend,extended,72,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,2,['extend'],['extended']
Modifiability,"/// This instruction implements an extending load to FP stack slots.; /// This corresponds to the X86::FLD32m / X86::FLD64m. It takes a chain; /// operand, and ptr to load from. The memory VT specifies the type to; /// load from.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:35,extend,extending,35,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['extend'],['extending']
Modifiability,/// This instruction produced a sign extended result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.h:37,extend,extended,37,interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.h,1,['extend'],['extended']
Modifiability,/// This instruction produced a zero extended result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.h:37,extend,extended,37,interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCMCTargetDesc.h,1,['extend'],['extended']
Modifiability,"/// This intrinsic performs two rounds of SM3 operation using initial SM3 state; /// (C, D, G, H) from \a __A, an initial SM3 states (A, B, E, F); /// from \a __B and a pre-computed words from the \a __C. \a __A with; /// initial SM3 state of (C, D, G, H) assumes input of non-rotated left; /// variables from previous state. The updated SM3 state (A, B, E, F) is; /// written to \a __A. The \a imm8 should contain the even round number; /// for the first of the two rounds computed by this instruction. The; /// computation masks the \a imm8 value by AND’ing it with 0x3E so that only; /// even round numbers from 0 through 62 are used for this operation. The; /// calculated results are stored in \a dst.; ///; /// \headerfile <immintrin.h>; ///; /// \code; /// __m128i _mm_sm3rnds2_epi32(__m128i __A, __m128i __B, __m128i __C, const int; /// imm8) \endcode; ///; /// This intrinsic corresponds to the \c VSM3RNDS2 instruction.; ///; /// \param __A; /// A 128-bit vector of [4 x int].; /// \param __B; /// A 128-bit vector of [4 x int].; /// \param __C; /// A 128-bit vector of [4 x int].; /// \param imm8; /// A 8-bit constant integer.; /// \returns; /// A 128-bit vector of [4 x int].; ///; /// \code{.operation}; /// DEFINE ROL32(dword, n) {; /// 	count := n % 32; /// 	dest := (dword << count) | (dword >> (32-count)); /// 	RETURN dest; /// }; /// DEFINE P0(dword) {; /// 	RETURN dword ^ ROL32(dword, 9) ^ ROL32(dword, 17); /// }; /// DEFINE FF(x,y,z, round){; /// 	IF round < 16; /// 		RETURN (x ^ y ^ z); /// 	ELSE; /// 		RETURN (x & y) | (x & z) | (y & z); /// 	FI; /// }; /// DEFINE GG(x, y, z, round){; /// IF round < 16; /// 	RETURN (x ^ y ^ z); /// ELSE; /// 	RETURN (x & y) | (~x & z); /// FI; /// }; /// A[0] := __B.dword[3]; /// B[0] := __B.dword[2]; /// C[0] := __A.dword[3]; /// D[0] := __A.dword[2]; /// E[0] := __B.dword[1]; /// F[0] := __B.dword[0]; /// G[0] := __A.dword[1]; /// H[0] := __A.dword[0]; /// W[0] := __C.dword[0]; /// W[1] := __C.dword[1]; /// W[4] := __C.dword[2]; ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sm3intrin.h:295,variab,variables,295,interpreter/llvm-project/clang/lib/Headers/sm3intrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/sm3intrin.h,1,['variab'],['variables']
Modifiability,/// This inverts a canonicalization in IR that replaces a variable select arm; /// with an identity constant. Codegen improves if we re-use the variable; /// operand rather than load a constant. This can also be converted into a; /// masked vector operation if the target supports it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:58,variab,variable,58,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['variab'],['variable']
Modifiability,"/// This is a 'bitvector' (really, a variable-sized bit array), optimized for; /// the case when the array is small. It contains one pointer-sized field, which; /// is directly used as a plain collection of bits when possible, or as a; /// pointer to a larger heap-allocated array when necessary. This allows normal; /// ""small"" cases to be fast without losing generality for large inputs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h:37,variab,variable-sized,37,interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallBitVector.h,1,['variab'],['variable-sized']
Modifiability,"/// This is a 'vector' (really, a variable-sized array), optimized; /// for the case when the array is small. It contains some number of elements; /// in-place, which allows it to avoid heap allocation when the actual number of; /// elements is below that threshold. This allows normal ""small"" cases to be; /// fast without losing generality for large inputs.; ///; /// \note; /// In the absence of a well-motivated choice for the number of inlined; /// elements \p N, it is recommended to use \c SmallVector<T> (that is,; /// omitting the \p N). This will choose a default number of inlined elements; /// reasonable for allocation on the stack (for example, trying to keep \c; /// sizeof(SmallVector<T>) around 64 bytes).; ///; /// \warning This does not attempt to be exception safe.; ///; /// \see https://llvm.org/docs/ProgrammersManual.html#llvm-adt-smallvector-h",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:34,variab,variable-sized,34,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,1,['variab'],['variable-sized']
Modifiability,"/// This is a convenience function that configures this Config object to write; /// temporary files named after the given OutputFileName for each of the LTO; /// phases to disk. A client can use this function to implement -save-temps.; ///; /// FIXME: Temporary files derived from ThinLTO backends are currently named; /// after the input file name, rather than the output file name, when; /// UseInputModulePath is set to true.; ///; /// Specifically, it (1) sets each of the above module hooks and the combined; /// index hook to a function that calls the hook function (if any) that was; /// present in the appropriate field when the addSaveTemps function was; /// called, and writes the module to a bitcode file with a name prefixed by; /// the given output file name, and (2) creates a resolution file whose name; /// is prefixed by the given output file name and sets ResolutionFile to its; /// file handle.; ///; /// SaveTempsArgs can be specified to select which temps to save.; /// If SaveTempsArgs is not provided, all temps are saved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h:40,config,configures,40,interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/Config.h,2,"['Config', 'config']","['Config', 'configures']"
Modifiability,/// This is a helper class for lowering variable arguments parameters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:40,variab,variable,40,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['variab'],['variable']
Modifiability,/// This is a helper function for visitAND and visitZERO_EXTEND. Returns; /// true if the (and (load x) c) pattern matches an extload. ExtVT returns; /// the type of the loaded value to be extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:189,extend,extended,189,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,"/// This is a mem-initializer: if it would extend a temporary (other than via; /// a default member initializer), the program is ill-formed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:43,extend,extend,43,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extend']
Modifiability,"/// This is a scope in which a condition variable is currently being; /// parsed. If such a scope is a ContinueScope, it's invalid to jump to the; /// continue block from here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:41,variab,variable,41,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h,1,['variab'],['variable']
Modifiability,"/// This is a utility for simplifying induction variables; /// based on ScalarEvolution. It is the primary instrument of the; /// IndvarSimplify pass, but it may also be directly invoked to cleanup after; /// other loop passes that preserve SCEV.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:48,variab,variables,48,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['variab'],['variables']
Modifiability,/// This is a wrapper around getRegForValue that also takes care of; /// truncating or sign-extending the given getelementptr index value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h:92,extend,extending,92,interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FastISel.h,1,['extend'],['extending']
Modifiability,"/// This is an <, <=, >, or >= that should be implemented as a rewrite in; /// terms of a <=> comparison.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:63,rewrite,rewrite,63,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['rewrite'],['rewrite']
Modifiability,/// This is an extended version of TargetLowering::AddrMode; /// which holds actual Value*'s for register values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:15,extend,extended,15,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['extend'],['extended']
Modifiability,"/// This is an important base class in LLVM. It provides the common facilities; /// of all constant values in an LLVM program. A constant is a value that is; /// immutable at runtime. Functions are constants because their address is; /// immutable. Same with global variables.; ///; /// All constants share the capabilities provided in this class. All constants; /// can have a null value. They can have an operand list. Constants can be; /// simple (integer and floating point values), complex (arrays and structures),; /// or expression based (computations yielding a constant value composed of; /// only certain operators and other constant values).; ///; /// Note that Constants are immutable (once created they never change); /// and are fully shared by structural equivalence. This means that two; /// structurally equivalent constants will always have the same address.; /// Constants are created on demand as needed and never deleted: thus clients; /// don't have to worry about the lifetime of the objects.; /// LLVM Constant Representation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h:266,variab,variables,266,interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Constant.h,1,['variab'],['variables']
Modifiability,/// This is an operator!= that should be implemented as a rewrite in terms; /// of a == comparison.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:58,rewrite,rewrite,58,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['rewrite'],['rewrite']
Modifiability,"/// This is called when we see this pattern:; /// cmp pred (load (gep GV, ...)), cmpcst; /// where GV is a global variable with a constant initializer. Try to simplify; /// this into some simple computation that does not need the load. For example; /// we can optimize ""icmp eq (load (gep ""foo"", 0, i)), 0"" into ""icmp eq i, 3"".; ///; /// If AndCst is non-null, then the loaded value is masked with that constant; /// before doing the comparison. This handles cases like ""A[i]&4 == 0"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:114,variab,variable,114,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['variab'],['variable']
Modifiability,"/// This is mostly a copy of the existing FastISel getRegForGEPIndex code. We; /// have to duplicate it for AArch64, because otherwise we would fail during the; /// sign-extend emission.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:170,extend,extend,170,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['extend'],['extend']
Modifiability,"/// This is not as easy as it might seem because we have to worry about making; /// copies of global variables and functions, and making their (initializers and; /// references, respectively) refer to the right globals.; ///; /// Cloning un-materialized modules is not currently supported, so any; /// modules initialized via lazy loading should be materialized before cloning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneModule.cpp:101,variab,variables,101,interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CloneModule.cpp,1,['variab'],['variables']
Modifiability,/// This is the OS-specific separator for PATH like environment variables:; // a colon on Unix or a semicolon on Windows.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h:64,variab,variables,64,interpreter/llvm-project/llvm/include/llvm/Support/Program.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Program.h,1,['variab'],['variables']
Modifiability,/// This is the common base class for debug info intrinsics for variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h:64,variab,variables,64,interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/IntrinsicInst.h,1,['variab'],['variables']
Modifiability,"/// This is the insert position that the current loop's induction variable; /// increment should be placed. In simple loops, this is the latch block's; /// terminator. But in more complicated cases, this is a position which will; /// dominate all the in-loop post-increment users.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:66,variab,variable,66,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['variab'],['variable']
Modifiability,"/// This is the most derived class that has this vptr at offset zero. When; /// single inheritance is used, this is always the most derived class. If; /// multiple inheritance is used, it may be any direct or indirect base.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h:87,inherit,inheritance,87,interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,2,['inherit'],['inheritance']
Modifiability,"/// This is true if this struct ends with a flexible; /// array member (e.g. int X[]) or if this union contains a struct that does.; /// If so, this cannot be contained in arrays or other structs as a member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h:44,flexible,flexible,44,interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclBase.h,1,['flexible'],['flexible']
Modifiability,"/// This is used by foldLoadsRecursive() to capture a Root Load node which is; /// of type or(load, load) and recursively build the wide load. Also capture the; /// shift amount, zero extend type and loadSize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp:184,extend,extend,184,interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp,1,['extend'],['extend']
Modifiability,"/// This is used for computing addresses like this:; ///; /// ldr x0, [xBase, wOffset, sxtw #LegalShiftVal]; ///; /// Where we have a 64-bit base register, a 32-bit offset register, and an; /// extend (which may or may not be signed).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:194,extend,extend,194,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['extend'],['extend']
Modifiability,"/// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:525,variab,variable,525,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,2,['variab'],['variable']
Modifiability,/// This maintains the recorded operand number that OPC_CheckComplexPattern; /// drops each sub-operand into. We don't want to insert these into; /// VariableMap because that leads to identity checking if they are; /// encountered multiple times. Biased by 1 like VariableMap for; /// consistency.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:150,Variab,VariableMap,150,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,2,['Variab'],['VariableMap']
Modifiability,/// This maps function DIE offset to its variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:41,variab,variables,41,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,"/// This method allows registering statically linked custom checkers that are; /// not a part of the Clang tree. It employs the same mechanism that is used; /// by plugins.; ///; /// Example:; ///; /// Consumer->AddCheckerRegistrationFn([] (CheckerRegistry& Registry) {; /// Registry.addChecker<MyCustomChecker>(""example.MyCustomChecker"",; /// ""Description"");; /// });",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/AnalysisConsumer.h:164,plugin,plugins,164,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/AnalysisConsumer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/AnalysisConsumer.h,1,['plugin'],['plugins']
Modifiability,/// This method computes the appropriate section to emit the specified global; /// variable or function definition. This should not be passed external (or; /// available externally) globals.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h:83,variab,variable,83,interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetLoweringObjectFile.h,4,['variab'],['variable']
Modifiability,"/// This method is typically called in contexts where we can't generate; /// side-effects, like in __builtin_dynamic_object_size. When finding; /// expressions, only choose those that have either already been emitted or can; /// be loaded without side-effects.; ///; /// - \p FAMDecl: the \p Decl for the flexible array member. It may not be; /// within the top-level struct.; /// - \p CountDecl: must be within the same non-anonymous struct as \p FAMDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:305,flexible,flexible,305,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['flexible'],['flexible']
Modifiability,"/// This method is used by classes that refer to other; /// variables which may not be defined at the time they expression is formed.; /// If a value is set for the variable later, this method will be called on; /// users of the value to allow the value to propagate out.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:60,variab,variables,60,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,4,['variab'],"['variable', 'variables']"
Modifiability,"/// This method is used when we want to extend the segment specified; /// by I to end at the specified endpoint. To do this, we should; /// merge and eliminate all segments that this will overlap; /// with. The iterator is not invalidated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp:40,extend,extend,40,interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,1,['extend'],['extend']
Modifiability,"/// This method is used when we want to extend the segment specified; /// by I to start at the specified endpoint. To do this, we should; /// merge and eliminate all segments that this will overlap with.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp:40,extend,extend,40,interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveInterval.cpp,1,['extend'],['extend']
Modifiability,/// This method may be called any time after instruction; /// selection is complete to determine if the stack frame for this function; /// contains any variable sized objects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:152,variab,variable,152,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,1,['variab'],['variable']
Modifiability,"/// This method returns a RuntimeDyld::SymbolInfo for the specified function; /// or variable. It is used to resolve symbols during module linking.; ///; /// By default this falls back on the legacy lookup method:; /// 'getSymbolAddress'. The address returned by getSymbolAddress is treated as; /// a strong, exported symbol, consistent with historical treatment by; /// RuntimeDyld.; ///; /// Clients writing custom RTDyldMemoryManagers are encouraged to override; /// this method and return a SymbolInfo with the flags set correctly. This is; /// necessary for RuntimeDyld to correctly handle weak and non-exported symbols.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:85,variab,variable,85,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,1,['variab'],['variable']
Modifiability,/// This method returns the address of the specified function or variable in; /// the current process.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h:65,variab,variable,65,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/RTDyldMemoryManager.h,1,['variab'],['variable']
Modifiability,"/// This method returns the address of the specified function or variable.; /// It is used to resolve symbols during module linking.; ///; /// If the returned symbol's address is equal to ~0ULL then RuntimeDyld will; /// skip all relocations for that symbol, and the client will be responsible; /// for handling them manually.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h:65,variab,variable,65,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITSymbol.h,1,['variab'],['variable']
Modifiability,"/// This method rewrites the exit condition of the loop to be a canonical !=; /// comparison against the incremented loop induction variable. This pass is; /// able to rewrite the exit tests of any loop where the SCEV analysis can; /// determine a loop-invariant trip count of the loop, which is actually a much; /// broader range than just linear tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:16,rewrite,rewrites,16,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,3,"['rewrite', 'variab']","['rewrite', 'rewrites', 'variable']"
Modifiability,/// This operator guarantees that VarLocs are sorted by Variable first.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:56,Variab,Variable,56,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['Variab'],['Variable']
Modifiability,/// This option is **deprecated**. See ``CurrentLine`` of; /// ``PackConstructorInitializers``.; /// \version 3.7; // bool ConstructorInitializerAllOnOneLineOrOnePerLine;; /// The number of characters to use for indentation of constructor; /// initializer lists as well as inheritance lists.; /// \version 3.7,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h:273,inherit,inheritance,273,interpreter/llvm-project/clang/include/clang/Format/Format.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Format/Format.h,1,['inherit'],['inheritance']
Modifiability,/// This other clone in the pair which can have a suggested variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h:60,variab,variable,60,interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/CloneDetection.h,1,['variab'],['variable']
Modifiability,/// This pass combines multiple accesses to local-dynamic TLS variables so that; /// the TLS base address for the module is only fetched once per execution path; /// through the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86.h:62,variab,variables,62,interpreter/llvm-project/llvm/lib/Target/X86/X86.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86.h,1,['variab'],['variables']
Modifiability,"/// This pass transforms loops that contain a conditional branch with induction; /// variable. For example, it transforms left code to right code:; ///; /// newbound = min(n, c); /// while (iv < n) { while(iv < newbound) {; /// A A; /// if (iv < c) B; /// B C; /// C }; /// if (iv != n) {; /// while (iv < n) {; /// A; /// C; /// }; /// }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopBoundSplit.h:85,variab,variable,85,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopBoundSplit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/LoopBoundSplit.h,1,['variab'],['variable']
Modifiability,"/// This performs customized parsing of pass name with parameters.; ///; /// We do not need parametrization of passes in textual pipeline very often,; /// yet on a rare occasion ability to specify parameters right there can be; /// useful.; ///; /// \p Name - parameterized specification of a pass from a textual pipeline; /// is a string in a form of :; /// PassName '<' parameter-list '>'; ///; /// Parameter list is being parsed by the parser callable argument, \p Parser,; /// It takes a string-ref of parameters and returns either StringError or a; /// parameter list in a form of a custom parameters type, all wrapped into; /// Expected<> template class.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:260,parameteriz,parameterized,260,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,1,['parameteriz'],['parameterized']
Modifiability,/// This represents '#pragma omp dispatch' directive.; ///; /// \code; /// #pragma omp dispatch device(dnum); /// \endcode; /// This example shows a directive '#pragma omp dispatch' with a; /// device clause with variable 'dnum'.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:213,variab,variable,213,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,/// This represents '#pragma omp distribute parallel for simd' composite; /// directive.; ///; /// \code; /// #pragma omp distribute parallel for simd private(x); /// \endcode; /// In this example directive '#pragma omp distribute parallel for simd' has; /// clause 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:285,variab,variables,285,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp distribute parallel for' composite; /// directive.; ///; /// \code; /// #pragma omp distribute parallel for private(a,b); /// \endcode; /// In this example directive '#pragma omp distribute parallel for' has clause; /// 'private' with the variables 'a' and 'b'; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:272,variab,variables,272,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,/// This represents '#pragma omp distribute simd' composite directive.; ///; /// \code; /// #pragma omp distribute simd private(x); /// \endcode; /// In this example directive '#pragma omp distribute simd' has clause; /// 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:241,variab,variables,241,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp distribute' directive.; ///; /// \code; /// #pragma omp distribute private(a,b); /// \endcode; /// In this example directive '#pragma omp distribute' has clauses 'private'; /// with the variables 'a' and 'b'; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:219,variab,variables,219,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp flush' directive.; ///; /// \code; /// #pragma omp flush(a,b); /// \endcode; /// In this example directive '#pragma omp flush' has 2 arguments- variables 'a'; /// and 'b'.; /// 'omp flush' directive does not have clauses but have an optional list of; /// variables to flush. This list of variables is stored within some fake clause; /// FlushClause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:177,variab,variables,177,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,3,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp for simd' directive.; ///; /// \code; /// #pragma omp for simd private(a,b) linear(i,j:s) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp for simd' has clauses 'private'; /// with the variables 'a' and 'b', 'linear' with variables 'i', 'j' and; /// linear step 's', 'reduction' with operator '+' and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:244,variab,variables,244,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,3,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp for' directive.; ///; /// \code; /// #pragma omp for private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp for' has clauses 'private' with the; /// variables 'a' and 'b' and 'reduction' with operator '+' and variables 'c'; /// and 'd'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:215,variab,variables,215,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,2,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp loop' directive.; ///; /// \code; /// #pragma omp loop private(a,b) binding(parallel) order(concurrent); /// \endcode; /// In this example directive '#pragma omp loop' has; /// clauses 'private' with the variables 'a' and 'b', 'binding' with; /// modifier 'parallel' and 'order(concurrent).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:237,variab,variables,237,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp masked taskloop simd' directive.; ///; /// \code; /// #pragma omp masked taskloop simd private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp masked taskloop simd' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:279,variab,variables,279,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp masked taskloop' directive.; ///; /// \code; /// #pragma omp masked taskloop private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp masked taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:264,variab,variables,264,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,/// This represents '#pragma omp masked' directive.; /// \code; /// #pragma omp masked filter(tid); /// \endcode; /// This example shows a directive '#pragma omp masked' with a filter clause; /// with variable 'tid'.; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:201,variab,variable,201,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,"/// This represents '#pragma omp master taskloop simd' directive.; ///; /// \code; /// #pragma omp master taskloop simd private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp master taskloop simd' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:279,variab,variables,279,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp master taskloop' directive.; ///; /// \code; /// #pragma omp master taskloop private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp master taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:264,variab,variables,264,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,/// This represents '#pragma omp metadirective' directive.; ///; /// \code; /// #pragma omp metadirective when(user={condition(N>10)}: parallel for); /// \endcode; /// In this example directive '#pragma omp metadirective' has clauses 'when'; /// with a dynamic user condition to check if a variable 'N > 10'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:290,variab,variable,290,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,"/// This represents '#pragma omp parallel for simd' directive.; ///; /// \code; /// #pragma omp parallel for simd private(a,b) linear(i,j:s) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp parallel for simd' has clauses; /// 'private' with the variables 'a' and 'b', 'linear' with variables 'i', 'j'; /// and linear step 's', 'reduction' with operator '+' and variables 'c' and; /// 'd'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:271,variab,variables,271,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,3,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp parallel for' directive.; ///; /// \code; /// #pragma omp parallel for private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp parallel for' has clauses 'private'; /// with the variables 'a' and 'b' and 'reduction' with operator '+' and; /// variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:242,variab,variables,242,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,2,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp parallel loop' directive.; ///; /// \code; /// #pragma omp parallel loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp parallel loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:246,variab,variables,246,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp parallel masked taskloop simd' directive.; ///; /// \code; /// #pragma omp parallel masked taskloop simd private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel masked taskloop simd' has; /// clauses 'private' with the variables 'a' and 'b', 'grainsize' with; /// expression 'val' and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:311,variab,variables,311,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp parallel masked taskloop' directive.; ///; /// \code; /// #pragma omp parallel masked taskloop private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel masked taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:296,variab,variables,296,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,/// This represents '#pragma omp parallel masked' directive.; ///; /// \code; /// #pragma omp parallel masked filter(tid); /// \endcode; /// In this example directive '#pragma omp parallel masked' has a clause; /// 'filter' with the variable tid; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:233,variab,variable,233,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variable']
Modifiability,"/// This represents '#pragma omp parallel master taskloop simd' directive.; ///; /// \code; /// #pragma omp parallel master taskloop simd private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel master taskloop simd' has; /// clauses 'private' with the variables 'a' and 'b', 'grainsize' with; /// expression 'val' and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:311,variab,variables,311,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp parallel master taskloop' directive.; ///; /// \code; /// #pragma omp parallel master taskloop private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel master taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:296,variab,variables,296,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp parallel master' directive.; ///; /// \code; /// #pragma omp parallel master private(a,b); /// \endcode; /// In this example directive '#pragma omp parallel master' has clauses; /// 'private' with the variables 'a' and 'b'; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:234,variab,variables,234,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp parallel sections' directive.; ///; /// \code; /// #pragma omp parallel sections private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp parallel sections' has clauses; /// 'private' with the variables 'a' and 'b' and 'reduction' with operator '+'; /// and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:257,variab,variables,257,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,2,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp parallel' directive.; ///; /// \code; /// #pragma omp parallel private(a,b) reduction(+: c,d); /// \endcode; /// In this example directive '#pragma omp parallel' has clauses 'private'; /// with the variables 'a' and 'b' and 'reduction' with operator '+' and; /// variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:231,variab,variables,231,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,2,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp scope' directive.; /// \code; /// #pragma omp scope private(a,b) nowait; /// \endcode; /// In this example directive '#pragma omp scope' has clauses 'private' with; /// the variables 'a' and 'b' and nowait.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:206,variab,variables,206,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp sections' directive.; ///; /// \code; /// #pragma omp sections private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp sections' has clauses 'private' with; /// the variables 'a' and 'b' and 'reduction' with operator '+' and variables; /// 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:230,variab,variables,230,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,2,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp simd' directive.; ///; /// \code; /// #pragma omp simd private(a,b) linear(i,j:s) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp simd' has clauses 'private'; /// with the variables 'a' and 'b', 'linear' with variables 'i', 'j' and; /// linear step 's', 'reduction' with operator '+' and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:232,variab,variables,232,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,3,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp single' directive.; ///; /// \code; /// #pragma omp single private(a,b) copyprivate(c,d); /// \endcode; /// In this example directive '#pragma omp single' has clauses 'private' with; /// the variables 'a' and 'b' and 'copyprivate' with variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:224,variab,variables,224,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,2,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp target parallel for simd' directive.; ///; /// \code; /// #pragma omp target parallel for simd private(a) map(b) safelen(c); /// \endcode; /// In this example directive '#pragma omp target parallel for simd' has clauses; /// 'private' with the variable 'a', 'map' with the variable 'b' and 'safelen'; /// with the variable 'c'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:277,variab,variable,277,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,3,['variab'],['variable']
Modifiability,"/// This represents '#pragma omp target parallel for' directive.; ///; /// \code; /// #pragma omp target parallel for private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp target parallel for' has clauses; /// 'private' with the variables 'a' and 'b' and 'reduction' with operator '+'; /// and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:263,variab,variables,263,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,2,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp target parallel loop' directive.; ///; /// \code; /// #pragma omp target parallel loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp target parallel loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:267,variab,variables,267,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp target simd' directive.; ///; /// \code; /// #pragma omp target simd private(a) map(b) safelen(c); /// \endcode; /// In this example directive '#pragma omp target simd' has clauses 'private'; /// with the variable 'a', 'map' with the variable 'b' and 'safelen' with; /// the variable 'c'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:238,variab,variable,238,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,3,['variab'],['variable']
Modifiability,/// This represents '#pragma omp target teams distribute parallel for simd'; /// combined directive.; ///; /// \code; /// #pragma omp target teams distribute parallel for simd private(x); /// \endcode; /// In this example directive '#pragma omp target teams distribute parallel; /// for simd' has clause 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:323,variab,variables,323,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,/// This represents '#pragma omp target teams distribute parallel for' combined; /// directive.; ///; /// \code; /// #pragma omp target teams distribute parallel for private(x); /// \endcode; /// In this example directive '#pragma omp target teams distribute parallel; /// for' has clause 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:308,variab,variables,308,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,/// This represents '#pragma omp target teams distribute simd' combined; /// directive.; ///; /// \code; /// #pragma omp target teams distribute simd private(x); /// \endcode; /// In this example directive '#pragma omp target teams distribute simd'; /// has clause 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:284,variab,variables,284,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,/// This represents '#pragma omp target teams distribute' combined directive.; ///; /// \code; /// #pragma omp target teams distribute private(x); /// \endcode; /// In this example directive '#pragma omp target teams distribute' has clause; /// 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:264,variab,variables,264,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp target teams loop' directive.; ///; /// \code; /// #pragma omp target teams loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp target teams loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:258,variab,variables,258,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp task' directive.; ///; /// \code; /// #pragma omp task private(a,b) final(d); /// \endcode; /// In this example directive '#pragma omp task' has clauses 'private' with the; /// variables 'a' and 'b' and 'final' with condition 'd'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:210,variab,variables,210,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp taskloop simd' directive.; ///; /// \code; /// #pragma omp taskloop simd private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp taskloop simd' has clauses 'private'; /// with the variables 'a' and 'b', 'grainsize' with expression 'val' and; /// 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:258,variab,variables,258,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp taskloop' directive.; ///; /// \code; /// #pragma omp taskloop private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp taskloop' has clauses 'private'; /// with the variables 'a' and 'b', 'grainsize' with expression 'val' and; /// 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:243,variab,variables,243,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,/// This represents '#pragma omp teams distribute parallel for simd' composite; /// directive.; ///; /// \code; /// #pragma omp teams distribute parallel for simd private(x); /// \endcode; /// In this example directive '#pragma omp teams distribute parallel for simd'; /// has clause 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:303,variab,variables,303,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,/// This represents '#pragma omp teams distribute parallel for' composite; /// directive.; ///; /// \code; /// #pragma omp teams distribute parallel for private(x); /// \endcode; /// In this example directive '#pragma omp teams distribute parallel for'; /// has clause 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:288,variab,variables,288,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp teams distribute simd'; /// combined directive.; ///; /// \code; /// #pragma omp teams distribute simd private(a,b); /// \endcode; /// In this example directive '#pragma omp teams distribute simd'; /// has clause 'private' with the variables 'a' and 'b'; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:265,variab,variables,265,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp teams distribute' directive.; ///; /// \code; /// #pragma omp teams distribute private(a,b); /// \endcode; /// In this example directive '#pragma omp teams distribute' has clauses; /// 'private' with the variables 'a' and 'b'; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:237,variab,variables,237,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,"/// This represents '#pragma omp teams loop' directive.; ///; /// \code; /// #pragma omp teams loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp teams loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:237,variab,variables,237,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,1,['variab'],['variables']
Modifiability,/// This represents 'detach' clause in the '#pragma omp task' directive.; ///; /// \code; /// #pragma omp task detach(evt); /// \endcode; /// In this example directive '#pragma omp detach' has simple 'detach' clause; /// with the variable 'evt'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:230,variab,variable,230,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variable']
Modifiability,"/// This represents clause 'aligned' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp simd aligned(a,b : 8); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'aligned'; /// with variables 'a', 'b' and alignment '8'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:229,variab,variables,229,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,/// This represents clause 'allocate' in the '#pragma omp ...' directives.; ///; /// \code; /// #pragma omp parallel private(a) allocate(omp_default_mem_alloc :a); /// \endcode; /// In this example directive '#pragma omp parallel' has clause 'private'; /// and clause 'allocate' for the variable 'a'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:287,variab,variable,287,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variable']
Modifiability,"/// This represents clause 'copyin' in the '#pragma omp ...' directives.; ///; /// \code; /// #pragma omp parallel copyin(a,b); /// \endcode; /// In this example directive '#pragma omp parallel' has clause 'copyin'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:229,variab,variables,229,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,"/// This represents clause 'copyprivate' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp single copyprivate(a,b); /// \endcode; /// In this example directive '#pragma omp single' has clause 'copyprivate'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:245,variab,variables,245,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,"/// This represents clause 'exclusive' in the '#pragma omp scan' directive.; ///; /// \code; /// #pragma omp scan exclusive(a,b); /// \endcode; /// In this example directive '#pragma omp scan' has clause 'exclusive'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:230,variab,variables,230,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,"/// This represents clause 'firstprivate' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp parallel firstprivate(a,b); /// \endcode; /// In this example directive '#pragma omp parallel' has clause 'firstprivate'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:252,variab,variables,252,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,"/// This represents clause 'from' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp target update from(a,b); /// \endcode; /// In this example directive '#pragma omp target update' has clause 'from'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:238,variab,variables,238,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,"/// This represents clause 'has_device_ptr' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp target has_device_addr(a,b); /// \endcode; /// In this example directive '#pragma omp target' has clause; /// 'has_device_ptr' with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:255,variab,variables,255,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
Modifiability,"/// This represents clause 'in_reduction' in the '#pragma omp task' directives.; ///; /// \code; /// #pragma omp task in_reduction(+:a,b); /// \endcode; /// In this example directive '#pragma omp task' has clause 'in_reduction' with; /// operator '+' and the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:259,variab,variables,259,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['variab'],['variables']
