quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Usability,"This is intended to be used as part of a generate Selector class; which will hold the directory and its associate. Function Members (Methods); public:. ~TBranchProxyDirector(); voidAttach(ROOT::TBranchProxy* p); voidAttach(ROOT::TFriendProxy* f); TH1F*CreateHistogram(const char* options); Long64_tGetReadEntry() const; TTree*GetTree() const; voidSetReadEntry(Long64_t entry); TTree*SetTree(TTree* newtree); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Long64_t i); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Int_t i). private:. ROOT::TBranchProxyDirector&operator=(const ROOT::TBranchProxyDirector&); ROOT::TBranchProxyDirectorTBranchProxyDirector(const ROOT::TBranchProxyDirector&). Data Members; private:. list<TBranchProxy*>fDirected; Long64_tfEntryEntry currently being read.; list<TFriendProxy*>fFriends; TTree*fTreeTTree we are currently looking at. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchProxyDirector(TTree* tree, Long64_t i); Simple constructor. TBranchProxyDirector(TTree* tree, Int_t i); cint has a problem casting int to long long; Simple constructor. void Attach(TBranchProxy* p). void Attach(TFriendProxy* p). TH1F* CreateHistogram(const char* options); Create a temporary 1D histogram. void SetReadEntry(Long64_t entry). TTree* SetTree(TTree* newtree). TBranchProxyDirector(const ROOT::TBranchProxyDirector& ); {;}. TBranchProxyDirector& operator=(const ROOT::TBranchProxyDirector& ); {return *this;}. Long64_t GetReadEntry() const; { return fEntry; }. TTree* GetTree() const; void Print();. { return fTree; }. » Author: Philippe Canal 13/05/2003 » Copyright (C) 1995-2004, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id: TBranchProxyDirector.h 34913 2010-08-20 19:18:35Z pcanal $ » Last generated: 2010-10-03 18:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__TBranchProxyDirector.html:1515,Simpl,Simple,1515,root/html528/ROOT__TBranchProxyDirector.html,https://root.cern,https://root.cern/root/html528/ROOT__TBranchProxyDirector.html,2,['Simpl'],['Simple']
Usability,"This is intended to be used as part of a generate Selector class; which will hold the directory and its associate. Function Members (Methods); public:. ~TBranchProxyDirector(); voidAttach(ROOT::TBranchProxy* p); voidAttach(ROOT::TFriendProxy* f); TH1F*CreateHistogram(const char* options); Long64_tGetReadEntry() const; TTree*GetTree() const; voidSetReadEntry(Long64_t entry); TTree*SetTree(TTree* newtree); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Long64_t i); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Int_t i). private:. ROOT::TBranchProxyDirector&operator=(const ROOT::TBranchProxyDirector&); ROOT::TBranchProxyDirectorTBranchProxyDirector(const ROOT::TBranchProxyDirector&). Data Members; private:. list<TBranchProxy*>fDirected; Long64_tfEntryEntry currently being read.; list<TFriendProxy*>fFriends; TTree*fTreeTTree we are currently looking at. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchProxyDirector(TTree* tree, Long64_t i); Simple constructor. TBranchProxyDirector(TTree* tree, Int_t i); cint has a problem casting int to long long; Simple constructor. void Attach(TBranchProxy* p). void Attach(TFriendProxy* p). TH1F* CreateHistogram(const char* options); Create a temporary 1D histogram. void SetReadEntry(Long64_t entry). TTree* SetTree(TTree* newtree). TBranchProxyDirector(const ROOT::TBranchProxyDirector& ); {;}. TBranchProxyDirector& operator=(const ROOT::TBranchProxyDirector& ); {return *this;}. Long64_t GetReadEntry() const; { return fEntry; }. TTree* GetTree() const; void Print();. { return fTree; }. » Author: Philippe Canal 13/05/2003 » Copyright (C) 1995-2004, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id: TBranchProxyDirector.h 34913 2010-08-20 19:18:35Z pcanal $ » Last generated: 2011-07-04 15:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__TBranchProxyDirector.html:1515,Simpl,Simple,1515,root/html530/ROOT__TBranchProxyDirector.html,https://root.cern,https://root.cern/root/html530/ROOT__TBranchProxyDirector.html,2,['Simpl'],['Simple']
Usability,"This is intended to be used as part of a generate Selector class; which will hold the directory and its associate. Function Members (Methods); public:. ~TBranchProxyDirector(); voidAttach(ROOT::TBranchProxy* p); voidAttach(ROOT::TFriendProxy* f); TH1F*CreateHistogram(const char* options); Long64_tGetReadEntry() const; TTree*GetTree() const; voidSetReadEntry(Long64_t entry); TTree*SetTree(TTree* newtree); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Long64_t i); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Int_t i). private:. ROOT::TBranchProxyDirector&operator=(const ROOT::TBranchProxyDirector&); ROOT::TBranchProxyDirectorTBranchProxyDirector(const ROOT::TBranchProxyDirector&). Data Members; private:. list<TBranchProxy*>fDirected; Long64_tfEntryEntry currently being read.; list<TFriendProxy*>fFriends; TTree*fTreeTTree we are currently looking at. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchProxyDirector(TTree* tree, Long64_t i); Simple constructor. TBranchProxyDirector(TTree* tree, Int_t i); cint has a problem casting int to long long; Simple constructor. void Attach(TBranchProxy* p). void Attach(TFriendProxy* p). TH1F* CreateHistogram(const char* options); Create a temporary 1D histogram. void SetReadEntry(Long64_t entry). TTree* SetTree(TTree* newtree). TBranchProxyDirector(const ROOT::TBranchProxyDirector& ); {;}. TBranchProxyDirector& operator=(const ROOT::TBranchProxyDirector& ); {return *this;}. Long64_t GetReadEntry() const; { return fEntry; }. TTree* GetTree() const; void Print();. { return fTree; }. » Author: Philippe Canal 13/05/2003 » Copyright (C) 1995-2004, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id: TBranchProxyDirector.h 34913 2010-08-20 19:18:35Z pcanal $ » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__TBranchProxyDirector.html:1515,Simpl,Simple,1515,root/html532/ROOT__TBranchProxyDirector.html,https://root.cern,https://root.cern/root/html532/ROOT__TBranchProxyDirector.html,2,['Simpl'],['Simple']
Usability,"ThreadImp;  TThreadImp ();  ; virtual ~TThreadImp ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWin32Thread.html:2376,Clear,Clear,2376,doc/master/classTWin32Thread.html,https://root.cern,https://root.cern/doc/master/classTWin32Thread.html,1,['Clear'],['Clear']
Usability,TmpCoordErrorVector ); 657 {; 658 delete[] fpTmpCoordErrorVector;; 659 fpTmpCoordErrorVector = nullptr;; 660 }; 661 ; 662 if ( kNoError == fErrorType ); 663 {; 664 fCoordErrors.clear();; 665 fCoordErrorsPtr.clear();; 666 ; 667 fDataErrorHigh.clear();; 668 fDataErrorHighPtr = nullptr;; 669 ; 670 fDataErrorLow.clear();; 671 fDataErrorLowPtr = nullptr;; 672 ; 673 fDataError.clear();; 674 fDataErrorPtr = nullptr;; 675 ; 676 return;; 677 }; 678 ; 679 if ( kCoordError == fErrorType || kAsymError == fErrorType ); 680 {; 681 fCoordErrorsPtr.resize( fDim );; 682 fCoordErrors.resize( fDim );; 683 for( unsigned int i=0; i < fDim; i++ ); 684 {; 685 fCoordErrors[i].resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 686 ; 687 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 688 }; 689 ; 690 fpTmpCoordErrorVector = new double[fDim];; 691 }; 692 else; 693 {; 694 fCoordErrors.clear();; 695 fCoordErrorsPtr.clear();; 696 }; 697 ; 698 if ( kValueError == fErrorType || kCoordError == fErrorType ); 699 {; 700 fDataError.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 701 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 702 ; 703 fDataErrorHigh.clear();; 704 fDataErrorHighPtr = nullptr;; 705 fDataErrorLow.clear();; 706 fDataErrorLowPtr = nullptr;; 707 }; 708 else if ( fErrorType == kAsymError ); 709 {; 710 fDataErrorHigh.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 711 fDataErrorHighPtr = fDataErrorHigh.empty() ? nullptr : &fDataErrorHigh.front();; 712 ; 713 fDataErrorLow.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 714 fDataErrorLowPtr = fDataErrorLow.empty() ? nullptr : &fDataErrorLow.front();; 715 ; 716 fDataError.clear();; 717 fDataErrorPtr = nullptr;; 718 }; 719 else; 720 {; 721 assert(false);; 722 }; 723 }; 724 ; 725 void BinData::InitBinEdge(); 726 {; 727 fBinEdge.resize( fDim );; 728 ; 729 for( unsigned int i=0; i<fDim; i++ ); 730 {; 731 fBinEdge[i].reserve(fMaxPoints + FitData::Vecto,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:21198,clear,clear,21198,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['clear'],['clear']
Usability,"To(modelsum) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_modelsum_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: -19036.9, estimated distance to minimum: 5.53181e-08; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; Nbkg 9.9878e+03 +/- 1.50e+02; Nsig 1.2239e-03 +/- 1.97e+03; alpha -3.9975e-02 +/- 5.60e-04; ; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""") / NormRange("""").; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) only plotting range 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify whe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html:22573,Clear,Clear,22573,doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,https://root.cern,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,2,['Clear'],['Clear']
Usability,"ToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBImplySelectAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBTakeAnyParentAsMaster; static TEveElement::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveWindow(const char* n = ""TEveWindow"", const char* t = """"); Constructor. ~TEveWindow(); Destructor. void PreDeleteElement(); Called before the element is deleted, thus offering the last chance; to detach from acquired resources and from the framework itself.; Here the request is just passed to TEveManager.; If you override it, make sure to call base-class version. void PreUndock(); Virtual function called before a window is undocked. void PostDock(); Virtual function called after a window is docked. void NameTitleChanged(); Name or title of the window changed - propagate to frames.; Virtual from TEveElement. void PopulateEmptyFrame(TEveCompositeFrame* ef); Populate given frame-slot - intended for initial population; of a new slot or low-level window-swapping.; No layout or window-mapping is done. void SwapWindow(TEveWindow* w); Swap frames with the given window. void SwapWindowWithCurrent(); Swap frames with the current window. void UndockWindow(); Undock the window - put it into a dedicated main-frame. void UndockWindowDestroySlot(); Undock the window - put it into a dedicated main-frame.; The old window slot is destroyed. void ReplaceWindow(TEveWindow* w); Replace this window with the passed one.; Eve parentship is properly handled.; This will most likely lead to the destruction of this window.; Layout is called on the frame. void DestroyWindow(); Destroy eve-window - replace i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveWindow.html:22659,undo,undocked,22659,root/html602/TEveWindow.html,https://root.cern,https://root.cern/root/html602/TEveWindow.html,2,['undo'],['undocked']
Usability,"ToObjXCoord (Long_t xCoord, Long_t line);  Convert x screen coordinate to column in specified line. ;  ; virtual Long_t ToObjYCoord (Long_t yCoord);  Convert y screen coordinate to line number. ;  ; virtual Long_t ToScrXCoord (Long_t xCoord, Long_t line);  Convert column number in specified line to screen coordinate. ;  ; virtual Long_t ToScrYCoord (Long_t yCoord);  Convert line number to screen coordinate. ;  ; virtual void Update ();  update the whole window of text view ;  ;  Public Member Functions inherited from TGView;  TGView (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, Int_t id=-1, UInt_t xMargin=0, UInt_t yMargin=0, UInt_t options=kSunkenFrame|kDoubleBorder, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create an editor view, containing an TGEditorFrame and (optionally) a horizontal and vertical scrollbar. ;  ;  ~TGView () override;  Delete view. ;  ; void ChangeBackground (Pixel_t) override;  Change background color of the canvas frame. ;  ; void Clear (Option_t *="""") override;  Clear view. ;  ; void DrawBorder () override;  Draw the border of the text edit widget. ;  ; TGViewFrame * GetCanvas () const;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; TGLongPosition GetScrollPosition () const;  ; TGLongPosition GetScrollValue () const;  ; const TGGC & GetViewWhiteGC ();  ; TGDimension GetVirtualSize () const;  ; Bool_t HandleButton (Event_t *event) override;  handle button ;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose events. ;  ; TClass * IsA () const override;  ; void Layout () override;  layout view ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process scrollbar messages. ;  ; virtual void ScrollCanvas (Int_t newTop, Int_t direction);  Scroll the canvas to new_top in the kVertical or kHorizontal direction. ;  ; void ScrollDown (Int_t pixels);  ; void ScrollLeft (Int_t pixels);  ; void ScrollRight (Int_t pixels);  ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextView.html:6103,Clear,Clear,6103,doc/master/classTGTextView.html,https://root.cern,https://root.cern/doc/master/classTGTextView.html,4,['Clear'],['Clear']
Usability,"ToObjXCoord (Long_t xCoord, Long_t line);  Convert x screen coordinate to column in specified line. ;  ; virtual Long_t ToObjYCoord (Long_t yCoord);  Convert y screen coordinate to line number. ;  ; virtual Long_t ToScrXCoord (Long_t xCoord, Long_t line);  Convert column number in specified line to screen coordinate. ;  ; virtual Long_t ToScrYCoord (Long_t yCoord);  Convert line number to screen coordinate. ;  ; virtual void Update ();  update the whole window of text view ;  ;  Public Member Functions inherited from TGView;  TGView (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, Int_t id=-1, UInt_t xMargin=0, UInt_t yMargin=0, UInt_t options=kSunkenFrame|kDoubleBorder, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create an editor view, containing an TGEditorFrame and (optionally) a horizontal and vertical scrollbar. ;  ;  ~TGView () override;  Delete view. ;  ; void ChangeBackground (Pixel_t) override;  Change background color of the canvas frame. ;  ; void Clear (Option_t *="""") override;  Clear view. ;  ; void DrawBorder () override;  Draw the border of the text edit widget. ;  ; TGViewFrame * GetCanvas () const;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; TGLongPosition GetScrollPosition () const;  ; TGLongPosition GetScrollValue () const;  ; const TGGC & GetViewWhiteGC ();  ; TGDimension GetVirtualSize () const;  ; Bool_t HandleButton (Event_t *event) override;  handle button ;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose events. ;  ; TClass * IsA () const override;  ; void Layout () override;  layout view ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process scrollbar messages. ;  ; void ScrollDown (Int_t pixels);  ; void ScrollLeft (Int_t pixels);  ; void ScrollRight (Int_t pixels);  ; virtual void ScrollToPosition (TGLongPosition newPos);  Scroll the canvas to pos. ;  ; void ScrollUp (Int_t pixels);  ; void SetBackgroundColor ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEdit.html:11927,Clear,Clear,11927,doc/master/classTGTextEdit.html,https://root.cern,https://root.cern/doc/master/classTGTextEdit.html,2,['Clear'],['Clear']
Usability,"Tool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heavyside Your description goes here...; RooStats::HybridCalculator Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing the results of the HybridCalculator; RooStats::HypoTestCalculator Interface for tools doing hypothesis tests; RooStats::HypoTestInverter HypoTestInverter class; RooStats::HypoTestInverterPlot HypoTestInverterPlot class; RooStats::HypoTestInverterResult HypoTestInverterResult class ; RooStats::HypoTestResult Base class to represent results of a h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:42604,simpl,simple,42604,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['simpl'],['simple']
Usability,"Total number of bytes in all leaves after compression; static Int_tTBranch::fgCount! branch counter. private:. Long64_tfRequestedEntry! Cursor indicating which entry is being requested. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchRef(); Default constructor. TBranchRef(TTree* tree); Main constructor called by TTree::BranchRef. ~TBranchRef(); Typical destructor. void Clear(Option_t* option = """"); Clear entries in the TRefTable. Int_t Fill(); Fill the branch basket with the referenced objects parent numbers. Bool_t Notify(); This function is called by TRefTable::Notify, itself called by; TRef::GetObject.; The function reads the branch containing the object referenced; by the TRef. void Print(Option_t* option = """") const; Print the TRefTable branch. void ReadLeavesImpl(TBuffer& b); This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. void FillLeavesImpl(TBuffer& b); This function called by TBranch::Fill overloads TBranch::FillLeaves. void Reset(Option_t* option = """"); Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. void ResetAfterMerge(TFileMergeInfo* ); Reset a Branch after a Merge operation (drop data but keep customizations); TRefTable is cleared. Int_t SetParent(const TObject* obj, Int_t branchID); -- Set the current parent branch. This function is called by TBranchElement::GetEntry(); and TBranchElement::Fill() when reading or writing; branches that may contain referenced objects. TRefTable * GetRefTable() const; {return fRefTable;}. void SetRequestedEntry(Long64_t entry); {fRequestedEntry = entry;}. » Author: Rene Brun 19/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchRef.h 40872 2011-09-13 21:33:33Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBranchRef.html:14845,clear,cleared,14845,root/html532/TBranchRef.html,https://root.cern,https://root.cern/root/html532/TBranchRef.html,2,['clear'],['cleared']
Usability,"TransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidSetVertical(Bool_t x = kTRUE); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveWindowPack(TGPack* p, const char* n = ""TEveWindowPack"", const char* t = """"); voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveWindowPack.html:17271,Undo,UndockWindow,17271,root/html602/TEveWindowPack.html,https://root.cern,https://root.cern/root/html602/TEveWindowPack.html,4,['Undo'],"['UndockWindow', 'UndockWindowDestroySlot']"
Usability,"Tree and TTreePlayer::UpdateFormulaLeaves when a new Tree is loaded. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TTreeIndex. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateFormulaLeaves (const TTree *parent) override;  Called by TChain::LoadTree when the parent chain changes it's tree. ;  ;  Public Member Functions inherited from TVirtualIndex;  TVirtualIndex ();  pointer to Tree ;  ;  ~TVirtualIndex () override;  ; virtual TTree * GetTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeIndex.html:3459,Clear,Clear,3459,doc/master/classTTreeIndex.html,https://root.cern,https://root.cern/doc/master/classTTreeIndex.html,1,['Clear'],['Clear']
Usability,"Tree::FlushBaskets is called and all the current basket are closed-out and written to disk individually.; By default the previous header is deleted after having written the new header. if option contains ""Overwrite"", the previous Tree header is deleted before written the new header. This option is slightly faster, but the default option is safer in case of a problem (disk quota exceeded) when writing the new header.; The function returns the number of bytes written to the file. if the number of bytes is null, an error has occurred while writing the header to the file. How to write a Tree in one process and view it from another process; The following two scripts illustrate how to do this. The script treew.C is executed by process1, treer.C by process2; script treew.C: void treew() {; TFile f(""test.root"",""recreate"");; TNtuple *ntuple = new TNtuple(""ntuple"",""Demo"",""px:py:pz:random:i"");; Float_t px, py, pz;; for ( Int_t i=0; i<10000000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ntuple->Fill(px,py,pz,random,i);; if (i%1000 == 1) ntuple->AutoSave(""SaveSelf"");; }; }; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TTree::AutoSavevirtual Long64_t AutoSave(Option_t *option="""")AutoSave tree header every fAutoSave bytes.Definition TTree.cxx:1500; int; script treer.C: void treer() {; TFile f(""test.root"");; TTree *ntuple = (TTree*)f.Get(""ntuple"");; TCanvas c1;; Int_t first = 0;; while(1) {; if (first == 0) ntuple->Draw(""px>>hpx"", """","""",10000000,first);; else ntuple->Draw(""px>>+hpx"","""","""",10000000,first);; first = (Int_t)ntuple->GetEntries();; c1.Update();; gSystem->Sleep(1000); //sleep 1 second; ntuple->Refresh();; }; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:555",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:76913,simpl,simple,76913,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['simpl'],['simple']
Usability,"Tree::FlushBaskets is called and all the current basket are closed-out and written to disk individually.; By default the previous header is deleted after having written the new header. if option contains ""Overwrite"", the previous Tree header is deleted before written the new header. This option is slightly faster, but the default option is safer in case of a problem (disk quota exceeded) when writing the new header.; The function returns the number of bytes written to the file. if the number of bytes is null, an error has occurred while writing the header to the file. How to write a Tree in one process and view it from another process; The following two scripts illustrate how to do this. The script treew.C is executed by process1, treer.C by process2; script treew.C: void treew() {; TFile f(""test.root"",""recreate"");; TNtuple *ntuple = new TNtuple(""ntuple"",""Demo"",""px:py:pz:random:i"");; Float_t px, py, pz;; for ( Int_t i=0; i<10000000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ntuple->Fill(px,py,pz,random,i);; if (i%1000 == 1) ntuple->AutoSave(""SaveSelf"");; }; }; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TTree::AutoSavevirtual Long64_t AutoSave(Option_t *option="""")AutoSave tree header every fAutoSave bytes.Definition TTree.cxx:1500; int; script treer.C: void treer() {; TFile f(""test.root"");; TTree *ntuple = (TTree*)f.Get(""ntuple"");; TCanvas c1;; Int_t first = 0;; while(1) {; if (first == 0) ntuple->Draw(""px>>hpx"", """","""",10000000,first);; else ntuple->Draw(""px>>+hpx"","""","""",10000000,first);; first = (Int_t)ntuple->GetEntries();; c1.Update();; gSystem->Sleep(1000); //sleep 1 second; ntuple->Refresh();; }; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:77086,simpl,simple,77086,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['simpl'],['simple']
Usability,"Tree::MakeClass. The TTree::Draw method is convenient and easy to use; however it falls short if you need to do some programming with the variable.; For example, for plotting the masses of all oppositely changed pairs of tracks, you would need to write a program that loops over all events, finds all pairs of tracks, and calculates the required quantities. We have shown how to retrieve the data arrays from the branches of the tree in the previous section, and you could just write that program from scratch. Since this is a very common task, ROOT provides a utility that generates a skeleton class designed to loop over the entries of the tree.; This is the TTree::MakeClass method. We will now go through the steps of using MakeClass with a simplified example. The methods used here obviously work for complex event loop calculations.; These are our assumptions: we would like to do selective plotting and loop through each entry of the tree and tracks. We chose a simple example: we want to plot fPx of the first 100 tracks of each entry. We have a ROOT tree with a branch for each data member in the “Event” object. To build this file and tree follow the instructions on how to build the examples in $ROOTSYS/test. Execute Event and instruct it to split the object with this command (from the UNIX command line).; > $ROOTSYS/test/Event 400 1 2 1; This creates an Event.root file with 400 events, compressed, split, and filled.; See $ROOTSYS/test/MainEvent.cxx for more info.; The person who designed the tree makes a shared library available to you, which defines the classes needed. In this case, the classes are Event, EventHeader, and Track and they are defined in the shared library libEvent.so. The designer also gives you the Event.h file to see the definition of the classes. You can locate Event.h in $ROOTSYS/test, and if you have not yet built libEvent.so, please see the instructions of how to build it (typing make in $ROOTSYS/test is enough). If you have already built it, you can ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:634649,simpl,simple,634649,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"TreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusselector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Get variable buffer. TTreeFormula* GetVar(Int_t i) const; Get variable formula. void InitArrays(Int_t newsize); Initialization of the primitive type arrays if the new size is bigger than the available space. UInt_t SplitNames(const TString& varexp, vector<TString>& names); Build Index array fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSelectorDraw.html:9214,Clear,ClearFormula,9214,root/html528/TSelectorDraw.html,https://root.cern,https://root.cern/root/html528/TSelectorDraw.html,1,['Clear'],['ClearFormula']
Usability,"TreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusselector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSelectorDraw.html:9320,Clear,ClearFormula,9320,root/html530/TSelectorDraw.html,https://root.cern,https://root.cern/root/html530/TSelectorDraw.html,1,['Clear'],['ClearFormula']
Usability,"TreePerfStats, and TPerfStats. ◆ SetMissed() [2/2]. virtual void TVirtualPerfStats::SetMissed ; (; TBranch * ; b, . size_t ; basketNumber . ). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ SetNumEvents(). virtual void TVirtualPerfStats::SetNumEvents ; (; Long64_t ; num). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ SetUsed() [1/2]. virtual void TVirtualPerfStats::SetUsed ; (; size_t ; bi, . size_t ; basketNumber . ). pure virtual . Implemented in TTreePerfStats, and TPerfStats. ◆ SetUsed() [2/2]. virtual void TVirtualPerfStats::SetUsed ; (; TBranch * ; b, . size_t ; basketNumber . ). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ SimpleEvent(). virtual void TVirtualPerfStats::SimpleEvent ; (; EEventType ; type). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ Streamer(). void TVirtualPerfStats::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TVirtualPerfStats::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file TVirtualPerfStats.h. ◆ UnzipEvent(). virtual void TVirtualPerfStats::UnzipEvent ; (; TObject * ; tree, . Long64_t ; pos, . Double_t ; start, . Int_t ; complen, . Int_t ; objlen . ). pure virtual . Implemented in TPerfStats, and TTreePerfStats. ◆ UpdateBranchIndices(). virtual void TVirtualPerfStats::UpdateBranchIndices ; (; TObjArray * ; branches). pure virtual . Implemented in TPerfStats, and TTreePerfStats. Friends And Related Symbol Documentation. ◆ TChain. friend class TChain. friend . Definition at line 35 of file TVirtualPerfStats.h. Libraries for TVirtualPerfStats:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TVirtualPerfStats.h; core/base/src/TVirtualPerfStats.cxx. TVirtualPerfStats. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPerfStats.html:18501,Guid,Guide,18501,doc/master/classTVirtualPerfStats.html,https://root.cern,https://root.cern/doc/master/classTVirtualPerfStats.html,1,['Guid'],['Guide']
Usability,"TreeReader::h2TH2F * h2Definition h1analysisTreeReader.h:33; h1analysisTreeReader::fRendTTreeReaderArray< Float_t > fRendDefinition h1analysisTreeReader.h:27; h1analysisTreeReader::fEtads_dTTreeReaderValue< Float_t > fEtads_dDefinition h1analysisTreeReader.h:17; h1analysisTreeReader::hdmdTH1F * hdmdDefinition h1analysisTreeReader.h:32; h1analysisTreeReader::SlaveTerminatevoid SlaveTerminate() override; h1analysisTreeReader::fRstartTTreeReaderArray< Float_t > fRstartDefinition h1analysisTreeReader.h:26; h1analysisTreeReader::fDm_dTTreeReaderValue< Float_t > fDm_dDefinition h1analysisTreeReader.h:18; h1analysisTreeReader::fNlhkTTreeReaderArray< Float_t > fNlhkDefinition h1analysisTreeReader.h:28; h1analysisTreeReader::fPtds_dTTreeReaderValue< Float_t > fPtds_dDefinition h1analysisTreeReader.h:16; h1analysisTreeReader::Beginvoid Begin(TTree *) override; h1analysisTreeReader::Initvoid Init(TTree *myTree) overrideDefinition h1analysisTreeReader.h:67; lineTLine * lineDefinition entrylistblock_figure1.C:235; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; h1analysisTreeReader.h; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; AuthorAnders Eie, 2013 ; Definition in file h1analysisTreeReader.C. tutorialstreeh1analysisTreeReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysisTreeReader_8C.html:17586,Guid,Guide,17586,doc/master/h1analysisTreeReader_8C.html,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html,1,['Guid'],['Guide']
Usability,"TupleImporter object.; auto importer = RNTupleImporter::Create(kTreeFileName, kTreeName, kNTupleFileName);; ; // Begin importing.; importer->Import();; ; // Inspect the schema of the written RNTuple.; auto file = std::unique_ptr<TFile>(TFile::Open(kNTupleFileName));; if (!file || file->IsZombie()) {; std::cerr << ""cannot open "" << kNTupleFileName << std::endl;; return;; }; auto ntpl = std::unique_ptr<ROOT::RNTuple>(file->Get<ROOT::RNTuple>(""Events""));; auto reader = RNTupleReader::Open(*ntpl);; reader->PrintInfo();; ; ROOT::RDataFrame df(""Events"", kNTupleFileName);; df.Histo1D({""Jet_pt"", ""Jet_pt"", 100, 0, 0}, ""Jet_pt"")->DrawCopy();; }; RNTupleDS.hxx; RNTupleImporter.hxx; RNTupleReader.hxx; RPageStorageFile.hxx; TFile.h; TROOT.h; TSystem.h; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; ROOT::Experimental::RNTupleImporterConverts a TTree into an RNTuple.Definition RNTupleImporter.hxx:103; ROOT::Experimental::RNTupleReaderAn RNTuple that is used to read data from storage.Definition RNTupleReader.hxx:71; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RNTupleRepresentation of an RNTuple data set in a ROOT file.Definition RNTuple.hxx:69; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TSystem::Unlinkvirtual int Unlink(const char *name)Unlink, i.e.Definition TSystem.cxx:1381; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; DateDecember 2022 ; AuthorThe ROOT Team ; Definition in file ntpl008_import.C. tutorialsv7ntuplentpl008_import.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ntpl008__import_8C.html:3407,Guid,Guide,3407,doc/master/ntpl008__import_8C.html,https://root.cern,https://root.cern/doc/master/ntpl008__import_8C.html,1,['Guid'],['Guide']
Usability,UBLE_MAX to specify un infinite domain in that coordinate ; Definition at line 103 of file TUnuranMultiContDist.h. ◆ SetMode(). void TUnuranMultiContDist::SetMode ; (; const double * ; x). inline . set the mode of the distribution (coordinates of the distribution maximum values) ; Definition at line 112 of file TUnuranMultiContDist.h. ◆ Streamer(). void TUnuranMultiContDist::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TUnuranBaseDist. ◆ StreamerNVirtual(). void TUnuranMultiContDist::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 176 of file TUnuranMultiContDist.h. Member Data Documentation. ◆ fIsLogPdf. bool TUnuranMultiContDist::fIsLogPdf. private . flag to control if function pointer represent log of pdf ; Definition at line 172 of file TUnuranMultiContDist.h. ◆ fMode. std::vector<double> TUnuranMultiContDist::fMode. private . vector representing the x coordinates of the maximum of the pdf ; Definition at line 170 of file TUnuranMultiContDist.h. ◆ fOwnFunc. bool TUnuranMultiContDist::fOwnFunc. private . flag to indicate if class manages the function pointers ; Definition at line 173 of file TUnuranMultiContDist.h. ◆ fPdf. const ROOT::Math::IMultiGenFunction* TUnuranMultiContDist::fPdf. private . Definition at line 166 of file TUnuranMultiContDist.h. ◆ fXmax. std::vector<double> TUnuranMultiContDist::fXmax. private . vector with upper x values of the domain ; Definition at line 169 of file TUnuranMultiContDist.h. ◆ fXmin. std::vector<double> TUnuranMultiContDist::fXmin. private . vector with lower x values of the domain ; Definition at line 168 of file TUnuranMultiContDist.h. Libraries for TUnuranMultiContDist:. [legend]; The documentation for this class was generated from the following files:; math/unuran/inc/TUnuranMultiContDist.h; math/unuran/src/TUnuranMultiContDist.cxx. TUnuranMultiContDist. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuranMultiContDist.html:11161,Guid,Guide,11161,doc/master/classTUnuranMultiContDist.html,https://root.cern,https://root.cern/doc/master/classTUnuranMultiContDist.html,1,['Guid'],['Guide']
Usability,"UE, Bool_t shapeProp = kFALSE); Bool_taddThreshold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooThresholdCategory.html:2156,Clear,Clear,2156,root/html534/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html534/RooThresholdCategory.html,1,['Clear'],['Clear']
Usability,"UI diagnostics. ; Definition at line 24 of file RWebDisplayArgs.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 476 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 694 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 641 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 765 of file RConversionRuleParser.cxx. Variable Documentation. ◆ gCoreMutex. ROOT::TVirtualRWMutex * ROOT::gCoreMutex = nullptr. Definition at line 37 of file TVirtualRWMutex.h. ◆ gReadRawRules. SchemaRuleClassMap_t ROOT::gReadRawRules. Definition at line 25 of file RConversionRuleParser.h. ◆ gReadRules. SchemaRuleClassMap_t ROOT::gReadRules. Definition at line 24 of file RConversionRuleParser.h. ◆ newRQt5CreatorReg. struct ROOT::RQt5CreatorReg ROOT::newRQt5CreatorReg. ◆ newRQt6CreatorReg. struct ROOT::RQt6CreatorReg ROOT::newRQt6CreatorReg. ROOT. ROOT v6-30 - Reference Guide Generated on Tue Oct 29 2024 12:59:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v630/namespaceROOT.html:46621,Guid,Guide,46621,doc/v630/namespaceROOT.html,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html,1,['Guid'],['Guide']
Usability,"UID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Bool_tfColourfulOutputflag for use of colors; TMVA::MsgLogger*fLoggerthe output logger; Int_tfNcountsreference number of ""counts"" ; TStringfPrefixprefix for outputs; static const TStringfgClassNameused for output; static const Int_tfgNbinsnumber of bins in progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE); constructor. Timer(Int_t ncounts, const char* prefix = """", Bool_t colourfulOutput = kTRUE); standard constructor: ncounts gives the total number of counts that; the loop will iterate through. At each call of the timer, the current; number of counts is provided by the user, so that the timer can obtain; the due time from linearly interpolating the spent time. ~Timer( void ); destructor. void Init(Int_t ncounts); timer initialisation. void Reset( void ); resets timer. Double_t ElapsedSeconds( void ); computes elapsed tim in seconds. TString GetElapsedTime(Bool_t Scientific = kTRUE); returns pretty string with elaplsed time. TString GetLeftTime(Int_t icounts); returns pretty string with time left. void DrawProgressBar(); draws the progressbar. void DrawProgressBar(TString ); draws a string in the progress bar. void DrawProgressBar(Int_t , const TString& comment = """"); draws progress bar in color or B&W; caution:. TString SecToText(Double_t , Bool_t ) const; pretty string output. Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2006: *; » Last changed: root/tmva $Id: Timer.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Timer.html:7607,progress bar,progress bar,7607,root/html530/TMVA__Timer.html,https://root.cern,https://root.cern/root/html530/TMVA__Timer.html,2,['progress bar'],['progress bar']
Usability,"UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTRootBrowser::BrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidTRootBrowser::Checked(TObject* obj, Bool_t check)SIGNAL ; virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTRootBrowser::CloneBrowser(); virtual voidCloseTab(Int_t id); virtual voidTRootBrowser::CloseTabs(); virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; voidTRootBrowser::CreateBrowser(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveBrowser.html:1770,Clear,Clear,1770,root/html534/TEveBrowser.html,https://root.cern,https://root.cern/root/html534/TEveBrowser.html,3,['Clear'],['Clear']
Usability,"UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTRootBrowser::BrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidTRootBrowser::Checked(TObject* obj, Bool_t check)SIGNAL ; virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTRootBrowser::CloneBrowser(); voidTRootBrowser::CloseTab(Int_t id); virtual voidTRootBrowser::CloseTabs(); virtual voidTRootBrowser::CloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; voidTRootBrowser::CreateBrowser(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveBrowser.html:1770,Clear,Clear,1770,root/html530/TEveBrowser.html,https://root.cern,https://root.cern/root/html530/TEveBrowser.html,2,['Clear'],['Clear']
Usability,"UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTRootBrowser::BrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidTRootBrowser::Checked(TObject* obj, Bool_t check)SIGNAL ; virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTRootBrowser::CloneBrowser(); voidTRootBrowser::CloseTab(Int_t id); virtual voidTRootBrowser::CloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; voidTRootBrowser::CreateBrowser(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveBrowser.html:1770,Clear,Clear,1770,root/html528/TEveBrowser.html,https://root.cern,https://root.cern/root/html528/TEveBrowser.html,1,['Clear'],['Clear']
Usability,"UInt_t f) const; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidChangeCursor(Event_t* event); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static voidFixBounds(Float_t& min, Float_t& max); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; TStringGetSString() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGDoubleSlider&operator=(const TGDoubleSlider&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsRefe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDoubleSlider.html:15262,Clear,ClearFlags,15262,root/html528/TGDoubleSlider.html,https://root.cern,https://root.cern/root/html528/TGDoubleSlider.html,4,['Clear'],['ClearFlags']
Usability,"UInt_t h); virtual Bool_tTGX11::AllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGX11::Bell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidTGX11::ChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidTGX11::ChangeGC(GContext_t gc, GCValues_t* gval); virtual voidTGX11::ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidTGX11::ChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidTGX11::ChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tTGX11::CheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGX11::ClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGX11::ClearWindow(); virtual voidTGX11::ClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTGX11::CloseDisplay(); virtual voidTGX11::ClosePixmap(); virtual voidTGX11::CloseWindow(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGX11::ConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidTGX11::ConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTGX11::CopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidTGX11::CopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidTGX11::CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual Pixmap_tTGX11::CreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height); virtual Cursor_tTGX11::CreateCursor(ECursor cursor); virtual GContext_tTGX11::CreateGC(Drawable_t id, GCValues_t* gval); virtual Drawable_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11TTF.html:1908,Clear,ClearWindow,1908,root/html528/TGX11TTF.html,https://root.cern,https://root.cern/root/html528/TGX11TTF.html,3,['Clear'],['ClearWindow']
Usability,"UInt_t height, ULong_t forecolor, ULong_t backcolor, Int_t depth). Pixmap_t CreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height). Bool_t CreatePictureFromFile(Drawable_t id, const char* filename, Pixmap_t& pict, Pixmap_t& pict_mask, PictureAttributes_t& attr). Bool_t ReadPictureDataFromFile(const char* filename, char*** ret_data). void DeletePictureData(void* data). void SetDashes(GContext_t gc, Int_t offset, const char* dash_list, Int_t n). Bool_t ParseColor(Colormap_t cmap, const char* cname, ColorStruct_t& color). void QueryColor(Colormap_t cmap, ColorStruct_t& color). void FreeColor(Colormap_t cmap, ULong_t pixel). Int_t EventsPending(). void NextEvent(Event_t& event). void Bell(Int_t percent). void CopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y). void ChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len). void ClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h). Bool_t CheckEvent(Window_t id, EGEventType type, Event_t& ev). void SendEvent(Window_t id, Event_t* ev). void WMDeleteNotify(Window_t id). void SetKeyAutoRepeat(Bool_t on = kTRUE). void GrabKey(Window_t id, Int_t keycode, UInt_t modifier, Bool_t grab = kTRUE). void GrabButton(Window_t id, EMouseButton button, UInt_t modifier, UInt_t evmask, Window_t confine, Cursor_t cursor, Bool_t grab = kTRUE). void SetWindowName(Window_t id, char* name). void SetIconName(Window_t id, char* name). void SetIconPixmap(Window_t id, Pixmap_t pic). void SetClassHints(Window_t id, char* className, char* resourceName). void SetMWMHints(Window_t id, UInt_t value, UInt_t funcs, UInt_t input). void SetWMPosition(Window_t id, Int_t x, Int_t y). void SetWMSize(Window_t id, UInt_t w, UInt_t h). void SetWMSizeHints(Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc). void SetWMTransientHint(Window_t id, Window_t main_id). void DrawString(Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:42551,Clear,ClearArea,42551,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,6,['Clear'],['ClearArea']
Usability,"UInt_t nrows = 6, ncolumns = 5;; Double_t** data = new Double_t*[nrows];; for (i = 0; i < nrows; i++) {; data[i] = new Double_t[ncolumns];; for (j = 0; j < ncolumns; j++) {; data[i][j] = 10 * i + j;; }; }. // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create an interface; TGSimpleTableInterface *iface = new TGSimpleTableInterface(data, 6, 5);. // Create the table; TGTable *table = new TGTable(mainframe, 999, iface);. // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. //Update data; data[5][1] = 3.01;; //update the table view; table->Update();. // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;; }; It is also possible to visualise data from a tree. A simple macro; showing the use of a TTreeTableInterface follows. Picture; Source. {; // Open a root file.; TFile *file = new TFile(""$ROOTSYS/tutorials/hsimple.root"");; // Load a tree from the file; TNtuple *ntuple = (TNtuple *)file->Get(""ntuple"");. // Create an interface; TTreeTableInterface *iface = new TTreeTableInterface(ntuple);. // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create the table; TGTable *table = new TGTable(mainframe, 999, iface, 10, 6);. // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. // Set a selection; iface->SetSelection(""px > 0."");; // Add a column; iface->AddColumn(""(px+py)/(px-py)"", 0);; //update the table view; table->Update();. // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;; }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTable.html:2601,simpl,simple,2601,root/html602/TGTable.html,https://root.cern,https://root.cern/root/html602/TGTable.html,4,['simpl'],['simple']
Usability,"UInt_t options = 0, Pixel_t back = GetDefaultFrameBackground()); virtual~TGPack(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidAddFrame(TGFrame* f, TGLayoutHints* l = 0); virtual voidAddFrameWithWeight(TGFrame* f, TGLayoutHints* l, Float_t w); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidDeleteFrame(TGFrame* f); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGPack.html:1781,Clear,Clear,1781,root/html528/TGPack.html,https://root.cern,https://root.cern/root/html528/TGPack.html,4,['Clear'],['Clear']
Usability,"UInt_t,funcs,UInt_t,input,1); 143VOID_METHOD_ARG4(VirtualX,SetDashes,GContext_t,gc,Int_t,offset,const char*,dash_list,Int_t,n,1); 144VOID_METHOD_ARG4(VirtualX,WritePixmap,Int_t,wid,UInt_t,w,UInt_t,h,char*,pxname,1); 145VOID_METHOD_ARG4(VirtualX,SetRGB,Int_t,cindex,Float_t,r,Float_t,g,Float_t,b,1); 146VOID_METHOD_ARG4(VirtualX,PutPixel,Drawable_t,id,Int_t,x,Int_t,y,ULong_t,pixel,1); 147VOID_METHOD_ARG4(VirtualX,GrabKey,Window_t,id,Int_t,keycode,UInt_t,modifier,Bool_t,grab,1); 148VOID_METHOD_ARG4(VirtualX,FillPolygon,Window_t,id,GContext_t,gc,Point_t*,points,Int_t,npnt,1); 149VOID_METHOD_ARG4(VirtualX,ReparentWindow,Window_t,id,Window_t,pid,Int_t,x,Int_t,y,1); 150VOID_METHOD_ARG5(VirtualX,MoveResizeWindow,Window_t,id,Int_t,x,Int_t,y,UInt_t,w,UInt_t,h,1); 151VOID_METHOD_ARG5(VirtualX,ChangeProperty,Window_t,id,Atom_t,property,Atom_t,type,UChar_t*,data,Int_t,len,1); 152VOID_METHOD_ARG5(VirtualX,SetClipRegion,Int_t,wid,Int_t,x,Int_t,y,UInt_t,w,UInt_t,h,1); 153VOID_METHOD_ARG5(VirtualX,ClearArea,Window_t,id,Int_t,x,Int_t,y,UInt_t,w,UInt_t,h,1); 154VOID_METHOD_ARG5(VirtualX,SetClipRectangles,GContext_t,gc,Int_t,x,Int_t,y,Rectangle_t*,recs,Int_t,n,1); 155VOID_METHOD_ARG6(VirtualX,GrabPointer,Window_t,id,UInt_t,evmask,Window_t,confine,Cursor_t,cursor,Bool_t,grab,Bool_t,owner_events,1); 156VOID_METHOD_ARG6(VirtualX,DrawLine,Drawable_t,id,GContext_t,gc,Int_t,x1,Int_t,y1,Int_t,x2,Int_t,y2,1); 157VOID_METHOD_ARG6(VirtualX,DrawString,Drawable_t,id,GContext_t,gc,Int_t,x,Int_t,y,const char*,s,Int_t,len,1); 158VOID_METHOD_ARG6(VirtualX,FillRectangle,Drawable_t,id,GContext_t,gc,Int_t,x,Int_t,y,UInt_t,w,UInt_t,h,1); 159VOID_METHOD_ARG6(VirtualX,DrawRectangle,Drawable_t,id,GContext_t,gc,Int_t,x,Int_t,y,UInt_t,w,UInt_t,h,1); 160VOID_METHOD_ARG7(VirtualX,GrabButton,Window_t,id,EMouseButton,button,UInt_t,modifier,UInt_t,evmask,Window_t,confine,Cursor_t,cursor,Bool_t,grab,1); 161VOID_METHOD_ARG7(VirtualX,DrawCellArray,Int_t,x1,Int_t,y1,Int_t,x2,Int_t,y2,Int_t,nx,Int_t,ny,Int_t*,ic,1); 162V",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx_source.html:9227,Clear,ClearArea,9227,doc/master/TGWin32VirtualXProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx_source.html,1,['Clear'],['ClearArea']
Usability,"UInt_tfNvarsnumber of variables used to separate S and B; TMVA::DecisionTree::EPruneMethodfPruneMethodmethod used for prunig ; Double_tfPruneStrengtha parameter to set the ""amount"" of pruning..needs to be adjusted ; Bool_tfRandomisedTreechoose at each node splitting a random set of variables ; TMVA::RegressionVariance*fRegTypethe separation crition used in Regression; TMVA::SeparationBase*fSepTypethe separation crition; UInt_tfSigClassclass which is treated as signal when building the tree; Int_tfTreeIDjust an ID number given to the tree.. makes debugging easier as tree knows who he is.; Bool_tfUseExclusiveVarsindividual variables already used in fisher criterium are not anymore analysed individually for node splitting; Bool_tfUseFisherCutsuse multivariate splits using the Fisher criterium; Int_tfUseNvarsthe number of variables used in randomised trees;; Bool_tfUsePoissonNvarsuse ""fUseNvars"" not as fixed number but as mean of a possion distr. in each split; Bool_tfUseSearchTreecut scan done with binary trees or simple event loop.; vector<Double_t>fVariableImportancethe relative importance of the different variables ; static const Int_tfgDebugLeveldebug level determining some printout/control plots etc.; static const Int_tfgRandomSeedset nonzero for debugging and zero for random seeds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DecisionTree(); default constructor using the GiniIndex as separation criterion,; no restrictions on minium number of events in a leave note or the; separation gain in the node splitting. DecisionTree(TMVA::SeparationBase* sepType, Float_t minSize, Int_t nCuts, TMVA::DataSetInfo* = NULL, UInt_t cls = 0, Bool_t randomisedTree = kFALSE, Int_t useNvars = 0, Bool_t usePoissonNvars = kFALSE, UInt_t nMaxDepth = 9999999, Int_t iSeed = fgRandomSeed, Float_t purityLimit = 0.5, Int_t treeID = 0); constructor specifying the separation type, the min number of; events in a no that is still subjected to further",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__DecisionTree.html:8235,simpl,simple,8235,root/html534/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html534/TMVA__DecisionTree.html,1,['simpl'],['simple']
Usability,"UInt_t ; count, . const TClass * ; onfile_class = nullptr . ). specialized streamer function being able to read old TF1 versions as TF1Data in memory ; Definition at line 81 of file TF1Data_v5.cxx. ◆ StreamerNVirtual(). void ROOT::v5::TF1Data::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file TF1Data.h. Member Data Documentation. ◆ fChisquare. Double_t ROOT::v5::TF1Data::fChisquare. Definition at line 46 of file TF1Data.h. ◆ fMaximum. Double_t ROOT::v5::TF1Data::fMaximum. Definition at line 51 of file TF1Data.h. ◆ fMinimum. Double_t ROOT::v5::TF1Data::fMinimum. Definition at line 52 of file TF1Data.h. ◆ fNDF. Int_t ROOT::v5::TF1Data::fNDF. Definition at line 44 of file TF1Data.h. ◆ fNpfits. Int_t ROOT::v5::TF1Data::fNpfits. Definition at line 43 of file TF1Data.h. ◆ fNpx. Int_t ROOT::v5::TF1Data::fNpx. Definition at line 41 of file TF1Data.h. ◆ fNsave. Int_t ROOT::v5::TF1Data::fNsave. Definition at line 45 of file TF1Data.h. ◆ fParErrors. Double_t* ROOT::v5::TF1Data::fParErrors. Definition at line 47 of file TF1Data.h. ◆ fParMax. Double_t* ROOT::v5::TF1Data::fParMax. Definition at line 49 of file TF1Data.h. ◆ fParMin. Double_t* ROOT::v5::TF1Data::fParMin. Definition at line 48 of file TF1Data.h. ◆ fSave. Double_t* ROOT::v5::TF1Data::fSave. Definition at line 50 of file TF1Data.h. ◆ fType. Int_t ROOT::v5::TF1Data::fType. Definition at line 42 of file TF1Data.h. ◆ fXmax. Double_t ROOT::v5::TF1Data::fXmax. Definition at line 40 of file TF1Data.h. ◆ fXmin. Double_t ROOT::v5::TF1Data::fXmin. Definition at line 39 of file TF1Data.h. Collaboration diagram for ROOT::v5::TF1Data:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following files:; hist/hist/inc/v5/TF1Data.h; hist/hist/src/TF1Data_v5.cxx. ROOTv5TF1Data. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html:30273,Guid,Guide,30273,doc/master/structROOT_1_1v5_1_1TF1Data.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html,1,['Guid'],['Guide']
Usability,"UInt_t ; options = kChildFrame, . Pixel_t ; back = GetDefaultFrameBackground() . ). constructor ; Definition at line 86 of file TG3DLine.cxx. Member Function Documentation. ◆ Class(). static TClass * TGVertical3DLine::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGVertical3DLine::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGVertical3DLine::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 44 of file TG3DLine.h. ◆ DeclFileName(). static const char * TGVertical3DLine::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 44 of file TG3DLine.h. ◆ DrawBorder(). void TGVertical3DLine::DrawBorder ; (; ). overridevirtual . draw border ; Reimplemented from TGFrame.; Definition at line 97 of file TG3DLine.cxx. ◆ IsA(). TClass * TGVertical3DLine::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGFrame.; Definition at line 44 of file TG3DLine.h. ◆ SavePrimitive(). void TGVertical3DLine::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save an vertical 3D line as a C++ statement(s) on output stream out. ; Reimplemented from TGFrame.; Definition at line 107 of file TG3DLine.cxx. ◆ Streamer(). void TGVertical3DLine::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame. ◆ StreamerNVirtual(). void TGVertical3DLine::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 44 of file TG3DLine.h. Libraries for TGVertical3DLine:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TG3DLine.h; gui/gui/src/TG3DLine.cxx. TGVertical3DLine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVertical3DLine.html:29138,Guid,Guide,29138,doc/master/classTGVertical3DLine.html,https://root.cern,https://root.cern/doc/master/classTGVertical3DLine.html,1,['Guid'],['Guide']
Usability,"ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBackCompFitter ();  Constructor needed by TVirtualFitter interface. ;  ;  TBackCompFitter (const std::shared_ptr< ROOT::Fit::Fitter > &fitter, const std::shared_ptr< ROOT::Fit::FitData > &data);  Constructor used after having fit using directly ROOT::Fit::Fitter will create a dummy fitter copying configuration and parameter settings. ;  ;  ~TBackCompFitter () override;  Destructor - delete the managed objects. ;  ; Double_t Chisquare (Int_t npar, Double_t *params) const override;  Do chisquare calculations in case of likelihood fits Do evaluation a the minimum only. ;  ; void Clear (Option_t *option="""") override;  Clear resources for consecutive fits. ;  ; bool Contour (unsigned int ipar, unsigned int jpar, TGraph *gr, double confLevel=0.683);  Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or is invalid it will return false on exit a TGraph is filled with the contour points the number of contour points is determined by the size of the TGraph. ;  ; Int_t ExecuteCommand (const char *command, Double_t *args, Int_t nargs) override;  Execute the command (Fortran Minuit compatible interface) ;  ; void FixParameter (Int_t ipar) override;  Fix the parameter. ;  ; void GetConfidenceIntervals (Int_t n, Int_t ndim, const Double_t *x, Double_t *ci, Double_t cl=0.95) override;  Computes point-by-point confidence intervals for the fitted function. ;  ; void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95) override;  Computes confidence intervals at level cl. ;  ; Double_t * GetCovarianceMatrix () const override;  Get the error matrix in a point",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBackCompFitter.html:3663,Clear,Clear,3663,doc/master/classTBackCompFitter.html,https://root.cern,https://root.cern/doc/master/classTBackCompFitter.html,2,['Clear'],['Clear']
Usability,"UTC = kTRUE, Int_t secOffset = 0) const; static time_tMktimeFromUTC(tm_t* tmstruct); doubleoperator double() const; TTimeStamp&operator=(const TTimeStamp&); voidPrint(Option_t* option = """") const; voidSet(); voidSet(UInt_t tloc, Bool_t isUTC, Int_t secOffset, Bool_t dosDate); voidSet(Int_t date, Int_t time, Int_t nsec, Bool_t isUTC, Int_t secOffset); voidSet(Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec, Int_t nsec, Bool_t isUTC, Int_t secOffset); voidSetNanoSec(Int_t nsec); voidSetSec(Int_t sec); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. voidNormalizeNanoSec(). Data Members; private:. Int_tfNanoSecnanoseconds; Int_tfSecseconds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTimeStamp(); Default ctor. Create a TTimeStamp and set it to the current time; (as best possible). The nanosecond part is faked so that subsequenct; calls simply add 1 to ensure that sequential calls are distinct; (and sortable). TTimeStamp(UInt_t year, UInt_t month, UInt_t day, UInt_t hour, UInt_t min, UInt_t sec, UInt_t nsec = 0, Bool_t isUTC = kTRUE, Int_t secOffset = 0); Create a TTimeStamp and set it to the specified year, month,; day, time, hour, minute, second and nanosec.; If !isUTC then it is assumed to be the standard local time zone. If local time is PST then one can use; TTimeStamp(year,month,day,hour,min,sec,nsec,kFALSE,0);; or; Int_t secOffset = 8*60*60;; TTimeStamp(year,month,day,hour,min,sec,nsec,kTRUE,8*60*60);. TTimeStamp(UInt_t date, UInt_t time, UInt_t nsec, Bool_t isUTC = kTRUE, Int_t secOffset = 0); Create a TTimeStamp and set it to the specified date, time, nanosec.; If !isUTC then it is assumed to be the standard local time zone. TTimeStamp(UInt_t tloc, Bool_t isUTC = kTRUE, Int_t secOffset = 0, Bool_t dosDate = kFALSE); Create a TTimeStamp and set it to tloc which must be a time_t value; returned by time(). This value is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTimeStamp.html:3662,simpl,simply,3662,root/html528/TTimeStamp.html,https://root.cern,https://root.cern/root/html528/TTimeStamp.html,3,['simpl'],['simply']
Usability,"UUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TTUBS.h>. Inheritance diagram for TTUBS:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TTUBS() [1/3]. TTUBS::TTUBS ; (; ). TUBS shape default constructor. ; Definition at line 46 of file TTUBS.cxx. ◆ TTUBS() [2/3]. TTUBS::TTUBS ; (; const char * ; name, . const char * ; title, . const char * ; material, . Float_t ; rmin, . Float_t ; rmax, . Float_t ; dz, . Float_t ; phi1, . Float_t ; phi2 . ). TUBS shape normal constructor. ; Definition at line 55 of file TTUBS.cxx. ◆ TTUBS() [3/3]. TTUBS::TTUBS ; (; const char * ; name, . const char * ; title, . const char * ; material, . Float_t ; rmax, . Float_t ; dz, . Float_t ; phi1, . Float_t ; phi2 . ). TUBS shape ""simplified"" constructor. ; Definition at line 67 of file TTUBS.cxx. ◆ ~TTUBS(). TTUBS::~TTUBS ; (; ). override . TUBS shape default destructor. ; Definition at line 115 of file TTUBS.cxx. Member Function Documentation. ◆ Class(). static TClass * TTUBS::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTUBS::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTUBS::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 51 of file TTUBS.h. ◆ DeclFileName(). static const char * TTUBS::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 51 of file TTUBS.h. ◆ DistancetoPrimitive(). Int_t TTUBS::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a TUBE. ; Compute the closest distance of approach from point px,py to each computed outline poin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTUBS.html:19845,simpl,simplified,19845,doc/master/classTTUBS.html,https://root.cern,https://root.cern/doc/master/classTTUBS.html,1,['simpl'],['simplified']
Usability,"UUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TGLLockable::ELockTGLLockable::kModifyLock; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TGLViewer::ESecSelTypekOnKeyMod1; static TGLViewer::ESecSelTypekOnRequest; static TObject::(anonymous)TObject::kOverwrite; static TGLViewer::EPushActionkPushAnnotate; static TGLViewer::EPushActionkPushCamCenter; static TGLViewer::EPushActionkPushStd; static TGLLockable::ELockTGLLockable::kSelectLock; static TObject::(anonymous)TObject::kSingleKey; static TGLLockable::ELockTGLLockable::kUnlocked; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGLAutoRotator*fAutoRotator!; Bool_tfAxesDepthTest! remove guides hidden-lines; Int_tfAxesType! axes type; TGLCamera*TGLViewerBase::fCameraCamera for rendering.; TGLCameraOverlay*fCameraOverlay! markup size of viewport in scene units; Bool_tTGLViewerBase::fChangedChange requiring redraw is pending.; TGLClip*TGLViewerBase::fClipViewer clipping-plane.; TGLClipSet*fClipSet!; TContextMenu*fContextMenu!; TGLCamera*fCurrentCamera!; TGLOverlayElement*fCurrentOvlElm! current overlay element; TGLSelectRecordfCurrentSelRec! select record in use as selected; TGLColorSetfDarkColorSet! color-set with dark background; Bool_tfDebugMode! debug mode (forced rebuild + draw scene/frustum/interest boxes); TGLViewer::EDragActionfDragAction; Bool_tfDrawCameraCenter! reference marker on?; TGEventHandler*fEventHandler! event handler; Float_tfFader! fade the view (0 - no fade/default, 1 - full fade/no rendering done); TGLContextIdentity*fGLCtxId!for embedded gl viewer; Int_tfGLDevice!for embedded gl viewer; TGLWidget*fGLWidget; TGedEditor*fGedEditor! GED editor; Bool_tfIgnoreSizesOnUpdate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLViewer.html:20215,guid,guides,20215,root/html602/TGLViewer.html,https://root.cern,https://root.cern/root/html602/TGLViewer.html,2,['guid'],['guides']
Usability,"UnSelected(); Virtual function called when both fSelected is false and; fImpliedSelected is 0.; Nothing is done in this base-class version. void HighlightElement(Bool_t state); Set element's highlight state. Stamp appropriately. void IncImpliedHighlighted(); Increase element's implied-highlight count. Stamp appropriately. void DecImpliedHighlighted(); Decrease element's implied-highlight count. Stamp appropriately. void UnHighlighted(); Virtual function called when both fHighlighted is false and; fImpliedHighlighted is 0.; Nothing is done in this base-class version. void FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); Populate set impSelSet with derived / dependant elements. If this is a TEveProjectable, the projected replicas are added; to the set. Thus it does not have to be reimplemented for each; sub-class of TEveProjected. Note that this also takes care of projections of TEveCompound; class, which is also a projectable. UChar_t GetSelectedLevel() const; Get selection level, needed for rendering selection and; highlight feedback.; This should go to TAtt3D. void RecheckImpliedSelections(); Call this if it is possible that implied-selection or highlight; has changed for this element or for implied-selection this; element is member of and you want to maintain consistent; selection state.; This can happen if you add elements into compounds in response; to user-interaction. void AddStamp(UChar_t bits); Add (bitwise or) given stamps to fChangeBits.; Register this element to gEve as stamped.; This method is virtual so that sub-classes can add additional; actions. The base-class method should still be called (or replicated). const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Returns pointer to first listtreeicon. const TGPicture* GetListTreeCheckBoxIcon(); Returns list-tree-item check-box picture appropriate for given; rendering state. const char* ToString(Bool_t b); Convert Bool_t to string - kTRUE or kFALSE.; Needed in WriteVizParams(). TEveElement& operato",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveElement.html:31379,feedback,feedback,31379,root/html528/TEveElement.html,https://root.cern,https://root.cern/root/html528/TEveElement.html,6,['feedback'],['feedback']
Usability,"Unfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.0); Do unfolding of an input histogram; tau_reg: regularisation parameter; input: input distribution with errors; scaleBias: scale factor applied to the bias; Data members required:; fA, fX0, fLsquared; Data members modified:; those documented in SetInput(); and those documented in DoUnfold(Double_t); Return value:; maximum global correlation coefficient; NOTE!!! return value >=1.0 means error, and the result is junk. Overflow bins of the input distribution are ignored!. Int_t SetInput(const TH1* hist_y, Double_t scaleBias = 0.0, Double_t oneOverZeroError = 0.0); Define the input data for subsequent calls to DoUnfold(Double_t); input: input distribution with errors; scaleBias: scale factor applied to the bias; oneOverZeroError: for bins with zero error, this number defines 1/error.; Return value: number of bins with bad error; +10000*number of unconstrained output bins; Note: return values>=10000 are fatal errors,; for the given input, the unfolding can not be done!; Data members modified:; fY, fVyy, fVyyinv, fBiasScale, fNdf; Data members cleared; see ClearResults. Double_t DoUnfold(Double_t tau); Unfold with given value of regularisation parameter tau; tau: new tau parameter; required data members:; fA: matrix to relate x and y; fY: measured data points; fX0: bias on x; fBiasScale: scale factor for fX0; fV: inverse of covariance matrix for y; fLsquared: regularisation conditions; modified data members:; fTauSquared and those documented in DoUnfold(void). Int_t ScanLcurve(Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph** lCurve, TSpline** logTauX = 0, TSpline** logTauY = 0); scan the L curve; nPoint: number of points on the resulting curve; tauMin: smallest tau value to study; tauMax: largest tau value to study; lCurve: the L curve as graph; logTauX: output spline of x-coordinates vs tau for the L curve; logTauY: output spline of y-coordinates vs tau for the L curve; return value: the coordinate ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfold.html:28062,clear,cleared,28062,root/html528/TUnfold.html,https://root.cern,https://root.cern/root/html528/TUnfold.html,6,"['Clear', 'clear']","['ClearResults', 'cleared']"
Usability,"Unfold::SetInput. void SubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1.0, Double_t scale_error = 0.0); Store background source; bgr: background distribution with uncorrelated errors; name: name of this background source; scale: scale factor applied to the background; scaleError: error on scale factor (correlated error). Data members modified:; fBgrIn,fBgrErrUncorrIn,fBgrErrCorrIn; and those modified by DoBackgroundSubtraction(); save background source. void InitTUnfoldSys(void); initialize pointers and TMaps. ~TUnfoldSys(void); delete all data members. void ClearResults(void); clear all data members which depend on the unfolding results. void PrepareSysError(void); calculations required for syst.error; data members modified; fEmatUncorrX, fEmatUncorrAx, fDeltaCorrX, fDeltaCorrAx. void GetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); get output error contribution from statistical fluctuations in A; ematrix: output error matrix histogram; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors; data members modified:; fVYAx, fESparse, fEAtV, fErrorAStat. TMatrixDSparse * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2); propagate uncorrelated systematic errors to a covariance matrix; m0,m1 : coefficients (matrices) for propagating the errors. the error matrix is calculated by standard error propagation, where the; derivative of the result vector X wrt the matrix A is given by. dX_k / dA_ij = M0_kj * Z0_i - M1_ki * Z1_j. where:; the matrices M0 and M1 are arguments to this function; the vectors Z0, Z1 : GetDXDAZ(). The matrix A is calculated from a matrix B as. A_ij = B_ij / sum_k B_kj. where k runs over additional indices of B, not present in A.; (underflow and overflow bins, used for efficiency corrections). define: Norm_j = sum_k B_kj (data member fSumOverY). the derivative of A wrt this input matrix B is given by:. dA_ij / dB_kj = ( ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:21004,clear,clearEmat,21004,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,9,['clear'],"['clear', 'clearEmat']"
Usability,"UniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. enum TProofDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTProofDraw::fDimensionDimension of the current expression; TEntryList*fElist; TStringTProofDraw::fInitialExp; TList*TSelector::fInputlist of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDraw::fMultiplicityIndicator of the variability of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofDrawEntryList.html:5746,Clear,ClearFormula,5746,root/html530/TProofDrawEntryList.html,https://root.cern,https://root.cern/root/html530/TProofDrawEntryList.html,2,['Clear'],['ClearFormula']
Usability,"UniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. enum TProofDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTProofDraw::fDimensionDimension of the current expression; TEventList*fElistevent list; TList*fEventListsa list of EventLists; TStringTProofDraw::fInitialExp; TList*TSelector::fInputlist of objects available during processing; TTreeFormulaManager*TProofDraw::fManager; Int_tTProofDra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofDrawEventList.html:5746,Clear,ClearFormula,5746,root/html530/TProofDrawEventList.html,https://root.cern,https://root.cern/root/html530/TProofDrawEventList.html,2,['Clear'],['ClearFormula']
Usability,"UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidCreateDisabledPicture(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGPictureButton&operator=(const TGPictureButton&); TGPictureButton(const TGPictureButton&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGPictureButton.html:18195,Clear,ClearFlags,18195,root/html602/TGPictureButton.html,https://root.cern,https://root.cern/root/html602/TGPictureButton.html,2,['Clear'],['ClearFlags']
Usability,"Update (TObject *obj=nullptr);  Update an object (or all objects, if obj == 0) in shared memory. ;  ;  Public Member Functions inherited from TVirtualMapFile; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMapFile.html:6366,Clear,Clear,6366,doc/master/classTMapFile.html,https://root.cern,https://root.cern/doc/master/classTMapFile.html,1,['Clear'],['Clear']
Usability,User ; (; const char * ; user). inline . Definition at line 82 of file TUrl.h. ◆ Streamer(). void TUrl::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TUrl::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 98 of file TUrl.h. Member Data Documentation. ◆ fAnchor. TString TUrl::fAnchor. private . Definition at line 42 of file TUrl.h. ◆ fFile. TString TUrl::fFile. private . Definition at line 41 of file TUrl.h. ◆ fFileOA. TString TUrl::fFileOA. mutableprivate . Definition at line 44 of file TUrl.h. ◆ fgHostFQDNs. THashList * TUrl::fgHostFQDNs = nullptr. staticprivate . Definition at line 50 of file TUrl.h. ◆ fgSpecialProtocols. TObjArray * TUrl::fgSpecialProtocols = nullptr. staticprivate . map containing options key/value pairs ; Definition at line 49 of file TUrl.h. ◆ fHost. TString TUrl::fHost. private . Definition at line 40 of file TUrl.h. ◆ fHostFQ. TString TUrl::fHostFQ. mutableprivate . file with option and anchor ; Definition at line 45 of file TUrl.h. ◆ fOptions. TString TUrl::fOptions. private . Definition at line 43 of file TUrl.h. ◆ fOptionsMap. TMap* TUrl::fOptionsMap {nullptr}. mutableprivate . Definition at line 47 of file TUrl.h. ◆ fPasswd. TString TUrl::fPasswd. private . Definition at line 39 of file TUrl.h. ◆ fPort. Int_t TUrl::fPort {-1}. private . fully qualified host name ; Definition at line 46 of file TUrl.h. ◆ fProtocol. TString TUrl::fProtocol. private . Definition at line 37 of file TUrl.h. ◆ fUrl. TString TUrl::fUrl. mutableprivate . Definition at line 36 of file TUrl.h. ◆ fUser. TString TUrl::fUser. private . Definition at line 38 of file TUrl.h. Libraries for TUrl:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TUrl.h; core/base/src/TUrl.cxx. TUrl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:43 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUrl.html:22563,Guid,Guide,22563,doc/master/classTUrl.html,https://root.cern,https://root.cern/doc/master/classTUrl.html,1,['Guid'],['Guide']
Usability,"V(y-Ax); TMatrixDSparse*fDXDAM[2]Result: part of derivative dx_k/dA_ij; TMatrixDSparse*fDXDAZ[2]Result: part of derivative dx_k/dA_ij; TMatrixDSparse*fDXDYResult: derivative dx/dy; TMatrixDSparse*fDXDtauSquaredResult: derivative dx/dtau; TMatrixDSparse*fEResult: matrix E; TMatrixDSparse*fEinvResult: matrix E^(-1); Double_tfLXsquaredResult: chi**2 contribution from (x-s*x0)Lsquared(x-s*x0); Int_tfNdfResult: number of degrees of freedom; Double_tfRhoAvgResult: average global correlation; Double_tfRhoMaxResult: maximum global correlation; TMatrixDSparse*fVxxResult: covariance matrix on x; TMatrixDSparse*fVxxInvResult: inverse of covariance matrix on x; TMatrixD*fXResult: x. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char * GetTUnfoldVersion(void). void InitTUnfold(void); reset all data members. void DeleteMatrix(TMatrixD** m). void DeleteMatrix(TMatrixDSparse** m). void ClearResults(void); delete old results (if any); this function is virtual, so derived classes may flag their results; ad non-valid as well. TUnfold(const TUnfold& ); set all matrix pointers to zero. Double_t DoUnfold(Double_t tau); main unfolding algorithm. Declared virtual, because other algorithms; could be implemented. Purpose: unfold y -> x; Data members required:; fA: matrix to relate x and y; fY: measured data points; fX0: bias on x; fBiasScale: scale factor for fX0; fVyy: covariance matrix for y; fLsquared: regularisation conditions; fTauSquared: regularisation strength; fConstraint: whether the constraint is applied; Data members modified:; fEinv: inverse of the covariance matrix of x; fE: covariance matrix of x; fX: unfolded data points; fDXDY: derivative of x wrt y (for error propagation); fVxx: error matrix (covariance matrix) on x; fAx: estimate of distribution y from unfolded data; fChi2A: contribution to chi**2 from y-Ax; fChi2L: contribution to chi**2 from L*(x-x0); fDXDtauSquared: derivative of x wrt tau; fDXDAM[0,1]: matrix parts of d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfold.html:20981,Clear,ClearResults,20981,root/html528/TUnfold.html,https://root.cern,https://root.cern/root/html528/TUnfold.html,3,['Clear'],['ClearResults']
Usability,"VA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power.; Add support in the TMVA Keras interface for Tensorflow.Keras (the version embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevant minimizer parameters used for training in MethodDL; Add support in MethodDL for the Cudnn version 8 when using the Cuda implementation for CNN and RNN Minuit2; Implement the missing support for MethodCategory for multiclass classifiers.; Add possibility to retrieve a ROC curve made with the training dataset instead of the default test dataset. RooFit Libraries. Extension / updates of the doxygen reference guide.; Allow for removing RooPlot from global directory management, see RooPlot::AddDirectory and RooPlot::SetDirectory; Hash-assisted finding of elements in RooWorkspace. Large RooWorkspace objects were slow in finding elements. This was improved using a hash map.; Stabilise RooStats::HypoTestInverter. It can now tolerate a few failed fits when conducting hypothesis tests. This is relevant when a few points in a parameter scan don’t converge due to numerical or model instabilities. These points will be skipped, and HypoTestInverter can continue.; Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot.; Improve plotting of RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated without passing a normalization set and the class has not a normalization set defined. Without a no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:16348,guid,guide,16348,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['guid'],['guide']
Usability,"VA::DataSet::~DataSet ; (; ). virtual . destructor ; Definition at line 123 of file DataSet.cxx. Member Function Documentation. ◆ AddEvent(). void TMVA::DataSet::AddEvent ; (; Event * ; ev, . Types::ETreeType ; type . ). add event to event list after which the event is owned by the dataset ; Definition at line 241 of file DataSet.cxx. ◆ ApplyTrainingBlockDivision(). void TMVA::DataSet::ApplyTrainingBlockDivision ; (; ). private . ◆ ApplyTrainingSetDivision(). void TMVA::DataSet::ApplyTrainingSetDivision ; (; ). private . apply division of data set ; Definition at line 395 of file DataSet.cxx. ◆ Class(). static TClass * TMVA::DataSet::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::DataSet::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::DataSet::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 175 of file DataSet.h. ◆ ClearNClassEvents(). void TMVA::DataSet::ClearNClassEvents ; (; Int_t ; type). Definition at line 160 of file DataSet.cxx. ◆ CreateSampling(). void TMVA::DataSet::CreateSampling ; (; ); const. create an event sampling (random or importance sampling) ; Definition at line 508 of file DataSet.cxx. ◆ DeclFileName(). static const char * TMVA::DataSet::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 175 of file DataSet.h. ◆ DeleteAllResults(). void TMVA::DataSet::DeleteAllResults ; (; Types::ETreeType ; type, . Types::EAnalysisType ; analysistype . ). Deletes all results currently in the dataset. ; Definition at line 343 of file DataSet.cxx. ◆ DeleteResults(). void TMVA::DataSet::DeleteResults ; (; const TString & ; resultsName, . Types::ETreeType ; type, . Types::EAnalysisType ; analysistype . ). delete the results stored for this particular Method instance. ; (here apparently called resultsName instead of MethodTitle Tree type (Train",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:17705,Clear,ClearNClassEvents,17705,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['Clear'],['ClearNClassEvents']
Usability,"VA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter. ◆ SetIPythonInteractive(). void TMVA::FitterBase::SetIPythonInteractive ; (; bool * ; ExitFromTraining, . UInt_t * ; fIPyMaxIter_, . UInt_t * ; fIPyCurrentIter_ . ). inline . Definition at line 73 of file FitterBase.h. ◆ Streamer(). virtual void TMVA::FitterBase::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Configurable.; Reimplemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter. ◆ StreamerNVirtual(). void TMVA::FitterBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 97 of file FitterBase.h. Member Data Documentation. ◆ fClassName. TString TMVA::FitterBase::fClassName. protected . Definition at line 91 of file FitterBase.h. ◆ fExitFromTraining. bool* TMVA::FitterBase::fExitFromTraining = nullptr. protected . Definition at line 95 of file FitterBase.h. ◆ fFitterTarget. IFitterTarget& TMVA::FitterBase::fFitterTarget. protected . Definition at line 84 of file FitterBase.h. ◆ fIPyCurrentIter. UInt_t* TMVA::FitterBase::fIPyCurrentIter = nullptr. protected . Definition at line 94 of file FitterBase.h. ◆ fIPyMaxIter. UInt_t * TMVA::FitterBase::fIPyMaxIter = nullptr. protected . Definition at line 94 of file FitterBase.h. ◆ fLogger. MsgLogger* TMVA::FitterBase::fLogger. mutableprotected . Definition at line 88 of file FitterBase.h. ◆ fNpars. Int_t TMVA::FitterBase::fNpars. protected . Definition at line 86 of file FitterBase.h. ◆ fRanges. const std::vector<TMVA::Interval*> TMVA::FitterBase::fRanges. protected . Definition at line 85 of file FitterBase.h. Libraries for TMVA::FitterBase:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/FitterBase.h; tmva/tmva/src/FitterBase.cxx. TMVAFitterBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1FitterBase.html:19468,Guid,Guide,19468,doc/master/classTMVA_1_1FitterBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html,1,['Guid'],['Guide']
Usability,"VA::MethodBoost::CalcMethodWeight ; (; ). private . ◆ CalcMVAValues(). void TMVA::MethodBoost::CalcMVAValues ; (; ). private . Definition at line 1277 of file MethodBoost.cxx. ◆ CheckSetup(). void TMVA::MethodBoost::CheckSetup ; (; ). privatevirtual . check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ; Reimplemented from TMVA::MethodBase.; Definition at line 328 of file MethodBoost.cxx. ◆ Class(). static TClass * TMVA::MethodBoost::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodBoost::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodBoost::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 202 of file MethodBoost.h. ◆ CleanBoostOptions(). void TMVA::MethodBoost::CleanBoostOptions ; (; ). Definition at line 531 of file MethodBoost.cxx. ◆ ClearAll(). void TMVA::MethodBoost::ClearAll ; (; ). private . ◆ CreateMVAHistorgrams(). void TMVA::MethodBoost::CreateMVAHistorgrams ; (; ). private . Definition at line 538 of file MethodBoost.cxx. ◆ CreateRanking(). const TMVA::Ranking * TMVA::MethodBoost::CreateRanking ; (; ). virtual . Implements TMVA::MethodCompositeBase.; Definition at line 1087 of file MethodBoost.cxx. ◆ CurrentMethod(). MethodBase * TMVA::MethodBoost::CurrentMethod ; (; ). inlineprivate . Definition at line 114 of file MethodBoost.h. ◆ CurrentMethodIdx(). UInt_t TMVA::MethodBoost::CurrentMethodIdx ; (; ). inlineprivate . Definition at line 115 of file MethodBoost.h. ◆ DeclareCompatibilityOptions(). void TMVA::MethodBoost::DeclareCompatibilityOptions ; (; ). privatevirtual . options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ; Reimplemented fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:34938,Clear,ClearAll,34938,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,1,['Clear'],['ClearAll']
Usability,"VA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. DecisionTreeNode(const TMVA::DecisionTreeNode& n, TMVA::DecisionTreeNode* parent = __null); copy constructor of a node. It will result in an explicit copy of; the node and recursively all it's daughters. ~DecisionTreeNode(); destructor. Bool_t GoesRight(const TMVA::Event& ) const; test event if it decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. void SetPurity( void ); return the S/(S+B) (purity) for the node; REM: even if nodes with purity 0.01 are very PURE background nodes, they still; get a small value of the purity. void Print(ostream& os) const; print the node. void PrintRec(ostream& os) const; recursively print the node and its daughters (--> print the 'tree'). Bool_t ReadDataRecord(istream& is, UInt_t tmva_Version_Code = 262656); Read the data block. void ClearNodeAndAllDaughters(); clear the nodes (their S/N, Nevents etc), just keep the structure of the tree. void ResetValidationData(); temporary stored node values (number of events, etc.) that originate; not from the training but from the validation data (used in pruning). void PrintPrune(ostream& os) const; printout of the node (can be read in with ReadDataRecord). void PrintRecPrune(ostream& os) const; recursive printout of the node and its daughters. void SetCC(Double_t cc). Float_t GetSampleMin(UInt_t ivar) const; return the minimum of variable ivar from the training sample; that pass/end up in this node. Float_t GetSampleMax(UInt_t ivar) const; return the maximum of variable ivar from the training sample; that pass/end up in this node. void SetSampleMin(UInt_t ivar, Float_t xmin); set the minimum of variable ivar from the training sample; that pass/end up in this node. void SetSampleMax(UInt_t ivar, Float_t xmax); set the maximum of variable ivar from the training sample; that pass/end up in this node. void ReadAttributes(void* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__DecisionTreeNode.html:7494,Clear,ClearNodeAndAllDaughters,7494,root/html602/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html602/TMVA__DecisionTreeNode.html,2,"['Clear', 'clear']","['ClearNodeAndAllDaughters', 'clear']"
Usability,"VA::Node* p, char pos); constructor of a daughter node as a daughter of 'p'. DecisionTreeNode(const TMVA::DecisionTreeNode& n, TMVA::DecisionTreeNode* parent = __null); copy constructor of a node. It will result in an explicit copy of; the node and recursively all it's daughters. ~DecisionTreeNode(); destructor. Bool_t GoesRight(const TMVA::Event& ) const; test event if it decends the tree at this node to the right. Bool_t GoesLeft(const TMVA::Event& ) const; test event if it decends the tree at this node to the left. void SetPurity( void ); return the S/(S+B) (purity) for the node; REM: even if nodes with purity 0.01 are very PURE background nodes, they still; get a small value of the purity. void Print(ostream& os) const; print the node. void PrintRec(ostream& os) const; recursively print the node and its daughters (--> print the 'tree'). Bool_t ReadDataRecord(istream& is, UInt_t tmva_Version_Code = 262657); Read the data block. void ClearNodeAndAllDaughters(); clear the nodes (their S/N, Nevents etc), just keep the structure of the tree. void ResetValidationData(); temporary stored node values (number of events, etc.) that originate; not from the training but from the validation data (used in pruning). void PrintPrune(ostream& os) const; printout of the node (can be read in with ReadDataRecord). void PrintRecPrune(ostream& os) const; recursive printout of the node and its daughters. void SetCC(Double_t cc). Float_t GetSampleMin(UInt_t ivar) const; return the minimum of variable ivar from the training sample; that pass/end up in this node. Float_t GetSampleMax(UInt_t ivar) const; return the maximum of variable ivar from the training sample; that pass/end up in this node. void SetSampleMin(UInt_t ivar, Float_t xmin); set the minimum of variable ivar from the training sample; that pass/end up in this node. void SetSampleMax(UInt_t ivar, Float_t xmax); set the maximum of variable ivar from the training sample; that pass/end up in this node. void ReadAttributes(void* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__DecisionTreeNode.html:7502,Clear,ClearNodeAndAllDaughters,7502,root/html604/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html604/TMVA__DecisionTreeNode.html,2,"['Clear', 'clear']","['ClearNodeAndAllDaughters', 'clear']"
Usability,"VA::ResultsRegression:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ResultsRegression(). TMVA::ResultsRegression::ResultsRegression ; (; const DataSetInfo * ; dsi, . TString ; resultsName . ). constructor ; Definition at line 51 of file ResultsRegression.cxx. ◆ ~ResultsRegression(). TMVA::ResultsRegression::~ResultsRegression ; (; ). destructor ; Definition at line 60 of file ResultsRegression.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::ResultsRegression::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::ResultsRegression::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::ResultsRegression::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 82 of file ResultsRegression.h. ◆ Clear() [1/2]. void TMVA::ResultsRegression::Clear ; (; Option_t * ; ). inlineoverridevirtual . Reimplemented from TObject.; Definition at line 63 of file ResultsRegression.h. ◆ Clear() [2/2]. virtual void TObject::Clear ; (; Option_t * ; = """"). inlinevirtual . Reimplemented from TObject.; Definition at line 119 of file TObject.h. ◆ CreateDeviationHistograms(). void TMVA::ResultsRegression::CreateDeviationHistograms ; (; TString ; prefix). Definition at line 203 of file ResultsRegression.cxx. ◆ DeclFileName(). static const char * TMVA::ResultsRegression::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 82 of file ResultsRegression.h. ◆ DeviationAsAFunctionOf(). TH2F * TMVA::ResultsRegression::DeviationAsAFunctionOf ; (; UInt_t ; varNum, . UInt_t ; tgtNum . ). Definition at line 115 of file ResultsRegression.cxx. ◆ GetAnalysisType(). Types::EAnalysisType TMVA::ResultsRegression::GetAnalysisType ; (; ). inlineoverridevirtual . Reimplemented from TMVA::Results.; Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html:12931,Clear,Clear,12931,doc/master/classTMVA_1_1ResultsRegression.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html,1,['Clear'],['Clear']
Usability,VA::RuleFitParams::fNTLinCoeff. protected . GD path: linear coefficients. ; Definition at line 244 of file RuleFitParams.h. ◆ fNTNuval. Double_t TMVA::RuleFitParams::fNTNuval. protected . GD path: value of nu. ; Definition at line 240 of file RuleFitParams.h. ◆ fNTOffset. Double_t TMVA::RuleFitParams::fNTOffset. protected . GD path: model offset. ; Definition at line 242 of file RuleFitParams.h. ◆ fNTRisk. Double_t TMVA::RuleFitParams::fNTRisk. protected . GD path: risk. ; Definition at line 238 of file RuleFitParams.h. ◆ fPathIdx1. UInt_t TMVA::RuleFitParams::fPathIdx1. protected . first event index for path search ; Definition at line 197 of file RuleFitParams.h. ◆ fPathIdx2. UInt_t TMVA::RuleFitParams::fPathIdx2. protected . last event index for path search ; Definition at line 198 of file RuleFitParams.h. ◆ fPerfIdx1. UInt_t TMVA::RuleFitParams::fPerfIdx1. protected . first event index for performance evaluation ; Definition at line 199 of file RuleFitParams.h. ◆ fPerfIdx2. UInt_t TMVA::RuleFitParams::fPerfIdx2. protected . last event index for performance evaluation ; Definition at line 200 of file RuleFitParams.h. ◆ fRuleEnsemble. RuleEnsemble* TMVA::RuleFitParams::fRuleEnsemble. protected . rule ensemble ; Definition at line 189 of file RuleFitParams.h. ◆ fRuleFit. RuleFit* TMVA::RuleFitParams::fRuleFit. protected . rule fit ; Definition at line 188 of file RuleFitParams.h. ◆ fsigave. Double_t TMVA::RuleFitParams::fsigave. protected . Sigma of current signal score function F(sig) ; Definition at line 246 of file RuleFitParams.h. ◆ fsigrms. Double_t TMVA::RuleFitParams::fsigrms. protected . Rms of F(sig) ; Definition at line 247 of file RuleFitParams.h. Libraries for TMVA::RuleFitParams:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/RuleFitParams.h; tmva/tmva/src/RuleFitParams.cxx. TMVARuleFitParams. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:27360,Guid,Guide,27360,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['Guid'],['Guide']
Usability,"VA::gConfig().SetDrawProgressBar(true);; ; TMVA::Timer timer( Nloops, ""MyClassName"" );; for (Int_t i=0; i<Nloops; i++) {; ... // some code; ; // now, print progress bar:; timer.DrawProgressBar( i );; ; // **OR** text output of left time (never both !); fLogger << "" time left: "" << timer.GetLeftTime( i ) << Endl;; ; }; fLogger << ""MyClassName"" << "": elapsed time: "" << timer.GetElapsedTime(); << Endl;; TMVA::Config::SetDrawProgressBarvoid SetDrawProgressBar(Bool_t d)Definition Config.h:69; TMVA::TimerTiming information for training and evaluation of MVA methods.Definition Timer.h:58; TMVA::Timer::fLoggerMsgLogger * fLogger! the output loggerDefinition Timer.h:96; int; TMVA::gConfigConfig & gConfig(); TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; Remark: in batch mode, the progress bar is quite ugly; you may want to use the text output then; Note that by default in TMVA::Config the drawing of the progress bar is switched off. To have the progress bar visible you need to enable it by calling TMVA::gConfig().SetDrawProgressBar(true) ; Definition at line 58 of file Timer.h. Public Member Functions;  Timer (const char *prefix="""", Bool_t colourfulOutput=kTRUE);  constructor ;  ;  Timer (Int_t ncounts, const char *prefix="""", Bool_t colourfulOutput=kTRUE);  standard constructor: ncounts gives the total number of counts that the loop will iterate through. ;  ; virtual ~Timer (void);  destructor ;  ; void DrawProgressBar (Int_t, const TString &comment="""");  draws progress bar in color or B&W caution: ;  ; void DrawProgressBar (TString);  draws a string in the progress bar ;  ; void DrawProgressBar (void);  draws the progressbar ;  ; Double_t ElapsedSeconds (void);  computes elapsed tim in seconds ;  ; TString GetElapsedTime (Bool_t Scientific=kTRUE);  returns pretty string with elapsed time ;  ; TString GetLeftTime (Int_t icounts);  returns pretty string with time left ;  ; void Init (Int_t ncounts);  ; virtual TClass * IsA () const;  ; void Reset (void); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Timer.html:1385,progress bar,progress bar,1385,doc/master/classTMVA_1_1Timer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Timer.html,1,['progress bar'],['progress bar']
Usability,"VI1, VI2, VI3 >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 344 of file RooCFunction3Binding.h. ◆ printArgs(). template<class VO , class VI1 , class VI2 , class VI3 > . void RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >::printArgs ; (; std::ostream & ; os); const. inlineoverridevirtual . Print object arguments, ie its proxies. ; Reimplemented from RooAbsArg.; Definition at line 317 of file RooCFunction3Binding.h. ◆ Streamer(). template<class VO , class VI1 , class VI2 , class VI3 > . void RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). template<class VO , class VI1 , class VI2 , class VI3 > . void RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 344 of file RooCFunction3Binding.h. Member Data Documentation. ◆ func. template<class VO , class VI1 , class VI2 , class VI3 > . RooCFunction3Ref<VO,VI1,VI2,VI3> RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >::func. protected . Definition at line 332 of file RooCFunction3Binding.h. ◆ x. template<class VO , class VI1 , class VI2 , class VI3 > . RooRealProxy RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >::x. protected . Definition at line 333 of file RooCFunction3Binding.h. ◆ y. template<class VO , class VI1 , class VI2 , class VI3 > . RooRealProxy RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >::y. protected . Definition at line 334 of file RooCFunction3Binding.h. ◆ z. template<class VO , class VI1 , class VI2 , class VI3 > . RooRealProxy RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >::z. protected . Definition at line 335 of file RooCFunction3Binding.h. roofit/roofit/inc/RooCFunction3Binding.h. RooCFunction3PdfBinding. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3PdfBinding.html:78198,Guid,Guide,78198,doc/master/classRooCFunction3PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3PdfBinding.html,1,['Guid'],['Guide']
Usability,"VIERUNIFORM; TMVA::DNN::WeightInitializationStrategy::XAVIER@ XAVIER; TMVA::DNN::WeightInitializationStrategy::LAYERSIZE@ LAYERSIZE; TMVA::DNN::operator|=ModeOutputValues operator|=(ModeOutputValues &lhs, ModeOutputValues rhs)Definition NeuralNet.h:193; TMVA::DNN::MinimizerTypeMinimizerType< list all the minimizer typesDefinition NeuralNet.h:321; TMVA::DNN::fSteepest@ fSteepestSGD.Definition NeuralNet.h:322; TMVA::DNN::gaussDoubledouble gaussDouble(double mean, double sigma)Definition NeuralNet.cxx:35; TMVA::DNN::operator&ModeOutputValues operator&(ModeOutputValues lhs, ModeOutputValues rhs)Definition NeuralNet.h:199; TMVA::DNN::ModeOutputValuesModeOutputValuesDefinition NeuralNet.h:179; TMVA::DNN::ModeOutputValues::SOFTMAX@ SOFTMAX; TMVA::DNN::ModeOutputValues::BATCHNORMALIZATION@ BATCHNORMALIZATION; TMVA::DNN::ModeOutputValues::DIRECT@ DIRECT; TMVA::DNN::applyWeightsvoid applyWeights(ItSource itSourceBegin, ItSource itSourceEnd, ItWeight itWeight, ItTarget itTargetBegin, ItTarget itTargetEnd); TMVA::DNN::pass_through_typestd::tuple< Settings &, Batch &, DropContainer & > pass_through_typeDefinition NeuralNet.h:1294; TMVA::DNN::isFlagSetbool isFlagSet(T flag, T value)Definition NeuralNet.h:212; TMVA::DNN::randomIntint randomInt(int maxValue)Definition NeuralNet.cxx:52; TMVA::DNN::updatevoid update(ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient)update the gradientsDefinition NeuralNet.icc:183; TMVA::DNN::DropContainerstd::vector< char > DropContainerDefinition NeuralNet.h:227; TMVA::DNN::applyWeightsBackwardsvoid applyWeightsBackwards(ItSource itCurrBegin, ItSource itCurrEnd, ItWeight itWeight, ItPrev itPrevBegin, ItPrev itPrevEnd); TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; outputstatic void output(). tmvatmvaincTMVANeuralNet.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:85432,Guid,Guide,85432,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['Guid'],['Guide']
Usability,"VOID_METHOD_ARG0(VirtualX,SetDoubleBufferOFF,1); 91VOID_METHOD_ARG0(VirtualX,SetDoubleBufferON,1); 92VOID_METHOD_ARG1(VirtualX,SetClipOFF,Int_t,wid,1); 93VOID_METHOD_ARG1(VirtualX,MapWindow,Window_t,id,1); 94VOID_METHOD_ARG1(VirtualX,MapSubwindows,Window_t,id,1); 95VOID_METHOD_ARG1(VirtualX,MapRaised,Window_t,id,1); 96VOID_METHOD_ARG1(VirtualX,UnmapWindow,Window_t,id,1); 97VOID_METHOD_ARG1(VirtualX,DestroyWindow,Window_t,id,1); 98VOID_METHOD_ARG1(VirtualX,DestroySubwindows,Window_t,id,1); 99VOID_METHOD_ARG1(VirtualX,RaiseWindow,Window_t,id,1); 100VOID_METHOD_ARG1(VirtualX,LowerWindow,Window_t,id,1); 101VOID_METHOD_ARG1(VirtualX,DeleteGC,GContext_t,gc,1); 102VOID_METHOD_ARG1(VirtualX,DeleteFont,FontStruct_t,fs,1); 103VOID_METHOD_ARG1(VirtualX,DeletePixmap,Pixmap_t,pmap,1); 104VOID_METHOD_ARG1(VirtualX,DeletePictureData,void*,data,1); 105VOID_METHOD_ARG1(VirtualX,WMDeleteNotify,Window_t,id,1); 106VOID_METHOD_ARG1(VirtualX,SetKeyAutoRepeat,Bool_t,on,1); 107VOID_METHOD_ARG1(VirtualX,ClearWindow,Window_t,id,1); 108VOID_METHOD_ARG1(VirtualX,SetInputFocus,Window_t,id,1); 109VOID_METHOD_ARG1(VirtualX,FreeFontStruct,FontStruct_t,fs,1); 110VOID_METHOD_ARG1(VirtualX,DestroyRegion,Region_t,reg,1); 111VOID_METHOD_ARG1(VirtualX,FreeFontNames,char**,fontlist,1); 112VOID_METHOD_ARG1(VirtualX,SetPrimarySelectionOwner,Window_t,id,1); 113VOID_METHOD_ARG1(VirtualX,DeleteImage,Drawable_t,img,1); 114VOID_METHOD_ARG1(VirtualX,IconifyWindow,Window_t,id,1); 115VOID_METHOD_ARG3(VirtualX,Warp,Int_t,ix,Int_t,iy,Window_t,id,1); 116VOID_METHOD_ARG2(VirtualX,SetCharacterUp,Float_t,chupx,Float_t,chupy,1); 117VOID_METHOD_ARG2(VirtualX,ChangeGC,GContext_t,gc,GCValues_t*,gval,1); 118VOID_METHOD_ARG2(VirtualX,SetDoubleBuffer,Int_t,wid,Int_t,mode,1); 119VOID_METHOD_ARG2(VirtualX,SetLineType,Int_t,n,Int_t*,dash,1); 120VOID_METHOD_ARG2(VirtualX,SetCursor,Window_t,id,Cursor_t,curid,1); 121VOID_METHOD_ARG2(VirtualX,SetWindowBackground,Window_t,id,ULong_t,color,1); 122VOID_METHOD_ARG2(VirtualX,SetWindowBack",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx_source.html:5616,Clear,ClearWindow,5616,doc/master/TGWin32VirtualXProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx_source.html,1,['Clear'],['ClearWindow']
Usability,"VSlider::HandleConfigureNotify ; (; Event_t * ; event). overridevirtual . Handles resize events for this widget. ; Implements TGSlider.; Definition at line 358 of file TGSlider.cxx. ◆ HandleMotion(). Bool_t TGVSlider::HandleMotion ; (; Event_t * ; event). overridevirtual . Handle mouse motion event in vertical slider. ; Implements TGSlider.; Definition at line 334 of file TGSlider.cxx. ◆ IsA(). TClass * TGVSlider::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGSlider.; Definition at line 115 of file TGSlider.h. ◆ Resize() [1/2]. void TGVSlider::Resize ; (; TGDimension ; size). inlineoverridevirtual . Resize the frame. ; Reimplemented from TGFrame.; Definition at line 112 of file TGSlider.h. ◆ Resize() [2/2]. void TGVSlider::Resize ; (; UInt_t ; w, . UInt_t ; h . ). inlineoverridevirtual . Resize the frame. ; If w=0 && h=0 - Resize to default size ; Reimplemented from TGFrame.; Definition at line 111 of file TGSlider.h. ◆ SavePrimitive(). void TGVSlider::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save an horizontal slider as a C++ statement(s) on output stream out. ; Reimplemented from TGFrame.; Definition at line 627 of file TGSlider.cxx. ◆ Streamer(). void TGVSlider::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGSlider. ◆ StreamerNVirtual(). void TGVSlider::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 115 of file TGSlider.h. Member Data Documentation. ◆ fYp. Int_t TGVSlider::fYp. protected . vertical slider y position in pixel coordinates ; Definition at line 95 of file TGSlider.h. Libraries for TGVSlider:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGSlider.h; gui/gui/src/TGSlider.cxx. TGVSlider. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVSlider.html:34429,Guid,Guide,34429,doc/master/classTGVSlider.html,https://root.cern,https://root.cern/doc/master/classTGVSlider.html,1,['Guid'],['Guide']
Usability,"Value&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModecanNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddPdf.html:4027,clear,clearShapeDirty,4027,root/html534/RooAddPdf.html,https://root.cern,https://root.cern/root/html534/RooAddPdf.html,6,['clear'],['clearShapeDirty']
Usability,"Values(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. TMVA::IFitterTarget*fFitness; doublefMinValue; ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; ROOT::Math::GeneticMinimizerParametersfParameters; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int i = 0). ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step); It does nothing! As there is no variable if it has no limits!. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a fixed variable. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). ROOT::Math::MinimizerOptions Options() const. void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const; get the genetic options of the class and return them in the MinimizerOptions class. void SetOptions(const ROOT::Math::MinimizerOptions& opt). bool Minimize(). double MinValue() const. const double * X() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. const double * MinGradient() const; { return 0; }. bool ProvidesError() const; { return false; }. const double * Errors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GeneticMinimizer.html:5631,Clear,Clear,5631,root/html602/ROOT__Math__GeneticMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GeneticMinimizer.html,2,['Clear'],['Clear']
Usability,"Var&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddModel.html:3627,clear,clearShapeDirty,3627,root/html532/RooAddModel.html,https://root.cern,https://root.cern/root/html532/RooAddModel.html,1,['clear'],['clearShapeDirty']
Usability,"Var&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddModel.html:3627,clear,clearShapeDirty,3627,root/html528/RooAddModel.html,https://root.cern,https://root.cern/root/html528/RooAddModel.html,2,['clear'],['clearShapeDirty']
Usability,"Variable(const TString &expression, Float_t *)Add a float variable or expression to the reader.Definition Reader.cxx:303; TMVA::Reader::GetMVAErrorDouble_t GetMVAError() constDefinition Reader.h:94; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Tools::SplitStringstd::vector< TString > SplitString(const TString &theOpt, const char separator) constsplits the option string at 'separator' and fills the list 'splitV' with the primitive stringsDefinition Tools.cxx:1199; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStopwatch::Printvoid Print(Option_t *option="""") const overridePrint the real and cpu time passed between the start and stop events.Definition TStopwatch.cxx:219; TStringBasic string class.Definition TString.h:139; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; double; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; AuthorAndreas Hoecker ; Definition in file TMVAClassificationApplication.C. tutorialstmvaTMVAClassificationApplication.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationApplication_8C.html:28979,Guid,Guide,28979,doc/master/TMVAClassificationApplication_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationApplication_8C.html,1,['Guid'],['Guide']
Usability,"Vars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFFTConvPdf.html:7249,clear,clearValueDirty,7249,root/html526/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html526/RooFFTConvPdf.html,1,['clear'],['clearValueDirty']
Usability,"Vector< CoordSystem > & SetPhi(Scalar a)Definition LorentzVector.h:677; ROOT::Math::PxPyPzE4DClass describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors...Definition PxPyPzE4D.h:44; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::GenVector::Throwvoid Throw(const char *)function throwing exception, by creating internally a GenVector_exception only when neededDefinition GenVector_exception.h:80; ROOT::Math::detail::get_manipchar_t get_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m)Definition GenVectorIO.h:54; ROOT::Math::detail::require_delimstd::basic_istream< char_t, traits_t > & require_delim(std::basic_istream< char_t, traits_t > &is, manip_t m)Definition GenVectorIO.h:113; ROOT::Math::detail::set_manipvoid set_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m, char_t ch)Definition GenVectorIO.h:74; ROOT::Math::detail::open@ openDefinition GenVectorIO.h:35; ROOT::Math::detail::sep@ sepDefinition GenVectorIO.h:35; ROOT::Math::detail::close@ closeDefinition GenVectorIO.h:35; ROOT::Math::detail::bitforbit@ bitforbitDefinition GenVectorIO.h:35; ROOT::Math::operator>>std::basic_istream< char_t, traits_t > & operator>>(std::basic_istream< char_t, traits_t > &is, DisplacementVector2D< T, U > &v)Definition DisplacementVector2D.h:515; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v2@ v2Definition rootcling_impl.cxx:3702; v@ vDefinition rootcling_impl.cxx:3699; v3@ v3Definition rootcling_impl.cxx:3703; ttauto * ttDefinition textangle.C:16. mathgenvectorincMathGenVectorLorentzVector.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html:40827,Guid,Guide,40827,doc/master/GenVector_2LorentzVector_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html,1,['Guid'],['Guide']
Usability,"Version(). static constexpr Version_t TMVA::PDEFoamKernelBase::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 57 of file PDEFoamKernelBase.h. ◆ DeclFileName(). static const char * TMVA::PDEFoamKernelBase::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 57 of file PDEFoamKernelBase.h. ◆ Estimate(). virtual Float_t TMVA::PDEFoamKernelBase::Estimate ; (; PDEFoam * ; , . std::vector< Float_t > & ; , . ECellValue ;  . ). pure virtual . Implemented in TMVA::PDEFoamKernelGauss, TMVA::PDEFoamKernelLinN, and TMVA::PDEFoamKernelTrivial. ◆ IsA(). virtual TClass * TMVA::PDEFoamKernelBase::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TMVA::PDEFoamKernelGauss, TMVA::PDEFoamKernelLinN, and TMVA::PDEFoamKernelTrivial.; Definition at line 57 of file PDEFoamKernelBase.h. ◆ Log(). MsgLogger & TMVA::PDEFoamKernelBase::Log ; (; ); const. inline . Definition at line 55 of file PDEFoamKernelBase.h. ◆ Streamer(). virtual void TMVA::PDEFoamKernelBase::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TMVA::PDEFoamKernelGauss, TMVA::PDEFoamKernelLinN, and TMVA::PDEFoamKernelTrivial. ◆ StreamerNVirtual(). void TMVA::PDEFoamKernelBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file PDEFoamKernelBase.h. Member Data Documentation. ◆ fLogger. MsgLogger* TMVA::PDEFoamKernelBase::fLogger. mutableprotected . Definition at line 44 of file PDEFoamKernelBase.h. Libraries for TMVA::PDEFoamKernelBase:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoamKernelBase.h; tmva/tmva/src/PDEFoamKernelBase.cxx. TMVAPDEFoamKernelBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelBase.html:13346,Guid,Guide,13346,doc/master/classTMVA_1_1PDEFoamKernelBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelBase.html,1,['Guid'],['Guide']
Usability,"Version,fOptimized,CanOptimize(),TestBit(kCannotOptimize));; 2981 ; 2982 // if (IsCompiled() && (!fOptimized || (CanOptimize() && !TestBit(kCannotOptimize)))) return;; 2983 fOptimized = kFALSE;; 2984 fNdata = 0;; 2985 fNfulldata = 0;; 2986 ; 2987 TObjArray* infos = (TObjArray*) gROOT->GetListOfStreamerInfo();; 2988 if (fNumber < 0) {; 2989 ++fgCount;; 2990 fNumber = fgCount;; 2991 }; 2992 if (fNumber >= infos->GetSize()) {; 2993 infos->AddAtAndExpand(this, fNumber);; 2994 } else {; 2995 if (!infos->At(fNumber)) {; 2996 infos->AddAt(this, fNumber);; 2997 }; 2998 }; 2999 ; 3000 assert(fComp == 0 && fCompFull == 0 && fCompOpt == 0);; 3001 ; 3002 ; 3003 Int_t ndata = fElements->GetEntriesFast();; 3004 ; 3005 ; 3006 if (fReadObjectWise) fReadObjectWise->fActions.clear();; 3007 else fReadObjectWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3008 ; 3009 if (fWriteObjectWise) fWriteObjectWise->fActions.clear();; 3010 else fWriteObjectWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3011 ; 3012 if (fReadMemberWise) fReadMemberWise->fActions.clear();; 3013 else fReadMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3014 ; 3015 if (fReadText) fReadText->fActions.clear();; 3016 else fReadText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3017 ; 3018 if (fWriteMemberWise) fWriteMemberWise->fActions.clear();; 3019 else fWriteMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3020 ; 3021 if (fReadMemberWiseVecPtr) fReadMemberWiseVecPtr->fActions.clear();; 3022 else fReadMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3023 ; 3024 if (fWriteMemberWiseVecPtr) fWriteMemberWiseVecPtr->fActions.clear();; 3025 else fWriteMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3026 ; 3027 if (fWriteText) fWriteText->fActions.clear();; 3028 else fWriteText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3029 ; 3030 if (!ndata) {; 3031 // This",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:131776,clear,clear,131776,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['clear'],['clear']
Usability,"VerticalFrame Composite frame with vertical child layout; TGVerticalLayout Vertical layout manager; TGView View widget base class; TGViewFrame Frame containing the actual text; TGViewPort Viewport through which to look at a container frame; TGWidget Widget base class; TGWindow GUI Window base class; TGX11 Interface to X11; TGX11TTF Interface to X11 + TTF font handling; TGXYLayout X / Y - layout manager; TGXYLayoutHints Hits for the X / Y - layout manager; TGaxis Graphics axis; TGedEditor ROOT graphics editor; TGedFrame base editor's frame; TGedMarkerPopup marker select popup; TGedMarkerSelect Marker selection button; TGedNameFrame frame showing the selected object name; TGedPatternFrame pattern frame; TGedPatternPopup Color selector popup; TGedPatternSelect pattern selection check-button; TGedPatternSelector select pattern frame; TGedPopup popup window; TGedSelect selection check-button; TGenCollectionProxy ; TGenCollectionProxy::Method ; TGenCollectionProxy::Value ; TGenPhaseSpace Simple Phase Space Generator; TGenerator Event generator interface abstract baseclass; TGenericTable Generic array of C-structure (a'la STL vector); TGenericTable::iterator ; TGeoArb8 arbitrary trapezoid with 8 vertices; TGeoAtt class for visibility, activity and optimization attributes for volumes/nodes; TGeoBBox box primitive; TGeoBBoxEditor TGeoBBox editor; TGeoBatemanSol Solution for the Bateman equation; TGeoBoolNode a boolean node; TGeoBranchArray ; TGeoBuilder geometry builder singleton; TGeoCacheState class storing the cache state; TGeoChecker a simple geometry checker; TGeoCombiTrans rotation + translation; TGeoCombiTransEditor TGeoCombiTrans editor; TGeoCompositeShape boolean composite shape; TGeoCone conical tube class; TGeoConeEditor TGeoCone editor; TGeoConeSeg conical tube segment class ; TGeoConeSegEditor TGeoConeSeg editor; TGeoCtub cut tube segment class ; TGeoCtubEditor TGeoCtub editor; TGeoDecayChannel Decay channel for Elements; TGeoElemIter Iterator for radionuclide ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:87297,Simpl,Simple,87297,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,3,['Simpl'],['Simple']
Usability,"VerticalFrame Composite frame with vertical child layout; TGVerticalLayout Vertical layout manager; TGView View widget base class; TGViewFrame Frame containing the actual text; TGViewPort Viewport through which to look at a container frame; TGWidget Widget base class; TGWindow GUI Window base class; TGX11 Interface to X11; TGX11TTF Interface to X11 + TTF font handling; TGXYLayout X / Y - layout manager; TGXYLayoutHints Hits for the X / Y - layout manager; TGaxis Graphics axis; TGedEditor ROOT graphics editor; TGedFrame base editor's frame; TGedMarkerPopup marker select popup; TGedMarkerSelect Marker selection button; TGedNameFrame frame showing the selected object name; TGedPatternFrame pattern frame; TGedPatternPopup Color selector popup; TGedPatternSelect pattern selection check-button; TGedPatternSelector select pattern frame; TGedPopup popup window; TGedSelect selection check-button; TGenCollectionProxy ; TGenCollectionProxy::Method ; TGenCollectionProxy::Value ; TGenPhaseSpace Simple Phase Space Generator; TGenerator Event generator interface abstract baseclass; TGenericTable Generic array of C-structure (a'la STL vector); TGenericTable::iterator ; TGeoArb8 arbitrary trapezoid with 8 vertices; TGeoAtt class for visibility, activity and optimization attributes for volumes/nodes; TGeoBBox box primitive; TGeoBBoxEditor TGeoBBox editor; TGeoBatemanSol Solution for the Bateman equation; TGeoBoolNode a boolean node; TGeoBranchArray ; TGeoBuilder geometry builder singleton; TGeoCacheState class storing the cache state; TGeoChecker a simple geometry checker; TGeoCombiTrans rotation + translation; TGeoCombiTransEditor TGeoCombiTrans editor; TGeoCompositeShape boolean composite shape; TGeoCone conical tube class; TGeoConeEditor TGeoCone editor; TGeoConeSeg conical tube segment class; TGeoConeSegEditor TGeoConeSeg editor; TGeoCtub cut tube segment class; TGeoCtubEditor TGeoCtub editor; TGeoDecayChannel Decay channel for Elements; TGeoElemIter Iterator for radionuclide chai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:86371,Simpl,Simple,86371,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['Simpl'],['Simple']
Usability,"View menu, selecting the Colors item.; 9.3.1.1 Finding an Object in a Pad; Now that we have a pointer to the active pad, gPad and that we know this pad contains some objects, it is sometimes interesting to access one of those objects. The method GetPrimitive() of TPad, i.e. TPad::GetPrimitive(const char* name) does exactly this. Since most of the objects that a pad contains derive from TObject, they have a name. The following statement will return a pointer to the object myobjectname and put that pointer into the variable obj. As you can see, the type of returned pointer is TObject*.; root[] obj = gPad->GetPrimitive(""myobjectname""); (class TObject*)0x1063cba8; Even if your object is something more complicated, like a histogram TH1F, this is normal. A function cannot return more than one type. So the one chosen was the lowest common denominator to all possible classes, the class from which everything derives, TObject. How do we get the right pointer then? Simply do a cast of the function output that will transform the output (pointer) into the right type. For example if the object is a TPaveLabel:; root[] obj = (TPaveLabel*)(gPad->GetPrimitive(""myobjectname"")); (class TPaveLabel*)0x1063cba8; This works for all objects deriving from TObject. However, a question remains. An object has a name if it derives from TNamed, not from TObject. For example, an arrow (TArrow) doesn’t have a name. In that case, the “name” is the name of the class. To know the name of an object, just click with the right button on it. The name appears at the top of the context menu. In case of multiple unnamed objects, a call to GetPrimitive(""className"") returns the instance of the class that was first created. To retrieve a later instance you can use GetListOfPrimitives(), which returns a list of all the objects on the pad. From the list you can select the object you need.; 9.3.1.2 Hiding an Object; Hiding an object in a pad can be made by removing it from the list of objects owned by that pad. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:305714,Simpl,Simply,305714,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simply']
Usability,"View*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the curr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionQueryFrame.html:21042,feedback,feedback,21042,root/html528/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html528/TSessionQueryFrame.html,2,['feedback'],['feedback']
Usability,"View*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSessionQueryFrame.html:21317,feedback,feedback,21317,root/html532/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html532/TSessionQueryFrame.html,1,['feedback'],['feedback']
Usability,Virtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 426 of file THtml.h. Member Data Documentation. ◆ fBatch. Bool_t THtml::fBatch. protected . Definition at line 424 of file THtml.h. ◆ fCounter. TString THtml::fCounter. protected . Definition at line 408 of file THtml.h. ◆ fCounterFormat. TString THtml::fCounterFormat. protected . Definition at line 409 of file THtml.h. ◆ fDocEntityInfo. DocEntityInfo_t THtml::fDocEntityInfo. protected . Definition at line 419 of file THtml.h. ◆ fDocSyntax. DocSyntax_t THtml::fDocSyntax. protected . Definition at line 415 of file THtml.h. ◆ fFileDef. TFileDefinition* THtml::fFileDef. mutableprotected . Definition at line 422 of file THtml.h. ◆ fGClient. TGClient* THtml::fGClient. protected . Definition at line 414 of file THtml.h. ◆ fLinkInfo. LinkInfo_t THtml::fLinkInfo. protected . Definition at line 416 of file THtml.h. ◆ fLocalFiles. TFileSysDB* THtml::fLocalFiles. mutableprotected . Definition at line 423 of file THtml.h. ◆ fMakeClassMutex. TVirtualMutex* THtml::fMakeClassMutex. protected . Definition at line 413 of file THtml.h. ◆ fModuleDef. TModuleDefinition* THtml::fModuleDef. mutableprotected . Definition at line 421 of file THtml.h. ◆ fOutputStyle. OutputStyle_t THtml::fOutputStyle. protected . Definition at line 417 of file THtml.h. ◆ fPathDef. TPathDefinition* THtml::fPathDef. mutableprotected . Definition at line 420 of file THtml.h. ◆ fPathInfo. PathInfo_t THtml::fPathInfo. mutableprotected . Definition at line 418 of file THtml.h. ◆ fProductName. TString THtml::fProductName. protected . Definition at line 410 of file THtml.h. ◆ fThreadedClassCount. Int_t THtml::fThreadedClassCount. protected . Definition at line 412 of file THtml.h. ◆ fThreadedClassIter. TIter* THtml::fThreadedClassIter. protected . Definition at line 411 of file THtml.h. html/inc/THtml.h; html/src/THtml.cxx. THtml. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:50 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml.html:58525,Guid,Guide,58525,doc/master/classTHtml.html,https://root.cern,https://root.cern/doc/master/classTHtml.html,1,['Guid'],['Guide']
Usability,"Virtual function for retrieving name of the element. ;  ; virtual const char * GetElementTitle () const;  Virtual function for retrieving title of the render-element. ;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveProjectionAxes.html:11185,feedback,feedback,11185,doc/master/classTEveProjectionAxes.html,https://root.cern,https://root.cern/doc/master/classTEveProjectionAxes.html,2,['feedback'],['feedback']
Usability,"VirtualMachines ; (; ); const. Get the names of the virtual machines in the pool. ; Return a TList of TObjString or 0 in case of failure ; Definition at line 194 of file TCondor.cxx. ◆ GetVmInfo(). Bool_t TCondor::GetVmInfo ; (; const char * ; vm, . TString & ; image, . Int_t & ; perfidx . ); const. Get info about worker status. ; Definition at line 401 of file TCondor.cxx. ◆ IsA(). TClass * TCondor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 88 of file TCondor.h. ◆ IsValid(). Bool_t TCondor::IsValid ; (; ); const. inline . Definition at line 72 of file TCondor.h. ◆ Print(). void TCondor::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print master status. ; Reimplemented from TObject.; Definition at line 89 of file TCondor.cxx. ◆ Release(). Bool_t TCondor::Release ; (; ). Release worker. ; Definition at line 357 of file TCondor.cxx. ◆ Resume(). Bool_t TCondor::Resume ; (; ). Resume worker. ; Definition at line 343 of file TCondor.cxx. ◆ SetState(). Bool_t TCondor::SetState ; (; EState ; state). Set the state of workers. ; Definition at line 288 of file TCondor.cxx. ◆ Streamer(). void TCondor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TCondor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 88 of file TCondor.h. ◆ Suspend(). Bool_t TCondor::Suspend ; (; ). Suspend worker. ; Definition at line 329 of file TCondor.cxx. Member Data Documentation. ◆ fClaims. TList* TCondor::fClaims. private . Definition at line 61 of file TCondor.h. ◆ fPool. TString TCondor::fPool. private . Definition at line 59 of file TCondor.h. ◆ fState. EState TCondor::fState. private . Definition at line 60 of file TCondor.h. ◆ fValid. Bool_t TCondor::fValid. private . Definition at line 58 of file TCondor.h. proof/proof/inc/TCondor.h; proof/proof/src/T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondor.html:14309,Resume,Resume,14309,doc/master/classTCondor.html,https://root.cern,https://root.cern/doc/master/classTCondor.html,1,['Resume'],['Resume']
Usability,"VirtualPadPainter.; Definition at line 81 of file TWebPadPainter.h. ◆ CopyDrawable(). void TWebPadPainter::CopyDrawable ; (; Int_t ; , . Int_t ; , . Int_t ;  . ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 82 of file TWebPadPainter.h. ◆ CreateDrawable(). Int_t TWebPadPainter::CreateDrawable ; (; UInt_t ; , . UInt_t ;  . ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 80 of file TWebPadPainter.h. ◆ DeclFileName(). static const char * TWebPadPainter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 122 of file TWebPadPainter.h. ◆ DestroyDrawable(). void TWebPadPainter::DestroyDrawable ; (; Int_t ; ). inlineoverridevirtual . Implements TVirtualPadPainter.; Definition at line 83 of file TWebPadPainter.h. ◆ DrawBox(). void TWebPadPainter::DrawBox ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . EBoxMode ; mode . ). overridevirtual . Paint a simple box. ; Implements TVirtualPadPainter.; Definition at line 102 of file TWebPadPainter.cxx. ◆ DrawFillArea() [1/2]. void TWebPadPainter::DrawFillArea ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 124 of file TWebPadPainter.cxx. ◆ DrawFillArea() [2/2]. void TWebPadPainter::DrawFillArea ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 140 of file TWebPadPainter.cxx. ◆ DrawLine(). void TWebPadPainter::DrawLine ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). overridevirtual . Paint a simple line. ; Implements TVirtualPadPainter.; Definition at line 65 of file TWebPadPainter.cxx. ◆ DrawLineNDC(). void TWebPadPainter::DrawLineNDC ; (; Double_t ; u1, . Double_t ; v1, . Double_t ; u2, . Double_t ; v2 . ). overridevirtual . Paint a simple line in no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPadPainter.html:14579,simpl,simple,14579,doc/master/classTWebPadPainter.html,https://root.cern,https://root.cern/doc/master/classTWebPadPainter.html,1,['simpl'],['simple']
Usability,Virtual_b). inline . Definition at line 366 of file TSessionViewer.h. ◆ UpdateFields(). void TEditQueryFrame::UpdateFields ; (; TQueryDescription * ; desc). Update entry fields with query description values. ; Definition at line 2352 of file TSessionViewer.cxx. Member Data Documentation. ◆ fBtnMore. TGTextButton* TEditQueryFrame::fBtnMore. private . Definition at line 339 of file TSessionViewer.h. ◆ fChain. TObject* TEditQueryFrame::fChain. private . Definition at line 351 of file TSessionViewer.h. ◆ fFrmMore. TGCompositeFrame* TEditQueryFrame::fFrmMore. private . Definition at line 338 of file TSessionViewer.h. ◆ fNumEntries. TGNumberEntry* TEditQueryFrame::fNumEntries. private . Definition at line 345 of file TSessionViewer.h. ◆ fNumFirstEntry. TGNumberEntry* TEditQueryFrame::fNumFirstEntry. private . Definition at line 346 of file TSessionViewer.h. ◆ fQuery. TQueryDescription* TEditQueryFrame::fQuery. private . Definition at line 350 of file TSessionViewer.h. ◆ fTxtChain. TGTextEntry* TEditQueryFrame::fTxtChain. private . Definition at line 342 of file TSessionViewer.h. ◆ fTxtEventList. TGTextEntry* TEditQueryFrame::fTxtEventList. private . Definition at line 348 of file TSessionViewer.h. ◆ fTxtOptions. TGTextEntry* TEditQueryFrame::fTxtOptions. private . Definition at line 344 of file TSessionViewer.h. ◆ fTxtParFile. TGTextEntry* TEditQueryFrame::fTxtParFile. private . Definition at line 347 of file TSessionViewer.h. ◆ fTxtQueryName. TGTextEntry* TEditQueryFrame::fTxtQueryName. private . Definition at line 341 of file TSessionViewer.h. ◆ fTxtSelector. TGTextEntry* TEditQueryFrame::fTxtSelector. private . Definition at line 343 of file TSessionViewer.h. ◆ fViewer. TSessionViewer* TEditQueryFrame::fViewer. private . Definition at line 349 of file TSessionViewer.h. gui/sessionviewer/inc/TSessionViewer.h; gui/sessionviewer/src/TSessionViewer.cxx. TEditQueryFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:30 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEditQueryFrame.html:36729,Guid,Guide,36729,doc/master/classTEditQueryFrame.html,https://root.cern,https://root.cern/doc/master/classTEditQueryFrame.html,1,['Guid'],['Guide']
Usability,"Virtual_b);  ;  Public Member Functions inherited from RooAbsLValue; virtual ~RooAbsLValue ()=default;  ; virtual std::list< std::string > getBinningNames () const =0;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, const RooAbsBinning **bins);  Create a 1,2, or 3D-histogram with appropriate scale and labels. ;  ; static TH1 * createHistogram (const char *name, RooArgList &vars, const char *tAxisLabel, double *xlo, double *xhi, Int_t *nBins);  Create 1-, 2- or 3-d ROOT histogram with labels taken from the variables in 'vars' and the with range and binning specified in xlo,xhi and nBins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsRealLValue.html:52943,clear,clearEvalErrorLog,52943,doc/master/classRooAbsRealLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html,2,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"Volume *vol = nullptr, Int_t nlevels = 10000, Int_t option = 0);; 427 void CountLevels();; 428 void ExecuteEvent(Int_t event, Int_t px, Int_t py) override;; 429 static Int_t Parse(const char *expr, TString &expr1, TString &expr2, TString &expr3);; 430 Int_t ReplaceVolume(TGeoVolume *vorig, TGeoVolume *vnew);; 431 Int_t TransformVolumeToAssembly(const char *vname);; 432 UChar_t *GetBits() { return fBits; }; 433 virtual Int_t GetByteCount(Option_t *option = nullptr);; 434 void SetAllIndex();; 435 static Int_t GetMaxDaughters();; 436 static Int_t GetMaxLevels();; 437 static Int_t GetMaxXtruVert();; 438 Int_t GetMaxThreads() const { return fMaxThreads - 1; }; 439 void SetMaxThreads(Int_t nthreads);; 440 Int_t GetRTmode() const { return fRaytraceMode; }; 441 void SetRTmode(Int_t mode); // *MENU*; 442 Bool_t IsMultiThread() const { return fMultiThread; }; 443 static void SetNavigatorsLock(Bool_t flag);; 444 static Int_t ThreadId();; 445 static Int_t GetNumThreads();; 446 static void ClearThreadsMap();; 447 void ClearThreadData() const;; 448 void CreateThreadData() const;; 449 ; 450 //--- I/O; 451 virtual Int_t Export(const char *filename, const char *name = """", Option_t *option = ""vg"");; 452 static void LockGeometry();; 453 static void UnlockGeometry();; 454 static Int_t GetVerboseLevel();; 455 static void SetVerboseLevel(Int_t vl);; 456 static TGeoManager *Import(const char *filename, const char *name = """", Option_t *option = """");; 457 static Bool_t IsLocked();; 458 static void SetExportPrecision(UInt_t prec);; 459 static UInt_t GetExportPrecision();; 460 static void SetDefaultUnits(EDefaultUnits new_value);; 461 static EDefaultUnits GetDefaultUnits();; 462 static Bool_t LockDefaultUnits(Bool_t new_value);; 463 Bool_t IsStreamingVoxels() const { return fStreamVoxels; }; 464 Bool_t IsCleaning() const { return fIsGeomCleaning; }; 465 ; 466 //--- list getters; 467 TObjArray *GetListOfNodes() { return fNodes; }; 468 TObjArray *GetListOfPhysicalNodes() { return fPhysicalNodes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:25214,Clear,ClearThreadsMap,25214,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,1,['Clear'],['ClearThreadsMap']
Usability,"Volume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23; TGeoRotationClass describing rotations.Definition TGeoMatrix.h:168; TGeoRotation::RotateXvoid RotateX(Double_t angle) overrideRotate about X axis of the master frame with angle expressed in degrees.Definition TGeoMatrix.cxx:1098; TGeoRotation::RotateZvoid RotateZ(Double_t angle) overrideRotate about Z axis of the master frame with angle expressed in degrees.Definition TGeoMatrix.cxx:1144; TGeoTranslationClass describing translations.Definition TGeoMatrix.h:116; TGeoVolumeAssemblyVolume assemblies.Definition TGeoVolume.h:316; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::AddNodevirtual TGeoNode * AddNode(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:975; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; TGeoVolume::SetLineColorvoid SetLineColor(Color_t lcolor) overrideSet the line color.Definition TGeoVolume.cxx:2169; TMath::DegToRadconstexpr Double_t DegToRad()Conversion from degree to radian: .Definition TMath.h:79; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::TanDouble_t Tan(Double_t)Returns the tangent of an angle of x radians.Definition TMath.h:600; AuthorAndrei Gheata ; Definition in file assembly.C. tutorialsgeomassembly.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/geom_2assembly_8C.html:6020,Guid,Guide,6020,doc/master/geom_2assembly_8C.html,https://root.cern,https://root.cern/doc/master/geom_2assembly_8C.html,1,['Guid'],['Guide']
Usability,"Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSeqCollection::Changed(); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTList::DeleteLink(TObjLink* lnk); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TObjLink**TList::DoSort(TObjLink** head, Int_t n); TObjLink*TList::FindLink(const TObject* obj, Int_t& idx) const; virtual const char*TCollection::GetCollectionEntryName(TObject* entry) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTQCommand::Init(const char* cl, void* object, const char* redo, const char* undo); TObjLink*TList::LinkAt(Int_t idx) const; Bool_tTList::LnkCompare(TObjLink* l1, TObjLink* l2); voidTObject::MakeZombie(); virtual TObjLink*TList::NewLink(TObject* obj, TObjLink* prev = __null); virtual TObjLink*TList::NewOptLink(TObject* obj, Option_t* opt, TObjLink* prev = __null); virtual voidPrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidTQCommand::PrintCollectionHeader(Option_t* option) const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TCollection::(anonymous)TCollection:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQUndoManager.html:16220,undo,undo,16220,root/html602/TQUndoManager.html,https://root.cern,https://root.cern/root/html602/TQUndoManager.html,2,['undo'],['undo']
Usability,"WebWindow &win, bool remote = false, std::string *produced_key = nullptr);; 76 ; 77 bool CreateServer(bool with_http = false);; 78 ; 79 bool InformListener(const std::string &msg);; 80 ; 81 static std::string GenerateKey(int keylen = 32);; 82 ; 83public:; 84 RWebWindowsManager();; 85 ; 86 ~RWebWindowsManager();; 87 ; 88 /// Returns THttpServer instance; 89 THttpServer *GetServer() const { return fServer.get(); }; 90 ; 91 /// Returns http address of the server, empty string when not available; 92 std::string GetServerAddr() const { return fAddr; }; 93 ; 94 /// Assign show callback which can catch window showing, used by RBrowser; 95 void SetShowCallback(WebWindowShowCallback_t func) { fShowCallback = func; }; 96 ; 97 /// Assign show callback which can catch window showing, used by RBrowser; 98 void SetDeleteCallback(WebWindowDeleteCallback_t func) { fDeleteCallback = func; }; 99 ; 100 static std::shared_ptr<RWebWindowsManager> &Instance();; 101 ; 102 std::shared_ptr<RWebWindow> CreateWindow();; 103 ; 104 void Terminate();; 105 ; 106 static bool IsMainThrd();; 107 static void AssignMainThrd();; 108 ; 109 static void SetLoopbackMode(bool on = true);; 110 static bool IsLoopbackMode();; 111 ; 112 static void SetUseSessionKey(bool on = true);; 113 static void SetUseConnectionKey(bool on = true);; 114 ; 115 static void AddServerLocation(const std::string &server_prefix, const std::string &files_path);; 116 static std::map<std::string, std::string> GetServerLocations();; 117 static void ClearServerLocations();; 118};; 119 ; 120} // namespace ROOT; 121 ; 122#endif; RWebWindow.hxx; onOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void onDefinition TGWin32VirtualXProxy.cxx:106; winOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttribute",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindowsManager_8hxx_source.html:5007,Clear,ClearServerLocations,5007,doc/master/RWebWindowsManager_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindowsManager_8hxx_source.html,1,['Clear'],['ClearServerLocations']
Usability,"Weight (Double_t weight);  Sets weight between shading according to fictive light source and according to channels counts: ;  ; void SetLightPosition (Int_t x, Int_t y, Int_t z);  Sets position of fictive light source in 3D space: ;  ; void SetNodes (Int_t nodesx, Int_t nodesy);  Sets nodes in both directions: ;  ; void SetPenAttr (Int_t color, Int_t style, Int_t width);  Sets pen attributes: ;  ; void SetShading (Int_t shading, Int_t shadow);  Sets on/off shading and shadow switches: ;  ; void SetZScale (Int_t scale);  Sets z-axis scale: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:7505,Clear,Clear,7505,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Clear'],['Clear']
Usability,"Weight ; (; ). private . ◆ CalcMVAValues(). void TMVA::MethodBoost::CalcMVAValues ; (; ). private . Definition at line 1277 of file MethodBoost.cxx. ◆ CheckSetup(). void TMVA::MethodBoost::CheckSetup ; (; ). privatevirtual . check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ; Reimplemented from TMVA::MethodBase.; Definition at line 328 of file MethodBoost.cxx. ◆ Class(). static TClass * TMVA::MethodBoost::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodBoost::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodBoost::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 202 of file MethodBoost.h. ◆ CleanBoostOptions(). void TMVA::MethodBoost::CleanBoostOptions ; (; ). Definition at line 531 of file MethodBoost.cxx. ◆ ClearAll(). void TMVA::MethodBoost::ClearAll ; (; ). private . ◆ CreateMVAHistorgrams(). void TMVA::MethodBoost::CreateMVAHistorgrams ; (; ). private . Definition at line 538 of file MethodBoost.cxx. ◆ CreateRanking(). const TMVA::Ranking * TMVA::MethodBoost::CreateRanking ; (; ). virtual . Implements TMVA::MethodCompositeBase.; Definition at line 1087 of file MethodBoost.cxx. ◆ CurrentMethod(). MethodBase * TMVA::MethodBoost::CurrentMethod ; (; ). inlineprivate . Definition at line 114 of file MethodBoost.h. ◆ CurrentMethodIdx(). UInt_t TMVA::MethodBoost::CurrentMethodIdx ; (; ). inlineprivate . Definition at line 115 of file MethodBoost.h. ◆ DeclareCompatibilityOptions(). void TMVA::MethodBoost::DeclareCompatibilityOptions ; (; ). privatevirtual . options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ; Reimplemented from TMVA::MethodBase.; Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:34974,Clear,ClearAll,34974,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,1,['Clear'],['ClearAll']
Usability,"When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete(). void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClonesArray.html:14650,Clear,Clear,14650,root/html526/TClonesArray.html,https://root.cern,https://root.cern/root/html526/TClonesArray.html,1,['Clear'],['Clear']
Usability,"When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:17303,Clear,Clear,17303,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,2,['Clear'],['Clear']
Usability,"Widget(Int_t id); virtual~TGWidget(); virtual voidAssociate(const TGWindow* w); static TClass*Class(); const char*GetCommand() const; Bool_tHasFocus() const; virtual TClass*IsA() const; Bool_tIsEnabled() const; virtual voidSetCommand(const char* command); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tWantFocus() const; Int_tWidgetId() const. protected:. TGWidget(const TGWidget& tgw); Int_tClearFlags(Int_t flags); TGWidget&operator=(const TGWidget& tgw); Int_tSetFlags(Int_t flags). Data Members; protected:. TStringfCommandcommand to be executed; const TGWindow*fMsgWindowwindow which handles widget events; Int_tfWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tfWidgetIdthe widget id (used for event processing). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGWidget(const TGWidget& tgw); { }. TGWidget& operator=(const TGWidget& tgw). Int_t SetFlags(Int_t flags); { return fWidgetFlags |= flags; }. Int_t ClearFlags(Int_t flags); { return fWidgetFlags &= ~flags; }. TGWidget(); { }. TGWidget(Int_t id); { }. virtual ~TGWidget(); { }. Int_t WidgetId() const; { return fWidgetId; }. Bool_t IsEnabled() const; { return (Bool_t)((fWidgetFlags & kWidgetIsEnabled) != 0); }. Bool_t HasFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetHasFocus) != 0); }. Bool_t WantFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetWantFocus) != 0); }. void Associate(const TGWindow* w); { fMsgWindow = w; }. void SetCommand(const char* command); { fCommand = command; }. const char * GetCommand() const; { return fCommand.Data(); }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGWidget.html:1556,Clear,ClearFlags,1556,root/html534/TGWidget.html,https://root.cern,https://root.cern/root/html534/TGWidget.html,1,['Clear'],['ClearFlags']
Usability,"Widget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); voidTGTextEntry::CopyText() const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGTextEntry::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); Int_tTGTextEntry::GetCharacterIndex(Int_t xcoord); static const TGGC&TGTextEntry::GetDefaultSelectedBackgroundGC(); static const TGGC&TGTextEntry::GetDefaultSelectedGC(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGTextEntry::Init(); virtual Bool_tTGTextEntry::IsCursorOutOfFrame(); voidTObject::MakeZombie(); TGWindow&TGWindow::operator=(const TGWindow& tgw); voidTGTextEntry::Paste(); virtual voidTGTextEntry::PastePrimary(Window_t wid, Atom_t property, Bool_t del); virtual voidTGTextEntry::ScrollByChar(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidTGTextEntry::UpdateOffset(). Data Members; public:. enum TGTextEntry::EEchoMode { kNormal; kNoEcho; kPassword; };; enum TGTextEntry::EInsertMode { kInsert; kReplace; };; enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGNumberEntryField.html:21064,Clear,ClearFlags,21064,root/html528/TGNumberEntryField.html,https://root.cern,https://root.cern/root/html528/TGNumberEntryField.html,4,['Clear'],['ClearFlags']
Usability,"Width GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; ; RooFitResult: minimized FCN value: 36418.9, estimated distance to minimum: 1.43276e-06; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; mu0 2.5116e+00 +/- 1.50e-02; mu1 2.0000e+00 +/- 1.50e-02; ; ; RooFitResult: minimized FCN value: -23474.8, estimated distance to minimum: 1.23305e-05; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; mu0 2.3674e+00 +/- 1.43e-02; mu1 2.0127e+00 +/- 1.41e-02; ; ; RooFitResult: minimized FCN value: 38093, estimated distance to minimum: 0.000220953; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; mu0 2.3835e+00 +/- 3.71e-03; mu1 1.8343e+00 +/- 1.78e-02; ; DateJuly 2024 ; AuthorRobin Syring ; Definition in file rf617_simulation_based_inference_multidimensional.py. tutorialsroofitrf617_simulation_based_inference_multidimensional.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf617__simulation__based__inference__multidimensional_8py.html:13957,Guid,Guide,13957,doc/master/rf617__simulation__based__inference__multidimensional_8py.html,https://root.cern,https://root.cern/doc/master/rf617__simulation__based__inference__multidimensional_8py.html,1,['Guid'],['Guide']
Usability,"Width GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TGraphTime.h; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TMath.h; TRandom3.h; TText.h; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax.Definition TGraphTime.h:30; TMarkerManages Markers.Definition TMarker.h:22; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; mTMarker mDefinition textangle.C:8; AuthorRene Brun ; Definition in file gtime.C. tutorialsgraphsgtime.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graphs_2gtime_8C.html:4958,Guid,Guide,4958,doc/master/graphs_2gtime_8C.html,https://root.cern,https://root.cern/doc/master/graphs_2gtime_8C.html,1,['Guid'],['Guide']
Usability,"Will be removed in ROOT 6.36. Please implement this functionality by calling RooAbsData::reduce on the Markov Chain's RooDataSet* (obtained using MarkovChain::GetAsConstDataSet) . Member RooTemplateProxy< T >::lvptr (const LValue_t *) const; This function is unnecessary if the template parameter is RooAbsRealLValue (+ derived types) or RooAbsCategoryLValue (+derived types), as arg() will always return the correct type. ; Member RooTemplateProxy< T >::R__DEPRECATED (6, 36, ""Use RooTemplateProxy(const char*, const char*, RooAbsArg*, bool, bool) and transfer the ownership with RooTemplateProxy::putOwnedArg()."") RooTemplateProxy(const char *theName; Kept for backwards compatibility and will be removed in ROOT 6.36. Either use RooTemplateProxy(const char*, const char*, RooAbsArg*, bool, bool), and transfer the ownership with RooTemplateProxy::putOwnedArg(), or use RooTemplateProxy(const char*, const char*, RooAbsArg*, std::unique_ptr<T>, bool, bool) if you want the proxy to own the argument. depending if you want to transfer ownership or not. ; Member TFitter::Chisquare (Int_t npar, Double_t *params) const override; Use ROOT::Fit::Chisquare class instead. ; Class TGeoTrack ; Use of TGeoTrack is deprecated. For the event display please switch to TEve (using TEveTracks or TEvePointSet to display tracks specifically) or to REve. ; Class THtml ; We keep THtml for those who still need it for legacy use cases. ROOT has since several years moved to doxygen as documentation generator. THtml is not developed nor supported anymore; please migrate to doxygen instead. ; Member THttpCallArg::SetPostData (void *data, Long_t length, Bool_t make_copy=kFALSE); Use signature with std::string ; Member THttpServer::ReadFileContent (const char *filename, Int_t &len); ; Member TPython::Eval (const char *expr) R__DEPRECATED(6; Use TPython::Exec() with an std::any output parameter instead. . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/deprecated.html:7135,Guid,Guide,7135,doc/master/deprecated.html,https://root.cern,https://root.cern/doc/master/deprecated.html,1,['Guid'],['Guide']
Usability,"Window &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; TGGC fBarColorGC;  progress bar drawing context ;  ; EBarType fBarType;  OPTION={GetMethod=""GetBarType"";SetMethod=""SetBarType"";Items=(kStandard=""Standard"",kFancy=""Fancy"")} ;  ; Int_t fBarWidth;  progress bar width ;  ; Bool_t fDrawBar;  if true draw only bar in DoRedraw() ;  ; EFillType fFillType;  OPTION={GetMethod=""GetFillType"";SetMethod=""SetFillType"";Items=(kSolidFill=Solid"",kBlockFill=""Block"")} ;  ; FontStruct_t fFontStruct;  font used to draw position text ;  ; TString fFormat;  format used to show position not in percent ;  ; Float_t fMax;  logical maximum value (default 100) ;  ; Float_t fMin;  logical minimum value (default 0) ;  ; GContext_t fNormGC;  text drawing graphics context ;  ; Bool_t fPercent;  show position in percent (default true) ;  ; Float_t fPos;  logical position [fMin,fMax] ;  ; Int_t fPosPix;  position of progress bar in pixel coordinates ;  ; Bool_t fShowPos;  show position value (default false) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGProgressBar.html:25633,progress bar,progress bar,25633,doc/master/classTGProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGProgressBar.html,3,['progress bar'],['progress bar']
Usability,"Window *w);  Wait for window to be destroyed. ;  ; void WaitForUnmap (TGWindow *w);  Wait for window to be unmapped. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGClient.html:6320,Clear,Clear,6320,doc/master/classTGClient.html,https://root.cern,https://root.cern/doc/master/classTGClient.html,1,['Clear'],['Clear']
Usability,"Window* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); ~TGVerticalFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGVerticalFrame.html:2482,Clear,Clear,2482,root/html528/TGVerticalFrame.html,https://root.cern,https://root.cern/root/html528/TGVerticalFrame.html,4,['Clear'],['Clear']
Usability,"Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* option = """"); Save progress bar parameters as a C++ statement(s) on output stream out. Bool_t fDrawBar; // if true draw only bar in DoRedraw(). TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGProgressBar.html:20843,progress bar,progress bar,20843,root/html602/TGProgressBar.html,https://root.cern,https://root.cern/root/html602/TGProgressBar.html,2,['progress bar'],['progress bar']
Usability,"Wise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3011 ; 3012 if (fReadMemberWise) fReadMemberWise->fActions.clear();; 3013 else fReadMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3014 ; 3015 if (fReadText) fReadText->fActions.clear();; 3016 else fReadText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3017 ; 3018 if (fWriteMemberWise) fWriteMemberWise->fActions.clear();; 3019 else fWriteMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3020 ; 3021 if (fReadMemberWiseVecPtr) fReadMemberWiseVecPtr->fActions.clear();; 3022 else fReadMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3023 ; 3024 if (fWriteMemberWiseVecPtr) fWriteMemberWiseVecPtr->fActions.clear();; 3025 else fWriteMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3026 ; 3027 if (fWriteText) fWriteText->fActions.clear();; 3028 else fWriteText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3029 ; 3030 if (!ndata) {; 3031 // This may be the case for empty classes (e.g., TAtt3D).; 3032 // We still need to properly set the size of emulated classes (i.e. add the virtual table); 3033 if (fClass->GetState() == TClass::kEmulated && fNVirtualInfoLoc!=0) {; 3034 fSize = sizeof(TStreamerInfo*);; 3035 }; 3036 fComp = new TCompInfo[1];; 3037 fCompFull = new TCompInfo*[1];; 3038 fCompOpt = new TCompInfo*[1];; 3039 fCompOpt[0] = fCompFull[0] = &(fComp[0]);; 3040 SetIsCompiled();; 3041 return;; 3042 }; 3043 ; 3044 // At most half of the elements can be used to hold optimized versions.; 3045 // We use the bottom to hold the optimized-into elements and the non-optimized elements; 3046 // and the top to hold the original copy of the optimized out elements.; 3047 fNslots = ndata + ndata/2 + 1;; 3048 Int_t optiOut = 0;; 3049 ; 3050 fComp = new TCompInfo[fNslots];; 3051 fCompFull = new TCompInfo*[ndata];; 3052 fCompOpt = new TCompInfo*[ndata];; 3053 ; 3054 TStreamerElement* element;; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:132725,clear,clear,132725,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['clear'],['clear']
Usability,"WithLock.cxx. ◆ At(). TObject * TListOfEnumsWithLock::At ; (; Int_t ; idx); const. overridevirtual . Returns the object at position idx. Returns 0 if idx is out of range. ; Reimplemented from TList.; Definition at line 228 of file TListOfEnumsWithLock.cxx. ◆ Before(). TObject * TListOfEnumsWithLock::Before ; (; const TObject * ; obj); const. overridevirtual . Returns the object before object obj. ; Obj is found using the object's IsEqual() method. Returns 0 if obj is first in list. ; Reimplemented from TList.; Definition at line 244 of file TListOfEnumsWithLock.cxx. ◆ Class(). static TClass * TListOfEnumsWithLock::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TListOfEnumsWithLock::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TListOfEnumsWithLock::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 80 of file TListOfEnumsWithLock.h. ◆ Clear(). void TListOfEnumsWithLock::Clear ; (; Option_t * ; option). overridevirtual . Remove all objects from the list. ; Does not delete the objects unless the THashList is the owner (set via SetOwner()). ; Reimplemented from TListOfEnums.; Definition at line 137 of file TListOfEnumsWithLock.cxx. ◆ DeclFileName(). static const char * TListOfEnumsWithLock::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 80 of file TListOfEnumsWithLock.h. ◆ Delete(). void TListOfEnumsWithLock::Delete ; (; Option_t * ; option = """"). overridevirtual . Delete all TDataMember object files. ; Reimplemented from TListOfEnums.; Definition at line 146 of file TListOfEnumsWithLock.cxx. ◆ FindObject() [1/2]. TObject * TListOfEnumsWithLock::FindObject ; (; const char * ; name); const. overridevirtual . Specialize FindObject to do search for the a enum just by name or create it if its not already in the list. ; Reimplemented from TListOfEnums.; Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfEnumsWithLock.html:27274,Clear,Clear,27274,doc/master/classTListOfEnumsWithLock.html,https://root.cern,https://root.cern/doc/master/classTListOfEnumsWithLock.html,1,['Clear'],['Clear']
Usability,"Workspace.cxx. ◆ cat(). RooCategory * RooWorkspace::cat ; (; RooStringView ; name); const. Retrieve discrete variable (RooCategory) with given name. A null pointer is returned if not found. ; Definition at line 1241 of file RooWorkspace.cxx. ◆ catfunc(). RooAbsCategory * RooWorkspace::catfunc ; (; RooStringView ; name); const. Retrieve discrete function (RooAbsCategory) with given name. A null pointer is returned if not found. ; Definition at line 1250 of file RooWorkspace.cxx. ◆ cd(). bool RooWorkspace::cd ; (; const char * ; path = nullptr). Definition at line 2044 of file RooWorkspace.cxx. ◆ Class(). static TClass * RooWorkspace::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooWorkspace::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooWorkspace::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 282 of file RooWorkspace.h. ◆ clearStudies(). void RooWorkspace::clearStudies ; (; ). Remove all RooStudyManager modules. ; Definition at line 1996 of file RooWorkspace.cxx. ◆ Clone(). TObject * RooWorkspace::Clone ; (; const char * ; newname = """"); const. overridevirtual . TObject::Clone() needs to be overridden. ; Reimplemented from TObject.; Definition at line 233 of file RooWorkspace.cxx. ◆ commitTransaction(). bool RooWorkspace::commitTransaction ; (; ). Definition at line 1068 of file RooWorkspace.cxx. ◆ components(). const RooArgSet & RooWorkspace::components ; (; ); const. inline . Definition at line 115 of file RooWorkspace.h. ◆ data(). RooAbsData * RooWorkspace::data ; (; RooStringView ; name); const. Retrieve dataset (binned or unbinned) with given name. A null pointer is returned if not found. ; Definition at line 1309 of file RooWorkspace.cxx. ◆ DeclFileName(). static const char * RooWorkspace::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace.html:28077,clear,clearStudies,28077,doc/master/classRooWorkspace.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace.html,1,['clear'],['clearStudies']
Usability,Write.h. ◆ fgNamingSpeed. Int_t TGDMLWrite::fgNamingSpeed. private . Definition at line 121 of file TGDMLWrite.h. ◆ fIgnoreDummyMaterial. Int_t TGDMLWrite::fIgnoreDummyMaterial. private . Definition at line 122 of file TGDMLWrite.h. ◆ fIsotopeList. StructLst* TGDMLWrite::fIsotopeList. private . Definition at line 109 of file TGDMLWrite.h. ◆ fMaterialsNode. XMLNodePointer_t TGDMLWrite::fMaterialsNode. private . Definition at line 131 of file TGDMLWrite.h. ◆ fNameList. NameLst* TGDMLWrite::fNameList. private . Definition at line 117 of file TGDMLWrite.h. ◆ fNodeList. NodeList TGDMLWrite::fNodeList. private . Definition at line 115 of file TGDMLWrite.h. ◆ fPhysVolCnt. Int_t TGDMLWrite::fPhysVolCnt. private . Definition at line 135 of file TGDMLWrite.h. ◆ fRejShape. StructLst* TGDMLWrite::fRejShape. private . Definition at line 112 of file TGDMLWrite.h. ◆ fSolCnt. UInt_t TGDMLWrite::fSolCnt. private . Definition at line 137 of file TGDMLWrite.h. ◆ fSolidsNode. XMLNodePointer_t TGDMLWrite::fSolidsNode. private . Definition at line 132 of file TGDMLWrite.h. ◆ fStructureNode. XMLNodePointer_t TGDMLWrite::fStructureNode. private . Definition at line 133 of file TGDMLWrite.h. ◆ fSurfaceList. SurfaceList TGDMLWrite::fSurfaceList. private . Definition at line 113 of file TGDMLWrite.h. ◆ fTopVolume. TGeoVolume* TGDMLWrite::fTopVolume = nullptr. private . Definition at line 127 of file TGDMLWrite.h. ◆ fTopVolumeName. TString TGDMLWrite::fTopVolumeName. private . Definition at line 126 of file TGDMLWrite.h. ◆ fVolCnt. Int_t TGDMLWrite::fVolCnt. private . Definition at line 134 of file TGDMLWrite.h. ◆ fVolumeList. VolList TGDMLWrite::fVolumeList. private . Definition at line 114 of file TGDMLWrite.h. Libraries for TGDMLWrite:. [legend]; The documentation for this class was generated from the following files:; geom/gdml/inc/TGDMLWrite.h; geom/gdml/src/TGDMLWrite.cxx. TGDMLWrite. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:58 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLWrite.html:48348,Guid,Guide,48348,doc/master/classTGDMLWrite.html,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html,1,['Guid'],['Guide']
Usability,"X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); This function controls the display mode group and display mode of the histogram drawing. To illustrate the possible effects of the various display modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight; displayMode = kDisplayModeSurface. Simple modes group, display mode = points, 256 x 256 channels. . Simple modes group, display mode = grid, 64 x 64 channels. . Simple modes group, display mode = contours, 64 x 64 channels. . Simple modes group, display mode = bars, 64 x 64 channels. . Simple modes group, display mode = linesX, 64 x 64 channels. . Simple modes group, display mode = linesY, 64 x 64 channels. . Simple modes group, display mode = barsX, 64 x 64 channels. . Simple modes group, display mode = barsY, 64 x 64 channels. . Simple modes group, display mode = needles, 64 x 64 channels. . Simple modes group, display mode = triangles, 64 x 64 channels. . Light modes group, display mode = points, 256 x 256 channels. . Light modes group, display mode = grid, 256 x 256 channels. . Light modes group, display mode = surface, 64 x 64 channels. . Light modes group, display mode = triangles, 64 x 64 channels. . Height modes group, display mode = points, 256 x 256 channels. . Height modes group, display mode = grid, 256 x 256 channels. . Height modes group, display mode = contours, 64 x 64 channels. . Height modes group, display mode = bars, 64 x 64 channels. . Height modes group, display mode = surface, 64 x 64 channels. . Height modes group, display mode = triangles, 64 x 64 channels. . Light - height modes group, display mode = surface, 64 x 64 channels. The weight between both shading algorithms is set to 0.5. One can observe the influence of both shadings.; Function: TSpectrum2Painter::SetPenAttr(Int_t color,Int_t style,Int_t width); Using t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:33382,Simpl,Simple,33382,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Simpl'],['Simple']
Usability,"X11 system. Returns kFALSE in case of failure. Bool_t AllocColor(unsigned long cmap, XColor* color); Allocate color in colormap. If we are on an <= 8 plane machine; we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane; true color machine we will calculate the pixel value using:; for 15 and 16 bit true colors have 6 bits precision per color however; only the 5 most significant bits are used in the color index.; Except for 16 bits where green uses all 6 bits. I.e.:; 15 bits = rrrrrgggggbbbbb; 16 bits = rrrrrggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits. Since all colors are set with a max of 65535 (16 bits) per r, g, b; we just right shift them by 10, 11 and 10 bits for 16 planes, and; (10, 10, 10 for 15 planes) and by 8 bits for 24 planes.; Returns kFALSE in case color allocation failed. void QueryColors(unsigned long cmap, XColor* colors, Int_t ncolors); Returns the current RGB value for the pixel in the XColor structure. void ClearPixmap(unsigned long* pix); Clear the pixmap pix. void ClearWindow(); Clear current window. void ClosePixmap(); Delete current pixmap. void CloseWindow(); Delete current window. void CloseWindow1(); Delete current window. void CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); Copy the pixmap wid at the position xpos, ypos in the current window. void CopyWindowtoPixmap(unsigned long* pix, Int_t xpos, Int_t ypos); Copy area of current window in the pixmap pix. void DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); Draw a box.; mode=0 hollow (kHollow); mode=1 solid (kSolid). void DrawCellArray(Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t* ic); Draw a cell array.; x1,y1 : left down corner; x2,y2 : right up corner; nx,ny : array size; ic : array. Draw a cell array. The drawing is done with the pixel presicion; if (X2-X1)/NX (or Y) is not a exact pixel number the position of; the top rigth corner may be wrong. void DrawFillArea(Int_t n, TPoint* xy); Fill area describe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:25667,Clear,ClearPixmap,25667,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,8,['Clear'],"['Clear', 'ClearPixmap']"
Usability,"X11.cxx:3154; TGX11::SetFillStylevoid SetFillStyle(Style_t style) overrideSet fill area style.Definition TGX11.cxx:2202; TGX11::ClearPixmapvoid ClearPixmap(Drawable *pix)Clear the pixmap pix.Definition TGX11.cxx:407; TGX11::fTextMagnitudeFloat_t fTextMagnitudeText Magnitude.Definition TGX11.h:138; TGX11::SetCharacterUpvoid SetCharacterUp(Float_t chupx, Float_t chupy) overrideSet character up vector.Definition TGX11.cxx:1983; TGX11::fRootWinDrawable fRootWinRoot window used as parent of all windows.Definition TGX11.h:127; TGX11::WritePixmapvoid WritePixmap(Int_t wid, UInt_t w, UInt_t h, char *pxname) overrideWrite the pixmap wid in the bitmap file pxname.Definition TGX11.cxx:3278; TGX11::SetInputvoid SetInput(Int_t inp)Set input on or off.Definition TGX11.cxx:2257; TGX11::GetPlanesvoid GetPlanes(Int_t &nplanes) overrideGet maximum number of planes.Definition TGX11.cxx:1019; TGX11::fTextAlignHInt_t fTextAlignHText Alignment Horizontal.Definition TGX11.h:133; TGX11::ClearWindowvoid ClearWindow() overrideClear current window.Definition TGX11.cxx:422; TGX11::fXEventvoid * fXEventCurrent native (X11) event.Definition TGX11.h:87; TGX11::fGreenShiftInt_t fGreenShiftBits to left shift green.Definition TGX11.h:144; TGX11::DrawBoxvoid DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, EBoxMode mode) overrideDraw a box.Definition TGX11.cxx:525; TGX11::CopyPixmapvoid CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos) overrideCopy the pixmap wid at the position xpos, ypos in the current window.Definition TGX11.cxx:496; TGX11::SetOpacityvoid SetOpacity(Int_t percent) overrideSet opacity of a window.Definition TGX11.cxx:2884; TGX11::OpenPixmapInt_t OpenPixmap(UInt_t w, UInt_t h) overrideOpen a new pixmap.Definition TGX11.cxx:1243; TGX11::GetColorXColor_t & GetColor(Int_t cid)Return reference to internal color structure associated to color index cid.Definition TGX11.cxx:909; TGX11::fBlueDivInt_t fBlueDivBlue value divider.Definition TGX11.h:142; TGX11::DrawPolyMarkervoid DrawPolyMarker(Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:149844,Clear,ClearWindowvoid,149844,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,2,['Clear'],"['ClearWindow', 'ClearWindowvoid']"
Usability,"X11::AddPixmap(ULong_t pixid, UInt_t w, UInt_t h); virtual Int_tTGX11::AddWindow(ULong_t qwid, UInt_t w, UInt_t h); virtual Bool_tTGX11::AllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualX::BeginModalSessionFor(Window_t window); virtual voidTGX11::Bell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidTGX11::ChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidTGX11::ChangeGC(GContext_t gc, GCValues_t* gval); virtual voidTGX11::ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidTGX11::ChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidTGX11::ChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tTGX11::CheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGX11::ClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGX11::ClearWindow(); virtual voidTGX11::ClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTGX11::CloseDisplay(); virtual voidTGX11::ClosePixmap(); virtual voidTGX11::CloseWindow(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGX11::ConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidTGX11::ConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTGX11::CopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidTGX11::CopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidTGX11::CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual Pixmap_tTGX11::CreateBitmap(Drawable_t id, const char* bitmap, UI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGX11TTF.html:1806,Clear,Clear,1806,root/html534/TGX11TTF.html,https://root.cern,https://root.cern/root/html534/TGX11TTF.html,3,['Clear'],['Clear']
Usability,"XDump Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Interface to TeX. ; This class allow to generate PGF/TikZ vector graphics output which can be included in TeX and LaTeX documents.; PGF is a TeX macro package for generating graphics. It is platform and format-independent and works together with the most important TeX backend drivers, including pdftex and dvips. It comes with a user-friendly syntax layer called TikZ.; To generate a such file it is enough to do: gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TStyle::SetPaperSizevoid SetPaperSize(EPaperSize size)Set paper size for PostScript output.Definition TStyle.cxx:1704; Then, the generated file (hpx.tex) can be included in a LaTeX document (simple.tex) in the following way: \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}; TTeXDumpInterface to TeX.Definition TTeXDump.h:20; Rcpp::asTString as(SEXP s)Definition RExports.h:86; TMVA_SOFIE_GNN.endendDefinition TMVA_SOFIE_GNN.py:207; Note the three directives needed at the top of the LaTeX file: \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; Then including the picture in the document is done with the \input directive.; The command pdflatex simple.tex will generate the corresponding pdf file simple.pdf. ; Definition at line 20 of file TTeXDump.h. Public Member Functions;  TTeXDump ();  Default TeX constructor. ;  ;  TTeXDump (const char *filename, Int_t type=-113);  Initialize the TeX interface. ;  ;  ~TTeXDump () override;  Default TeX destructor. ;  ; void CellArrayBegin (Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2) override;  Begin the Cell Arr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTeXDump.html:1239,simpl,simple,1239,doc/master/classTTeXDump.html,https://root.cern,https://root.cern/doc/master/classTTeXDump.html,1,['simpl'],['simple']
Usability,"XMLEngine::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TXMLEngine::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 108 of file TXMLEngine.h. ◆ TruncateNsExtension(). void TXMLEngine::TruncateNsExtension ; (; XMLNodePointer_t ; xmlnode). protected . removes namespace extension of nodename ; Definition at line 1579 of file TXMLEngine.cxx. ◆ UnlinkFreeNode(). void TXMLEngine::UnlinkFreeNode ; (; XMLNodePointer_t ; xmlnode). combined operation. Unlink node and free used memory ; Definition at line 1066 of file TXMLEngine.cxx. ◆ UnlinkNode(). void TXMLEngine::UnlinkNode ; (; XMLNodePointer_t ; node). unlink (detach) xmlnode from parent ; Definition at line 1005 of file TXMLEngine.cxx. ◆ UnpackSpecialCharacters(). void TXMLEngine::UnpackSpecialCharacters ; (; char * ; target, . const char * ; source, . int ; srclen . ). protected . unpack special symbols, used in xml syntax to code characters these symbols: '<' - &lt, '>' - &gt, '&' - &amp, '""' - &quot, ''' - &apos ; Definition at line 1598 of file TXMLEngine.cxx. ◆ ValidateDocument(). Bool_t TXMLEngine::ValidateDocument ; (; XMLDocPointer_t ; , . Bool_t ; = kFALSE . ). inline . Definition at line 104 of file TXMLEngine.h. ◆ ValidateVersion(). Bool_t TXMLEngine::ValidateVersion ; (; XMLDocPointer_t ; doc, . const char * ; version = nullptr . ). check that first node is xml processing instruction with correct xml version number ; Definition at line 1420 of file TXMLEngine.cxx. Member Data Documentation. ◆ fSkipComments. Bool_t TXMLEngine::fSkipComments. protected . Definition at line 42 of file TXMLEngine.h. Libraries for TXMLEngine:. [legend]; The documentation for this class was generated from the following files:; io/xml/inc/TXMLEngine.h; io/xml/src/TXMLEngine.cxx. TXMLEngine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLEngine.html:36605,Guid,Guide,36605,doc/master/classTXMLEngine.html,https://root.cern,https://root.cern/doc/master/classTXMLEngine.html,1,['Guid'],['Guide']
Usability,"XMLSetupfXmlSetup! buffer for xml names convertion. Class Charts. Inheritance Chart:. TObject. ←; TXMLPlayer. Function documentation; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl, TString& tname, TString& ifcond); Produce code to read argument of stl container from xml file. void WriteSTLarg(ostream& fs, const char* accname, int argtyp, Bool_t isargptr, TClass* argcl); Produce code to write argument of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLPlayer.html:11062,simpl,simple,11062,root/html602/TXMLPlayer.html,https://root.cern,https://root.cern/root/html602/TXMLPlayer.html,2,['simpl'],['simple']
Usability,"X_NewProto; , kCXX_ConstructorProto; , kCXX_ScopeProto; , kCXX_DirectProto; , ;   kCXX_IndirectProto; , kCXX_ScopeMember; , kCXX_DirectMember; , kCXX_IndirectMember; , ;   kCXX_Global; , kCXX_GlobalProto; , kNUM_PAT. };  ; typedef TList TContainer;  ; typedef TListIter TContIter;  . Public Member Functions;  TTabCom ();  Default constructor. ;  ; virtual ~TTabCom ();  ; void ClearAll ();  clears all lists except for user names and system include files. ;  ; void ClearClasses ();  Clear classes and namespace collections. ;  ; void ClearCppDirectives ();  Forget all Cpp directives seen so far. ;  ; void ClearEnvVars ();  Forget all environment variables seen so far. ;  ; void ClearFiles ();  Close all files. ;  ; void ClearGlobalFunctions ();  Forget all global functions seen so far. ;  ; void ClearGlobals ();  Forget all global variables seen so far. ;  ; void ClearPragmas ();  Forget all pragmas seen so far. ;  ; void ClearSysIncFiles ();  Close system files. ;  ; void ClearUsers ();  Forget all user seen so far. ;  ; const TSeqCollection * GetListOfClasses ();  Return the list of classes. ;  ; const TSeqCollection * GetListOfCppDirectives ();  Return the list of CPP directives. ;  ; const TSeqCollection * GetListOfEnvVars ();  Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. ;  ; const TSeqCollection * GetListOfFilesInPath (const char path[]);  ""path"" should be initialized with a colon separated list of system directories ;  ; TCollection * GetListOfGlobalFunctions ();  Return the list of global functions. ;  ; const TSeqCollection * GetListOfGlobals ();  Return the list of globals. ;  ; const TSeqCollection * GetListOfPragmas ();  Return the list of pragmas. ;  ; const TSeqCollection * GetListOfSysIncFiles ();  Return the list of system include files. ;  ; const TSeqCollection * GetListOfUsers ();  reads from ""/etc/passwd"" ;  ; Int_t Hook (char *buf, int *pLoc, std::ostream &out);  [private] ;  ; virtual TClass * IsA () const;  ; void Reha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:1680,Clear,ClearUsers,1680,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearUsers']
Usability,"XminDouble_t fXminMinimal bound of range of NormSum.Definition TF1NormSum.h:24; TF1NormSum::GetParametersstd::vector< double > GetParameters() constReturn array of parameters.Definition TF1NormSum.cxx:289; TF1NormSum::operator()double operator()(const Double_t *x, const Double_t *p) overrideOverload the parenthesis to add the functions.Definition TF1NormSum.cxx:272; TF1NormSum::Updatevoid Update() overrideUpdate the component functions of the normalized sum.Definition TF1NormSum.cxx:401; TF1NormSum::fFunctionsstd::vector< std::unique_ptr< TF1 > > fFunctionsVector of size fNOfFunctions containing TF1 functions.Definition TF1NormSum.h:26; TF1NormSum::InitializeDataMembersvoid InitializeDataMembers(const std::vector< TF1 * > &functions, const std::vector< Double_t > &coeffs, Double_t scale)Definition TF1NormSum.cxx:55; TF1NormSum::SetParametersvoid SetParameters(const Double_t *params) overrideInitialize array of all parameters.Definition TF1NormSum.cxx:313; TF1NormSum::fCoeffsstd::vector< Double_t > fCoeffsVector of size afNOfFunctions containing coefficients in front of each function.Definition TF1NormSum.h:27; TF1NormSum::GetNparInt_t GetNpar() constReturn the number of (non constant) parameters including the coefficients: for 2 functions: c1,...Definition TF1NormSum.cxx:361; TF1NormSum::GetScaleDouble_t GetScale() constDefinition TF1NormSum.h:64; TF1NormSum::fNOfFunctionsunsigned int fNOfFunctionsNumber of functions to add.Definition TF1NormSum.h:22; TF1NormSum::fCstIndexesstd::vector< Int_t > fCstIndexesVector with size of fNOfFunctions containing the index of the constant parameter/ function (the remov...Definition TF1NormSum.h:28; TF11-Dim function classDefinition TF1.h:233; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; double; int; xDouble_t x[n]Definition legend1.C:17. histhistincTF1NormSum.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1NormSum_8h_source.html:6924,Guid,Guide,6924,doc/master/TF1NormSum_8h_source.html,https://root.cern,https://root.cern/doc/master/TF1NormSum_8h_source.html,1,['Guid'],['Guide']
Usability,"XmlSetup! buffer for xml names convertion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl, TString& tname, TString& ifcond); Produce code to read argument of stl container from xml file. void WriteSTLarg(ostream& fs, const char* accname, int argtyp, Bool_t isargptr, TClass* argcl); Produce code to write argument of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLPlayer.html:10497,simpl,simple,10497,root/html528/TXMLPlayer.html,https://root.cern,https://root.cern/root/html528/TXMLPlayer.html,4,['simpl'],['simple']
Usability,"Y: number of variables in every cell. ; Definition at line 108 of file PDEFoam.h. ◆ fNmin. UInt_t TMVA::PDEFoam::fNmin. protected . minimal number of events in cell to split cell ; Definition at line 109 of file PDEFoam.h. ◆ fNoAct. Int_t TMVA::PDEFoam::fNoAct. protected . Number of active cells. ; Definition at line 94 of file PDEFoam.h. ◆ fNSampl. Int_t TMVA::PDEFoam::fNSampl. protected . No. of MC events, when dividing (exploring) cell. ; Definition at line 88 of file PDEFoam.h. ◆ fPeekMax. Bool_t TMVA::PDEFoam::fPeekMax. protected . BACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split. ; Definition at line 114 of file PDEFoam.h. ◆ fPseRan. TRandom3* TMVA::PDEFoam::fPseRan. protected . Pointer to user-defined generator of pseudorandom numbers. ; Definition at line 101 of file PDEFoam.h. ◆ fRvec. Double_t* TMVA::PDEFoam::fRvec. protected . [fDim] random number vector from r.n. generator fDim+1 maximum elements ; Definition at line 99 of file PDEFoam.h. ◆ fTimer. Timer* TMVA::PDEFoam::fTimer. protected . ! timer for graphical output ; Definition at line 116 of file PDEFoam.h. ◆ fVariableNames. TObjArray* TMVA::PDEFoam::fVariableNames. protected . collection of all variable names ; Definition at line 117 of file PDEFoam.h. ◆ fVolFrac. Float_t TMVA::PDEFoam::fVolFrac. protected . BACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space. ; Definition at line 111 of file PDEFoam.h. ◆ fXmax. Double_t* TMVA::PDEFoam::fXmax. protected . [fDim] maximum for variable transform ; Definition at line 107 of file PDEFoam.h. ◆ fXmin. Double_t* TMVA::PDEFoam::fXmin. protected . [fDim] minimum for variable transform ; Definition at line 106 of file PDEFoam.h. Libraries for TMVA::PDEFoam:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoam.h; tmva/tmva/src/PDEFoam.cxx. TMVAPDEFoam. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html:44864,Guid,Guide,44864,doc/master/classTMVA_1_1PDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html,1,['Guid'],['Guide']
Usability,"Yaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf208_convolutionDefinition rf208_convolution.py:1; ; [#1] INFO:Eval -- RooRealVar::setRange(t) new range named 'refrange_fft_lxg' created with bounds [-10,30]; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lxg) creating new cache 0x56539f82d770 with pdf lx_CONV_gauss_CACHE_Obs[t]_NORM_t for nset (t) with code 0; [#1] INFO:Fitting -- RooAbsPdf::fitTo(lxg_over_lxg_Int[t]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_lxg_over_lxg_Int[t]_lxgData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lxg) creating new cache 0x56539fd9f650 with pdf lx_CONV_gauss_CACHE_Obs[t] for nset () with code 1 from preexisting content.; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lxg) creating new cache 0x56539fcccee0 with pdf lx_CONV_gauss_CACHE_Obs[t]_NORM_t for nset (t) with code 0; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf208_convolution.C. tutorialsroofitrf208_convolution.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf208__convolution_8C.html:4946,Guid,Guide,4946,doc/master/rf208__convolution_8C.html,https://root.cern,https://root.cern/doc/master/rf208__convolution_8C.html,1,['Guid'],['Guide']
Usability,"Z const & ; r1, . Rotation3D const & ; r2 . ). Definition at line 308 of file 3DDistances.cxx. ◆ dist() [54/64]. double ROOT::Math::gv_detail::dist ; (; RotationZ const & ; r1, . RotationX const & ; r2 . ). Definition at line 325 of file 3DDistances.cxx. ◆ dist() [55/64]. double ROOT::Math::gv_detail::dist ; (; RotationZ const & ; r1, . RotationY const & ; r2 . ). Definition at line 330 of file 3DDistances.cxx. ◆ dist() [56/64]. double ROOT::Math::gv_detail::dist ; (; RotationZ const & ; r1, . RotationZ const & ; r2 . ). Definition at line 335 of file 3DDistances.cxx. ◆ dist() [57/64]. double ROOT::Math::gv_detail::dist ; (; RotationZYX const & ; r1, . AxisAngle const & ; r2 . ). Definition at line 200 of file 3DDistances.cxx. ◆ dist() [58/64]. double ROOT::Math::gv_detail::dist ; (; RotationZYX const & ; r1, . EulerAngles const & ; r2 . ). Definition at line 203 of file 3DDistances.cxx. ◆ dist() [59/64]. double ROOT::Math::gv_detail::dist ; (; RotationZYX const & ; r1, . Quaternion const & ; r2 . ). Definition at line 206 of file 3DDistances.cxx. ◆ dist() [60/64]. double ROOT::Math::gv_detail::dist ; (; RotationZYX const & ; r1, . Rotation3D const & ; r2 . ). Definition at line 197 of file 3DDistances.cxx. ◆ dist() [61/64]. double ROOT::Math::gv_detail::dist ; (; RotationZYX const & ; r1, . RotationX const & ; r2 . ). Definition at line 214 of file 3DDistances.cxx. ◆ dist() [62/64]. double ROOT::Math::gv_detail::dist ; (; RotationZYX const & ; r1, . RotationY const & ; r2 . ). Definition at line 219 of file 3DDistances.cxx. ◆ dist() [63/64]. double ROOT::Math::gv_detail::dist ; (; RotationZYX const & ; r1, . RotationZ const & ; r2 . ). Definition at line 224 of file 3DDistances.cxx. ◆ dist() [64/64]. double ROOT::Math::gv_detail::dist ; (; RotationZYX const & ; r1, . RotationZYX const & ; r2 . ). Definition at line 209 of file 3DDistances.cxx. ROOTMathgv_detail. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1gv__detail.html:25036,Guid,Guide,25036,doc/master/namespaceROOT_1_1Math_1_1gv__detail.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1gv__detail.html,1,['Guid'],['Guide']
Usability,"[0] = 1; vec[1] = 2; print(""Content of the ROOT vector object: {}"".format([x for x in vec])); ; # Interface ROOT vector with a numpy array; array = np.asarray(vec); print(""Content of the associated numpy array: {}"".format([x for x in array])); ; # The numpy array adopts the memory of the vector without copying the content.; # Note that the first entry of the numpy array changes when assigning a new; # value to the first entry of the ROOT vector.; vec[0] = 42; print(; ""Content of the numpy array after changing the first entry of the ROOT vector: {}"".; format([x for x in array])); ; # Use numpy features on data of ROOT objects; print(""Mean of the numpy array entries: {}"".format(np.mean(array))); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; Content of the ROOT vector object: [1.0, 2.0]; Content of the associated numpy array: [1.0, 2.0]; Content of the numpy array after changing the first entry of the ROOT vector: [42.0, 2.0]; Mean of the numpy array entries: 22.0; DateApril 2018 ; AuthorStefan Wunsch ; Definition in file pyroot001_arrayInterface.py. tutorialspyrootpyroot001_arrayInterface.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/pyroot001__arrayInterface_8py.html:2629,Guid,Guide,2629,doc/master/pyroot001__arrayInterface_8py.html,https://root.cern,https://root.cern/doc/master/pyroot001__arrayInterface_8py.html,1,['Guid'],['Guide']
Usability,"[0m; : ; : This method uses a collection of so called rules to create a; : discriminating scoring function. Each rule consists of a series; : of cuts in parameter space. The ensemble of rules are created; : from a forest of decision trees, trained using the training data.; : Each node (apart from the root) corresponds to one rule.; : The scoring function is then obtained by linearly combining; : the rules. A fitting procedure is applied to find the optimum; : set of coefficients. The goal is to find a model with few rules; : but with a strong discriminating power.; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : There are two important considerations to make when optimising:; : ; : 1. Topology of the decision tree forest; : 2. Fitting of the coefficients; : ; : The maximum complexity of the rules is defined by the size of; : the trees. Large trees will yield many complex rules and capture; : higher order correlations. On the other hand, small trees will; : lead to a smaller ensemble with simple rules, only capable of; : modeling simple structures.; : Several parameters exists for controlling the complexity of the; : rule ensemble.; : ; : The fitting procedure searches for a minimum using a gradient; : directed path. Apart from step size and number of steps, the; : evolution of the path is defined by a cut-off parameter, tau.; : This parameter is unknown and depends on the training data.; : A large value will tend to give large weights to a few rules.; : Similarly, a small value will lead to a large set of rules; : with similar weights.; : ; : A final point is the model used; rules and/or linear terms.; : For a given training sample, the result may improve by adding; : linear terms. If best performance is obtained using only linear; : terms, it is very likely that the Fisher discriminant would be; : a better choice. Ideally the fitting procedure should be able to; : make this choice by giving appropriate weights for either terms.; : ; : ␛[1m--- Performance tuning ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:53143,simpl,simple,53143,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,2,['simpl'],['simple']
Usability,"[2/2]. ROOT::TIOFeatures::TIOFeatures ; (; UChar_t ; IOBits). inlineprivate . Definition at line 96 of file TIOFeatures.hxx. Member Function Documentation. ◆ Clear() [1/3]. void TIOFeatures::Clear ; (; EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 80 of file TIOFeatures.cxx. ◆ Clear() [2/3]. void TIOFeatures::Clear ; (; Experimental::EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set() [1/4]. bool TIOFeatures::Set ; (; const std::string & ; value). Given a IO feature string, set the corresponding feature. ; Parameters. [in]valueFeature name to test. This allows one to set a feature given a specific string from the TBasket::EIOBits enum.; NOTE this function is quite slow and users are strongly encouraged to use the type-safe Set version instead. This has bee",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:3997,Clear,Clear,3997,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,2,['Clear'],['Clear']
Usability,"[2/2]. RooExpensiveObjectCache::RooExpensiveObjectCache ; (; const RooExpensiveObjectCache & ; other). inline . Definition at line 28 of file RooExpensiveObjectCache.h. ◆ ~RooExpensiveObjectCache(). RooExpensiveObjectCache::~RooExpensiveObjectCache ; (; ). override . Destructor. ; Definition at line 45 of file RooExpensiveObjectCache.cxx. Member Function Documentation. ◆ Class(). static TClass * RooExpensiveObjectCache::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooExpensiveObjectCache::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooExpensiveObjectCache::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file RooExpensiveObjectCache.h. ◆ clearAll(). void RooExpensiveObjectCache::clearAll ; (; ). Clear all cache elements. ; Definition at line 164 of file RooExpensiveObjectCache.cxx. ◆ clearObj(). bool RooExpensiveObjectCache::clearObj ; (; Int_t ; uniqueID). Clear cache element with given unique ID Retrieve payload object of cache element with given unique ID. ; Definition at line 131 of file RooExpensiveObjectCache.cxx. ◆ DeclFileName(). static const char * RooExpensiveObjectCache::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file RooExpensiveObjectCache.h. ◆ empty(). bool RooExpensiveObjectCache::empty ; (; ); const. inline . Definition at line 44 of file RooExpensiveObjectCache.h. ◆ getObj(). const TObject * RooExpensiveObjectCache::getObj ; (; Int_t ; uniqueID). Retrieve payload object of cache element with given unique ID. ; Definition at line 115 of file RooExpensiveObjectCache.cxx. ◆ importCacheObjects(). void RooExpensiveObjectCache::importCacheObjects ; (; RooExpensiveObjectCache & ; other, . const char * ; ownerName, . bool ; verbose = false . ). Definition at line 296 of file RooExpensiveObjectCache.cxx. ◆ instance(). RooEx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExpensiveObjectCache.html:12985,clear,clearObj,12985,doc/master/classRooExpensiveObjectCache.html,https://root.cern,https://root.cern/doc/master/classRooExpensiveObjectCache.html,1,['clear'],['clearObj']
Usability,"[28] = 3 ; buffer.fPols[29] = 0 ;; buffer.fPols[30] = fColor ; buffer.fPols[31] = 4 ; buffer.fPols[32] = 7 ; // 5; buffer.fPols[33] = 6 ; buffer.fPols[34] = 5 ; buffer.fPols[35] = 4 ;; ; buffer.SetSectionsValid(TBuffer3D::kRaw);; }; ; return buffer;; }; ; class SBPyramid : public Shape; {; public:; SBPyramid(Int_t color, Double_t d, Double_t y, Double_t z,; Double_t dX, Double_t dY, Double_t dZ);; ~SBPyramid() override {};; ; TBuffer3D & GetBuffer3D(UInt_t reqSections) override;; ; private:; Double_t fDX, fDY, fDZ; // Base half lengths dX,dY; // Pyr. height dZ; ; ClassDefOverride(SBPyramid,0);; };; ; ClassImp(SBPyramid);; ; SBPyramid::SBPyramid(Int_t color, Double_t x, Double_t y, Double_t z,; Double_t dX, Double_t dY, Double_t dZ) :; Shape(color,x,y,z),; fDX(dX), fDY(dY), fDZ(dZ); {}; ; TBuffer3D & SBPyramid::GetBuffer3D(UInt_t reqSections); {; static TBuffer3D buffer(TBuffer3DTypes::kGeneric);; ; // Complete kCore section; if (reqSections & TBuffer3D::kCore) {; buffer.ClearSectionsValid();; buffer.fID = this;; buffer.fColor = fColor; // Color index - see gROOT->GetColor(); buffer.fTransparency = 0; // Transparency 0 (opaque) - 100 (fully transparent); ; // Complete local/master transformation matrix - simple x/y/z; // translation. Easiest way to set identity then override the; // translation components; buffer.SetLocalMasterIdentity();; buffer.fLocalMaster[12] = fX;; buffer.fLocalMaster[13] = fY;; buffer.fLocalMaster[14] = fZ;; buffer.fLocalFrame = kTRUE; // Local frame; ; buffer.fReflection = kFALSE;; buffer.SetSectionsValid(TBuffer3D::kCore);; }; // Complete kBoundingBox section; if (reqSections & TBuffer3D::kBoundingBox) {; Double_t halfLength[3] = { fDX, fDY, fDZ/2.0 };; Double_t origin[3] = { fX , fY, fZ + halfLength[2]};; buffer.SetAABoundingBox(origin, halfLength);; buffer.SetSectionsValid(TBuffer3D::kBoundingBox);; }; // No kShapeSpecific section; ; // Complete kRawSizes section; if (reqSections & TBuffer3D::kRawSizes) {; buffer.SetRawSizes(5, 3*5, 8, 3*8,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/viewer3DLocal_8C.html:9686,Clear,ClearSectionsValid,9686,doc/master/viewer3DLocal_8C.html,https://root.cern,https://root.cern/doc/master/viewer3DLocal_8C.html,1,['Clear'],['ClearSectionsValid']
Usability,"[5/5]. void TDatime::Set ; (; UInt_t ; tloc, . Bool_t ; dosDate = kFALSE . ). The input arg is a time_t value returned by time() or a value returned by Convert(). ; This value is the number of seconds since the EPOCH (i.e. 00:00:00 on Jan 1m 1970). If dosDate is true then the input is a dosDate value. ; Definition at line 321 of file TDatime.cxx. ◆ Sizeof(). Int_t TDatime::Sizeof ; (; ); const. inline . Definition at line 81 of file TDatime.h. ◆ Streamer(). void TDatime::Streamer ; (; TBuffer & ; b). virtual . Stream a object of type TDatime. ; Definition at line 416 of file TDatime.cxx. ◆ StreamerNVirtual(). void TDatime::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 95 of file TDatime.h. Friends And Related Symbol Documentation. ◆ operator!=. Bool_t operator!= ; (; const TDatime & ; d1, . const TDatime & ; d2 . ). friend . Definition at line 104 of file TDatime.h. ◆ operator<. Bool_t operator< ; (; const TDatime & ; d1, . const TDatime & ; d2 . ). friend . Definition at line 106 of file TDatime.h. ◆ operator<=. Bool_t operator<= ; (; const TDatime & ; d1, . const TDatime & ; d2 . ). friend . Definition at line 108 of file TDatime.h. ◆ operator==. Bool_t operator== ; (; const TDatime & ; d1, . const TDatime & ; d2 . ). friend . Definition at line 102 of file TDatime.h. ◆ operator>. Bool_t operator> ; (; const TDatime & ; d1, . const TDatime & ; d2 . ). friend . Definition at line 110 of file TDatime.h. ◆ operator>=. Bool_t operator>= ; (; const TDatime & ; d1, . const TDatime & ; d2 . ). friend . Definition at line 112 of file TDatime.h. Member Data Documentation. ◆ fDatime. UInt_t TDatime::fDatime. protected . Definition at line 42 of file TDatime.h. Libraries for TDatime:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TDatime.h; core/base/src/TDatime.cxx. TDatime. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDatime.html:15287,Guid,Guide,15287,doc/master/classTDatime.html,https://root.cern,https://root.cern/doc/master/classTDatime.html,1,['Guid'],['Guide']
Usability,"[Introduction](\ref GrP0); 60- [Graphs' plotting options](\ref GrP1); 61- [Exclusion graphs](\ref GrP2); 62- [Graphs with error bars](\ref GrP3); 63 - [TGraphErrors](\ref GrP3a); 64 - [TGraphAsymmErrors](\ref GrP3b); 65 - [TGraphBentErrors](\ref GrP3c); 66 - [TGraphMultiErrors](\ref GrP3d); 67- [TGraphPolar options](\ref GrP4); 68- [Colors automatically picked in palette](\ref GrP5); 69- [Reverse graphs' axis](\ref GrP6); 70- [Graphs in logarithmic scale](\ref GrP7); 71- [Highlight mode for graph](\ref GrP8); 72 ; 73 ; 74\anchor GrP0; 75### Introduction; 76 ; 77Graphs are drawn via the painter `TGraphPainter` class. This class; 78implements techniques needed to display the various kind of; 79graphs i.e.: `TGraph`, `TGraphErrors`, `TGraphBentErrors` and `TGraphAsymmErrors`.; 80 ; 81To draw a graph `graph` it's enough to do:; 82 ; 83 graph->Draw(""AL"");; 84 ; 85The option `AL` in the `Draw()` method means:; 86 ; 871. The axis should be drawn (option `A`),; 882. The graph should be drawn as a simple line (option `L`).; 89 ; 90 By default a graph is drawn in the current pad in the current coordinate system.; 91To define a suitable coordinate system and draw the axis the option; 92`A` must be specified.; 93 ; 94`TGraphPainter` offers many options to paint the various kind of graphs.; 95 ; 96It is separated from the graph classes so that one can have graphs without the; 97graphics overhead, for example in a batch program.; 98 ; 99When a displayed graph is modified, there is no need to call `Draw()` again; the; 100image will be refreshed the next time the pad will be updated. A pad is updated; 101after one of these three actions:; 102 ; 1031. a carriage return on the ROOT command line,; 1042. a click inside the pad,; 1053. a call to `TPad::Update`.; 106 ; 107\anchor GrP1; 108### Graphs' plotting options; 109Graphs can be drawn with the following options:; 110 ; 111| Option | Description |; 112|----------|-------------------------------------------------------------------|; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:3017,simpl,simple,3017,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['simpl'],['simple']
Usability,"[] T->Print();; From the output of print we can see that the tree has one branch for each data member of Event, Track, and EventHeader. Now we can use TTree::MakeClass on our tree “T”. MakeClass takes one parameter, a string containing the name of the class to be made. In the command below, the name of our class will be “MyClass”.; root[] T->MakeClass(""MyClass""); Files: MyClass.h and MyClass.C generated from Tree: T; Cling informs us that it has created two files. MyClass.h contains the class definition and MyClass.C contains the MyClass::Loop() method. MyClass has more methods than just Loop(). The other methods are a constructor, a destructor, GetEntry(), LoadTree(), Notify(), Cut() and Show(). The implementations of these methods are in the .h file. This division of methods was done intentionally. The .C file is kept as short as possible, and contains only code that is intended for you to customize. The .h file contains all the other methods. It is clear that you want to be as independent as possible of the header file (i.e. MyClass.h) generated by MakeClass. The solution is to implement a derived class, for example MyRealClass deriving from MyClass such that a change in your Treeor regeneration of MyClass.h does not force you to change MyRealClass.h. You can imagine deriving several classes from MyClass.h, each with a specific algorithm. To understand both files, let’s start with MyClass.h and the class declaration:; 12.21.2 MyClass.h; class MyClass {; public :; // Pointer to the analyzed TTree or TChain; TTree *fChain;; // Current Tree number in a TChain; Int_t fCurrent;; // Declaration of leaves types; UInt_t fUniqueID;; UInt_t fBits;; Char_t fType[20];; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Float_t fTemperature;; Int_t fEvtHdr_fEvtNum;; // List of branches; TBranch *b_fUniqueID;; TBranch *b_fBits;; TBranch *b_fType;; TBranch *b_fNtrack;; TBranch *b_fNseg;; TBranch *b_fNvertex;; TBranch *b_fFlag;; TBranch *b_fTemperature;; TBranch *b_fE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:637190,clear,clear,637190,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['clear']
Usability,"[] items;; 2518 return 0;; 2519 }; 2520 };; 2521 ; 2522 static INLINE_TEMPLATE_ARGS Int_t ReadBase(TBuffer &buf, void *start, const void *end, const TLoopConfiguration * loopconfig, const TConfiguration *config); 2523 {; 2524 // Well the implementation is non trivial since we do not have a proxy for the container of _only_ the base class. For now; 2525 // punt.; 2526 ; 2527 return GenericRead(buf,start,end,loopconfig, config);; 2528 }; 2529 ; 2530 static INLINE_TEMPLATE_ARGS Int_t GenericRead(TBuffer &buf, void *, const void *, const TLoopConfiguration * loopconf, const TConfiguration *config); 2531 {; 2532 TGenericLoopConfig *loopconfig = (TGenericLoopConfig*)loopconf;; 2533 TVirtualCollectionProxy *proxy = loopconfig->fProxy;; 2534 return ((TStreamerInfo*)config->fInfo)->ReadBuffer(buf, *proxy, &(config->fCompInfo), /*first*/ 0, /*last*/ 1, /*narr*/ proxy->Size(), config->fOffset, 1|2 );; 2535 }; 2536 ; 2537 static INLINE_TEMPLATE_ARGS Int_t GenericWrite(TBuffer &buf, void *, const void *, const TLoopConfiguration * loopconf, const TConfiguration *config); 2538 {; 2539 TGenericLoopConfig *loopconfig = (TGenericLoopConfig*)loopconf;; 2540 TVirtualCollectionProxy *proxy = loopconfig->fProxy;; 2541 return ((TStreamerInfo*)config->fInfo)->WriteBufferAux(buf, *proxy, &(config->fCompInfo), /*first*/ 0, /*last*/ 1, proxy->Size(), config->fOffset, 1|2 );; 2542 }; 2543 ; 2544 template <typename T>; 2545 static INLINE_TEMPLATE_ARGS void SimpleRead(TBuffer &buf, void *addr); 2546 {; 2547 buf >> *(T*)addr;; 2548 }; 2549 ; 2550 static INLINE_TEMPLATE_ARGS void SimpleReadFloat16(TBuffer &buf, void *addr); 2551 {; 2552 buf.ReadWithNbits((float*)addr,12);; 2553 }; 2554 ; 2555 static INLINE_TEMPLATE_ARGS void SimpleReadDouble32(TBuffer &buf, void *addr); 2556 {; 2557 //we read a float and convert it to double; 2558 Float_t afloat;; 2559 buf >> afloat;; 2560 *(double*)addr = (Double_t)afloat;; 2561 }; 2562 ; 2563 template <typename ActionHolder>; 2564 static INLINE_TEMPLATE_ARGS Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:103222,Simpl,SimpleRead,103222,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Simpl'],['SimpleRead']
Usability,"[i-1] = grdnew;; 4265 if (fGstep[i-1] > 0) fGstep[i-1] = TMath::Abs(d);; 4266 else fGstep[i-1] = -TMath::Abs(d);; 4267// decrease step until first derivative changes by <5%; 4268 if (change < .05) goto L60;; 4269 if (TMath::Abs(grdold - grdnew) < dgmin) goto L60;; 4270 if (d < dmin_) {; 4271 mnwarn(""D"", ""MNHES1"", ""Step size too small for 1st drv."");; 4272 goto L60;; 4273 }; 4274 d *= .2;; 4275 }; 4276// loop satisfied = too many iter; 4277 mnwarn(""D"", ""MNHES1"", TString::Format(""Too many iterations on D1.%g%g"",grdold,grdnew));; 4278L60:; 4279 fDgrd[i-1] = TMath::Max(dgmin,TMath::Abs(grdold - grdnew));; 4280 }; 4281// end of first deriv. loop; 4282 mninex(fX);; 4283}; 4284 ; 4285////////////////////////////////////////////////////////////////////////////////; 4286/// Attempts to improve on a good local minimum; 4287///; 4288/// Attempts to improve on a good local minimum by finding a; 4289/// better one. The quadratic part of FCN is removed by MNCALF; 4290/// and this transformed function is minimised using the simplex; 4291/// method from several random starting points.; 4292///; 4293/// ref. -- Goldstein and Price, Math.Comp. 25, 569 (1971); 4294 ; 4295void TMinuit::mnimpr(); 4296{; 4297 /* Initialized data */; 4298 ; 4299 Double_t rnum = 0;; 4300 ; 4301 /* Local variables */; 4302 Double_t amax, ycalf, ystar, ystst;; 4303 Double_t pb, ep, wg, xi, sigsav, reg, sig2;; 4304 Int_t npfn, ndex, loop=0, i, j, ifail, iseed=0;; 4305 Int_t jhold, nloop, nparx, nparp1, jh, jl, iswtr;; 4306 ; 4307 if (fNpar <= 0) return;; 4308 if (fAmin == fUndefi) mnamin();; 4309 fCstatu = ""UNCHANGED "";; 4310 fItaur = 1;; 4311 fEpsi = fUp*.1;; 4312 npfn = fNfcn;; 4313 nloop = Int_t(fWord7[1]);; 4314 if (nloop <= 0) nloop = fNpar + 4;; 4315 nparx = fNpar;; 4316 nparp1 = fNpar + 1;; 4317 wg = 1 / Double_t(fNpar);; 4318 sigsav = fEDM;; 4319 fApsi = fAmin;; 4320 iswtr = fISW[4] - 2*fItaur;; 4321 for (i = 1; i <= fNpar; ++i) {; 4322 fXt[i-1] = fX[i-1];; 4323 fIMPRdsav[i-1] = fWerr[i-1];; 4324 for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:143887,simpl,simplex,143887,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['simpl'],['simplex']
Usability,"[type] syntax, all variables are assumed to be of type ""F"".; If the filename ends with extensions .csv or .CSV and a delimiter is; not specified (besides ' '), the delimiter is automatically set to ','. Lines in the input file starting with ""#"" are ignored.; This function will read and ignore any whitespace characters; (this includes blank spaces and the newline and tab characters).; Handles newlines specified with '\n', '\r', or ""\r\n"". A TBranch object is created for each variable in the expression.; The total number of rows read from the file is returned. FILLING a TTree WITH MULTIPLE INPUT TEXT FILES. To fill a TTree with multiple input text files, proceed as indicated above; for the first input file and omit the second argument for subsequent calls; T.ReadFile(""file1.dat"",""branch descriptor"");; T.ReadFile(""file2.dat"");. char GetNewlineValue(istream& inputStream); Determine which newline this file is using. Long64_t ReadStream(istream& inputStream, const char* branchDescriptor = """", char delimiter = ' '); Create or simply read branches from an input stream. See reference information for TTree::ReadFile. void RecursiveRemove(TObject* obj); Make sure that obj (which is being deleted or will soon be) is no; longer referenced by this TTree. void Refresh(); Refresh contents of this tree and its branches from the current status on disk. One can call this function in case the tree file is being; updated by another process. void RemoveFriend(TTree* ); Remove a friend from the list of friends. void Reset(Option_t* option = """"); Reset baskets, buffers and entries count in all branches and leaves. void ResetAfterMerge(TFileMergeInfo* ); Resets the state of this TTree after a merge (keep the customization but; forget the data). void ResetBranchAddress(TBranch* ); Tell all of our branches to set their addresses to zero. Note: If any of our branches own any objects, they are deleted. void ResetBranchAddresses(); Tell all of our branches to drop their current objects and alloca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:118847,simpl,simply,118847,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,1,['simpl'],['simply']
Usability,"[type] syntax, all variables are assumed to be of type ""F"".; If the filename ends with extensions .csv or .CSV and a delimiter is; not specified (besides ' '), the delimiter is automatically set to ','. Lines in the input file starting with ""#"" are ignored.; This function will read and ignore any whitespace characters; (this includes blank spaces and the newline and tab characters).; Handles newlines specified with '\n', '\r', or ""\r\n"". A TBranch object is created for each variable in the expression.; The total number of rows read from the file is returned. FILLING a TTree WITH MULTIPLE INPUT TEXT FILES. To fill a TTree with multiple input text files, proceed as indicated above; for the first input file and omit the second argument for subsequent calls; T.ReadFile(""file1.dat"",""branch descriptor"");; T.ReadFile(""file2.dat"");. char GetNewlineValue(istream& inputStream); Determine which newline this file is using. Long64_t ReadStream(istream& inputStream, const char* branchDescriptor = """", char delimiter = ' '); Create or simply read branches from an input stream. See reference information for TTree::ReadFile. void RecursiveRemove(TObject* obj); Make sure that obj (which is being deleted or will soon be) is no; longer referenced by this TTree. void Refresh(); Refresh contents of this tree and its branches from the current status on disk. One can call this function in case the tree file is being; updated by another process. void RemoveFriend(TTree* ); Remove a friend from the list of friends. void Reset(Option_t* option = """"); Reset baskets, buffers and entries count in all branches and leaves. void ResetBranchAddress(TBranch* ); Tell all of our branches to set their addresses to zero. Note: If any of our branches own any objects, they are deleted. void ResetBranchAddresses(); Tell all of our branches to drop their current objects and allocate new ones. Long64_t Scan(const char* varexp = """", const char* selection = """", Option_t* option = """", Long64_t nentries = 100000000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTree.html:116842,simpl,simply,116842,root/html530/TTree.html,https://root.cern,https://root.cern/root/html530/TTree.html,1,['simpl'],['simply']
Usability,"[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfGetterName! buffer for name of getter method; TStringfSetterName! buffer for name of setter method; TXMLSetupfXmlSetup! buffer for xml names convertion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLPlayer.html:10247,simpl,simple,10247,root/html528/TXMLPlayer.html,https://root.cern,https://root.cern/root/html528/TXMLPlayer.html,4,['simpl'],['simple']
Usability,"\f$\chi^2\f$ distribution with \f$r\f$; 36 degrees of freedom and the noon-central parameter \f$\lambda\f$; 37 ; 38 \f[ p_r(x) = \frac{1}{\Gamma(r/2) 2^{r/2}} x^{r/2-1} e^{-x/2} \f]; 39 ; 40 for \f$x \geq 0\f$.; 41 For detailed description see; 42 <A HREF=""http://mathworld.wolfram.com/NoncentralChi-SquaredDistribution.html"">; 43 Mathworld</A>.; 44 ; 45 @ingroup PdfFunc; 46 ; 47 */; 48 ; 49 double noncentral_chisquared_pdf(double x, double r, double lambda);; 50 ; 51 } //end namespace Math; 52} // end namespace ROOT; 53 ; 54 ; 55// make a fake class to auto-load functions from MathMore; 56 ; 57namespace ROOT {; 58 namespace Math {; 59 ; 60 class MathMoreLib {; 61 ; 62 public:; 63 ; 64 // adding this method with force the auto-loading of the library; 65 static void Load();; 66 };; 67 ; 68 typedef MathMoreLib MathMoreLibrary; ; 69 }; 70 ; 71}; 72 ; 73 ; 74 ; 75#endif // ROOT_Math_PdfFuncMathMore; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; ROOT::Math::MathMoreLibDefinition PdfFuncMathMore.h:60; ROOT::Math::MathMoreLib::Loadstatic void Load()Definition PdfFuncMathMore.cxx:73; ROOT::Math::noncentral_chisquared_pdfdouble noncentral_chisquared_pdf(double x, double r, double lambda)Probability density function of the non central distribution with degrees of freedom and the noon-c...Definition PdfFuncMathMore.cxx:22; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::MathMoreLibraryMathMoreLib MathMoreLibraryDefinition PdfFuncMathMore.h:68; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathmoreincMathPdfFuncMathMore.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/PdfFuncMathMore_8h_source.html:3451,Guid,Guide,3451,doc/master/PdfFuncMathMore_8h_source.html,https://root.cern,https://root.cern/doc/master/PdfFuncMathMore_8h_source.html,1,['Guid'],['Guide']
Usability,"\f]; 367 with \f$\lambda = (x-x_0)/\xi\f$. For a detailed description see; 368 K.S. K&ouml;lbig and B. Schorr, A program package for the Landau distribution,; 369 <A HREF=""http://dx.doi.org/10.1016/0010-4655(84)90085-7"">Computer Phys. Comm. 31 (1984) 97-111</A>; 370 <A HREF=""http://dx.doi.org/10.1016/j.cpc.2008.03.002"">[Erratum-ibid. 178 (2008) 972]</A>.; 371 The same algorithms as in; 372 <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g110/top.html"">; 373 CERNLIB</A> (DISLAN) is used.; 374 ; 375 @param x The argument \f$x\f$; 376 @param xi The width parameter \f$\xi\f$; 377 @param x0 The location parameter \f$x_0\f$; 378 ; 379 @ingroup ProbFunc; 380 ; 381 */; 382 ; 383 double landau_cdf(double x, double xi = 1, double x0 = 0);; 384 ; 385 /**; 386 ; 387 Complement of the distribution function of the Landau; 388 distribution (upper tail).; 389 ; 390 \f[ D(x) = \int_{x}^{+\infty} p(x) dx \f]; 391 ; 392 where p(x) is the Landau probability density function.; 393 It is implemented simply as 1. - #landau_cdf; 394 ; 395 @param x The argument \f$x\f$; 396 @param xi The width parameter \f$\xi\f$; 397 @param x0 The location parameter \f$x_0\f$; 398 ; 399 @ingroup ProbFunc; 400 ; 401 */; 402 inline double landau_cdf_c(double x, double xi = 1, double x0 = 0) {; 403 return 1. - landau_cdf(x,xi,x0);; 404 }; 405 ; 406 /**; 407 ; 408 Complement of the cumulative distribution function of the lognormal distribution; 409 (upper tail).; 410 ; 411 \f[ D(x) = \int_{x}^{+\infty} {1 \over x' \sqrt{2 \pi s^2} } e^{-(\ln{x'} - m)^2/2 s^2} dx' \f]; 412 ; 413 For detailed description see; 414 <A HREF=""http://mathworld.wolfram.com/LogNormalDistribution.html"">; 415 Mathworld</A>.; 416 ; 417 @ingroup ProbFunc; 418 ; 419 */; 420 ; 421 double lognormal_cdf_c(double x, double m, double s, double x0 = 0);; 422 ; 423 ; 424 ; 425 ; 426 /**; 427 ; 428 Cumulative distribution function of the lognormal distribution; 429 (lower tail).; 430 ; 431 \f[ D(x) = \int_{-\infty}^{x} {1 \over x' \sqr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8h_source.html:12078,simpl,simply,12078,doc/master/ProbFuncMathCore_8h_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8h_source.html,1,['simpl'],['simply']
Usability,"\theta_i^{min}\le\theta_i\le\theta^{max}_i\]; They form parallelepiped \(P\) (\(P_0\) may be deformed by \(P\)). Very similar step formulae are used in FUMILI for negative logarithm of the likelihood function with the same idea - linearization of function argument.; 5.12 Neural Networks; 5.12.1 Introduction; Neural Networks are used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are image analysis, financial movements’ predictions and analysis, or sales forecast and product shipping optimization. In particles physics neural networks are mainly used for classification tasks (signal over background discrimination). A vast majority of commonly used neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package, which remains one of the fastest tools for neural networks studies.; 5.12.2 The MLP; The multilayer perceptron is a simple feed-forward network with the following structure showed on the left. It is made of neurons characterized by a bias and weighted links in between - let’s call those links synapses. The input neurons receive the inputs, normalize them and forward them to the first hidden layer. Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers.; Such a structure is very useful because of two theorems:; 1- A linear combination of sigmoids can approximate any continuous function.; 2- Trained with output=1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X.; 5.12.3 Learning Methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrate, divided by two, of the error on each indiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:231019,simpl,simple,231019,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f was fitted in a subrange and no explicit NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""") / NormRange("""").; [#0] ERROR:Plotting -- Range 'Full' not defined for variable 'x'. Ignoring ...; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'Full'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""") / NormRange("""").; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; ; RooFitResult: minimized FCN value: 25939.4, estimated distance to minimum: 3.77183e-06; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; f 5.0441e-01 +/- 6.32e-03; mx -2.1605e-02 +/- 1.77e-02; ; ; RooFitResult: minimized FCN value: 10339.5, estimated distance to minimum: 0.000279216; covariance matrix quality: Full, accurate covarian",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf203__ranges_8py.html:4153,Clear,Clear,4153,doc/master/rf203__ranges_8py.html,https://root.cern,https://root.cern/doc/master/rf203__ranges_8py.html,1,['Clear'],['Clear']
Usability,"] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TVirtualProofPlayer(); { }. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). Long64_t Finalize(TQueryResult* qr). Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). void HandleGetTreeHeader(TMessage* mess). void HandleRecvHisto(TMessage* mess). void StopProcess(Bool_t abort, Int_t timeout = -1). void AddInput(TObject* inp). void ClearInput(). TObject * GetOutput(const char* name) const. TList * GetOutputList() const. TList * GetInputList() const. TList * GetListOfResults() const. void AddQueryResult(TQueryResult* q). TQueryResult * GetCurrentQuery() const. TQueryResult * GetQueryResult(const char* ref). void RemoveQueryResult(const char* ref). void SetCurrentQuery(TQueryResult* q). void SetMaxDrawQueries(Int_t max). void RestorePreviousQuery(). Int_t AddOutputObject(TObject* obj). void AddOutput(TList* out). void StoreOutput(TList* out). void StoreFeedback(TObject* slave, TList* out). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). void Progress(TProofProgressInfo* ). void Progress(TSlave* , TProofProgressInfo* ). void Feedback(TList* objs). TDrawFeedback * CreateDrawFeedback(TProof* p). void SetDrawFeedbackOption(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualProofPlayer.html:12457,Clear,ClearInput,12457,root/html528/TVirtualProofPlayer.html,https://root.cern,https://root.cern/root/html528/TVirtualProofPlayer.html,3,['Clear'],['ClearInput']
Usability,"]. Int_t TProof::Remove ; (; Int_t ; query, . Bool_t ; all = kFALSE . ). Send remove request for the qry-th query in fQueries. ; Definition at line 6013 of file TProof.cxx. ◆ RemoveChain(). void TProof::RemoveChain ; (; TChain * ; chain). Remove chain from data set. ; Definition at line 10231 of file TProof.cxx. ◆ RemoveDataSet(). Int_t TProof::RemoveDataSet ; (; const char * ; uri, . const char * ; optStr = """" . ). virtual . Remove the specified dataset from the PROOF cluster. ; Files are not deleted. ; Reimplemented in TProofLite.; Definition at line 10991 of file TProof.cxx. ◆ RemoveDynamicPath(). Int_t TProof::RemoveDynamicPath ; (; const char * ; libpath, . Bool_t ; onClient = kFALSE . ). Remove 'libpath' from the lib path search. ; Multiple paths can be specified at once separating them with a comma or a blank. Return 0 on success, -1 otherwise ; Definition at line 8933 of file TProof.cxx. ◆ RemoveFeedback(). void TProof::RemoveFeedback ; (; const char * ; name). Remove object from feedback list. ; Definition at line 10000 of file TProof.cxx. ◆ RemoveIncludePath(). Int_t TProof::RemoveIncludePath ; (; const char * ; incpath, . Bool_t ; onClient = kFALSE . ). Remove 'incpath' from the inc path search. ; Multiple paths can be specified at once separating them with a comma or a blank. Return 0 on success, -1 otherwise ; Definition at line 8967 of file TProof.cxx. ◆ RemoveWorkers(). Int_t TProof::RemoveWorkers ; (; TList * ; workerList). protected . Used for shuting down the workres after a query is finished. ; Sends each of the workers from the workerList, a kPROOF_STOP message. If the workerList == 0, shutdown all the workers. ; Definition at line 1597 of file TProof.cxx. ◆ RequestStagingDataSet(). Bool_t TProof::RequestStagingDataSet ; (; const char * ; dataset). virtual . Allows users to request staging of a particular dataset. ; Requests are saved in a special dataset repository and must be honored by the endpoint. ; Reimplemented in TProofLite.; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:132727,feedback,feedback,132727,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['feedback'],['feedback']
Usability,"];; 3515 if (evalErrorList.second.size() >= 2048) {; 3516 // avoid overflowing the error list, so if there are very many, print; 3517 // the oldest one first, and pop it off the list; 3518 const EvalError& oee = evalErrorList.second.front();; 3519 // print to debug stream, since these would normally be suppressed, and; 3520 // we do not want to increase the error count in the message service...; 3521 ccoutD(Eval) << ""RooAbsReal::logEvalError("" << GetName(); 3522 << "") delayed evaluation error, "" << std::endl; 3523 << "" origin : "" << oss2.str() << std::endl; 3524 << "" message : "" << oee._msg << std::endl; 3525 << "" server values: "" << oee._srvval << std::endl ;; 3526 evalErrorList.second.pop_front();; 3527 }; 3528 evalErrorList.first = oss2.str() ;; 3529 evalErrorList.second.push_back(ee) ;; 3530 }; 3531 ; 3532 inLogEvalError = false ;; 3533 //coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;; 3534}; 3535 ; 3536 ; 3537 ; 3538 ; 3539////////////////////////////////////////////////////////////////////////////////; 3540/// Clear the stack of evaluation error messages; 3541 ; 3542void RooAbsReal::clearEvalErrorLog(); 3543{; 3544 if (evalErrorData().mode == PrintErrors) {; 3545 return ;; 3546 } else if (evalErrorData().mode == CollectErrors) {; 3547 evalErrorData().errorList.clear() ;; 3548 } else {; 3549 evalErrorData().count = 0 ;; 3550 }; 3551}; 3552 ; 3553 ; 3554////////////////////////////////////////////////////////////////////////////////; 3555/// Retrieve bin boundaries if this distribution is binned in `obs`.; 3556/// \param[in] obs Observable to retrieve boundaries for.; 3557/// \param[in] xlo Beginning of range.; 3558/// \param[in] xhi End of range.; 3559/// \return The caller owns the returned std::list.; 3560std::list<double>* RooAbsReal::binBoundaries(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3561 return nullptr;; 3562}; 3563 ; 3564 ; 3565//////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:151354,Clear,Clear,151354,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,2,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"]ematrixoutput histogram ; [in]sourceidentifier of the background source ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result arising from the background source source and the uncorrelated (background histogram uncertainties). Also see method SubtractBackground() ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1229 of file TUnfoldSys.cxx. ◆ GetEmatrixSysSource(). void TUnfoldSys::GetEmatrixSysSource ; (; TH2 * ; ematrix, . const char * ; name, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance contribution from a systematic variation of the response matrix ; Parameters. [in,out]ematrixcovariance matrix histogram ; [in]nameidentifier of the systematic variation ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram prior to adding the covariance matrix contribution. Returns the covariance matrix contribution from shifting the given uncertainty source within one sigma ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1113 of file TUnfoldSys.cxx. ◆ GetEmatrixSysTau(). void TUnfoldSys::GetEmatrixSysTau ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance matrix contribution from error on regularisation parameter ; Parameters. [in,out]ematrixoutput histogram ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result from the assigned uncertainty on the parameter tau, see method SetTauError(). ; the array binMap is explaine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:40522,clear,clearEmat,40522,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,2,['clear'],"['clear', 'clearEmat']"
Usability,"^{(n-1)}; \]. since this is a really fast method, with no rounding errors (please refer to CERN 72-21 pp. 54-106).; The data is stored internally in a TVectorD, in the following way:. \[; \mathbf{x} = \left[\left(x_{0_0},\ldots,x_{{P-1}_0}\right),\ldots,; \left(x_{0_i},\ldots,x_{{P-1}_i}\right), \ldots\right]; \]. With \(P\) as defined in the class description. ; Definition at line 414 of file TPrincipal.cxx. ◆ Browse(). void TPrincipal::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TPrincipal object in the TBrowser. ; Reimplemented from TObject.; Definition at line 471 of file TPrincipal.cxx. ◆ Class(). static TClass * TPrincipal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPrincipal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPrincipal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 79 of file TPrincipal.h. ◆ Clear(). void TPrincipal::Clear ; (; Option_t * ; opt = """"). overridevirtual . Clear the data in Object. ; Notice, that's not possible to change the dimension of the original data. ; Reimplemented from TNamed.; Definition at line 494 of file TPrincipal.cxx. ◆ DeclFileName(). static const char * TPrincipal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 79 of file TPrincipal.h. ◆ GetCovarianceMatrix(). const TMatrixD * TPrincipal::GetCovarianceMatrix ; (; ); const. inline . Return the covariance matrix. ; NoteOnly the lower diagonal of the covariance matrix is computed by the class ; Definition at line 60 of file TPrincipal.h. ◆ GetEigenValues(). const TVectorD * TPrincipal::GetEigenValues ; (; ); const. inline . Definition at line 61 of file TPrincipal.h. ◆ GetEigenVectors(). const TMatrixD * TPrincipal::GetEigenVectors ; (; ); const. inline . Definition at line 62 of file TPrincipal.h. ◆ GetHistograms(). TList * TPrincipa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPrincipal.html:24200,Clear,Clear,24200,doc/master/classTPrincipal.html,https://root.cern,https://root.cern/doc/master/classTPrincipal.html,1,['Clear'],['Clear']
Usability,"_4_k, &op_4_alpha, tensor_dense_2kernel0, &op_4_ldb, tensor_dense_1Relu0, &op_4_lda, &op_4_beta, tensor_dense_2Dense, &op_4_n);; ; //------ RELU; for (int id = 0; id < 64 ; id++){; tensor_dense_2Relu0[id] = ((tensor_dense_2Dense[id] > 0 )? tensor_dense_2Dense[id] : 0);; }; ; //--------- Gemm; char op_6_transA = 'n';; char op_6_transB = 'n';; int op_6_m = 1;; int op_6_n = 64;; int op_6_k = 64;; float op_6_alpha = 1;; float op_6_beta = 1;; int op_6_lda = 64;; int op_6_ldb = 64;; std::copy(tensor_dense_3bias0bcast, tensor_dense_3bias0bcast + 64, tensor_dense_3Dense);; BLAS::sgemm_(&op_6_transB, &op_6_transA, &op_6_n, &op_6_m, &op_6_k, &op_6_alpha, tensor_dense_3kernel0, &op_6_ldb, tensor_dense_2Relu0, &op_6_lda, &op_6_beta, tensor_dense_3Dense, &op_6_n);; ; //------ RELU; for (int id = 0; id < 64 ; id++){; tensor_dense_3Relu0[id] = ((tensor_dense_3Dense[id] > 0 )? tensor_dense_3Dense[id] : 0);; }; ; //--------- Gemm; char op_8_transA = 'n';; char op_8_transB = 'n';; int op_8_m = 1;; int op_8_n = 2;; int op_8_k = 64;; float op_8_alpha = 1;; float op_8_beta = 1;; int op_8_lda = 64;; int op_8_ldb = 2;; std::copy(tensor_dense_4bias0bcast, tensor_dense_4bias0bcast + 2, tensor_dense_4Dense);; BLAS::sgemm_(&op_8_transB, &op_8_transA, &op_8_n, &op_8_m, &op_8_k, &op_8_alpha, tensor_dense_4kernel0, &op_8_ldb, tensor_dense_3Relu0, &op_8_lda, &op_8_beta, tensor_dense_4Dense, &op_8_n);; for (int id = 0; id < 2 ; id++){; tensor_dense_4Sigmoid0[id] = 1 / (1 + std::exp( - tensor_dense_4Dense[id]));; }; return fTensor_dense_4Sigmoid0;; }; }; // end of Session; } //TMVA_SOFIE_Higgs_trained_model; ; #endif // ROOT_TMVA_SOFIE_HIGGS_TRAINED_MODEL; TF/Keras Version: 2.13.0; compiling SOFIE model and functor....; Number of signal entries 10000.0; Number of background entries 10000.0; AuthorLorenzo Moneta ; Definition in file TMVA_SOFIE_RDataFrame.py. tutorialstmvaTMVA_SOFIE_RDataFrame.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__SOFIE__RDataFrame_8py.html:18395,Guid,Guide,18395,doc/master/TMVA__SOFIE__RDataFrame_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__SOFIE__RDataFrame_8py.html,1,['Guid'],['Guide']
Usability,"_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""10|30"" [The Layout of the input]; : Layout: ""LSTM|10|30|10|0|1,RESHAPE|FLAT,DENSE|64|TANH,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : RandomSeed: ""1234"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""0.2"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,WeightDecay=1e-2,Regularization=None,MaxEpochs=10Optimizer=ADAM,DropConfig=0.0+0.+0.+0."" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : Will now use the CPU architecture with BLAS and IMT support !; Factory : Booking method: ␛[1mTMVA_DNN␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:RandomSeed=0:InputLayout=1|1|300:Layout=DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:3013,Learn,LearningRate,3013,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Learn'],['LearningRate']
Usability,"_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""10|30"" [The Layout of the input]; : Layout: ""LSTM|10|30|10|0|1,RESHAPE|FLAT,DENSE|64|TANH,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : RandomSeed: ""1234"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""0.2"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,WeightDecay=1e-2,Regularization=None,MaxEpochs=20,Optimizer=ADAM,DropConfig=0.0+0.+0.+0."" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : Will now use the CPU architecture with BLAS and IMT support !; Factory : Booking method: ␛[1mTMVA_DNN␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:RandomSeed=0:InputLayout=1|1|300:Layout=DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=10,BatchSize=256,TestRepetitions=1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:7548,Learn,LearningRate,7548,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,_BATCH = kFALSE. staticprivate . debug flags ; Definition at line 217 of file MethodMLP.h. ◆ fgPRINT_ESTIMATOR_INC. const Int_t TMVA::MethodMLP::fgPRINT_ESTIMATOR_INC = 10. staticprivate . debug flags ; Definition at line 215 of file MethodMLP.h. ◆ fgPRINT_SEQ. const Bool_t TMVA::MethodMLP::fgPRINT_SEQ = kFALSE. staticprivate . debug flags ; Definition at line 216 of file MethodMLP.h. ◆ fLastAlpha. Double_t TMVA::MethodMLP::fLastAlpha. private . line search variable ; Definition at line 183 of file MethodMLP.h. ◆ fLearnRate. Double_t TMVA::MethodMLP::fLearnRate. private . learning rate for synapse weight adjustments ; Definition at line 188 of file MethodMLP.h. ◆ fPrior. Double_t TMVA::MethodMLP::fPrior. private . zjh ; Definition at line 166 of file MethodMLP.h. ◆ fPriorDev. std::vector<Double_t> TMVA::MethodMLP::fPriorDev. private . zjh ; Definition at line 167 of file MethodMLP.h. ◆ fResetStep. Int_t TMVA::MethodMLP::fResetStep. private . reset time (how often we clear hessian matrix) ; Definition at line 185 of file MethodMLP.h. ◆ fSamplingEpoch. Float_t TMVA::MethodMLP::fSamplingEpoch. private . fraction of epochs where sampling is used ; Definition at line 177 of file MethodMLP.h. ◆ fSamplingFraction. Float_t TMVA::MethodMLP::fSamplingFraction. private . fraction of events which is sampled for training ; Definition at line 176 of file MethodMLP.h. ◆ fSamplingTesting. Bool_t TMVA::MethodMLP::fSamplingTesting. private . The testing sample is sampled. ; Definition at line 180 of file MethodMLP.h. ◆ fSamplingTraining. Bool_t TMVA::MethodMLP::fSamplingTraining. private . The training sample is sampled. ; Definition at line 179 of file MethodMLP.h. ◆ fSamplingWeight. Float_t TMVA::MethodMLP::fSamplingWeight. private . changing factor for event weights when sampling is turned on ; Definition at line 178 of file MethodMLP.h. ◆ fTau. Double_t TMVA::MethodMLP::fTau. private . line search variable ; Definition at line 184 of file MethodMLP.h. ◆ fTestRate. Int_t TMVA::Meth,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:52620,clear,clear,52620,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['clear'],['clear']
Usability,"_CELLSPACING_FLAT   0;  ; #define DFLT_HSPACE   0;  ; #define DFLT_VSPACE   0;  ; #define MAX(A, B)   ((A) < (B) ? (B) : (A));  ; #define N   (HTML_MAX_COLUMNS+1);  ; #define SETMAX(A, B)   if ((A) < (B)) { (A) = (B); };  ; #define VAlign_Baseline   4;  ; #define VAlign_Bottom   2;  ; #define VAlign_Center   3;  ; #define VAlign_Top   1;  ; #define VAlign_Unknown   0;  . Macro Definition Documentation. ◆ ColMin. #define ColMin; (;  ; A, .  ; B . );    colMin[(A)-1][(B)-1]. ◆ ColReq. #define ColReq; (;  ; A, .  ; B . );    colMin[(B)-1][(A)-1]. ◆ DFLT_BORDER. #define DFLT_BORDER   0. Definition at line 38 of file TGHtmlTable.cxx. ◆ DFLT_CELLPADDING. #define DFLT_CELLPADDING   2. Definition at line 41 of file TGHtmlTable.cxx. ◆ DFLT_CELLSPACING_3D. #define DFLT_CELLSPACING_3D   5. Definition at line 39 of file TGHtmlTable.cxx. ◆ DFLT_CELLSPACING_FLAT. #define DFLT_CELLSPACING_FLAT   0. Definition at line 40 of file TGHtmlTable.cxx. ◆ DFLT_HSPACE. #define DFLT_HSPACE   0. Definition at line 42 of file TGHtmlTable.cxx. ◆ DFLT_VSPACE. #define DFLT_VSPACE   0. Definition at line 43 of file TGHtmlTable.cxx. ◆ MAX. #define MAX; (;  ; A, .  ; B . );    ((A) < (B) ? (B) : (A)). Definition at line 47 of file TGHtmlTable.cxx. ◆ N. #define N   (HTML_MAX_COLUMNS+1). ◆ SETMAX. #define SETMAX; (;  ; A, .  ; B . );    if ((A) < (B)) { (A) = (B); }. Definition at line 46 of file TGHtmlTable.cxx. ◆ VAlign_Baseline. #define VAlign_Baseline   4. Definition at line 1085 of file TGHtmlTable.cxx. ◆ VAlign_Bottom. #define VAlign_Bottom   2. Definition at line 1083 of file TGHtmlTable.cxx. ◆ VAlign_Center. #define VAlign_Center   3. Definition at line 1084 of file TGHtmlTable.cxx. ◆ VAlign_Top. #define VAlign_Top   1. Definition at line 1082 of file TGHtmlTable.cxx. ◆ VAlign_Unknown. #define VAlign_Unknown   0. Definition at line 1081 of file TGHtmlTable.cxx. guiguihtmlsrcTGHtmlTable.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGHtmlTable_8cxx.html:2564,Guid,Guide,2564,doc/master/TGHtmlTable_8cxx.html,https://root.cern,https://root.cern/doc/master/TGHtmlTable_8cxx.html,1,['Guid'],['Guide']
Usability,"_FactoryCopy(TypeInfo_t *) const finalTClingvirtual; TypeInfo_Init(TypeInfo_t *tinfo, const char *funcname) const finalTClingvirtual; TypeInfo_IsValid(TypeInfo_t *tinfo) const finalTClingvirtual; TypeInfo_Name(TypeInfo_t *) const finalTClingvirtual; TypeInfo_Property(TypeInfo_t *tinfo) const finalTClingvirtual; TypeInfo_QualTypePtr(TypeInfo_t *tinfo) constTClingvirtual; TypeInfo_RefType(TypeInfo_t *) const finalTClingvirtual; TypeInfo_Size(TypeInfo_t *tinfo) const finalTClingvirtual; TypeInfo_TrueName(TypeInfo_t *tinfo) const finalTClingvirtual; TypeName(const char *typeDesc) finalTClingvirtual; UnloadAllSharedLibraryMaps() finalTClingvirtual; UnloadFile(const char *path) const finalTClingvirtual; UnloadLibraryMap(const char *library) finalTClingvirtual; UnRegisterTClassUpdate(const TClass *oldcl) finalTClingvirtual; UpdateAllCanvases()TClingstatic; UpdateClassInfo(char *name, Long_t tagnum)TClingstatic; UpdateClassInfoWithDecl(const clang::NamedDecl *ND)TCling; UpdateClassInfoWork(const char *name)TClingstatic; UpdateEnumConstants(TEnum *enumObj, TClass *cl) const finalTClingvirtual; UpdateListOfDataMembers(TClass *cl) constTCling; UpdateListOfGlobalFunctions() finalTClingvirtual; UpdateListOfGlobals() finalTClingvirtual; UpdateListOfLoadedSharedLibraries()TClingprivate; UpdateListOfMethods(TClass *cl) const finalTClingvirtual; UpdateListOfTypes() finalTClingvirtual; UpdateListsOnCommitted(const cling::Transaction &T)TCling; UpdateListsOnUnloaded(const cling::Transaction &T)TCling; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TCling()TClingvirtual; ~TInterpreter()TInterpreterinlinevirtual; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling-members.html:34744,Guid,Guide,34744,doc/master/classTCling-members.html,https://root.cern,https://root.cern/doc/master/classTCling-members.html,1,['Guid'],['Guide']
Usability,"_LSTM.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: TMVA_DNN for Classification; : ; : Start of deep neural network training on CPU using MT, nthreads = 4; : ; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 300 ) Batch size = 256 Loss function = C; Layer 0 DENSE Layer: ( Input = 300 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 256 , 1 ) Activation Function = Identity; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.7616; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.731202 0.712689 0.193045 0.0157486 14439.1 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.701214 0.698536 0.191577 0.0154545 14535.3 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.6901 0.69615 0.192163 0.0158037 14515.8 0; : 4 | 0.683586 0.700826 0.19294 0.0151654 14400.2 1; : 5 | 0.682085 0.701998 0.192893 0.0153949 14422.7 2; : 6 | 0.6867 0.696275 0.191869 0.0152227 14492.2 3; : 7 Minimum Test error found - save the configuration ; : 7 | 0.692231 0.691692 0.197632 0.0164904 14132.6 0; : 8 | 0.683383 0.694963 0.194299 0.0156318 14328.3 1; : 9 Minimum Test error found - save the configuration",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:18734,Learn,Learning,18734,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Learn'],['Learning']
Usability,"_LSTM.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: TMVA_DNN for Classification; : ; : Start of deep neural network training on CPU using MT, nthreads = 4; : ; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 300 ) Batch size = 256 Loss function = C; Layer 0 DENSE Layer: ( Input = 300 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 256 , 1 ) Activation Function = Identity; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.805395; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.725372 0.686272 0.190597 0.0152439 14599.1 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.695636 0.683324 0.189128 0.015082 14708.8 0; : 3 | 0.691864 0.689576 0.189646 0.0148842 14648.6 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.689168 0.677551 0.190642 0.015026 14577.3 0; : 5 | 0.686885 0.678678 0.189865 0.0148775 14629.7 1; : 6 | 0.68905 0.681357 0.189104 0.014885 14694.1 2; : 7 | 0.687138 0.683485 0.19023 0.0152893 14633.6 3; : 8 | 0.686429 0.685529 0.189996 0.0147979 14612 4; : 9 | 0.685179 0.683467 0.190317 0.0152552 14623.4 5; : 10 Minimum Test error found - save the configuration",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:18069,Learn,Learning,18069,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Learn'],['Learning']
Usability,"_M_insert<const void *>(const void* __v); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::_M_insert<double>(double __v); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::_M_insert<long double>(long double __v); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::_M_insert<long long>(Long64_t __v); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::_M_insert<long>(long __v); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::_M_insert<unsigned long long>(ULong64_t __v); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::_M_insert<unsigned long>(unsigned long __v); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTGTextView::Copy(TObject&) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGView::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGTextView::DrawRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); static FontStruct_tTGTextView::GetDefaultFontStruct(); static const TGGC&TGTextView::GetDefaultGC(); static const TGGC&TGTextView::GetDefaultSelectedBackgroundGC(); static const TGGC&TGTextView::GetDefaultSelectedGC(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGTextViewostream.html:25657,Clear,ClearFlags,25657,root/html604/TGTextViewostream.html,https://root.cern,https://root.cern/root/html604/TGTextViewostream.html,1,['Clear'],['ClearFlags']
Usability,"_StreamerNVirtual_b). inline . Definition at line 81 of file TNetFile.h. ◆ SysClose(). Int_t TNetFile::SysClose ; (; Int_t ; fd). overrideprotectedvirtual . Close currently open file. ; Reimplemented from TFile.; Definition at line 144 of file TNetFile.cxx. ◆ SysOpen(). Int_t TNetFile::SysOpen ; (; const char * ; pathname, . Int_t ; flags, . UInt_t ; mode . ). overrideprotectedvirtual . Open a remote file. Requires fOption to be set correctly. ; Reimplemented from TFile.; Definition at line 109 of file TNetFile.cxx. ◆ SysStat(). Int_t TNetFile::SysStat ; (; Int_t ; fd, . Long_t * ; id, . Long64_t * ; size, . Long_t * ; flags, . Long_t * ; modtime . ). overrideprotectedvirtual . Return file stat information. ; The interface and return value is identical to TSystem::GetPathInfo(). ; Reimplemented from TFile.; Definition at line 156 of file TNetFile.cxx. ◆ WriteBuffer(). Bool_t TNetFile::WriteBuffer ; (; const char * ; buf, . Int_t ; len . ). overridevirtual . Write specified byte range to remote file via rootd daemon. ; Returns kTRUE in case of error. ; Reimplemented from TFile.; Definition at line 488 of file TNetFile.cxx. Member Data Documentation. ◆ fEndpointUrl. TUrl TNetFile::fEndpointUrl. protected . Definition at line 37 of file TNetFile.h. ◆ fErrorCode. Int_t TNetFile::fErrorCode. protected . Definition at line 41 of file TNetFile.h. ◆ fNetopt. Int_t TNetFile::fNetopt. protected . Definition at line 42 of file TNetFile.h. ◆ fProtocol. Int_t TNetFile::fProtocol. protected . Definition at line 40 of file TNetFile.h. ◆ fSocket. TSocket* TNetFile::fSocket. protected . Definition at line 39 of file TNetFile.h. ◆ fUser. TString TNetFile::fUser. protected . Definition at line 38 of file TNetFile.h. Libraries for TNetFile:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TNetFile.h; net/net/src/TNetFile.cxx. TNetFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFile.html:53232,Guid,Guide,53232,doc/master/classTNetFile.html,https://root.cern,https://root.cern/doc/master/classTNetFile.html,1,['Guid'],['Guide']
Usability,_Version ();  ; static const char * DeclFileName ();  ; static EParUnzipMode GetParallelUnzip ();  Static function that returns the parallel option (to indicate an additional thread) ;  ; static bool IsParallelUnzip ();  Static function that tells wether the multithreading unzipping is activated. ;  ; static Int_t SetParallelUnzip (TTreeCacheUnzip::EParUnzipMode option=TTreeCacheUnzip::kEnable);  Static function that (de)activates multithreading unzipping. ;  ; static void SetUnzipRelBufferSize (Float_t relbufferSize);  static function: Sets the unzip relative buffer size ;  ;  Static Public Member Functions inherited from TTreeCache; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetLearnEntries ();  Static function returning the number of entries used to train the cache see SetLearnEntries. ;  ; static void SetLearnEntries (Int_t n=10);  Static function to set the number of entries to be used in learning mode The default value for n is 10. ;  ;  Static Public Member Functions inherited from TFileCacheRead; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; typedef struct UnzipState UnzipState_t;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Attributes; bool fAsyncR,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:18120,learn,learning,18120,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,2,['learn'],['learning']
Usability,"__; 3906//; 3907// Command SHOW; 3908//; 3909 if( !strncmp(comd.Data(),""SHO"",3) ) {; 3910 Printf("" ***>SHOw <option_name>"");; 3911 Printf("" All SET XXXX commands have a corresponding SHOw XXXX command."");; 3912 Printf("" In addition, the SHOw commands listed starting here have no"");; 3913 Printf("" corresponding SET command for obvious reasons."");; 3914 ; 3915 Printf("" "");; 3916 Printf("" SHOw CORrelations"");; 3917 Printf("" Calculates and prints the parameter correlations from the"");; 3918 Printf("" error matrix."");; 3919 ; 3920 Printf("" "");; 3921 Printf("" SHOw COVariance"");; 3922 Printf("" Prints the (external) covariance (error) matrix."");; 3923 ; 3924 Printf("" "");; 3925 Printf("" SHOw EIGenvalues"");; 3926 Printf("" Calculates and prints the eigenvalues of the covariance"");; 3927 Printf("" matrix."");; 3928 ; 3929 Printf("" "");; 3930 Printf("" SHOw FCNvalue"");; 3931 Printf("" Prints the current value of FCN."");; 3932 goto L99;; 3933 }; 3934//______________________________________________________________________________; 3935//; 3936// Command SIMPLEX; 3937//; 3938 if( !strncmp(comd.Data(),""SIM"",3) ) {; 3939 Printf("" ***>SIMplex [maxcalls] [tolerance]"");; 3940 Printf("" Performs a function minimization using the simplex method of"");; 3941 Printf("" Nelder and Mead. Minimization terminates either when the"");; 3942 Printf("" function has been called (approximately) [maxcalls] times,"");; 3943 Printf("" or when the estimated vertical distance to minimum (EDM) is"");; 3944 Printf("" less than [tolerance]."");; 3945 Printf("" The default value of [tolerance] is 0.1*UP(see SET ERRordef)."");; 3946 goto L99;; 3947 }; 3948//______________________________________________________________________________; 3949//; 3950// Command STANDARD; 3951//; 3952 if( !strncmp(comd.Data(),""STA"",3) ) {; 3953 Printf("" ***>STAndard"");; 3954 goto L99;; 3955 }; 3956//______________________________________________________________________________; 3957//; 3958// Command STOP; 3959//; 3960 if( !strncmp(comd.Data(),""STO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:132318,SIMPL,SIMPLEX,132318,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['SIMPL'],['SIMPLEX']
Usability,"_____________________; void SavePicture(const char *name, TObject *objcanvas, TObject *objvol, Int_t iaxis, Double_t step); {; TCanvas *c = (TCanvas*)objcanvas;; TGeoVolume *vol = (TGeoVolume*)objvol;; if (!c || !vol) return;; c->cd();; TString fname;; if (iaxis == 0); fname.Form(""t_%s.gif"",name);; else if (step == 0); fname.Form(""t_%sdiv%s.gif"", name, vol->GetShape()->GetAxisName(iaxis));; else; fname.Form(""t_%sdivstep%s.gif"", name, vol->GetShape()->GetAxisName(iaxis));; ; c->Print(fname.Data());; }; ; //______________________________________________________________________________; Int_t randomColor(); {; Double_t color = 7.*gRandom->Rndm();; return (1+Int_t(color));; }; ; //______________________________________________________________________________; void raytrace() {; raytracing = !raytracing;; if (gGeoManager && gPad) {; auto top = gGeoManager->GetTopVolume();; bool drawn = gPad->GetListOfPrimitives()->FindObject(top);; if (drawn) top->SetVisRaytrace(raytracing);; gPad->Modified();; gPad->Update();; }; }; ; //______________________________________________________________________________; void help() {; ; auto c =(TCanvas *) gROOT->GetListOfCanvases()->FindObject(""geom_help"");; if (c) {; c->Clear();; c->Update();; c->cd();; } else {; c = new TCanvas(""geom_help"",""Help to run demos"",200,10,700,600);; }; ; TPaveText *welcome = new TPaveText(.1,.8,.9,.97);; welcome->AddText(""Welcome to the new geometry package"");; welcome->SetTextFont(32);; welcome->SetTextColor(4);; welcome->SetFillColor(24);; welcome->Draw();; ; TPaveText *hdemo = new TPaveText(.05,.05,.95,.7);; hdemo->SetTextAlign(12);; hdemo->SetTextFont(52);; hdemo->AddText(""- Demo for building TGeo basic shapes and simple geometry. Shape parameters are"");; hdemo->AddText("" displayed in the right pad"");; hdemo->AddText(""- Click left mouse button to execute one demo"");; hdemo->AddText(""- While pointing the mouse to the pad containing the geometry, do:"");; hdemo->AddText(""- .... click-and-move to rotate"");; hdem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/geodemo_8C.html:5413,Clear,Clear,5413,doc/master/geodemo_8C.html,https://root.cern,https://root.cern/doc/master/geodemo_8C.html,1,['Clear'],['Clear']
Usability,"_____________________________________________________; //; ; Riostream.h; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TFile.h; TFoamIntegrand.h; TFoam.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TSystem.h; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFoamIntegrandAbstract class representing n-dimensional real positive integrand function.Definition TFoamIntegrand.h:9; TFoamTFoam is the main class of the multi-dimensional general purpose Monte Carlo event generator (integra...Definition TFoam.h:21; TFoam::CheckAllvirtual void CheckAll(Int_t)User utility, miscellaneous and debug.Definition TFoam.cxx:1380; TFoam::GetMCvectvirtual void GetMCvect(Double_t *)User may get generated MC point/vector with help of this method.Definition TFoam.cxx:1172; TFoam::MakeEventvirtual void MakeEvent()User method.Definition TFoam.cxx:1122; TFoam::GetIntegMCvirtual void GetIntegMC(Double_t &, Double_t &)User method.Definition TFoam.cxx:1207; TFoam::SetRhovirtual void SetRho(TFoamIntegrand *Rho)User may use this method to set the distribution object.Definition TFoam.cxx:1018; TFoam::Finalizevirtual void Finalize(Double_t &, Double_t &)May be called optionally by the user after the MC run.Definition TFoam.cxx:1258; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; AuthorStascek Jadach ; Definition in file foam_demopers.C. tutorialsfoamfoam_demopers.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/foam__demopers_8C.html:4478,Guid,Guide,4478,doc/master/foam__demopers_8C.html,https://root.cern,https://root.cern/doc/master/foam__demopers_8C.html,1,['Guid'],['Guide']
Usability,"______________________________________________________________________________________________; 437template <typename Architecture_t>; 438auto VGeneralLayer<Architecture_t>::UpdateWeightGradients(const std::vector<Matrix_t> &weightGradients,; 439 const Scalar_t learningRate) -> void; 440{; 441 for (size_t i = 0; i < fWeightGradients.size(); i++) {; 442 Architecture_t::ScaleAdd(fWeightGradients[i], weightGradients[i], -learningRate);; 443 }; 444}; 445 ; 446//_________________________________________________________________________________________________; 447template <typename Architecture_t>; 448auto VGeneralLayer<Architecture_t>::UpdateBiasGradients(const std::vector<Matrix_t> &biasGradients,; 449 const Scalar_t learningRate) -> void; 450{; 451 for (size_t i = 0; i < fBiasGradients.size(); i++) {; 452 Architecture_t::ScaleAdd(fBiasGradients[i], biasGradients[i], -learningRate);; 453 }; 454}; 455 ; 456//_________________________________________________________________________________________________; 457template <typename Architecture_t>; 458auto VGeneralLayer<Architecture_t>::CopyWeights(const std::vector<Matrix_t> &otherWeights) -> void; 459{; 460 ; 461 for (size_t i = 0; i < fWeights.size(); i++) {; 462 Architecture_t::Copy(fWeights[i], otherWeights[i]);; 463 }; 464}; 465 ; 466//_________________________________________________________________________________________________; 467template <typename Architecture_t>; 468auto VGeneralLayer<Architecture_t>::CopyBiases(const std::vector<Matrix_t> &otherBiases) -> void; 469{; 470 for (size_t i = 0; i < fBiases.size(); i++) {; 471 Architecture_t::Copy(fBiases[i], otherBiases[i]);; 472 }; 473}; 474 ; 475//_________________________________________________________________________________________________; 476template <typename Architecture_t>; 477template <typename Arch>; 478void VGeneralLayer<Architecture_t>::CopyParameters(const VGeneralLayer<Arch> &layer); 479{; 480 //assert(!std::is_same<Arch, Architecture_t>::value);; 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:20673,learn,learningRate,20673,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,1,['learn'],['learningRate']
Usability,"________________________________________________________________________________________________; 427template <typename Architecture_t>; 428auto VGeneralLayer<Architecture_t>::UpdateBiases(const std::vector<Matrix_t> &biasGradients,; 429 const Scalar_t learningRate) -> void; 430{; 431 for (size_t i = 0; i < fBiases.size(); i++) {; 432 Architecture_t::ScaleAdd(fBiases[i], biasGradients[i], -learningRate);; 433 }; 434}; 435 ; 436//_________________________________________________________________________________________________; 437template <typename Architecture_t>; 438auto VGeneralLayer<Architecture_t>::UpdateWeightGradients(const std::vector<Matrix_t> &weightGradients,; 439 const Scalar_t learningRate) -> void; 440{; 441 for (size_t i = 0; i < fWeightGradients.size(); i++) {; 442 Architecture_t::ScaleAdd(fWeightGradients[i], weightGradients[i], -learningRate);; 443 }; 444}; 445 ; 446//_________________________________________________________________________________________________; 447template <typename Architecture_t>; 448auto VGeneralLayer<Architecture_t>::UpdateBiasGradients(const std::vector<Matrix_t> &biasGradients,; 449 const Scalar_t learningRate) -> void; 450{; 451 for (size_t i = 0; i < fBiasGradients.size(); i++) {; 452 Architecture_t::ScaleAdd(fBiasGradients[i], biasGradients[i], -learningRate);; 453 }; 454}; 455 ; 456//_________________________________________________________________________________________________; 457template <typename Architecture_t>; 458auto VGeneralLayer<Architecture_t>::CopyWeights(const std::vector<Matrix_t> &otherWeights) -> void; 459{; 460 ; 461 for (size_t i = 0; i < fWeights.size(); i++) {; 462 Architecture_t::Copy(fWeights[i], otherWeights[i]);; 463 }; 464}; 465 ; 466//_________________________________________________________________________________________________; 467template <typename Architecture_t>; 468auto VGeneralLayer<Architecture_t>::CopyBiases(const std::vector<Matrix_t> &otherBiases) -> void; 469{; 470 for (size_t i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:20218,learn,learningRate,20218,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,2,['learn'],['learningRate']
Usability,_b). inline . Definition at line 446 of file TGButton.h. Friends And Related Symbol Documentation. ◆ TGPopupMenu. friend class TGPopupMenu. friend . Definition at line 380 of file TGButton.h. Member Data Documentation. ◆ fDefaultCursor. Cursor_t TGSplitButton::fDefaultCursor. protected . Default Cursor. ; Definition at line 403 of file TGButton.h. ◆ fEntryId. Int_t TGSplitButton::fEntryId. protected . Id of the currently active menu entry. ; Definition at line 401 of file TGButton.h. ◆ fHeighestLabel. TGString TGSplitButton::fHeighestLabel. protected . highest label that can be on the button ; Definition at line 406 of file TGButton.h. ◆ fKeyNavigate. Bool_t TGSplitButton::fKeyNavigate. protected . kTRUE if key navigation is being used ; Definition at line 404 of file TGButton.h. ◆ fMBState. EButtonState TGSplitButton::fMBState. protected . state for menu button in split mode ; Definition at line 397 of file TGButton.h. ◆ fMBWidth. UInt_t TGSplitButton::fMBWidth. protected . width of menu button ; Definition at line 399 of file TGButton.h. ◆ fMenuLabel. TGHotString* TGSplitButton::fMenuLabel. protected . Label of the menu;. ; Definition at line 402 of file TGButton.h. ◆ fPopMenu. TGPopupMenu* TGSplitButton::fPopMenu. protected . pointer to popup menu ; Definition at line 400 of file TGButton.h. ◆ fSplit. Bool_t TGSplitButton::fSplit. protected . kTRUE if menu is in split mode ; Definition at line 396 of file TGButton.h. ◆ fTBWidth. UInt_t TGSplitButton::fTBWidth. protected . width of text button ; Definition at line 398 of file TGButton.h. ◆ fWidestLabel. TGString TGSplitButton::fWidestLabel. protected . longest label that can be on the button ; Definition at line 405 of file TGButton.h. Libraries for TGSplitButton:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGButton.h; gui/gui/src/TGButton.cxx. TGSplitButton. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:35 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitButton.html:46932,Guid,Guide,46932,doc/master/classTGSplitButton.html,https://root.cern,https://root.cern/doc/master/classTGSplitButton.html,1,['Guid'],['Guide']
Usability,"_b);  ; Int_t WriteLock ();  Obtain a writer lock. Returns always 0. ;  ; Int_t WriteUnLock ();  Unlock writer lock. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRWLock.html:1654,Clear,Clear,1654,doc/master/classTRWLock.html,https://root.cern,https://root.cern/doc/master/classTRWLock.html,1,['Clear'],['Clear']
Usability,"_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TFileHandler; int fFileNum;  ; int fMask;  ; int fReadyMask;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TGInputHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGInputHandler(). TGInputHandler::TGInputHandler ; (; TGClient * ; c, . Int_t ; fd . ). inline . Definition at line 107 of file TGClient.cxx. Member Function Documentation. ◆ Notify(). Bool_t TGInputHandler::Notify ; (; ). overridevirtual . Notify input from the display server. ; Reimplemented from TFileHandler.; Definition at line 115 of file TGClient.cxx. Member Data Documentation. ◆ fClient. TGClient* TGInputHandler::fClient. private . Definition at line 105 of file TGClient.cxx. gui/gui/src/TGClient.cxx. TGInputHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGInputHandler.html:17081,Guid,Guide,17081,doc/master/classTGInputHandler.html,https://root.cern,https://root.cern/doc/master/classTGInputHandler.html,1,['Guid'],['Guide']
Usability,"_eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true);  c'tor ;  ; virtual ~Settings ();  d'tor ;  ; void addPoint (std::string histoName, double x);  for monitoring ;  ; void addPoint (std::string histoName, double x, double y);  for monitoring ;  ; size_t batchSize () const;  mini-batch size ;  ; void clear (std::string histoName);  for monitoring ;  ; virtual void computeResult (const Net &, std::vector< double > &);  callback for monitoring and logging ;  ; size_t convergenceCount () const;  returns the current convergence count ;  ; size_t convergenceSteps () const;  how many steps until training is deemed to have converged ;  ; void create (std::string histoName, int bins, double min, double max);  for monitoring ;  ; void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2);  for monitoring ;  ; virtual void cycle (double progress, TString text);  ; virtual void drawSample (const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double);  callback for monitoring and logging ;  ; const std::vector< double > & dropFractions () const;  ; size_t dropRepetitions () const;  ; virtual void endTestCycle ();  callback for monitoring and loggging ;  ; virtual void endTrainCycle (double);  callback for monitoring and logging ;  ; bool exists (std::string histoName);  for monitoring ;  ; double factorWeightDecay () const;  get the weight-decay factor ;  ; virtual bool hasConverged (double testError);  has this training converged already? ;  ; double learningRate () const;  get the learning rate ;  ; size_t maxConvergenceCount () const;  returns the max convergence count so far ;  ; size_t minError () const;  returns the smallest error so far ;  ; MinimizerType minimizerType () const;  which minimizer shall be used (e.g. SGD) ;  ; double momentum () const;  get the momentum (e.g. for SGD) ;  ; void pads (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:1019,clear,clear,1019,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,3,"['clear', 'learn']","['clear', 'learning', 'learningRate']"
Usability,"_higgs, ""Higgs MC"", ""f""); 277legend.AddEntry(h_zz, ""ZZ MC"", ""f""); 278legend.AddEntry(h_other, ""Other MC"", ""f""); 279legend.AddEntry(h_weight_down, ""Total MC Variations Down"", ""l""); 280legend.AddEntry(h_weight_up, ""Total MC Variations Up"", ""l""); 281legend.AddEntry(h_nominal, ""Total MC Uncertainty"", ""f""); 282legend.Draw(); 283 ; 284text = ROOT.TLatex(); 285text.SetTextFont(72); 286text.SetTextSize(0.04); 287text.DrawLatexNDC(0.19, 0.85, ""ATLAS""); 288text.SetTextFont(42); 289text.DrawLatexNDC(0.19 + 0.15, 0.85, ""Open Data""); 290text.SetTextSize(0.035); 291text.DrawLatexNDC(0.21, 0.80, ""#sqrt{s} = 13 TeV, 10 fb^{-1}""); 292 ; 293c1.Update(); 294 ; 295# Save the plot; 296c1.SaveAs(""df106_HiggsToFourLeptons_python.png""); 297print(""Saved figure to df106_HiggsToFourLeptons_python.png""); SetFillStyleOption_t Option_t SetFillStyleDefinition TGWin32VirtualXProxy.cxx:46; SetLineColorOption_t Option_t SetLineColorDefinition TGWin32VirtualXProxy.cxx:54; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; ROOT::RDF::Experimental::FromSpecROOT::RDataFrame FromSpec(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1906; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30. tutorialsdataframedf106_HiggsToFourLeptons.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html:14036,Guid,Guide,14036,doc/master/df106__HiggsToFourLeptons_8py_source.html,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html,1,['Guid'],['Guide']
Usability,"_meshMakeEdge(). GLUhalfEdge * __gl_meshMakeEdge ; (; GLUmesh * ; mesh). Definition at line 270 of file mesh.c. ◆ __gl_meshNewMesh(). GLUmesh * __gl_meshNewMesh ; (; void ; ). Definition at line 598 of file mesh.c. ◆ __gl_meshSplice(). int __gl_meshSplice ; (; GLUhalfEdge * ; eOrg, . GLUhalfEdge * ; eDst . ). Definition at line 323 of file mesh.c. ◆ __gl_meshSplitEdge(). GLUhalfEdge * __gl_meshSplitEdge ; (; GLUhalfEdge * ; eOrg). Definition at line 470 of file mesh.c. ◆ __gl_meshUnion(). GLUmesh * __gl_meshUnion ; (; GLUmesh * ; mesh1, . GLUmesh * ; mesh2 . ). Definition at line 650 of file mesh.c. ◆ __gl_meshZapFace(). void __gl_meshZapFace ; (; GLUface * ; fZap). Definition at line 550 of file mesh.c. ◆ allocFace(). static GLUface * allocFace ; (; ). static . Definition at line 53 of file mesh.c. ◆ allocVertex(). static GLUvertex * allocVertex ; (; ). static . Definition at line 48 of file mesh.c. ◆ KillEdge(). static void KillEdge ; (; GLUhalfEdge * ; eDel). static . Definition at line 199 of file mesh.c. ◆ KillFace(). static void KillFace ; (; GLUface * ; fDel, . GLUface * ; newLface . ). static . Definition at line 243 of file mesh.c. ◆ KillVertex(). static void KillVertex ; (; GLUvertex * ; vDel, . GLUvertex * ; newOrg . ). static . Definition at line 219 of file mesh.c. ◆ MakeEdge(). static GLUhalfEdge * MakeEdge ; (; GLUhalfEdge * ; eNext). static . Definition at line 64 of file mesh.c. ◆ MakeFace(). static void MakeFace ; (; GLUface * ; newFace, . GLUhalfEdge * ; eOrig, . GLUface * ; fNext . ). static . Definition at line 163 of file mesh.c. ◆ MakeVertex(). static void MakeVertex ; (; GLUvertex * ; newVertex, . GLUhalfEdge * ; eOrig, . GLUvertex * ; vNext . ). static . Definition at line 129 of file mesh.c. ◆ Splice(). static void Splice ; (; GLUhalfEdge * ; a, . GLUhalfEdge * ; b . ). static . Definition at line 112 of file mesh.c. graf3deve7glumesh.c. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/mesh_8c.html:4287,Guid,Guide,4287,doc/master/mesh_8c.html,https://root.cern,https://root.cern/doc/master/mesh_8c.html,1,['Guid'],['Guide']
Usability,"_no, TGeoMatrix *mat=nullptr, Option_t *option="""");  Add a TGeoNode to the list of nodes. ;  ; void Browse (TBrowser *b) override;  How to browse a volume. ;  ; Double_t Capacity () const;  Computes the capacity of this [cm^3] as the capacity of its shape. ;  ; virtual void cd (Int_t inode) const;  Actualize matrix of node indexed <inode> ;  ; void CheckGeometry (Int_t nrays=1, Double_t startx=0, Double_t starty=0, Double_t startz=0) const;  Shoot nrays with random directions from starting point (startx, starty, startz) in the reference frame of this volume. ;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""") const;  Overlap checking tool. ;  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape() ;  ; void CheckShapes ();  check for negative parameters in shapes. ;  ; void CleanAll ();  Clean data of the volume. ;  ; void ClearNodes ();  ; void ClearShape ();  Clear the shape of this volume from the list held by the current manager. ;  ; virtual void ClearThreadData () const;  ; void CloneNodesAndConnect (TGeoVolume *newmother) const;  Clone the array of nodes. ;  ; virtual TGeoVolume * CloneVolume () const;  Clone this volume. ;  ; Bool_t Contains (const Double_t *point) const;  ; Int_t CountNodes (Int_t nlevels=1000, Int_t option=0);  Count total number of subnodes starting from this volume, nlevels down. ;  ; virtual void CreateThreadData (Int_t nthreads);  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute the closest distance of approach from point px,py to this volume ;  ; virtual TGeoVolume * Divide (const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed=0, Option_t *option="""");  Division a la G3. ;  ; void Draw (Option_t *option="""") override;  draw top volume according to option ;  ; virtual void DrawOnly (Option_t *option="""");  draw only this volume ;  ; void ExecuteEvent (Int_t event, Int_t px",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:14951,Clear,ClearNodes,14951,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,3,['Clear'],"['Clear', 'ClearNodes', 'ClearShape']"
Usability,"_pow3', 'Numba::pypow(x, 3)')\; 31 .AsNumpy(); 32 ; 33print('pypow({}, 3) = {}'.format(data['x'], data['x_pow3'])); 34 ; 35# ROOT uses the numba Python package to create C++ functions from python ones.; 36# We support as input and return types of the callable fundamental types and; 37# ROOT::RVec thereof. See the following callable computing the power of the; 38# elements in an array.; 39@ROOT.Numba.Declare(['RVecF', 'int'], 'RVecF'); 40def pypowarray(x, y):; 41 return x**y; 42 ; 43ROOT.gInterpreter.ProcessLine('''; 44ROOT::RVecF x = {0, 1, 2, 3};; 45cout << ""pypowarray("" << x << "", 3) = "" << Numba::pypowarray(x, 3) << endl;; 46'''); 47 ; 48# and now with RDataFrame; 49s = ROOT.RDataFrame(1).Define('x', 'ROOT::RVecF{1,2,3}')\; 50 .Define('x2', 'Numba::pypowarray(x, 2)')\; 51 .Sum('x2') # 1 + 4 + 9 == 14; 52print('sum(pypowarray({ 1, 2, 3 }, 2)) = ', s.GetValue()); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41. tutorialspyrootpyroot004_NumbaDeclare.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/pyroot004__NumbaDeclare_8py_source.html:3261,Guid,Guide,3261,doc/master/pyroot004__NumbaDeclare_8py_source.html,https://root.cern,https://root.cern/doc/master/pyroot004__NumbaDeclare_8py_source.html,1,['Guid'],['Guide']
Usability,"_t & ; lhs, . const Vertex_t & ; rhs . ). inline . Definition at line 188 of file TGeoVector3.h. ◆ operator*() [3/3]. Vertex_t ROOT::Geom::operator* ; (; Vertex_t const & ; lhs, . const double ; rhs . ). inline . Definition at line 188 of file TGeoVector3.h. ◆ operator+() [1/3]. Vertex_t ROOT::Geom::operator+ ; (; const double ; lhs, . Vertex_t const & ; rhs . ). inline . Definition at line 188 of file TGeoVector3.h. ◆ operator+() [2/3]. Vertex_t ROOT::Geom::operator+ ; (; const Vertex_t & ; lhs, . const Vertex_t & ; rhs . ). inline . Definition at line 188 of file TGeoVector3.h. ◆ operator+() [3/3]. Vertex_t ROOT::Geom::operator+ ; (; Vertex_t const & ; lhs, . const double ; rhs . ). inline . Definition at line 188 of file TGeoVector3.h. ◆ operator-() [1/3]. Vertex_t ROOT::Geom::operator- ; (; const double ; lhs, . Vertex_t const & ; rhs . ). inline . Definition at line 188 of file TGeoVector3.h. ◆ operator-() [2/3]. Vertex_t ROOT::Geom::operator- ; (; const Vertex_t & ; lhs, . const Vertex_t & ; rhs . ). inline . Definition at line 188 of file TGeoVector3.h. ◆ operator-() [3/3]. Vertex_t ROOT::Geom::operator- ; (; Vertex_t const & ; lhs, . const double ; rhs . ). inline . Definition at line 188 of file TGeoVector3.h. ◆ operator/() [1/3]. Vertex_t ROOT::Geom::operator/ ; (; const double ; lhs, . Vertex_t const & ; rhs . ). inline . Definition at line 188 of file TGeoVector3.h. ◆ operator/() [2/3]. Vertex_t ROOT::Geom::operator/ ; (; const Vertex_t & ; lhs, . const Vertex_t & ; rhs . ). inline . Definition at line 188 of file TGeoVector3.h. ◆ operator/() [3/3]. Vertex_t ROOT::Geom::operator/ ; (; Vertex_t const & ; lhs, . const double ; rhs . ). inline . Definition at line 188 of file TGeoVector3.h. ◆ operator==(). bool ROOT::Geom::operator== ; (; Vertex_t const & ; lhs, . Vertex_t const & ; rhs . ). inline . Definition at line 157 of file TGeoVector3.h. ROOTGeom. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Geom.html:3443,Guid,Guide,3443,doc/v632/namespaceROOT_1_1Geom.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Geom.html,1,['Guid'],['Guide']
Usability,"_t *);  Search along the line defined by direction. ;  ; void MLP_Batch (Double_t *);  One step for the batch (stochastic) method. ;  ; void MLP_Stochastic (Double_t *);  One step for the stochastic method buffer should contain the previous dw vector and will be updated. ;  ; void SetGammaDelta (TMatrixD &, TMatrixD &, Double_t *);  Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ;  ; void SteepestDir (Double_t *);  Sets the search direction to steepest descent. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions;  TMultiLayerPerceptron (const TMultiLayerPerceptron &);  ; void BuildFirstLayer (TString &);  Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ;  ; void BuildHiddenLayers (TString &);  Builds hidden layers. ;  ; void BuildLastLayer (TString &, Int_t);  Builds the output layer Neurons are linear combinations of input, by default. ;  ; void BuildOneHiddenLayer (const TString &sNumNodes, Int_t &layer, Int_t &prevStart, Int_t &prevStop, Bool_t lastLayer);  Builds a hidden layer, updates the number of layers. ;  ; void ExpandStructure ();  Expand the structure of the first layer. ;  ; void MLP_Line (Double_t *, Double_t *, Double_t);  Sets the weights to a point along a line Weights are set to [origin + (dist * dir)]. ;  ; TMultiLayerPerceptron & operator= (const TMultiLayerPerceptron &);  ; void Shuffle (Int_t *, Int_t) const;  Shuffle the Int_t index[n] in input. ;  . Private Attributes; Int_t fCurrentTree;  ! index of the current tree in a chain ;  ; Double_t fCurrentTreeWeight;  ! weight of the current tree in a chain ;  ; TTree * fData; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:25293,simpl,simple,25293,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['simpl'],['simple']
Usability,"_t *array) const override;  ; Bool_t IsCylType () const override;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void SetDimensions (Double_t *param) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numpoints, Int_t px, Int_t py) const;  Returns distance to shape primit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTessellated.html:8871,Clear,ClearThreadData,8871,doc/master/classTGeoTessellated.html,https://root.cern,https://root.cern/doc/master/classTGeoTessellated.html,1,['Clear'],['ClearThreadData']
Usability,"_t *option="""") const override;  Print picture info. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSelectedPicture.html:2290,Clear,Clear,2290,doc/master/classTGSelectedPicture.html,https://root.cern,https://root.cern/doc/master/classTGSelectedPicture.html,1,['Clear'],['Clear']
Usability,"_t *option="""") override;  Execute this macro (called by TPad::Paint). ;  ; void Print (Option_t *option="""") const override;  Print contents of this macro. ;  ; virtual Int_t ReadFile (const char *filename);  Read lines in filename in this macro. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save macro source on stream out. ;  ; virtual void SaveSource (const char *filename);  Save macro source in filename. ;  ; virtual void SetParams (const char *params=nullptr);  Set default parameters to execute this macro. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacro.html:4012,Clear,Clear,4012,doc/master/classTMacro.html,https://root.cern,https://root.cern/doc/master/classTMacro.html,2,['Clear'],['Clear']
Usability,"_t *option="""")TObjectvirtual; SetAttributes(const TString &attributes)ROOT::TSchemaRule; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetChecksum(const TString &checksum)ROOT::TSchemaRule; SetCode(const TString &code)ROOT::TSchemaRule; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEmbed(Bool_t embed)ROOT::TSchemaRule; SetFromRule(const char *rule)ROOT::TSchemaRule; SetInclude(const TString &include)ROOT::TSchemaRule; SetObjectStat(Bool_t stat)TObjectstatic; SetReadFunctionPointer(ReadFuncPtr_t ptr)ROOT::TSchemaRule; SetReadRawFunctionPointer(ReadRawFuncPtr_t ptr)ROOT::TSchemaRule; SetRuleType(RuleType_t type)ROOT::TSchemaRule; SetSource(const TString &source)ROOT::TSchemaRule; SetSourceClass(const TString &classname)ROOT::TSchemaRule; SetTarget(const TString &target)ROOT::TSchemaRule; SetTargetClass(const TString &classname)ROOT::TSchemaRule; SetUniqueID(UInt_t uid)TObjectvirtual; SetVersion(const TString &version)ROOT::TSchemaRule; Streamer(TBuffer &) overrideROOT::TSchemaRulevirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)ROOT::TSchemaRuleinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TestChecksum(UInt_t checksum) constROOT::TSchemaRule; TestVersion(Int_t version) constROOT::TSchemaRule; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TSchemaRule()ROOT::TSchemaRule; TSchemaRule(const TSchemaRule &rhs)ROOT::TSchemaRule; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TObject()TObjectvirtual; ~TSchemaRule()ROOT::TSchemaRulevirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html:8514,Guid,Guide,8514,doc/master/classROOT_1_1TSchemaRule-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html,1,['Guid'],['Guide']
Usability,"_t * ; option = """"). overridevirtual . Execute this macro (called by TPad::Paint). ; Reimplemented from TObject.; Definition at line 311 of file TMacro.cxx. ◆ Print(). void TMacro::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print contents of this macro. ; Reimplemented from TObject.; Definition at line 319 of file TMacro.cxx. ◆ ReadFile(). Int_t TMacro::ReadFile ; (; const char * ; filename). virtual . Read lines in filename in this macro. ; Definition at line 329 of file TMacro.cxx. ◆ SavePrimitive(). void TMacro::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save macro source on stream out. ; Reimplemented from TObject.; Definition at line 382 of file TMacro.cxx. ◆ SaveSource() [1/2]. void TMacro::SaveSource ; (; const char * ; filename). virtual . Save macro source in filename. ; Definition at line 354 of file TMacro.cxx. ◆ SaveSource() [2/2]. void TMacro::SaveSource ; (; FILE * ; fp). protected . Save macro source in file pointer fp. ; Definition at line 371 of file TMacro.cxx. ◆ SetParams(). void TMacro::SetParams ; (; const char * ; params = nullptr). virtual . Set default parameters to execute this macro. ; Definition at line 404 of file TMacro.cxx. ◆ Streamer(). void TMacro::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMacro::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 59 of file TMacro.h. Member Data Documentation. ◆ fLines. TList* TMacro::fLines. protected . Definition at line 34 of file TMacro.h. ◆ fParams. TString TMacro::fParams. protected . Definition at line 35 of file TMacro.h. Libraries for TMacro:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TMacro.h; core/base/src/TMacro.cxx. TMacro. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacro.html:20701,Guid,Guide,20701,doc/master/classTMacro.html,https://root.cern,https://root.cern/doc/master/classTMacro.html,1,['Guid'],['Guide']
Usability,"_t * ; points); const. overrideprotectedvirtual . Create PCON points. ; Reimplemented from TShape.; Definition at line 222 of file TPCON.cxx. ◆ SetSegsAndPols(). Bool_t TPCON::SetSegsAndPols ; (; TBuffer3D & ; buffer); const. protectedvirtual . Set segments and polygons. ; Definition at line 335 of file TPCON.cxx. ◆ Sizeof3D(). void TPCON::Sizeof3D ; (; ); const. overridevirtual . Return total X3D needed by TNode::ls (when called with option ""x"") ; Reimplemented from TAtt3D.; Definition at line 249 of file TPCON.cxx. ◆ Streamer(). void TPCON::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TNamed.; Reimplemented in TPGON.; Definition at line 263 of file TPCON.cxx. ◆ StreamerNVirtual(). void TPCON::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 74 of file TPCON.h. Member Data Documentation. ◆ fCoTab. Double_t* TPCON::fCoTab. mutableprotected . Table of sin(fPhi1) .... sin(fPhil+fDphi1) ; Definition at line 37 of file TPCON.h. ◆ fDphi1. Float_t TPCON::fDphi1. protected . Definition at line 40 of file TPCON.h. ◆ fDz. Float_t* TPCON::fDz. protected . Definition at line 45 of file TPCON.h. ◆ fNdiv. Int_t TPCON::fNdiv. protected . Definition at line 41 of file TPCON.h. ◆ fNz. Int_t TPCON::fNz. protected . Definition at line 42 of file TPCON.h. ◆ fPhi1. Float_t TPCON::fPhi1. protected . Table of cos(fPhi1) .... cos(fPhil+fDphi1) ; Definition at line 39 of file TPCON.h. ◆ fRmax. Float_t* TPCON::fRmax. protected . Definition at line 44 of file TPCON.h. ◆ fRmin. Float_t* TPCON::fRmin. protected . Definition at line 43 of file TPCON.h. ◆ fSiTab. Double_t* TPCON::fSiTab. mutableprotected . Definition at line 36 of file TPCON.h. Libraries for TPCON:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TPCON.h; graf3d/g3d/src/TPCON.cxx. TPCON. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPCON.html:24738,Guid,Guide,24738,doc/master/classTPCON.html,https://root.cern,https://root.cern/doc/master/classTPCON.html,1,['Guid'],['Guide']
Usability,"_t > * ; l = nullptr, . std::vector< Double_t > * ; u = nullptr . ). constructor specifying the volume by std::vectors of doubles ; Definition at line 47 of file Volume.cxx. ◆ Volume() [3/7]. TMVA::Volume::Volume ; (; Volume & ; V). copy constructor ; Definition at line 125 of file Volume.cxx. ◆ Volume() [4/7]. TMVA::Volume::Volume ; (; Float_t * ; l, . Float_t * ; u, . Int_t ; nvar . ). constructor specifying the volume by c-style arrays of floats ; Definition at line 86 of file Volume.cxx. ◆ Volume() [5/7]. TMVA::Volume::Volume ; (; Double_t * ; l, . Double_t * ; u, . Int_t ; nvar . ). constructor specifying the volume by c-style arrays of doubles ; Definition at line 71 of file Volume.cxx. ◆ Volume() [6/7]. TMVA::Volume::Volume ; (; Float_t ; l, . Float_t ; u . ). simple constructors for 1 dimensional values (float) ; Definition at line 113 of file Volume.cxx. ◆ Volume() [7/7]. TMVA::Volume::Volume ; (; Double_t ; l, . Double_t ; u . ). simple constructors for 1 dimensional values (double) ; Definition at line 101 of file Volume.cxx. ◆ ~Volume(). TMVA::Volume::~Volume ; (; void ; ). virtual . destructor ; Definition at line 153 of file Volume.cxx. Member Function Documentation. ◆ Delete(). void TMVA::Volume::Delete ; (; void ; ). delete array of volume bondaries ; Definition at line 162 of file Volume.cxx. ◆ operator=(). TMVA::Volume & TMVA::Volume::operator= ; (; const Volume & ; V). assignment operator ; Definition at line 135 of file Volume.cxx. ◆ Print(). void TMVA::Volume::Print ; (; void ; ); const. printout of the volume boundaries ; Definition at line 193 of file Volume.cxx. ◆ Scale(). void TMVA::Volume::Scale ; (; Double_t ; f). ""scale"" the volume by multiplying each upper and lower boundary by ""f"" ; Definition at line 171 of file Volume.cxx. ◆ ScaleInterval(). void TMVA::Volume::ScaleInterval ; (; Double_t ; f). ""scale"" the volume by symmetrically blowing up the interval in each dimension ; Definition at line 180 of file Volume.cxx. Member Data Documenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Volume.html:3236,simpl,simple,3236,doc/master/classTMVA_1_1Volume.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Volume.html,1,['simpl'],['simple']
Usability,"_t AllocColor(unsigned long cmap, XColor* color); Allocate color in colormap. If we are on an <= 8 plane machine; we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane; true color machine we will calculate the pixel value using:; for 15 and 16 bit true colors have 6 bits precision per color however; only the 5 most significant bits are used in the color index.; Except for 16 bits where green uses all 6 bits. I.e.:; 15 bits = rrrrrgggggbbbbb; 16 bits = rrrrrggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits. Since all colors are set with a max of 65535 (16 bits) per r, g, b; we just right shift them by 10, 11 and 10 bits for 16 planes, and; (10, 10, 10 for 15 planes) and by 8 bits for 24 planes.; Returns kFALSE in case color allocation failed. void QueryColors(unsigned long cmap, XColor* colors, Int_t ncolors); Returns the current RGB value for the pixel in the XColor structure. void ClearPixmap(unsigned long* pix); Clear the pixmap pix. void ClearWindow(); Clear current window. void ClosePixmap(); Delete current pixmap. void CloseWindow(); Delete current window. void CloseWindow1(); Delete current window. void CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); Copy the pixmap wid at the position xpos, ypos in the current window. void CopyWindowtoPixmap(unsigned long* pix, Int_t xpos, Int_t ypos); Copy area of current window in the pixmap pix. void DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); Draw a box.; mode=0 hollow (kHollow); mode=1 solid (kSolid). void DrawCellArray(Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t* ic); Draw a cell array.; x1,y1 : left down corner; x2,y2 : right up corner; nx,ny : array size; ic : array. Draw a cell array. The drawing is done with the pixel presicion; if (X2-X1)/NX (or Y) is not a exact pixel number the position of; the top rigth corner may be wrong. void DrawFillArea(Int_t n, TPoint* xy); Fill area described by polygon.; n : number of points; xy(2,n) : list",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:25727,Clear,ClearWindow,25727,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,8,['Clear'],"['Clear', 'ClearWindow']"
Usability,"_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; qfloat * qDefinition THbookFile.cxx:89; ROOT::Math::AxisAngleAxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotat...Definition AxisAngle.h:42; ROOT::Math::EulerAnglesEulerAngles class describing rotation as three angles (Euler Angles).Definition EulerAngles.h:45; ROOT::Math::QuaternionRotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k).Definition Quaternion.h:49; ROOT::Math::Quaternion::DistanceScalar Distance(const Quaternion &q) constDistance between two rotations in Quaternion form Note: The rotation group is isomorphic to a 3-spher...Definition Quaternion.cxx:91; ROOT::Math::Quaternion::fJScalar fJDefinition Quaternion.h:317; ROOT::Math::Quaternion::fIScalar fIDefinition Quaternion.h:316; ROOT::Math::Quaternion::QuaternionQuaternion()Default constructor (identity rotation)Definition Quaternion.h:60; ROOT::Math::Quaternion::fKScalar fKDefinition Quaternion.h:318; ROOT::Math::Quaternion::Rectifyvoid Rectify()Re-adjust components to eliminate small deviations from |Q| = 1 orthonormality.Definition Quaternion.cxx:34; ROOT::Math::Quaternion::fUScalar fUDefinition Quaternion.h:315; ROOT::Math::Quaternion::operator*AVector operator*(const AVector &v) constOverload operator * for rotation on a vector.Definition Quaternion.h:242; ROOT::Math::Rotation3DRotation class with the (3D) rotation represented by a 3x3 orthogonal matrix.Definition Rotation3D.h:67; ROOT::Math::RotationZYXRotation class with the (3D) rotation represented by angles describing first a rotation of an angle p...Definition RotationZYX.h:63; double; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathgenvectorsrcQuaternion.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Quaternion_8cxx_source.html:5783,Guid,Guide,5783,doc/master/Quaternion_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Quaternion_8cxx_source.html,1,['Guid'],['Guide']
Usability,"_t GetFeatures() constDefinition TIOFeatures.cxx:250; ROOT::TIOFeatures::TIOFeaturesTIOFeatures(UChar_t IOBits)Definition TIOFeatures.hxx:96; ROOT::TIOFeatures::Testbool Test(Experimental::EIOUnsupportedFeatures bits) const; ROOT::TIOFeatures::Printvoid Print() constPrint a human-readable representation of the TIOFeatures to stdout.Definition TIOFeatures.cxx:197; ROOT::TIOFeatures::TIOFeaturesTIOFeatures()Definition TIOFeatures.hxx:75; ROOT::TIOFeatures::Setbool Set(EIOFeatures bits)Set a specific IO feature.Definition TIOFeatures.cxx:139; ROOT::TIOFeatures::Testbool Test(EIOFeatures bits) constTest to see if a given feature is set.Definition TIOFeatures.cxx:239; ROOT::TIOFeatures::Clearvoid Clear(EIOFeatures bits)Clear a specific IO feature from this set.Definition TIOFeatures.cxx:80; ROOT::TIOFeatures::kIOFeatureCountstatic constexpr int kIOFeatureCountDefinition TIOFeatures.hxx:89; ROOT::TIOFeatures::fIOBitsUChar_t fIOBitsDefinition TIOFeatures.hxx:100; ROOT::TIOFeatures::Setvoid Set(UChar_t newBits)Definition TIOFeatures.hxx:98; TBasketManages buffers for branches of a Tree.Definition TBasket.h:34; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::Experimental::EIOFeaturesEIOFeaturesDefinition TIOFeatures.hxx:52; ROOT::Experimental::EIOFeatures::kGenerateOffsetMap@ kGenerateOffsetMap; ROOT::Experimental::EIOFeatures::kSupported@ kSupported; ROOT::Experimental::EIOUnsupportedFeaturesEIOUnsupportedFeaturesDefinition TIOFeatures.hxx:61; ROOT::Experimental::EIOUnsupportedFeatures::kUnsupported@ kUnsupported; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EIOFeaturesEIOFeaturesDefinition TIOFeatures.hxx:39; ROOT::EIOFeatures::kSupported@ kSupported. treetreeincROOTTIOFeatures.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TIOFeatures_8hxx_source.html:5974,Guid,Guide,5974,doc/master/TIOFeatures_8hxx_source.html,https://root.cern,https://root.cern/doc/master/TIOFeatures_8hxx_source.html,1,['Guid'],['Guide']
Usability,"_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj); Low statistic histograms need a special treatment when using autobin. void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TProofPlayerRemote(TProof* proof = 0); { fProgressStatus = new TProofProgressStatus(); }. » Author: Maarten Ballintijn 07/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayerRemote.html:19041,feedback,feedback,19041,root/html528/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html528/TProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"_t SupportAlpha()Static function returning ""true"" if transparency is supported.Definition TCanvas.cxx:2476; TCanvas::fBatchBool_t fBatch! True when in batchmodeDefinition TCanvas.h:59; TCanvas::fUseGLBool_t fUseGL! True when rendering is with GLDefinition TCanvas.h:62; TCanvas::fEventXInt_t fEventX! Last X mouse position in canvasDefinition TCanvas.h:46; TCanvas::IsBatchBool_t IsBatch() const overrideDefinition TCanvas.h:171; TCanvas::DrawCloneTObject * DrawClone(Option_t *option="""") const overrideDraw a clone of this canvas A new canvas is created that is a clone of this canvas.Definition TCanvas.cxx:907; TCanvas::fXsizeRealSize_t fXsizeRealCurrent size of canvas along X in CM.Definition TCanvas.h:35; TCanvas::HasMenuBarBool_t HasMenuBar() constDefinition TCanvas.h:168; TCanvas::GetCanvasPainterTVirtualPadPainter * GetCanvasPainter()Access and (probably) creation of pad painter.Definition TCanvas.cxx:2616; TCanvas::HighlightConnectvirtual void HighlightConnect(const char *slot)This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot.Definition TCanvas.cxx:1631; TCanvas::PickTPad * Pick(Int_t px, Int_t py, TObjLink *&pickobj) overrideSearch for an object at pixel position px,py.Definition TCanvas.h:183; TCanvas::Closevoid Close(Option_t *option="""") overrideClose canvas.Definition TCanvas.cxx:788; TCanvas::SetFixedAspectRatiovoid SetFixedAspectRatio(Bool_t fixed=kTRUE) overrideFix canvas aspect ratio to current value if fixed is true.Definition TCanvas.cxx:2016; TCanvas::Resizevirtual void Resize(Option_t *option="""")Recompute canvas parameters following a X11 Resize.Definition TCanvas.cxx:1668; TCanvas::GetHighLightColorColor_t GetHighLightColor() const overrideDefinition TCanvas.h:138; TCanvas::GetShowToolBarBool_t GetShowToolBar() constDefinition TCanvas.h:149; TCanvas::DrawEventStatusvoid DrawEventStatus(Int_t event, Int_t x, Int_t y, TObject *selected)Report name and title of primitive below the cursor.Definition TCanvas.cxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:105570,simpl,simplification,105570,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['simpl'],['simplification']
Usability,_t TBuffer3D::fgCSLevel = 0. staticprivate . Definition at line 39 of file TBuffer3D.h. ◆ fID. TObject* TBuffer3D::fID. Definition at line 87 of file TBuffer3D.h. ◆ fLocalFrame. Bool_t TBuffer3D::fLocalFrame. Definition at line 90 of file TBuffer3D.h. ◆ fLocalMaster. Double_t TBuffer3D::fLocalMaster[16]. Definition at line 93 of file TBuffer3D.h. ◆ fNbPnts. UInt_t TBuffer3D::fNbPnts. private . Definition at line 22 of file TBuffer3D.h. ◆ fNbPols. UInt_t TBuffer3D::fNbPols. private . Definition at line 24 of file TBuffer3D.h. ◆ fNbSegs. UInt_t TBuffer3D::fNbSegs. private . Definition at line 23 of file TBuffer3D.h. ◆ fPhysicalID. UInt_t TBuffer3D::fPhysicalID. mutable . Definition at line 119 of file TBuffer3D.h. ◆ fPnts. Double_t* TBuffer3D::fPnts. Definition at line 113 of file TBuffer3D.h. ◆ fPntsCapacity. UInt_t TBuffer3D::fPntsCapacity. private . Definition at line 26 of file TBuffer3D.h. ◆ fPols. Int_t* TBuffer3D::fPols. Definition at line 115 of file TBuffer3D.h. ◆ fPolsCapacity. UInt_t TBuffer3D::fPolsCapacity. private . Definition at line 28 of file TBuffer3D.h. ◆ fReflection. Bool_t TBuffer3D::fReflection. Definition at line 91 of file TBuffer3D.h. ◆ fScaled. Bool_t TBuffer3D::fScaled. Definition at line 92 of file TBuffer3D.h. ◆ fSections. UInt_t TBuffer3D::fSections. private . Definition at line 30 of file TBuffer3D.h. ◆ fSegs. Int_t* TBuffer3D::fSegs. Definition at line 114 of file TBuffer3D.h. ◆ fSegsCapacity. UInt_t TBuffer3D::fSegsCapacity. private . Definition at line 27 of file TBuffer3D.h. ◆ fTransparency. Short_t TBuffer3D::fTransparency. Definition at line 89 of file TBuffer3D.h. ◆ fType. const Int_t TBuffer3D::fType. private . Definition at line 20 of file TBuffer3D.h. Libraries for TBuffer3D:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TBuffer3D.h; core/base/src/TBuffer3D.cxx. TBuffer3D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:27901,Guid,Guide,27901,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,1,['Guid'],['Guide']
Usability,"_t TCollectionMethodBrowsable::GetBrowsables ; (; TList & ; li, . const TBranch * ; branch, . const TVirtualBranchBrowsable * ; parent = nullptr . ). static . This methods fills list with TMethodBrowsables for the branch's or parent's collection class and its base classes, and returns the number of added elements. ; If called from a TBranch::Browse overload, ""branch"" should be set to the calling TBranch, otherwise ""parent"" should be set to the TVirtualBranchBrowsable being browsed. ; Definition at line 925 of file TBranchBrowsable.cxx. ◆ IsA(). TClass * TCollectionMethodBrowsable::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 191 of file TBranchBrowsable.h. ◆ Register(). void TCollectionMethodBrowsable::Register ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigned different addr to the same method, depending on what translation unit you're in... ; Definition at line 961 of file TBranchBrowsable.cxx. ◆ Streamer(). void TCollectionMethodBrowsable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TCollectionMethodBrowsable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 191 of file TBranchBrowsable.h. ◆ Unregister(). void TCollectionMethodBrowsable::Unregister ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigned different addr to the same method, depending on what translation unit you're in... ; Definition at line 971 of file TBranchBrowsable.cxx. Libraries for TCollectionMethodBrowsable:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBranchBrowsable.h; tree/tree/src/TBranchBrowsable.cxx. TCollectionMethodBrowsable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCollectionMethodBrowsable.html:19997,Guid,Guide,19997,doc/master/classTCollectionMethodBrowsable.html,https://root.cern,https://root.cern/doc/master/classTCollectionMethodBrowsable.html,1,['Guid'],['Guide']
Usability,"_t TGLPerspectiveCamera::Truck ; (; Int_t ; xDelta, . Int_t ; yDelta, . Bool_t ; mod1, . Bool_t ; mod2 . ). overridevirtual . Truck the camera - 'move camera parallel to film plane'. ; Returns kTRUE is redraw required (camera change), kFALSE otherwise. ; Implements TGLCamera.; Definition at line 134 of file TGLPerspectiveCamera.cxx. ◆ Truck() [3/3]. virtual Bool_t TGLCamera::Truck ; (; Int_t ; xDelta, . Int_t ; yDelta, . Bool_t ; mod1, . Bool_t ; mod2 . ). virtual . Implements TGLCamera. ◆ Zoom(). Bool_t TGLPerspectiveCamera::Zoom ; (; Int_t ; delta, . Bool_t ; mod1, . Bool_t ; mod2 . ). overridevirtual . Zoom the camera - 'adjust lens focal length, retaining camera position'. ; Arguments are:. 'delta' - mouse viewport delta (pixels) - +ive zoom in, -ive zoom out; 'mod1' / 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. ; Implements TGLCamera.; Definition at line 118 of file TGLPerspectiveCamera.cxx. Member Data Documentation. ◆ fFOV. Double_t TGLPerspectiveCamera::fFOV. private . Definition at line 29 of file TGLPerspectiveCamera.h. ◆ fgFOVDefault. Double_t TGLPerspectiveCamera::fgFOVDefault = 30. staticprivate . Definition at line 31 of file TGLPerspectiveCamera.h. ◆ fgFOVDeltaSens. UInt_t TGLPerspectiveCamera::fgFOVDeltaSens = 500. staticprivate . Definition at line 32 of file TGLPerspectiveCamera.h. ◆ fgFOVMax. Double_t TGLPerspectiveCamera::fgFOVMax = 120.0. staticprivate . Definition at line 31 of file TGLPerspectiveCamera.h. ◆ fgFOVMin. Double_t TGLPerspectiveCamera::fgFOVMin = 0.01. staticprivate . Definition at line 31 of file TGLPerspectiveCamera.h. Libraries for TGLPerspectiveCamera:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TGLPerspectiveCamera.h; graf3d/gl/src/TGLPerspectiveCamera.cxx. TGLPerspectiveCamera. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLPerspectiveCamera.html:26480,Guid,Guide,26480,doc/master/classTGLPerspectiveCamera.html,https://root.cern,https://root.cern/doc/master/classTGLPerspectiveCamera.html,1,['Guid'],['Guide']
Usability,"_t THbookFile::IsFolder ; (; ); const. inlineoverridevirtual . Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ; Reimplemented from TObject.; Definition at line 66 of file THbookFile.h. ◆ IsOpen(). Bool_t THbookFile::IsOpen ; (; ); const. virtual . Returns kTRUE in case file is open and kFALSE if file is not open. ; Definition at line 578 of file THbookFile.cxx. ◆ ls(). void THbookFile::ls ; (; const char * ; path = """"); const. overridevirtual . List contents of Hbook directory. ; Reimplemented from TObject.; Definition at line 1016 of file THbookFile.cxx. ◆ SetBranchAddress(). void THbookFile::SetBranchAddress ; (; Int_t ; id, . const char * ; bname, . void * ; add . ). virtual . Set branch address. ; Definition at line 587 of file THbookFile.cxx. ◆ Streamer(). void THbookFile::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void THbookFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of file THbookFile.h. Member Data Documentation. ◆ fCurDir. TString THbookFile::fCurDir. protected . Definition at line 36 of file THbookFile.h. ◆ fgLuns. Int_t * THbookFile::fgLuns = nullptr. staticprotected . Definition at line 39 of file THbookFile.h. ◆ fgPawInit. Bool_t THbookFile::fgPawInit = kFALSE. staticprotected . Definition at line 38 of file THbookFile.h. ◆ fKeys. TList* THbookFile::fKeys. protected . Definition at line 35 of file THbookFile.h. ◆ fList. TList* THbookFile::fList. protected . Definition at line 34 of file THbookFile.h. ◆ fLrecl. Int_t THbookFile::fLrecl. protected . Definition at line 33 of file THbookFile.h. ◆ fLun. Int_t THbookFile::fLun. protected . Definition at line 32 of file THbookFile.h. hist/hbook/inc/THbookFile.h; hist/hbook/src/THbookFile.cxx. THbookFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookFile.html:21355,Guid,Guide,21355,doc/master/classTHbookFile.html,https://root.cern,https://root.cern/doc/master/classTHbookFile.html,1,['Guid'],['Guide']
Usability,_t TPBReadType::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 54 of file TProofBenchTypes.h. ◆ DeclFileName(). static const char * TPBReadType::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 54 of file TProofBenchTypes.h. ◆ GetName(). const char * TPBReadType::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 52 of file TProofBenchTypes.h. ◆ GetType(). EReadType TPBReadType::GetType ; (; ); const. inline . Definition at line 48 of file TProofBenchTypes.h. ◆ IsA(). TClass * TPBReadType::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 54 of file TProofBenchTypes.h. ◆ IsReadFull(). Bool_t TPBReadType::IsReadFull ; (; ); const. inline . Definition at line 49 of file TProofBenchTypes.h. ◆ IsReadNo(). Bool_t TPBReadType::IsReadNo ; (; ); const. inline . Definition at line 51 of file TProofBenchTypes.h. ◆ IsReadOpt(). Bool_t TPBReadType::IsReadOpt ; (; ); const. inline . Definition at line 50 of file TProofBenchTypes.h. ◆ Streamer(). void TPBReadType::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TPBReadType::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file TProofBenchTypes.h. Member Data Documentation. ◆ fName. TString TPBReadType::fName. private . Definition at line 43 of file TProofBenchTypes.h. ◆ fType. EReadType TPBReadType::fType. private . Definition at line 42 of file TProofBenchTypes.h. proof/proofbench/inc/TProofBenchTypes.h. TPBReadType. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:08 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPBReadType.html:12980,Guid,Guide,12980,doc/master/classTPBReadType.html,https://root.cern,https://root.cern/doc/master/classTPBReadType.html,1,['Guid'],['Guide']
Usability,"_t TString::BeginsWith ; (; const TString & ; pat, . ECaseCompare ; cmp = kExact . ); const. inline . Definition at line 626 of file TString.h. ◆ Capacity() [1/2]. Ssiz_t TString::Capacity ; (; ); const. inline . Definition at line 364 of file TString.h. ◆ Capacity() [2/2]. Ssiz_t TString::Capacity ; (; Ssiz_t ; nc). Return string capacity. ; If nc != current capacity Clone() the string in a string with the desired capacity. ; Definition at line 442 of file TString.cxx. ◆ Chop(). TString & TString::Chop ; (; ). inline . Definition at line 691 of file TString.h. ◆ Class(). static TClass * TString::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TString::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TString::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 473 of file TString.h. ◆ Clear(). void TString::Clear ; (; ). Clear string without changing its capacity. ; Definition at line 1235 of file TString.cxx. ◆ Clobber(). Ssiz_t TString::Clobber ; (; Ssiz_t ; nc). protected . Clear string and make sure it has a capacity of nc. ; WarningIf nc > MaxSize(), then Fatal() is raised, and only MaxSize() elements are allocated if Fatal does not abort ; ReturnsResulting allocated capacity (after clamping, if needed) ; Definition at line 1246 of file TString.cxx. ◆ Clone(). void TString::Clone ; (; Ssiz_t ; tot). private . Make self a distinct copy with capacity of at least tot, where tot cannot be smaller than the current length. ; Preserve previous contents. WarningIf tot > MaxSize(), then Fatal() is raised and only MaxSize() elements are allocated ; Definition at line 1279 of file TString.cxx. ◆ CompareTo() [1/2]. int TString::CompareTo ; (; const char * ; cs2, . ECaseCompare ; cmp = kExact . ); const. Compare a string to char *cs2. ; Returns returns zero if the two strings are identical, otherwise returns the difference between",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTString.html:25105,Clear,Clear,25105,doc/master/classTString.html,https://root.cern,https://root.cern/doc/master/classTString.html,2,['Clear'],['Clear']
Usability,_t Time_t ChangeProperties. Definition at line 249 of file TGWin32VirtualXProxy.cxx. ◆ child. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t child. Definition at line 180 of file TGWin32VirtualXProxy.cxx. ◆ chupx. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void chupx. Definition at line 116 of file TGWin32VirtualXProxy.cxx. ◆ chupy. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void chupy. Definition at line 116 of file TGWin32VirtualXProxy.cxx. ◆ cindex. Option_t Option_t cindex. Definition at line 50 of file TGWin32VirtualXProxy.cxx. ◆ ClearWindow. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t ClearWindow. Definition at line 182 of file TGWin32VirtualXProxy.cxx. ◆ clipboard. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void clipboard. Definition at line 136 of file TGWin32VirtualXProxy.cxx. ◆ ClosePixmap. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize ClosePixmap. Definition at line 88 of file TGWin32VirtualXProxy.cxx. ◆ cmap. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html:155864,Clear,ClearWindow,155864,doc/master/TGWin32VirtualXProxy_8cxx.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html,2,['Clear'],['ClearWindow']
Usability,"_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); static voidApproximate(Bool_t approx = kTRUE); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); voidBuildOptions(Double_t tmin, Double_t tmax, Option_t* option); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* h1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile3D.html:3532,Clear,Clear,3532,root/html602/TProfile3D.html,https://root.cern,https://root.cern/root/html602/TProfile3D.html,2,['Clear'],['Clear']
Usability,"_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); static voidApproximate(Bool_t approx = kTRUE); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); voidBuildOptions(Double_t ymin, Double_t ymax, Option_t* option); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* h1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile.html:3917,Clear,Clear,3917,root/html602/TProfile.html,https://root.cern,https://root.cern/root/html602/TProfile.html,2,['Clear'],['Clear']
Usability,"_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); static voidApproximate(Bool_t approx = kTRUE); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); voidBuildOptions(Double_t zmin, Double_t zmax, Option_t* option); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* h1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile2D.html:3462,Clear,Clear,3462,root/html602/TProfile2D.html,https://root.cern,https://root.cern/root/html602/TProfile2D.html,2,['Clear'],['Clear']
Usability,"_t align); Delegate to gVirtualX. void SetTextAngle(Float_t tangle); Delegate to gVirtualX. void SetTextColor(Color_t tcolor); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending); Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y). void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); That's a special version",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPadPainter.html:5991,simpl,simple,5991,root/html602/TPadPainter.html,https://root.cern,https://root.cern/root/html602/TPadPainter.html,1,['simpl'],['simple']
Usability,"_t align); Delegate to gVirtualX. void SetTextAngle(Float_t tangle); Delegate to gVirtualX. void SetTextColor(Color_t tcolor); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending); Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); Paint Polyline. void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); Special ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPadPainter.html:5991,simpl,simple,5991,root/html604/TPadPainter.html,https://root.cern,https://root.cern/root/html604/TPadPainter.html,1,['simpl'],['simple']
Usability,"_t align=11)Set the text alignment.Definition TAttText.h:42; TBenchmark::GetBenchInt_t GetBench(const char *name) constReturns index of Benchmark name.Definition TBenchmark.cxx:106; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::GetFunctionvirtual TF1 * GetFunction(const char *name) constReturn pointer to function with name.Definition TH1.cxx:9051; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::SetGridvoid SetGrid(Int_t valuex=1, Int_t valuey=1) overrideDefinition TPad.h:335; TPad::SetLogyvoid SetLogy(Int_t value=1) overrideSet Lin/Log scale for Y.Definition TPad.cxx:6100; TPad::RedrawAxisvoid RedrawAxis(Option_t *option="""") overrideRedraw the frame axis.Definition TPad.cxx:5450; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::GetFrameTFrame * GetFrame() overrideGet frame.Definition TPad.cxx:2955; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ntuple1_8C.html:5919,simpl,simple,5919,doc/master/ntuple1_8C.html,https://root.cern,https://root.cern/doc/master/ntuple1_8C.html,1,['simpl'],['simple']
Usability,"_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidCellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTEveElement::CSCTakeAnyParentAs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCaloData.html:2142,Clear,ClearStamps,2142,root/html528/TEveCaloData.html,https://root.cern,https://root.cern/root/html528/TEveCaloData.html,6,['Clear'],['ClearStamps']
Usability,"_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch<const char>(const char* name, const char* classname, const char* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch<void>(const char* name, void* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*TTree::BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*TTree::Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser* b); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual voidTChain::CanDeleteRefs(Bool_t flag = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConnectProof(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*TTree::CreateBasket(TBranch*); virtual voidTChain::CreatePackets(); Int_tDebug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidTChain::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofChain.html:3230,Clear,Clear,3230,root/html602/TProofChain.html,https://root.cern,https://root.cern/root/html602/TProofChain.html,2,['Clear'],['Clear']
Usability,"_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; virtual voidchangeBasis(RooFormulaVar* basis); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooResolutionModel.html:4847,clear,clearEvalError,4847,root/html534/RooResolutionModel.html,https://root.cern,https://root.cern/root/html534/RooResolutionModel.html,2,['clear'],['clearEvalError']
Usability,"_t col_upb,; Int_t nr_nonzeros=-1); change matrix shape to; row_lwb:row_upb x col_lwb:col_upb. SetRowIndexArray (Int_t *data); for sparse matrices, set the row index. The array data should contains at leastfNrows+1 entries column lower-bound index. SetColIndexArray (Int_t *data); for sparse matrices, set the column index. The array data should contains at least fNelems entries. SetSparseIndex (Int_t nelems new); allocate memory for a sparse map of nelems_new elements and copy (if exists) at most nelems_new matrix elements over to the new structure. SetSparseIndex (const TMatrixDBase &a); copy the sparse map from matrix a Note that this can be a dense matrix!. SetSparseIndexAB (const TMatrixDSparse &a, const TMatrixDSparse &b); set the sparse map to the same of the map of matrix a and b. The second half of the table is only relevant for sparse matrices. These methods define the sparse structure. It should be clear that a call to any of these methods has to be followed by a SetMatrixArray (…) which will supply the matrix data, see the next chapter “Creating and Filling a Matrix”.; 14.3 Creating and Filling a Matrix; The matrix constructors are listed in the next table. In the simplest ones, only the number of rows and columns is given. In a slightly more elaborate version, one can define the row and column index range. Finally, one can also define the matrix data in the constructor. In Matrix Operators and Methods we will encounter more fancy constructors that will allow arithmetic operations. TMatrixD(Int_t nrows,Int_t ncols); TMatrixD(Int_t row_lwb,Int_t row_upb,Int_t col_lwb,Int_t col_upb); TMatrixD(Int_t nrows,Int_t ncols,const Double_t *data, Option_t option= """"); TMatrixD(Int_t row_lwb,Int_t row_upb,Int_t col_lwb,Int_t col_upb,; const Double_t *data,Option_t *option=""""). TMatrixDSym(Int_t nrows); TMatrixDSym(Int_t row_lwb,Int_t row_upb); TMatrixDSym(Int_t nrows,const Double_t *data,Option_t *option=""""); TMatrixDSym(Int_t row_lwb,Int_t row_upb,const Double_t *data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:774768,clear,clear,774768,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['clear']
Usability,"_t color, Style_t style, Size_t msize)TAttMarker; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TH1(const TH1 &)=deleteTH1private; TH1()TH1protected; TH1(const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup)TH1protected; TH1(const char *name, const char *title, Int_t nbinsx, const Float_t *xbins)TH1protected; TH1(const char *name, const char *title, Int_t nbinsx, const Double_t *xbins)TH1protected; TH3()TH3protected; TH3(const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup)TH3protected; TH3(const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins)TH3protected; TH3(const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins)TH3protected; TH3(const TH3 &)=deleteTH3private; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TransformHisto(TVirtualFFT *fft, TH1 *h_output, Option_t *option)TH1static; UpdateBinContent(Int_t bin, Double_t content)TH1protectedvirtual; UseCurrentStyle() overrideTH1virtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAtt3D()TAtt3Dinlinevirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TH1() overrideTH1; ~TH3() overrideTH3; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3-members.html:28537,Guid,Guide,28537,doc/master/classTH3-members.html,https://root.cern,https://root.cern/doc/master/classTH3-members.html,1,['Guid'],['Guide']
Usability,"_t compress = 1); virtual~TDCacheFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static Bool_tCheckFile(const char* path, const char* location = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidTFile::Close(Option_t* option = """")MENU ; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDCacheFile.html:1702,Clear,Clear,1702,root/html526/TDCacheFile.html,https://root.cern,https://root.cern/root/html526/TDCacheFile.html,3,['Clear'],['Clear']
Usability,"_t compress = 1); virtual~TDCacheFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static Bool_tCheckFile(const char* path, const char* location = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidTFile::Close(Option_t* option = """")MENU ; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; virtual Bool_tTFile::Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TDCacheFile.html:1702,Clear,Clear,1702,root/html532/TDCacheFile.html,https://root.cern,https://root.cern/root/html532/TDCacheFile.html,1,['Clear'],['Clear']
Usability,"_t ctxt_cursor = strlen(context->GetName());; 1542 for (size_t level = 0; ctxt_cursor != 0; --ctxt_cursor) {; 1543 switch (context->GetName()[ctxt_cursor]) {; 1544 case '<': --level; break;; 1545 case '>': ++level; break;; 1546 case ':': if (level == 0) {; 1547 // we encountered a scope not within a template; 1548 // parameter.; 1549 alternate.clear();; 1550 alternate.append(context->GetName(),ctxt_cursor+1);; 1551 alternate.append(name);; 1552 altcl = TClass::GetClass(alternate.c_str(),/*load=*/ false,true);; 1553 if (altcl) {; 1554 newName.append(altcl->GetName());; 1555 newName.append(suffix);; 1556 return altcl;; 1557 }; 1558 }; 1559 }; 1560 }; 1561 newName.clear();; 1562 return 0;; 1563 }; 1564 ; 1565 TClass *FixCollectionV5(TClass *context, TClass *oldClass, TClass *newClass); 1566 {; 1567 assert(oldClass->GetCollectionProxy() && newClass->GetCollectionProxy());; 1568 ; 1569 TVirtualCollectionProxy *old = oldClass->GetCollectionProxy();; 1570 TVirtualCollectionProxy *current = newClass->GetCollectionProxy();; 1571 Int_t stlkind = old->GetCollectionType();; 1572 ; 1573 if (stlkind == ROOT::kSTLmap || stlkind == ROOT::kSTLmultimap) {; 1574 ; 1575 if (current->GetValueClass() == nullptr) {; 1576 // This should really never happen (the content of map should always; 1577 // be a pair and thus have a TClass ... so let's just give up ...; 1578 // It actually happens in the case where one of the member is an; 1579 // enum that is part of dictionary payload that is not yet; 1580 // auto-loaded.; 1581 return nullptr;; 1582 }; 1583 TVirtualStreamerInfo *info = current->GetValueClass()->GetStreamerInfo();; 1584 if (info->GetElements()->GetEntriesFast() != 2) {; 1585 return oldClass;; 1586 }; 1587 TStreamerElement *f = (TStreamerElement*) info->GetElements()->At(0);; 1588 TStreamerElement *s = (TStreamerElement*) info->GetElements()->At(1);; 1589 ; 1590 // Since we do not create TClass for pair of unknown types, old->GetValueClass can; 1591 // be nullptr even-though the ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:59781,clear,clear,59781,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['clear'],['clear']
Usability,"_t dy, Double_t dz)Make in one step a volume pointing to a TGeoTrd1 shape with given medium.Definition TGeoManager.cxx:3293; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; TGeoManager::SetTopVisiblevoid SetTopVisible(Bool_t vis=kTRUE)make top volume visible on screenDefinition TGeoManager.cxx:2396; TGeoManager::MakeTubsTGeoVolume * MakeTubs(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a tube segment shape with given medium.Definition TGeoManager.cxx:3213; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23; TGeoRotationClass describing rotations.Definition TGeoMatrix.h:168; TGeoTranslationClass describing translations.Definition TGeoMatrix.h:116; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::SetVisibilityvoid SetVisibility(Bool_t vis=kTRUE) overrideset visibility of this volumeDefinition TGeoVolume.cxx:2347; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; TGeoVolume::AddNodeOverlapvirtual void AddNodeOverlap(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:1044; TGeoVolume::SetLineColorvoid SetLineColor(Color_t lcolor) overrideSet the line color.Definition TGeoVolume.cxx:2169; F#define F(x, y, z); AuthorHyung Ju Lee (lacca.nosp@m.lus@.nosp@m.nate..nosp@m.com), Dept. of Physics, Univ. of Seoul ; Definition in file building.C. tutorialsgeombuilding.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/building_8C.html:53391,Guid,Guide,53391,doc/master/building_8C.html,https://root.cern,https://root.cern/doc/master/building_8C.html,1,['Guid'],['Guide']
Usability,"_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); TGeoTrap(const char* name, Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); virtual~TGeoTrap(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGeoShape::AfterStreamer(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tTGeoArb8::Capacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGeoArb8::ComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidTGeoArb8::ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidTGeoArb8::ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); voidTGeoArb8::ComputeTwist(); virtual Bool_tTGeoArb8::Contains(const Double_t* point) const; virtual voidTGeoArb8::Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoBBox::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrap.html:2334,Clear,ClearThreadData,2334,root/html534/TGeoTrap.html,https://root.cern,https://root.cern/root/html534/TGeoTrap.html,1,['Clear'],['ClearThreadData']
Usability,"_t f)TObjectinline; Resize(Int_t delta=0)TEventListvirtual; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetDelta(Int_t delta=100)TEventListinlinevirtual; SetDirectory(TDirectory *dir)TEventListvirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetName(const char *name) overrideTEventListvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetReapplyCut(bool apply=false)TEventListinlinevirtual; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Sort()TEventListvirtual; Streamer(TBuffer &) overrideTEventListvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TEventListinline; Subtract(const TEventList *list)TEventListvirtual; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TEventList()TEventList; TEventList(const char *name, const char *title="""", Int_t initsize=0, Int_t delta=0)TEventList; TEventList(const TEventList &list)TEventList; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TEventList() overrideTEventList; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventList-members.html:7227,Guid,Guide,7227,doc/master/classTEventList-members.html,https://root.cern,https://root.cern/doc/master/classTEventList-members.html,1,['Guid'],['Guide']
Usability,"_t fGeneric;; 106 Ctor_t fCtor;; 107 Dtor_t fDtor;; 108 };; 109 };; 110 ; 111 class SuspendAutoParsing {; 112 TInterpreter *fInterp;; 113 Bool_t fPrevious;; 114 public:; 115 SuspendAutoParsing(TInterpreter *where, Bool_t value = kTRUE) : fInterp(where), fPrevious(fInterp->SetSuspendAutoParsing(value)) {}; 116 ~SuspendAutoParsing() { fInterp->SetSuspendAutoParsing(fPrevious); }; 117 };; 118 virtual Bool_t IsAutoParsingSuspended() const = 0;; 119 ; 120 class SuspendAutoLoadingRAII {; 121 TInterpreter *fInterp = nullptr;; 122 bool fOldValue;; 123 ; 124 public:; 125 SuspendAutoLoadingRAII(TInterpreter *interp) : fInterp(interp); 126 {; 127 fOldValue = fInterp->SetClassAutoLoading(false);; 128 }; 129 ~SuspendAutoLoadingRAII() { fInterp->SetClassAutoLoading(fOldValue); }; 130 };; 131 ; 132 typedef int (*AutoLoadCallBack_t)(const char*);; 133 typedef std::vector<std::pair<std::string, int> > FwdDeclArgsToKeepCollection_t;; 134 ; 135 TInterpreter() { } // for Dictionary; 136 TInterpreter(const char *name, const char *title = ""Generic Interpreter"");; 137 virtual ~TInterpreter() { }; 138 ; 139 virtual void AddIncludePath(const char *path) = 0;; 140 virtual void *SetAutoLoadCallBack(void* /*cb*/) { return nullptr; }; 141 virtual void *GetAutoLoadCallBack() const { return nullptr; }; 142 virtual Int_t AutoLoad(const char *classname, Bool_t knowDictNotLoaded = kFALSE) = 0;; 143 virtual Int_t AutoLoad(const std::type_info& typeinfo, Bool_t knowDictNotLoaded = kFALSE) = 0;; 144 virtual Int_t AutoParse(const char* cls) = 0;; 145 virtual void ClearFileBusy() = 0;; 146 virtual void ClearStack() = 0; // Delete existing temporary values; 147 virtual Bool_t Declare(const char* code) = 0;; 148 virtual void EndOfLineAction() = 0;; 149 virtual TClass *GetClass(const std::type_info& typeinfo, Bool_t load) const = 0;; 150 virtual Int_t GetExitCode() const = 0;; 151 virtual TEnv *GetMapfile() const { return nullptr; }; 152 ///\brief Returns whether the interpreter is waiting for more input, i.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TInterpreter_8h_source.html:4611,Clear,ClearFileBusy,4611,doc/master/TInterpreter_8h_source.html,https://root.cern,https://root.cern/doc/master/TInterpreter_8h_source.html,2,['Clear'],"['ClearFileBusy', 'ClearStack']"
Usability,"_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of conditional product terms. void fixRefRange(const char* rangeName). std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Forward the plot sampling hint from the p.d.f. that defines the observable obs. Bool_t isBinnedDistribution(const RooArgSet& obs) const; If all components that depend on obs are binned that so is the product. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Forward the plot sampling hint from the p.d.f. that defines the observable obs. void setCacheAndTrackHints(RooArgSet& ); Label OK'ed components of a RooProdPdf with cache-and-track, _and_ label all RooProdPdf; descendants with extra informationa about (conditional) normalization, needed to be able; to Cache-And-Track them outside the RooprodPdf context. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooProdPdf to more intuitively reflect the contents of the; product operator construction. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Implement support for node removal. TObject* clone(const char* newname) const; { return new RooProdPdf(*this,newname) ; }. Bool_t selfNormalized() const; { return _selfNorm ; }. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; { return _pdfList ; }. void setSelfNormalized(Bool_t flag); { _selfNorm = flag ; }. void setDefNormSet(const RooArgSet& nset); { _defNormSet.removeAll() ; _defNormSet.addClone(nset) ; }. CacheMode canNodeBeCached() const; { return RooAbsArg::NotAdvised ; }. void useDefaultGen(Bool_t flag = kTRUE); { _useDefaultGen = flag ; }. » Last changed: Tue Jun 2 15:33:05 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooProdPdf.html:61060,intuit,intuitively,61060,root/html604/RooProdPdf.html,https://root.cern,https://root.cern/root/html604/RooProdPdf.html,1,['intuit'],['intuitively']
Usability,"_t frac); Change the size of the buffer on either side of the observable range to frac times the; size of the range of the convolution observable. void setBufferStrategy(RooFFTConvPdf::BufStrat bs); Change strategy to fill the overflow buffer on either side of the convolution observable range. 'Extend' means is that the input p.d.f convolution observable range is widened to include the buffer range; 'Flat' means that the buffer is filled with the p.d.f. value at the boundary of the observable range; 'Mirror' means that the buffer is filled with a ,irror image of the p.d.f. around the convolution observable boundary. The default strategy is extend. If one of the input p.d.f.s is a RooAddPdf, it is configured so that the interpretation; range of the fraction coefficients is kept at the nominal convolutions observable range (instead of interpreting coefficients; in the widened range including the buffer). void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. void calcParams(); (Re)calculate effective parameters of this p.d.f. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); calcParams() ;. RooFFTConvPdf(); coverity[UNINIT_CTOR]. TObject* clone(const char* newname) const; { return new RooFFTConvPdf(*this,newname); }. void setShift(Double_t val1, Double_t val2); { _shift1 = val1 ; _shift2 = val2 ; }. void setCacheObservables(const RooArgSet& obs); { _cacheObs.removeAll() ; _cacheObs.add(obs) ; }. const RooArgSet& cacheObservables() const; { return _cacheObs ; }. Double_t bufferFraction() const; Return value of buffer fraction applied in FFT calculation array beyond either; end of the observable domain to reduce cyclical effects. BufStrat bufferStrategy() const; Return the strategy currently used to fill the buffer:; 'Extend' means is that the input p.d.f convolution observable r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFFTConvPdf.html:51557,intuit,intuitively,51557,root/html528/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html528/RooFFTConvPdf.html,6,['intuit'],['intuitively']
Usability,"_t frac); Change the size of the buffer on either side of the observable range to frac times the; size of the range of the convolution observable. void setBufferStrategy(RooFFTConvPdf::BufStrat bs); Change strategy to fill the overflow buffer on either side of the convolution observable range. 'Extend' means is that the input p.d.f convolution observable range is widened to include the buffer range; 'Flat' means that the buffer is filled with the p.d.f. value at the boundary of the observable range; 'Mirror' means that the buffer is filled with a ,irror image of the p.d.f. around the convolution observable boundary. The default strategy is extend. If one of the input p.d.f.s is a RooAddPdf, it is configured so that the interpretation; range of the fraction coefficients is kept at the nominal convolutions observable range (instead of interpreting coefficients; in the widened range including the buffer). void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. void calcParams(); (Re)calculate effective parameters of this p.d.f. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); calcParams() ;. RooFFTConvPdf(); {}. TObject* clone(const char* newname) const; { return new RooFFTConvPdf(*this,newname); }. void setShift(Double_t val1, Double_t val2); { _shift1 = val1 ; _shift2 = val2 ; }. void setCacheObservables(const RooArgSet& obs); { _cacheObs.removeAll() ; _cacheObs.add(obs) ; }. const RooArgSet& cacheObservables() const; { return _cacheObs ; }. Double_t bufferFraction() const; Return value of buffer fraction applied in FFT calculation array beyond either; end of the observable domain to reduce cyclical effects. BufStrat bufferStrategy() const; Return the strategy currently used to fill the buffer:; 'Extend' means is that the input p.d.f convolution observable range is widened to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFFTConvPdf.html:51016,intuit,intuitively,51016,root/html526/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html526/RooFFTConvPdf.html,1,['intuit'],['intuitively']
Usability,"_t h, Float_t l, Float_t s, Float_t &r, Float_t &g, Float_t &b)Definition TColor.h:77; TColor::ListColorsstatic void ListColors(Int_t ci1=0, Int_t ci2=0, Bool_t showEmpty=kFALSE)List nb colors from the color index ci.Definition TColor.cxx:2395; TColor::TColorTColor()Default constructor.Definition TColor.cxx:1061; TColor::fNumberInt_t fNumberColor number identifier.Definition TColor.h:23; TColor::CreateColorsRectanglestatic void CreateColorsRectangle(Int_t offset, const char *name, UChar_t *rgb)Create the ""rectangular"" colors in the color wheel.Definition TColor.cxx:1397; TColor::fBlueFloat_t fBlueFraction of Blue.Definition TColor.h:27; TColor::CreateColorsGraystatic void CreateColorsGray()Create the Gray scale colors in the Color Wheel.Definition TColor.cxx:1362; TColor::SetAlphavirtual void SetAlpha(Float_t a)Definition TColor.h:70; TColor::GetGrayscalevirtual Float_t GetGrayscale() constDefinition TColor.h:67; TColor::~TColorvirtual ~TColor()Color destructor.Definition TColor.cxx:1138; TColor::fRedFloat_t fRedFraction of Red.Definition TColor.h:25; TColor::RGB2HLSstatic void RGB2HLS(Float_t r, Float_t g, Float_t b, Float_t &h, Float_t &l, Float_t &s)Static method to compute HLS from RGB.Definition TColor.cxx:1716; TColor::GetColorTransparentstatic Int_t GetColorTransparent(Int_t color, Float_t a)Static function: Returns the transparent color number corresponding to n.Definition TColor.cxx:2174; TColor::SetGrayscalestatic void SetGrayscale(Bool_t set=kTRUE)Set whether all colors should return grayscale values.Definition TColor.cxx:2592; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; bool; double; int; unsigned int; v@ vDefinition rootcling_impl.cxx:3699; lTLine lDefinition textangle.C:4. corebaseincTColor.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8h_source.html:22010,Guid,Guide,22010,doc/master/TColor_8h_source.html,https://root.cern,https://root.cern/doc/master/TColor_8h_source.html,1,['Guid'],['Guide']
Usability,"_t i=0) const;  ; virtual bool IncludeRange (TLeaf *);  ; virtual bool IsOnTerminalBranch () const;  ; virtual bool IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafD.html:4555,Clear,Clear,4555,doc/master/classTLeafD.html,https://root.cern,https://root.cern/doc/master/classTLeafD.html,2,['Clear'],['Clear']
Usability,"_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len);  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; virtual void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len);  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; virtual void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr);  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; virtual Bool_t CheckEvent (Window_t id, EGEventType type, Event_t &ev);  Check if there is for window ""id"" an event of type ""type"". ;  ; virtual void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h);  Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ;  ; virtual void ClearWindow ();  Clears the entire area of the current window. ;  ; virtual void ClearWindow (Window_t id);  Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ;  ; virtual void CloseDisplay ();  Closes connection to display server and destroys all windows. ;  ; virtual void ClosePixmap ();  Deletes current pixmap. ;  ; virtual void CloseWindow ();  Deletes current window. ;  ; virtual void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when);  Causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; virtual void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &);  Requests that the specified selection be converted to the specified target type. ;  ; virtual void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y);  Combines the specified rectangle of ""src"" with the specified rectangle of ""dest"" according to the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:3666,Clear,ClearWindow,3666,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,2,['Clear'],"['ClearWindow', 'Clears']"
Usability,"_t length); char*GetWord(ULong_t pos); voidInsChar(ULong_t pos, char character); voidInsText(ULong_t pos, const char* text); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. TGTextLine(const TGTextLine&); TGTextLine&operator=(const TGTextLine&). Data Members; protected:. ULong_tfLengthlength of line; TGTextLine*fNextnext line; TGTextLine*fPrevprevious line; char*fStringline of text. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextLine(); Create empty line of text (default ctor). TGTextLine(TGTextLine* line); Initialize line of text with other line of text (not copy ctor). TGTextLine(const char* string); Initialize line of text with a const char*. TGTextLine(const TGTextLine& ); copy constructor. TGTextLine& operator=(const TGTextLine& ); assignment operator. ~TGTextLine(); Delete a line of text. void Clear(); Clear a line of text. void DelText(ULong_t pos, ULong_t length); Delete length chars from line starting at position pos. void InsText(ULong_t pos, const char* text); Insert text in line starting at position pos. char * GetText(ULong_t pos, ULong_t length); Get length characters from line starting at pos. Returns 0; in case pos and length are out of range. The returned string; must be freed by the user. char * GetWord(ULong_t pos); Get word at position. Returned string must be deleted. void DelChar(ULong_t pos); Delete a character from the line. void InsChar(ULong_t pos, char character); Insert a character at the specified position. char GetChar(ULong_t pos); Get a character at the specified position from the line.; Returns -1 if pos is out of range. ULong_t GetLineLength(); { return fLength; }. char * GetText(ULong_t pos, ULong_t length). » Author: Fons Rademakers 26/04/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGTextLine.html:1830,Clear,Clear,1830,root/html534/TGTextLine.html,https://root.cern,https://root.cern/root/html534/TGTextLine.html,2,['Clear'],['Clear']
Usability,"_t master=kFALSE) const;  ; Long_t GetVirtMemMax (Bool_t master=kFALSE) const;  ; TClass * IsA () const override;  ; Bool_t IsOk () const;  ; virtual Int_t Merge (TCollection *list);  PROOF Merge() function. ;  ; const char * NextMesg ();  Return the next message or 0. ;  ; void Print (Option_t *option="""") const override;  Standard print function. ;  ; void Reset ();  Reset the iterator on the messages. ;  ; void SetExitStatus (Int_t est);  ; void SetMemValues (Long_t vmem=-1, Long_t rmem=-1, Bool_t master=kFALSE);  Set max memory values. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TStatus. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatus.html:2506,Clear,Clear,2506,doc/master/classTStatus.html,https://root.cern,https://root.cern/doc/master/classTStatus.html,1,['Clear'],['Clear']
Usability,"_t nrows = 6, ncolumns = 5;; Double_t** data = new Double_t*[nrows];; for (i = 0; i < nrows; i++) {; data[i] = new Double_t[ncolumns];; for (j = 0; j < ncolumns; j++) {; data[i][j] = 10 * i + j;; }; }. // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create an interface; TGSimpleTableInterface *iface = new TGSimpleTableInterface(data, 6, 5); . // Create the table; TGTable *table = new TGTable(mainframe, 999, iface); . // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. //Update data; data[5][1] = 3.01; ; //update the table view; table->Update(); . // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;; }; It is also possible to visualise data from a tree. A simple macro; showing the use of a TTreeTableInterface follows. Picture; Source. {; // Open a root file.; TFile *file = new TFile(""$ROOTSYS/tutorials/hsimple.root"");; // Load a tree from the file; TNtuple *ntuple = (TNtuple *)file.Get(""ntuple"");. // Create an interface; TTreeTableInterface *iface = new TTreeTableInterface(ntuple); . // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;. // Create the table; TGTable *table = new TGTable(mainframe, 999, iface, 10, 6); . // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));. // Set a selection; iface->SetSelection(""px > 0."");; // Add a column; iface->AddColumn(""(px+py)/(px-py)"", 0);; //update the table view; table->Update(); . // Layout and map the main frame; mainframe->SetWindowName(""Tree Table Test"") ;; mainframe->MapSubwindows() ;; mainframe->Layout();; mainframe->Resize() ;; mainframe->MapWindow() ;. return mainframe;;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTable.html:2621,simpl,simple,2621,root/html528/TGTable.html,https://root.cern,https://root.cern/root/html528/TGTable.html,6,['simpl'],['simple']
Usability,"_t ntracks=1000000, Double_t vx=0., Double_t vy=0., Double_t vz=0., Option_t *option=""ob"");  Geometry checking. ;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""");  Check all geometry for illegal overlaps within a limit OVLP. ;  ; Bool_t CheckPath (const char *path) const;  Check if a geometry path is valid without changing the state of the current navigator. ;  ; void CheckPoint (Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.);  Classify a given point. See TGeoChecker::CheckPoint(). ;  ; void CheckShape (TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option);  Test for shape navigation methods. ;  ; void CleanGarbage ();  Clean temporary volumes and shapes from garbage collection. ;  ; void ClearAttributes ();  Reset all attributes to default ones. ;  ; void ClearNavigators ();  Clear all navigators. ;  ; void ClearOverlaps ();  Clear the list of overlaps. ;  ; void ClearPhysicalNodes (Bool_t mustdelete=kFALSE);  Clear the current list of physical nodes, so that we can start over with a new list. ;  ; void ClearShape (const TGeoShape *shape);  Remove a shape from the list of shapes. ;  ; void ClearThreadData () const;  ; void ClearTracks ();  ; void CloseGeometry (Option_t *option=""d"");  Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-time shapes)building the cache manager, voxelizing all volumes, counting the total number of physical nodes and registering the manager class to the browser. ;  ; void ConvertReflections ();  Convert all reflections in geometry to normal rotations + reflected shapes. ;  ; void CountLevels ();  Count maximum number of nodes per volume, maximum depth and maximum number of xtru vertices. ;  ; Int_t CountNodes (const TGeoVolume *vol=nullptr, Int_t nlevels=10000, Int_t option=0);  Count the total number of nodes starting from a volume, nlevels down. ;  ; TGeoParallelWorld * CreateParallelWorld (const char *name);  Create a parall",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:23905,Clear,ClearPhysicalNodes,23905,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,2,['Clear'],"['Clear', 'ClearPhysicalNodes']"
Usability,"_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); static voidAddEnvVar(const char* name, const char* value); voidAddFeedback(const char* name); Int_tAddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); voidAddInput(TObject* obj); voidAddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tArchive(Int_t query, const char* url); Int_tArchive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidBrowse(TBrowser* b); virtual Bool_tCancelStagingDataSet(const char* dataset); voidcd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tCleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidClearFeedback(); voidClearInput(); voidClearInputData(TObject* obj = 0); voidClearInputData(const char* name); Int_tClearPackage(const char* package); Int_tClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidClose(Option_t* option = """"); voidCloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* sl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:1970,Clear,Clear,1970,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['Clear'],['Clear']
Usability,"_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); TGeoConeSeg(const char* name, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); virtual~TGeoConeSeg(); voidTObject::AbstractMethod(const char* method) const; virtual voidAfterStreamer(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static Double_tCapacity(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); static voidComputeNormalS(const Double_t* point, const Double_t* dir, Double_t* norm, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoConeSeg.html:1639,Clear,ClearThreadData,1639,root/html534/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html534/TGeoConeSeg.html,1,['Clear'],['ClearThreadData']
Usability,"_t sortOrder);  ; Bool_t UseSignalTransform () const;  ; const std::vector< TMVA::VariableInfo > & Variables () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableDecorrTransform.html:4647,Clear,Clear,4647,doc/master/classTMVA_1_1VariableDecorrTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableDecorrTransform.html,6,['Clear'],['Clear']
Usability,"_t startz = 0)MENU ; voidRaytrace(Bool_t flag = kTRUE)TOGGLE GETTER ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRegisterYourself(Option_t* option = """"); voidRemoveNode(TGeoNode* node); TGeoNode*ReplaceNode(TGeoNode* nodeorig, TGeoShape* newshape = 0, TGeoMatrix* newpos = 0, TGeoMedium* newmed = 0); voidReplayCreation(const TGeoVolume* other); voidTGeoAtt::ResetAttBit(UInt_t f); virtual voidTAttFill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidSaveAs(const char* filename, Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidSelectVolume(Bool_t clear = kFALSE); voidSetActiveDaughters(Bool_t flag = kTRUE); voidSetActivity(Bool_t flag = kTRUE); voidSetAdded(); voidSetAsTopVolume()TOGGLE GETTER ; voidTGeoAtt::SetAttBit(UInt_t f); voidTGeoAtt::SetAttBit(UInt_t f, Bool_t set); voidSetAttVisibility(Bool_t vis); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCurrentPoint(Double_t x, Double_t y, Double_t z); voidSetCylVoxels(Bool_t flag = kTRUE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetField(TObject* field); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); voidSetFinder(TGeoPatternFinder* finder); voidSetInvisible(); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidSetLineColor(Color_t lcolor); virtual voidSetLineStyle(Style_t lstyle); virtual voidSetLineWidth(Width_t lwidth); virtual voidSetMedium(TGeoMedium* medium)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolume.html:16364,clear,clear,16364,root/html528/TGeoVolume.html,https://root.cern,https://root.cern/root/html528/TGeoVolume.html,3,['clear'],['clear']
Usability,"_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SimpleInterval&operator=(const RooStats::SimpleInterval&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); RooStats::SimpleIntervalSimpleInterval(const char* name = 0); RooStats::SimpleIntervalSimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalSimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SimpleInterval.html:4811,Simpl,SimpleIntervalSimpleInterval,4811,root/html526/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__SimpleInterval.html,4,['Simpl'],"['SimpleInterval', 'SimpleIntervalSimpleInterval']"
Usability,"_t theta, Double_t phi); TGeoTrap(Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); TGeoTrap(const char* name, Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); virtual~TGeoTrap(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tTGeoArb8::Capacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGeoArb8::ComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidTGeoArb8::ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); voidTGeoArb8::ComputeTwist(); virtual Bool_tTGeoArb8::Contains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoBBox::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoTrap.html:2294,Clear,ClearThreadData,2294,root/html532/TGeoTrap.html,https://root.cern,https://root.cern/root/html532/TGeoTrap.html,1,['Clear'],['ClearThreadData']
Usability,"_t xmax=1, Int_t npar=0, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault)TF1inline; TF1(const char *name, T(*fcn)(const T *, const Double_t *), Double_t xmin=0, Double_t xmax=1, Int_t npar=0, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault)TF1inline; TF1(const char *name, ROOT::Math::ParamFunctor f, Double_t xmin=0, Double_t xmax=1, Int_t npar=0, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault)TF1; TF1(const char *name, Func f, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault)TF1inline; TF1(const char *name, Func f, Double_t xmin, Double_t xmax, Int_t npar, const char *, EAddToList addToGlobList=EAddToList::kDefault)TF1inline; TF1(const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault)TF1inline; TF1(const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault)TF1inline; TF1(const TF1 &f1)TF1; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; Update()TF1virtual; UseCurrentStyle()TObjectvirtual; Variance(Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001)TF1inlinevirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TF1() overrideTF1; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1-members.html:20475,Guid,Guide,20475,doc/master/classTF1-members.html,https://root.cern,https://root.cern/doc/master/classTF1-members.html,1,['Guid'],['Guide']
Usability,"_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); virtual voidConnectSignals2Slots(); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); TGWindow&TGWindow::operator=(const TGWindow& tgw); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPconSection.html:15256,Clear,ClearFlags,15256,root/html528/TGeoPconSection.html,https://root.cern,https://root.cern/root/html528/TGeoPconSection.html,4,['Clear'],['ClearFlags']
Usability,"_t y, const char *text)TTextinlinevirtual; SetText(Double_t x, Double_t y, const wchar_t *text)TTextinlinevirtual; SetTextAlign(Short_t align=11)TAttTextinlinevirtual; SetTextAngle(Float_t tangle=0)TAttTextinlinevirtual; SetTextAttributes()TAttTextvirtual; SetTextColor(Color_t tcolor=1)TAttTextinlinevirtual; SetTextColorAlpha(Color_t tcolor, Float_t talpha)TAttTextvirtual; SetTextFont(Font_t tfont=62)TAttTextinlinevirtual; SetTextSize(Float_t tsize=1)TAttTextinlinevirtual; SetTextSizePixels(Int_t npixels)TAttTextvirtual; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetX(Double_t x)TTextinlinevirtual; SetY(Double_t y)TTextinlinevirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTTextvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TTextinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttText()TAttText; TAttText(Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize)TAttText; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TText()TTextinline; TText(Double_t x, Double_t y, const char *text)TText; TText(Double_t x, Double_t y, const wchar_t *text)TText; TText(const TText &text)TText; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttBBox2D()TAttBBox2Dvirtual; ~TAttText()TAttTextvirtual; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual; ~TText() overrideTText. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTText-members.html:9272,Guid,Guide,9272,doc/master/classTText-members.html,https://root.cern,https://root.cern/doc/master/classTText-members.html,1,['Guid'],['Guide']
Usability,"_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:4520,clear,clearValueAndShapeDirty,4520,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:2139,undo,undo,2139,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,12,['undo'],['undo']
Usability,"_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColumnLayout.html:3334,Clear,Clear,3334,doc/master/classTGColumnLayout.html,https://root.cern,https://root.cern/doc/master/classTGColumnLayout.html,12,['Clear'],['Clear']
Usability,"_t)Returns the area hyperbolic tangent of x.Definition TMath.cxx:95; TMath::BesselI0Double_t BesselI0(Double_t x)Integer order modified Bessel function K_n(x)Definition TMath.cxx:1426; TMath::VavilovSetvoid VavilovSet(Double_t rkappa, Double_t beta2, Bool_t mode, Double_t *WCM, Double_t *AC, Double_t *HC, Int_t &itype, Int_t &npt)Internal function, called by Vavilov and VavilovI.Definition TMath.cxx:2854; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::StudentIDouble_t StudentI(Double_t T, Double_t ndf)Calculates the cumulative distribution function of Student's t-distribution second parameter stands f...Definition TMath.cxx:2646; TMath::StudentQuantileDouble_t StudentQuantile(Double_t p, Double_t ndf, Bool_t lower_tail=kTRUE)Computes quantiles of the Student's t-distribution 1st argument is the probability,...Definition TMath.cxx:2674; TMath::BesselY1Double_t BesselY1(Double_t x)Bessel function Y0(x) for positive x.Definition TMath.cxx:1739; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; TMath::GammaDistDouble_t GammaDist(Double_t x, Double_t gamma, Double_t mu=0, Double_t beta=1)Computes the density function of Gamma distribution at point x.Definition TMath.cxx:2347; TMath::HCconstexpr Double_t HC()inDefinition TMath.h:233; TMath::ErfcInverseDouble_t ErfcInverse(Double_t x)Returns the inverse of the complementary error function.Definition TMath.cxx:242; TMath::EvenBool_t Even(Long_t a)Returns true if a is even.Definition TMathBase.h:113; v@ vDefinition rootcling_impl.cxx:3699; TMath::LimitsDefinition TMath.h:407; TMath::Limits::Epsilonstatic T Epsilon()Returns minimum double representation.Definition TMath.h:941; mTMarker mDefinition textangle.C:8; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. mathmathcoresrcTMath.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:131718,Guid,Guide,131718,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['Guid'],['Guide']
Usability,"_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:19316,undo,undo,19316,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,2,['undo'],['undo']
Usability,"_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 47 of file Adagrad.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 48 of file Adagrad.h. Constructor & Destructor Documentation. ◆ TAdagrad(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::TAdagrad ; (; DeepNet_t & ; deepNet, . Scalar_t ; learningRate = 0.01, . Scalar_t ; epsilon = 1e-8 . ). Constructor. ; Definition at line 90 of file Adagrad.h. ◆ ~TAdagrad(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::~TAdagrad ; (; ). default . Destructor. . Member Function Documentation. ◆ GetEpsilon(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::GetEpsilon ; (; ); const. inline . Getters. ; Definition at line 76 of file Adagrad.h. ◆ GetPastSquaredBiasGradients(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector< std::vector< Matrix_t > > & TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::GetPastSquare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html:4589,learn,learningRate,4589,doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,1,['learn'],['learningRate']
Usability,"_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 47 of file RMSProp.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 48 of file RMSProp.h. Constructor & Destructor Documentation. ◆ TRMSProp(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::TRMSProp ; (; DeepNet_t & ; deepNet, . Scalar_t ; learningRate = 0.001, . Scalar_t ; momentum = 0.0, . Scalar_t ; rho = 0.9, . Scalar_t ; epsilon = 1e-7 . ). Constructor. ; Definition at line 107 of file RMSProp.h. ◆ ~TRMSProp(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::~TRMSProp ; (; ). default . Destructor. . Member Function Documentation. ◆ GetBiasUpdates(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector< std::vector< Matrix_t > > & TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >::GetBiasUpdates ; (; ). inline . Definition at line 98 of file RMSProp.h. ◆ GetBiasUpdatesAt(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector< Matrix_t > & TMVA::DNN::TRMSProp< ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html:5612,learn,learningRate,5612,doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,1,['learn'],['learningRate']
Usability,"_t, Double_t) overrideTH2inlineprotectedvirtual; Build()TH1private; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *option="""") constTH1virtual; Class()TH2static; Class_Name()TH2static; Class_Version()TH2inlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearUnderflowAndOverflow()TH1virtual; Clone(const char *newname="""") const overrideTH1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral(Bool_t onlyPositive=false)TH1virtual; Copy(TObject &hnew) const overrideTH2virtual; TH1::TAttLine::Copy(TAttLine &attline) constTAttLine; TH1::TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; DeclFileName()TH2inlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TH1virtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTH1virtual; Divide(TF1 *f1, Double_t c1=1)TH1virtual; Divide(const TH1 *h1)TH1virtual; Divide(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""")TH1virtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2-members.html:2350,Clear,Clear,2350,doc/master/classTH2-members.html,https://root.cern,https://root.cern/doc/master/classTH2-members.html,1,['Clear'],['Clear']
Usability,"_t::const_iterator const_iterator;  ; typedef std::map< std::string, TClassRec * > IdMap_t;  ; typedef IdMap_t::key_type key_type;  ; typedef IdMap_t::mapped_type mapped_type;  ; typedef IdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type &obj);  ; mapped_type Find (const key_type &key) const;  ; void Print ();  ; void Remove (const key_type &key);  . Private Attributes; IdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef IdMap_t::const_iterator ROOT::TMapTypeToClassRec::const_iterator. Definition at line 151 of file TClassTable.cxx. ◆ IdMap_t. typedef std::map<std::string, TClassRec*> ROOT::TMapTypeToClassRec::IdMap_t. Definition at line 149 of file TClassTable.cxx. ◆ key_type. typedef IdMap_t::key_type ROOT::TMapTypeToClassRec::key_type. Definition at line 150 of file TClassTable.cxx. ◆ mapped_type. typedef IdMap_t::mapped_type ROOT::TMapTypeToClassRec::mapped_type. Definition at line 157 of file TClassTable.cxx. ◆ size_type. typedef IdMap_t::size_type ROOT::TMapTypeToClassRec::size_type. Definition at line 152 of file TClassTable.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapTypeToClassRec::Add ; (; const key_type & ; key, . mapped_type & ; obj . ). inline . Definition at line 164 of file TClassTable.cxx. ◆ Find(). mapped_type ROOT::TMapTypeToClassRec::Find ; (; const key_type & ; key); const. inline . Definition at line 168 of file TClassTable.cxx. ◆ Print(). void ROOT::TMapTypeToClassRec::Print ; (; ). inline . Definition at line 177 of file TClassTable.cxx. ◆ Remove(). void ROOT::TMapTypeToClassRec::Remove ; (; const key_type & ; key). inline . Definition at line 175 of file TClassTable.cxx. Member Data Documentation. ◆ fMap. IdMap_t ROOT::TMapTypeToClassRec::fMap. private . Definition at line 161 of file TClassTable.cxx. core/cont/src/TClassTable.cxx. ROOTTMapTypeToClassRec. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TMapTypeToClassRec.html:2279,Guid,Guide,2279,doc/v632/classROOT_1_1TMapTypeToClassRec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TMapTypeToClassRec.html,1,['Guid'],['Guide']
Usability,"_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir). Double_t DerivDir(TMatrixD& Dir). Bool_t LineSearch(TMatrixD& Dir, vector<Double_t>& Buffer, Double_t* dError = 0). void SetDirWeights(vector<Double_t>& Origin, TMatrixD& Dir, Double_t alpha). Double_t GetError(). Double_t GetMSEErr(const TMVA::Event* ev, UInt_t index = 0). Double_t GetCEErr(const TMVA::Event* ev, UInt_t index = 0). void BackPropagationMinimize(Int_t nEpochs); minimize estimator / train network with backpropagation algorithm. void TrainOneEpoch(); train network over a single epoch/cyle of events. void Shuffle(Int_t* index, Int_t n); Input:; index: the array to shuffle; n: the size of the array; Output:; index: the shuffled indexes; This method is used for sequential training. void DecaySynapseWeights(Bool_t lateEpoch); decay synapse weights; in last 10 epochs, lower learning rate even more to find a good minimum. void TrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); fast per-event training. void TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodMLP.html:28042,learn,learning,28042,root/html602/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodMLP.html,2,['learn'],['learning']
Usability,"_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir). Double_t DerivDir(TMatrixD& Dir). Bool_t LineSearch(TMatrixD& Dir, vector<Double_t>& Buffer, Double_t* dError = 0). void SetDirWeights(vector<Double_t>& Origin, TMatrixD& Dir, Double_t alpha). Double_t GetError(). Double_t GetMSEErr(const TMVA::Event* ev, UInt_t index = 0). Double_t GetCEErr(const TMVA::Event* ev, UInt_t index = 0). void BackPropagationMinimize(Int_t nEpochs); minimize estimator / train network with backpropagation algorithm. void TrainOneEpoch(); train network over a single epoch/cyle of events. void Shuffle(Int_t* index, Int_t n); Input:; index: the array to shuffle; n: the size of the array; Output:; index: the shuffled indexes; This method is used for sequential training. void DecaySynapseWeights(Bool_t lateEpoch); decay synapse weights; in last 10 epochs, lower learning rate even more to find a good minimum. void TrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); fast per-event training. void TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.0); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.0); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodMLP.html:25345,learn,learning,25345,root/html534/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodMLP.html,1,['learn'],['learning']
Usability,"_t>& Buffer). void ComputeDEDw(). void SimulateEvent(const TMVA::Event* ev). void SteepestDir(TMatrixD& Dir). Bool_t GetHessian(TMatrixD& Hessian, TMatrixD& Gamma, TMatrixD& Delta). void SetDir(TMatrixD& Hessian, TMatrixD& Dir). Double_t DerivDir(TMatrixD& Dir). Bool_t LineSearch(TMatrixD& Dir, vector<Double_t>& Buffer, Double_t* dError = 0). void SetDirWeights(vector<Double_t>& Origin, TMatrixD& Dir, Double_t alpha). Double_t GetError(). Double_t GetMSEErr(const TMVA::Event* ev, UInt_t index = 0). Double_t GetCEErr(const TMVA::Event* ev, UInt_t index = 0). void BackPropagationMinimize(Int_t nEpochs); minimize estimator / train network with backpropagation algorithm. void TrainOneEpoch(); train network over a single epoch/cyle of events. void Shuffle(Int_t* index, Int_t n); Input:; index: the array to shuffle; n: the size of the array; Output:; index: the shuffled indexes; This method is used for sequential training. void DecaySynapseWeights(Bool_t lateEpoch); decay synapse weights; in last 10 epochs, lower learning rate even more to find a good minimum. void TrainOneEventFast(Int_t ievt, Float_t*& branchVar, Int_t& type); fast per-event training. void TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.0); update the network based on how closely; the output matched the desired output. void UpdateNetwork(vector<Float_t>& desired, Double_t eventWeight = 1.0); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodMLP.html:24444,learn,learning,24444,root/html528/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodMLP.html,3,['learn'],['learning']
Usability,"_t>> EnvType_t;; 1099 EnvType_t *e = (EnvType_t *) fEnv;; 1100 return &(e->fIterator.second);; 1101 }; 1102 case ROOT::kSTLset:; 1103 case ROOT::kSTLunorderedset:; 1104 case ROOT::kSTLmultiset:; 1105 case ROOT::kSTLunorderedmultiset:; 1106 case ROOT::kSTLmap:; 1107 case ROOT::kSTLunorderedmap:; 1108 case ROOT::kSTLmultimap:; 1109 case ROOT::kSTLunorderedmultimap:; 1110 if ( fEnv->fUseTemp ) {; 1111 return (((char*)fEnv->fTemp)+idx*fValDiff);; 1112 }; 1113 // Intentional fall through.; 1114 default:; 1115 switch( idx ) {; 1116 case 0:; 1117 fEnv->fIdx = idx;; 1118 return fEnv->fStart = fFirst.invoke(fEnv);; 1119 default: {; 1120 fEnv->fIdx = idx - fEnv->fIdx;; 1121 if (! fEnv->fStart ) fEnv->fStart = fFirst.invoke(fEnv);; 1122 void* result = fNext.invoke(fEnv);; 1123 fEnv->fIdx = idx;; 1124 return result;; 1125 }; 1126 }; 1127 }; 1128 }; 1129 Fatal(""TGenCollectionProxy"",""At> Logic error - no proxy object set."");; 1130 return 0;; 1131}; 1132 ; 1133////////////////////////////////////////////////////////////////////////////////; 1134/// Clear the emulated collection.; 1135 ; 1136void TGenCollectionProxy::Clear(const char* opt); 1137{; 1138 if ( fEnv && fEnv->fObject ) {; 1139 if ( (fProperties & kNeedDelete) && opt && *opt=='f' ) {; 1140 size_t i, n = *(size_t*)fSize.invoke(fEnv);; 1141 if ( n > 0 ) {; 1142 for (i=0; i<n; ++i); 1143 DeleteItem(true, TGenCollectionProxy::At(i));; 1144 }; 1145 }; 1146 fClear.invoke(fEnv);; 1147 }; 1148}; 1149 ; 1150////////////////////////////////////////////////////////////////////////////////; 1151/// Return the current size of the container; 1152 ; 1153UInt_t TGenCollectionProxy::Size() const; 1154{; 1155 if ( fEnv && fEnv->fObject ) {; 1156 if (fEnv->fUseTemp) {; 1157 return fEnv->fSize;; 1158 } else {; 1159 return *(size_t*)fSize.invoke(fEnv);; 1160 }; 1161 }; 1162 Fatal(""TGenCollectionProxy"",""Size> Logic error - no proxy object set."");; 1163 return 0;; 1164}; 1165 ; 1166///////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:36820,Clear,Clear,36820,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['Clear'],['Clear']
Usability,"_tActivateWorker(const char* ord); voidAddChain(TChain* chain); Int_tAddDynamicPath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0); static voidAddEnvVar(const char* name, const char* value); voidAddFeedback(const char* name); Int_tAddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); voidAddInput(TObject* obj); voidAddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tArchive(Int_t query, const char* url); Int_tArchive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidBrowse(TBrowser* b); voidcd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tCleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidClearFeedback(); voidClearInput(); voidClearInputData(TObject* obj = 0); voidClearInputData(const char* name); Int_tClearPackage(const char* package); Int_tClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidClose(Option_t* option = """"); voidCloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* sl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:1840,Clear,Clear,1840,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['Clear'],['Clear']
Usability,"_tDefinition RtypesCore.h:59; kRed@ kRedDefinition Rtypes.h:66; kBlack@ kBlackDefinition Rtypes.h:65; kBlue@ kBlueDefinition Rtypes.h:66; gPad#define gPadDefinition TVirtualPad.h:308; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TBRIKA box with faces perpendicular to the axes.Definition TBRIK.h:26; TCONEA conical tube.Definition TCONE.h:28; TCONSA segment of a conical tube.Definition TCONS.h:27; TCanvasThe Canvas class.Definition TCanvas.h:23; TGTRAA general twisted trapezoid.Definition TGTRA.h:27; TNodeTNode description.Definition TNode.h:33; TNode::Drawvoid Draw(Option_t *option="""") overrideDraw Referenced node with current parameters.Definition TNode.cxx:322; TNode::cdvirtual void cd(const char *path=nullptr)Change Current Reference node to this.Definition TNode.cxx:249; TPARAA parallelepiped.Definition TPARA.h:30; TPCONA polycone.Definition TPCON.h:33; TPCON::DefineSectionvirtual void DefineSection(Int_t secNum, Float_t z, Float_t rmin, Float_t rmax)Defines section secNum of the polycone.Definition TPCON.cxx:174; TPGONA polygon.Definition TPGON.h:30; TSPHEA Sphere.Definition TSPHE.h:28; TTRAPA general trapezoid.Definition TTRAP.h:33; TTRD1A trapezoid with the x dimension varying along z.Definition TTRD1.h:28; TTRD2A trapezoid with both x and y dimensions varying along z.Definition TTRD2.h:29; TTUBEA tube.Definition TTUBE.h:32; TTUBSA segment of a tube.Definition TTUBS.h:29; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; TTimer::TurnOnvirtual void TurnOn()Add the timer to the system timer list.Definition TTimer.cxx:243; TTimer::SetCommandvoid SetCommand(const char *command)Set the interpreter command to be executed at time out.Definition TTimer.cxx:176; c1return c1Definition legend1.C:41; AuthorRene Brun ; Definition in file shapesAnim.C. tutorialsgeomshapesAnim.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/shapesAnim_8C.html:5468,Guid,Guide,5468,doc/master/shapesAnim_8C.html,https://root.cern,https://root.cern/doc/master/shapesAnim_8C.html,1,['Guid'],['Guide']
Usability,"_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTrd2Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for trd2 editor. ~TGeoTrd2Editor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoDx1(); Slot for dx1. void DoDx2(); Slot for dx2. void DoDy1(); Slot for dy1. void DoDy2(); Slot for dy2. void DoDz(); Slot for dz. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrd2Editor.html:21370,undo,undoing,21370,root/html534/TGeoTrd2Editor.html,https://root.cern,https://root.cern/root/html534/TGeoTrd2Editor.html,1,['undo'],['undoing']
Usability,"_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fAddButtonAdd >> button; TGCheckButton*fAppendFilesappend files; TGTextButton*fBrowseButtonBrowse... button; TGTextButton*fClearButtonClear button; TGTextButton*fCloseDlgButtonClose Dialog button; TGTextEntry*fDSetNamedataset name text entry; TGTextEntry*fDestinationURLdestination URL text entry; TGLVContainer*fLVContainerand its container; TGListView*fListViewdataset files list view; TGTextEntry*fLocationURLlocation URL text entry; TGCheckButton*fOverwriteDSetoverwrite DataSet; TGCheckButton*fOverwriteFilesoverwrite All Files; TGTextButton*fRemoveButtonRemove button; TList*fSkippedFilesList of skipped files; TGTextButton*fUploadButtonUpload button; Bool_tfUploading; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2). void CloseWindow(). TUploadDataSetDlg(TSessionViewer* gui, Int_t w, Int_t h). virtual ~TUploadDataSetDlg(). void AddFiles(const char* fileName). void AddFiles(TList* fileList). void BrowseFiles(). void ClearFiles(). void RemoveFile(). void UploadDataSet(). void OnOverwriteDataset(Bool_t on). void OnOverwriteFiles(Bool_t on). void OnAppendFiles(Bool_t on). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionDialogs.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUploadDataSetDlg.html:22948,Clear,ClearFiles,22948,root/html528/TUploadDataSetDlg.html,https://root.cern,https://root.cern/root/html528/TUploadDataSetDlg.html,1,['Clear'],['ClearFiles']
Usability,"_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fAddButtonAdd >> button; TGCheckButton*fAppendFilesappend files; TGTextButton*fBrowseButtonBrowse... button; TGTextButton*fClearButtonClear button; TGTextButton*fCloseDlgButtonClose Dialog button; TGTextEntry*fDSetNamedataset name text entry; TGTextEntry*fDestinationURLdestination URL text entry; TGLVContainer*fLVContainerand its container; TGListView*fListViewdataset files list view; TGTextEntry*fLocationURLlocation URL text entry; TGCheckButton*fOverwriteDSetoverwrite DataSet; TGCheckButton*fOverwriteFilesoverwrite All Files; TGTextButton*fRemoveButtonRemove button; TList*fSkippedFilesList of skipped files; TGTextButton*fUploadButtonUpload button; Bool_tfUploading; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2). void CloseWindow(). TUploadDataSetDlg(TSessionViewer* gui, Int_t w, Int_t h). virtual ~TUploadDataSetDlg(). void AddFiles(const char* fileName). void AddFiles(TList* fileList). void BrowseFiles(). void ClearFiles(). void RemoveFile(). void UploadDataSet(). void OnOverwriteDataset(Bool_t on). void OnOverwriteFiles(Bool_t on). void OnAppendFiles(Bool_t on). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionDialogs.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TUploadDataSetDlg.html:23103,Clear,ClearFiles,23103,root/html530/TUploadDataSetDlg.html,https://root.cern,https://root.cern/root/html530/TUploadDataSetDlg.html,1,['Clear'],['ClearFiles']
Usability,"_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fAddButtonAdd >> button; TGCheckButton*fAppendFilesappend files; TGTextButton*fBrowseButtonBrowse... button; TGTextButton*fClearButtonClear button; TGTextButton*fCloseDlgButtonClose Dialog button; TGTextEntry*fDSetNamedataset name text entry; TGTextEntry*fDestinationURLdestination URL text entry; TGLVContainer*fLVContainerand its container; TGListView*fListViewdataset files list view; TGTextEntry*fLocationURLlocation URL text entry; TGCheckButton*fOverwriteDSetoverwrite DataSet; TGCheckButton*fOverwriteFilesoverwrite All Files; TGTextButton*fRemoveButtonRemove button; TList*fSkippedFilesList of skipped files; TGTextButton*fUploadButtonUpload button; Bool_tfUploading; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2). void CloseWindow(). TUploadDataSetDlg(TSessionViewer* gui, Int_t w, Int_t h). virtual ~TUploadDataSetDlg(). void AddFiles(const char* fileName). void AddFiles(TList* fileList). void BrowseFiles(). void ClearFiles(). void RemoveFile(). void UploadDataSet(). void OnOverwriteDataset(Bool_t on). void OnOverwriteFiles(Bool_t on). void OnAppendFiles(Bool_t on). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionDialogs.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TUploadDataSetDlg.html:23103,Clear,ClearFiles,23103,root/html532/TUploadDataSetDlg.html,https://root.cern,https://root.cern/root/html532/TUploadDataSetDlg.html,1,['Clear'],['ClearFiles']
Usability,"_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static TGGC*TGContainer::fgLineGC; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. Cursor_tfCursorcurrent cursor; Cursor_tfDefaultCursordefault cursor; TList*fExpressionListlist of user defined expression widgets; TGListView*fListViewassociated list view; TTreeViewer*fViewerpointer to tree viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTVLVContainer(const TGWindow* p, UInt_t w, UInt_t h, UInt_t options = kSunkenFrame); TGLVContainer constructor. ~TTVLVContainer(); TGLVContainer destructor. const char* Cut(); return the cut entry. TTVLVEntry * ExpressionItem(Int_t index); return the expression item at specific position. TList* ExpressionList(); return the list of user-defined expressions. const char* Ex(); return the expression on X. const char* Ey(); return the expression on Y. const char* Ez(); return the expression on Z. const char* ScanList(); return the cut entry. Bool_t HandleButton(Event_t* event); Handle mouse button event in container. Bool_t HandleMotion(Event_t* event); Handle mouse motion events. void EmptyAll(); Clear all names and aliases for expression type items. void RemoveNonStatic(); remove all non-static items from the list view, except expressions. void SelectItem(const char* name); select an item. void AddThisItem(TTVLVEntry* item); { AddFrame(item, fItemLayout); item->SetColumns(fCpos, fJmode); }. TTreeViewer * GetViewer(); {return fViewer;}. void SetListView(TGListView* lv); {fListView = lv;}. void SetViewer(TTreeViewer* viewer); {fViewer = viewer;}. » Last changed: root/treeviewer:$Id: TTVLVContainer.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTVLVContainer.html:26076,Clear,Clear,26076,root/html530/TTVLVContainer.html,https://root.cern,https://root.cern/root/html530/TTVLVContainer.html,1,['Clear'],['Clear']
Usability,"_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static TGGC*TGContainer::fgLineGC; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. Cursor_tfCursorcurrent cursor; Cursor_tfDefaultCursordefault cursor; TList*fExpressionListlist of user defined expression widgets; TGListView*fListViewassociated list view; TTreeViewer*fViewerpointer to tree viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTVLVContainer(const TGWindow* p, UInt_t w, UInt_t h, UInt_t options = kSunkenFrame); TGLVContainer constructor. ~TTVLVContainer(); TGLVContainer destructor. const char* Cut(); return the cut entry. TTVLVEntry * ExpressionItem(Int_t index); return the expression item at specific position. TList* ExpressionList(); return the list of user-defined expressions. const char* Ex(); return the expression on X. const char* Ey(); return the expression on Y. const char* Ez(); return the expression on Z. const char* ScanList(); return the cut entry. Bool_t HandleButton(Event_t* event); Handle mouse button event in container. Bool_t HandleMotion(Event_t* event); Handle mouse motion events. void EmptyAll(); Clear all names and aliases for expression type items. void RemoveNonStatic(); remove all non-static items from the list view, except expressions. void SelectItem(const char* name); select an item. void AddThisItem(TTVLVEntry* item); { AddFrame(item, fItemLayout); item->SetColumns(fCpos, fJmode); }. TTreeViewer * GetViewer(); {return fViewer;}. void SetListView(TGListView* lv); {fListView = lv;}. void SetViewer(TTreeViewer* viewer); {fViewer = viewer;}. » Last changed: root/treeviewer:$Id: TTVLVContainer.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTVLVContainer.html:26076,Clear,Clear,26076,root/html532/TTVLVContainer.html,https://root.cern,https://root.cern/root/html532/TTVLVContainer.html,1,['Clear'],['Clear']
Usability,"_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tCancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord, Bool_t save = kTRUE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:2442,Clear,ClearPackage,2442,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,3,['Clear'],['ClearPackage']
Usability,"_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); Float_tTEveLine::CalculateLineLength() const; virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveTrack.html:2916,Clear,Clear,2916,root/html534/TEveTrack.html,https://root.cern,https://root.cern/root/html534/TEveTrack.html,3,['Clear'],['Clear']
Usability,"_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); Float_tTEveLine::CalculateLineLength() const; virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTEveTrack::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveTrackProjected.html:2565,Clear,Clear,2565,root/html534/TEveTrackProjected.html,https://root.cern,https://root.cern/root/html534/TEveTrackProjected.html,3,['Clear'],['Clear']
Usability,"_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); Float_tTEveLine::CalculateLineLength() const; virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveLineProjected.html:2453,Clear,Clear,2453,root/html534/TEveLineProjected.html,https://root.cern,https://root.cern/root/html534/TEveLineProjected.html,3,['Clear'],['Clear']
Usability,"_tTSelector::fStatusSelector status; TTree*fTree; TTreeDrawArgsParserfTreeDrawArgsParser; TTreeFormula*fVar[4]Pointer to variable formula; Double_tfWeightGlobal weight for fill actions; static TProofDraw::(anonymous)kWarn. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofDraw(); Constructor. ~TProofDraw(); Destructor. void Init(TTree* ); Init the tree. Bool_t Notify(); Called when a new tree is loaded. void Begin(TTree* ); Executed by the client before processing. void SlaveBegin(TTree* ); Executed by each slave before processing. void FillWeight(); Get weight from input list, if any. Bool_t ProcessSingle(Long64_t , Int_t ); Processes a single variable from an entry. Bool_t Process(Long64_t ); Executed for each entry. void SlaveTerminate(void); Executed by each slave after the processing has finished,; before returning the results to the client. void Terminate(void); Executed by the client after getting the processing retults. void ClearFormula(); Delete internal buffers. void SetCanvas(const char* objname); Move to a canvas named <name>_canvas; create the canvas if not existing.; Used to avoid screwing up existing plots when non default names are used; for the final objects. void SetDrawAtt(TObject* o); Set the drawing attributes from the input list. void SetError(const char* sub, const char* mesg); Sets the error status. Bool_t CompileVariables(); Compiles each variable from fTreeDrawArgsParser for the tree fTree.; Return kFALSE if any of the variable is not compilable. void DoFill(Long64_t entry, Double_t w, const Double_t* v). void DefVar(). TProofDraw(). int Version() const; { return 1; }. » Author: Maarten Ballintijn 24/09/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofDraw.html:8842,Clear,ClearFormula,8842,root/html604/TProofDraw.html,https://root.cern,https://root.cern/root/html604/TProofDraw.html,1,['Clear'],['ClearFormula']
Usability,"_tTSelector::fStatusSelector status; TTree*fTree; TTreeDrawArgsParserfTreeDrawArgsParser; TTreeFormula*fVar[4]Pointer to variable formula; Double_tfWeightGlobal weight for fill actions; static TProofDraw::(anonymous)kWarn. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofDraw(); Constructor. ~TProofDraw(); Destructor. void Init(TTree* ); Init the tree. Bool_t Notify(); Called when a new tree is loaded. void Begin(TTree* ); Executed by the client before processing. void SlaveBegin(TTree* ); Executed by each slave before processing. void FillWeight(); Get weight from input list, if any. Bool_t ProcessSingle(Long64_t , Int_t ); Processes a single variable from an entry. Bool_t Process(Long64_t ); Executed for each entry. void SlaveTerminate(void); Executed by each slave after the processing has finished,; before returning the results to the client. void Terminate(void); Executed by the client after getting the processing retults. void ClearFormula(); Delete internal buffers. void SetCanvas(const char* objname); Move to a canvas named <name>_canvas; create the canvas if not existing.; Used to avoid screwing up existing plots when non default names are used; for the final objects. void SetDrawAtt(TObject* o); Set the drawing attributes from the input list. void SetError(const char* sub, const char* mesg); Sets the error status. Bool_t CompileVariables(); Compiles each variable from fTreeDrawArgsParser for the tree fTree.; Return kFALSE if any of the variable is not compilable. void DoFill(Long64_t entry, Double_t w, const Double_t* v). void DefVar(). TProofDraw(). int Version() const; { return 1; }. » Author: Maarten Ballintijn 24/09/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-30 15:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDraw.html:8842,Clear,ClearFormula,8842,root/html602/TProofDraw.html,https://root.cern,https://root.cern/root/html602/TProofDraw.html,1,['Clear'],['ClearFormula']
Usability,"_t_shapeDirtyFlag set if value needs recalculating because input shapes modified; map<std::string,std::string>_stringAttribString attributes; Bool_t_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_t_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t inhibitDirty(); { return _inhibitDirty ; }. ~RooAbsArg(); Destructor. void setDirtyInhibit(Bool_t flag); Control global dirty inhibit mode. When set to true no value or shape dirty; flags are propagated and cache is always considered to be dirty. void verboseDirty(Bool_t flag); Activate verbose messaging related to dirty flag propagation. Bool_t isCloneOf(const RooAbsArg& other) const; Check if this object was created as a clone of 'other'. void setAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes are unset. void setStringAttribute(const Text_t* key, const Text_t* value); Associate string 'value' to this object under key 'key'. const Text_t* getStringAttribute(const Text_t* key) const; Get string attribute mapped under key 'key'. Returns null pointer; if no attribute exists under that key. void setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getTransientAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes; are unset. void addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register another RooAbsArg as a server to us, ie, declare that; we depend on it. In addition to the basic client-server relationship,; we can declare dependence on the server's",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsArg.html:18534,clear,clear,18534,root/html532/RooAbsArg.html,https://root.cern,https://root.cern/root/html532/RooAbsArg.html,1,['clear'],['clear']
Usability,"_tag = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveRGBAPalette*TEveDigitSet::AssertPalette(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveBoxSet.html:3440,Clear,Clear,3440,root/html528/TEveBoxSet.html,https://root.cern,https://root.cern/root/html528/TEveBoxSet.html,12,['Clear'],['Clear']
Usability,"_tfNReadPrefNumber of blocks that were prefetched; Int_tTFileCacheRead::fNbNumber of long buffers; Int_tfNbranches! Number of branches in the cache; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tfOneTime! used in the learning phase ; TTree*fOwner! pointer to the owner Tree/chain; Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch!Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.; Bool_tfReadDirectionSet! read direction established; Bool_tfReverseRead! reading in reverse mode ; Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; Long64_tfZipBytes! Total compressed size of branches in cache; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor. void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCache.html:18969,learn,learning,18969,root/html530/TTreeCache.html,https://root.cern,https://root.cern/root/html530/TTreeCache.html,1,['learn'],['learning']
Usability,_t ; y . ). inline . Definition at line 28 of file TPoints.h. ◆ ~TPoints(). virtual TPoints::~TPoints ; (; ). inlinevirtual . Definition at line 29 of file TPoints.h. Member Function Documentation. ◆ Class(). static TClass * TPoints::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPoints::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPoints::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 35 of file TPoints.h. ◆ DeclFileName(). static const char * TPoints::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 35 of file TPoints.h. ◆ GetX(). Double_t TPoints::GetX ; (; ); const. inline . Definition at line 30 of file TPoints.h. ◆ GetY(). Double_t TPoints::GetY ; (; ); const. inline . Definition at line 31 of file TPoints.h. ◆ IsA(). virtual TClass * TPoints::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 35 of file TPoints.h. ◆ SetX(). void TPoints::SetX ; (; Double_t ; x). inline . Definition at line 32 of file TPoints.h. ◆ SetY(). void TPoints::SetY ; (; Double_t ; y). inline . Definition at line 33 of file TPoints.h. ◆ Streamer(). virtual void TPoints::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TPoints::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 35 of file TPoints.h. Member Data Documentation. ◆ fX. Double_t TPoints::fX. private . X world coordinate. ; Definition at line 22 of file TPoints.h. ◆ fY. Double_t TPoints::fY. private . Y world coordinate. ; Definition at line 23 of file TPoints.h. Libraries for TPoints:. [legend]; The documentation for this class was generated from the following file:; graf2d/graf/inc/TPoints.h. TPoints. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:09 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPoints.html:3297,Guid,Guide,3297,doc/master/classTPoints.html,https://root.cern,https://root.cern/doc/master/classTPoints.html,1,['Guid'],['Guide']
Usability,"_t CanUndo () const;  Returns kTRUE if Undo action is possible, kFALSE if it's not. ;  ; virtual void Compress (TQCommand *c);  Compress command. ;  ; void Delete (Option_t *option="""") override;  If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ;  ; const char * GetName () const override;  Returns the command name. ;  ; Int_t GetNRargs () const;  Returns a number of redo arguments. ;  ; Int_t GetNUargs () const;  Returns a number of undo arguments. ;  ; void * GetObject () const;  Returns an object for which undo redo actions are applied. ;  ; TQConnection * GetRedo () const;  ; Long_t * GetRedoArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Returns the name of redo command. ;  ; Int_t GetStatus () const;  Returns a number of sequential undo or redo operations. ;  ; const char * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer to array of undo arguments. ;  ; const char * GetUndoName () const;  Returns the name of undo command. ;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtual Bool_t IsSetter () const;  Returns kTRUE is command if Redo is the same as Undo function and is the setter action. ;  ; Bool_t IsUndoing () const;  Undo action is in progress. ;  ; void ls (Option_t *option="""") const override;  ls this command and merged commands ;  ; virtual Long64_t Merge (TCollection *, TFileMergeInfo *);  Merge a collection of TQCommand. ;  ; virtual void Merge (TQCommand *c);  Add command to the list of merged commands. ;  ; virtual void Redo (Option_t *option="""");  Execute comma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:6571,undo,undo,6571,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Attributes; TGSplitFrame * fFirst;  Pointer to the first child (if any) ;  ; TGFrame * fFrame;  Pointer to the embedded frame (if any) ;  ; Float_t fHRatio;  Height ratio between the first child and this. ;  ; TGSplitFrame * fSecond;  Pointer to the second child (if any) ;  ; TGSplitter * fSplitter;  Pointer to the (H/V) Splitter (if any) ;  ; TGSplitTool * fSplitTool;  SplitFrame Tool. ;  ; TGTransientFrame * fUndocked;  Main frame used when ""undocking"" frame. ;  ; Float_t fWRatio;  Width ratio between the first child and this. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitFrame.html:26900,undo,undocking,26900,doc/master/classTGSplitFrame.html,https://root.cern,https://root.cern/doc/master/classTGSplitFrame.html,1,['undo'],['undocking']
Usability,"_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TGWidget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void Copy (TObject &) const override;  Copy this to obj. ;  ; void DrawRegion (Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Draw lines in exposed region. ;  ; virtual void HLayout ();  Horizontal layout of widgets (canvas, scrollbar). ;  ; void Init (Pixel_t bg);  Initialize a text view widget. ;  ; virtual void Mark (Long_t xPos, Long_t yPos);  Mark a text region from xPos to yPos. ;  ; virtual void UnMark ();  Clear marked region. ;  ; virtual void VLayout ();  Vertical layout of widgets (canvas, scrollbar). ;  ;  Protected Member Functions inherited from TGView; void DoRedraw () override;  redraw ;  ; virtual Bool_t ItemLayout ();  ; virtual void UpdateRegion (Int_t x, Int_t y, UInt_t w, UInt_t h);  update a part of view ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextView.html:31189,Clear,Clear,31189,doc/master/classTGTextView.html,https://root.cern,https://root.cern/doc/master/classTGTextView.html,1,['Clear'],['Clear']
Usability,"_t Echo (const char *str);  Sends a string to master and workers and expect them to echo it back to the client via a message. ;  ; virtual Int_t Echo (const TObject *obj);  Sends an object to master and workers and expect them to send back a message with the output of its TObject::Print(). ;  ; Int_t EnablePackage (const char *package, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t EnablePackage (const char *package, const char *loadopts, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t EnablePackage (const char *package, TList *loadopts, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t Exec (const char *cmd, Bool_t plusMaster=kFALSE);  Send command to be executed on the PROOF master and/or slaves. ;  ; Int_t Exec (const char *cmd, const char *ord, Bool_t logtomacro=kFALSE);  Send command to be executed on node of ordinal 'ord' (use ""0"" for master). ;  ; void Feedback (TList *objs);  Get list of feedback objects. ;  ; Long64_t Finalize (const char *queryref, Bool_t force=kFALSE);  Finalize query with reference ref. ;  ; Long64_t Finalize (Int_t query=-1, Bool_t force=kFALSE);  Finalize the qry-th query in fQueries. ;  ; TList * FindDataSets (const char *searchString, const char *optStr="""");  Find datasets, returns in a TList all found datasets. ;  ; Long64_t GetBytesRead () const;  ; Int_t GetClientProtocol () const;  ; const char * GetConfDir () const;  ; const char * GetConfFile () const;  ; Float_t GetCpuTime () const;  ; const char * GetDataPoolUrl () const;  ; TMap * GetDataSetQuota (const char *optStr="""");  returns a map of the quotas of all groups ;  ; TString Getenv (const char *env, const char *ord=""0"");  Get value of environment variable 'env' on node 'ord'. ;  ; TList * GetFeedbackList () const;  Return feedback list. ;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TList * GetInputList ();  Get input list. ;  ; TMacro * GetL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:10025,Feedback,Feedback,10025,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,2,"['Feedback', 'feedback']","['Feedback', 'feedback']"
Usability,"_t ThetaZ () const;  ; Double_t Vx () const;  ; Double_t Vy () const;  ; Double_t Vz () const;  ; Double_t Y () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMeth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParticle.html:6288,Clear,Clear,6288,doc/master/classTParticle.html,https://root.cern,https://root.cern/doc/master/classTParticle.html,3,['Clear'],['Clear']
Usability,"_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:48442,clear,clearEvalErrorLog,48442,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,2,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:47127,clear,clearEvalErrorLog,47127,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,2,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"a 1-D, 2-D, etc.,; 7495/// projection of the tree will be filled in histogram hname.; 7496/// Note that the dimension of hname must match with the dimension of varexp.; 7497///; 7498 ; 7499Long64_t TTree::Project(const char* hname, const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); 7500{; 7501 TString var;; 7502 var.Form(""%s>>%s"", varexp, hname);; 7503 TString opt(""goff"");; 7504 if (option) {; 7505 opt.Form(""%sgoff"", option);; 7506 }; 7507 Long64_t nsel = Draw(var, selection, opt, nentries, firstentry);; 7508 return nsel;; 7509}; 7510 ; 7511////////////////////////////////////////////////////////////////////////////////; 7512/// Loop over entries and return a TSQLResult object containing entries following selection.; 7513 ; 7514TSQLResult* TTree::Query(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); 7515{; 7516 GetPlayer();; 7517 if (fPlayer) {; 7518 return fPlayer->Query(varexp, selection, option, nentries, firstentry);; 7519 }; 7520 return nullptr;; 7521}; 7522 ; 7523////////////////////////////////////////////////////////////////////////////////; 7524/// Create or simply read branches from filename.; 7525///; 7526/// if branchDescriptor = """" (default), it is assumed that the Tree descriptor; 7527/// is given in the first line of the file with a syntax like; 7528/// ~~~ {.cpp}; 7529/// A/D:Table[2]/F:Ntracks/I:astring/C; 7530/// ~~~; 7531/// otherwise branchDescriptor must be specified with the above syntax.; 7532///; 7533/// - If the type of the first variable is not specified, it is assumed to be ""/F""; 7534/// - If the type of any other variable is not specified, the type of the previous; 7535/// variable is assumed. eg; 7536/// - `x:y:z` (all variables are assumed of type ""F""); 7537/// - `x/D:y:z` (all variables are of type ""D""); 7538/// - `x:y/D:z` (x is type ""F"", y and z of type ""D""); 7539///; 7540/// delimiter allows for the use of another delimiter besid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:295964,simpl,simply,295964,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['simpl'],['simply']
Usability,a Documentation. ◆ fArrayDim. Int_t TDataMember::fArrayDim. private . Definition at line 45 of file TDataMember.h. ◆ fArrayIndex. TString TDataMember::fArrayIndex. private . Definition at line 47 of file TDataMember.h. ◆ fArrayMaxIndex. Int_t* TDataMember::fArrayMaxIndex. private . Definition at line 46 of file TDataMember.h. ◆ fClass. TClass* TDataMember::fClass. private . pointer to CINT data member info ; Definition at line 39 of file TDataMember.h. ◆ fDataType. TDataType* TDataMember::fDataType. private . pointer to the class ; Definition at line 40 of file TDataMember.h. ◆ fFullTypeName. TString TDataMember::fFullTypeName. private . Definition at line 50 of file TDataMember.h. ◆ fInfo. DataMemberInfo_t* TDataMember::fInfo. private . Definition at line 38 of file TDataMember.h. ◆ fOffset. Longptr_t TDataMember::fOffset. private . pointer to data basic type descriptor ; Definition at line 42 of file TDataMember.h. ◆ fOptions. TList* TDataMember::fOptions. private . method which sets value; ; Definition at line 58 of file TDataMember.h. ◆ fProperty. Long_t TDataMember::fProperty. private . Definition at line 44 of file TDataMember.h. ◆ fSTLCont. Int_t TDataMember::fSTLCont. private . Definition at line 43 of file TDataMember.h. ◆ fTrueTypeName. TString TDataMember::fTrueTypeName. private . Definition at line 51 of file TDataMember.h. ◆ fTypeName. TString TDataMember::fTypeName. private . Definition at line 49 of file TDataMember.h. ◆ fValueGetter. TMethodCall* TDataMember::fValueGetter. private . Definition at line 56 of file TDataMember.h. ◆ fValueSetter. TMethodCall* TDataMember::fValueSetter. private . method that returns a value; ; Definition at line 57 of file TDataMember.h. Libraries for TDataMember:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TDataMember.h; core/meta/src/TDataMember.cxx. TDataMember. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:27 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataMember.html:32950,Guid,Guide,32950,doc/master/classTDataMember.html,https://root.cern,https://root.cern/doc/master/classTDataMember.html,1,['Guid'],['Guide']
Usability,"a TClonesArray, the special Tree constructor for TClonesArray is called. The collection itself cannot be a TClonesArray. If name is given, all branch names will be prefixed with name_.; IMPORTANT NOTE1: This function should not be called if splitlevel<1. IMPORTANT NOTE2: The branches created by this function will have names corresponding to the collection or object names. It is important to give names to collections to avoid misleading branch names or identical branch names. By default collections have a name equal to the corresponding class name, e.g. the default name of TList is “TList”.; 12.13 Examples for Writing and Reading Trees; The following sections are examples of writing and reading trees increasing in complexity from a simple tree with a few variables to a tree containing folders and complex Event objects. Each example has a named script in the $ROOTSYS/tutorials/tree directory. They are called tree1.C to tree4.C. The examples are:. tree1.C: a tree with several simple (integers and floating point) variables.; tree2.C: a tree built from a C structure (struct). This example uses the Geant3 C wrapper as an example of a FORTRAN common block ported to C with a C structure.; tree3.C: in this example, we will show how to extend a tree with a branch from another tree with the Friends feature. These trees have branches with variable length arrays. Each entry has a variable number of tracks, and each track has several variables.; tree4.C: a tree with a class (Event). The class Event is defined in $ROOTSYS/test. In this example we first encounter the impact of splitting a branch. Each script contains the main function, with the same name as the file (i.e. tree1), the function to write - tree1w, and the function to read - tree1r. If the script is not run in batch mode, it displays the tree in the browser and tree viewer. To study the example scripts, you can either execute the main script, or load the script and execute a specific function. For example:; // execute ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:551105,simpl,simple,551105,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"a background-like (left) sample. Two new nodes are then created for each of the two sub-samples and they are constructed using the same mechanism as described for the root node. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal purity. These leave nodes are then called ""signal"" or ""background"" if they contain more signal respective background events from the training sample. Boosting:; the idea behind the boosting is, that signal events from the training sample, that *end up in a background node (and vice versa) are given a larger weight than events that are in the correct leave node. This results in a re-weighed training event sample, with which then a new decision tree can be developed. The boosting can be applied several times (typically 100-500 times) and one ends up with a set of decision trees (a forest). Bagging:; In this particular variant of the Boosted Decision Trees the boosting is not done on the basis of previous training results, but by a simple stochastic re-sampling of the initial training event sample. Analysis:; applying an individual decision tree to a test event results in a classification of the event as either signal or background. For the boosted decision tree selection, an event is successively subjected to the whole set of decision trees and depending on how often it is classified as signal, a ""likelihood"" estimator is constructed for the event being signal or background. The value of this estimator is the one which is then used to select the events from an event sample, and the cut value on this estimator defines the efficiency and purity of the selection. ; Definition at line 49 of file MethodDT.h. Public Member Functions;  MethodDT (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  the standard constructor for just an ordinar ""decision trees"" ;  ;  MethodDT (DataSetInfo &dsi, const TString &theWeightFile);  constr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDT.html:2708,simpl,simple,2708,doc/master/classTMVA_1_1MethodDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDT.html,1,['simpl'],['simple']
Usability,"a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Reimplemented in TSelEvent, TSelVerifyDataSet, TSelEventGen, TSelHandleDataSet, TSelectorDraw, and TSelectorEntries.; Definition at line 56 of file TSelector.h. ◆ operator=(). TSelector & TSelector::operator= ; (; const TSelector & ; ). private . ◆ Process(). bool TSelector::Process ; (; Long64_t ; ). virtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either t01::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms.; The processing can be stopped by calling Abort().; Use fStatus to set the return value of TTree::Process().; The return value is currently not used.; WARNING when a selector is used with a TChain, you must use the pointer to the current TTree to call GetEntry(entry). The entry is always the local entry number in the current tree. Assuming that fChain is the pointer to the TChain being processed, use: fChain->GetTree()->GetEntry(entry). ; Reimplemented in TSelEvent, TEveSelectorToEventList, ROOT::Experimental::REveSelectorToEventList, TSelVerifyDataSet, TSelEventGen, TSelHandleDataSet, TSelHist, RooProofDriverSelector, TSelectorEntries, h1analysis, h1analysisTreeReader, TProofDraw, and TSelectorDraw.; Definition at line 360 of file TSelector.cxx. ◆ ProcessCut(). bool TSelector::ProcessCut ; (; Long64_t ; ). virtual . This method is called before processing entry. ; It is the user's responsibility to read the corresponding ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelector.html:21695,simpl,simple,21695,doc/master/classTSelector.html,https://root.cern,https://root.cern/doc/master/classTSelector.html,1,['simpl'],['simple']
Usability,"a clone of volume VOL but which is an assembly.Definition TGeoVolume.cxx:3088; TGeoVolumeAssembly::operator=TGeoVolumeAssembly & operator=(const TGeoVolumeAssembly &)=delete; TGeoVolumeAssembly::~TGeoVolumeAssembly~TGeoVolumeAssembly() overrideDestructor. The assembly is owner of its ""shape"".Definition TGeoVolume.cxx:2968; TGeoVolumeAssembly::GetNextNodeIndexInt_t GetNextNodeIndex() const overrideDefinition TGeoVolume.cxx:2922; TGeoVolumeAssembly::IsVisibleBool_t IsVisible() const overrideDefinition TGeoVolume.h:354; TGeoVolumeAssembly::CreateThreadDatavoid CreateThreadData(Int_t nthreads) overrideDefinition TGeoVolume.cxx:2899; TGeoVolumeAssembly::TGeoVolumeAssemblyTGeoVolumeAssembly(const TGeoVolumeAssembly &)=deleteMutex for concurrent operations.; TGeoVolumeAssembly::AddNodeTGeoNode * AddNode(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""") overrideAdd a component to the assembly.Definition TGeoVolume.cxx:2978; TGeoVolumeAssembly::ClearThreadDatavoid ClearThreadData() const overrideDefinition TGeoVolume.cxx:2884; TGeoVolumeAssembly::CloneVolumeTGeoVolume * CloneVolume() const overrideClone this volume.Definition TGeoVolume.cxx:3001; TGeoVolumeAssembly::AddNodeOverlapvoid AddNodeOverlap(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat, Option_t *option) overrideAdd an overlapping node - not allowed for assemblies.Definition TGeoVolume.cxx:2989; TGeoVolumeAssembly::fThreadDatastd::vector< ThreadData_t * > fThreadDataDefinition TGeoVolume.h:331; TGeoVolumeAssembly::fMutexstd::mutex fMutexThread vector size.Definition TGeoVolume.h:333; TGeoVolumeAssembly::DrawOnlyvoid DrawOnly(Option_t *) overridedraw only this volumeDefinition TGeoVolume.h:350; TGeoVolumeAssembly::fThreadSizeInt_t fThreadSizeThread specific data vector.Definition TGeoVolume.h:332; TGeoVolumeAssembly::SetNextNodeIndexvoid SetNextNodeIndex(Int_t index)Definition TGeoVolume.cxx:2936; TGeoVolumeAssembly::GetCurrentNodeIndexInt_t GetCurrentNodeIndex() const overrideDefinition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8h_source.html:24312,Clear,ClearThreadDatavoid,24312,doc/master/TGeoVolume_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8h_source.html,2,['Clear'],"['ClearThreadData', 'ClearThreadDatavoid']"
Usability,"a file, either sent by a client or a master server. ;  ; void Reset (const char *dir);  Reset environment to be ready for execution of next command. ;  ; void Run (Bool_t retrn=kFALSE) override;  Main server eventloop. ;  ; void SendLogFile (Int_t status=0, Int_t start=-1, Int_t end=-1);  Send log file to master. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate (Int_t status) override;  Terminate the proof server. ;  ;  Public Member Functions inherited from TApplication;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () const;  ; char ** Argv () const;  ; char * Argv (Int_t index) const;  Return specified argument. ;  ; void ClearInputFiles ();  Clear list containing macro files passed as program arguments. ;  ; EExitOnException ExitOnException (EExitOnException opt=kExit);  Set the exit on exception option. ;  ; virtual TApplicationImp * GetApplicationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleException (Int_t sig);  Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; virtual void HandleIdleTimer ();  Handle idle timeout. ;  ; virtual Bool_t HandleTermInput ();  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; void InitializeGraphics (Bool_t only_web=kFALSE);  Initialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit sign",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:2798,Clear,ClearInputFiles,2798,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,2,['Clear'],"['Clear', 'ClearInputFiles']"
Usability,"a friend from the list of friends.Definition TTree.cxx:7977; TTree::Browsevoid Browse(TBrowser *) overrideBrowse content of the TTree.Definition TTree.cxx:2609; TTree::LoadTreeFriendvirtual Long64_t LoadTreeFriend(Long64_t entry, TTree *T)Load entry on behalf of our master tree, we may use an index.Definition TTree.cxx:6557; TTree::WriteInt_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) overrideWrite this object to the current directory.Definition TTree.cxx:9753; TTree::fNotifyTObject * fNotifyObject to be notified when loading a Tree.Definition TTree.h:120; TTree::GetListOfClonesvirtual TList * GetListOfClones()Definition TTree.h:527; TTree::fCacheSizeLong64_t fCacheSize! Maximum size of file buffersDefinition TTree.h:105; TTree::fClonesTList * fClones! List of cloned trees which share our addressesDefinition TTree.h:135; TTree::Classstatic TClass * Class(); TTree::kLoadTree@ kLoadTreeDefinition TTree.h:221; TTree::CopyAddressesvirtual void CopyAddresses(TTree *, bool undo=false)Set branch addresses of passed tree equal to ours.Definition TTree.cxx:3299; TTree::GetListOfFriendsvirtual TList * GetListOfFriends() constDefinition TTree.h:530; TTree::fReadEntryLong64_t fReadEntry! Number of the entry being processedDefinition TTree.h:107; TTree::GetNbranchesvirtual Int_t GetNbranches()Definition TTree.h:542; TTree::FindLeafvirtual TLeaf * FindLeaf(const char *name)Find leaf..Definition TTree.cxx:4916; TTree::fDirectoryTDirectory * fDirectory! Pointer to directory holding this treeDefinition TTree.h:121; TTree::kNeedEnableDecomposedObj@ kNeedEnableDecomposedObjDefinition TTree.h:244; TTree::kNoCheck@ kNoCheckDefinition TTree.h:243; TTree::kMissingBranch@ kMissingBranchDefinition TTree.h:233; TTree::ResetBranchAddressesvirtual void ResetBranchAddresses()Tell all of our branches to drop their current objects and allocate new ones.Definition TTree.cxx:8075; TTree::SetNamevoid SetName(const char *name) overrideChange the name of this tree.Definition TTree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:151330,undo,undo,151330,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['undo'],['undo']
Usability,"a in the same buffer. ; Implements TBuffer.; Definition at line 492 of file TBufferIO.cxx. ◆ WriteObjectClass(). virtual void TBufferIO::WriteObjectClass ; (; const void * ; actualObjStart, . const TClass * ; actualClass, . Bool_t ; cacheReuse . ). protectedpure virtual . Implemented in TBufferJSON, TBufferSQL2, TBufferXML, and TBufferFile. ◆ WriteProcessID(). UShort_t TBufferIO::WriteProcessID ; (; TProcessID * ; pid). overridevirtual . Check if the ProcessID pid is already in the file. ; If not, add it and return the index number in the local file list. ; Implements TBuffer.; Reimplemented in TMessage.; Definition at line 456 of file TBufferIO.cxx. Member Data Documentation. ◆ fClassMap. TExMap* TBufferIO::fClassMap {nullptr}. protected . Map containing object,class pairs for reading. ; Definition at line 40 of file TBufferIO.h. ◆ fDisplacement. Int_t TBufferIO::fDisplacement {0}. protected . Value to be added to the map offsets. ; Definition at line 37 of file TBufferIO.h. ◆ fgMapSize. Int_t TBufferIO::fgMapSize = kMapSize. staticprotected . Default map size for all TBuffer objects. ; Definition at line 42 of file TBufferIO.h. ◆ fMap. TExMap* TBufferIO::fMap {nullptr}. protected . Map containing object,offset pairs for reading/writing. ; Definition at line 39 of file TBufferIO.h. ◆ fMapCount. Int_t TBufferIO::fMapCount {0}. protected . Number of objects or classes in map. ; Definition at line 35 of file TBufferIO.h. ◆ fMapSize. Int_t TBufferIO::fMapSize {0}. protected . Default size of map. ; Definition at line 36 of file TBufferIO.h. ◆ fPidOffset. UShort_t TBufferIO::fPidOffset {0}. protected . Offset to be added to the pid index in this key/buffer. ; Definition at line 38 of file TBufferIO.h. Libraries for TBufferIO:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TBufferIO.h; io/io/src/TBufferIO.cxx. TBufferIO. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferIO.html:45449,Guid,Guide,45449,doc/master/classTBufferIO.html,https://root.cern,https://root.cern/doc/master/classTBufferIO.html,1,['Guid'],['Guide']
Usability,"a instead.; [legend]; Constructor & Destructor Documentation. ◆ LeastSquaresLossFunctionBDT(). TMVA::LeastSquaresLossFunctionBDT::LeastSquaresLossFunctionBDT ; (; ). inline . Definition at line 225 of file LossFunction.h. ◆ ~LeastSquaresLossFunctionBDT(). TMVA::LeastSquaresLossFunctionBDT::~LeastSquaresLossFunctionBDT ; (; ). inline . Definition at line 226 of file LossFunction.h. Member Function Documentation. ◆ Fit(). Double_t TMVA::LeastSquaresLossFunctionBDT::Fit ; (; std::vector< LossFunctionEventInfo > & ; evs). virtual . huber BDT, determine the fit value for the terminal node based upon the events in the terminal node ; Implements TMVA::LossFunctionBDT.; Definition at line 470 of file LossFunction.cxx. ◆ Init(). void TMVA::LeastSquaresLossFunctionBDT::Init ; (; std::map< const TMVA::Event *, LossFunctionEventInfo > & ; evinfomap, . std::vector< double > & ; boostWeights . ). virtual . least squares BDT, initialize the targets and prepare for the regression ; Implements TMVA::LossFunctionBDT.; Definition at line 413 of file LossFunction.cxx. ◆ SetTargets(). void TMVA::LeastSquaresLossFunctionBDT::SetTargets ; (; std::vector< const TMVA::Event * > & ; evs, . std::map< const TMVA::Event *, LossFunctionEventInfo > & ; evinfomap . ). virtual . least squares BDT, set the targets for a collection of events ; Implements TMVA::LossFunctionBDT.; Definition at line 437 of file LossFunction.cxx. ◆ Target(). Double_t TMVA::LeastSquaresLossFunctionBDT::Target ; (; LossFunctionEventInfo & ; e). virtual . least squares BDT, set the target for a single event ; Implements TMVA::LossFunctionBDT.; Definition at line 459 of file LossFunction.cxx. Libraries for TMVA::LeastSquaresLossFunctionBDT:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/LossFunction.h; tmva/tmva/src/LossFunction.cxx. TMVALeastSquaresLossFunctionBDT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html:3994,Guid,Guide,3994,doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html,1,['Guid'],['Guide']
Usability,"a instead.; [legend]; Member Enumeration Documentation. ◆ EBoxMode. enum TVirtualPadPainter::EBoxMode. EnumeratorkHollow ; kFilled . Definition at line 21 of file TVirtualPadPainter.h. ◆ ETextMode. enum TVirtualPadPainter::ETextMode. EnumeratorkClear ; kOpaque . Definition at line 22 of file TVirtualPadPainter.h. Constructor & Destructor Documentation. ◆ ~TVirtualPadPainter(). TVirtualPadPainter::~TVirtualPadPainter ; (; ). virtual . Virtual dtor. ; Definition at line 30 of file TVirtualPadPainter.cxx. Member Function Documentation. ◆ Class(). static TClass * TVirtualPadPainter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TVirtualPadPainter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TVirtualPadPainter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 103 of file TVirtualPadPainter.h. ◆ ClearDrawable(). virtual void TVirtualPadPainter::ClearDrawable ; (; ). pure virtual . Implemented in TPadPainter, TGLPadPainter, and TWebPadPainter. ◆ CopyDrawable(). virtual void TVirtualPadPainter::CopyDrawable ; (; Int_t ; device, . Int_t ; px, . Int_t ; py . ). pure virtual . Implemented in TPadPainter, TGLPadPainter, and TWebPadPainter. ◆ CreateDrawable(). virtual Int_t TVirtualPadPainter::CreateDrawable ; (; UInt_t ; w, . UInt_t ; h . ). pure virtual . Implemented in TPadPainter, TGLPadPainter, and TWebPadPainter. ◆ DeclFileName(). static const char * TVirtualPadPainter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 103 of file TVirtualPadPainter.h. ◆ DestroyDrawable(). virtual void TVirtualPadPainter::DestroyDrawable ; (; Int_t ; device). pure virtual . Implemented in TPadPainter, TGLPadPainter, and TWebPadPainter. ◆ DrawBox(). virtual void TVirtualPadPainter::DrawBox ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . EBoxMode ; mod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPadPainter.html:5438,Clear,ClearDrawable,5438,doc/master/classTVirtualPadPainter.html,https://root.cern,https://root.cern/doc/master/classTVirtualPadPainter.html,1,['Clear'],['ClearDrawable']
Usability,"a light on/off.Definition TGLLightSet.cxx:55; TGLOrthoCameraOrthographic projection camera.Definition TGLOrthoCamera.h:36; TGLOrthoCamera::SetEnableRotatevoid SetEnableRotate(Bool_t x)Definition TGLOrthoCamera.h:80; TGLRnrCtx::kFill@ kFillDefinition TGLRnrCtx.h:46; TGLRnrCtx::kWireFrame@ kWireFrameDefinition TGLRnrCtx.h:48; TGLRnrCtx::kOutline@ kOutlineDefinition TGLRnrCtx.h:47; TGLSAViewerThe top level standalone GL-viewer - created via plugin manager.Definition TGLSAViewer.h:38; TGLSAViewer::GetFrameTGCompositeFrame * GetFrame() constReturn the main-frame.Definition TGLSAViewer.cxx:325; TGLViewerBase::SetStylevoid SetStyle(Short_t st)Definition TGLViewerBase.h:111; TGLViewerBase GL viewer object - used by both standalone and embedded (in pad) GL.Definition TGLViewer.h:55; TGLViewer::SetPerspectiveCameravoid SetPerspectiveCamera(ECameraType camera, Double_t fov, Double_t dolly, Double_t center[3], Double_t hRotate, Double_t vRotate)Set a perspective camera to supplied configuration - note this does not need to be the current camera...Definition TGLViewer.cxx:1957; TGLViewer::ECameraTypeECameraTypeDefinition TGLViewer.h:61; TQObject::ConnectBool_t Connect(const char *signal, const char *receiver_class, void *receiver, const char *slot)Non-static method is used to connect from the signal of this object to the receiver slot.Definition TQObject.cxx:869; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; TMath::PiOver2constexpr Double_t PiOver2()Definition TMath.h:51; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::TwoPiconstexpr Double_t TwoPi()Definition TMath.h:44; v@ vDefinition rootcling_impl.cxx:3699; AuthorRichard Maunder ; Definition in file glViewerExercise.C. tutorialsglglViewerExercise.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/glViewerExercise_8C.html:6382,Guid,Guide,6382,doc/master/glViewerExercise_8C.html,https://root.cern,https://root.cern/doc/master/glViewerExercise_8C.html,1,['Guid'],['Guide']
Usability,"a members; class charts. ROOT; » HIST; » HIST; » THnT<double>. class THnT<double>: public THn. Helper struct to hold one dimension's bin range for THnBinIter. Function Members (Methods); public:. virtual~THnT<double>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_double_.html:996,Clear,Clear,996,root/html602/THnT_double_.html,https://root.cern,https://root.cern/root/html602/THnT_double_.html,2,['Clear'],['Clear']
Usability,"a milliSec timeout.Definition TTimer.cxx:213; TTimer::TurnOnvirtual void TurnOn()Add the timer to the system timer list.Definition TTimer.cxx:243; TTimer::SetCommandvoid SetCommand(const char *command)Set the interpreter command to be executed at time out.Definition TTimer.cxx:176; TTimer::fCommandTString fCommandDefinition TTimer.h:61; TTimer::SetInterruptSyscallsvoid SetInterruptSyscalls(Bool_t set=kTRUE)When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted...Definition TTimer.cxx:199; TTimer::fTimeTTime fTimeDefinition TTimer.h:54; TTimer::Resetvoid Reset()Reset the timer.Definition TTimer.cxx:159; TTimer::CheckTimerBool_t CheckTimer(const TTime &now)Check if timer timed out.Definition TTimer.cxx:130; TTimer::SetObjectvoid SetObject(TObject *object)Set the object to be notified at time out.Definition TTimer.cxx:186; TTimer::SingleShotstatic void SingleShot(Int_t milliSec, const char *receiver_class, void *receiver, const char *method)This static function calls a slot after a given time interval.Definition TTimer.cxx:258; TTimer::fObjectTObject * fObjectDefinition TTimer.h:60; TTimer::SetTimevoid SetTime(Long_t milliSec)Definition TTimer.h:91; TTimer::fAbsTimeTTime fAbsTimeDefinition TTimer.h:55; TTimer::fTimeoutBool_t fTimeoutDefinition TTimer.h:56; TTimer::TTimerTTimer(const TTimer &)=delete; TTimer::NotifyBool_t Notify() overrideNotify when timer times out.Definition TTimer.cxx:145; TTimer::fSyncBool_t fSyncDefinition TTimer.h:57; TTimer::IsRunningBool_t IsRunning()This function checks if the timer is running within gSystem (Has been started and did not finish yet)...Definition TTimer.cxx:279; TTimer::fIntSyscallsBool_t fIntSyscallsDefinition TTimer.h:58; TTimer::Timeoutvirtual void Timeout()Definition TTimer.h:97; bool; int; object; ROOT::GetROOTTROOT * GetROOT()Definition TROOT.cxx:472. corebasesrcTTimer.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTimer_8cxx_source.html:15075,Guid,Guide,15075,doc/master/TTimer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTimer_8cxx_source.html,1,['Guid'],['Guide']
Usability,"a rotated pad (X vertical, Y horizontal) ;  ; virtual void PaintBoxes (Option_t *option);  Control function to draw a 2D histogram as a box plot ;  ; virtual void PaintCandlePlot (Option_t *option);  Control function to draw a 2D histogram as a candle (box) plot or violin plot ;  ; virtual void PaintColorLevels (Option_t *option);  Control function to draw a 2D histogram as a color plot. ;  ; virtual void PaintColorLevelsFast (Option_t *option);  [Rendering scheme for the COL2 and COLZ2 options] (HP14) ;  ; virtual void PaintContour (Option_t *option);  Control function to draw a 2D histogram as a contour plot. ;  ; virtual Int_t PaintContourLine (Double_t elev1, Int_t icont1, Double_t x1, Double_t y1, Double_t elev2, Int_t icont2, Double_t x2, Double_t y2, Double_t *xarr, Double_t *yarr, Int_t *itarr, Double_t *levels);  Fill the matrix xarr and yarr for Contour Plot. ;  ; virtual void PaintErrors (Option_t *option);  Draw 1D histograms error bars. ;  ; virtual void PaintFrame ();  Calculate range and clear pad (canvas). ;  ; virtual void PaintFunction (Option_t *option);  [Paint functions associated to an histogram.](HP28"") ;  ; virtual void PaintH3 (Option_t *option="""");  Control function to draw a 3D histograms. ;  ; virtual void PaintH3Box (Int_t iopt);  Control function to draw a 3D histogram with boxes. ;  ; virtual void PaintH3BoxRaster ();  Control function to draw a 3D histogram with boxes. ;  ; virtual void PaintH3Iso ();  Control function to draw a 3D histogram with Iso Surfaces. ;  ; virtual void PaintHighlightBin (Option_t *option="""");  Paint highlight bin as TBox object. ;  ; virtual void PaintHist (Option_t *option);  Control routine to draw 1D histograms ;  ; virtual Int_t PaintInit ();  Compute histogram parameters used by the drawing routines. ;  ; virtual Int_t PaintInitH ();  Compute histogram parameters used by the drawing routines for a rotated pad. ;  ; virtual void PaintLego (Option_t *option);  Control function to draw a 2D histogram as a l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:135287,clear,clear,135287,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['clear'],['clear']
Usability,"a separate ROOT module -; ""padpainter"" (the same as ""histpainter""). But now, it's directly in a; gpad dir, so, in case of default painter, no *.so should be loaded,; no need in plugin managers.; May change in future. TVirtualPadPainter * GetCanvasPainter(); Access and (probably) creation of pad painter. void DeleteCanvasPainter(); assert on IsBatch() == false?. TCanvas(const TCanvas& canvas). TCanvas & operator=(const TCanvas& rhs). void Delete(Option_t* = """"); { MayNotUse(""Delete()""); }. void ForceUpdate(); { fCanvasImp->ForceUpdate(); }. const char * GetDISPLAY() const; {return fDISPLAY.Data();}. TContextMenu * GetContextMenu() const; {return fContextMenu;}. Int_t GetDoubleBuffer() const; {return fDoubleBuffer;}. Int_t GetEvent() const; { return fEvent; }. Int_t GetEventX() const; { return fEventX; }. Int_t GetEventY() const; { return fEventY; }. Color_t GetHighLightColor() const; { return fHighLightColor; }. TVirtualPad * GetPadSave() const; { return fPadSave; }. void ClearPadSave(); { fPadSave = 0; }. TObject * GetSelected() const; {return fSelected;}. TObject * GetClickSelected() const; {return fClickSelected;}. Int_t GetSelectedX() const; {return fSelectedX;}. Int_t GetSelectedY() const; {return fSelectedY;}. Option_t * GetSelectedOpt() const; {return fSelectedOpt.Data();}. TVirtualPad * GetSelectedPad() const; { return fSelectedPad; }. TVirtualPad * GetClickSelectedPad() const; { return fClickSelectedPad; }. Bool_t GetShowEventStatus() const; { return TestBit(kShowEventStatus); }. Bool_t GetShowToolBar() const; { return TestBit(kShowToolBar); }. Bool_t GetShowEditor() const; { return TestBit(kShowEditor); }. Bool_t GetShowToolTips() const; { return TestBit(kShowToolTips); }. Bool_t GetAutoExec() const; { return TestBit(kAutoExec); }. Size_t GetXsizeUser() const; {return fXsizeUser;}. Size_t GetYsizeUser() const; {return fYsizeUser;}. Size_t GetXsizeReal() const; {return fXsizeReal;}. Size_t GetYsizeReal() const; {return fYsizeReal;}. Int_t GetCanvasID() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCanvas.html:47031,Clear,ClearPadSave,47031,root/html534/TCanvas.html,https://root.cern,https://root.cern/root/html534/TCanvas.html,3,['Clear'],['ClearPadSave']
Usability,"a simple box. ; Implements TVirtualPadPainter.; Definition at line 102 of file TWebPadPainter.cxx. ◆ DrawFillArea() [1/2]. void TWebPadPainter::DrawFillArea ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 124 of file TWebPadPainter.cxx. ◆ DrawFillArea() [2/2]. void TWebPadPainter::DrawFillArea ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 140 of file TWebPadPainter.cxx. ◆ DrawLine(). void TWebPadPainter::DrawLine ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). overridevirtual . Paint a simple line. ; Implements TVirtualPadPainter.; Definition at line 65 of file TWebPadPainter.cxx. ◆ DrawLineNDC(). void TWebPadPainter::DrawLineNDC ; (; Double_t ; u1, . Double_t ; v1, . Double_t ; u2, . Double_t ; v2 . ). overridevirtual . Paint a simple line in normalized coordinates. ; Implements TVirtualPadPainter.; Definition at line 83 of file TWebPadPainter.cxx. ◆ DrawPixels(). void TWebPadPainter::DrawPixels ; (; const unsigned char * ; pixelData, . UInt_t ; width, . UInt_t ; height, . Int_t ; dstX, . Int_t ; dstY, . Bool_t ; enableAlphaBlending . ). overridevirtual . Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. ; Implements TVirtualPadPainter.; Definition at line 55 of file TWebPadPainter.cxx. ◆ DrawPolyLine() [1/2]. void TWebPadPainter::DrawPolyLine ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint Polyline. ; Implements TVirtualPadPainter.; Definition at line 156 of file TWebPadPainter.cxx. ◆ DrawPolyLine() [2/2]. void TWebPadPainter::DrawPolyLine ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y . ). overridevirtual . Paint polyline. ; Implements TVirtualPadPainter.; Definition at line 172 of file TWebPadPainter.cxx. ◆ DrawPolyLineNDC(). void TWebPadPainter::DrawPolyLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPadPainter.html:15563,simpl,simple,15563,doc/master/classTWebPadPainter.html,https://root.cern,https://root.cern/doc/master/classTWebPadPainter.html,1,['simpl'],['simple']
Usability,"a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y); Paint Polyline. void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); Special version working with wchar_t and required by TMathText. void DrawTextNDC(Double_t u, Double_t v, const char* text, TVirtualPadPainter::ETextMode mode); Paint text in normalized coordinates. void SaveImage(TVirtualPad* pad, const char* fileName, Int_t type) const; Save the image displayed in the canvas pointed by ""pad"" into a binary file. void DrawTextNDC(Double_t u, Double_t v, const wchar_t* text, TVirtualPadPainter::ETextMode mode); Paint text in normalized coordinates. TPadPainter(); Final overriders for TVirtualPadPainter pure virtual functions.; 1. Part, which simply delegates to TVirtualX.; Line attributes. TPadPainter(const TPadPainter& rhs); Let's make this clear:. » Author: Olivier Couet, Timur Pocheptsov 06/05/2009 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id$ » Last generated: 2015-06-02 16:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPadPainter.html:7543,simpl,simply,7543,root/html604/TPadPainter.html,https://root.cern,https://root.cern/root/html604/TPadPainter.html,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"a special way. Do not delay the parsing.; 2033 bool hasHeaderParsingOnDemand = fHeaderParsingOnDemand;; 2034 bool isACLiC = strstr(modulename, ""_ACLiC_dict"") != nullptr;; 2035 if (hasHeaderParsingOnDemand && isACLiC) {; 2036 if (gDebug>1); 2037 Info(""TCling::RegisterModule"",; 2038 ""Header parsing on demand is active but this is an Aclic library. Disabling it for this library."");; 2039 hasHeaderParsingOnDemand = false;; 2040 }; 2041 ; 2042 ; 2043 // Make sure we relookup symbols that were search for before we loaded; 2044 // their autoparse information. We could be more subtil and remove only; 2045 // the failed one or only the one in this module, but for now this is; 2046 // better than nothing.; 2047 fLookedUpClasses.clear();; 2048 ; 2049 // Make sure we do not set off AutoLoading or autoparsing during the; 2050 // module registration!; 2051 SuspendAutoLoadingRAII autoLoadOff(this);; 2052 ; 2053 for (const char** inclPath = includePaths; *inclPath; ++inclPath) {; 2054 TCling::AddIncludePath(*inclPath);; 2055 }; 2056 cling::Transaction* T = nullptr;; 2057 // Put the template decls and the number of arguments to skip in the TNormalizedCtxt; 2058 for (auto& fwdDeclArgToSkipPair : fwdDeclsArgToSkip){; 2059 const std::string& fwdDecl = fwdDeclArgToSkipPair.first;; 2060 const int nArgsToSkip = fwdDeclArgToSkipPair.second;; 2061 auto compRes = fInterpreter->declare(fwdDecl.c_str(), &T);; 2062 assert(cling::Interpreter::kSuccess == compRes &&; 2063 ""A fwd declaration could not be compiled"");; 2064 if (compRes!=cling::Interpreter::kSuccess){; 2065 Warning(""TCling::RegisterModule"",; 2066 ""Problems in declaring string '%s' were encountered."",; 2067 fwdDecl.c_str()) ;; 2068 continue;; 2069 }; 2070 ; 2071 // Drill through namespaces recursively until the template is found; 2072 if(ClassTemplateDecl* TD = FindTemplateInNamespace(T->getFirstDecl().getSingleDecl())){; 2073 fNormalizedCtxt->AddTemplAndNargsToKeep(TD->getCanonicalDecl(), nArgsToSkip);; 2074 }; 2075 ; 2076 }; 2077 ; 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:78104,clear,clear,78104,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['clear'],['clear']
Usability,"a square matrix; namechar name[80]Definition TGX11.cxx:110; xmaxfloat xmaxDefinition THbookFile.cxx:95; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; ROOT::Detail::RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; THnTTemplated implementation of the abstract base THn.Definition THn.h:219; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; double; CPyCppyy::ExecCPYCPPYY_EXTERN bool Exec(const std::string &cmd)Definition API.cxx:446; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; ROOT::TSeqUTSeq< unsigned int > TSeqUDefinition TSeq.hxx:204; TMVA::TMVAGlob::Initializevoid Initialize(Bool_t useTMVAStyle=kTRUE)Definition tmvaglob.cxx:176; ; THnT<float> (*0x55999709c0e0): ""myThN"" ""A THn with 4 dimensions""; 4 dimensions, 128 entries in 1440 filled bins; DateApril 2018 ; AuthorsEnrico Guiraud, Danilo Piparo (CERN) ; Definition in file df018_customActions.C. tutorialsdataframedf018_customActions.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df018__customActions_8C.html:5735,Guid,Guide,5735,doc/master/df018__customActions_8C.html,https://root.cern,https://root.cern/doc/master/df018__customActions_8C.html,1,['Guid'],['Guide']
Usability,"a state with given name, the lowest available; positive integer is assigned as index. Category; state labels may not contain semicolons.; Error status is return if state with given name; is already defined. Bool_t defineType(const char* label, Int_t index); Define a state with given name and index. Category; state labels may not contain semicolons; Error status is return if state with given name; or index is already defined. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; compact only at the moment. void clearRange(const char* name, Bool_t silent); Check that both input arguments are not null pointers. void setRange(const char* rangeName, const char* stateNameList). void addToRange(const char* rangeName, const char* stateNameList); Check that both input arguments are not null pointers. Bool_t isStateInRange(const char* rangeName, const char* stateName) const; If no range is specified [ i.e. the default range ] all category states are in range. void Streamer(TBuffer& ). TObject* clone(const char* newname) const; { return new RooCategory(*this,newname); }. Int_t getIndex() const; Value modifiers. const char* getLabel() const. Bool_t isFundamental() const; We implement a fundamental type of AbsArg that can be stored in a dataset. Bool_t isDerived() const; Does value or shape of this arg depend on any other arg?. void clearTypes(); { RooAbsCategory::clearTypes() ; }. Bool_t inRange(const char* rangeName) const; Returns true of current value of category is inside given range. Bool_t hasRange(const char* rangeName) const; Returns true if category has range with given name. RooCatType evaluate() const; Dummy implementation. » Last changed: Tue Jun 2 15:29:49 2015 » Last generated: 2015-06-02 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooCategory.html:27512,clear,clearTypes,27512,root/html604/RooCategory.html,https://root.cern,https://root.cern/root/html604/RooCategory.html,2,['clear'],['clearTypes']
Usability,"a tube shape with given medium.Definition TGeoManager.cxx:3239; TGeoManager::AddShapeInt_t AddShape(const TGeoShape *shape)Add a shape to the list. Returns index of the shape in list.Definition TGeoManager.cxx:703; TGeoManager::SetMaxVisNodesvoid SetMaxVisNodes(Int_t maxnodes=10000)set the maximum number of visible nodes.Definition TGeoManager.cxx:2380; TGeoManager::CleanGarbagevoid CleanGarbage()Clean temporary volumes and shapes from garbage collection.Definition TGeoManager.cxx:1627; TGeoManager::Voxelizevoid Voxelize(Option_t *option=nullptr)Voxelize all non-divided volumes.Definition TGeoManager.cxx:3129; TGeoManager::GetVirtualLevelInt_t GetVirtualLevel()Find level of virtuality of current overlapping node (number of levels up having the same tracking me...Definition TGeoManager.cxx:2166; TGeoManager::GetBorderSurfaceTGeoBorderSurface * GetBorderSurface(const char *name) constGet border surface with a given name;.Definition TGeoManager.cxx:2060; TGeoManager::ClearThreadDatavoid ClearThreadData() constDefinition TGeoManager.cxx:953; TGeoManager::ClearTracksvoid ClearTracks()Definition TGeoManager.h:415; TGeoManager::fSizePNEIdInt_t fSizePNEIdarray of physical node entriesDefinition TGeoManager.h:140; TGeoManager::PopDummyvoid PopDummy(Int_t ipop=9999)Definition TGeoManager.h:597; TGeoManager::CheckOverlapsvoid CheckOverlaps(Double_t ovlp=0.1, Option_t *option="""")Check all geometry for illegal overlaps within a limit OVLP.Definition TGeoManager.cxx:3869; TGeoManager::MakeTubsTGeoVolume * MakeTubs(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a tube segment shape with given medium.Definition TGeoManager.cxx:3213; TGeoManager::fPdgIdInt_t fPdgId[1024]Definition TGeoManager.h:78; TGeoManager::SortOverlapsvoid SortOverlaps()Sort overlaps by decreasing overlap distance. Extrusions comes first.Definition TGeoManager.cxx:2476; TGeoManager::DisableInactiveVolumesvoid Dis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:92302,Clear,ClearThreadDatavoid,92302,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,2,['Clear'],"['ClearThreadData', 'ClearThreadDatavoid']"
Usability,"a tube shape with given medium.Definition TGeoManager.cxx:3239; TGeoManager::AddShapeInt_t AddShape(const TGeoShape *shape)Add a shape to the list. Returns index of the shape in list.Definition TGeoManager.cxx:703; TGeoManager::SetMaxVisNodesvoid SetMaxVisNodes(Int_t maxnodes=10000)set the maximum number of visible nodes.Definition TGeoManager.cxx:2380; TGeoManager::CleanGarbagevoid CleanGarbage()Clean temporary volumes and shapes from garbage collection.Definition TGeoManager.cxx:1627; TGeoManager::Voxelizevoid Voxelize(Option_t *option=nullptr)Voxelize all non-divided volumes.Definition TGeoManager.cxx:3129; TGeoManager::GetVirtualLevelInt_t GetVirtualLevel()Find level of virtuality of current overlapping node (number of levels up having the same tracking me...Definition TGeoManager.cxx:2166; TGeoManager::GetBorderSurfaceTGeoBorderSurface * GetBorderSurface(const char *name) constGet border surface with a given name;.Definition TGeoManager.cxx:2060; TGeoManager::ClearThreadDatavoid ClearThreadData() constDefinition TGeoManager.cxx:953; TGeoManager::fSizePNEIdInt_t fSizePNEIdarray of physical node entriesDefinition TGeoManager.h:140; TGeoManager::CheckOverlapsvoid CheckOverlaps(Double_t ovlp=0.1, Option_t *option="""")Check all geometry for illegal overlaps within a limit OVLP.Definition TGeoManager.cxx:3869; TGeoManager::MakeTubsTGeoVolume * MakeTubs(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a tube segment shape with given medium.Definition TGeoManager.cxx:3213; TGeoManager::fPdgIdInt_t fPdgId[1024]Definition TGeoManager.h:78; TGeoManager::SortOverlapsvoid SortOverlaps()Sort overlaps by decreasing overlap distance. Extrusions comes first.Definition TGeoManager.cxx:2476; TGeoManager::MakeEltuTGeoVolume * MakeEltu(const char *name, TGeoMedium *medium, Double_t a, Double_t b, Double_t dz)Make in one step a volume pointing to a tube shape with given medium.Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:219329,Clear,ClearThreadDatavoid,219329,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,2,['Clear'],"['ClearThreadData', 'ClearThreadDatavoid']"
Usability,"a used.; TGLClip*TGLSceneInfo::fLastClipLast combined viewer/scene clip (set in scene::update); Short_tTGLSceneInfo::fLastLODLast combined viewer/scene lod (set in scene::lodify-scene-info).; Float_tTGLSceneInfo::fLastOLLineWLast combined viewer/scene outline line-width (set in scene::pre-draw).; Short_tTGLSceneInfo::fLastStyleLast combined viewer/scene style (set in scene::pre-draw).; Float_tTGLSceneInfo::fLastWFLineWLast combined viewer/scene wire-frame line-width (set in scene::pre-draw).; Float_tTGLSceneInfo::fOLLineWOptional override of scene outline line-width; TGLSceneBase*TGLSceneInfo::fScene; UInt_tTGLSceneInfo::fSceneStampScene's time-stamp on last update.; Short_tTGLSceneInfo::fStyleOptional override of scene style; TGLBoundingBoxTGLSceneInfo::fTransformedBBox; Bool_tTGLSceneInfo::fUpdateTimeoutedSet if update was interrupted.; Bool_tTGLSceneInfo::fViewCheckViewer side check if render is necessary.; TGLViewerBase*TGLSceneInfo::fViewer; Float_tTGLSceneInfo::fWFLineWOptional override of scene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t CmpDrawElements(const TGLScene::DrawElement_t& de1, const TGLScene::DrawElement_t& de2). void ClearDrawElementVec(TGLScene::DrawElementVec_t& vec, Int_t maxSize). void ClearDrawElementPtrVec(TGLScene::DrawElementPtrVec_t& vec, Int_t maxSize). TSceneInfo(TGLViewerBase* view = 0, TGLScene* scene = 0). virtual ~TSceneInfo(). void ClearAfterRebuild(). void ClearAfterUpdate(). void Lodify(TGLRnrCtx& ctx). void PreDraw(). void PostDraw(). void ResetDrawStats(). void UpdateDrawStats(const TGLPhysicalShape& shape, Short_t lod). void DumpDrawStats(). » Author: Matevz Tadel, Feb 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLScene__TSceneInfo.html:6030,Clear,ClearDrawElementVec,6030,root/html534/TGLScene__TSceneInfo.html,https://root.cern,https://root.cern/root/html534/TGLScene__TSceneInfo.html,4,['Clear'],"['ClearAfterRebuild', 'ClearAfterUpdate', 'ClearDrawElementPtrVec', 'ClearDrawElementVec']"
Usability,"a valid pct-encoded string. ; Definition at line 1086 of file TUri.cxx. ◆ PctDecodeUnreserved(). TString const TUri::PctDecodeUnreserved ; (; const TString & ; source). static . Percent-decode the given string according to chapter 2.1 we assume a valid pct-encoded string. ; Definition at line 1012 of file TUri.cxx. ◆ PctEncode(). const TString TUri::PctEncode ; (; const TString & ; source). static . Percent-encode and return the given string according to RFC 3986 in principle, this function cannot fail or produce an error. ; Definition at line 815 of file TUri.cxx. ◆ PctNormalise(). TString const TUri::PctNormalise ; (; const TString & ; source). static . Normalise the percent-encoded parts of the string i.e. ; uppercase the hexadecimal digits %[:alpha:][:alpha:] -> %[:ALPHA:][:ALPHA:] ; Definition at line 1057 of file TUri.cxx. ◆ Print(). void TUri::Print ; (; Option_t * ; option = """"); const. overridevirtual . Display function,. . option ""d"" .. debug output; anything else .. simply print URI. . Reimplemented from TObject.; Definition at line 528 of file TUri.cxx. ◆ RemoveDotSegments(). const TString TUri::RemoveDotSegments ; (; const TString & ; inp). static . This functions implements the ""remove_dot_segments"" routine of chapter 5.2.4 ""for interpreting and removing the special '. ; ' and '..' complete path segments from a referenced path"". ; Definition at line 159 of file TUri.cxx. ◆ Reset(). void TUri::Reset ; (; ). Initialize this URI object. ; Set all TString members to empty string, set all Bool_t members to kFALSE. ; Definition at line 571 of file TUri.cxx. ◆ SetAuthority(). Bool_t TUri::SetAuthority ; (; const TString & ; authority). Set authority part of URI: ; authority = [ userinfo ""@"" ] host [ "":"" port ]; Split into components {userinfo@, host, :port}, remember that according to the RFC, it is necessary to distinguish between missing component (no delimiter) and empty component (delimiter present). ; Definition at line 338 of file TUri.cxx. ◆ SetFragmen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUri.html:28846,simpl,simply,28846,doc/master/classTUri.html,https://root.cern,https://root.cern/doc/master/classTUri.html,1,['simpl'],['simply']
Usability,"a& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Roo2DKeysPdf.html:2570,clear,clearEvalErrorLog,2570,root/html526/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html526/Roo2DKeysPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"a& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealSumPdf.html:3183,clear,clearEvalErrorLog,3183,root/html528/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html528/RooRealSumPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"a& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddPdf.html:3855,clear,clearEvalErrorLog,3855,root/html528/RooAddPdf.html,https://root.cern,https://root.cern/root/html528/RooAddPdf.html,3,['clear'],['clearEvalErrorLog']
Usability,"a& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdPdf.html:4301,clear,clearEvalErrorLog,4301,root/html528/RooProdPdf.html,https://root.cern,https://root.cern/root/html528/RooProdPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,"a());; 3455 } else {; 3456 return (TDataMember *)((TClass*)this)->GetListOfDataMembers(kFALSE)->FindObject(start_name);; 3457 }; 3458}; 3459 ; 3460////////////////////////////////////////////////////////////////////////////////; 3461/// Return name of the file containing the declaration of this class.; 3462 ; 3463const char *TClass::GetDeclFileName() const; 3464{; 3465 if (fDeclFileName == kUndeterminedClassInfoName); 3466 return gInterpreter->ClassInfo_FileName( fClassInfo );; 3467 return fDeclFileName;; 3468}; 3469 ; 3470////////////////////////////////////////////////////////////////////////////////; 3471/// return offset for member name. name can be a data member in; 3472/// the class itself, one of its base classes, or one member in; 3473/// one of the aggregated classes.; 3474///; 3475/// In case of an emulated class, the list of emulated TRealData is built; 3476 ; 3477Longptr_t TClass::GetDataMemberOffset(const char *name) const; 3478{; 3479 TRealData *rd = GetRealData(name);; 3480 if (rd) return rd->GetThisOffset();; 3481 if (strchr(name,'[')==nullptr) {; 3482 // If this is a simple name there is a chance to find it in the; 3483 // StreamerInfo even if we did not find it in the RealData.; 3484 // For example an array name would be fArray[3] in RealData but; 3485 // just fArray in the streamerInfo.; 3486 TVirtualStreamerInfo *info = const_cast<TClass*>(this)->GetCurrentStreamerInfo();; 3487 if (info) {; 3488 return info->GetOffset(name);; 3489 }; 3490 }; 3491 return 0;; 3492}; 3493 ; 3494////////////////////////////////////////////////////////////////////////////////; 3495/// Return pointer to TRealData element with name ""name"".; 3496///; 3497/// Name can be a data member in the class itself,; 3498/// one of its base classes, or a member in; 3499/// one of the aggregated classes.; 3500///; 3501/// In case of an emulated class, the list of emulated TRealData is built.; 3502 ; 3503TRealData* TClass::GetRealData(const char* name) const; 3504{; 3505 if (!fRealData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:132531,simpl,simple,132531,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['simpl'],['simple']
Usability,"a());; 3522 } else {; 3523 return (TDataMember *)((TClass*)this)->GetListOfDataMembers(kFALSE)->FindObject(start_name);; 3524 }; 3525}; 3526 ; 3527////////////////////////////////////////////////////////////////////////////////; 3528/// Return name of the file containing the declaration of this class.; 3529 ; 3530const char *TClass::GetDeclFileName() const; 3531{; 3532 if (fDeclFileName == kUndeterminedClassInfoName); 3533 return gInterpreter->ClassInfo_FileName( fClassInfo );; 3534 return fDeclFileName;; 3535}; 3536 ; 3537////////////////////////////////////////////////////////////////////////////////; 3538/// return offset for member name. name can be a data member in; 3539/// the class itself, one of its base classes, or one member in; 3540/// one of the aggregated classes.; 3541///; 3542/// In case of an emulated class, the list of emulated TRealData is built; 3543 ; 3544Longptr_t TClass::GetDataMemberOffset(const char *name) const; 3545{; 3546 TRealData *rd = GetRealData(name);; 3547 if (rd) return rd->GetThisOffset();; 3548 if (strchr(name,'[')==nullptr) {; 3549 // If this is a simple name there is a chance to find it in the; 3550 // StreamerInfo even if we did not find it in the RealData.; 3551 // For example an array name would be fArray[3] in RealData but; 3552 // just fArray in the streamerInfo.; 3553 TVirtualStreamerInfo *info = const_cast<TClass*>(this)->GetCurrentStreamerInfo();; 3554 if (info) {; 3555 return info->GetOffset(name);; 3556 }; 3557 }; 3558 return 0;; 3559}; 3560 ; 3561////////////////////////////////////////////////////////////////////////////////; 3562/// Return pointer to TRealData element with name ""name"".; 3563///; 3564/// Name can be a data member in the class itself,; 3565/// one of its base classes, or a member in; 3566/// one of the aggregated classes.; 3567///; 3568/// In case of an emulated class, the list of emulated TRealData is built.; 3569 ; 3570TRealData* TClass::GetRealData(const char* name) const; 3571{; 3572 if (!fRealData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:135282,simpl,simple,135282,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['simpl'],['simple']
Usability,"a(Color_t fcolor, Float_t falpha)TAttFillvirtual; SetFillStyle(Style_t fstyle)TAttFillinlinevirtual; SetLineAttributes()TAttLinevirtual; SetLineColor(Color_t lcolor)TAttLineinlinevirtual; SetLineColorAlpha(Color_t lcolor, Float_t lalpha)TAttLinevirtual; SetLineStyle(Style_t lstyle)TAttLineinlinevirtual; SetLineWidth(Width_t lwidth)TAttLineinlinevirtual; SetNoEdges(Bool_t noEdges=kTRUE)TEllipsevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetPhimax(Double_t phi=360)TEllipseinlinevirtual; SetPhimin(Double_t phi=0)TEllipseinlinevirtual; SetR1(Double_t r1)TEllipseinlinevirtual; SetR2(Double_t r2)TEllipseinlinevirtual; SetTheta(Double_t theta=0)TEllipseinlinevirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetX1(Double_t x1)TEllipseinlinevirtual; SetY1(Double_t y1)TEllipseinlinevirtual; Streamer(TBuffer &) overrideTEllipsevirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TEllipseinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TEllipse()TEllipse; TEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2=0, Double_t phimin=0, Double_t phimax=360, Double_t theta=0)TEllipse; TEllipse(const TEllipse &ellipse)TEllipse; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttBBox2D()TAttBBox2Dvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TEllipse() overrideTEllipse; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEllipse-members.html:8722,Guid,Guide,8722,doc/master/classTEllipse-members.html,https://root.cern,https://root.cern/doc/master/classTEllipse-members.html,1,['Guid'],['Guide']
Usability,"a(Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); TGeoGtra(const char* name, Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); virtual~TGeoGtra(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tTGeoArb8::Capacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGeoArb8::ComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidTGeoArb8::ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); voidTGeoArb8::ComputeTwist(); virtual Bool_tTGeoArb8::Contains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoBBox::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoGtra.html:2273,Clear,ClearThreadData,2273,root/html532/TGeoGtra.html,https://root.cern,https://root.cern/root/html532/TGeoGtra.html,1,['Clear'],['ClearThreadData']
Usability,"a); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*TProof::GetDataSet(const char* dataset, const char* optStr = """"); TMap*TProof::GetDataSetQuota(const char* optStr = """"); virtual TMap*TProof::GetDataSets(const char* uri = """", const char* optStr = """"); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTProof::Getenv(const char* env, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofCondor.html:6726,Feedback,Feedback,6726,root/html602/TProofCondor.html,https://root.cern,https://root.cern/root/html602/TProofCondor.html,4,['Feedback'],['Feedback']
Usability,"a, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:3726,clear,clearShapeDirty,3726,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,3,['clear'],['clearShapeDirty']
Usability,"a, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:3662,clear,clearShapeDirty,3662,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,1,['clear'],['clearShapeDirty']
Usability,"a, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:3579,clear,clearShapeDirty,3579,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,2,['clear'],['clearShapeDirty']
Usability,"a, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataHist& data, const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:3649,Clear,Clear,3649,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,3,['Clear'],['Clear']
Usability,"a, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:3585,Clear,Clear,3585,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,1,['Clear'],['Clear']
Usability,"a, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:3502,Clear,Clear,3502,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,2,['Clear'],['Clear']
Usability,"a0; // c0 - 2 * c1 + c2; 69 return (a2 * xScaled + a1) * xScaled + a0;; 70 }; 71 ; 72 double t = xScaled;; 73 double s = 1. - xScaled;; 74 ; 75 double result = coefs[0] * s;; 76 for (int i = 1; i < degree; i++) {; 77 result = (result + t * binomial(degree, i) * coefs[i]) * s;; 78 t *= xScaled;; 79 }; 80 result += t * coefs[degree];; 81 ; 82 return result;; 83}; 84 ; 85/// @brief Function to evaluate an un-normalized RooGaussian.; 86inline double gaussian(double x, double mean, double sigma); 87{; 88 const double arg = x - mean;; 89 const double sig = sigma;; 90 return std::exp(-0.5 * arg * arg / (sig * sig));; 91}; 92 ; 93inline double product(double const *factors, std::size_t nFactors); 94{; 95 double out = 1.0;; 96 for (std::size_t i = 0; i < nFactors; ++i) {; 97 out *= factors[i];; 98 }; 99 return out;; 100}; 101 ; 102// RooRatio evaluate function.; 103inline double ratio(double numerator, double denominator); 104{; 105 return numerator / denominator;; 106}; 107 ; 108inline double bifurGauss(double x, double mean, double sigmaL, double sigmaR); 109{; 110 // Note: this simplification does not work with Clad as of v1.1!; 111 // return gaussian(x, mean, x < mean ? sigmaL : sigmaR);; 112 if (x < mean); 113 return gaussian(x, mean, sigmaL);; 114 return gaussian(x, mean, sigmaR);; 115}; 116 ; 117inline double efficiency(double effFuncVal, int catIndex, int sigCatIndex); 118{; 119 // Truncate efficiency function in range 0.0-1.0; 120 effFuncVal = std::clamp(effFuncVal, 0.0, 1.0);; 121 ; 122 if (catIndex == sigCatIndex); 123 return effFuncVal; // Accept case; 124 else; 125 return 1 - effFuncVal; // Reject case; 126}; 127 ; 128/// In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0.; 129template <bool pdfMode = false>; 130inline double polynomial(double const *coeffs, int nCoeffs, int lowestOrder, double x); 131{; 132 double retVal = coeffs[nCoeffs - 1];; 133 for (int i = nCoeffs - 2; i >= 0; i--); 134 retVal = coeffs[i] + x * retVal;; 135",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:3119,simpl,simplification,3119,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,1,['simpl'],['simplification']
Usability,"a=0.8, ; prevFCN = 9770.666818 alpha=0.8, ; prevFCN = 9770.66743 alpha=0.8, ; prevFCN = 9770.91141 alpha=0.8, ; prevFCN = 9770.670187 alpha=0.8, ; prevFCN = 9770.668617 alpha=0.8, ; prevFCN = 9770.667852 alpha=0.8, ; prevFCN = 9770.667479 alpha=0.8, ; prevFCN = 9770.667297 alpha=0.8, ; prevFCN = 9770.667208 alpha=0.8, ; prevFCN = 9770.667165 alpha=0.8, ; prevFCN = 9770.667144 alpha=0.8, ; prevFCN = 9770.667134 alpha=0.8, ; prevFCN = 9770.667129 alpha=0.8, ; prevFCN = 9770.667126 alpha=0.8, ; prevFCN = 9770.667124 alpha=0.8, ; prevFCN = 9770.91141 alpha=0.8, ; prevFCN = 9770.670187 alpha=0.8, ; prevFCN = 9770.666827 alpha=0.8, ; prevFCN = 9770.667421 alpha=0.8, ; prevFCN = 9770.667064 alpha=0.8, ; prevFCN = 9770.667183 alpha=0.8, ; prevFCN = 9770.667124 alpha=0.8, ; prevFCN = 9770.667064 alpha=0.8, ; prevFCN = 9770.667183 alpha=0.8, ; prevFCN = 9770.66653 alpha=0.8, ; prevFCN = 9770.667718 alpha=0.8, ; prevFCN = 9770.667005 alpha=0.8, ; prevFCN = 9770.667243 alpha=0.8, [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x557b71f2aa10 with pdf g1_MORPH_g2_CACHE_Obs[alpha,x]_NORM_x for nset (x) with code 0 from preexisting content.; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x557b71f2aa10 with pdf g1_MORPH_g2_CACHE_Obs[alpha,x]_NORM_x for nset (x) with code 0 from preexisting content.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(lmorph_over_lmorph_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x557b71a5f5d0 with pdf g1_MORPH_g2_CACHE_Obs[alpha,x] for nset () with code 1 from preexisting content.; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf705_linearmorph.C. tutorialsroofitrf705_linearmorph.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf705__linearmorph_8C.html:11837,Guid,Guide,11837,doc/master/rf705__linearmorph_8C.html,https://root.cern,https://root.cern/doc/master/rf705__linearmorph_8C.html,1,['Guid'],['Guide']
Usability,"a=1.Definition TRandom.cxx:507; TStyle::SetStatYvoid SetStatY(Float_t y=0)Definition TStyle.h:398; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; TVirtualFitterAbstract Base Class for Fitting.Definition TVirtualFitter.h:29; TVirtualFitter::SetDefaultFitterstatic void SetDefaultFitter(const char *name="""")static: set name of default fitterDefinition TVirtualFitter.cxx:245; TVirtualFitter::GetStatsvirtual Int_t GetStats(Double_t &amin, Double_t &edm, Double_t &errdef, Int_t &nvpar, Int_t &nparx) const =0; TVirtualFitter::SetFCNvirtual void SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t))To set the address of the minimization objective function called by the native compiler (see function...Definition TVirtualFitter.cxx:267; TVirtualFitter::GetParErrorvirtual Double_t GetParError(Int_t ipar) const =0; TVirtualFitter::SetParametervirtual Int_t SetParameter(Int_t ipar, const char *parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh)=0; TVirtualFitter::ExecuteCommandvirtual Int_t ExecuteCommand(const char *command, Double_t *args, Int_t nargs)=0; TVirtualFitter::GetParametervirtual Double_t GetParameter(Int_t ipar) const =0; TVirtualFitter::Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t maxpar=25)Static function returning a pointer to the current fitter.Definition TVirtualFitter.cxx:159; double; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMVA_SOFIE_GNN_Parser.tmptmpDefinition TMVA_SOFIE_GNN_Parser.py:196; AuthorRene Brun ; Definition in file TwoHistoFit2D.C. tutorialsfitTwoHistoFit2D.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TwoHistoFit2D_8C.html:12831,Guid,Guide,12831,doc/master/TwoHistoFit2D_8C.html,https://root.cern,https://root.cern/doc/master/TwoHistoFit2D_8C.html,1,['Guid'],['Guide']
Usability,"aFrame.; // `h` can be used just like a pointer to TH1D but it is actually a TResultProxy<TH1D>, a smart object that triggers; // an event-loop to fill the pointee histogram if needed.; auto h = df.Histo1D<double>({""browserHisto"", """", 100, -2., 2.}, ""x"");; ; // ## Use the callback mechanism to draw the histogram on a TBrowser while it is being filled; // So far we have registered a column ""x"" to a data-frame with `nEvents` events and we registered the filling of a; // histogram with the values of column ""x"".; // In the following we will register three functions for execution during the event-loop:; // - one is to be executed once just before the loop and adds a partially-filled histogram to a TBrowser; // - the next is executed every 50 events and draws the partial histogram on the TBrowser's TPad; // - another callback is responsible of updating a simple progress bar from multiple threads; ; // First off we create a TBrowser that contains a ""RDFResults"" directory; auto dfDirectory = new TMemFile(""RDFResults"", ""RECREATE"");; auto browser = new TBrowser(""b"", dfDirectory);; // The global pad should now be set to the TBrowser's canvas, let's store its value in a local variable; auto browserPad = gPad;; ; // A useful feature of `TResultProxy` is its `OnPartialResult` method: it allows us to register a callback that is; // executed once per specified number of events during the event-loop, on ""partial"" versions of the result objects; // contained in the `TResultProxy`. In this case, the partial result is going to be a histogram filled with an; // increasing number of events.; // Instead of requesting the callback to be executed every N entries, this time we use the special value `kOnce` to; // request that it is executed once right before starting the event-loop.; // The callback is a C++11 lambda that registers the partial result object in `dfDirectory`.; h.OnPartialResult(h.kOnce, [dfDirectory](TH1D &h_) { dfDirectory->Add(&h_); });; // Note that we called `OnPartialRes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df013__InspectAnalysis_8C.html:2227,simpl,simple,2227,doc/master/df013__InspectAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html,2,"['progress bar', 'simpl']","['progress bar', 'simple']"
Usability,"aInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveBoxSetGL(); Default constructor. ~TEveBoxSetGL(); Destructor. Int_t PrimitiveType() const; Return GL primitive used to render the boxes, based on the; render-mode specified in the model object. void MakeOriginBox(Float_t[8][3] p, Float_t dx, Float_t dy, Float_t dz) const; Fill array p to represent a box (0,0,0) - (dx,dy,dz). void RenderBoxStdNorm(const Float_t[8][3] p) const; Render a box specified by points in array p with standard; axis-aligned normals. void RenderBoxAutoNorm(const Float_t[8][3] p) const; Render box, calculate normals on the fly from first three points. void MakeDisplayList() const; Create a display-list for rendering a single box, based on the; current box-type.; Some box-types don't benefit from the display-list rendering and; so display-list is not created. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Determines if display-list will be used for rendering.; Virtual from TGLLogicalShape. void DLCacheDrop(); Called when display lists have been destroyed externally and the; internal display-list data needs to be cleare.; Virtual from TGLLogicalShape. void DLCachePurge(); Called when display-lists need to be returned to the system.; Virtual from TGLLogicalShape. Bool_t SetModel(TObject* obj, const Option_t* opt = 0); Set model object.; Virtual from TGLObject. void RenderBoxes(TGLRnrCtx& rnrCtx) const; GL rendering for all box-types. void DirectDraw(TGLRnrCtx& rnrCtx) const; Actual rendering code.; Virtual from TGLLogicalShape. void Render(TGLRnrCtx& rnrCtx); Interface for direct rendering from classes that include TEveBoxSet; as a member. TEveBoxSetGL(const TEveBoxSetGL& ). TEveBoxSetGL& operator=(const TEveBoxSetGL& ). » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveBoxSetGL.html:5964,clear,cleare,5964,root/html604/TEveBoxSetGL.html,https://root.cern,https://root.cern/root/html604/TEveBoxSetGL.html,1,['clear'],['cleare']
Usability,"aInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveBoxSetGL(); Default constructor. ~TEveBoxSetGL(); Destructor. Int_t PrimitiveType() const; Return GL primitive used to render the boxes, based on the; render-mode specified in the model object. void MakeOriginBox(Float_t[8][3] p, Float_t dx, Float_t dy, Float_t dz) const; Fill array p to represent a box (0,0,0) - (dx,dy,dz). void RenderBoxStdNorm(const Float_t[8][3] p) const; Render a box specified by points in array p with standard; axis-aligned normals. void RenderBoxAutoNorm(const Float_t[8][3] p) const; Render box, calculate normals on the fly from first three points. void MakeDisplayList() const; Create a display-list for rendering a single box, based on the; current box-type.; Some box-types don't benefit from the display-list rendering and; so display-list is not created. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Determines if display-list will be used for rendering.; Virtual from TGLLogicalShape. void DLCacheDrop(); Called when display lists have been destroyed externally and the; internal display-list data needs to be cleare.; Virtual from TGLLogicalShape. void DLCachePurge(); Called when display-lists need to be returned to the system.; Virtual from TGLLogicalShape. Bool_t SetModel(TObject* obj, const Option_t* opt = 0); Set model object.; Virtual from TGLObject. void RenderBoxes(TGLRnrCtx& rnrCtx) const; GL rendering for all box-types. void DirectDraw(TGLRnrCtx& rnrCtx) const; Actual rendering code.; Virtual from TGLLogicalShape. void Render(TGLRnrCtx& rnrCtx); Interface for direct rendering from classes that include TEveBoxSet; as a member. TEveBoxSetGL(const TEveBoxSetGL& ). TEveBoxSetGL& operator=(const TEveBoxSetGL& ). » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveBoxSetGL.html:5964,clear,cleare,5964,root/html602/TEveBoxSetGL.html,https://root.cern,https://root.cern/root/html602/TEveBoxSetGL.html,1,['clear'],['cleare']
Usability,aInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► mlp;  ► inc;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  doc;  ► inc;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidua,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:53515,Simpl,SimplexSeedGenerator,53515,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['Simpl'],['SimplexSeedGenerator']
Usability,aInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► mlp;  ► inc;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbSparse.h;  TQpResidual.h;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:52912,Simpl,SimplexSeedGenerator,52912,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,2,['Simpl'],['SimplexSeedGenerator']
Usability,aInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  LinkDef.h;  TFeldmanCousins.h;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:54620,Simpl,SimplexSeedGenerator,54620,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['Simpl'],['SimplexSeedGenerator']
Usability,aInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLore,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:53162,Simpl,SimplexSeedGenerator,53162,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['Simpl'],['SimplexSeedGenerator']
Usability,"aRules(ROOT::TSchemaRuleSet* rules); voidTClass::AdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Int_tTClass::AutoBrowse(TObject* obj, TBrowser* browser); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTClass::Browse(TBrowser* b); Int_tTClass::Browse(void* obj, TBrowser* b) const; voidTClass::BuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); voidTClass::BuildRealData(void* pointer = 0, Bool_t isTransient = kFALSE); voidTClass::CalculateStreamerOffset() const; Bool_tTClass::CallShowMembers(void* obj, TMemberInspector& insp, Int_t isATObject = -1) const; Bool_tTClass::CanIgnoreTObjectStreamer(); Bool_tTClass::CanSplit() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TClass::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; voidTClass::CopyCollectionProxy(const TVirtualCollectionProxy&); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTClass::DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); virtual voidTQObject::Destroyed()SIGNAL ; voidTClass::Destructor(void* obj, Bool_t dtorOnly = kFALSE); Bool_tTQObject::Disconnect(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQClass.html:3011,Clear,Clear,3011,root/html528/TQClass.html,https://root.cern,https://root.cern/root/html528/TQClass.html,3,['Clear'],['Clear']
Usability,"aRules(ROOT::TSchemaRuleSet* rules); voidTClass::AdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Int_tTClass::AutoBrowse(TObject* obj, TBrowser* browser); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTClass::Browse(TBrowser* b); Int_tTClass::Browse(void* obj, TBrowser* b) const; voidTClass::BuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); voidTClass::BuildRealData(void* pointer = 0, Bool_t isTransient = kFALSE); voidTClass::CalculateStreamerOffset() const; Bool_tTClass::CallShowMembers(void* obj, TMemberInspector& insp, Int_t isATObject = -1) const; Bool_tTClass::CanIgnoreTObjectStreamer(); Bool_tTClass::CanSplit() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TClass::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; voidTClass::CopyCollectionProxy(const TVirtualCollectionProxy&); voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTClass::DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); virtual voidTQObject::Destroyed()SIGNAL ; voidTClass::Destructor(void* obj, Bool_t dtorOnly =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQClass.html:2975,Clear,Clear,2975,root/html534/TQClass.html,https://root.cern,https://root.cern/root/html534/TQClass.html,1,['Clear'],['Clear']
Usability,aScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Git Primer. These links collect the minimal amount of knowledge about git a ROOT contributor needs to know:. Git How Tos; NoSY Workflow; Git Tips and Tricks; Creating a Pull Request. Quick Links; Jenkins Service; Jenkins How To; CDash; Coverity; Github; GitWeb; LXR; Jira; Conventions Violations; ROOT Logos; Upgrade of ROOTbinder. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-primer.html:2275,Guid,Guides,2275,d/git-primer.html,https://root.cern,https://root.cern/d/git-primer.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"aSet(TEventList* test); Sets the Test dataset.; Those events will not be used for the minimization but for control. void SetTrainingDataSet(const char* train); Sets the Training dataset.; Those events will be used for the minimization.; Note that the tree must be already defined. void SetTestDataSet(const char* test); Sets the Test dataset.; Those events will not be used for the minimization but for control.; Note that the tree must be already defined. void SetLearningMethod(TMultiLayerPerceptron::ELearningMethod method); Sets the learning method.; Available methods are: kStochastic, kBatch,; kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; (look at the constructor for the complete description; of learning methods and parameters). void SetEta(Double_t eta); Sets Eta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEpsilon(Double_t eps); Sets Epsilon - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetDelta(Double_t delta); Sets Delta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEtaDecay(Double_t ed); Sets EtaDecay - Eta *= EtaDecay at each epoch; (look at the constructor for the complete description; of learning methods and parameters). void SetTau(Double_t tau); Sets Tau - used in line search; (look at the constructor for the complete description; of learning methods and parameters). void SetReset(Int_t reset); Sets number of epochs between two resets of the; search direction to the steepest descent.; (look at the constructor for the complete description; of learning methods and parameters). void GetEntry(Int_t ) const; Load an entry into the network. void Train(Int_t nEpoch, Option_t* option = ""text"", Double_t minE = 0); Train the network.; nEpoch is the number of iterations.; option can contain:; -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:23943,learn,learning,23943,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['learn'],['learning']
Usability,"aSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegralMorph.html:6341,clear,clearEvalErrorLog,6341,root/html526/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html526/RooIntegralMorph.html,1,['clear'],['clearEvalErrorLog']
Usability,"aSetInfo(). virtual Int_t TProofMonSender::SendDataSetInfo ; (; TDSet * ; , . TList * ; , . const char * ; , . const char * ;  . ). pure virtual . Implemented in TProofMonSenderSQL. ◆ SendFileInfo(). virtual Int_t TProofMonSender::SendFileInfo ; (; TDSet * ; , . TList * ; , . const char * ; , . const char * ;  . ). pure virtual . Implemented in TProofMonSenderSQL. ◆ SendSummary(). virtual Int_t TProofMonSender::SendSummary ; (; TList * ; , . const char * ;  . ). pure virtual . Implemented in TProofMonSenderSQL. ◆ SetSendOptions(). Int_t TProofMonSender::SetSendOptions ; (; const char * ; sendopts). Parse send options from string 'sendopts'. ; Format is: ""[-,+]S[n]|[-,+]D[m]|[-,+]F[j]"" where:; The big letter refers to the 'table' following S table with summary log; D table with dataset info; F table files info. The '-,+' in front disables/enables the related table; if absent '+' is assumed; The number after the letter is the version of the related table. Returns -1 if nothing is enabled; 0 otherwise ; Definition at line 43 of file TProofMonSender.cxx. ◆ Streamer(). void TProofMonSender::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed.; Reimplemented in TProofMonSenderSQL. ◆ StreamerNVirtual(). void TProofMonSender::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 79 of file TProofMonSender.h. Member Data Documentation. ◆ fDataSetInfoVrs. Int_t TProofMonSender::fDataSetInfoVrs. protected . Definition at line 34 of file TProofMonSender.h. ◆ fFileInfoVrs. Int_t TProofMonSender::fFileInfoVrs. protected . Definition at line 35 of file TProofMonSender.h. ◆ fSummaryVrs. Int_t TProofMonSender::fSummaryVrs. protected . Definition at line 33 of file TProofMonSender.h. proof/proofplayer/inc/TProofMonSender.h; proof/proofplayer/src/TProofMonSender.cxx. TProofMonSender. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMonSender.html:15464,Guid,Guide,15464,doc/master/classTProofMonSender.html,https://root.cern,https://root.cern/doc/master/classTProofMonSender.html,1,['Guid'],['Guide']
Usability,"aStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegralMorph.html:6417,clear,clearValueDirty,6417,root/html526/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html526/RooIntegralMorph.html,1,['clear'],['clearValueDirty']
Usability,"aStore& set); const set<std::string>&RooAbsArg::attributes() const; const RooFormulaVar&basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooResolutionModel.html:4193,clear,clearEvalError,4193,root/html526/RooResolutionModel.html,https://root.cern,https://root.cern/root/html526/RooResolutionModel.html,1,['clear'],['clearEvalError']
Usability,"aStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFFTConvPdf.html:7195,Clear,Clear,7195,root/html532/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html532/RooFFTConvPdf.html,1,['Clear'],['Clear']
Usability,"aStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFFTConvPdf.html:7195,Clear,Clear,7195,root/html528/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html528/RooFFTConvPdf.html,1,['Clear'],['Clear']
Usability,"aStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFFTConvPdf.html:7195,Clear,Clear,7195,root/html530/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html530/RooFFTConvPdf.html,1,['Clear'],['Clear']
Usability,"aTeX documents. PGF is a TeX macro package for generating graphics. It is platform; and format-independent and works together with the most important TeX; backend drivers, including pdftex and dvips. It comes with a; user-friendly syntax layer called TikZ. To generate a such file it is enough to do:. gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");. Then, the generated file (hpx.tex) can be included in a; LaTeX document (simple.tex) in the following way:. \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}. Note the three directives needed at the top of the LaTeX file:. \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}. Then including the picture in the document is done with the; \input<\tt> directive.; The command pdflatex simple.tex will generate the; corresponding pdf file simple.pdf.; . Function Members (Methods); public:. TTeXDump(); TTeXDump(const char* filename, Int_t type = -113); virtual~TTeXDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); Int_tCMtoTeX(Double_t u); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidDefineMarkers(); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTeXDump.html:1437,simpl,simple,1437,root/html534/TTeXDump.html,https://root.cern,https://root.cern/root/html534/TTeXDump.html,1,['simpl'],['simple']
Usability,"aTeX documents. PGF is a TeX macro package for generating graphics. It is platform; and format-independent and works together with the most important TeX; backend drivers, including pdftex and dvips. It comes with a; user-friendly syntax layer called TikZ. To generate a such file it is enough to do:. gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");. Then, the generated file (hpx.tex) can be included in a; LaTeX document (simple.tex) in the following way:. \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}. Note the three directives needed at the top of the LaTeX file:. \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}. Then including the picture in the document is done with the; \input<\tt> directive.; The command pdflatex simple.tex will generate the; corresponding pdf file simple.pdf.; . Function Members (Methods); public:. virtual~TTeXDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); Int_tCMtoTeX(Double_t u); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidDefineMarkers(); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTeXDump.html:1461,simpl,simple,1461,root/html602/TTeXDump.html,https://root.cern,https://root.cern/root/html602/TTeXDump.html,2,['simpl'],['simple']
Usability,"aWriter;  CTMonitor;  CTMPClientBase class for multiprocess applications' clients ;  CTMPWorkerThis class works in conjuction with TMPClient, reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMap;  CTPackageDescription;  CTPacketizer;  CTPacketizerAdaptive;  CTPacketizerFile;  CTPacketizerMulti;  CTPacketizerUnit;  CTPadThe ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:144378,simpl,simple,144378,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['simpl'],['simple']
Usability,"a_16x16.root"";; ; bool fileExist = !gSystem->AccessPathName(inputFileName);; ; // if file does not exists create it; if (!fileExist) {; MakeImagesTree(nevts, 16, 16);; }; ; bool useTMVACNN = (opt.size() > 0) ? opt[0] : false;; bool useKerasCNN = (opt.size() > 1) ? opt[1] : false;; bool useTMVADNN = (opt.size() > 2) ? opt[2] : false;; bool useTMVABDT = (opt.size() > 3) ? opt[3] : false;; bool usePyTorchCNN = (opt.size() > 4) ? opt[4] : false;; #ifndef R__HAS_TMVACPU; #ifndef R__HAS_TMVAGPU; Warning(""TMVA_CNN_Classification"",; ""TMVA is not build with GPU or CPU multi-thread support. Cannot use TMVA Deep Learning for CNN"");; useTMVACNN = false;; #endif; #endif; ; bool writeOutputFile = true;; ; #ifdef R__USE_IMT; int num_threads = 4; // use by default 4 threads if value is not set before; // switch off MT in OpenBLAS to avoid conflict with tbb; gSystem->Setenv(""OMP_NUM_THREADS"", ""1"");; ; // do enable MT running; if (num_threads >= 0) {; ROOT::EnableImplicitMT(num_threads);; }; #endif; ; TMVA::Tools::Instance();; ; ; std::cout << ""Running with nthreads = "" << ROOT::GetThreadPoolSize() << std::endl;; ; #ifdef R__HAS_PYMVA; gSystem->Setenv(""KERAS_BACKEND"", ""tensorflow"");; // for using Keras; TMVA::PyMethodBase::PyInitialize();; #else; useKerasCNN = false;; usePyTorchCNN = false;; #endif; ; TFile *outputFile = nullptr;; if (writeOutputFile); outputFile = TFile::Open(""TMVA_CNN_ClassificationOutput.root"", ""RECREATE"");; ; /***; ## Create TMVA Factory; ; Create the Factory class. Later you can choose the methods; whose performance you'd like to investigate.; ; The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; ; - The first argument is the base of the name of all the output; weight files in the directory weight/ that will be created with the; method parameters; ; - The second argument is the output file for the training results; ; - The third argument is a string option defining some general configuration for the TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:48424,Learn,Learning,48424,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Learn'],['Learning']
Usability,"a_LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) only plotting range 'fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) only plotting range 'fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) only plotting range 'fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) only plotting range 'fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) only plotting range 'fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) only plotting range 'fit_nll_modelsum_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_modelsum_modelData_LEFT,fit_nll_modelsum_modelData_RIGHT'; AuthorsStephan Hageboeck, Wouter Verkerke ; Definition in file rf204b_extendedLikelihood_rangedFit.C. tutorialsroofitrf204b_extendedLikelihood_rangedFit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html:28159,Guid,Guide,28159,doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,https://root.cern,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,1,['Guid'],['Guide']
Usability,"ab ();  Set a given tab element as active one. ;  ; void SetVolTabEnabled (Bool_t flag=kTRUE);  Enable/disable tabs. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTabManager.html:2746,Clear,Clear,2746,doc/master/classTGeoTabManager.html,https://root.cern,https://root.cern/doc/master/classTGeoTabManager.html,1,['Clear'],['Clear']
Usability,"abel *title = new TPaveLabel(0.04, 0.86, 0.96, 0.98,; ""\""gl\"" option for TF3. Select plot and press 's' to change the color."");; title->SetFillColor(32);; title->Draw();; ; TPad *tf3Pad = new TPad(""box"", ""box"", 0.04, 0.04, 0.96, 0.8);; tf3Pad->Draw();; ; TFormula *f1 = new TFormula(""f1"", ""x*x + y*y + z*z + 2*y - 1"");; TFormula *f2 = new TFormula(""f2"", ""x*x + y*y + z*z - 2*y - 1"");; ; // Klein bottle with cut top&bottom parts; // The Klein bottle is a closed non-orientable surface that has no; // inside or outside.; ; TF3 *tf3 = new TF3(""Klein Bottle"",""f1*(f2*f2-8*z*z) + 16*x*z*f2"",; -3.5, 3.5, -3.5, 3.5, -2.5, 2.5);; ; tf3->SetFillColor(kRed);; tf3Pad->cd();; tf3->Draw(""gl"");; }; kRed@ kRedDefinition Rtypes.h:66; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TF3A 3-Dim function with parameters.Definition TF3.h:28; TF3::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF3.cxx:194; TFormulaThe Formula class.Definition TFormula.h:89; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TStyle::SetCanvasPreferGLvoid SetCanvasPreferGL(Bool_t prefer=kTRUE)Definition TStyle.h:341; f1TF1 * f1Definition legend1.C:11; AuthorTimur Pocheptsov ; Definition in file gltf3.C. tutorialsglgltf3.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gltf3_8C.html:2566,Guid,Guide,2566,doc/master/gltf3_8C.html,https://root.cern,https://root.cern/doc/master/gltf3_8C.html,1,['Guid'],['Guide']
Usability,abel * fBarLbl3;  Label of histogram name text entry. ;  ; TGCheckButton * fBarH;  Checked for drawing current histogram with different graphic option. ;  ; TGCheckButton * fBarScan;  Checked for tree scan. ;  ; TGCheckButton * fBarRec;  Command recording toggle. ;  ; TGTextEntry * fBarCommand;  User command entry. ;  ; TGTextEntry * fBarOption;  Histogram drawing option entry. ;  ; TGTextEntry * fBarHist;  Histogram name entry. ;  ; Frames; TGHorizontalFrame * fHf;  Main horizontal frame. ;  ; TGDoubleVSlider * fSlider;  Vertical slider to select processed tree entries;. ;  ; TGVerticalFrame * fV1;  List tree mother. ;  ; TGVerticalFrame * fV2;  List view mother. ;  ; TGCompositeFrame * fTreeHdr;  Header for list tree. ;  ; TGCompositeFrame * fListHdr;  Header for list view. ;  ; TGLabel * fLbl1;  Label for list tree. ;  ; TGLabel * fLbl2;  Label for list view. ;  ; TGHorizontalFrame * fBFrame;  Button frame. ;  ; TGHorizontalFrame * fHpb;  Progress bar frame. ;  ; TGHProgressBar * fProgressBar;  Progress bar. ;  ; TGLabel * fBLbl4;  Label for input list entry. ;  ; TGLabel * fBLbl5;  Label for output list entry. ;  ; TGTextEntry * fBarListIn;  Tree input event list name entry. ;  ; TGTextEntry * fBarListOut;  Pree output event list name entry. ;  ; TGPictureButton * fDRAW;  DRAW button. ;  ; TGTextButton * fSPIDER;  SPIDER button. ;  ; TGPictureButton * fSTOP;  Interrupt current command (not yet) ;  ; TGPictureButton * fREFR;  REFRESH button ///<ia. ;  ; TGStatusBar * fStatusBar;  Status bar. ;  ; TGComboBox * fCombo;  Combo box with session records. ;  ; TGPictureButton * fBGFirst;  ; TGPictureButton * fBGPrevious;  ; TGPictureButton * fBGRecord;  ; TGPictureButton * fBGNext;  ; TGPictureButton * fBGLast;  ; TGTextButton * fReset;  clear expression's entries ;  ; ListTree; TGCanvas * fTreeView;  ListTree canvas container. ;  ; TGListTree * fLt;  ListTree with file and tree items. ;  ; ListView; TGListView * fListView;  ListView with branches and leaves. ;  ; TTVLV,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeViewer.html:41843,Progress bar,Progress bar,41843,doc/master/classTTreeViewer.html,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html,1,['Progress bar'],['Progress bar']
Usability,"able ; (; const TRefTable & ; ). delete . Member Function Documentation. ◆ Add(). Int_t TRefTable::Add ; (; Int_t ; uid, . TProcessID * ; context = nullptr . ). virtual . Add a new uid to the table. ; we add a new pair (uid,fparent) to the map This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer ; Definition at line 88 of file TRefTable.cxx. ◆ AddInternalIdxForPID(). Int_t TRefTable::AddInternalIdxForPID ; (; TProcessID * ; procid). protected . Add the internal index for fProcessIDs, fAllocSize, etc given a PID. ; Definition at line 119 of file TRefTable.cxx. ◆ Class(). static TClass * TRefTable::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRefTable::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRefTable::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 93 of file TRefTable.h. ◆ Clear(). void TRefTable::Clear ; (; Option_t * ; = """"). overridevirtual . Clear all entries in the table. ; Reimplemented from TObject.; Definition at line 145 of file TRefTable.cxx. ◆ DeclFileName(). static const char * TRefTable::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 93 of file TRefTable.h. ◆ Expand(). Int_t TRefTable::Expand ; (; Int_t ; pid, . Int_t ; newsize . ). virtual . Expand fParentIDs to newsize for ProcessID pid. ; Definition at line 157 of file TRefTable.cxx. ◆ ExpandForIID(). Int_t TRefTable::ExpandForIID ; (; Int_t ; iid, . Int_t ; newsize . ). protectedvirtual . Expand fParentIDs to newsize for internel ProcessID index iid. ; Definition at line 167 of file TRefTable.cxx. ◆ ExpandPIDs(). void TRefTable::ExpandPIDs ; (; Int_t ; numpids). protected . Expand the arrays of managed PIDs. ; Definition at line 193 of file TRefTable.cxx. ◆ FillBuffer(). void TRefTable::FillBuffer ; (; TBuffer & ; b). virtual . Fill buffer b with the fN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefTable.html:16034,Clear,Clear,16034,doc/master/classTRefTable.html,https://root.cern,https://root.cern/doc/master/classTRefTable.html,1,['Clear'],['Clear']
Usability,"able rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Float_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the size of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Double_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the size of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. TTableSorter(const Long_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0). TTableSorter ctor sort the input ""simpleArray"". - arraySize - the sie of the full array; - firstRow - the first table row to sort from (=0 by default); - numberRows - the number of the table rows to sort (=0 by default); = 0 means sort all rows from the ""firstRow"" by the end of table. void SetSimpleArray(Int_t arraySize, Int_t firstRow, Int_t numberRows); Set some common parameteres for the ""simple"" arrays. ~TTableSorter(); to be documented. Int_t BSearch(valuetype value). Int_t SelectSearch(valuetype value). Int_t BSearch(const void* value) const; to be documented. Int_t GetIndex(UInt_t sortedIndex) const; returns the original index of the row by its sorted index. Int_t CountKey(const void* key, Int_t firstIndx = 0, Bool_t bSearch = kTRUE, Int_t* firstRow = 0) const. CountKey counts the number of rows with the key value equal ""key"". key - it is a POINTER to the key value; fistIndx - the first index within sorted array to star search; = 0 by default; bSearch = kTRUE - binary search (by default) is used other",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableSorter.html:17174,simpl,simpleArray,17174,root/html528/TTableSorter.html,https://root.cern,https://root.cern/root/html528/TTableSorter.html,6,['simpl'],['simpleArray']
Usability,"able::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveProjectionManager.html:2564,Clear,ClearProjectedList,2564,root/html530/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html530/TEveProjectionManager.html,5,['Clear'],['ClearProjectedList']
Usability,"able::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveShape::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoShape.html:2788,Clear,ClearProjectedList,2788,root/html528/TEveGeoShape.html,https://root.cern,https://root.cern/root/html528/TEveGeoShape.html,3,['Clear'],['ClearProjectedList']
Usability,ableFrame::fContainer. protected . container containing dockable frame ; Definition at line 96 of file TGDockableFrame.h. ◆ fDeleted. Bool_t TGDockableFrame::fDeleted. protected . kTRUE if it is being deleted ; Definition at line 93 of file TGDockableFrame.h. ◆ fDockButton. TGDockButton* TGDockableFrame::fDockButton. protected . dock button ; Definition at line 98 of file TGDockableFrame.h. ◆ fDockName. TString TGDockableFrame::fDockName. protected . name of frame ; Definition at line 95 of file TGDockableFrame.h. ◆ fEnableHide. Bool_t TGDockableFrame::fEnableHide. protected . if frame can be hidden ; Definition at line 91 of file TGDockableFrame.h. ◆ fEnableUndock. Bool_t TGDockableFrame::fEnableUndock. protected . if frame can be undocked ; Definition at line 92 of file TGDockableFrame.h. ◆ fFixedSize. Bool_t TGDockableFrame::fFixedSize. protected . kTRUE if fixed size when undocked ; Definition at line 94 of file TGDockableFrame.h. ◆ fFrame. TGUndockedFrame* TGDockableFrame::fFrame. protected . undocked frame ; Definition at line 100 of file TGDockableFrame.h. ◆ fHidden. Bool_t TGDockableFrame::fHidden. protected . if frame is hidden ; Definition at line 90 of file TGDockableFrame.h. ◆ fHideButton. TGDockHideButton* TGDockableFrame::fHideButton. protected . hide button ; Definition at line 99 of file TGDockableFrame.h. ◆ fHints. TGLayoutHints* TGDockableFrame::fHints. protected . layout hints ; Definition at line 101 of file TGDockableFrame.h. ◆ fLb. TGLayoutHints* TGDockableFrame::fLb. protected . Definition at line 102 of file TGDockableFrame.h. ◆ fLc. TGLayoutHints * TGDockableFrame::fLc. protected . layout hints ; Definition at line 102 of file TGDockableFrame.h. Libraries for TGDockableFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGDockableFrame.h; gui/gui/src/TGDockableFrame.cxx. TGDockableFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:58 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockableFrame.html:40395,undo,undocked,40395,doc/master/classTGDockableFrame.html,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html,2,"['Guid', 'undo']","['Guide', 'undocked']"
Usability,"abled); are partially visible. void DrawSphere(const TGLVertex3& position, Double_t radius, const UChar_t* rgba); Draw sphere, centered on vertex 'position', with radius 'radius',; color 'rgba'. void DrawLine(const TGLLine3& line, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t* rgba); Draw thick line (tube) defined by 'line', with head at end shape; 'head' - box/arrow/none, (head) size 'size', color 'rgba'. void DrawLine(const TGLVertex3& start, const TGLVector3& vector, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t* rgba); Draw thick line (tube) running from 'start', length 'vector',; with head at end of shape 'head' - box/arrow/none,; (head) size 'size', color 'rgba'. void DrawRing(const TGLVertex3& center, const TGLVector3& normal, Double_t radius, const UChar_t* rgba); Draw ring, centered on 'center', lying on plane defined by 'center' & 'normal'; of outer radius 'radius', color 'rgba'. void DrawReferenceMarker(const TGLCamera& camera, const TGLVertex3& pos, Float_t radius = 3, const UChar_t* rgba = 0); Draw a sphere- marker on world-coordinate 'pos' with pixel; radius 'radius'. Color argument is optional. void DrawSimpleAxes(const TGLCamera& camera, const TGLBoundingBox& bbox, Int_t axesType); Draw simple xyz-axes for given bounding-box. void DrawNumber(const TString& num, const TGLVertex3& pos, Bool_t center = kFALSE); Draw number in string 'num' via internal 8x8-pixel bitmap on; vertex 'pos'. If 'center' is true, the number is centered on 'pos'.; Only numbers, '.', '-' and ' ' are supported. TGLColor& operator=(const TGLUtil& ). TGLUtil(const TGLUtil& ). virtual ~TGLUtil(); {}. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLUtil.h 36560 2010-11-09 15:26:23Z couet $ » Last generated: 2010-11-09 17:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLUtil.html:10097,simpl,simple,10097,root/html528/TGLUtil.html,https://root.cern,https://root.cern/root/html528/TGLUtil.html,1,['simpl'],['simple']
Usability,"abled); are partially visible. void DrawSphere(const TGLVertex3& position, Double_t radius, const UChar_t* rgba); Draw sphere, centered on vertex 'position', with radius 'radius',; color 'rgba'. void DrawLine(const TGLLine3& line, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t* rgba); Draw thick line (tube) defined by 'line', with head at end shape; 'head' - box/arrow/none, (head) size 'size', color 'rgba'. void DrawLine(const TGLVertex3& start, const TGLVector3& vector, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t* rgba); Draw thick line (tube) running from 'start', length 'vector',; with head at end of shape 'head' - box/arrow/none,; (head) size 'size', color 'rgba'. void DrawRing(const TGLVertex3& center, const TGLVector3& normal, Double_t radius, const UChar_t* rgba); Draw ring, centered on 'center', lying on plane defined by 'center' & 'normal'; of outer radius 'radius', color 'rgba'. void DrawReferenceMarker(const TGLCamera& camera, const TGLVertex3& pos, Float_t radius = 3, const UChar_t* rgba = 0); Draw a sphere- marker on world-coordinate 'pos' with pixel; radius 'radius'. Color argument is optional. void DrawSimpleAxes(const TGLCamera& camera, const TGLBoundingBox& bbox, Int_t axesType); Draw simple xyz-axes for given bounding-box. void DrawNumber(const TString& num, const TGLVertex3& pos, Bool_t center = kFALSE); Draw number in string 'num' via internal 8x8-pixel bitmap on; vertex 'pos'. If 'center' is true, the number is centered on 'pos'.; Only numbers, '.', '-' and ' ' are supported. TGLColor& operator=(const TGLUtil& ). TGLUtil(const TGLUtil& ). virtual ~TGLUtil(); {}. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLUtil.h 38817 2011-04-13 09:32:44Z couet $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLUtil.html:11016,simpl,simple,11016,root/html530/TGLUtil.html,https://root.cern,https://root.cern/root/html530/TGLUtil.html,1,['simpl'],['simple']
Usability,"abled); are partially visible. void DrawSphere(const TGLVertex3& position, Double_t radius, const UChar_t* rgba); Draw sphere, centered on vertex 'position', with radius 'radius',; color 'rgba'. void DrawLine(const TGLLine3& line, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t* rgba); Draw thick line (tube) defined by 'line', with head at end shape; 'head' - box/arrow/none, (head) size 'size', color 'rgba'. void DrawLine(const TGLVertex3& start, const TGLVector3& vector, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t* rgba); Draw thick line (tube) running from 'start', length 'vector',; with head at end of shape 'head' - box/arrow/none,; (head) size 'size', color 'rgba'. void DrawRing(const TGLVertex3& center, const TGLVector3& normal, Double_t radius, const UChar_t* rgba); Draw ring, centered on 'center', lying on plane defined by 'center' & 'normal'; of outer radius 'radius', color 'rgba'. void DrawReferenceMarker(const TGLCamera& camera, const TGLVertex3& pos, Float_t radius = 3, const UChar_t* rgba = 0); Draw a sphere- marker on world-coordinate 'pos' with pixel; radius 'radius'. Color argument is optional. void DrawSimpleAxes(const TGLCamera& camera, const TGLBoundingBox& bbox, Int_t axesType); Draw simple xyz-axes for given bounding-box. void DrawNumber(const TString& num, const TGLVertex3& pos, Bool_t center = kFALSE); Draw number in string 'num' via internal 8x8-pixel bitmap on; vertex 'pos'. If 'center' is true, the number is centered on 'pos'.; Only numbers, '.', '-' and ' ' are supported. TGLColor& operator=(const TGLUtil& ). TGLUtil(const TGLUtil& ). virtual ~TGLUtil(); {}. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLUtil.h 38817 2011-04-13 09:32:44Z couet $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLUtil.html:11016,simpl,simple,11016,root/html532/TGLUtil.html,https://root.cern,https://root.cern/root/html532/TGLUtil.html,1,['simpl'],['simple']
Usability,"ace (abstract class) for one-dimensional functions providing a gradient calculation.Definition IFunction.h:254; ROOT::Math::IGradientFunctionOneDim::Derivativedouble Derivative(const double *x) constCompatibility method with multi-dimensional interface for partial derivative.Definition IFunction.h:266; ROOT::Math::IGradientFunctionOneDim::FdFvirtual void FdF(double x, double &f, double &df) constOptimized method to evaluate at the same time the function value and derivative at a point x.Definition IFunction.h:275; ROOT::Math::IGradientFunctionOneDim::FdFvoid FdF(const double *x, double &f, double *df) constCompatibility method with multi-dimensional interface for Gradient and function evaluation.Definition IFunction.h:282; ROOT::Math::IGradientFunctionOneDim::BaseGradIGradientFunctionOneDim BaseGradDefinition IFunction.h:259; ROOT::Math::IGradientFunctionOneDim::Gradientvoid Gradient(const double *x, double *g) constCompatibility method with multi-dimensional interface for Gradient.Definition IFunction.h:269; ROOT::Math::IGradientFunctionOneDim::BaseFuncIBaseFunctionOneDim BaseFuncDefinition IFunction.h:258; ROOT::Math::IGradientFunctionOneDim::Derivativedouble Derivative(double x) constReturn the derivative of the function at a point x Use the private method DoDerivative.Definition IFunction.h:263; ROOT::Math::IGradientFunctionOneDim::DoDerivativevirtual double DoDerivative(double x) const =0Function to evaluate the derivative with respect each coordinate. To be implemented by the derived cl...; ROOT::Math::IGradientFunctionOneDim::HasGradientbool HasGradient() const overrideDefinition IFunction.h:284; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoreincMathIFunction.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/IFunction_8h_source.html:19639,Guid,Guide,19639,doc/master/IFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html,1,['Guid'],['Guide']
Usability,"ace for new Math classes and functions.; ROOT::Math::detail::get_manipchar_t get_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m)Definition GenVectorIO.h:54; ROOT::Math::detail::require_delimstd::basic_istream< char_t, traits_t > & require_delim(std::basic_istream< char_t, traits_t > &is, manip_t m)Definition GenVectorIO.h:113; ROOT::Math::detail::set_manipvoid set_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m, char_t ch)Definition GenVectorIO.h:74; ROOT::Math::detail::open@ openDefinition GenVectorIO.h:35; ROOT::Math::detail::sep@ sepDefinition GenVectorIO.h:35; ROOT::Math::detail::close@ closeDefinition GenVectorIO.h:35; ROOT::Math::detail::bitforbit@ bitforbitDefinition GenVectorIO.h:35; ROOT::Math::operator>>std::basic_istream< char_t, traits_t > & operator>>(std::basic_istream< char_t, traits_t > &is, DisplacementVector2D< T, U > &v)Definition DisplacementVector2D.h:515; ROOT::Math::operator+DisplacementVector2D< CoordSystem1, U > operator+(DisplacementVector2D< CoordSystem1, U > v1, const DisplacementVector2D< CoordSystem2, U > &v2)Addition of DisplacementVector2D vectors.Definition DisplacementVector2D.h:440; ROOT::Math::operator-DisplacementVector2D< CoordSystem1, U > operator-(DisplacementVector2D< CoordSystem1, U > v1, DisplacementVector2D< CoordSystem2, U > const &v2)Difference between two DisplacementVector2D vectors.Definition DisplacementVector2D.h:453; ROOT::Math::operator*AxisAngle operator*(RotationX const &r1, AxisAngle const &r2)Multiplication of an axial rotation by an AxisAngle.Definition AxisAngleXother.cxx:181; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v2@ v2Definition rootcling_impl.cxx:3702; v@ vDefinition rootcling_impl.cxx:3699; v1@ v1Definition rootcling_impl.cxx:3701. mathgenvectorincMathGenVectorPositionVector2D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2PositionVector2D_8h_source.html:25215,Guid,Guide,25215,doc/master/GenVector_2PositionVector2D_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2PositionVector2D_8h_source.html,1,['Guid'],['Guide']
Usability,"ace is ready for use. This way after a click on ‘axis’—the axis editor is active; a click on a ‘pad’ activates the pad editor, etc.; The algorithm in use is simple and is based on the object-oriented relationship and communication. When the user activates the editor, according to the selected object <obj> in the canvas it looks for a class name <obj>Editor. For that reason, the correct naming is very important. If a class with this name is found, the editor verifies that this class derives from the base editor class TGedFrame. If all checks are satisfied, the editor makes an instance of the object editor. Then, it scans all object base classes searching the corresponding object editors. When it finds one, it makes an instance of the base class editor too.; Once the object editor is in place, it sets the user interface elements according to the object’s status. After that, it is ready to interact with the object following the user actions.; The graphics editor gives an intuitive way to edit objects in a canvas with immediate feedback. Complexity of some object editors is reduced by hiding GUI elements and revealing them only on users’ requests.; An object in the canvas is selected by clicking on it with the left mouse button. Its name is displayed on the top of the editor frame in red color. If the editor frame needs more space than the canvas window, a vertical scroll bar appears for easy navigation. Histogram, pad and axis editors. 25.9.2 Editor Design Elements; The next rules describe the path to follow when creating your own object editor that will be recognized and loaded by the graphics editor in ROOT, i.e. it will be included as a part of it. Derive the code of your object editor from the base editor class TGedFrame.; Keep the correct naming convention: the name of the object editor should be the object class name concatenated with the word ‘Editor'.; Provide a default constructor.; Use the signals/slots communication mechanism for event processing.; Implement ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1223019,intuit,intuitive,1223019,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,"['feedback', 'intuit']","['feedback', 'intuitive']"
Usability,"aced by '->'; and. Branch_Name[index1].Leaf_Name[index2]; Leaf_name[index].Action().OtherAction(param); Leaf_name[index].Action()[val].OtherAction(param). The expected returned values are; -2 : the name has been recognized but won't be usable; -1 : the name has not been recognized, or is too long, or tree does not exist.; >=0 : the name has been recognized, return the internal code for this name. . Reimplemented from ROOT::v5::TFormula.; Definition at line 2698 of file TTreeFormula.cxx. ◆ EvalClass() [1/2]. TClass * TTreeFormula::EvalClass ; (; ); const. virtual . Evaluate the class of this treeformula. ; If the 'value' of this formula is a simple pointer to an object, this function returns the TClass corresponding to its type. ; Definition at line 3597 of file TTreeFormula.cxx. ◆ EvalClass() [2/2]. TClass * TTreeFormula::EvalClass ; (; Int_t ; oper); const. protectedvirtual . Evaluate the class of the operation oper. ; If the 'value' in the requested operation is a simple pointer to an object, this function returns the TClass corresponding to its type. ; Definition at line 3610 of file TTreeFormula.cxx. ◆ EvalInstance() [1/2]. template<typename T > . T TTreeFormula::EvalInstance ; (; Int_t ; instance = 0, . const char * ; stringStackArg[] = nullptr . ). Evaluate this treeformula. ; Template Parameters. TThe type used to interpret the numbers then used for the operations . Parameters. instanceiteration instance ; stringStackArgformula as string . Returnsthe result of the evaluation ; Definition at line 3977 of file TTreeFormula.cxx. ◆ EvalInstance() [2/2]. virtual Double_t TTreeFormula::EvalInstance ; (; Int_t ; i = 0, . const char * ; stringStack[] = nullptr . ). inlinevirtual . Double_t template specialization of EvalInstance. ; Definition at line 182 of file TTreeFormula.h. ◆ EvalInstance64(). virtual Long64_t TTreeFormula::EvalInstance64 ; (; Int_t ; i = 0, . const char * ; stringStack[] = nullptr . ). inlinevirtual . Long64_t template specialization of EvalInst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormula.html:37088,simpl,simple,37088,doc/master/classTTreeFormula.html,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html,1,['simpl'],['simple']
Usability,"ach rule ; Definition at line 435 of file RuleEnsemble.cxx. ◆ CalcRuleSupport(). void TMVA::RuleEnsemble::CalcRuleSupport ; (; ). calculate the support for all rules ; Definition at line 367 of file RuleEnsemble.cxx. ◆ CalcVarImportance(). void TMVA::RuleEnsemble::CalcVarImportance ; (; ). Calculates variable importance using eq (35) in RuleFit paper by Friedman et.al. ; Definition at line 481 of file RuleEnsemble.cxx. ◆ CleanupLinear(). void TMVA::RuleEnsemble::CleanupLinear ; (; ). cleanup linear model ; Definition at line 352 of file RuleEnsemble.cxx. ◆ CleanupRules(). void TMVA::RuleEnsemble::CleanupRules ; (; ). cleanup rules ; Definition at line 325 of file RuleEnsemble.cxx. ◆ ClearCoefficients(). void TMVA::RuleEnsemble::ClearCoefficients ; (; Double_t ; val = 0). inline . Definition at line 119 of file RuleEnsemble.h. ◆ ClearLinCoefficients(). void TMVA::RuleEnsemble::ClearLinCoefficients ; (; Double_t ; val = 0). inline . Definition at line 120 of file RuleEnsemble.h. ◆ ClearLinNorm(). void TMVA::RuleEnsemble::ClearLinNorm ; (; Double_t ; val = 1.0). inline . Definition at line 121 of file RuleEnsemble.h. ◆ ClearRuleMap(). void TMVA::RuleEnsemble::ClearRuleMap ; (; ). inline . Definition at line 150 of file RuleEnsemble.h. ◆ CoefficientRadius(). Double_t TMVA::RuleEnsemble::CoefficientRadius ; (; ). Calculates sqrt(Sum(a_i^2)), i=1..N (NOTE do not include a0) ; Definition at line 198 of file RuleEnsemble.cxx. ◆ Copy(). void TMVA::RuleEnsemble::Copy ; (; RuleEnsemble const & ; other). private . copy function ; Definition at line 1226 of file RuleEnsemble.cxx. ◆ DeleteRules(). void TMVA::RuleEnsemble::DeleteRules ; (; ). inlineprivate . Definition at line 319 of file RuleEnsemble.h. ◆ DoFull(). Bool_t TMVA::RuleEnsemble::DoFull ; (; ); const. inline . Definition at line 257 of file RuleEnsemble.h. ◆ DoLinear(). Bool_t TMVA::RuleEnsemble::DoLinear ; (; ); const. inline . Definition at line 253 of file RuleEnsemble.h. ◆ DoOnlyLinear(). Bool_t TMVA::RuleEnsemble",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html:14019,Clear,ClearLinNorm,14019,doc/master/classTMVA_1_1RuleEnsemble.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html,1,['Clear'],['ClearLinNorm']
Usability,"ache of another RooAbsArg to our cache. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Structure printing. void randomize(const char* rangeName); Set a new value sampled from a uniform distribution over the fit range.; Prints a warning and does nothing if the fit range is not finite. void setBin(Int_t ibin, const char* rangeName); Set value to center of bin 'ibin' of binning 'rangeName' (or of; default binning if no range is specified). void setBin(Int_t ibin, const RooAbsBinning& binning); Set value to center of bin 'ibin' of binning 'binning'. void randomize(const RooAbsBinning& binning); Set a new value sampled from a uniform distribution over the fit range.; Prints a warning and does nothing if the fit range is not finite. void setBinFast(Int_t ibin, const RooAbsBinning& binning); Set value to center of bin 'ibin' of binning 'rangeName' (or of; default binning if no range is specified). Bool_t fitRangeOKForPlotting() const; Check if fit range is usable as plot range, i.e. it is neither; open ended, nor empty. Bool_t inRange(const char* name) const; Check if current value is inside range with given name. TH1* createHistogram(const char* name, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Create an empty ROOT histogram TH1,TH2 or TH3 suitabe to store information represent by the RooAbsRealLValue. This function accepts the following arguments. name -- Name of the ROOT histogram. Binning(const char* name) -- Apply binning with given name to x axis of histogram; Binning(RooAbsBinning& binning) -- Apply specified binning to x axis of histogram; Binning(int_t nbins) -- Apply specified binning to x axis of histogram; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsRealLValue.html:40724,usab,usable,40724,root/html526/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html526/RooAbsRealLValue.html,1,['usab'],['usable']
Usability,achedReal::payloadUniqueSuffix ; (; ); const. inlineoverrideprotectedvirtual . Reimplemented from RooAbsCachedReal.; Definition at line 63 of file RooCachedReal.h. ◆ setCacheSource(). void RooCachedReal::setCacheSource ; (; bool ; flag). inline . Definition at line 43 of file RooCachedReal.h. ◆ setCdfBoundaries(). void RooCachedReal::setCdfBoundaries ; (; bool ; flag). inline . If flag is true the RooHistFunc that represent the cache histogram will use special boundary conditions for use with cumulative distribution functions: at the lower bound the function is forced to converge at zero and the upper bound is the function is forced to converge at 1.0. ; Definition at line 34 of file RooCachedReal.h. ◆ Streamer(). void RooCachedReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsCachedReal. ◆ StreamerNVirtual(). void RooCachedReal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 72 of file RooCachedReal.h. Member Data Documentation. ◆ _cacheObs. RooSetProxy RooCachedReal::_cacheObs. protected . Variables to be cached. ; Definition at line 66 of file RooCachedReal.h. ◆ _cacheSource. bool RooCachedReal::_cacheSource. protected . Keep an attached clone of the source in the cache for fast operation. ; Definition at line 68 of file RooCachedReal.h. ◆ _useCdfBoundaries. bool RooCachedReal::_useCdfBoundaries. protected . Are c.d.f boundary conditions used by the RooHistFuncs? ; Definition at line 67 of file RooCachedReal.h. ◆ func. RooRealProxy RooCachedReal::func. protected . Proxy to function being cached. ; Definition at line 65 of file RooCachedReal.h. Libraries for RooCachedReal:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooCachedReal.h; roofit/roofitcore/src/RooCachedReal.cxx. RooCachedReal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedReal.html:70664,Guid,Guide,70664,doc/master/classRooCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooCachedReal.html,1,['Guid'],['Guide']
Usability,"ack. ;  ;  Public Member Functions inherited from TQCommand;  TQCommand (const char *cl=nullptr, void *object=nullptr, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ;  TQCommand (const TQCommand &com);  Copy constructor. ;  ;  TQCommand (TObject *obj, const char *redo=nullptr, const char *undo=nullptr);  Constructor. ;  ; virtual ~TQCommand ();  dtor. ;  ; virtual Bool_t CanCompress (TQCommand *c) const;  By default, commands can be compressed if they are: ;  ; virtual Bool_t CanMerge (TQCommand *c) const;  Two commands can be merged if they can be composed into a single command (Macro command). ;  ; virtual void Compress (TQCommand *c);  Compress command. ;  ; void Delete (Option_t *option="""") override;  If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ;  ; const char * GetName () const override;  Returns the command name. ;  ; Int_t GetNRargs () const;  Returns a number of redo arguments. ;  ; Int_t GetNUargs () const;  Returns a number of undo arguments. ;  ; void * GetObject () const;  Returns an object for which undo redo actions are applied. ;  ; TQConnection * GetRedo () const;  ; Long_t * GetRedoArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Returns the name of redo command. ;  ; Int_t GetStatus () const;  Returns a number of sequential undo or redo operations. ;  ; const char * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer to array of undo arguments. ;  ; const char * GetUndoName () const;  Returns the name of undo command. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:2926,undo,undo,2926,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,1,['undo'],['undo']
Usability,"ack< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfront;  CSfinaeHelper;  CType;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  CTHistImpl;  CTHistImplBaseInterface class for THistImpl ;  CTHistImplPrecisionAgnosticBaseBase class for THistImplBase that abstracts out the histogram's PRECISION ;  ►CTSchemaRuleSet;  CTMatches;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:11763,simpl,simple,11763,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['simpl'],['simple']
Usability,"ackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMediumEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for medium editor. ~TGeoMediumEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoEditMaterial(); Edit selected material. void DoMedName(); Slot for medium name. void DoMedId(); Slot for medium id. void DoSelectMaterial(); Select the material component. void DoToggleSensitive(); Slot for sensitivity. void DoMagfldSelect(Int_t ientry); Slot for mag. field. void DoFieldm(); Slot for max field. void DoTmaxfd(); Slot for tmaxfd. void DoStemax(); Slot for the max allowed step. void DoDeemax(); Slot for the maximum allowed dedx. void DoEpsil(); Slot for tracking precision. void DoStmin(); Slot for min. step. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoMediumEditor.html:22153,undo,undoing,22153,root/html534/TGeoMediumEditor.html,https://root.cern,https://root.cern/root/html534/TGeoMediumEditor.html,1,['undo'],['undoing']
Usability,"ack_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; static voidCheckAndFixBoxOrientationEv(TEveVector* box); static voidCheckAndFixBoxOrientationFv(Float_t** box); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTAttBBox::ComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveShape.html:2729,Clear,ClearStamps,2729,root/html528/TEveShape.html,https://root.cern,https://root.cern/root/html528/TEveShape.html,4,['Clear'],['ClearStamps']
Usability,"ackages needed for your platform.; ; . How to use ROOT libraries in Xcode on Mac OS X? . The easiest way is to use cmake and let it create the Xcode project, this has the advantage that the dictionaries are created automatically. The CMakeLists.txt file will define the libraries and executables to be added to the Xcode project. An example from the ROOT Event example (found in root/test) can be downloaded here. Just un-tar the attached file and run. cd event/build; cmake -G Xcode ..; xcodebuild. This will create an Xcode project event.xcodeproj which can be opened and used by Xcode. ; . How to check if a file is already open? . if (gROOT->GetListOfFiles()->FindObject(filename) ) {; // do not open the file; } else {; // open the file; }; ; . Some or all windows don't get displayed when ROOT is running on a remote computer. . You probably used ssh to connect to the remote computer. You need to specify the option ""-Y"" which turns on trusted X11 forwarding.Some or all windows don't get displayed when ROOT is running on a remote computer. ; . How to change the automatic plot title produced when a tree is drawn? . It is enough to change the title of the histogram htemp: ; tree.Draw(""x:y"");; htemp.SetTitle(""New Title"");; ; . How to draw several TGraph in one common axis system? . Use TMultiGraph. ; ; . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/faq-page.html:8235,Guid,Guides,8235,d/faq-page.html,https://root.cern,https://root.cern/d/faq-page.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"acking data from training. ; Eg, From deep learning record loss for each Epoch ; Definition at line 31 of file TrainingHistory.h. Public Types; typedef std::vector< std::pair< Int_t, Double_t > > IterationRecord;  . Public Member Functions;  TrainingHistory ();  constructor ;  ; virtual ~TrainingHistory ();  ; void AddValue (TString Property, Int_t stage, Double_t value);  ; void SaveHistory (TString Name);  . Private Attributes; std::vector< IterationRecord * > fHistoryData;  ; std::map< TString, int > fHistoryMap;  . #include <TMVA/TrainingHistory.h>; Member Typedef Documentation. ◆ IterationRecord. typedef std::vector<std::pair<Int_t,Double_t> > TMVA::TrainingHistory::IterationRecord. Definition at line 34 of file TrainingHistory.h. Constructor & Destructor Documentation. ◆ TrainingHistory(). TMVA::TrainingHistory::TrainingHistory ; (; ). constructor ; Definition at line 36 of file TrainingHistory.cxx. ◆ ~TrainingHistory(). TMVA::TrainingHistory::~TrainingHistory ; (; ). virtual . Definition at line 40 of file TrainingHistory.cxx. Member Function Documentation. ◆ AddValue(). void TMVA::TrainingHistory::AddValue ; (; TString ; Property, . Int_t ; stage, . Double_t ; value . ). Definition at line 47 of file TrainingHistory.cxx. ◆ SaveHistory(). void TMVA::TrainingHistory::SaveHistory ; (; TString ; Name). Definition at line 60 of file TrainingHistory.cxx. Member Data Documentation. ◆ fHistoryData. std::vector<IterationRecord*> TMVA::TrainingHistory::fHistoryData. private . Definition at line 42 of file TrainingHistory.h. ◆ fHistoryMap. std::map<TString,int> TMVA::TrainingHistory::fHistoryMap. private . Definition at line 41 of file TrainingHistory.h. Libraries for TMVA::TrainingHistory:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/TrainingHistory.h; tmva/tmva/src/TrainingHistory.cxx. TMVATrainingHistory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TrainingHistory.html:2205,Guid,Guide,2205,doc/master/classTMVA_1_1TrainingHistory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TrainingHistory.html,1,['Guid'],['Guide']
Usability,"acks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; '''; ; # We prepare an input tree to run on; fileName = ""df002_dataModel_py.root""; treeName = ""myTree""; ROOT.gInterpreter.Declare(fill_tree_code); ROOT.fill_tree(fileName, treeName); ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operating on branches which are collections of objects; # Here we deal with the simplest of the cuts: we decide to accept the event; # only if the number of tracks is greater than 8.; n_cut = 'tracks.size() > 8'; nentries = d.Filter(n_cut).Count();; ; print(""%s events passed all filters"" % nentries.GetValue()); ; # Another possibility consists in creating a new column containing the; # quantity we are interested in.; # In this example, we will cut on the number of tracks and plot their; # transverse momentum.; ; getPt_code ='''; using namespace ROOT::VecOps;; ROOT::RVecD getPt(const RVec<FourVector> &tracks); {; auto pt = [](const FourVector &v) { return v.pt(); };; return Map(tracks, pt);; }; '''; ROOT.gInterpreter.Declare(getPt_code); ; getPtWeights_code ='''; using namespace ROOT::VecOps;; ROOT::RVecD getPtWeights(const RVec<FourVector> &tracks); {; auto ptWeight = [](const FourVector &v) { return 1. / v.Pt(); };; return Map(tracks, ptWeight);; };; '''; ROOT.gInterpreter.Declare(getPtWeights_code); ; augmented_d = d.Define('tracks_n', '(int)tracks.size()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df002__dataModel_8py.html:2006,simpl,simplest,2006,doc/master/df002__dataModel_8py.html,https://root.cern,https://root.cern/doc/master/df002__dataModel_8py.html,1,['simpl'],['simplest']
Usability,acobian. ; Definition at line 120 of file RooRealIntegral.h. ◆ _mode. Int_t RooRealIntegral::_mode = 0. protected . Definition at line 133 of file RooRealIntegral.h. ◆ _numIntegrand. std::unique_ptr<RooAbsFunc> RooRealIntegral::_numIntegrand. mutableprotected . ! ; Definition at line 138 of file RooRealIntegral.h. ◆ _numIntEngine. std::unique_ptr<RooAbsIntegrator> RooRealIntegral::_numIntEngine. mutableprotected . ! ; Definition at line 137 of file RooRealIntegral.h. ◆ _params. std::unique_ptr<RooArgSet> RooRealIntegral::_params. mutableprotected . ! cache for set of parameters ; Definition at line 142 of file RooRealIntegral.h. ◆ _rangeName. TNamed* RooRealIntegral::_rangeName = nullptr. protected . Definition at line 140 of file RooRealIntegral.h. ◆ _respectCompSelect. bool RooRealIntegral::_respectCompSelect = true. protected . Definition at line 88 of file RooRealIntegral.h. ◆ _restartNumIntEngine. bool RooRealIntegral::_restartNumIntEngine = false. mutableprotected . ! ; Definition at line 136 of file RooRealIntegral.h. ◆ _saveInt. RooArgSet RooRealIntegral::_saveInt. protected . ! ; Definition at line 126 of file RooRealIntegral.h. ◆ _saveSum. RooArgSet RooRealIntegral::_saveSum. protected . ! ; Definition at line 127 of file RooRealIntegral.h. ◆ _sumCat. RooListProxy RooRealIntegral::_sumCat. protected . ! ; Definition at line 131 of file RooRealIntegral.h. ◆ _sumList. RooSetProxy RooRealIntegral::_sumList. protected . Set of discrete observable over which is summed numerically. ; Definition at line 117 of file RooRealIntegral.h. ◆ _valid. bool RooRealIntegral::_valid = false. mutableprotected . Definition at line 87 of file RooRealIntegral.h. Libraries for RooRealIntegral:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealIntegral.h; roofit/roofitcore/src/RooRealIntegral.cxx. RooRealIntegral. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:07 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:79007,Guid,Guide,79007,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['Guid'],['Guide']
Usability,"act class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TArray(); static TClass*Class(); virtual Double_tGetAt(Int_t i) const; Int_tGetSize() const; virtual TClass*IsA() const; TArray&operator=(const TArray& rhs); static TArray*ReadArray(TBuffer& b, const TClass* clReq); virtual voidSet(Int_t n); virtual voidSetAt(Double_t v, Int_t i); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); static voidWriteArray(TBuffer& b, const TArray* a). protected:. Bool_tBoundsOk(const char* where, Int_t at) const; Bool_tOutOfBoundsError(const char* where, Int_t i) const. Data Members; public:. Int_tfNNumber of array elements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. TArray * ReadArray(TBuffer& b, const TClass* clReq); Read TArray object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same array). void WriteArray(TBuffer& b, const TArray* a); Write TArray object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same array). Bool_t BoundsOk(const char* where, Int_t at) const. TArray & operator=(const TArray& rhs); {if(this!=&rhs) fN = rhs.fN; return *this; }. virtual ~TArray(); { fN = 0; }. Int_t GetSize() const; { return fN; }. void Set(Int_t n). Double_t GetAt(Int_t i) const. void SetAt(Double_t v, Int_t i). » Author: Fons Rademakers 21/10/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TArray.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2009-12-07 13:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TArray.html:1519,Simpl,Simplified,1519,root/html526/TArray.html,https://root.cern,https://root.cern/root/html526/TArray.html,2,['Simpl'],['Simplified']
Usability,act. ; Iterator over THnBase bins (internal implementation). ; Definition at line 315 of file THnBase.h. Public Member Functions;  THnBaseBinIter (Bool_t respectAxisRange);  ; virtual ~THnBaseBinIter ();  Destruct a bin iterator. ;  ; virtual Int_t GetCoord (Int_t dim) const =0;  ; Bool_t HaveSkippedBin () const;  ; virtual Long64_t Next (Int_t *coord=nullptr)=0;  ; Bool_t RespectsAxisRange () const;  . Protected Attributes; Bool_t fHaveSkippedBin;  ; Bool_t fRespectAxisRange;  . #include <THnBase.h>; Constructor & Destructor Documentation. ◆ THnBaseBinIter(). ROOT::Internal::THnBaseBinIter::THnBaseBinIter ; (; Bool_t ; respectAxisRange). inline . Definition at line 317 of file THnBase.h. ◆ ~THnBaseBinIter(). ROOT::Internal::THnBaseBinIter::~THnBaseBinIter ; (; ). virtual . Destruct a bin iterator. ; Definition at line 1605 of file THnBase.cxx. Member Function Documentation. ◆ GetCoord(). virtual Int_t ROOT::Internal::THnBaseBinIter::GetCoord ; (; Int_t ; dim); const. pure virtual . ◆ HaveSkippedBin(). Bool_t ROOT::Internal::THnBaseBinIter::HaveSkippedBin ; (; ); const. inline . Definition at line 320 of file THnBase.h. ◆ Next(). virtual Long64_t ROOT::Internal::THnBaseBinIter::Next ; (; Int_t * ; coord = nullptr). pure virtual . ◆ RespectsAxisRange(). Bool_t ROOT::Internal::THnBaseBinIter::RespectsAxisRange ; (; ); const. inline . Definition at line 321 of file THnBase.h. Member Data Documentation. ◆ fHaveSkippedBin. Bool_t ROOT::Internal::THnBaseBinIter::fHaveSkippedBin. protected . Definition at line 328 of file THnBase.h. ◆ fRespectAxisRange. Bool_t ROOT::Internal::THnBaseBinIter::fRespectAxisRange. protected . Definition at line 327 of file THnBase.h. Libraries for ROOT::Internal::THnBaseBinIter:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/THnBase.h; hist/hist/src/THnBase.cxx. ROOTInternalTHnBaseBinIter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:17 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBinIter.html:2204,Guid,Guide,2204,doc/master/classROOT_1_1Internal_1_1THnBaseBinIter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBinIter.html,1,['Guid'],['Guide']
Usability,"actly one StreamerInfo record, which is written to disk automatically when a new or modified file is closed.; The StreamerInfo record is a list (ROOTIO class TList) of ""StreamerInfo"" objects (ROOTIO class TStreamerInfo). There is one StreamerInfo object in the list for every class used in the file in a data record, other than a core layer record. There is no streamerinfo object for a class used in a core layer record unless the class is also used elsewhere in a data record. When reading a self-identifying object from a file, the system uses the StreamerInfo list to decompose the object recursively into its simple data members.; Each streamerinfo object is an array of ""streamer element"" objects, each of which describes a base class of the object or a (non-static and non-transient) data member of the object. If the base class or data member is itself a class, then there will also be a streamerinfo object in the record for that class. In this way, each class is recursively decomposed into its atomic elements, each of which is a simple type (e.g. ""int""). A ""long"" or ""unsigned long"" member is always written as an 8 byte quantity, even if it occupies only 4 bytes in memory.; A data member of a class is marked transient on the line of its declaration by a comment beginning with ""//!"". Such members are not written to disk, nor is there any streamerinfo for such a member.; A data member that is a C++ pointer (not to be confused with ""pointers to persistent; objects"" described below) is never written to disk as a pointer value. If it is a pointer to an object, the object itself (or 0 (4 bytes) if the pointer value is NULL) is written. If the declaration line has a comment beginning with ""//->"", this indicates that the pointer value will never be null, which allows a performance optimization. Another optimization is that if two or more pointers pointing to the same object are streamed in the same I/O operation, the object is written only once. The remaining pointers reference t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootio.html:7798,simpl,simple,7798,doc/master/rootio.html,https://root.cern,https://root.cern/doc/master/rootio.html,1,['simpl'],['simple']
Usability,"actory : Training finished; : ; Factory : Train method: MLPBNN for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ MLPBNN ] :␛[0m; : ; : ␛[1m--- Short description:␛[0m; : ; : The MLP artificial neural network (ANN) is a traditional feed-; : forward multilayer perceptron implementation. The MLP has a user-; : defined hidden layer architecture, while the number of input (output); : nodes is determined by the input variables (output classes, i.e., ; : signal and one background). ; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : Neural networks are stable and performing for a large variety of ; : linear and non-linear classification problems. However, in contrast; : to (e.g.) boosted decision trees, the user is advised to reduce the ; : number of input variables that have only little discrimination power. ; : ; : In the tests we have carried out so far, the MLP and ROOT networks; : (TMlpANN, interfaced via TMVA) performed equally well, with however; : a clear speed advantage for the MLP. The Clermont-Ferrand neural ; : net (CFMlpANN) exhibited worse classification performance in these; : tests, which is partly due to the slow convergence of its training; : (at least 10k training cycles are required to achieve approximately; : competitive results).; : ; : ␛[1mOvertraining: ␛[0monly the TMlpANN performs an explicit separation of the; : full training sample into independent training and validation samples.; : We have found that in most high-energy physics applications the ; : available degrees of freedom (training events) are sufficient to ; : constrain the weights of the relatively simple architectures required; : to achieve good performance. Hence no overtraining should occur, and ; : the use of validation samples would only reduce the available training; : information. However, if the performance on the training sample is ; : found to be significantly better than the one found",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:42572,clear,clear,42572,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['clear'],['clear']
Usability,"ad of being spread; across the file. However it might decrease the performance when; reading more branches (or the full entry). When using SortBasketsByEntry the baskets with the lowest starting; entry are written first. (i.e. the baskets are sorted by the; index/number of the first entry they contain). This means that on; the file the baskets will be in the order in which they will be; needed when reading the whole tree sequentially. For examples of CloneTree, see tutorials:. -- copytree. A macro to copy a subset of a TTree to a new TTree. The input file has been generated by the program in; $ROOTSYS/test/Event with: Event 1000 1 1 1. -- copytree2. A macro to copy a subset of a TTree to a new TTree. One branch of the new Tree is written to a separate file. The input file has been generated by the program in; $ROOTSYS/test/Event with: Event 1000 1 1 1. void CopyAddresses(TTree* , Bool_t undo = kFALSE); Set branch addresses of passed tree equal to ours.; If undo is true, reset the branch address instead of copying them.; This insures 'separation' of a cloned tree from its original. Long64_t CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); Copy nentries from given tree to this tree.; This routines assumes that the branches that intended to be copied are; already connected. The typical case is that this tree was created using; tree->CloneTree(0). By default copy all entries. Returns number of bytes copied to this tree. If 'option' contains the word 'fast' and nentries is -1, the cloning will be; done without unzipping or unstreaming the baskets (i.e., a direct copy of the; raw bytes on disk). When 'fast' is specified, 'option' can also contains a sorting order for the; baskets in the output file. There are currently 3 supported sorting order:; SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry. See TTree::CloneTree for a detailed explanation of the semantics of these 3 options. If the tree or any of the underlying tree of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:63174,undo,undo,63174,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['undo'],['undo']
Usability,"ad* pad, TObject* obj); virtual~TFitEditor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidConnectSlots(); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitEditor.html:5488,Clear,Clear,5488,root/html528/TFitEditor.html,https://root.cern,https://root.cern/root/html528/TFitEditor.html,4,['Clear'],['Clear']
Usability,"ad.Definition TCanvas.cxx:719; TCanvas::Updatevoid Update() overrideUpdate canvas pad buffers.Definition TCanvas.cxx:2489; TFoamTFoam is the main class of the multi-dimensional general purpose Monte Carlo event generator (integra...Definition TFoam.h:21; TFoam::GetMCvectvirtual void GetMCvect(Double_t *)User may get generated MC point/vector with help of this method.Definition TFoam.cxx:1172; TFoam::MakeEventvirtual void MakeEvent()User method.Definition TFoam.cxx:1122; TFoam::Initializevirtual void Initialize()Basic initialization of FOAM invoked by the user.Definition TFoam.cxx:321; TFoam::GetIntegMCvirtual void GetIntegMC(Double_t &, Double_t &)User method.Definition TFoam.cxx:1207; TFoam::SetnCellsvirtual void SetnCells(Long_t nCells)Definition TFoam.h:116; TFoam::SetRhoIntvirtual void SetRhoInt(Double_t(*fun)(Int_t, Double_t *))User may use this method to set the distribution object as a global function pointer (and not as an i...Definition TFoam.cxx:1029; TFoam::SetPseRanvirtual void SetPseRan(TRandom *PseRan)Definition TFoam.h:112; TFoam::SetkDimvirtual void SetkDim(Int_t kDim)Definition TFoam.h:115; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2D2-D histogram with a double per channel (see TH1 documentation)Definition TH2.h:357; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; AuthorStascek Jadach ; Definition in file foam_kanwa.C. tutorialsfoamfoam_kanwa.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/foam__kanwa_8C.html:4868,Guid,Guide,4868,doc/master/foam__kanwa_8C.html,https://root.cern,https://root.cern/doc/master/foam__kanwa_8C.html,1,['Guid'],['Guide']
Usability,"ad::GetParent ; (; ); const. inline . Access to the parent pad (const version). ; Definition at line 64 of file RPad.hxx. ◆ GetPos(). const RPadPos & ROOT::Experimental::RPad::GetPos ; (; ); const. inline . Get the position of the pad in parent (!) coordinates. ; Definition at line 76 of file RPad.hxx. ◆ GetSize(). const RPadExtent & ROOT::Experimental::RPad::GetSize ; (; ); const. inline . Get the size of the pad in parent (!) coordinates. ; Definition at line 79 of file RPad.hxx. ◆ SetParent(). void ROOT::Experimental::RPad::SetParent ; (; RPadBase * ; parent). inlineprivate . Definition at line 46 of file RPad.hxx. ◆ SetPos(). void ROOT::Experimental::RPad::SetPos ; (; const RPadPos & ; p). inline . Set position. ; Definition at line 85 of file RPad.hxx. ◆ SetSize(). void ROOT::Experimental::RPad::SetSize ; (; const RPadExtent & ; sz). inline . Set the size of the pad in parent (!) coordinates. ; Definition at line 82 of file RPad.hxx. Friends And Related Symbol Documentation. ◆ RPadBase. friend class RPadBase. friend . required to set parent ; Definition at line 27 of file RPad.hxx. Member Data Documentation. ◆ border. RAttrBorder ROOT::Experimental::RPad::border {this, ""border""}. ! border attributes ; Definition at line 55 of file RPad.hxx. ◆ fParent. RPadBase* ROOT::Experimental::RPad::fParent {nullptr}. private . Pad containing this pad as a sub-pad. ; The parent pad, if this pad has one. ; Definition at line 30 of file RPad.hxx. ◆ fPos. RPadPos ROOT::Experimental::RPad::fPos. private . pad position ; Definition at line 32 of file RPad.hxx. ◆ fSize. RPadExtent ROOT::Experimental::RPad::fSize. private . pad size ; Definition at line 33 of file RPad.hxx. Libraries for ROOT::Experimental::RPad:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpadv7/inc/ROOT/RPad.hxx; graf2d/gpadv7/src/RPad.cxx. ROOTExperimentalRPad. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html:10382,Guid,Guide,10382,doc/master/classROOT_1_1Experimental_1_1RPad.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPad.html,1,['Guid'],['Guide']
Usability,"adMemberWise); 782 fReadMemberWise->Clear();; 783 delete fWriteMemberWise;; 784 fWriteMemberWise = nullptr;; 785 if (fConversionReadMemberWise); 786 fConversionReadMemberWise->clear();; 787 return kTRUE;; 788}; 789 ; 790////////////////////////////////////////////////////////////////////////////////; 791/// Check existence of function pointers; 792 ; 793void TGenCollectionProxy::CheckFunctions() const; 794{; 795 if ( 0 == fSize.call ) {; 796 Fatal(""TGenCollectionProxy"",""No 'size' function pointer for class %s present."",fName.c_str());; 797 }; 798 if ( 0 == fResize ) {; 799 Fatal(""TGenCollectionProxy"",""No 'resize' function for class %s present."",fName.c_str());; 800 }; 801 if ( 0 == fNext.call ) {; 802 Fatal(""TGenCollectionProxy"",""No 'next' function for class %s present."",fName.c_str());; 803 }; 804 if ( 0 == fFirst.call ) {; 805 Fatal(""TGenCollectionProxy"",""No 'begin' function for class %s present."",fName.c_str());; 806 }; 807 if ( 0 == fClear.call ) {; 808 Fatal(""TGenCollectionProxy"",""No 'clear' function for class %s present."",fName.c_str());; 809 }; 810 if ( 0 == fConstruct ) {; 811 Fatal(""TGenCollectionProxy"",""No 'block constructor' function for class %s present."",fName.c_str());; 812 }; 813 if ( 0 == fDestruct ) {; 814 Fatal(""TGenCollectionProxy"",""No 'block destructor' function for class %s present."",fName.c_str());; 815 }; 816 if ( 0 == fFeed ) {; 817 Fatal(""TGenCollectionProxy"",""No 'data feed' function for class %s present."",fName.c_str());; 818 }; 819 if ( 0 == fCollect ) {; 820 Fatal(""TGenCollectionProxy"",""No 'data collect' function for class %s present."",fName.c_str());; 821 }; 822 if (0 == fCreateEnv.call ) {; 823 Fatal(""TGenCollectionProxy"",""No 'environment creation' function for class %s present."",fName.c_str());; 824 }; 825}; 826 ; 827////////////////////////////////////////////////////////////////////////////////; 828/// Utility routine to issue a Fatal error is the Value object is not valid; 829 ; 830static TGenCollectionProxy::Value *R__CreateValue(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:24902,clear,clear,24902,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['clear'],['clear']
Usability,"adNumber of bytes read by basket to fill cached tree; Int_tTFileCacheRead::fNoCacheReadCallsNumber of read calls by basket to fill cached tree; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tfOneTime! used in the learning phase; Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch! Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.; TTreeCache::EPrefillTypefPrefillTypeWhether a prefilling is enabled (and if applicable which type); Int_tTFileCacheRead::fReadCallsNumber of read calls for this cache; Bool_tfReadDirectionSet! read direction established; Bool_tfReverseRead! reading in reverse mode; Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance Chart:. TObject. ←; TFileCacheRead. ←; TTreeCache. ←. TTreeCacheUnzip. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). Int_t AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket; Returns 0 branch added or already included; -1 on error. Int_t AddBranch(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:21782,learn,learning,21782,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['learn'],['learning']
Usability,"adNumber of bytes read by basket to fill cached tree; Int_tTFileCacheRead::fNoCacheReadCallsNumber of read calls by basket to fill cached tree; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tfOneTime! used in the learning phase; Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch! Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.; TTreeCache::EPrefillTypefPrefillTypeWhether a prefilling is enabled (and if applicable which type); Int_tTFileCacheRead::fReadCallsNumber of read calls for this cache; Bool_tfReadDirectionSet! read direction established; Bool_tfReverseRead! reading in reverse mode; Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance Chart:. TObject. ←; TFileCacheRead. ←; TTreeCache. ←. TTreeCacheUnzip. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:21679,learn,learning,21679,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,1,['learn'],['learning']
Usability,"adPhi; Double_tfPadTheta; Int_tfSelectedPart; TGLSelectionBufferfSelection; TGLPlotPainter::ESelectionBasefSelectionBase; Bool_tfSelectionPass; Bool_tfUpdateSelection; TAxis*fXAxis; Double_tfXOYSectionPos; Double_tfXOZSectionPos; TAxis*fYAxis; Double_tfYOZSectionPos; TAxis*fZAxis; vector<Double_t>fZLevels. private:. const TColor*fPadColor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Paint(); Draw lego/surf/whatever you can. void PrintPlot() const; Generate PS using gl2ps. Bool_t PlotSelected(Int_t px, Int_t py); Read color buffer content to find selected object. void SetPadColor(const TColor* color); Used in a pad. void SetFrameColor(const TColor* frameColor); Set plot's back box color. void InvalidateSelection(); Selection must be updated. const TColor * GetPadColor() const; Get pad color. void MoveSection(Int_t px, Int_t py); Create dynamic profile using selected plane. void DrawSections() const; Draw sections (if any). void ClearBuffers() const. // Clear buffer.; Float_t rgb[3] = {1.f, 1.f, 1.f};; if (const TColor *color = GetPadColor()); color->GetRGB(rgb[0], rgb[1], rgb[2]);; glClearColor(rgb[0], rgb[1], rgb[2], 1.);; glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);. void DrawPaletteAxis() const; Draw. Palette. Axis. void SaveModelviewMatrix() const. void SaveProjectionMatrix() const. void RestoreModelviewMatrix() const. void RestoreProjectionMatrix() const. const TGLPlotBox& RefBackBox() const; { return fBackBox; }. void InitGL() const. void DeInitGL() const. void DrawPlot() const. Bool_t InitGeometry(); Init geometry does plot's specific initialization. void StartPan(Int_t px, Int_t py); Pan function is already declared in TVirtualGLPainter. void AddOption(const TString& stringOption); Add string option, it can be a digit in ""lego"" or ""surf"". void ProcessEvent(Int_t event, Int_t px, Int_t py); Function to process additional events (key presses, mouse clicks.). Bool_t CutAxisSelected() const; {return !fHigh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPlotPainter.html:3283,Clear,ClearBuffers,3283,root/html528/TGLPlotPainter.html,https://root.cern,https://root.cern/root/html528/TGLPlotPainter.html,1,['Clear'],['ClearBuffers']
Usability,"add, bool calledFromDestructor=false)TLeaf; ResetBit(UInt_t f)TObjectinline; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetAddress(void *add=nullptr)TLeafinlinevirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetBranch(TBranch *branch)TLeafinlinevirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetLeafCount(TLeaf *leaf)TLeafvirtual; SetLen(Int_t len=1)TLeafinlinevirtual; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetOffset(Int_t offset=0)TLeafinlinevirtual; SetRange(bool range=true)TLeafinlinevirtual; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetUnsigned()TLeafinlinevirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTLeafvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TLeafinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TLeaf(const TLeaf &)TLeafprotected; TLeaf()TLeaf; TLeaf(TBranch *parent, const char *name, const char *type)TLeaf; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TLeaf() overrideTLeaf; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeaf-members.html:8255,Guid,Guide,8255,doc/master/classTLeaf-members.html,https://root.cern,https://root.cern/doc/master/classTLeaf-members.html,1,['Guid'],['Guide']
Usability,"addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceSteps; ///< number of steps without improvement to consider the DNN to have converged; 838 size_t m_batchSize; ///< mini-batch size; 839 size_t m_testRepetitions;; 840 double m_factorWeightDecay;; 841 ; 842 size_t count_E;; 843 size_t count_dE;; 844 size_t count_mb_E;; 845 size_t count_mb_dE;; 846 ; 847 EnumRegularization m_regularization;; 848 ; 849 double m_dropRepetitions;; 850 std::vector<double> m_dropOut;; 851 ; 852 double fLearningRate;; 853 double fMomentum;; 854 int fRepetitions;; 855 MinimizerType fMinimizerType;; 856 ; 857 size_t m_convergenceCount;; 858 size_t m_maxConvergenceCount;; 859 double m_minError;; 860 ; 861 ; 862 protected:; 863 bool m_useMultithreading;; 864 ; 865 std::shared_ptr<Monitoring> fMonitoring;; 866 };; 867 ; 868 ; 869 ; 870 ; 871 ; 872 ; 873 ; 874 ; 875 ; 876 ; 877 ; 878 ; 879 ; 880 ; 881 ; 882 ; 883 ; 884 ; 885 ; 886 ; 887 ; 888 ; 889 ; 890 /*! \brief Settings for classification; 891 *; 892 * contains additio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:32133,progress bar,progress bar,32133,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['progress bar'],['progress bar']
Usability,"addition of two variables is the; // convolution of two density functions.; h_ExpGauss->Fill(x);; }; ; TF1Convolution *f_conv = new TF1Convolution(""expo"", ""gaus"", -1, 6, true);; f_conv->SetRange(-1., 6.);; f_conv->SetNofPointsFFT(1000);; TF1 *f = new TF1(""f"", *f_conv, 0., 5., f_conv->GetNpar());; f->SetParameters(1., -0.3, 0., 1.);; ; // Fit.; h_ExpGauss->Fit(""f"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvas.h; TF1Convolution.h; TF1.h; TH1F.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TF1ConvolutionClass wrapping convolution of two functions.Definition TF1Convolution.h:20; TF1Convolution::GetNparInt_t GetNpar() constDefinition TF1Convolution.h:68; TF1Convolution::SetRangevoid SetRange(Double_t a, Double_t b) overrideSet the actual range used for the convolution.Definition TF1Convolution.cxx:452; TF1Convolution::SetNofPointsFFTvoid SetNofPointsFFT(Int_t n)Set the number of points used for the FFT convolution.Definition TF1Convolution.cxx:382; TF11-Dim function classDefinition TF1.h:233; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::Expvirtual Double_t Exp(Double_t tau)Returns an exponential deviate.Definition TRandom.cxx:252; xDouble_t x[n]Definition legend1.C:17; fitConvolutionDefinition fitConvolution.py:1; AuthorAurelie Flandi ; Definition in file fitConvolution.C. tutorialsfitfitConvolution.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitConvolution_8C.html:2881,Guid,Guide,2881,doc/master/fitConvolution_8C.html,https://root.cern,https://root.cern/doc/master/fitConvolution_8C.html,1,['Guid'],['Guide']
Usability,"additional topics or on the topics that need more documentation. Please send your comments, corrections, questions, and suggestions to the rootdoc list: rootdoc@cern.ch; We attempt to give the user insight into the many capabilities of ROOT. The book begins with the elementary functionality and progresses in complexity reaching the specialized topics at the end. The experienced user looking for special topics may find these chapters useful: see “Networking”, “Writing a Graphical User Interface”, “Threads”, and “PROOF: Parallel Processing”.; 1.3 Conventions Used in This Book; We tried to follow a style convention for the sake of clarity. The styles in used are described below.; To show source code in scripts or source files:; {; cout << "" Hello"" << endl;; float x = 3.;; float y = 5.;; int i = 101;; cout <<"" x = ""<<x<<"" y = ""<<y<<"" i = ""<<i<< endl;; }; To show the ROOT command line, we show the ROOT prompt without numbers. In the interactive system, the ROOT prompt has a line number (root[12]); for the sake of simplicity, the line numbers are left off.; root[] TLine l; root[] l.Print(); TLine X1=0.000000 Y1=0.000000 X2=0.000000 Y2=0.000000; Italic bold monotype font indicates a global variable, for example gDirectory.; When a variable term is used, it is shown between angled brackets. In the example below the variable term <library> can be replaced with any library in the $ROOTSYS directory: $ROOTSYS/<library>/inc.; 1.4 The Framework; ROOT is an object-oriented framework aimed at solving the data analysis challenges of high-energy physics. There are two key words in this definition, object oriented and framework. First, we explain what we mean by a framework and then why it is an object-oriented framework.; 1.4.1 What Is a Framework?; Programming inside a framework is a little like living in a city. Plumbing, electricity, telephone, and transportation are services provided by the city. In your house, you have interfaces to the services such as light switches, electric",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:9861,simpl,simplicity,9861,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simplicity']
Usability,addressIsPtr. protected . ! True if the address is a pointer to an address ; Definition at line 43 of file TChainElement.h. ◆ fBaddressType. UInt_t TChainElement::fBaddressType. protected . ! Type of the value pointed to by fBaddress ; Definition at line 42 of file TChainElement.h. ◆ fBranchPtr. TBranch** TChainElement::fBranchPtr. protected . ! Address of user branch pointer (to updated upon loading a file) ; Definition at line 47 of file TChainElement.h. ◆ fCheckedType. bool TChainElement::fCheckedType. protected . ! True if the branch type and the address type have been checked. ; Definition at line 45 of file TChainElement.h. ◆ fDecomposedObj. bool TChainElement::fDecomposedObj. protected . ! True if the address needs the branch in MakeClass/DecomposedObj mode. ; Definition at line 44 of file TChainElement.h. ◆ fEntries. Long64_t TChainElement::fEntries. protected . Number of entries in the tree of this chain element. ; Definition at line 36 of file TChainElement.h. ◆ fLoadResult. Int_t TChainElement::fLoadResult. protected . ! Return value of TChain::LoadTree(); 0 means success ; Definition at line 48 of file TChainElement.h. ◆ fNPackets. Int_t TChainElement::fNPackets. protected . Number of packets. ; Definition at line 37 of file TChainElement.h. ◆ fPackets. char* TChainElement::fPackets. protected . ! Packet descriptor string ; Definition at line 46 of file TChainElement.h. ◆ fPacketSize. Int_t TChainElement::fPacketSize. protected . Number of events in one packet for parallel root. ; Definition at line 38 of file TChainElement.h. ◆ fStatus. Int_t TChainElement::fStatus. protected . branch status when used as a branch ; Definition at line 39 of file TChainElement.h. Libraries for TChainElement:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TChainElement.h; tree/tree/src/TChainElement.cxx. TChainElement. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChainElement.html:21969,Guid,Guide,21969,doc/master/classTChainElement.html,https://root.cern,https://root.cern/doc/master/classTChainElement.html,1,['Guid'],['Guide']
Usability,"adel is the main developer of 3D graphics and event-visualization packages. He holds a Ph.D. in experimental high-energy physics, obtained in 2001 for his work on electron reconstruction in the ATLAS experiment. Before joining the ROOT team in 2005, he worked on Gled - an advanced ROOT-based system for distributed computing and dynamic visualisation.; Nenad Buncic; Nenad was one of the first people joining the initial ROOT team in 1996. He developed the first version of the HTML documentation system (THtml) and worked on the first version of the 3D graphics system. Nenad left in 1997.; Paul Russo; Paul joined the ROOT team at Fermilab in 2005 and has been focusing on support and developing CINT.; Pere Mato; Pere Mato was the project leader from 2014 to 2017. He was the driving force behind ROOT's migration to CMake and has contributed to PyROOT.; Richard Maunder; Richard worked as project associate on the 3D graphics OpenGL based system.; Susan Panacek; Susan wrote the first ROOT User's Guide and developed a number of ROOT tutorials.; Timur Pocheptsov; Timur worked as a project associate on many different aspects of ROOT, but mostly on the OpenGL accelerated 3D graphics and the native macOS Cocoa based GUI. Timur also ported ROOT to the iPad. He continues to maintain the OpenGL and Cocoa code till this day.; Valeri Fine; Valeri was a member of the ROOT team from 1998-2000. He made the initial port to Windows. Currently he is the maintainer of the ROOT-Qt interface.; Valeri Onuchin; Valeri worked as a project associate on many different aspects of ROOT, but mostly in the GUI and graphics area. He did develop the signal/slot functionality and the GUI builder. He also developed the Carrot ROOT enabled web server. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/previous-developers.html:5900,Guid,Guide,5900,d/previous-developers.html,https://root.cern,https://root.cern/d/previous-developers.html,1,['Guid'],['Guide']
Usability,ader::RIterator::value_type = NTupleSize_t. Definition at line 112 of file RNTupleReader.hxx. Constructor & Destructor Documentation. ◆ RIterator() [1/2]. ROOT::Experimental::RNTupleReader::RIterator::RIterator ; (; ). default . ◆ RIterator() [2/2]. ROOT::Experimental::RNTupleReader::RIterator::RIterator ; (; NTupleSize_t ; index). inlineexplicit . Definition at line 118 of file RNTupleReader.hxx. ◆ ~RIterator(). ROOT::Experimental::RNTupleReader::RIterator::~RIterator ; (; ). default . Member Function Documentation. ◆ operator!=(). bool ROOT::Experimental::RNTupleReader::RIterator::operator!= ; (; const iterator & ; rh); const. inline . Definition at line 135 of file RNTupleReader.hxx. ◆ operator*(). reference ROOT::Experimental::RNTupleReader::RIterator::operator* ; (; ). inline . Definition at line 132 of file RNTupleReader.hxx. ◆ operator++() [1/2]. iterator & ROOT::Experimental::RNTupleReader::RIterator::operator++ ; (; ). inline . Definition at line 127 of file RNTupleReader.hxx. ◆ operator++() [2/2]. iterator ROOT::Experimental::RNTupleReader::RIterator::operator++ ; (; int ; ). inline . Definition at line 121 of file RNTupleReader.hxx. ◆ operator->(). pointer ROOT::Experimental::RNTupleReader::RIterator::operator-> ; (; ). inline . Definition at line 133 of file RNTupleReader.hxx. ◆ operator==(). bool ROOT::Experimental::RNTupleReader::RIterator::operator== ; (; const iterator & ; rh); const. inline . Definition at line 134 of file RNTupleReader.hxx. Member Data Documentation. ◆ fIndex. NTupleSize_t ROOT::Experimental::RNTupleReader::RIterator::fIndex = kInvalidNTupleIndex. private . Definition at line 107 of file RNTupleReader.hxx. Libraries for ROOT::Experimental::RNTupleReader::RIterator:. [legend]; The documentation for this class was generated from the following file:; tree/ntuple/v7/inc/ROOT/RNTupleReader.hxx. ROOTExperimentalRNTupleReaderRIterator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader_1_1RIterator.html:3786,Guid,Guide,3786,doc/master/classROOT_1_1Experimental_1_1RNTupleReader_1_1RIterator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleReader_1_1RIterator.html,1,['Guid'],['Guide']
Usability,"ading whitespace; 7781 if (tok.IsNull() && delimiter == ' ') {; 7782 // 1 2 should not be interpreted as 1,,,2 but 1, 2.; 7783 // Thus continue until we have a non-empty token.; 7784 continue;; 7785 }; 7786 ; 7787 if (!remainingLeafLen) {; 7788 // next branch!; 7789 branch = (TBranch*)fBranches.At(iBranch);; 7790 }; 7791 TLeaf *leaf = (TLeaf*)branch->GetListOfLeaves()->At(0);; 7792 if (!remainingLeafLen) {; 7793 remainingLeafLen = leaf->GetLen();; 7794 if (leaf->GetMaximum() > 0) {; 7795 // This is a dynamic leaf length, i.e. most likely a TLeafC's; 7796 // string size. This still translates into one token:; 7797 remainingLeafLen = 1;; 7798 }; 7799 ; 7800 leafData = tok;; 7801 } else {; 7802 // append token to laf data:; 7803 leafData += "" "";; 7804 leafData += tok;; 7805 }; 7806 --remainingLeafLen;; 7807 if (remainingLeafLen) {; 7808 // need more columns for this branch:; 7809 continue;; 7810 }; 7811 ++iBranch;; 7812 ; 7813 // initialize stringstream with token; 7814 sToken.clear();; 7815 sToken.seekp(0, std::ios_base::beg);; 7816 sToken.str(leafData.Data());; 7817 sToken.seekg(0, std::ios_base::beg);; 7818 leaf->ReadValue(sToken, 0 /* 0 = ""all"" */);; 7819 if (gDebug > 3) {; 7820 Info(""ReadStream"", ""%5lld:%3d:%d%d%d%d:%d%d%d%d:%s"",; 7821 nlines, iBranch,; 7822 (int)sToken.good(), (int)sToken.fail(),; 7823 (int)sToken.bad(), (int)sToken.eof(),; 7824 (int)in.good(), (int)in.fail(),; 7825 (int)in.bad(), (int)in.eof(),; 7826 sToken.str().c_str());; 7827 }; 7828 ; 7829 // Error handling; 7830 if (sToken.bad()) {; 7831 // How could that happen for a stringstream?; 7832 Warning(""ReadStream"",; 7833 ""Buffer error while reading data for branch %s on line %lld"",; 7834 branch->GetName(), nlines);; 7835 } else if (!sToken.eof()) {; 7836 if (sToken.fail()) {; 7837 Warning(""ReadStream"",; 7838 ""Couldn't read formatted data in \""%s\"" for branch %s on line %lld; ignoring line"",; 7839 tok.Data(), branch->GetName(), nlines);; 7840 goodLine = false;; 7841 } else {; 7842 std::string rema",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:305865,clear,clear,305865,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['clear'],['clear']
Usability,"ading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooProdPdf Class ReferenceRooFit » RooFit Core. ; Efficient implementation of a product of PDFs of the form. . \[ \prod_{i=1}^{N} \mathrm{PDF}_i (x, \ldots) \]. PDFs may share observables. If that is the case any irreducible subset of PDFs that share observables will be normalised with explicit numeric integration as any built-in normalisation will no longer be valid.; Alternatively, products using conditional PDFs can be defined, e.g. \[ F(x|y) \cdot G(y), \]. meaning a PDF \( F(x) \) given \( y \) and a PDF \( G(y) \). In this construction, \( F \) is only normalised w.r.t \( x\), and \( G \) is normalised w.r.t \( y \). The product in this construction is properly normalised.; If exactly one of the component PDFs supports extended likelihood fits, the product will also be usable in extended mode, returning the number of expected events from the extendable component PDF. The extendable component does not have to appear in any specific place in the list. PyROOT; RooProdPdf() constructor takes a RooCmdArg as argument also supports keyword arguments. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; model = ROOT.RooProdPdf(; ""model"", ""model"", ROOT.RooArgSet(shapePdf), ROOT.RooFit.Conditional(ROOT.RooArgSet(effPdf), ROOT.RooArgSet(cut)); ); ; # With keyword arguments:; model = ROOT.RooProdPdf(; ""model"", ""model"", ROOT.RooArgSet(shapePdf), Conditional=(ROOT.RooArgSet(effPdf), ROOT.RooArgSet(cut)); ). Definition at line 33 of file RooProdPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooProdPdf ();  Default constructor. ;  ;  RooProdPdf (const char *name, const char *title, const RooArgList &pdfList, double cutOff=0.0);  Constructor from a list of PDFs. ;  ;  RooProdPdf (const char *name, const char *title",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdPdf.html:1081,usab,usable,1081,doc/master/classRooProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooProdPdf.html,1,['usab'],['usable']
Usability,"ading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TTeXDump Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Interface to TeX. ; This class allow to generate PGF/TikZ vector graphics output which can be included in TeX and LaTeX documents.; PGF is a TeX macro package for generating graphics. It is platform and format-independent and works together with the most important TeX backend drivers, including pdftex and dvips. It comes with a user-friendly syntax layer called TikZ.; To generate a such file it is enough to do: gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TStyle::SetPaperSizevoid SetPaperSize(EPaperSize size)Set paper size for PostScript output.Definition TStyle.cxx:1704; Then, the generated file (hpx.tex) can be included in a LaTeX document (simple.tex) in the following way: \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}; TTeXDumpInterface to TeX.Definition TTeXDump.h:20; Rcpp::asTString as(SEXP s)Definition RExports.h:86; TMVA_SOFIE_GNN.endendDefinition TMVA_SOFIE_GNN.py:207; Note the three directives needed at the top of the LaTeX file: \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; Then including the picture in the document is done with the \input directive.; The command pdflatex simple.tex will generate the corresponding pdf file simple.pdf. ; Definition at line 20 of file TTeXDump.h. Public Member Functions;  TTeXDump ();  Default TeX constructor. ;  ;  TTeXDump (const char *filename, Int_t type=-113);  Initialize the TeX interface. ;  ;  ~TTeX",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTeXDump.html:1097,simpl,simple,1097,doc/master/classTTeXDump.html,https://root.cern,https://root.cern/doc/master/classTTeXDump.html,1,['simpl'],['simple']
Usability,"adowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSplitFrame(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = 0); Default constructor. ~TGSplitFrame(); Destructor. Make cleanup. void AddFrame(TGFrame* f, TGLayoutHints* l = 0); Add a frame in the split frame using layout hints l. void RemoveFrame(TGFrame* f); Add a frame in the split frame using layout hints l. void Cleanup(); Recursively cleanup child frames. TGSplitFrame * GetTopFrame(); Return the top level split frame. void Close(); Close (unmap and remove from the list of frames) the frame contained in; this split frame. void CloseAndCollapse(); Close (unmap, remove from the list of frames and destroy) the frame; contained in this split frame. Then unsplit the parent frame. void Docked(TGFrame* frame); Emit Undocked() signal. void ExtractFrame(); Extract the frame contained in this split frame an reparent it in a; transient frame. Keep a pointer on the transient frame to be able to; swallow the child frame back to this. Bool_t HandleConfigureNotify(Event_t* ); Handles resize events for this frame.; This is needed to keep as much as possible the sizes ratio between; all subframes. void HSplit(UInt_t h = 0); Horizontally split the frame. void VSplit(UInt_t w = 0); Vertically split the frame. void MapToSPlitTool(TGSplitFrame* top); Map this split frame in the small overview tooltip. void OnSplitterClicked(Event_t* event); Handle mouse click events on the splitter. void SplitHor(); Horizontally split the frame, and if it contains a child frame, ask; the user where to keep it (top or bottom). This is the method used; via the context menu. void SplitHorizontal(const char* side = ""top""); Horizontally split the frame, and if it contains a child frame, ask; the user where to keep it (top o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGSplitFrame.html:21465,Undo,Undocked,21465,root/html602/TGSplitFrame.html,https://root.cern,https://root.cern/root/html602/TGSplitFrame.html,2,['Undo'],['Undocked']
Usability,ads = 1 . ). Same as Train(...) but uses the given momentum. . Member Data Documentation. ◆ fBatchSize. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fBatchSize. private . Batch size to use for the training. ; Definition at line 62 of file Minimizers.h. ◆ fConvergenceCount. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fConvergenceCount. private . Current number of training epochs without. ; considerable decrease in the test error. ; Definition at line 66 of file Minimizers.h. ◆ fConvergenceSteps. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fConvergenceSteps. private . Number of training epochs without considerable. ; decrease in the test error for convergence. ; Definition at line 64 of file Minimizers.h. ◆ fLearningRate. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fLearningRate. private . Learning rate \(\alpha\). ; Definition at line 71 of file Minimizers.h. ◆ fMinimumError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fMinimumError. private . The minimum loss achieved on the training set during the current training session. ; Definition at line 72 of file Minimizers.h. ◆ fStepCount. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fStepCount. private . Number of steps performed in the current training session. ; Definition at line 63 of file Minimizers.h. ◆ fTestError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::fTestError. private . Holds the most recently computed test loss. ; Definition at line 70 of file Minimizers.h. ◆ fTestInterval. template<typename Architecture_t > . size_t TMVA::DNN::TGradientDescent< Architecture_t >::fTestInterval. private . Interval for the computation of the test error. ; Definition at line 68 of file Minimizers.h,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:15501,Learn,Learning,15501,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,1,['Learn'],['Learning']
Usability,"ads) { if (fMonitoring) fMonitoring->pads (numPads); } ///< preparation for monitoring; 819 void create (std::string histoName, int bins, double min, double max) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceSteps; ///< number of steps without improvement to consider the DNN to have converged; 838 size_t m_batchSize; ///< mini-batch size; 839 size_t m_testRepetitions;; 840 double m_factorWeightDecay;; 841 ; 842 size_t count_E;; 843 size_t count_dE;; 844 size_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:31437,clear,clear,31437,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['clear'],['clear']
Usability,"advisable however to define these properties just; after the first creation of a volume namespace, since in case of volume families; any new member created by the modeler inherits these properties. In order to provide navigation features, volumes have to be able to find; the proper container of any point defined in the local reference frame. This; can be the volume itself, one of its positioned daughter volumes or none if; the point is actually outside. On the other hand, volumes have to provide also; other navigation methods such as finding the distances to its shape boundaries; or which daughter will be crossed first. The implementation of these features; is done at shape level, but the local mother-daughters management is handled; by volumes that builds additional optimisation structures upon geometry closure.; In order to have navigation features properly working one has to follow the; general rules for building a valid geometry (see TGeoManager class). Now let's make a simple volume representing a copper wire. We suppose that; a medium is already created (see TGeoMedium class on how to create media).; We will create a TUBE shape for our wire, having Rmin=0cm, Rmax=0.01cm; and a half-length dZ=1cm :. TGeoTube *tube = new TGeoTube(""wire_tube"", 0, 0.01, 1);. One may ommit the name for the shape if no retreiving by name is further needed; during geometry building. The same shape can be shared by different volumes; having different names and materials. Now let's make the volume for our wire.; The prototype for volumes constructor looks like :. TGeoVolume::TGeoVolume(const char *name, TGeoShape *shape, TGeoMedium *med). Since TGeoTube derives brom the base shape class, we can provide it to the volume; constructor :. TGeoVolume *wire_co = new TGeoVolume(""WIRE_CO"", tube, ptrCOPPER);. Do not bother to delete neither the media, shapes or volumes that you have; created since all will be automatically cleaned on exit by the manager class.; If we would have taken a look insi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolume.html:2731,simpl,simple,2731,root/html528/TGeoVolume.html,https://root.cern,https://root.cern/root/html528/TGeoVolume.html,9,['simpl'],['simple']
Usability,"advisable however to define these properties just; after the first creation of a volume namespace, since in case of volume families; any new member created by the modeler inherits these properties. In order to provide navigation features, volumes have to be able to find; the proper container of any point defined in the local reference frame. This; can be the volume itself, one of its positioned daughter volumes or none if; the point is actually outside. On the other hand, volumes have to provide also; other navigation methods such as finding the distances to its shape boundaries; or which daughter will be crossed first. The implementation of these features; is done at shape level, but the local mother-daughters management is handled; by volumes that builds additional optimisation structures upon geometry closure.; In order to have navigation features properly working one has to follow the; general rules for building a valid geometry (see TGeoManager class). Now let's make a simple volume representing a copper wire. We suppose that; a medium is already created (see TGeoMedium class on how to create media).; We will create a TUBE shape for our wire, having Rmin=0cm, Rmax=0.01cm; and a half-length dZ=1cm :. TGeoTube *tube = new TGeoTube(""wire_tube"", 0, 0.01, 1);. One may ommit the name for the shape if no retreiving by name is further needed; during geometry building. The same shape can be shared by different volumes; having different names and materials. Now let's make the volume for our wire.; The prototype for volumes constructor looks like :. TGeoVolume::TGeoVolume(const char *name, TGeoShape *shape, TGeoMedium *med). Since TGeoTube derives from the base shape class, we can provide it to the volume; constructor :. TGeoVolume *wire_co = new TGeoVolume(""WIRE_CO"", tube, ptrCOPPER);. Do not bother to delete neither the media, shapes or volumes that you have; created since all will be automatically cleaned on exit by the manager class.; If we would have taken a look insi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:2751,simpl,simple,2751,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,9,['simpl'],['simple']
Usability,"af.; Definition at line 179 of file TLeafB.cxx. ◆ ReadBasketFast(). bool TLeafB::ReadBasketFast ; (; TBuffer & ; , . Long64_t ;  . ). inlineoverridevirtual . Reimplemented from TLeaf.; Definition at line 59 of file TLeafB.h. ◆ ReadValue(). void TLeafB::ReadValue ; (; std::istream & ; s, . Char_t ; delim = ' ' . ). overridevirtual . Read a 8 bit integer from std::istream s and store it into the branch buffer. ; Reimplemented from TLeaf.; Definition at line 191 of file TLeafB.cxx. ◆ SetAddress(). void TLeafB::SetAddress ; (; void * ; addr = nullptr). overridevirtual . Set value buffer address. ; Reimplemented from TLeaf.; Definition at line 213 of file TLeafB.cxx. ◆ SetMaximum(). virtual void TLeafB::SetMaximum ; (; Char_t ; max). inlinevirtual . Definition at line 54 of file TLeafB.h. ◆ SetMinimum(). virtual void TLeafB::SetMinimum ; (; Char_t ; min). inlinevirtual . Definition at line 55 of file TLeafB.h. ◆ Streamer(). void TLeafB::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TLeaf. ◆ StreamerNVirtual(). void TLeafB::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file TLeafB.h. Member Data Documentation. ◆ fMaximum. Char_t TLeafB::fMaximum. protected . Maximum value if leaf range is specified. ; Definition at line 30 of file TLeafB.h. ◆ fMinimum. Char_t TLeafB::fMinimum. protected . Minimum value if leaf range is specified. ; Definition at line 29 of file TLeafB.h. ◆ fPointer. Char_t** TLeafB::fPointer. protected . ! Address of a pointer to data buffer! ; Definition at line 32 of file TLeafB.h. ◆ fValue. Char_t* TLeafB::fValue. protected . ! Pointer to data buffer ; Definition at line 31 of file TLeafB.h. Libraries for TLeafB:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TLeafB.h; tree/tree/src/TLeafB.cxx. TLeafB. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafB.html:22424,Guid,Guide,22424,doc/master/classTLeafB.html,https://root.cern,https://root.cern/doc/master/classTLeafB.html,1,['Guid'],['Guide']
Usability,"af::GetLenStaticvirtual Int_t GetLenStatic() constReturn the fixed length of this leaf.Definition TLeaf.h:132; TLeaf::GetOffsetvirtual Int_t GetOffset() constDefinition TLeaf.h:137; TLeaf::ReadBasketvirtual void ReadBasket(TBuffer &)Definition TLeaf.h:152; TLeaf::fLeafCountValuesLeafCountValues * fLeafCountValues! Cache of collection/array sizesDefinition TLeaf.h:79; TLeaf::GenerateOffsetArrayvirtual Int_t * GenerateOffsetArray(Int_t base, Int_t events)Definition TLeaf.h:115; TLeaf::SetRangevirtual void SetRange(bool range=true)Definition TLeaf.h:165; TLeaf::Counts_tstd::vector< Int_t > Counts_tDefinition TLeaf.h:65; TLeaf::Importvirtual void Import(TClonesArray *, Int_t)Definition TLeaf.h:147; TLeaf::PrintValuevirtual void PrintValue(Int_t i=0) constDefinition TLeaf.h:184; TLeaf::IsRangevirtual bool IsRange() constDefinition TLeaf.h:149; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TStringBasic string class.Definition TString.h:139; double; int; TLeaf::GetValueHelper< Long64_t >::Execstatic Long64_t Exec(const TLeaf *leaf, Int_t i=0)Definition TLeaf.h:173; TLeaf::GetValueHelper< LongDouble_t >::Execstatic LongDouble_t Exec(const TLeaf *leaf, Int_t i=0)Definition TLeaf.h:179; TLeaf::GetValueHelper< ULong64_t >::Execstatic ULong64_t Exec(const TLeaf *leaf, Int_t i=0)Definition TLeaf.h:176; TLeaf::GetValueHelperDefinition TLeaf.h:84; TLeaf::GetValueHelper::Execstatic T Exec(const TLeaf *leaf, Int_t i=0)Definition TLeaf.h:85; TLeaf::LeafCountValuesDefinition TLeaf.h:66; TLeaf::LeafCountValues::fValuesCounts_t fValuesDefinition TLeaf.h:67; TLeaf::LeafCountValues::fStartEntryLong64_t fStartEntry! entry number of corresponding to element 0 of the vector.Definition TLeaf.h:68. treetreeincTLeaf.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLeaf_8h_source.html:19694,Guid,Guide,19694,doc/master/TLeaf_8h_source.html,https://root.cern,https://root.cern/doc/master/TLeaf_8h_source.html,1,['Guid'],['Guide']
Usability,"ag -am <mesasge> [<tree-ish>]. However, if you have already pushed tags, there are wider consequences. For this reason, altering pushed tags is emphatically discouraged: create a new tag. However, since you're going to ignore me and do it anyway, here's how to do what you want without getting into too much of a mess:. To remove an erroneous tag, someone with the manager rôle on the project must log into cdcvsdirectly as the repository user (e.g. p-art), cd to the bare repository with cd /cvs/projects/<project> and then remove the tag with git tag -d <tag>.; Back in your working directory, tag correctly and then push tags.; Now, you must alert all your developers that, if they have pulled the erroneous tag to their local repository, they will need to remove the tag from their local repository with git -d <tag> and then re-pull from the repository. Otherwise, deleted tags will keep re-appearing in the remote repository and/or users will be unable to pull or push to the remote. Undo the last commit:. Undo the commit:; git reset --soft HEAD^. Do stuff.; Recommit:; git commit -a -m <message> -c ORIG_HEAD. Note that the -c ORIG_HEAD clause causes git to use the meta-data from the previous HEAD (author, etc) with the exception of the commit message. Changing the -c to -C and omitting the -m option will cause git to reuse the commit message too. Recover deleted (committed files). Get a list of all commits with deleted files:; git log --diff-filter=D --summary | less. Find your file and note the SHA1 hash for that commit.; Recover it:; git checkout <commit>^ -- file. Stage selected changes within a file. git add --patch ; Follow the on-screen directions. Tig: a simple and colored text-mode interface for Git; Tig is a command line tool that wraps many Git browse operations (like log, diff, show, status) in a colored text-mode interface based on ncurses. Tig has been written by Jonas Fonseca.; See the full Tig manual for a detailed description.; Obtaining Tig; Tig is available ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:15330,Undo,Undo,15330,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['Undo'],['Undo']
Usability,"ag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoNodeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for node editor. ~TGeoNodeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a editable object. void DoSelectMother(); Select the mother volume. void DoSelectVolume(); Select the volume. void DoSelectMatrix(); Select the matrix. void DoEditMother(); Edit the mother volume. void DoEditVolume(); Edit selected volume. void DoEditMatrix(); Edit selected material. void DoNodeName(); Change node name. void DoNodeNumber(); Change node copy number. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoNodeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoNodeEditor.html:21731,undo,undoing,21731,root/html528/TGeoNodeEditor.html,https://root.cern,https://root.cern/root/html528/TGeoNodeEditor.html,1,['undo'],['undoing']
Usability,"ag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoNodeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for node editor. ~TGeoNodeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a editable object. void DoSelectMother(); Select the mother volume. void DoSelectVolume(); Select the volume. void DoSelectMatrix(); Select the matrix. void DoEditMother(); Edit the mother volume. void DoEditVolume(); Edit selected volume. void DoEditMatrix(); Edit selected material. void DoNodeName(); Change node name. void DoNodeNumber(); Change node copy number. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoNodeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoNodeEditor.html:21831,undo,undoing,21831,root/html530/TGeoNodeEditor.html,https://root.cern,https://root.cern/root/html530/TGeoNodeEditor.html,1,['undo'],['undoing']
Usability,"ag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoNodeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for node editor. ~TGeoNodeEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a editable object. void DoSelectMother(); Select the mother volume. void DoSelectVolume(); Select the volume. void DoSelectMatrix(); Select the matrix. void DoEditMother(); Edit the mother volume. void DoEditVolume(); Edit selected volume. void DoEditMatrix(); Edit selected material. void DoNodeName(); Change node name. void DoNodeNumber(); Change node copy number. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoNodeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoNodeEditor.html:21831,undo,undoing,21831,root/html532/TGeoNodeEditor.html,https://root.cern,https://root.cern/root/html532/TGeoNodeEditor.html,1,['undo'],['undoing']
Usability,"ag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCancelcancel button; TGTextButton*fOkok button; char*fStrcutsaddress to store cuts string; char*fStrvarsaddress to store variables string; TGTextEntry*fTECutstext entry widget for cuts; TGTextEntry*fTEVarstext entry widget for variables. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TTreeInput. Function documentation; TTreeInput(const TGWindow* p, const TGWindow* main, char* strvars, char* strcuts); Create simple input dialog. ~TTreeInput(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TTreeInput(const TTreeInput& ). TTreeInput & operator=(const TTreeInput& ). » Author: David Gonzalez Maline 21/10/2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeInput.html:23639,simpl,simple,23639,root/html604/TTreeInput.html,https://root.cern,https://root.cern/root/html604/TTreeInput.html,1,['simpl'],['simple']
Usability,"ag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCancelcancel button; TGTextButton*fOkok button; char*fStrcutsaddress to store cuts string; char*fStrvarsaddress to store variables string; TGTextEntry*fTECutstext entry widget for cuts; TGTextEntry*fTEVarstext entry widget for variables. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TTreeInput. Function documentation; TTreeInput(const TGWindow* p, const TGWindow* main, char* strvars, char* strcuts); Create simple input dialog. ~TTreeInput(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TTreeInput(const TTreeInput& ). TTreeInput & operator=(const TTreeInput& ). » Author: David Gonzalez Maline 21/10/2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeInput.html:23639,simpl,simple,23639,root/html602/TTreeInput.html,https://root.cern,https://root.cern/root/html602/TTreeInput.html,1,['simpl'],['simple']
Usability,"ag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); Bool_tTEveCaloViz::AssertCellIdCache() const; TEveRGBAPalette*TEveCaloViz::AssertPalette(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; Bool_tTEveCaloViz::CellInEtaPhiRng(TEveCaloData::CellData_t&) const; virtual voidCellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCalo2D.html:2398,Clear,Clear,2398,root/html528/TEveCalo2D.html,https://root.cern,https://root.cern/root/html528/TEveCalo2D.html,6,['Clear'],['Clear']
Usability,"ag. ; Definition at line 6092 of file TProof.cxx. ◆ ClearCache(). void TProof::ClearCache ; (; const char * ; file = 0). virtual . Remove file from all file caches. ; If file is 0 or """" or ""*"", remove all the files ; Reimplemented in TProofLite.; Definition at line 7714 of file TProof.cxx. ◆ ClearData(). void TProof::ClearData ; (; UInt_t ; what = kUnregistered, . const char * ; dsname = 0 . ). Remove files for the data directory. ; The option 'what' can take the values: kPurge remove all files and directories under '~/data' kUnregistered remove only files not in registered datasets (default) kDataset remove files belonging to dataset 'dsname' User is prompt for confirmation, unless kForceClear is ORed with the option ; Definition at line 7412 of file TProof.cxx. ◆ ClearDataProgress(). void TProof::ClearDataProgress ; (; Int_t ; r, . Int_t ; t . ). private . Progress bar for clear data. ; Definition at line 7670 of file TProof.cxx. ◆ ClearDataSetCache(). void TProof::ClearDataSetCache ; (; const char * ; dataset = 0). virtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented in TProofLite.; Definition at line 10896 of file TProof.cxx. ◆ ClearFeedback(). void TProof::ClearFeedback ; (; ). Clear feedback list. ; Definition at line 10012 of file TProof.cxx. ◆ ClearInput(). void TProof::ClearInput ; (; ). Clear input object list. ; Definition at line 9742 of file TProof.cxx. ◆ ClearInputData() [1/2]. void TProof::ClearInputData ; (; const char * ; name). Remove obj 'name' form the input data list;. ; Definition at line 9572 of file TProof.cxx. ◆ ClearInputData() [2/2]. void TProof::ClearInputData ; (; TObject * ; obj = 0). Remove obj form the input data list; if obj is null (default), clear the input data info. ; Definition at line 9538 of file TProof.cxx. ◆ ClearPackage(). Int_t TProof::ClearPackage ; (; const char * ; package). Remove a specific package. ; Returns 0 in case of success and -1 in case of error. ; Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:75232,Clear,ClearDataSetCache,75232,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['ClearDataSetCache']
Usability,"ag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGHtml.h>. Inheritance diagram for TGHtmlLayoutContext:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGHtmlLayoutContext(). TGHtmlLayoutContext::TGHtmlLayoutContext ; (; ). Html Layout Context constructor. ; Definition at line 38 of file TGHtmlLayout.cxx. Member Function Documentation. ◆ ClearMarginStack(). void TGHtmlLayoutContext::ClearMarginStack ; (; SHtmlMargin_t ** ; ppMargin). protected . Clear a margin stack to reclaim memory. ; This routine just blindly pops everything off the stack. Typically used when the screen is cleared or the widget is deleted, etc. ; Definition at line 165 of file TGHtmlLayout.cxx. ◆ ClearObstacle(). void TGHtmlLayoutContext::ClearObstacle ; (; int ; mode). protected . Clear a wrap-around obstacle. ; The second option determines the precise behavior.; CLEAR_Left Clear all obstacles on the left.; CLEAR_Right Clear all obstacles on the right.; CLEAR_Both Clear all obstacles on both sides.; CLEAR_First Clear only the first obstacle on either side. ; Definition at line 733 of file TGHtmlLayout.cxx. ◆ ComputeMargins(). void TGHtmlLayoutContext::ComputeMargins ; (; int * ; pX, . int * ; pY, . int * ; pW . ). protected . Compute the current margins for layout. ; Three values are returned:; *pY The top edge of the area in which we can put ink. This takes into account any requested headroom.; *pX The left edge of the inkable area. The takes into account any margin requests active at vertical position specified in pLC->bottom.; *pW The width of the inkable area. This takes into account an margin requests that are active at the vertical position pLC->bottom. ; Definition at line 696",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:12746,Clear,ClearObstacle,12746,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['Clear'],['ClearObstacle']
Usability,"again in the interpreter (in which the func object will be reused. ; Definition at line 397 of file TListOfEnums.cxx. ◆ Unload() [2/2]. void TListOfEnums::Unload ; (; TEnum * ; e). private . Mark enum 'e' as being unloaded. ; After the unload, the data member can no longer be found directly, until the decl can be found again in the interpreter (in which the func object will be reused. ; Definition at line 420 of file TListOfEnums.cxx. ◆ UnmapObject(). void TListOfEnums::UnmapObject ; (; TObject * ; obj). private . Remove a pair<id, object> from the map of functions and their ids. ; Definition at line 276 of file TListOfEnums.cxx. Friends And Related Symbol Documentation. ◆ TClass. friend class TClass. friend . Definition at line 36 of file TListOfEnums.h. ◆ TCling. friend class TCling. friend . Definition at line 35 of file TListOfEnums.h. ◆ TProtoClass. friend class TProtoClass. friend . Definition at line 37 of file TListOfEnums.h. ◆ TROOT. friend class TROOT. friend . Definition at line 38 of file TListOfEnums.h. Member Data Documentation. ◆ fClass. TClass* TListOfEnums::fClass. private . Definition at line 40 of file TListOfEnums.h. ◆ fIds. TExMap* TListOfEnums::fIds. private . Context of this list. Not owned. ; Definition at line 42 of file TListOfEnums.h. ◆ fIsLoaded. Bool_t TListOfEnums::fIsLoaded. private . Holder of TEnum for unloaded Enums. ; Definition at line 44 of file TListOfEnums.h. ◆ fLastLoadMarker. ULong64_t TListOfEnums::fLastLoadMarker. private . Mark whether Load was executed. ; Definition at line 45 of file TListOfEnums.h. ◆ fUnloaded. THashList* TListOfEnums::fUnloaded. private . Map from DeclId_t to TEnum*. ; Definition at line 43 of file TListOfEnums.h. Libraries for TListOfEnums:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TListOfEnums.h; core/meta/src/TListOfEnums.cxx. TListOfEnums. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfEnums.html:34339,Guid,Guide,34339,doc/master/classTListOfEnums.html,https://root.cern,https://root.cern/doc/master/classTListOfEnums.html,1,['Guid'],['Guide']
Usability,"age displayed in a pad is defined by this function. ;  ;  Public Member Functions inherited from TImage;  TImage (const TImage &img);  ;  TImage (UInt_t, UInt_t);  ;  ~TImage () override;  ; TObject * Clone (const char *) const override;  Make a clone of an object using the Streamer facility. ;  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  List this image with its attributes. ;  ; TImage & operator+= (const TImage &i);  ; TImage & operator/= (const TImage &i);  ; TImage & operator= (const TImage &img);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:15252,Clear,Clear,15252,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,1,['Clear'],['Clear']
Usability,"age exist in ROOT:; Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. See the GenVector page. UNURAN: Package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions.; Foam Multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW Library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of FFTW.; MLP Library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp Optimization library with linear and quadratic programming methods. It is based on the Matrix package. Further information is available at the following links:. The Math page in the manual; The Linear Algebra section in the manual; The Fitting histograms page in the manual; [Inventory of Math functions and algorithms] (http://project-mathlibs.web.cern.ch/project-mathlibs/mathTable.html) . Modules;  Physics Vectors;  Vector classes (2D, 3D and 4D / Lorentz vector) and their transformations. ;  ;  MathCore;  The Core Mathematical Library of ROOT. ;  ;  MathMore;  The Mathematical library providing some advanced functionality and based on GSL. ;  ;  Matrix Linear Algebra;  The ROOT Matrix Linear Algebra package. ;  ;  TMinuit;  The Minuit Minimization package. ;  ;  Minuit2 Minimization Library;  New Object-oriented implementation of the MINUIT minimization package. ;  ;  Legacy Physics Classes;  Legacy physics classes. ;  ;  SMatrix Package;  ;  Unuran;  Universal Non Uniform Random number generator for generating non uniform pseudo-random numbers. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Math.html:5029,Guid,Guide,5029,doc/master/group__Math.html,https://root.cern,https://root.cern/doc/master/group__Math.html,1,['Guid'],['Guide']
Usability,"age for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parall",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v618/namespaceROOT.html:1890,simpl,simple,1890,doc/v618/namespaceROOT.html,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html,2,['simpl'],['simple']
Usability,"age. ; If not, then:; mark bit 0 of fBitsPIDs to indicate that a ProcessID has been found; mark bit uid+1 where uid id the uid of the ProcessID . Reimplemented from TBufferIO.; Definition at line 438 of file TMessage.cxx. Friends And Related Symbol Documentation. ◆ TAuthenticate. friend class TAuthenticate. friend . Definition at line 35 of file TMessage.h. ◆ TPSocket. friend class TPSocket. friend . Definition at line 38 of file TMessage.h. ◆ TSocket. friend class TSocket. friend . Definition at line 36 of file TMessage.h. ◆ TUDPSocket. friend class TUDPSocket. friend . Definition at line 37 of file TMessage.h. ◆ TXSocket. friend class TXSocket. friend . Definition at line 39 of file TMessage.h. Member Data Documentation. ◆ fBitsPIDs. TBits TMessage::fBitsPIDs. private . Definition at line 43 of file TMessage.h. ◆ fBufComp. char* TMessage::fBufComp {nullptr}. private . Definition at line 47 of file TMessage.h. ◆ fBufCompCur. char* TMessage::fBufCompCur {nullptr}. private . Definition at line 48 of file TMessage.h. ◆ fClass. TClass* TMessage::fClass {nullptr}. private . Definition at line 45 of file TMessage.h. ◆ fCompPos. char* TMessage::fCompPos {nullptr}. private . Definition at line 49 of file TMessage.h. ◆ fCompress. Int_t TMessage::fCompress {0}. private . Definition at line 46 of file TMessage.h. ◆ fEvolution. Bool_t TMessage::fEvolution {kFALSE}. private . Definition at line 50 of file TMessage.h. ◆ fgEvolution. Bool_t TMessage::fgEvolution = kFALSE. staticprivate . Definition at line 52 of file TMessage.h. ◆ fInfos. TList* TMessage::fInfos {nullptr}. private . Definition at line 42 of file TMessage.h. ◆ fWhat. UInt_t TMessage::fWhat {0}. private . Definition at line 44 of file TMessage.h. Libraries for TMessage:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TMessage.h; net/net/src/TMessage.cxx. TMessage. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:49887,Guid,Guide,49887,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,1,['Guid'],['Guide']
Usability,ailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation ROOT User Guides and Manuals. ROOT Guides. Title; Quick Link; All Links. Reference Guide; head / 6.08; all releases. User's Guide; 6 Series (html); all formats and series. ROOT Primer - Notebook Version (beta); html pdf GitHub / SWAN; *. ROOT Primer; 6 Series (html); all formats and series. ROOT Primer 5; 5 Series (pdf). Topical Manuals. Title; Quick Link; All Links. RooFit; Manual (pdf) / Quick Start Guide (pdf); other formats. HTTP Server; 6 Series (html); all versions. JSROOT; 6 Series (html); all versions. CERNLib; (pdf); -. Minuit; (pdf); -. Minuit2; 6 Series (html); all formats and series. TSpectrum; 6 Series (html); all formats and series. TMVA; 6 Series (pdf); other links. PROOF; Drupal Book; other resources. VMC; Drupal Book; -. In a Nutshell. Title; Link. Input and Output; Drupal. Trees in 5 steps; Drupal. Interpreter; Drupal Book. Cling; Drupal Book. Math Libraries; Drupal Book. 2D-graphics; Drupal Book. 3D-graphics; Drupal Book. RooFit in 20 Minutes; Drupal. The ROOT GUI Classes; Drupal. Introduction to Cint; Drupal. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-user-guides-and-manuals.html:2284,Guid,Guide,2284,d/root-user-guides-and-manuals.html,https://root.cern,https://root.cern/d/root-user-guides-and-manuals.html,1,['Guid'],['Guide']
Usability,ain(). void TMVA::MethodTMlpANN::Train ; (; void ; ). virtual . performs TMlpANN training available learning methods: . TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once so merge the training and testing trees from the MVA factory first: ; Implements TMVA::MethodBase.; Definition at line 260 of file MethodTMlpANN.cxx. Member Data Documentation. ◆ fHiddenLayer. TString TMVA::MethodTMlpANN::fHiddenLayer. private . string containing the hidden layer structure ; Definition at line 111 of file MethodTMlpANN.h. ◆ fLayerSpec. TString TMVA::MethodTMlpANN::fLayerSpec. private . Layer specification option. ; Definition at line 106 of file MethodTMlpANN.h. ◆ fLearningMethod. TString TMVA::MethodTMlpANN::fLearningMethod. private . the learning method (given via option string) ; Definition at line 116 of file MethodTMlpANN.h. ◆ fLocalTrainingTree. TTree* TMVA::MethodTMlpANN::fLocalTrainingTree. private . local copy of training tree ; Definition at line 109 of file MethodTMlpANN.h. ◆ fMLP. TMultiLayerPerceptron* TMVA::MethodTMlpANN::fMLP. private . the TMLP ; Definition at line 108 of file MethodTMlpANN.h. ◆ fMLPBuildOptions. TString TMVA::MethodTMlpANN::fMLPBuildOptions. private . option string to build the mlp ; Definition at line 114 of file MethodTMlpANN.h. ◆ fNcycles. Int_t TMVA::MethodTMlpANN::fNcycles. private . number of training cycles ; Definition at line 112 of file MethodTMlpANN.h. ◆ fValidationFraction. Double_t TMVA::MethodTMlpANN::fValidationFraction. private . fraction of events in training tree used for cross validation ; Definition at line 113 of file MethodTMlpANN.h. Libraries for TMVA::MethodTMlpANN:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodTMlpANN.h; tmva/tmva/src/Method,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:36293,learn,learning,36293,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,1,['learn'],['learning']
Usability,"ain. private . flag to control if distribution has a defined domain (otherwise is [0,INT_MAX]) ; Definition at line 211 of file TUnuranDiscrDist.h. ◆ fHasMode. bool TUnuranDiscrDist::fHasMode. private . flag to control if distribution has a pre-computed mode ; Definition at line 212 of file TUnuranDiscrDist.h. ◆ fHasSum. bool TUnuranDiscrDist::fHasSum. private . flag to control if distribution has a pre-computed sum of the probabilities ; Definition at line 213 of file TUnuranDiscrDist.h. ◆ fMode. int TUnuranDiscrDist::fMode. private . mode of the distribution ; Definition at line 208 of file TUnuranDiscrDist.h. ◆ fOwnFunc. bool TUnuranDiscrDist::fOwnFunc. private . flag to control if distribution owns the function pointers ; Definition at line 214 of file TUnuranDiscrDist.h. ◆ fPmf. const ROOT::Math::IGenFunction* TUnuranDiscrDist::fPmf. private . pointer to a function calculating the probability ; Definition at line 204 of file TUnuranDiscrDist.h. ◆ fPVec. std::vector<double> TUnuranDiscrDist::fPVec. private . Vector of the probabilities. ; Definition at line 202 of file TUnuranDiscrDist.h. ◆ fPVecSum. std::vector<double> TUnuranDiscrDist::fPVecSum. mutableprivate . Vector of the sum of the probabilities. ; Definition at line 203 of file TUnuranDiscrDist.h. ◆ fSum. double TUnuranDiscrDist::fSum. private . total sum of the probabilities in the given domain ; Definition at line 209 of file TUnuranDiscrDist.h. ◆ fXmax. int TUnuranDiscrDist::fXmax. private . upper value of the domain ; Definition at line 207 of file TUnuranDiscrDist.h. ◆ fXmin. int TUnuranDiscrDist::fXmin. private . lower value of the domain ; Definition at line 206 of file TUnuranDiscrDist.h. Libraries for TUnuranDiscrDist:. [legend]; The documentation for this class was generated from the following files:; math/unuran/inc/TUnuranDiscrDist.h; math/unuran/src/TUnuranDiscrDist.cxx. TUnuranDiscrDist. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuranDiscrDist.html:12994,Guid,Guide,12994,doc/master/classTUnuranDiscrDist.html,https://root.cern,https://root.cern/doc/master/classTUnuranDiscrDist.html,1,['Guid'],['Guide']
Usability,ain.cpp;  ► smatrix;  matrix_op_vec.h;  matrix_util.h;  testKalman.cxx;  testOperations.cxx;  TestTimer.h;  tsc.h;  ► include;  ► Vc;  ► avx;  casts.h;  const.h;  const_data.h;  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  sorthelper.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  writemaskedvector.h;  ► common;  aliasingentryhelper.h;  bitscanintrinsics.h;  deinterleave.h;  exponential.h;  fix_clang_emmintrin.h;  iif.h;  interleavedmemory.h;  logarithm.h;  macros.h;  memory.h;  memorybase.h;  memoryfwd.h;  operand.h;  operators.h;  storage.h;  support.h;  trigonometric.h;  types.h;  undomacros.h;  vectortuple.h;  windows_fix_intrin.h;  ► internal;  namespace.h;  ► scalar;  helperimpl.h;  limits.h;  macros.h;  mask.h;  math.h;  types.h;  undomacros.h;  vector.h;  writemaskedvector.h;  ► sse;  casts.h;  const.h;  const_data.h;  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  cpuid.h;  global.h;  support.h;  vector.h;  version.h;  ► src;  avx_sorthelper.cpp;  const.cpp;  cpuid.cpp;  support.cpp;  trigonometric.cpp;  ► tests;  arithmetics.cpp;  casts.cpp;  const.h;  convert-sincos-reference.cpp;  deinterleave.cpp;  expandandmerge.cpp;  gather.cpp;  implicit_type_conversion.cpp;  implicit_type_conversion_failures.cpp;  linkTest0.cpp;  linkTest1.cpp;  linkTestLib0.cpp;  linkTestLib1.cpp;  linkTestLib2.cpp;  linkTestLib3.cpp;  load.cpp;  mask.cpp;  math.cpp;  memory.cpp;  scalaraccess.cpp;  scatter.cpp;  sse_blend.cpp;  stlcontainer.cpp;  store.cpp;  supportfunctions.cpp;  swizzles.cpp;  ulp.h;  unittest.h;  utils.cpp;  vectormemoryhelper.h;  makeTest.py;  ► vdt;  ► include;  ► vdt;  asin.h;  atan.h;  atan2.h;  cos.h;  exp.h;  inv.h;  log.h;  sin.h;  sincos.h;  sqrt.h;  tan.h;  vdtcore_common.h;  vdtMath.h;  ► tests;  stressVdt.cxx;  ► misc;  ► memstat;  ► inc;  LinkDef.h;  TMemStat.h;  TMemStatBacktrace.h;  TMemStatDef.h;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:58961,undo,undomacros,58961,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['undo'],['undomacros']
Usability,"ainTransparency(Char_t t, Char_t old_t); virtual voidPropagateRenderState(Bool_t rnr_self, Bool_t rnr_children); virtual voidPropagateVizParams(TEveElement* el = 0); virtual voidRemoveProjected(TEveProjected* p); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TEveProjectable(). private:. TEveProjectable&operator=(const TEveProjectable&); TEveProjectable(const TEveProjectable&). Data Members; protected:. TEveProjectable::ProjList_tfProjectedListreferences to projected instances. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveProjectable(); Constructor. ~TEveProjectable(); Destructor.; Force projected replicas to unreference *this, then destroy them. void AnnihilateProjecteds(); Optimized destroy of projected elements with condition; there is only one parent for projected element. Method is; called from TEveElement::Annihilate(). void ClearProjectedList(). void AddProjectedsToSet(set<TEveElement*>& set); Add the projected elements to the set, dyn-casting them to; TEveElement. void PropagateVizParams(TEveElement* el = 0); Set visualization parameters of projecteds.; Use element el as model. If el == 0 (default), this casted to; TEveElement is used. void PropagateRenderState(Bool_t rnr_self, Bool_t rnr_children); Set render state of projecteds. void PropagateMainColor(Color_t color, Color_t old_color); Set main color of projecteds if their color is the same as old_color. void PropagateMainTransparency(Char_t t, Char_t old_t); Set main transparency of projecteds if their transparecy is the; same as the old one. TEveProjectable(const TEveProjectable& ). TEveProjectable& operator=(const TEveProjectable& ). TClass* ProjectedClass(const TEveProjection* p) const. Bool_t HasProjecteds() const; { return ! fProjectedList.empty(); }. ProjList_i BeginProjecteds(); { return fProjectedList.begin(); }. ProjList_i EndProjecteds(); { return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveProjectable.html:2333,Clear,ClearProjectedList,2333,root/html602/TEveProjectable.html,https://root.cern,https://root.cern/root/html602/TEveProjectable.html,2,['Clear'],['ClearProjectedList']
Usability,"ainer to match one ore more container limits. Suppose we want to position the same box inside 2 different volumes and we want the Z size to match the one of each container:; TGeoVolume *container1 = gGeoManager->MakeBox(""C1"",imed,10,10,30);; TGeoVolume *container2 = gGeoManager->MakeBox(""C2"",imed,10,10,20);; TGeoVolume *pvol = gGeoManager->MakeBox(""PVOL"",jmed,3,3,-1);; container1->AddNode(pvol,1);; container2->AddNode(pvol,1);; Note that the third parameter of PVOL is negative, which does not make sense as half-length on Z. This is interpreted as: when positioned, create a box replacing all invalid parameters with the corresponding dimensions of the container. This is also internally handled by the TGeoVolumeMulti class, which does not need to be instantiated by users.; 18.4.2.9 Dividing Volumes; Volumes can be divided according a pattern. The simplest division can be done along one axis that can be: X,Y,Z,Phi,Rxy or Rxyz. Let’s take a simple case: we would like to divide a box in N equal slices along X coordinate, representing a new volume family. Supposing we already have created the initial box, this can be done like:; TGeoVolume *slicex = box->Divide(""SLICEX"",1,N);; Here SLICEX is the name of the new family representing all slices and 1 is the slicing axis. The meaning of the axis index is the following: for all volumes having shapes like box, trd1, trd2, trap, gtraorpara -1, 2, 3 mean X, Y, Z; for tube, tubs, cone, cons -1 means Rxy, 2 means phi and 3 means Z; for pcon and pgon - 2 means phi and 3 means Z; for spheres 1 means Rand 2 means phi.; In fact, the division operation has the same effect as positioning volumes in a given order inside the divided container - the advantage being that the navigation in such a structure is much faster. When a volume is divided, a volume family corresponding to the slices is created. In case all slices can be represented by a single shape, only one volume is added to the family and positioned N times inside the divided volum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:954201,simpl,simple,954201,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"ainer::HandleCrossing ; (; Event_t * ; ev). inlineoverridevirtual . Reimplemented from TGCompositeFrame.; Definition at line 247 of file TRootCanvas.cxx. ◆ HandleDoubleClick(). Bool_t TRootContainer::HandleDoubleClick ; (; Event_t * ; ev). inlineoverridevirtual . Reimplemented from TGCompositeFrame.; Definition at line 236 of file TRootCanvas.cxx. ◆ HandleExpose(). Bool_t TRootContainer::HandleExpose ; (; Event_t * ; ev). inlineoverridevirtual . Reimplemented from TGWindow.; Definition at line 245 of file TRootCanvas.cxx. ◆ HandleKey(). Bool_t TRootContainer::HandleKey ; (; Event_t * ; ev). inlineoverridevirtual . Reimplemented from TGCompositeFrame.; Definition at line 241 of file TRootCanvas.cxx. ◆ HandleMotion(). Bool_t TRootContainer::HandleMotion ; (; Event_t * ; ev). inlineoverridevirtual . Reimplemented from TGCompositeFrame.; Definition at line 243 of file TRootCanvas.cxx. ◆ SavePrimitive(). void TRootContainer::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; = """" . ). overridevirtual . Save a canvas container as a C++ statement(s) on output stream out. ; Reimplemented from TGCompositeFrame.; Definition at line 2093 of file TRootCanvas.cxx. ◆ SetEditable(). void TRootContainer::SetEditable ; (; Bool_t ; on). inlineoverridevirtual . Switch ON/OFF edit mode. ; If edit mode is ON it is possible:. embed other ROOT GUI application (a la ActiveX). For example: TGMainFrame *m = new TGMainFrame(gClient->GetRoot(), 500, 500); m->SetEditable(); gSystem->Load(""$ROOTSYS/test/Aclock""); // load Aclock demo Aclock a; gROOT->Macro(""$ROOTSYS/tutorials/gui/guitest.C""); m->SetEditable(0); m->MapWindow(); ; Reimplemented from TGCompositeFrame.; Definition at line 250 of file TRootCanvas.cxx. Member Data Documentation. ◆ fCanvas. TRootCanvas* TRootContainer::fCanvas. private . Definition at line 231 of file TRootCanvas.cxx. gui/gui/src/TRootCanvas.cxx. TRootContainer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootContainer.html:32962,Guid,Guide,32962,doc/master/classTRootContainer.html,https://root.cern,https://root.cern/doc/master/classTRootContainer.html,1,['Guid'],['Guide']
Usability,"ainerKey (Event_t *ev);  Handle keyboard events in the canvas container. ;  ; Bool_t HandleContainerMotion (Event_t *ev);  Handle mouse motion event in the canvas container. ;  ; Bool_t HandleDNDDrop (TDNDData *data) override;  Handle drop events. ;  ; Atom_t HandleDNDEnter (Atom_t *typelist) override;  Handle drag enter events. ;  ; Bool_t HandleDNDLeave () override;  Handle drag leave events. ;  ; Atom_t HandleDNDPosition (Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot) override;  Handle dragging position events. ;  ; TRootCanvas & operator= (const TRootCanvas &)=delete;  . Private Attributes; Bool_t fAutoFit;  when true canvas container keeps same size as canvas ;  ; Int_t fButton;  currently pressed button ;  ; TRootContainer * fCanvasContainer;  container in canvas widget ;  ; Int_t fCanvasID;  index in fWindows array of TGX11 ;  ; TGLayoutHints * fCanvasLayout;  layout for canvas widget ;  ; TGCanvas * fCanvasWindow;  canvas widget ;  ; TGLayoutHints * fDockLayout;  layout hints for dockable frame widget ;  ; TGPopupMenu * fEditClearMenu;  clear cascade submenu ;  ; TGPopupMenu * fEditMenu;  edit menu ;  ; TVirtualPadEditor * fEditor;  pointer to currently loaded pad editor ;  ; TGCompositeFrame * fEditorFrame;  side frame for current pad editor ;  ; TGLayoutHints * fEditorLayout;  layout for editor frame ;  ; Bool_t fEmbedded;  true if embedded in any other frame (e.g. in the browser) ;  ; TGPopupMenu * fFileMenu;  file menu ;  ; TGPopupMenu * fFileSaveMenu;  save cascade submenu ;  ; TGPopupMenu * fHelpMenu;  help menu ;  ; TGHorizontal3DLine * fHorizontal1;  toolbar separator ;  ; TGLayoutHints * fHorizontal1Layout;  layout hints for separator ;  ; const TGPicture * fIconPic;  icon picture ;  ; TGCompositeFrame * fMainFrame;  main frame containing canvas and side frame ;  ; TGLayoutHints * fMainFrameLayout;  layout for main frame ;  ; TGMenuBar * fMenuBar;  menubar ;  ; TGLayoutHints * fMenuBarHelpLayout;  layout hint for help menu in menubar ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootCanvas.html:32505,clear,clear,32505,doc/master/classTRootCanvas.html,https://root.cern,https://root.cern/doc/master/classTRootCanvas.html,1,['clear'],['clear']
Usability,"ainterinlinevirtual; SetNmeshPoints(Int_t npoints) overrideTGeoPaintervirtual; SetNsegments(Int_t nseg=20) overrideTGeoPaintervirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetPainter(const TVirtualGeoPainter *painter)TVirtualGeoPainterstatic; SetRaytracing(Bool_t flag=kTRUE) overrideTGeoPainterinlinevirtual; SetTopVisible(Bool_t vis=kTRUE) overrideTGeoPaintervirtual; SetTopVolume(TGeoVolume *vol) overrideTGeoPainterinlinevirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetVisLevel(Int_t level=3) overrideTGeoPaintervirtual; SetVisOption(Int_t option=0) overrideTGeoPaintervirtual; ShapeDistancetoPrimitive(const TGeoShape *shape, Int_t numpoints, Int_t px, Int_t py) const overrideTGeoPaintervirtual; Streamer(TBuffer &) overrideTVirtualGeoPaintervirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TVirtualGeoPainterinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; Test(Int_t npoints, Option_t *option) overrideTGeoPaintervirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TestOverlaps(const char *path) overrideTGeoPaintervirtual; TestVoxels(TGeoVolume *vol) overrideTGeoPaintervirtual; TGeoPainter(TGeoManager *manager)TGeoPainter; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TVirtualGeoPainter(TGeoManager *manager)TVirtualGeoPainter; UnbombTranslation(const Double_t *tr, Double_t *bombtr) overrideTGeoPaintervirtual; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Weight(Double_t precision, Option_t *option=""v"") overrideTGeoPaintervirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TGeoPainter() overrideTGeoPainter; ~TObject()TObjectvirtual; ~TVirtualGeoPainter() overrideTVirtualGeoPainter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter-members.html:13651,Guid,Guide,13651,doc/master/classTGeoPainter-members.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter-members.html,1,['Guid'],['Guide']
Usability,"aisevirtual void Raise()Definition TApplication.h:133; TApplication::fArgcInt_t fArgcDefinition TApplication.h:58; TApplication::fNoLogBool_t fNoLogDefinition TApplication.h:63; TApplication::fNoLogoBool_t fNoLogoDefinition TApplication.h:64; TApplication::GetSetupTString GetSetup()It gets the ROOT installation setup as TString.Definition TApplication.cxx:967; TApplication::HandleIdleTimervirtual void HandleIdleTimer()Handle idle timeout.Definition TApplication.cxx:577; TApplication::WorkingDirectoryconst char * WorkingDirectory() constDefinition TApplication.h:147; TApplication::QuitOptBool_t QuitOpt() constDefinition TApplication.h:145; TApplication::fSigHandlerTSignalHandler * fSigHandlerDefinition TApplication.h:70; TApplication::ArgcInt_t Argc() constDefinition TApplication.h:140; TApplication::ProcessRemotevirtual Longptr_t ProcessRemote(const char *line, Int_t *error=nullptr)Process the content of a line starting with "".R"" (already stripped-off) The format is.Definition TApplication.cxx:1485; TApplication::fAppRemoteTApplication * fAppRemoteDefinition TApplication.h:80; TApplication::Showvirtual void Show()Definition TApplication.h:129; TApplication::SetSignalHandlervoid SetSignalHandler(TSignalHandler *sh)Definition TApplication.h:92; TApplication::fArgvchar ** fArgvDefinition TApplication.h:59; TListA doubly linked list.Definition TList.h:38; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjectMother of all ROOT objects.Definition TObject.h:41; TQObjectThis is the ROOT implementation of the Qt object communication mechanism (see also http://www....Definition TQObject.h:48; TSignalHandlerDefinition TSysEvtHandler.h:127; TStringBasic string class.Definition TString.h:139; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; bool; int; lineTLine * lineDefinition entrylistblock_figure1.C:235. corebaseincTApplication.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8h_source.html:21229,Guid,Guide,21229,doc/master/TApplication_8h_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8h_source.html,1,['Guid'],['Guide']
Usability,"aits::CallableTraits<std::decay_t<F>>::ret_type> ; auto ROOT::RDF::Not (F &&f) -> decltype(RDFInternal::NotHelper(Args(), std::forward< F >(f)));  Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ;  ; template<typename... ArgTypes, typename F > ; std::function< bool(ArgTypes...)> ROOT::Internal::RDF::NotHelper (ROOT::TypeTraits::TypeList< ArgTypes... >, F &&f);  ; template<typename... ArgTypes, typename Ret , typename... Args> ; std::function< bool(ArgTypes...)> ROOT::Internal::RDF::NotHelper (ROOT::TypeTraits::TypeList< ArgTypes... >, Ret(*f)(Args...));  ; template<std::size_t N, typename T , typename F > ; auto ROOT::Internal::RDF::PassAsVec (F &&f) -> PassAsVecHelper< std::make_index_sequence< N >, T, F >;  ; template<std::size_t N, typename T , typename F > ; auto ROOT::RDF::PassAsVec (F &&f) -> RDFInternal::PassAsVecHelper< std::make_index_sequence< N >, T, F >;  PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ;  ; unsigned int ROOT::RDF::RunGraphs (std::vector< RResultHandle > handles);  Trigger the event loop of multiple RDataFrames concurrently. ;  ; template<typename NodeType > ; std::string ROOT::RDF::SaveGraph (NodeType node);  Create a graphviz representation of the dataframe computation graph, return it as a string. ;  ; template<typename NodeType > ; void ROOT::RDF::SaveGraph (NodeType node, const std::string &outputFile);  Create a graphviz representation of the dataframe computation graph, write it to the specified file. ;  ; template<typename T > ; RResultMap< T > ROOT::RDF::Experimental::VariationsFor (RResultPtr< T > resPtr);  Produce all required systematic variations for the given result. ;  ; SnapshotPtr_t ROOT::RDF::Experimental::VariationsFor (SnapshotPtr_t resPtr);  . treedataframeincROOTRDFHelpers.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8hxx.html:3889,Guid,Guide,3889,doc/master/RDFHelpers_8hxx.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8hxx.html,1,['Guid'],['Guide']
Usability,"ake a dummy dataset pdf 'model' and import it in the workspace; std::unique_ptr<RooDataSet> data{w->pdf(""model"")->generate(*w->var(""x""), 1000)};; w->import(*data, Rename(""data""));; ; // Construct a KEYS pdf passing a dataset name and an enum type defining the; // mirroring strategy; w->factory(""KeysPdf::k(x,data,NoMirror,0.2)"");; ; // Print workspace contents; w->Print();; }; RooAddPdf.h; RooChebychev.h; RooDataSet.h; RooGaussian.h; RooPlot.h; RooRealVar.h; RooWorkspace.h; TAxis.h; TCanvas.h; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; RooWorkspacePersistable container for RooFit projects.Definition RooWorkspace.h:43; RooFit::RenameRooCmdArg Rename(const char *suffix)Definition RooGlobalFunc.cxx:1055; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf511_wsfactory_basicDefinition rf511_wsfactory_basic.py:1; ; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing dataset modelData; [#1] INFO:ObjectHandling -- RooWorkSpace::import(w) changing name of dataset from modelData to data; ; RooWorkspace(w) w contents; ; variables; ---------; (a0,a1,bkgfrac,mean,sig1frac,x); ; p.d.f.s; -------; RooChebychev::bkg[ x=x coefList=(a0,a1) ] = 0.8; RooKeysPdf::k[ x=x ] = 0.0210129; RooAddPdf::model[ bkgfrac * bkg + [%] * sig ] = 0.4/1; RooAddPdf::sig[ sig1frac * sig1 + [%] * sig2 ] = 7.45331e-07/1; RooGaussian::sig1[ x=x mean=mean sigma=0.5 ] = 1.92875e-22; RooGaussian::sig2[ x=x mean=mean sigma=1 ] = 3.72665e-06; ; datasets; --------; RooDataSet::data(x); ; DateJuly 2009 ; AuthorWouter Verkerke ; Definition in file rf511_wsfactory_basic.C. tutorialsroofitrf511_wsfactory_basic.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf511__wsfactory__basic_8C.html:4388,Guid,Guide,4388,doc/master/rf511__wsfactory__basic_8C.html,https://root.cern,https://root.cern/doc/master/rf511__wsfactory__basic_8C.html,1,['Guid'],['Guide']
Usability,"ake into account _all_ events we use `OnPartialResultSlot`: when Implicit Multi-Threading is enabled, in fact,; // `OnPartialResult` invokes the callback only in one of the worker threads, and always returns that worker threads'; // partial result. This is useful because it means we don't have to worry about concurrent execution and; // thread-safety of the callbacks if we are happy with just one threads' partial result.; // `OnPartialResultSlot`, on the other hand, invokes the callback in each one of the worker threads, every time a; // thread finishes processing a batch of `everyN` events. This is what we want for the progress bar, but we need to; // take care that two threads will not print to terminal at the same time: we need a std::mutex for synchronization.; std::string progressBar;; std::mutex barMutex; // Only one thread at a time can lock a mutex. Let's use this to avoid concurrent printing.; // Magic numbers that yield good progress bars for nSlots = 1,2,4,8; const auto everyN = nSlots == 8 ? 1000 : 100ull * nSlots;; const auto barWidth = nEvents / everyN;; h.OnPartialResultSlot(everyN, [&barWidth, &progressBar, &barMutex](unsigned int /*slot*/, TH1D & /*partialHist*/) {; std::lock_guard<std::mutex> l(barMutex); // lock_guard locks the mutex at construction, releases it at destruction; progressBar.push_back('#');; // re-print the line with the progress bar; std::cout << ""\r["" << std::left << std::setw(barWidth) << progressBar << ']' << std::flush;; });; ; // ## Running the analysis; // So far we told RDataFrame what we want to happen during the event-loop, but we have not actually run any of those; // actions: the TBrowser is still empty, the progress bar has not been printed even once, and we haven't produced; // a single data-point!; // As usual with RDataFrame, the event-loop is triggered by accessing the contents of a TResultProxy for the first; // time. Let's run!; std::cout << ""Analysis running..."" << std::endl;; h->Draw(); // the final, complete res",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df013__InspectAnalysis_8C.html:5176,progress bar,progress bars,5176,doc/master/df013__InspectAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html,1,['progress bar'],['progress bars']
Usability,"akeCloneTGeoMatrix * MakeClone() const overrideMake a clone of this matrix.Definition TGeoMatrix.cxx:1903; TGeoCombiTrans::InverseTGeoHMatrix Inverse() const overrideReturn a temporary inverse of this.Definition TGeoMatrix.cxx:1871; TGeoCombiTrans::RotateYvoid RotateY(Double_t angle) overrideRotate about Y axis with angle expressed in degrees.Definition TGeoMatrix.cxx:1972; TGeoCombiTrans::fTranslationDouble_t fTranslation[3]Definition TGeoMatrix.h:319; TGeoCombiTrans::fRotationTGeoRotation * fRotationDefinition TGeoMatrix.h:320; TGeoCombiTrans::RotateXvoid RotateX(Double_t angle) overrideRotate about X axis with angle expressed in degrees.Definition TGeoMatrix.cxx:1935; TGeoCombiTrans::SetTranslationvoid SetTranslation(const TGeoTranslation &tr)copy the translation componentDefinition TGeoMatrix.cxx:2168; TGeoCombiTrans::SetRotationvoid SetRotation(const TGeoRotation &other)Copy the rotation from another one.Definition TGeoMatrix.cxx:2147; TGeoCombiTrans::Clearvoid Clear(Option_t *option="""") overrideReset translation/rotation to identity.Definition TGeoMatrix.cxx:1852; TGeoCombiTrans::operator=TGeoCombiTrans & operator=(const TGeoCombiTrans &other)Definition TGeoMatrix.h:330; TGeoCombiTrans::ReflectYvoid ReflectY(Bool_t leftside, Bool_t rotonly=kFALSE) overrideMultiply by a reflection respect to ZX.Definition TGeoMatrix.cxx:2065; TGeoCombiTrans::~TGeoCombiTrans~TGeoCombiTrans() overridedestructorDefinition TGeoMatrix.cxx:1841; TGeoCombiTrans::operator*TGeoCombiTrans operator*(const TGeoMatrix &other) constDefinition TGeoMatrix.cxx:1831; TGeoCombiTrans::RotateZvoid RotateZ(Double_t angle) overrideRotate about Z axis with angle expressed in degrees.Definition TGeoMatrix.cxx:2009; TGeoCombiTrans::GetRotationMatrixconst Double_t * GetRotationMatrix() const overrideget the rotation arrayDefinition TGeoMatrix.cxx:2213; TGeoCombiTrans::ReflectZvoid ReflectZ(Bool_t leftside, Bool_t rotonly=kFALSE) overrideMultiply by a reflection respect to XY.Definition TGeoMatrix.cxx:208",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:105149,Clear,Clearvoid,105149,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"akes to make a pair of new/delete calls is about 7 s (10-6). If we multiply the number of tracks by 7 s, (1,000,000,000 * 7 * 10-6) we calculate that the time allocating and freeing memory is about 2 hours. This is the chunk of time saved when a TClonesArray is used rather than a TObjArray. If you do not want to wait 2 hours for your tracks (or equivalent objects), be sure to use a TClonesArray for same-class objects arrays. Branches with TClonesArrays use the same method (TTree::Branch) as any other object described above. If splitting is specified the objects in the TClonesArray are split, not the TClonesArray itself.; 12.10.4 Identical Branch Names; When a top-level object (say event), has two data members of the same class the sub branches end up with identical names. To distinguish the sub branch we must associate them with the master branch by including a “.” (a dot) at the end of the master branch name. This will force the name of the sub branch to be master.sub branch instead of simply sub branch. For example, a tree has two branches Trigger and MuonTrigger, each containing an object of the same class (Trigger). To identify uniquely the sub branches we add the dot:; tree->Branch(""Trigger."",""Trigger"",&b1,8000,1);; tree->Branch(""MuonTrigger."",""Trigger"",&b2,8000,1);; If Trigger has three members, T1, T2, T3, the two instructions above will generate sub branches called: Trigger.T1, Trigger.T2, Trigger.T3, MuonTrigger.T1, MuonTrigger.T2, andMuonTrigger.T3.; 12.11 Adding a Branch with a Folder; Use the syntax below to add a branch from a folder:; tree->Branch(""/aFolder"");; This method creates one branch for each element in the folder. The method returns the total number of branches created.; 12.12 Adding a Branch with a Collection; This Branch method creates one branch for each element in the collection.; tree->Branch(*aCollection, 8000, 99);; // Int_t TTree::Branch(TCollection *list, Int_t bufsize,; // Int_t splitlevel, const char *name); The method returns the t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:548466,simpl,simply,548466,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simply']
Usability,"al (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t WriteBuffer (TBuffer &b, void *pointer, const char *info="""");  Function called by the Streamer functions to serialize object at p to buffer b. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TClass * IsA () const override;  ; TDictionary & operator= (const TDictionary &other);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:25905,Clear,Clear,25905,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,2,['Clear'],['Clear']
Usability,"al . Check overlaps for the top volume of the geometry, within a limit OVLP. ; Implements TVirtualGeoPainter.; Definition at line 234 of file TGeoPainter.cxx. ◆ CheckPoint(). void TGeoPainter::CheckPoint ; (; Double_t ; x = 0, . Double_t ; y = 0, . Double_t ; z = 0, . Option_t * ; option = """", . Double_t ; safety = 0. . ). overridevirtual . Check current point in the geometry. ; Implements TVirtualGeoPainter.; Definition at line 242 of file TGeoPainter.cxx. ◆ CheckShape(). void TGeoPainter::CheckShape ; (; TGeoShape * ; shape, . Int_t ; testNo, . Int_t ; nsamples, . Option_t * ; option . ). overridevirtual . Test for shape navigation methods. ; Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate directions randomly in cos(theta). Compute DistFromInside and move the point with bigger distance. Compute DistFromOutside back from new point. Plot d-(d1+d2) . Implements TVirtualGeoPainter.; Definition at line 254 of file TGeoPainter.cxx. ◆ ClearVisibleVolumes(). void TGeoPainter::ClearVisibleVolumes ; (; ). protected . Clear the list of visible volumes reset the kVisOnScreen bit for volumes previously in the list. ; Definition at line 263 of file TGeoPainter.cxx. ◆ CountNodes(). Int_t TGeoPainter::CountNodes ; (; TGeoVolume * ; vol, . Int_t ; level . ); const. Count number of visible nodes down to a given level. ; Definition at line 582 of file TGeoPainter.cxx. ◆ CountVisibleNodes(). Int_t TGeoPainter::CountVisibleNodes ; (; ). overridevirtual . Count total number of visible nodes. ; Implements TVirtualGeoPainter.; Definition at line 636 of file TGeoPainter.cxx. ◆ DefaultAngles(). void TGeoPainter::DefaultAngles ; (; ). overridevirtual . Set default angles for the current view. ; Implements TVirtualGeoPainter.; Definition at line 555 of file TGeoPainter.cxx. ◆ DefaultColors(). void TGeoPainter::DefaultColors ; (; ). overridevirtual . Set default volume colors according to tracking media. ; Implements TVirtualGeoPainter.; Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:25528,Clear,ClearVisibleVolumes,25528,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,1,['Clear'],['ClearVisibleVolumes']
Usability,"al . Definition at line 88 of file TVirtualCollectionProxy.h. Member Function Documentation. ◆ Allocate(). virtual void * TVirtualCollectionProxy::Allocate ; (; UInt_t ; n, . Bool_t ; forceDelete . ). pure virtual . Allocates space for storing at least n elements. ; This function returns a pointer to the actual object on which insertions should take place. For associative collections, this function returns a pointer to a temporary buffer known as the staging area. If the insertion happened in a staging area (i.e. the returned pointer != proxied object), Commit() should be called on the value returned by this function. ; Implemented in TEmulatedCollectionProxy, and TGenCollectionProxy. ◆ At(). virtual void * TVirtualCollectionProxy::At ; (; UInt_t ; idx). pure virtual . Return the address of the value at index idx ; Implemented in TEmulatedCollectionProxy, TEmulatedMapProxy, TGenCollectionProxy, TGenVectorProxy, TGenVectorBoolProxy, TGenBitsetProxy, TGenListProxy, and TGenSetProxy. ◆ Clear(). virtual void TVirtualCollectionProxy::Clear ; (; const char * ; opt = """"). pure virtual . Clear the container. ; Implemented in TEmulatedCollectionProxy, and TGenCollectionProxy. ◆ Commit(). virtual void TVirtualCollectionProxy::Commit ; (; void * ; ). pure virtual . Commits pending elements in a staging area (see Allocate() for more information). ; Implemented in TEmulatedCollectionProxy, and TGenCollectionProxy. ◆ DeleteArray(). virtual void TVirtualCollectionProxy::DeleteArray ; (; void * ; p, . Bool_t ; dtorOnly = kFALSE . ); const. inlinevirtual . Execute the container array destructor. ; Reimplemented in TEmulatedCollectionProxy.; Definition at line 151 of file TVirtualCollectionProxy.h. ◆ Destructor(). virtual void TVirtualCollectionProxy::Destructor ; (; void * ; p, . Bool_t ; dtorOnly = kFALSE . ); const. inlinevirtual . Execute the container destructor. ; Reimplemented in TEmulatedCollectionProxy.; Definition at line 144 of file TVirtualCollectionProxy.h. ◆ Generate(). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualCollectionProxy.html:12082,Clear,Clear,12082,doc/master/classTVirtualCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionProxy.html,1,['Clear'],['Clear']
Usability,"al . Implemented in TPad, TBox, TCurlyArc, TCurlyLine, TEllipse, TLine, TMarker, and TText. ◆ SetBBoxCenterX(). virtual void TAttBBox2D::SetBBoxCenterX ; (; const Int_t ; x). pure virtual . Implemented in TPad, TBox, TCurlyArc, TCurlyLine, TEllipse, TLine, TMarker, and TText. ◆ SetBBoxCenterY(). virtual void TAttBBox2D::SetBBoxCenterY ; (; const Int_t ; y). pure virtual . Implemented in TPad, TBox, TCurlyArc, TCurlyLine, TEllipse, TLine, TMarker, and TText. ◆ SetBBoxX1(). virtual void TAttBBox2D::SetBBoxX1 ; (; const Int_t ; x). pure virtual . Implemented in TPad, TBox, TCurlyArc, TCurlyLine, TEllipse, TLine, TMarker, and TText. ◆ SetBBoxX2(). virtual void TAttBBox2D::SetBBoxX2 ; (; const Int_t ; x). pure virtual . Implemented in TPad, TBox, TCurlyArc, TCurlyLine, TEllipse, TLine, TMarker, and TText. ◆ SetBBoxY1(). virtual void TAttBBox2D::SetBBoxY1 ; (; const Int_t ; y). pure virtual . Implemented in TPad, TBox, TCurlyArc, TCurlyLine, TEllipse, TLine, TMarker, and TText. ◆ SetBBoxY2(). virtual void TAttBBox2D::SetBBoxY2 ; (; const Int_t ; y). pure virtual . Implemented in TPad, TBox, TCurlyArc, TCurlyLine, TEllipse, TLine, TMarker, and TText. ◆ Streamer(). virtual void TAttBBox2D::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TAnnotation, TButton, TCanvas, TDialogCanvas, TGroupButton, TInspectCanvas, TPad, TPaveClass, TSlider, TSliderBox, TArc, TArrow, TBox, TCrown, TCurlyArc, TCurlyLine, TDiamond, TEllipse, TFrame, TGaxis, TLatex, TLegend, TLine, TLink, TMarker, TMathText, TPave, TPaveLabel, TPaveStats, TPavesText, TPaveText, TText, TWbox, and TPaletteAxis. ◆ StreamerNVirtual(). void TAttBBox2D::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 33 of file TAttBBox2D.h. The documentation for this class was generated from the following files:; core/base/inc/TAttBBox2D.h; core/base/src/TAttBBox2D.cxx. TAttBBox2D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttBBox2D.html:5220,Guid,Guide,5220,doc/master/classTAttBBox2D.html,https://root.cern,https://root.cern/doc/master/classTAttBBox2D.html,1,['Guid'],['Guide']
Usability,"al . Paint this track with its current attributes. ; Implements TVirtualGeoTrack.; Definition at line 529 of file TGeoTrack.cxx. ◆ Print(). void TGeoTrack::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print some info about the track. ; Reimplemented from TObject.; Definition at line 659 of file TGeoTrack.cxx. ◆ ResetTrack(). void TGeoTrack::ResetTrack ; (; ). overridevirtual . Reset data for this track. ; Implements TVirtualGeoTrack.; Definition at line 731 of file TGeoTrack.cxx. ◆ SearchPoint(). Int_t TGeoTrack::SearchPoint ; (; Double_t ; time, . Int_t ; istart = 0 . ); const. Search index of track point having the closest time tag smaller than TIME. ; Optional start index can be provided. ; Definition at line 693 of file TGeoTrack.cxx. ◆ SetBits(). void TGeoTrack::SetBits ; (; Bool_t ; is_default = kTRUE, . Bool_t ; is_onelevel = kFALSE, . Bool_t ; is_all = kFALSE, . Bool_t ; is_type = kFALSE . ). Set drawing bits for this track. ; Definition at line 715 of file TGeoTrack.cxx. ◆ Size(). Int_t TGeoTrack::Size ; (; Int_t & ; imin, . Int_t & ; imax . ). Return the number of points within the time interval specified by TGeoManager class and the corresponding indices. ; Definition at line 675 of file TGeoTrack.cxx. ◆ Sizeof3D(). void TGeoTrack::Sizeof3D ; (; ); const. virtual . Returns 3D size for the track. ; Definition at line 726 of file TGeoTrack.cxx. Member Data Documentation. ◆ fNpoints. Int_t TGeoTrack::fNpoints. private . Definition at line 38 of file TGeoTrack.h. ◆ fPoints. Double_t* TGeoTrack::fPoints. private . Definition at line 39 of file TGeoTrack.h. ◆ fPointsSize. Int_t TGeoTrack::fPointsSize. private . Definition at line 37 of file TGeoTrack.h. Libraries for TGeoTrack:. [legend]; The documentation for this class was generated from the following files:; geom/geompainter/inc/TGeoTrack.h; geom/geompainter/src/TGeoTrack.cxx. TGeoTrack. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrack.html:28926,Guid,Guide,28926,doc/master/classTGeoTrack.html,https://root.cern,https://root.cern/doc/master/classTGeoTrack.html,1,['Guid'],['Guide']
Usability,"al . Reimplemented in RooCachedReal, and RooNumRunningInt.; Definition at line 93 of file RooAbsCachedReal.h. ◆ selfNormalized(). virtual bool RooAbsCachedReal::selfNormalized ; (; ); const. inlinevirtual . Definition at line 32 of file RooAbsCachedReal.h. ◆ setInterpolationOrder(). void RooAbsCachedReal::setInterpolationOrder ; (; Int_t ; order). Set interpolation order of RooHistFunct representing cache histogram. ; Definition at line 254 of file RooAbsCachedReal.cxx. ◆ Streamer(). void RooAbsCachedReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooCachedReal, RooNumCdf, and RooNumRunningInt. ◆ StreamerNVirtual(). void RooAbsCachedReal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 120 of file RooAbsCachedReal.h. Friends And Related Symbol Documentation. ◆ FuncCacheElem. friend class FuncCacheElem. friend . Definition at line 95 of file RooAbsCachedReal.h. Member Data Documentation. ◆ _anaIntMap. std::map<Int_t,std::pair<const RooArgSet*,const RooArgSet*> > RooAbsCachedReal::_anaIntMap. mutableprotected . ! Map for analytical integration codes ; Definition at line 113 of file RooAbsCachedReal.h. ◆ _cacheMgr. RooObjCacheManager RooAbsCachedReal::_cacheMgr. mutableprotected . ! The cache manager ; Definition at line 106 of file RooAbsCachedReal.h. ◆ _disableCache. bool RooAbsCachedReal::_disableCache. private . Definition at line 118 of file RooAbsCachedReal.h. ◆ _ipOrder. Int_t RooAbsCachedReal::_ipOrder. protected . Interpolation order for cache histograms. ; Definition at line 109 of file RooAbsCachedReal.h. Libraries for RooAbsCachedReal:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsCachedReal.h; roofit/roofitcore/src/RooAbsCachedReal.cxx. RooAbsCachedReal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedReal.html:69435,Guid,Guide,69435,doc/master/classRooAbsCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedReal.html,1,['Guid'],['Guide']
Usability,"al . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 53 of file RooBernstein.h. ◆ selectNormalizationRange(). void RooBernstein::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overridevirtual . Force use of a given normalisation range. ; Needed for functions or PDFs (e.g. RooAddPdf) whose shape depends on the choice of normalisation. ; Reimplemented from RooAbsReal.; Definition at line 61 of file RooBernstein.cxx. ◆ Streamer(). void RooBernstein::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooBernstein::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 53 of file RooBernstein.h. ◆ translate(). void RooBernstein::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 84 of file RooBernstein.cxx. ◆ xmax(). double RooBernstein::xmax ; (; ); const. inlineprivate . Definition at line 42 of file RooBernstein.h. ◆ xmin(). double RooBernstein::xmin ; (; ); const. inlineprivate . Definition at line 41 of file RooBernstein.h. Member Data Documentation. ◆ _buffer. std::vector<double> RooBernstein::_buffer. mutableprivate . ! ; Definition at line 47 of file RooBernstein.h. ◆ _coefList. RooListProxy R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBernstein.html:79340,simpl,simple,79340,doc/master/classRooBernstein.html,https://root.cern,https://root.cern/doc/master/classRooBernstein.html,1,['simpl'],['simple']
Usability,"al . ReturnsTClass describing current object ; Reimplemented from TBasket.; Definition at line 57 of file TBasketSQL.h. ◆ operator=(). TBasketSQL & TBasketSQL::operator= ; (; const TBasketSQL & ; ). private . ◆ PrepareBasket(). void TBasketSQL::PrepareBasket ; (; Long64_t ; entry). overridevirtual . Prepare the basket for the next entry. ; Reimplemented from TBasket.; Definition at line 115 of file TBasketSQL.cxx. ◆ ReadBasketBuffers(). Int_t TBasketSQL::ReadBasketBuffers ; (; Long64_t ; pos, . Int_t ; len, . TFile * ; file . ). virtual . See TBasket::ReadBasketBuffers. This is not implemented in TBasketSQL. ; Definition at line 134 of file TBasketSQL.cxx. ◆ ReadBasketBytes(). Int_t TBasketSQL::ReadBasketBytes ; (; Long64_t ; pos, . TFile * ; file . ). virtual . See TBasket::ReadBasketBytes. This is not implemented in TBasketSQL. ; Definition at line 125 of file TBasketSQL.cxx. ◆ Streamer(). void TBasketSQL::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TBasket. ◆ StreamerNVirtual(). void TBasketSQL::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file TBasketSQL.h. ◆ Update(). void TBasketSQL::Update ; (; Int_t ; offset, . Int_t ; skipped . ). overridevirtual . See TBasket::Update. ; Reimplemented from TBasket.; Definition at line 143 of file TBasketSQL.cxx. Member Data Documentation. ◆ fInsertQuery. TString* TBasketSQL::fInsertQuery. protected . Definition at line 40 of file TBasketSQL.h. ◆ fResultPtr. TSQLResult** TBasketSQL::fResultPtr. protected . Definition at line 38 of file TBasketSQL.h. ◆ fRowPtr. TSQLRow** TBasketSQL::fRowPtr. protected . Definition at line 39 of file TBasketSQL.h. Libraries for TBasketSQL:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBasketSQL.h; tree/tree/src/TBasketSQL.cxx. TBasketSQL. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBasketSQL.html:24929,Guid,Guide,24929,doc/master/classTBasketSQL.html,https://root.cern,https://root.cern/doc/master/classTBasketSQL.html,1,['Guid'],['Guide']
Usability,"al . initialize the workspace creating the GSL pointer if it is not there ; Implemented in ROOT::Math::GSLVegasIntegrationWorkspace, ROOT::Math::GSLMiserIntegrationWorkspace, and ROOT::Math::GSLPlainIntegrationWorkspace. ◆ NDim(). virtual size_t ROOT::Math::GSLMCIntegrationWorkspace::NDim ; (; ); const. inlinevirtual . Reimplemented in ROOT::Math::GSLVegasIntegrationWorkspace, ROOT::Math::GSLMiserIntegrationWorkspace, and ROOT::Math::GSLPlainIntegrationWorkspace.; Definition at line 59 of file GSLMCIntegrationWorkspace.h. ◆ Options(). virtual std::unique_ptr< ROOT::Math::IOptions > ROOT::Math::GSLMCIntegrationWorkspace::Options ; (; ); const. pure virtual . retrieve option pointer corresponding to parameters create a new object to be managed by the user ; Implemented in ROOT::Math::GSLVegasIntegrationWorkspace, ROOT::Math::GSLMiserIntegrationWorkspace, and ROOT::Math::GSLPlainIntegrationWorkspace. ◆ ReInit(). virtual bool ROOT::Math::GSLMCIntegrationWorkspace::ReInit ; (; ). pure virtual . re-initialize an existing the workspace ; Implemented in ROOT::Math::GSLVegasIntegrationWorkspace, ROOT::Math::GSLMiserIntegrationWorkspace, and ROOT::Math::GSLPlainIntegrationWorkspace. ◆ SetOptions(). virtual void ROOT::Math::GSLMCIntegrationWorkspace::SetOptions ; (; const ROOT::Math::IOptions & ; ). pure virtual . set options ; Implemented in ROOT::Math::GSLPlainIntegrationWorkspace, ROOT::Math::GSLVegasIntegrationWorkspace, and ROOT::Math::GSLMiserIntegrationWorkspace. ◆ Type(). virtual MCIntegration::Type ROOT::Math::GSLMCIntegrationWorkspace::Type ; (; ); const. pure virtual . Implemented in ROOT::Math::GSLVegasIntegrationWorkspace, ROOT::Math::GSLMiserIntegrationWorkspace, and ROOT::Math::GSLPlainIntegrationWorkspace. The documentation for this class was generated from the following file:; math/mathmore/src/GSLMCIntegrationWorkspace.h. ROOTMathGSLMCIntegrationWorkspace. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrationWorkspace.html:4114,Guid,Guide,4114,doc/master/classROOT_1_1Math_1_1GSLMCIntegrationWorkspace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrationWorkspace.html,1,['Guid'],['Guide']
Usability,"al ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 293 of file TEveWindow.h. ◆ SwapWindow(). void TEveWindow::SwapWindow ; (; TEveWindow * ; w). Swap frames with the given window. ; Definition at line 737 of file TEveWindow.cxx. ◆ SwapWindows(). void TEveWindow::SwapWindows ; (; TEveWindow * ; w1, . TEveWindow * ; w2 . ). static . Swap windows w1 and w2. ; They are properly reparented in the eve hierarch as well. Layout is called on both frames. ; Definition at line 1027 of file TEveWindow.cxx. ◆ SwapWindowWithCurrent(). void TEveWindow::SwapWindowWithCurrent ; (; ). Swap frames with the current window. ; Definition at line 750 of file TEveWindow.cxx. ◆ TitleBarClicked(). void TEveWindow::TitleBarClicked ; (; ). Slot for clicking on the title-bar. ; The wish that this window becomes the current one is sent to the window-manager. ; Definition at line 958 of file TEveWindow.cxx. ◆ UndockWindow(). void TEveWindow::UndockWindow ; (; ). Undock the window - put it into a dedicated main-frame. ; Definition at line 768 of file TEveWindow.cxx. ◆ UndockWindowDestroySlot(). void TEveWindow::UndockWindowDestroySlot ; (; ). Undock the window - put it into a dedicated main-frame. ; The old window slot is destroyed. ; Definition at line 795 of file TEveWindow.cxx. Friends And Related Symbol Documentation. ◆ TEveWindowManager. friend class TEveWindowManager. friend . Definition at line 211 of file TEveWindow.h. Member Data Documentation. ◆ fEveFrame. TEveCompositeFrame* TEveWindow::fEveFrame. protected . Definition at line 218 of file TEveWindow.h. ◆ fgCurrentBackgroundColor. Pixel_t TEveWindow::fgCurrentBackgroundColor = 0x80A0C0. staticprotected . Definition at line 226 of file TEveWindow.h. ◆ fgMainFrameDefHeight. UInt_t TEveWindow::fgMainFrameDefHeight = 480. staticprotected . Definition at line 224 of file TEveWindow.h. ◆ fgMainFrameDefWidth. UInt_t TEveWindow::fgMainFrameDefWidth = 640. staticprotected . Definition at line 223 of file TEveWindow.h. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindow.html:45860,Undo,Undock,45860,doc/master/classTEveWindow.html,https://root.cern,https://root.cern/doc/master/classTEveWindow.html,1,['Undo'],['Undock']
Usability,"al ; (; double ; value, . const char * ;  . ). inlinevirtual . Set the current value of the object. ; The rangeName is ignored. Can be overridden by derived classes to e.g. check if the value fits in the given range. ; Reimplemented in RooErrorVar, RooLinearVar, and RooRealVar.; Definition at line 43 of file RooAbsRealLValue.h. ◆ setValFast(). virtual void RooAbsRealLValue::setValFast ; (; double ; value). inlineprotectedvirtual . Reimplemented in RooRealVar.; Definition at line 159 of file RooAbsRealLValue.h. ◆ Streamer(). void RooAbsRealLValue::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal.; Reimplemented in RooErrorVar, RooLinearVar, and RooRealVar. ◆ StreamerNVirtual(). void RooAbsRealLValue::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 164 of file RooAbsRealLValue.h. ◆ volume() [1/2]. double RooAbsRealLValue::volume ; (; const char * ; rangeName); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 53 of file RooAbsRealLValue.h. ◆ volume() [2/2]. virtual double RooAbsRealLValue::volume ; (; const RooAbsBinning & ; binning); const. inlinevirtual . Definition at line 63 of file RooAbsRealLValue.h. ◆ writeToStream(). void RooAbsRealLValue::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to given stream. ; Reimplemented from RooAbsReal.; Reimplemented in RooErrorVar, RooLinearVar, and RooRealVar.; Definition at line 177 of file RooAbsRealLValue.cxx. Libraries for RooAbsRealLValue:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsRealLValue.h; roofit/roofitcore/src/RooAbsRealLValue.cxx; /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/pyzdoc/_roofit.pyzdoc. RooAbsRealLValue. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsRealLValue.html:92398,Guid,Guide,92398,doc/master/classRooAbsRealLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html,1,['Guid'],['Guide']
Usability,"al CpuInfo_t::~CpuInfo_t ; (; ). inlinevirtual . Definition at line 173 of file TSystem.h. Member Function Documentation. ◆ Class(). static TClass * CpuInfo_t::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * CpuInfo_t::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t CpuInfo_t::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 174 of file TSystem.h. ◆ DeclFileName(). static const char * CpuInfo_t::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 174 of file TSystem.h. ◆ IsA(). virtual TClass * CpuInfo_t::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 174 of file TSystem.h. ◆ Streamer(). virtual void CpuInfo_t::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void CpuInfo_t::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 174 of file TSystem.h. Member Data Documentation. ◆ fIdle. Float_t CpuInfo_t::fIdle. Definition at line 170 of file TSystem.h. ◆ fLoad15m. Float_t CpuInfo_t::fLoad15m. Definition at line 166 of file TSystem.h. ◆ fLoad1m. Float_t CpuInfo_t::fLoad1m. Definition at line 164 of file TSystem.h. ◆ fLoad5m. Float_t CpuInfo_t::fLoad5m. Definition at line 165 of file TSystem.h. ◆ fSys. Float_t CpuInfo_t::fSys. Definition at line 168 of file TSystem.h. ◆ fTotal. Float_t CpuInfo_t::fTotal. Definition at line 169 of file TSystem.h. ◆ fUser. Float_t CpuInfo_t::fUser. Definition at line 167 of file TSystem.h. Collaboration diagram for CpuInfo_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/base/inc/TSystem.h. CpuInfo_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structCpuInfo__t.html:2959,Guid,Guide,2959,doc/master/structCpuInfo__t.html,https://root.cern,https://root.cern/doc/master/structCpuInfo__t.html,1,['Guid'],['Guide']
Usability,"al Int_t TConditionImp::Broadcast ; (; ). pure virtual . Implemented in TPosixCondition, and TWin32Condition. ◆ Class(). static TClass * TConditionImp::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TConditionImp::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TConditionImp::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 37 of file TConditionImp.h. ◆ DeclFileName(). static const char * TConditionImp::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 37 of file TConditionImp.h. ◆ IsA(). TClass * TConditionImp::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TPosixCondition, and TWin32Condition.; Definition at line 37 of file TConditionImp.h. ◆ Signal(). virtual Int_t TConditionImp::Signal ; (; ). pure virtual . Implemented in TPosixCondition, and TWin32Condition. ◆ Streamer(). void TConditionImp::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TPosixCondition, and TWin32Condition. ◆ StreamerNVirtual(). void TConditionImp::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 37 of file TConditionImp.h. ◆ TimedWait(). virtual Int_t TConditionImp::TimedWait ; (; ULong_t ; secs, . ULong_t ; nanoSecs = 0 . ). pure virtual . Implemented in TPosixCondition, and TWin32Condition. ◆ Wait(). virtual Int_t TConditionImp::Wait ; (; ). pure virtual . Implemented in TPosixCondition, and TWin32Condition. Libraries for TConditionImp:. [legend]; The documentation for this class was generated from the following file:; core/thread/inc/TConditionImp.h. TConditionImp. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTConditionImp.html:12364,Guid,Guide,12364,doc/master/classTConditionImp.html,https://root.cern,https://root.cern/doc/master/classTConditionImp.html,1,['Guid'],['Guide']
Usability,"al Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. THashTablefStringPropertyall properties of String type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDictAttributeMap(); Default constructor. ~TDictAttributeMap(); Default destructor. void AddProperty(const char* key, const char* value); Add a property with a String value to the TDictAttributeMap.; Parameters: key and char* value of the property. Bool_t HasKey(const char* key) const. const char* GetPropertyAsString(const char* key) const; Access the value of a String property using the key. TString RemovePropertyString(const char* key); Remove a String property from the attribute map specified by the key.; Returns the TString property removed or NULL if the property does not exist. Bool_t RemoveProperty(const char* key); Remove a property from the attribute map specified by the key.; Returns true if property exists and was removed, false if property; does not exist. void Clear(Option_t* option = """"); Deletes all the properties of the class. Int_t GetPropertySize() const; { return fStringProperty.GetSize(); }. » Author: Bianca-Cristina Cristescu 03/07/13 » Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-03-12 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDictAttributeMap.html:6453,Clear,Clear,6453,root/html534/TDictAttributeMap.html,https://root.cern,https://root.cern/root/html534/TDictAttributeMap.html,1,['Clear'],['Clear']
Usability,"al RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; virtual Bool_tchangeModel(const RooResolutionModel& newModel); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); const RooRealVar*convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:4680,clear,clearEvalErrorLog,4680,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,"al TPolyLine * DrawPolyLine(Int_t n, Double_t *x, Double_t *y, Option_t *option="""")Draw this polyline with new coordinates.Definition TPolyLine.cxx:223; TPolyLine::fNInt_t fNNumber of points.Definition TPolyLine.h:26; TPolyLine::fYDouble_t * fY[fN] Array of Y coordinatesDefinition TPolyLine.h:29; TPolyLine::SetPolyLinevirtual void SetPolyLine(Int_t n)Resize this polyline to size n.Definition TPolyLine.cxx:657; TPolyLine::SetNDCvirtual void SetNDC(Bool_t isNDC=kTRUE)Set NDC mode on if isNDC = kTRUE, off otherwise.Definition TPolyLine.cxx:603; TPolyLine::SetNextPointvirtual Int_t SetNextPoint(Double_t x, Double_t y)Set point following LastPoint to x, y.Definition TPolyLine.cxx:613; TPolyLine::Printvoid Print(Option_t *option="""") const overrideDump this polyline with its attributes.Definition TPolyLine.cxx:572; TPolyLine::kPolyLineNDC@ kPolyLineNDCPolyline coordinates are in NDC space.Definition TPolyLine.h:37; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Streamervirtual void Streamer(TBuffer &)Stream a string object.Definition TString.cxx:1412; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::IsInsideBool_t IsInside(T xp, T yp, Int_t np, T *x, T *y)Function which returns kTRUE if point xp,yp lies inside the polygon defined by the np points in array...Definition TMath.h:1233; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123. graf2dgrafsrcTPolyLine.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPolyLine_8cxx_source.html:33518,Guid,Guide,33518,doc/master/TPolyLine_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPolyLine_8cxx_source.html,1,['Guid'],['Guide']
Usability,"al TSQLRow::~TSQLRow ; (; ). inlinevirtual . Definition at line 36 of file TSQLRow.h. Member Function Documentation. ◆ Class(). static TClass * TSQLRow::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSQLRow::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSQLRow::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 43 of file TSQLRow.h. ◆ Close(). virtual void TSQLRow::Close ; (; Option_t * ; option = """"). pure virtual . Implemented in TMySQLRow, TODBCRow, TPgSQLRow, TSQLiteRow, and TTreeRow. ◆ DeclFileName(). static const char * TSQLRow::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 43 of file TSQLRow.h. ◆ GetField(). virtual const char * TSQLRow::GetField ; (; Int_t ; field). pure virtual . Implemented in TMySQLRow, TODBCRow, TPgSQLRow, TSQLiteRow, and TTreeRow. ◆ GetFieldLength(). virtual ULong_t TSQLRow::GetFieldLength ; (; Int_t ; field). pure virtual . Implemented in TMySQLRow, TODBCRow, TPgSQLRow, TSQLiteRow, and TTreeRow. ◆ IsA(). TClass * TSQLRow::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 43 of file TSQLRow.h. ◆ operator[](). const char * TSQLRow::operator[] ; (; Int_t ; field). inline . Definition at line 41 of file TSQLRow.h. ◆ Streamer(). void TSQLRow::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TSQLRow::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 43 of file TSQLRow.h. Libraries for TSQLRow:. [legend]; The documentation for this class was generated from the following file:; net/net/inc/TSQLRow.h. TSQLRow. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLRow.html:12238,Guid,Guide,12238,doc/master/classTSQLRow.html,https://root.cern,https://root.cern/doc/master/classTSQLRow.html,1,['Guid'],['Guide']
Usability,"al User Interface and the Spider Plot Editor. The spider plot graphics editor provides two tabs to interact with the spider plots’ output: the tab “Style” defining the spider layout and the tab “Browse” to navigate in the tree.; 12.20.8.2 Parallel Coordinates Plots. The Parallel Coordinates Plots are a common way of studying and visualizing multiple variables data sets. They were proposed by in A.Inselberg in 1981 as a new way to represent multi-dimensional information. In traditional Cartesian coordinates, axes are mutually perpendicular. In Parallel coordinates, all axes are parallel which allows representing data in much more than three dimensions. To show a set of points in Parallel Coordinates, a set of parallel lines is drawn, typically vertical and equally spaced. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes. The position of the vertex on the i-th axis corresponds to the i-th coordinate of the point. The three following figures show some very simple examples:. The Parallel Coordinates representation of the six dimensional point (-5,3,4,2,0,1). The line y = -3x+20 and a circle in Parallel Coordinates. The Parallel Coordinates technique is good at: spotting irregular events, seeing the data trend, finding correlations and clusters. Its main weakness is the cluttering of the output. Because each “point” in the multidimensional space is represented as a line, the output is very quickly opaque and therefore it is difficult to see the data clusters. Most of the work done about Parallel Coordinates is to find techniques to reduce the output’s cluttering. The Parallel Coordinates plots in ROOT have been implemented as a new plotting option “PARA” in the TTree::Draw()method. To demonstrate how the Parallel Coordinates works in ROOT we will use the tree produced by the following “pseudo C++” code:; void parallel_example() {; TNtuple *nt = new TNtuple(""nt"",""Demo ntuple"",""x:y:z:u:v:w:a:b:c"");; for (Int_t i=0; i<3000; i++) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:610641,simpl,simple,610641,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"al axes widgets - rings drawn from attached physical center, in plane defined by axis ;  CTGLSAFrameStandalone GL Viewer GUI main frame ;  CTGLSAViewerThe top level standalone GL-viewer - created via plugin manager ;  CTGLScaleManipScale manipulator - attaches to physical shape and draws local axes widgets with box heads ;  ►CTGLSceneTGLScene provides management and rendering of ROOT's default 3D /object representation as logical and physical shapes ;  CDrawElement_t;  CTSceneInfo;  CTGLSceneBaseScene base-class – provides basic interface expected by the TGLViewer or its sub-classes: ;  CTGLSceneInfoBase class for extended scene context ;  CTGLScenePadImplements VirtualViewer3D interface and fills the base-class visualization structures from pad contents ;  CTGLSelectBufferEncapsulates OpenGL select buffer ;  CTGLSelectionBuffer;  CTGLSelectRecordStandard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes) ;  CTGLSelectRecordBase;  CTGLSphereImplements a native ROOT-GL sphere that can be rendered at different levels of detail ;  CTGLStopwatchStopwatch object for timing GL work ;  ►CTGLSurfacePainterImplements painting of TH2 with ""SURF"" option ;  CProjection_t;  CTGLTextGL Text ;  CTGLTF3PainterPlot-painter for TF3 functions ;  CTGLTH3Composition;  CTGLTH3CompositionPainter;  CTGLTH3SliceA slice of a TH3 ;  CTGLTransManipTranslation manipulator - attaches to physical shape and draws local axes widgets with arrow heads ;  ►CTGLUtilWrapper class for various misc static functions - error checking, draw helpers etc ;  CTColorLocker;  CTDrawQualityModifier;  CTDrawQualityScaler;  CTGLVContainer;  CTGLVector33 component (x/y/z) vector class ;  CTGLVEntry;  CTGLVertex33 component (x/y/z) vertex class ;  CTGLViewerBase GL viewer object - used by both standalone and embedded (in pad) GL ;  CTGLViewerBaseBase class for GL viewers ;  CTGLViewerEditorGUI editor for TGL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:128801,simpl,simply,128801,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['simpl'],['simply']
Usability,"al axes widgets - rings drawn from attached physical center, in plane defined by axis ;  CTGLSAFrameStandalone GL Viewer GUI main frame ;  CTGLSAViewerThe top level standalone GL-viewer - created via plugin manager ;  CTGLScaleManipScale manipulator - attaches to physical shape and draws local axes widgets with box heads ;  ►CTGLSceneTGLScene provides management and rendering of ROOT's default 3D /object representation as logical and physical shapes ;  CDrawElement_t;  CTSceneInfo;  CTGLSceneBaseScene base-class – provides basic interface expected by the TGLViewer or its sub-classes: ;  CTGLSceneInfoBase class for extended scene context ;  CTGLScenePadImplements VirtualViewer3D interface and fills the base-class visualization structures from pad contents ;  CTGLSelectBufferEncapsulates OpenGL select buffer ;  CTGLSelectionBuffer;  CTGLSelectRecordStandard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes) ;  CTGLSelectRecordBaseBase class for select records ;  CTGLSphereImplements a native ROOT-GL sphere that can be rendered at different levels of detail ;  CTGLStopwatchStopwatch object for timing GL work ;  ►CTGLSurfacePainterImplements painting of TH2 with ""SURF"" option ;  CProjection_t;  CTGLTextGL Text ;  CTGLTF3PainterPlot-painter for TF3 functions ;  CTGLTH3Composition;  CTGLTH3CompositionPainter;  CTGLTH3SliceA slice of a TH3 ;  CTGLTransManipTranslation manipulator - attaches to physical shape and draws local axes widgets with arrow heads ;  ►CTGLUtilWrapper class for various misc static functions - error checking, draw helpers etc ;  CTColorLocker;  CTDrawQualityModifier;  CTDrawQualityScaler;  CTGLVContainer;  CTGLVector33 component (x/y/z) vector class ;  CTGLVEntry;  CTGLVertex33 component (x/y/z) vertex class ;  CTGLViewerBase GL viewer object - used by both standalone and embedded (in pad) GL ;  CTGLViewerBaseBase class for GL viewers ;  CTGL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:155205,simpl,simply,155205,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,5,['simpl'],['simply']
Usability,"al const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. intROOT::Math::Minimizer::fDebugprint level; TMVA::IFitterTarget*fFitness; unsigned intROOT::Math::Minimizer::fMaxCallsmax number of function calls ; unsigned intROOT::Math::Minimizer::fMaxItermax number or iterations used to find the minimum; ROOT::Math::GeneticMinimizerParametersfParameters; doubleROOT::Math::Minimizer::fPrecprecision; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer ; intROOT::Math::Minimizer::fStrategyminimizer strategy; doubleROOT::Math::Minimizer::fToltolerance (absolute); doubleROOT::Math::Minimizer::fUperror scale ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int = 0). virtual ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step). bool Minimize(). double MinValue() const. double Edm() const. const double * X() const. const double * MinGradient() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. bool ProvidesError() const. const double * Errors() const. double CovMatrix(unsigned int i, unsigned int j) const. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). void SetOptions(const ROOT::Math::MinimizerOptions& opt). void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. » Last changed: root/mathcore:$Id » Last generated: 2010-12-08 11:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GeneticMinimizer.html:4592,Clear,Clear,4592,root/html528/ROOT__Math__GeneticMinimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GeneticMinimizer.html,1,['Clear'],['Clear']
Usability,"al const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. intROOT::Math::Minimizer::fDebugprint level; TMVA::IFitterTarget*fFitness; unsigned intROOT::Math::Minimizer::fMaxCallsmax number of function calls ; unsigned intROOT::Math::Minimizer::fMaxItermax number or iterations used to find the minimum; ROOT::Math::GeneticMinimizerParametersfParameters; doubleROOT::Math::Minimizer::fPrecprecision; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer ; intROOT::Math::Minimizer::fStrategyminimizer strategy; doubleROOT::Math::Minimizer::fToltolerance (absolute); doubleROOT::Math::Minimizer::fUperror scale ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int = 0). virtual ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step). bool Minimize(). double MinValue() const. double Edm() const. const double * X() const. const double * MinGradient() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. bool ProvidesError() const. const double * Errors() const. double CovMatrix(unsigned int i, unsigned int j) const. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). void SetOptions(const ROOT::Math::MinimizerOptions& opt). void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. » Last changed: root/mathcore:$Id » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GeneticMinimizer.html:4726,Clear,Clear,4726,root/html530/ROOT__Math__GeneticMinimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GeneticMinimizer.html,1,['Clear'],['Clear']
Usability,"al const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. intROOT::Math::Minimizer::fDebugprint level; TMVA::IFitterTarget*fFitness; unsigned intROOT::Math::Minimizer::fMaxCallsmax number of function calls ; unsigned intROOT::Math::Minimizer::fMaxItermax number or iterations used to find the minimum; ROOT::Math::GeneticMinimizerParametersfParameters; doubleROOT::Math::Minimizer::fPrecprecision; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer ; intROOT::Math::Minimizer::fStrategyminimizer strategy; doubleROOT::Math::Minimizer::fToltolerance (absolute); doubleROOT::Math::Minimizer::fUperror scale ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int = 0). virtual ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step). bool Minimize(). double MinValue() const. double Edm() const. const double * X() const. const double * MinGradient() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. bool ProvidesError() const. const double * Errors() const. double CovMatrix(unsigned int i, unsigned int j) const. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). void SetOptions(const ROOT::Math::MinimizerOptions& opt). void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. » Last changed: root/mathcore:$Id » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GeneticMinimizer.html:4726,Clear,Clear,4726,root/html532/ROOT__Math__GeneticMinimizer.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GeneticMinimizer.html,1,['Clear'],['Clear']
Usability,"al coordinate system using Pt , Phi, Eta and E (or rho, phi, eta , T) The metric used is (-,-,-,+). More...;  ; class  ROOT::Math::PtEtaPhiM4D< ScalarType >;  Class describing a 4D cylindrical coordinate system using Pt , Phi, Eta and M (mass) The metric used is (-,-,-,+). More...;  ; class  ROOT::Math::PxPyPzE4D< ScalarType >;  Class describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E). More...;  ; class  ROOT::Math::PxPyPzM4D< ScalarType >;  Class describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M). More...;  ; class  ROOT::Math::Quaternion;  Rotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k). More...;  ; class  ROOT::Math::Rotation3D;  Rotation class with the (3D) rotation represented by a 3x3 orthogonal matrix. More...;  ; class  ROOT::Math::RotationX;  Rotation class representing a 3D rotation about the X axis by the angle of rotation. More...;  ; class  ROOT::Math::RotationY;  Rotation class representing a 3D rotation about the Y axis by the angle of rotation. More...;  ; class  ROOT::Math::RotationZ;  Rotation class representing a 3D rotation about the Z axis by the angle of rotation. More...;  ; class  ROOT::Math::RotationZYX;  Rotation class with the (3D) rotation represented by angles describing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the Y axis, followed by a third rotation of an angle psi (roll) about the X axis. More...;  ; class  ROOT::Math::Impl::Transform3D< T >;  Basic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data. More...;  ; class  ROOT::Math::Impl::Translation3D< T >;  Class describing a 3 dimensional translation. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__GenVector.html:14819,Guid,Guide,14819,doc/master/group__GenVector.html,https://root.cern,https://root.cern/doc/master/group__GenVector.html,1,['Guid'],['Guide']
Usability,"al for a more complete example.; Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and executes the callable on the values of those columns for each event that passes all upstream selections. It can be used to perform actions that are not already available in the interface. For example, the following snippet evaluates the root mean square of column ""x"": // Single-thread evaluation of RMS of column ""x"" using Foreach; double sumSq = 0.;; unsigned int n = 0;; df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; nconst Int_t nDefinition legend1.C:16; In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach(): thread will execute the expression concurrently. The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of rms; but this is probably too much head-scratch for such a simple operation.; ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame guarantees that ForeachSlot() will invoke the user expression with different slot parameters for different concurrent executions (see Special helper columns: rdfentry_ and rdfslot_ for more information on the slot parameter). We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"": // Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; ROOT::EnableImplicitMT();; const unsigned int nSlots = df.GetNSlots();; std::vector<double> sumSqs(nSlots, 0.);; std::vector<unsigned int> ns(nSlots, 0);; ; df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; double sumSq = std::accumulate(sumSqs.be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:68496,simpl,simple,68496,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['simpl'],['simple']
Usability,"al interval that capture N% of the variations; for each valye of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations. Bool_t plotSanityChecks(RooPlot* frame) const; Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. void makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; Utility function for plotOn() that constructs the set of; observables to project when plotting ourselves as function of; 'plotVar'. 'allVars' is the list of variables that must be; projected, but may contain variables that we do not depend on. If; 'silent' is cleared, warnings about inconsistent input parameters; will be printed. Bool_t isSelectedComp() const; If true, the current pdf is a selected component (for use in plotting). void globalSelectComp(Bool_t flag); Global switch controlling the activation of the selectComp() functionality. RooAbsFunc * bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; Create an interface adaptor f(vars) that binds us to the specified variables; (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; current values of x2 and x4. The caller takes ownership of the returned adaptor. void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE); Copy the cached value of another RooAbsArg to our cache.; Warning: This function copies the cached values of source,; it is the callers responsibility to make sure the cache is clean. void attachToTree(TTree& t, Int_t bufSize = 32000); Attach object to a bran",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:54824,clear,cleared,54824,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,3,['clear'],['cleared']
Usability,"al interval that capture N% of the variations; for each valye of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations. Bool_t plotSanityChecks(RooPlot* frame) const; Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. void makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; Utility function for plotOn() that constructs the set of; observables to project when plotting ourselves as function of; 'plotVar'. 'allVars' is the list of variables that must be; projected, but may contain variables that we do not depend on. If; 'silent' is cleared, warnings about inconsistent input parameters; will be printed. Bool_t isSelectedComp() const; If true, the current pdf is a selected component (for use in plotting). void globalSelectComp(Bool_t flag); Global switch controlling the activation of the selectComp() functionality. RooAbsFunc * bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; Create an interface adaptor f(vars) that binds us to the specified variables; (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; current values of x2 and x4. The caller takes ownership of the returned adaptor. void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE); Copy the cached value of another RooAbsArg to our cache.; Warning: This function copies the cached values of source,; it is the callers responsibility to make sure the cache is clean. void attachToVStore(RooVectorDataStore& vstore)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:56339,clear,cleared,56339,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,4,['clear'],['cleared']
Usability,"al list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:4444,clear,clearEvalErrorLog,4444,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,1,['clear'],['clearEvalErrorLog']
Usability,"al number of parameters . Definition at line 90 of file MinuitWrapper.cxx. ◆ IsA(). virtual TClass * TMVA::MinuitWrapper::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 69 of file MinuitWrapper.h. ◆ SetFitterTarget(). void TMVA::MinuitWrapper::SetFitterTarget ; (; IFitterTarget & ; target). inline . Definition at line 54 of file MinuitWrapper.h. ◆ SetParameter(). Int_t TMVA::MinuitWrapper::SetParameter ; (; Int_t ; ipar, . const char * ; parname, . Double_t ; value, . Double_t ; verr, . Double_t ; vlow, . Double_t ; vhigh . ). set initial values for a parameter . ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter . Definition at line 121 of file MinuitWrapper.cxx. ◆ Streamer(). virtual void TMVA::MinuitWrapper::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::MinuitWrapper::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file MinuitWrapper.h. Member Data Documentation. ◆ fFitterTarget. IFitterTarget& TMVA::MinuitWrapper::fFitterTarget. private . fitter Target ; Definition at line 65 of file MinuitWrapper.h. ◆ fNumPar. Int_t TMVA::MinuitWrapper::fNumPar. private . number of parameters ; Definition at line 67 of file MinuitWrapper.h. ◆ fParameters. std::vector<Double_t> TMVA::MinuitWrapper::fParameters. private . vector holding the current parameters ; Definition at line 66 of file MinuitWrapper.h. Libraries for TMVA::MinuitWrapper:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MinuitWrapper.h; tmva/tmva/src/MinuitWrapper.cxx. TMVAMinuitWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MinuitWrapper.html:28785,Guid,Guide,28785,doc/master/classTMVA_1_1MinuitWrapper.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MinuitWrapper.html,1,['Guid'],['Guide']
Usability,"al of function landau over observables(x) with normalization () with range identifier <none>; [#3] DEBUG:Integration -- landau: Adding observable x as shape dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0 as value dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0.1 as value dependent; [#3] INFO:Integration -- landau: Observable x is suitable for analytical integration (if supported by p.d.f); [#3] INFO:Integration -- landau: Observables (x) are numerically integrated; [#1] INFO:NumericIntegration -- RooRealIntegral::init(landau_Int[x]) using numeric integrator RooAdaptiveGaussKronrodIntegrator1D to calculate Int(x); [2] int_dx landau(x) = 0.098957102921895; [#3] INFO:Integration -- RooRealIntegral::ctor(landau_Int[x]) Constructing integral of function landau over observables(x) with normalization () with range identifier <none>; [#3] DEBUG:Integration -- landau: Adding observable x as shape dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0 as value dependent; [#3] DEBUG:Integration -- landau: Adding parameter 0.1 as value dependent; [#3] INFO:Integration -- landau: Observable x is suitable for analytical integration (if supported by p.d.f); [#3] INFO:Integration -- landau: Observables (x) are numerically integrated; [#1] INFO:NumericIntegration -- RooRealIntegral::init(landau_Int[x]) using numeric integrator RooAdaptiveGaussKronrodIntegrator1D to calculate Int(x); [3] int_dx landau(x) = 0.098957102921895; --- RooAbsArg ---; Value State: clean; Shape State: clean; Attributes: [SnapShot_ExtRefClone] ; Address: 0x55cdf7163a10; Clients: ; Servers: ; Proxies: ; --- RooAbsCategory ---; Value = 1 ""15Points); Possible states:; 15Points 1; 21Points 2; 31Points 3; 41Points 4; 51Points 5; 61Points 6; WynnEpsilon 0; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf901_numintconfig.C. tutorialsroofitrf901_numintconfig.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8C.html:12347,Guid,Guide,12347,doc/master/rf901__numintconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8C.html,1,['Guid'],['Guide']
Usability,"al temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gives an example of how to create a horizontal splitter. ;  ; file  splitterVertical.C;  This macro gives an example of how to create a vertical splitter. ;  ; file  staffTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  statusBar.C;  This macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window. ;  ; file  textEntries.C;  This macro gives an example of how to set/change text entry attributes. ;  ; file  textviewostream.C;  This macro gives an example of how to use the TGTextViewostream widget. ;  ; file  WorldMap.C;  This macro shows how to use a TGImageMap class. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__gui.html:3106,simpl,simple,3106,doc/master/group__tutorial__gui.html,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html,3,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"al voidAssociate(const TGWindow* w); static TClass*Class(); const char*GetCommand() const; Bool_tHasFocus() const; virtual TClass*IsA() const; Bool_tIsEnabled() const; virtual voidSetCommand(const char* command); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGWidget(); TGWidget(Int_t id); Bool_tWantFocus() const; Int_tWidgetId() const. protected:. Int_tClearFlags(Int_t flags); TGWidget&operator=(const TGWidget& tgw); Int_tSetFlags(Int_t flags); TGWidget(const TGWidget& tgw). Data Members; protected:. TStringfCommandcommand to be executed; const TGWindow*fMsgWindowwindow which handles widget events; Int_tfWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tfWidgetIdthe widget id (used for event processing). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGWidget(const TGWidget& tgw); { }. TGWidget& operator=(const TGWidget& tgw). Int_t SetFlags(Int_t flags); { return fWidgetFlags |= flags; }. Int_t ClearFlags(Int_t flags); { return fWidgetFlags &= ~flags; }. TGWidget(); { }. TGWidget(Int_t id); { }. virtual ~TGWidget(); { }. Int_t WidgetId() const; { return fWidgetId; }. Bool_t IsEnabled() const; { return (Bool_t)((fWidgetFlags & kWidgetIsEnabled) != 0); }. Bool_t HasFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetHasFocus) != 0); }. Bool_t WantFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetWantFocus) != 0); }. void Associate(const TGWindow* w); { fMsgWindow = w; }. void SetCommand(const char* command); { fCommand = command; }. const char * GetCommand() const; { return fCommand.Data(); }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 13:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGWidget.html:1567,Clear,ClearFlags,1567,root/html602/TGWidget.html,https://root.cern,https://root.cern/root/html602/TGWidget.html,1,['Clear'],['ClearFlags']
Usability,"al voidAssociate(const TGWindow* w); static TClass*Class(); const char*GetCommand() const; Bool_tHasFocus() const; virtual TClass*IsA() const; Bool_tIsEnabled() const; virtual voidSetCommand(const char* command); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGWidget(); TGWidget(Int_t id); Bool_tWantFocus() const; Int_tWidgetId() const. protected:. Int_tClearFlags(Int_t flags); TGWidget&operator=(const TGWidget& tgw); Int_tSetFlags(Int_t flags); TGWidget(const TGWidget& tgw). Data Members; protected:. TStringfCommandcommand to be executed; const TGWindow*fMsgWindowwindow which handles widget events; Int_tfWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tfWidgetIdthe widget id (used for event processing). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGWidget(const TGWidget& tgw); { }. TGWidget& operator=(const TGWidget& tgw). Int_t SetFlags(Int_t flags); { return fWidgetFlags |= flags; }. Int_t ClearFlags(Int_t flags); { return fWidgetFlags &= ~flags; }. TGWidget(); { }. TGWidget(Int_t id); { }. virtual ~TGWidget(); { }. Int_t WidgetId() const; { return fWidgetId; }. Bool_t IsEnabled() const; { return (Bool_t)((fWidgetFlags & kWidgetIsEnabled) != 0); }. Bool_t HasFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetHasFocus) != 0); }. Bool_t WantFocus() const; { return (Bool_t)((fWidgetFlags & kWidgetWantFocus) != 0); }. void Associate(const TGWindow* w); { fMsgWindow = w; }. void SetCommand(const char* command); { fCommand = command; }. const char * GetCommand() const; { return fCommand.Data(); }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGWidget.html:1567,Clear,ClearFlags,1567,root/html604/TGWidget.html,https://root.cern,https://root.cern/root/html604/TGWidget.html,1,['Clear'],['ClearFlags']
Usability,"al voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. static voidInitStatics(). private:. TGLFontManager(const TGLFontManager&); TGLFontManager&operator=(const TGLFontManager&). Data Members; protected:. map<TGLFont,int>fFontMapmap of created fonts; list<const TGLFont*>fFontTrashfonts to purge; static TObjArrayfgFontFileArraymap font-id to ttf-font-file; static vector<int>fgFontSizeArraymap of valid font-size; static Bool_tfgStaticInitDoneglobal initialization flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGLFontManager(); Destructor. void RegisterFont(Int_t size, Int_t file, TGLFont::EMode mode, TGLFont& out); Provide font with given size, file and FTGL class. void RegisterFont(Int_t size, const char* name, TGLFont::EMode mode, TGLFont& out); Get mapping from ttf id to font names. Table taken from TTF.cxx. void ReleaseFont(TGLFont& font); Release font with given attributes. Returns false if font has; not been found in the managers font set. TObjArray* GetFontFileArray(); Get id to file name map. Int_t GetFontSize(Int_t ds); Get availabe font size. Int_t GetFontSize(Int_t ds, Int_t min, Int_t max); Get availabe font size. const char* GetFontNameFromId(Int_t ); Get font name from TAttAxis font id. void InitStatics(); Create a list of available font files and allowed font sizes. void ClearFontTrash(); Delete FTFFont objects registered for destruction. TGLFont& operator=(const TGLFontManager& ). TGLFontManager(const TGLFontManager& ). TGLFontManager(); {}. FontSizeVec_t* GetFontSizeArray(). » Author: Alja Mrak-Tadel 2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLFontManager.h 30425 2009-09-24 19:45:11Z matevz $ » Last generated: 2010-09-23 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLFontManager.html:2457,Clear,ClearFontTrash,2457,root/html528/TGLFontManager.html,https://root.cern,https://root.cern/root/html528/TGLFontManager.html,1,['Clear'],['ClearFontTrash']
Usability,"al voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. static voidInitStatics(). private:. TGLFontManager(const TGLFontManager&); TGLFontManager&operator=(const TGLFontManager&). Data Members; protected:. map<TGLFont,int>fFontMapmap of created fonts; list<const TGLFont*>fFontTrashfonts to purge; static TObjArrayfgFontFileArraymap font-id to ttf-font-file; static vector<int>fgFontSizeArraymap of valid font-size; static Bool_tfgStaticInitDoneglobal initialization flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGLFontManager(); Destructor. void RegisterFont(Int_t size, Int_t file, TGLFont::EMode mode, TGLFont& out); Provide font with given size, file and FTGL class. void RegisterFont(Int_t size, const char* name, TGLFont::EMode mode, TGLFont& out); Get mapping from ttf id to font names. Table taken from TTF.cxx. void ReleaseFont(TGLFont& font); Release font with given attributes. Returns false if font has; not been found in the managers font set. TObjArray* GetFontFileArray(); Get id to file name map. Int_t GetFontSize(Int_t ds); Get availabe font size. Int_t GetFontSize(Int_t ds, Int_t min, Int_t max); Get availabe font size. const char* GetFontNameFromId(Int_t ); Get font name from TAttAxis font id. void InitStatics(); Create a list of available font files and allowed font sizes. void ClearFontTrash(); Delete FTFFont objects registered for destruction. TGLFont& operator=(const TGLFontManager& ). TGLFontManager(const TGLFontManager& ). TGLFontManager(); {}. FontSizeVec_t* GetFontSizeArray(). » Author: Alja Mrak-Tadel 2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLFontManager.h 30425 2009-09-24 19:45:11Z matevz $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLFontManager.html:2457,Clear,ClearFontTrash,2457,root/html530/TGLFontManager.html,https://root.cern,https://root.cern/root/html530/TGLFontManager.html,1,['Clear'],['ClearFontTrash']
Usability,"al voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. static voidInitStatics(). private:. TGLFontManager(const TGLFontManager&); TGLFontManager&operator=(const TGLFontManager&). Data Members; protected:. map<TGLFont,int>fFontMapmap of created fonts; list<const TGLFont*>fFontTrashfonts to purge; static TObjArrayfgFontFileArraymap font-id to ttf-font-file; static vector<int>fgFontSizeArraymap of valid font-size; static Bool_tfgStaticInitDoneglobal initialization flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGLFontManager(); Destructor. void RegisterFont(Int_t size, Int_t file, TGLFont::EMode mode, TGLFont& out); Provide font with given size, file and FTGL class. void RegisterFont(Int_t size, const char* name, TGLFont::EMode mode, TGLFont& out); Get mapping from ttf id to font names. Table taken from TTF.cxx. void ReleaseFont(TGLFont& font); Release font with given attributes. Returns false if font has; not been found in the managers font set. TObjArray* GetFontFileArray(); Get id to file name map. Int_t GetFontSize(Int_t ds); Get availabe font size. Int_t GetFontSize(Int_t ds, Int_t min, Int_t max); Get availabe font size. const char* GetFontNameFromId(Int_t ); Get font name from TAttAxis font id. void InitStatics(); Create a list of available font files and allowed font sizes. void ClearFontTrash(); Delete FTFFont objects registered for destruction. TGLFont& operator=(const TGLFontManager& ). TGLFontManager(const TGLFontManager& ). TGLFontManager(); {}. FontSizeVec_t* GetFontSizeArray(). » Author: Alja Mrak-Tadel 2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLFontManager.h 30425 2009-09-24 19:45:11Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLFontManager.html:2457,Clear,ClearFontTrash,2457,root/html532/TGLFontManager.html,https://root.cern,https://root.cern/root/html532/TGLFontManager.html,1,['Clear'],['ClearFontTrash']
Usability,"al voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveProjectionManager.html:2505,Clear,Clear,2505,root/html530/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html530/TEveProjectionManager.html,5,['Clear'],['Clear']
Usability,"al voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveShape::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoShape.html:2729,Clear,Clear,2729,root/html528/TEveGeoShape.html,https://root.cern,https://root.cern/root/html528/TEveGeoShape.html,3,['Clear'],['Clear']
Usability,"al voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); voidValueSet(Double_t)SIGNAL ; Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Int_tCalcSliderPos(Float_t v); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TEveGValuator&operator=(const TEveGValuator&); TEveGValuator(const TEveGValuator&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWind",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGValuator.html:16039,Clear,ClearFlags,16039,root/html602/TEveGValuator.html,https://root.cern,https://root.cern/root/html602/TEveGValuator.html,2,['Clear'],['ClearFlags']
Usability,"al voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooStats::SimpleInterval::IsInInterval(const RooArgSet&) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Double_tLowerLimit(); Double_tLowerLimitEstimatedError(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SimpleInterval&RooStats::SimpleInterval::operator=(const RooStats::SimpleInterval&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t cl); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTestSize(Double_t size); virtual voidTNamed::SetTi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html:4065,Simpl,SimpleInterval,4065,root/html526/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html,2,['Simpl'],['SimpleInterval']
Usability,"al voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TTableSorter(); TTableSorter(const TTable& table, TString& colName, Int_t firstRow = 0, Int_t numbeRows = 0); TTableSorter(const TTable* table, TString& colName, Int_t firstRow = 0, Int_t numbeRows = 0); TTableSorter(const Float_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0); TTableSorter(const Double_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0); TTableSorter(const Long_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0); TTableSorter(const TTable& table, SEARCHMETHOD search, COMPAREMETHOD compare, Int_t firstRow = 0, Int_t numbeRows = 0); TTableSorter(const TTable* table, SEARCHMETHOD search, COMPAREMETHOD compare, Int_t firstRow = 0, Int_t numbeRows = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTableSorter.html:8235,simpl,simpleArray,8235,root/html602/TTableSorter.html,https://root.cern,https://root.cern/root/html602/TTableSorter.html,6,['simpl'],['simpleArray']
Usability,"al void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TList; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast;  pointer to first entry in linked list ;  ;  Protected Attributes inherited from TSeqCollection; Bool_t fSorted;  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . Inheritance diagram for TQConnectionList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TQConnectionList(). TQConnectionList::TQConnectionList ; (; const char * ; name, . Int_t ; nsigargs . ). inline . Definition at line 315 of file TQObject.cxx. ◆ ~TQConnectionList(). TQConnectionList::~TQConnectionList ; (; ). virtual . Destructor. ; Definition at line 327 of file TQObject.cxx. Member Function Documentation. ◆ Disconnect(). Bool_t TQConnectionList::Disconnect ; (; void * ; receiver = nullptr, . const char * ; slot_name = nullptr . ). Remove connection from the list. ; For more info see TQObject::Disconnect() ; Definition at line 344 of file TQObject.cxx. ◆ GetNargs(). Int_t TQConnectionList::GetNargs ; (; ); const. inline . Definition at line 320 of file TQObject.cxx. ◆ ls(). void TQConnectionList::ls ; (; Option_t * ; option = """"); const. overridevirtual . List signal name and list all connections in this signal list. ; Reimplemented from TCollection.; Definition at line 378 of file TQObject.cxx. Member Data Documentation. ◆ fSignalArgs. Int_t TQConnectionList::fSignalArgs. private . Definition at line 312 of file TQObject.cxx. core/base/src/TQObject.cxx. TQConnectionList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQConnectionList.html:20856,Guid,Guide,20856,doc/master/classTQConnectionList.html,https://root.cern,https://root.cern/doc/master/classTQConnectionList.html,1,['Guid'],['Guide']
Usability,"al void ReadBasketExport (TBuffer &, TClonesArray *, Int_t);  ; virtual bool ReadBasketFast (TBuffer &, Long64_t);  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; virtual void ReadValue (std::istream &, Char_t=' ');  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafObject.html:5952,Clear,Clear,5952,doc/master/classTLeafObject.html,https://root.cern,https://root.cern/doc/master/classTLeafObject.html,1,['Clear'],['Clear']
Usability,"al(TBuffer& b). protected:. TGText(const TGText&); voidInit(); voidLongestLine(); TGText&operator=(const TGText&); Bool_tSetCurrentRow(Long_t row). Data Members; protected:. Long_tfColCountnumber of columns in current line; TGTextLine*fCurrentcurrent line; Long_tfCurrentRowcurrent row number; TStringfFilenamename of opened file ("""" if open buffer); TGTextLine*fFirstfirst line of text; Bool_tfIsSavedfalse if text needs to be saved; Long_tfLongestLinelength of longest line; Long_tfRowCountnumber of rows. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGText(const TGText& ); copy constructor. TGText& operator=(const TGText& ); assignment operator. void Init(); Common initialization method. TGText(); Create default (empty) text buffer. TGText(TGText* text); Create text buffer and initialize with other text buffer. TGText(const char* string); Create text buffer and initialize with single line string. ~TGText(); Destroy text buffer. void Clear(); Clear text buffer. Bool_t Load(const char* fn, Long_t startpos = 0, Long_t length = -1); Load text from file fn. Startpos is the begin from where to; load the file and length is the number of characters to read; from the file. Bool_t LoadBuffer(const char* txtbuf); Load a 0 terminated buffer. Lines will be split at '\n'. Bool_t Save(const char* fn); Save text buffer to file fn. Bool_t Append(const char* fn); Append buffer to file fn. Bool_t DelChar(TGLongPosition pos); Delete character at specified position pos. Bool_t InsChar(TGLongPosition pos, char c); Insert character c at the specified position pos. char GetChar(TGLongPosition pos); Get character a position pos. If charcater not valid return -1. Bool_t DelText(TGLongPosition start, TGLongPosition end); Delete text between start and end positions. Returns false in; case of failure (start and end not being within bounds). Bool_t InsText(TGLongPosition ins_pos, TGText* src, TGLongPosition start_src, TGLongPosition end_src); Insert src ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGText.html:2927,Clear,Clear,2927,root/html528/TGText.html,https://root.cern,https://root.cern/root/html528/TGText.html,6,['Clear'],['Clear']
Usability,"al(const double *x) const overrideDefinition WrappedFunction.h:208; ROOT::Math::WrappedMemMultiFunction::fDimunsigned int fDimDefinition WrappedFunction.h:215; ROOT::Math::WrappedMemMultiFunction::fObjFuncObj * fObjDefinition WrappedFunction.h:213; ROOT::Math::WrappedMemMultiFunction::NDimunsigned int NDim() const overrideRetrieve the dimension of the function.Definition WrappedFunction.h:204; ROOT::Math::WrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-...Definition WrappedFunction.h:143; ROOT::Math::WrappedMultiFunction::WrappedMultiFunctionWrappedMultiFunction(Func f, unsigned int dim=1)construct from the pointer to the object and the member functionDefinition WrappedFunction.h:151; ROOT::Math::WrappedMultiFunction::fDimunsigned int fDimDefinition WrappedFunction.h:175; ROOT::Math::WrappedMultiFunction::CloneWrappedMultiFunction * Clone() const overrideclone (required by the interface)Definition WrappedFunction.h:159; ROOT::Math::WrappedMultiFunction::DoEvaldouble DoEval(const double *x) const overrideDefinition WrappedFunction.h:169; ROOT::Math::WrappedMultiFunction::fFuncFunc fFuncDefinition WrappedFunction.h:174; ROOT::Math::WrappedMultiFunction::NDimunsigned int NDim() const overrideRetrieve the dimension of the function.Definition WrappedFunction.h:163; double; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::FreeMultiFunctionPtrdouble(* FreeMultiFunctionPtr)(const double *)Definition WrappedFunction.h:30; ROOT::Math::FreeFunctionPtrdouble(* FreeFunctionPtr)(double)Definition WrappedFunction.h:28; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Math::NullTypeFunc1DDefinition WrappedFunction.h:26. mathmathcoreincMathWrappedFunction.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/WrappedFunction_8h_source.html:10221,Guid,Guide,10221,doc/master/WrappedFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/WrappedFunction_8h_source.html,1,['Guid'],['Guide']
Usability,"al, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayer::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayer::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayer::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassSignals() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerLocal.html:5058,Feedback,Feedback,5058,root/html602/TProofPlayerLocal.html,https://root.cern,https://root.cern/root/html602/TProofPlayerLocal.html,4,['Feedback'],['Feedback']
Usability,"al, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti) override;  Report progress. ;  ; void Progress (TSlave *sl, TProofProgressInfo *pi) override;  Progress signal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayerRemote;  TProofPlayerRemote (TProof *proof=0);  ;  ~TProofPlayerRemote () override;  Destructor. ;  ; void AddOutput (TList *out) override;  Incorporate the content of the received output list 'out' into the final output list fOutput. ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate the received object 'obj' into the output list fOutput. ;  ; Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (support for TChain::Draw()). ;  ; void Feedback (TList *objs) override;  Feedback signal. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize the results of a query already processed. ;  ; TDSetElement * GetNextPacket (TSlave *slave, TMessage *r) override;  Get next packet for specified slave. ;  ; TVirtualPacketizer * GetPacketizer () const override;  ; TObject * HandleHistogram (TObject *obj, Bool_t &merged);  Low statistic histograms need a special treatment when using autobin. ;  ; Bool_t HistoSameAxis (TH1 *h0, TH1 *h1);  Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges on the axis (i.e. ;  ; Int_t Incorporate (TObject *obj, TList *out, Bool_t &merged);  Incorporate object 'newobj' in the list 'outlist'. ;  ; Bool_t IsClient () const override;  Is the player running on the client? ;  ; Bool_t JoinProcess (TList *workers) override;  Prepares the given list of new workers to join ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSuperMaster.html:2305,Feedback,Feedback,2305,doc/master/classTProofPlayerSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSuperMaster.html,2,['Feedback'],['Feedback']
Usability,"al, TMVA::TActivationReLU, TMVA::TActivationSigmoid, TMVA::TActivationTanh, and TMVA::TActivationIdentity. ◆ GetExpression(). virtual TString TMVA::TActivation::GetExpression ; (; ). pure virtual . Implemented in TMVA::TActivationIdentity, TMVA::TActivationRadial, TMVA::TActivationReLU, TMVA::TActivationSigmoid, and TMVA::TActivationTanh. ◆ GetMax(). virtual Double_t TMVA::TActivation::GetMax ; (; ). pure virtual . Implemented in TMVA::TActivationIdentity, TMVA::TActivationRadial, TMVA::TActivationReLU, TMVA::TActivationSigmoid, and TMVA::TActivationTanh. ◆ GetMin(). virtual Double_t TMVA::TActivation::GetMin ; (; ). pure virtual . Implemented in TMVA::TActivationIdentity, TMVA::TActivationRadial, TMVA::TActivationReLU, TMVA::TActivationSigmoid, and TMVA::TActivationTanh. ◆ IsA(). virtual TClass * TMVA::TActivation::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented in TMVA::TActivationIdentity, TMVA::TActivationRadial, TMVA::TActivationReLU, TMVA::TActivationSigmoid, and TMVA::TActivationTanh.; Definition at line 67 of file TActivation.h. ◆ MakeFunction(). virtual void TMVA::TActivation::MakeFunction ; (; std::ostream & ; fout, . const TString & ; fncName . ). pure virtual . Implemented in TMVA::TActivationIdentity, TMVA::TActivationRadial, TMVA::TActivationReLU, TMVA::TActivationSigmoid, and TMVA::TActivationTanh. ◆ Streamer(). virtual void TMVA::TActivation::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TMVA::TActivationIdentity, TMVA::TActivationRadial, TMVA::TActivationReLU, TMVA::TActivationSigmoid, and TMVA::TActivationTanh. ◆ StreamerNVirtual(). void TMVA::TActivation::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 67 of file TActivation.h. The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/TActivation.h. TMVATActivation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivation.html:4428,Guid,Guide,4428,doc/master/classTMVA_1_1TActivation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivation.html,1,['Guid'],['Guide']
Usability,"al::RDatasetSpec::AddSampleRDatasetSpec & AddSample(RSample sample)Add sample (RSample class object) to the RDatasetSpec object.Definition RDatasetSpec.cxx:131; ROOT::RDF::Experimental::RDatasetSpec::fFriendInfoROOT::TreeUtils::RFriendInfo fFriendInfoList of friends.Definition RDatasetSpec.hxx:62; ROOT::RDF::Experimental::RDatasetSpec::WithGlobalRangeRDatasetSpec & WithGlobalRange(const RDatasetSpec::REntryRange &entryRange={})Create an RDatasetSpec object for a given range of entries.Definition RDatasetSpec.cxx:216; ROOT::RDF::Experimental::RDatasetSpec::fSamplesstd::vector< RSample > fSamplesList of samples.Definition RDatasetSpec.hxx:61; ROOT::RDF::Experimental::RDatasetSpec::GetSampleNamesconst std::vector< std::string > GetSampleNames() constReturns the collection of the dataset's sample names.Definition RDatasetSpec.cxx:33; ROOT::RDF::Experimental::RDatasetSpec::GetEntryRangeEndLong64_t GetEntryRangeEnd() constReturns the last entry as defined by the global range provided in the specification.Definition RDatasetSpec.cxx:93; ROOT::RDF::Experimental::RSampleClass representing a sample which is a grouping of trees and their fileglobs, and,...Definition RSample.hxx:39; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RDF::Experimental::RDatasetSpec::REntryRangeDefinition RDatasetSpec.hxx:52; ROOT::RDF::Experimental::RDatasetSpec::REntryRange::REntryRangeREntryRange()Definition RDatasetSpec.cxx:20; ROOT::RDF::Experimental::RDatasetSpec::REntryRange::fEndLong64_t fEndDefinition RDatasetSpec.hxx:54; ROOT::RDF::Experimental::RDatasetSpec::REntryRange::fBeginLong64_t fBeginDefinition RDatasetSpec.hxx:53; ROOT::TreeUtils::RFriendInfoInformation about friend trees of a certain TTree or TChain object.Definition RFriendInfo.hxx:42. treedataframeincROOTRDFRDatasetSpec.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDatasetSpec_8hxx_source.html:7647,Guid,Guide,7647,doc/master/RDatasetSpec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RDatasetSpec_8hxx_source.html,1,['Guid'],['Guide']
Usability,"al::RResult<void> ROOT::Experimental::RNTupleImporter::InitDestination(std::string_view destFileName); 131{; 132 fDestFileName = destFileName;; 133 fDestFile = std::unique_ptr<TFile>(TFile::Open(fDestFileName.c_str(), ""UPDATE""));; 134 if (!fDestFile || fDestFile->IsZombie()) {; 135 return R__FAIL(""cannot open dest file "" + std::string(fDestFileName));; 136 }; 137 ; 138 return RResult<void>::Success();; 139}; 140 ; 141void ROOT::Experimental::RNTupleImporter::ReportSchema(); 142{; 143 for (const auto &f : fImportFields) {; 144 std::cout << ""Importing '"" << f.fField->GetFieldName() << ""' ["" << f.fField->GetTypeName() << ""]\n"";; 145 }; 146 for (const auto &f : Internal::GetProjectedFieldsOfModel(*fModel).GetFieldZero().GetSubFields()) {; 147 std::cout << ""Importing (projected) '"" << f->GetFieldName() << ""' ["" << f->GetTypeName() << ""]\n"";; 148 }; 149}; 150 ; 151void ROOT::Experimental::RNTupleImporter::ResetSchema(); 152{; 153 fImportBranches.clear();; 154 fImportFields.clear();; 155 fLeafCountCollections.clear();; 156 fImportTransformations.clear();; 157 fModel = RNTupleModel::CreateBare();; 158 fEntry = nullptr;; 159}; 160 ; 161ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::PrepareSchema(); 162{; 163 ResetSchema();; 164 ; 165 // Browse through all branches and their leaves, create corresponding fields and prepare the memory buffers for; 166 // reading and writing. Usually, reading and writing share the same memory buffer, i.e. the object is read from TTree; 167 // and written as-is to the RNTuple. There are exceptions, e.g. for leaf count arrays and C strings.; 168 for (auto b : TRangeDynCast<TBranch>(*fSourceTree->GetListOfBranches())) {; 169 assert(b);; 170 const auto firstLeaf = static_cast<TLeaf *>(b->GetListOfLeaves()->First());; 171 assert(firstLeaf);; 172 ; 173 const bool isLeafList = b->GetNleaves() > 1;; 174 const bool isCountLeaf = firstLeaf->IsRange(); // A leaf storing the number of elements of a leaf count array; 175 const bool is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:6119,clear,clear,6119,doc/master/RNTupleImporter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html,1,['clear'],['clear']
Usability,"al::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMultiVarGaussian.html:3228,Clear,Clear,3228,root/html534/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html534/RooMultiVarGaussian.html,3,['Clear'],['Clear']
Usability,"al; ClassInfo_IsValidMethod(ClassInfo_t *info, const char *method, const char *proto, Bool_t objectIsConst, Longptr_t *offset, ROOT::EFunctionMatchMode=ROOT::kConversionMatch) const finalTClingvirtual; ClassInfo_Name(ClassInfo_t *info) const finalTClingvirtual; ClassInfo_New(ClassInfo_t *info) const finalTClingvirtual; ClassInfo_New(ClassInfo_t *info, int n) const finalTClingvirtual; ClassInfo_New(ClassInfo_t *info, int n, void *arena) const finalTClingvirtual; ClassInfo_New(ClassInfo_t *info, void *arena) const finalTClingvirtual; ClassInfo_Next(ClassInfo_t *info) const finalTClingvirtual; ClassInfo_Property(ClassInfo_t *info) const finalTClingvirtual; ClassInfo_Size(ClassInfo_t *info) const finalTClingvirtual; ClassInfo_Tagnum(ClassInfo_t *info) const finalTClingvirtual; ClassInfo_Title(ClassInfo_t *info) const finalTClingvirtual; ClassInfo_TmpltName(ClassInfo_t *info) const finalTClingvirtual; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearFileBusy() finalTClingvirtual; ClearStack() finalTClingvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CodeComplete(const std::string &, size_t &, std::vector< std::string > &) finalTClingvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; CreateEnum(void *VD, TClass *cl) const finalTClingvirtual; CreateListOfBaseClasses(TClass *cl) const finalTClingvirtual; CreateListOfDataMembers(TClass *cl) const finalTClingvirtual; CreateListOfMethodArgs(TFunction *m) const finalTClingvirtual; CreateListOfMethods(TClass *cl) const finalTClingvirtual; CreateTemporary() constTInterpreterinline; DataMemberInfo_ArrayDim(DataMemberInfo_t *dminfo) const finalTClingvirtual; DataMemberInfo_Delete(DataMemberInfo_t *dminfo) const finalTClingvirtual; DataMemberInfo_Factory(ClassInfo_t *clinfo, TDictionary::EMemberSelection selection) const finalTClingvirtual; DataMemberInfo_Factory(DeclId_t declid, ClassInfo_t *clinfo) const fin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling-members.html:9546,Clear,ClearFileBusy,9546,doc/master/classTCling-members.html,https://root.cern,https://root.cern/doc/master/classTCling-members.html,1,['Clear'],['ClearFileBusy']
Usability,al;  ►NMacOSX;  NDetail;  NDetails;  NOpenGL;  NUtil;  ►NX11;  NDetail;  ►NMath;  NBlas;  NBrentMethods;  NCephes;  NChebyshevTemplate recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  NCholeskyDecompHelpersHelpers for CholeskyDecomp ;  Ndetail;  NGenAlgoOptUtil;  NGenVector;  NGenVector_detail;  NGSLRootHelperHelper functions to test convergence of Root-Finding algorithms ;  NGSLSimAn;  Ngv_detail;  NImpl;  NIntegMultiDim;  NIntegOneDim;  NIntegOptionsUtil;  NIntegration;  NIntegrationMultiDim;  NIntegrationOneDim;  NInterpolation;  NMCIntegration;  NMinim;  NMinim1D;  NRootsRoot-Finding Algorithms ;  NrowOffsetsUtils;  NSampler;  Ntest;  NUtilNamespace defining Utility functions needed by mathcore ;  NVectorUtilGlobal Helper functions for generic Vector classes ;  NMathMore;  ►NMeta;  NSelection;  NMinuit;  NMinuit2;  NQuartz;  NRNamespace associated R package for ROOT ;  NTF1Helper;  ►NTMetaUtils;  NAST2SourceTools;  NpropNames;  NTreeUtils;  Nv5;  ►NVc;  ►NAVX;  NInternal;  NIntrinsics;  ►NCommon;  NInternal;  NError;  NInternal;  NMem;  NReg;  NScalar;  ►NSSE;  NInternal;  NVC__USE_NAMESPACE;  NVectorSpecialInitializerIndexesFromZero;  NVectorSpecialInitializerOne;  NVectorSpecialInitializerZero;  NWarnings;  ▼NROOTaaS;  ►Nhtml;  ►Nexport;  Ncpphighlighter;  ►NiPyROOT;  Ncppcompleter;  Ncppmagic;  Ncpptransformer;  Nutils;  NRootCsgI've modified some very nice bounding box tree code from Gino van der Bergen's Free Solid Library below ;  NROOTwriter;  Nsample_config;  NSelectionRulesUtils;  Nsqlio;  ▼NstdSTL namespace ;  N__ROOT;  Ndetail;  NTClassEdit;  NTCollectionProxyInfo;  Ntest;  NTMath;  NTMatrixTCramerInv;  NTMatrixTSymCramerInv;  ▼NTMVAAbstract ClassifierFactory template that handles arbitrary types ;  NkNN;  NTMVAGlob;  NTStreamerInfoActions;  ▼Nvdt;  Ndetails;  Nwriter;  Nxmlio;  NXPD;  NXrdCl. ROOT 6.06/09 - Reference Guide Generated on Sun Dec 10 2017 22:29:05 using Doxygen 1.8.9. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/namespaces.html:3519,Guid,Guide,3519,root/html606/namespaces.html,https://root.cern,https://root.cern/root/html606/namespaces.html,1,['Guid'],['Guide']
Usability,alColumns. RActivePhysicalColumns ROOT::Experimental::Internal::RPageSource::fActivePhysicalColumns. protected . The active columns are implicitly defined by the model fields or views. ; Definition at line 658 of file RPageStorage.hxx. ◆ fCounters. std::unique_ptr<RCounters> ROOT::Experimental::Internal::RPageSource::fCounters. protected . Definition at line 654 of file RPageStorage.hxx. ◆ fDescriptor. RNTupleDescriptor ROOT::Experimental::Internal::RPageSource::fDescriptor. private . Definition at line 603 of file RPageStorage.hxx. ◆ fDescriptorLock. std::shared_mutex ROOT::Experimental::Internal::RPageSource::fDescriptorLock. mutableprivate . Definition at line 604 of file RPageStorage.hxx. ◆ fEntryRange. REntryRange ROOT::Experimental::Internal::RPageSource::fEntryRange. private . Used by the cluster pool to prevent reading beyond the given range. ; Definition at line 605 of file RPageStorage.hxx. ◆ fHasStructure. bool ROOT::Experimental::Internal::RPageSource::fHasStructure = false. private . Set to true once LoadStructure() is called. ; Definition at line 606 of file RPageStorage.hxx. ◆ fIsAttached. bool ROOT::Experimental::Internal::RPageSource::fIsAttached = false. private . Set to true once Attach() is called. ; Definition at line 607 of file RPageStorage.hxx. ◆ fOptions. RNTupleReadOptions ROOT::Experimental::Internal::RPageSource::fOptions. protected . Definition at line 656 of file RPageStorage.hxx. ◆ fPagePool. RPagePool ROOT::Experimental::Internal::RPageSource::fPagePool. protected . Pages that are unzipped with IMT are staged into the page pool. ; Definition at line 661 of file RPageStorage.hxx. Libraries for ROOT::Experimental::Internal::RPageSource:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RPageStorage.hxx; tree/ntuple/v7/src/RPageStorage.cxx. ROOTExperimentalInternalRPageSource. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:14 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:22802,Guid,Guide,22802,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,1,['Guid'],['Guide']
Usability,"alDensity ; (; RooArgSet & ; x1, . RooArgSet & ; x2 . ). pure virtual . Return the probability of proposing the point x1 given the starting point x2. ; Implemented in RooStats::PdfProposal, RooStats::SequentialProposal, and RooStats::UniformProposal. ◆ IsA(). TClass * RooStats::ProposalFunction::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::SequentialProposal, and RooStats::UniformProposal.; Definition at line 79 of file ProposalFunction.h. ◆ IsSymmetric(). virtual bool RooStats::ProposalFunction::IsSymmetric ; (; RooArgSet & ; x1, . RooArgSet & ; x2 . ). pure virtual . Determine whether or not the proposal density is symmetric for points x1 and x2 - that is, whether the probability of reaching x2 from x1 is equal to the probability of reaching x1 from x2. ; Implemented in RooStats::PdfProposal, RooStats::SequentialProposal, and RooStats::UniformProposal. ◆ Propose(). virtual void RooStats::ProposalFunction::Propose ; (; RooArgSet & ; xPrime, . RooArgSet & ; x . ). pure virtual . Populate xPrime with the new proposed point, possibly based on the current point x. ; Implemented in RooStats::PdfProposal, RooStats::SequentialProposal, and RooStats::UniformProposal. ◆ Streamer(). void RooStats::ProposalFunction::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::SequentialProposal, and RooStats::UniformProposal. ◆ StreamerNVirtual(). void RooStats::ProposalFunction::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 79 of file ProposalFunction.h. Libraries for RooStats::ProposalFunction:. [legend]; The documentation for this class was generated from the following file:; roofit/roostats/inc/RooStats/ProposalFunction.h. RooStatsProposalFunction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ProposalFunction.html:14582,Guid,Guide,14582,doc/master/classRooStats_1_1ProposalFunction.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ProposalFunction.html,1,['Guid'],['Guide']
Usability,"alInfo. ; Definition at line 162 of file TGLWidget.cxx. ◆ TGLWidget() [1/2]. TGLWidget::TGLWidget ; (; const TGLWidget & ; ). privatedelete . ◆ TGLWidget() [2/2]. TGLWidget::TGLWidget ; (; Window_t ; glw, . const TGWindow * ; parent, . Bool_t ; selectInput . ). protected . Creates widget with default pixel format. ; Definition at line 140 of file TGLWidget.cxx. Member Function Documentation. ◆ AddContext(). void TGLWidget::AddContext ; (; TGLContext * ; ctx). overrideprotectedvirtual . Register gl-context created for this window. ; Implements TGLPaintDevice.; Definition at line 249 of file TGLWidget.cxx. ◆ Class(). static TClass * TGLWidget::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLWidget::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLWidget::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 104 of file TGLWidget.h. ◆ ClearCurrent(). Bool_t TGLWidget::ClearCurrent ; (; ). Clear the current gl-context. ; Definition at line 209 of file TGLWidget.cxx. ◆ Create() [1/2]. TGLWidget * TGLWidget::Create ; (; const TGLFormat & ; format, . const TGWindow * ; parent, . Bool_t ; selectInput, . Bool_t ; shareDefault, . const TGLPaintDevice * ; shareDevice, . UInt_t ; width, . UInt_t ; height . ). static . Static constructor for creating widget with given pixel format. ; Definition at line 96 of file TGLWidget.cxx. ◆ Create() [2/2]. TGLWidget * TGLWidget::Create ; (; const TGWindow * ; parent, . Bool_t ; selectInput, . Bool_t ; shareDefault, . const TGLPaintDevice * ; shareDevice, . UInt_t ; width, . UInt_t ; height . ). static . Static constructor for creating widget with default pixel format. ; Definition at line 83 of file TGLWidget.cxx. ◆ CreateDummy(). TGLWidget * TGLWidget::CreateDummy ; (; ). static . Static constructor for creating widget with default pixel format. ; Definition at line 73 of file TGLWidget.cxx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLWidget.html:32482,Clear,ClearCurrent,32482,doc/master/classTGLWidget.html,https://root.cern,https://root.cern/doc/master/classTGLWidget.html,1,['Clear'],['ClearCurrent']
Usability,"alMonitoringReader::DeleteMap ; (; TMap * ; ). inlinevirtual . Definition at line 110 of file TVirtualMonitoring.h. ◆ DumpResult(). virtual void TVirtualMonitoringReader::DumpResult ; (; ). inlinevirtual . Definition at line 95 of file TVirtualMonitoring.h. ◆ GetLastValues(). virtual void TVirtualMonitoringReader::GetLastValues ; (; const char * ; , . const char * ; , . const char * ; , . const char * ; , . Bool_t ; = kFALSE . ). inlinevirtual . Definition at line 100 of file TVirtualMonitoring.h. ◆ GetMap(). virtual TMap * TVirtualMonitoringReader::GetMap ; (; ). inlinevirtual . Definition at line 109 of file TVirtualMonitoring.h. ◆ GetValues(). virtual void TVirtualMonitoringReader::GetValues ; (; const char * ; , . const char * ; , . const char * ; , . const char * ; , . Long_t ; , . Long_t ; , . Bool_t ; = kFALSE . ). inlinevirtual . Definition at line 96 of file TVirtualMonitoring.h. ◆ IsA(). TClass * TVirtualMonitoringReader::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 112 of file TVirtualMonitoring.h. ◆ ProxyValues(). virtual void TVirtualMonitoringReader::ProxyValues ; (; const char * ; , . const char * ; , . const char * ; , . const char * ; , . Long_t ; , . Long_t ; , . Long_t ;  . ). inlinevirtual . Definition at line 104 of file TVirtualMonitoring.h. ◆ Streamer(). void TVirtualMonitoringReader::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TVirtualMonitoringReader::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 112 of file TVirtualMonitoring.h. Libraries for TVirtualMonitoringReader:. [legend]; The documentation for this class was generated from the following file:; core/base/inc/TVirtualMonitoring.h. TVirtualMonitoringReader. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualMonitoringReader.html:14595,Guid,Guide,14595,doc/master/classTVirtualMonitoringReader.html,https://root.cern,https://root.cern/doc/master/classTVirtualMonitoringReader.html,1,['Guid'],['Guide']
Usability,"alPerfStats; virtual ~TVirtualPerfStats ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePerfStats.html:9997,Clear,Clear,9997,doc/master/classTTreePerfStats.html,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html,1,['Clear'],['Clear']
Usability,"al_b);  ;  Public Member Functions inherited from TGProgressBar;  TGProgressBar (const TGWindow *p, UInt_t w, UInt_t h, Pixel_t back=GetWhitePixel(), Pixel_t barcolor=GetDefaultSelectedBackground(), GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Create progress bar. ;  ;  ~TGProgressBar () override;  ; virtual void Format (const char *format=""%.2f"");  Set format for displaying a value. ;  ; Pixel_t GetBarColor () const;  ; EBarType GetBarType () const;  ; EFillType GetFillType () const;  ; FontStruct_t GetFontStruct () const;  ; TString GetFormat () const;  ; Float_t GetMax () const;  ; Float_t GetMin () const;  ; GContext_t GetNormGC () const;  ; Float_t GetPosition () const;  ; Bool_t GetShowPos () const;  ; const char * GetValueFormat () const;  ; void Increment (Float_t inc);  Increment progress position. ;  ; virtual void Reset ();  Reset progress bar (i.e. set pos to 0). ;  ; void SetBarColor (const char *color=""blue"");  Set progress bar color. ;  ; virtual void SetBarColor (Pixel_t color);  Set progress bar color. ;  ; void SetBarType (EBarType type);  Set bar type. ;  ; void SetFillType (EFillType type);  Set fill type. ;  ; void SetForegroundColor (Pixel_t pixel) override;  Change text color drawing. ;  ; void SetMax (Float_t max);  ; void SetMin (Float_t min);  ; void SetPosition (Float_t pos);  Set progress position between [min,max]. ;  ; void SetRange (Float_t min, Float_t max);  Set min and max of progress bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UsePercent () const;  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVProgressBar.html:2492,progress bar,progress bar,2492,doc/master/classTGVProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGVProgressBar.html,1,['progress bar'],['progress bar']
Usability,"ale(). double ROOT::Math::GSLSimAnFunc::Scale ; (; unsigned int ; i); const. inline . Definition at line 141 of file GSLSimAnnealing.h. ◆ SetX() [1/3]. void ROOT::Math::GSLSimAnFunc::SetX ; (; const double * ; x). inline . change the x values (used by sim annealing to take a step) ; Definition at line 126 of file GSLSimAnnealing.h. ◆ SetX() [2/3]. template<class IT > . void ROOT::Math::GSLSimAnFunc::SetX ; (; IT ; begin, . IT ; end . ). inline . Definition at line 131 of file GSLSimAnnealing.h. ◆ SetX() [3/3]. void ROOT::Math::GSLSimAnFunc::SetX ; (; unsigned int ; i, . double ; x . ). inline . Definition at line 143 of file GSLSimAnnealing.h. ◆ Step(). void ROOT::Math::GSLSimAnFunc::Step ; (; const GSLRandomEngine & ; r, . double ; maxstep . ). virtual . change the x[i] value using a random value urndm generated between [0,1] up to a maximum value maxstep re-implement by derived classes if needed to be modified ; Definition at line 55 of file GSLSimAnnealing.cxx. ◆ X() [1/2]. const std::vector< double > & ROOT::Math::GSLSimAnFunc::X ; (; ); const. inline . Definition at line 139 of file GSLSimAnnealing.h. ◆ X() [2/2]. double ROOT::Math::GSLSimAnFunc::X ; (; unsigned int ; i); const. inline . Definition at line 137 of file GSLSimAnnealing.h. Member Data Documentation. ◆ fFunc. const ROOT::Math::IMultiGenFunction* ROOT::Math::GSLSimAnFunc::fFunc. private . Definition at line 151 of file GSLSimAnnealing.h. ◆ fScale. std::vector<double> ROOT::Math::GSLSimAnFunc::fScale. private . Definition at line 150 of file GSLSimAnnealing.h. ◆ fX. std::vector<double> ROOT::Math::GSLSimAnFunc::fX. private . Definition at line 149 of file GSLSimAnnealing.h. Libraries for ROOT::Math::GSLSimAnFunc:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLSimAnnealing.h; math/mathmore/src/GSLSimAnnealing.cxx. ROOTMathGSLSimAnFunc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:7632,Guid,Guide,7632,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,1,['Guid'],['Guide']
Usability,"ale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate systematic shift from a given background scale error; ematrix: output; source: name of the error source; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixSysTau(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate error matrix from error in regularisation parameter; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate error matrix from error in input vector alone; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat); propagate error matrix vyy to the result; vyy: error matrix on input data fY; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixTotal(TH2* ematrix, const Int_t* binMap = 0); get total error including statistical error; ematrix: output; binMap: see method GetEmatrix(). Double_t GetChi2Sys(void); calculate total chi**2 including systematic errors. void VectorMapToHist(TH1* hist_delta, const TMatrixDSparse* delta, const Int_t* binMap); sum over bins of *delta, as defined in binMap,fXToHist; hist_delta: histogram to return summed vector; delta: vector to sum and remap. TUnfoldSys(const TUnfoldSys& ). TMatrixDSparse * PrepareCorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixDSparse* dsys). void ScaleColumnsByVector(TMatrixDSparse* m, const TMatrixTBase<Double_t>* v) const. void GetEmatrixSysBackgroundUncorr(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE). » Last changed: root/hist:$Id: TUnfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:26298,clear,clearEmat,26298,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,9,['clear'],"['clear', 'clearEmat']"
Usability,"aling::GSLSimAnnealing ; (; GSLSimAnnealing && ; ). delete . Member Function Documentation. ◆ operator=() [1/2]. GSLSimAnnealing & ROOT::Math::GSLSimAnnealing::operator= ; (; const GSLSimAnnealing & ; rhs). delete . ◆ operator=() [2/2]. GSLSimAnnealing & ROOT::Math::GSLSimAnnealing::operator= ; (; GSLSimAnnealing && ; rhs). delete . ◆ Params() [1/2]. GSLSimAnParams & ROOT::Math::GSLSimAnnealing::Params ; (; ). inline . Definition at line 226 of file GSLSimAnnealing.h. ◆ Params() [2/2]. const GSLSimAnParams & ROOT::Math::GSLSimAnnealing::Params ; (; ); const. inline . Definition at line 227 of file GSLSimAnnealing.h. ◆ SetParams(). void ROOT::Math::GSLSimAnnealing::SetParams ; (; const GSLSimAnParams & ; params). inline . Definition at line 228 of file GSLSimAnnealing.h. ◆ Solve() [1/2]. int ROOT::Math::GSLSimAnnealing::Solve ; (; const ROOT::Math::IMultiGenFunction & ; func, . const double * ; x0, . const double * ; scale, . double * ; xmin, . bool ; debug = false . ). solve the simulated annealing given a multi-dim function, the initial vector parameters and a vector containing the scaling factors for the parameters ; Definition at line 183 of file GSLSimAnnealing.cxx. ◆ Solve() [2/2]. int ROOT::Math::GSLSimAnnealing::Solve ; (; GSLSimAnFunc & ; func, . bool ; debug = false . ). solve the simulated annealing given a GSLSimAnFunc object The object will contain the initial state at the beginning and the final minimum state at the end ; Definition at line 200 of file GSLSimAnnealing.cxx. Member Data Documentation. ◆ fParams. GSLSimAnParams ROOT::Math::GSLSimAnnealing::fParams. private . Definition at line 232 of file GSLSimAnnealing.h. Libraries for ROOT::Math::GSLSimAnnealing:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLSimAnnealing.h; math/mathmore/src/GSLSimAnnealing.cxx. ROOTMathGSLSimAnnealing. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnnealing.html:4020,Guid,Guide,4020,doc/master/classROOT_1_1Math_1_1GSLSimAnnealing.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnnealing.html,1,['Guid'],['Guide']
Usability,"alization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 46 of file RooExtendPdf.h. ◆ Streamer(). void RooExtendPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooExtendPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file RooExtendPdf.h. ◆ translate(). void RooExtendPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 177 of file RooExtendPdf.cxx. Member Data Documentation. ◆ _n. RooTemplateProxy<RooAbsReal> RooExtendPdf::_n. protected . Number of expected events. ; Definition at line 56 of file RooExtendPdf.h. ◆ _pdf. RooTemplateProxy<RooAbsPdf> RooExtendPdf::_pdf. protected . Input p.d.f. ; Definition at line 55 of file RooExtendPdf.h. ◆ _rangeName. const TNamed* RooExtendPdf::_rangeName = nullptr. protected . Name of subset range. ; Definition at line 57 of file RooExtendPdf.h. Libraries for RooExtendPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooExtendPdf.h; roofit/roofitcore/src/RooExtendPdf.cxx. RooExtendPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExtendPdf.html:81613,Guid,Guide,81613,doc/master/classRooExtendPdf.html,https://root.cern,https://root.cern/doc/master/classRooExtendPdf.html,1,['Guid'],['Guide']
Usability,"alizing an object of this class by two means: a. by using the environmental variables S3_ACCESS_KEY and S3_SECRET_KEY, or b. by specifying them when opening each file.; You can use AWS temporary security credentials (temporary access key and secret access key), but you must also give the associated session token. The token may be set in the S3_SESSION_TOKEN environmental variable, or on open in the TOKEN option.; The first method is convenient if all the S3 files you want to access are hosted by a single provider. The second one is more flexible as it allows you to specify which credentials to use on a per-file basis. See the documentation of the constructor of this class for details on the syntax.; For generating and signing the HTTP request, this class uses TS3HTTPRequest.; For more information on the details of S3 protocol please refer to: ""Amazon Simple Storage Service Developer Guide"": http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html; ""Amazon Simple Storage Service REST API Reference"" http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest.html ; Definition at line 68 of file TS3WebFile.h. Public Member Functions;  TS3WebFile (const char *url, Option_t *options="""");  Construct a TS3WebFile object. ;  ; virtual ~TS3WebFile ();  ; const TString & GetAccessKey () const;  ; const TString & GetBucket () const;  ; const TString & GetObjectKey () const;  ; const TString & GetSecretKey () const;  ; const TUrl & GetUrl () const;  ; TClass * IsA () const override;  ; Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf) override;  Read the nbuf blocks described in arrays pos and len. ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TWebFile;  TWebFile (const char *url, Option_t *opt="""");  Create a Web file object. ;  ;  TWebFile (TUrl url, Option_t *opt="""");  Create a Web file object. ;  ; virtual ~TWebFile (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:2295,Simpl,Simple,2295,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,1,['Simpl'],['Simple']
Usability,"all the graphs of this multigraph reverting values along X and/or Y axis. ;  ; void Print (Option_t *chopt="""") const override;  Print the list of graphs. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove this object from a list. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetMaximum (Double_t maximum=-1111);  Set multigraph maximum. ;  ; virtual void SetMinimum (Double_t minimum=-1111);  Set multigraph minimum. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiGraph.html:15505,Clear,Clear,15505,doc/master/classTMultiGraph.html,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html,1,['Clear'],['Clear']
Usability,"all to TSystem::Unlink . ;  ; virtual Int_t SendMsgToUsers (const char *, const char *=0);  Send a message to connected users. ;  ; virtual void SetAlias (const char *alias="""");  ; virtual void SetInvalid ();  ; virtual void SetMssUrl (const char *mss);  ; virtual Int_t SetROOTVersion (const char *);  ; virtual void ShowROOTVersions ();  ; virtual void ShowWorkers ();  Show available workers. ;  ; virtual void ShutdownSession (Int_t id);  ; virtual void ShutdownSession (TProof *p);  ; virtual Int_t Stat (const char *, FileStat_t &, const char *=0);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Tail (const char *, const char *=0, const char *=0);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMgrLite.html:4605,Clear,Clear,4605,doc/master/classTProofMgrLite.html,https://root.cern,https://root.cern/doc/master/classTProofMgrLite.html,1,['Clear'],['Clear']
Usability,all::fClass. private . Definition at line 56 of file TMethodCall.h. ◆ fDtorOnly. Bool_t TMethodCall::fDtorOnly. private . Definition at line 61 of file TMethodCall.h. ◆ fFunc. CallFunc_t* TMethodCall::fFunc. private . Definition at line 54 of file TMethodCall.h. ◆ fMethod. TString TMethodCall::fMethod. private . Definition at line 58 of file TMethodCall.h. ◆ fMetPtr. TFunction* TMethodCall::fMetPtr. private . Definition at line 57 of file TMethodCall.h. ◆ fOffset. Longptr_t TMethodCall::fOffset. private . Definition at line 55 of file TMethodCall.h. ◆ fParams. TString TMethodCall::fParams. private . Definition at line 59 of file TMethodCall.h. ◆ fProto. TString TMethodCall::fProto. private . Definition at line 60 of file TMethodCall.h. ◆ fRetType. EReturnType TMethodCall::fRetType. private . Definition at line 62 of file TMethodCall.h. ◆ kDouble. const EReturnType TMethodCall::kDouble = TInterpreter::EReturnType::kDouble. static . Definition at line 44 of file TMethodCall.h. ◆ kLong. const EReturnType TMethodCall::kLong = TInterpreter::EReturnType::kLong. static . Definition at line 43 of file TMethodCall.h. ◆ kNone. const EReturnType TMethodCall::kNone = TInterpreter::EReturnType::kNoReturnType. static . Definition at line 49 of file TMethodCall.h. ◆ kNoReturnType. const EReturnType TMethodCall::kNoReturnType = TInterpreter::EReturnType::kNoReturnType. static . Definition at line 47 of file TMethodCall.h. ◆ kOther. const EReturnType TMethodCall::kOther = TInterpreter::EReturnType::kOther. static . Definition at line 46 of file TMethodCall.h. ◆ kString. const EReturnType TMethodCall::kString = TInterpreter::EReturnType::kString. static . Definition at line 45 of file TMethodCall.h. Libraries for TMethodCall:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TMethodCall.h; core/meta/src/TMethodCall.cxx. TMethodCall. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:59 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodCall.html:31410,Guid,Guide,31410,doc/master/classTMethodCall.html,https://root.cern,https://root.cern/doc/master/classTMethodCall.html,1,['Guid'],['Guide']
Usability,"alled when system stops idleing.Definition TApplication.cxx:1907; TApplication::EStatusBitsEStatusBitsDefinition TApplication.h:43; TApplication::kProcessRemotely@ kProcessRemotelyDefinition TApplication.h:44; TApplication::kDefaultApplication@ kDefaultApplicationDefinition TApplication.h:45; TApplication::Iconifyvirtual void Iconify()Definition TApplication.h:131; TApplication::ReturnFromRunBool_t ReturnFromRun() constDefinition TApplication.h:153; TApplication::StartIdleingvirtual void StartIdleing()Called when system starts idleing.Definition TApplication.cxx:1896; TApplication::Runvirtual void Run(Bool_t retrn=kFALSE)Main application eventloop. Calls system dependent eventloop via gSystem.Definition TApplication.cxx:1860; TApplication::~TApplicationvirtual ~TApplication()TApplication dtor.Definition TApplication.cxx:210; TApplication::Lowervirtual void Lower()Definition TApplication.h:134; TApplication::OpenReferenceGuideForvoid OpenReferenceGuideFor(const TString &strippedClass)It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/st...Definition TApplication.cxx:1065; TApplication::HandleExceptionvirtual void HandleException(Int_t sig)Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingExcepti...Definition TApplication.cxx:590; TApplication::MakeBatchvirtual void MakeBatch()Switch to batch mode.Definition TApplication.cxx:1395; TApplication::OpenGitHubIssuevoid OpenGitHubIssue(const TString &type)It opens a GitHub issue in a web browser with prefilled ROOT version.Definition TApplication.cxx:1034; TApplication::Hidevirtual void Hide()Definition TApplication.h:130; TApplication::fReturnFromRunBool_t fReturnFromRunDefinition TApplication.h:62; TApplication::Initvirtual void Init()Definition TApplication.h:117; TApplication::fIdleCommandTString fIdleCommandDefinition TApplication.h:68; TApplication::Argvchar ** Argv() constDefinition TApplication.h:141; TApplication::fgGraphNee",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8h_source.html:13931,guid,guide,13931,doc/master/TApplication_8h_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8h_source.html,1,['guid'],['guide']
Usability,"allows us to avoid copying them during the grow.; 1024 // From the original LLVM implementation:; 1025 // FIXME: don't do this if they're efficiently moveable.; 1026 if (this->capacity() < RHSSize) {; 1027 if (this->Owns()) {; 1028 // Destroy current elements.; 1029 this->destroy_range(this->begin(), this->end());; 1030 }; 1031 this->set_size(0);; 1032 CurSize = 0;; 1033 this->grow(RHSSize);; 1034 } else if (CurSize) {; 1035 // Otherwise, use assignment for the already-constructed elements.; 1036 std::copy(RHS.begin(), RHS.begin() + CurSize, this->begin());; 1037 }; 1038 ; 1039 // Copy construct the new elements in place.; 1040 this->uninitialized_copy(RHS.begin() + CurSize, RHS.end(), this->begin() + CurSize);; 1041 ; 1042 // Set end.; 1043 this->set_size(RHSSize);; 1044 return *this;; 1045}; 1046 ; 1047template <typename T>; 1048RVecImpl<T> &RVecImpl<T>::operator=(RVecImpl<T> &&RHS); 1049{; 1050 // Avoid self-assignment.; 1051 if (this == &RHS); 1052 return *this;; 1053 ; 1054 // If the RHS isn't small, clear this vector and then steal its buffer.; 1055 if (!RHS.isSmall()) {; 1056 if (this->Owns()) {; 1057 this->destroy_range(this->begin(), this->end());; 1058 if (!this->isSmall()); 1059 free(this->begin());; 1060 }; 1061 this->fBeginX = RHS.fBeginX;; 1062 this->fSize = RHS.fSize;; 1063 this->fCapacity = RHS.fCapacity;; 1064 RHS.resetToSmall();; 1065 return *this;; 1066 }; 1067 ; 1068 // If we already have sufficient space, assign the common elements, then; 1069 // destroy any excess.; 1070 size_t RHSSize = RHS.size();; 1071 size_t CurSize = this->size();; 1072 if (CurSize >= RHSSize) {; 1073 // Assign common elements.; 1074 iterator NewEnd = this->begin();; 1075 if (RHSSize); 1076 NewEnd = std::move(RHS.begin(), RHS.end(), NewEnd);; 1077 ; 1078 // Destroy excess elements and trim the bounds.; 1079 if (this->Owns()); 1080 this->destroy_range(NewEnd, this->end());; 1081 this->set_size(RHSSize);; 1082 ; 1083 // Clear the RHS.; 1084 RHS.clear();; 1085 ; 1086 return *t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:36739,clear,clear,36739,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,2,['clear'],['clear']
Usability,"ally fast method, with no rounding errors (please refer to CERN 72-21 pp. 54-106).; The data is stored internally in a TVectorD, in the following way:. \[; \mathbf{x} = \left[\left(x_{0_0},\ldots,x_{{P-1}_0}\right),\ldots,; \left(x_{0_i},\ldots,x_{{P-1}_i}\right), \ldots\right]; \]. With \(P\) as defined in the class description. ; Definition at line 414 of file TPrincipal.cxx. ◆ Browse(). void TPrincipal::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TPrincipal object in the TBrowser. ; Reimplemented from TObject.; Definition at line 471 of file TPrincipal.cxx. ◆ Class(). static TClass * TPrincipal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPrincipal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPrincipal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 79 of file TPrincipal.h. ◆ Clear(). void TPrincipal::Clear ; (; Option_t * ; opt = """"). overridevirtual . Clear the data in Object. ; Notice, that's not possible to change the dimension of the original data. ; Reimplemented from TNamed.; Definition at line 494 of file TPrincipal.cxx. ◆ DeclFileName(). static const char * TPrincipal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 79 of file TPrincipal.h. ◆ GetCovarianceMatrix(). const TMatrixD * TPrincipal::GetCovarianceMatrix ; (; ); const. inline . Return the covariance matrix. ; NoteOnly the lower diagonal of the covariance matrix is computed by the class ; Definition at line 60 of file TPrincipal.h. ◆ GetEigenValues(). const TVectorD * TPrincipal::GetEigenValues ; (; ); const. inline . Definition at line 61 of file TPrincipal.h. ◆ GetEigenVectors(). const TMatrixD * TPrincipal::GetEigenVectors ; (; ); const. inline . Definition at line 62 of file TPrincipal.h. ◆ GetHistograms(). TList * TPrincipal::GetHistograms ; (; ); const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPrincipal.html:24226,Clear,Clear,24226,doc/master/classTPrincipal.html,https://root.cern,https://root.cern/doc/master/classTPrincipal.html,1,['Clear'],['Clear']
Usability,"ally, there is a pointer to TRecorderState object. This object changes whenever state of recorder is changed. States of recorder are the following:. INACTIVE Implemented in TRecorderInactive class. Default state after TRecorder object is created.; RECORDING Implemented in TRecorderRecording class.; REPLAYING Implemented in TRecorderReplaying class.; PAUSED Implemented in TRecorderPause class. Pause of replaying. Every command for TRecorder is just passed to TRecordeState object. Depending on the current state of recorder, this command is passed to some of the above mentioned classes and if valid, handled there.; Switching between states is not possible from outside. States are switched directly by state objects via:; ChangeState(TRecorderState* newstate, Bool_t deletePreviousState);; When recorder is switched to a new state, the old state object is typically deleted. The only exception is switching from REPLAYING state to PAUSED state. The previous state (REPLAYING) is not deleted in order to be used again after TRecorder::Resume call. STATE TRANSITIONS:. INACTIVE -> RECORDING via TRecorder::Start (Starts recording); RECORDING -> INACTIVE via TRecorder::Stop (Stops recording); INACTIVE -> REPLAYING via TRecorder::Replay (Starts replaying); REPLAYING -> INACTIVE via TRecorder::ReplayStop (Stops replaying); REPLAYING -> PAUSED via TRecorder::Pause (Pause replaying); PAUSED -> REPLAYING via TRecorder::Resume (Resumes replaying); PAUSED -> INACTIVE via TRecorder::ReplayStop (Stops paused replaying) . Definition at line 265 of file TRecorder.h. Public Types; enum  ERecorderState { kInactive; , kRecording; , kPaused; , kReplaying; };  ; enum  EReplayModes { kRealtime; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecorder.html:1724,Resume,Resume,1724,doc/master/classTRecorder.html,https://root.cern,https://root.cern/doc/master/classTRecorder.html,1,['Resume'],['Resume']
Usability,"allyDesugaredName(). bool ROOT::TMetaUtils::TClingLookupHelper::IsAlreadyPartiallyDesugaredName ; (; const std::string & ; nondef, . const std::string & ; nameLong . ). overridevirtual . Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 568 of file TClingUtils.cxx. ◆ IsDeclaredScope(). bool ROOT::TMetaUtils::TClingLookupHelper::IsDeclaredScope ; (; const std::string & ; base, . bool & ; isInlined . ). overridevirtual . Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 584 of file TClingUtils.cxx. ◆ ShuttingDownSignal(). void ROOT::TMetaUtils::TClingLookupHelper::ShuttingDownSignal ; (; ). overridevirtual . Implements TClassEdit::TInterpreterLookupHelper.; Definition at line 686 of file TClingUtils.cxx. ◆ WantDiags(). bool ROOT::TMetaUtils::TClingLookupHelper::WantDiags ; (; ); const. inlineprivate . Definition at line 172 of file TClingUtils.h. Member Data Documentation. ◆ fAutoParse. AutoParse_t ROOT::TMetaUtils::TClingLookupHelper::fAutoParse. private . Definition at line 169 of file TClingUtils.h. ◆ fExistingTypeCheck. ExistingTypeCheck_t ROOT::TMetaUtils::TClingLookupHelper::fExistingTypeCheck. private . Definition at line 168 of file TClingUtils.h. ◆ fInterpreter. cling::Interpreter* ROOT::TMetaUtils::TClingLookupHelper::fInterpreter. private . Definition at line 166 of file TClingUtils.h. ◆ fInterpreterIsShuttingDownPtr. bool* ROOT::TMetaUtils::TClingLookupHelper::fInterpreterIsShuttingDownPtr. private . Definition at line 170 of file TClingUtils.h. ◆ fNormalizedCtxt. TNormalizedCtxt* ROOT::TMetaUtils::TClingLookupHelper::fNormalizedCtxt. private . Definition at line 167 of file TClingUtils.h. ◆ fPDebug. const int* ROOT::TMetaUtils::TClingLookupHelper::fPDebug. private . Definition at line 171 of file TClingUtils.h. core/clingutils/res/TClingUtils.h; core/clingutils/src/TClingUtils.cxx. ROOTTMetaUtilsTClingLookupHelper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html:6114,Guid,Guide,6114,doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMetaUtils_1_1TClingLookupHelper.html,1,['Guid'],['Guide']
Usability,"aloader, TMVA::Types::kBDT, ""BDTG"", ""!H:!V:NTrees=1000:BoostType=Grad:Shrinkage=0.10:UseBaggedBoost:BaggedSampleFraction=0.50:nCuts=20:MaxDepth=2"");; if (Use[""MLP""]) // neural network; factory->BookMethod( dataloader, TMVA::Types::kMLP, ""MLP"", ""!H:!V:NeuronType=tanh:NCycles=1000:HiddenLayers=N+5,5:TestRate=5:EstimatorType=MSE"");; if (Use[""FDA_GA""]) // functional discriminant with GA minimizer; factory->BookMethod( dataloader, TMVA::Types::kFDA, ""FDA_GA"", ""H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1);(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=GA:PopSize=300:Cycles=3:Steps=20:Trim=True:SaveBestGen=1"" );; if (Use[""PDEFoam""]) // PDE-Foam approach; factory->BookMethod( dataloader, TMVA::Types::kPDEFoam, ""PDEFoam"", ""!H:!V:TailCut=0.001:VolFrac=0.0666:nActiveCells=500:nSampl=2000:nBin=5:Nmin=100:Kernel=None:Compress=T"" );; ; ; if (Use[""DL_CPU""]) {; TString layoutString(""Layout=TANH|100,TANH|50,TANH|10,LINEAR"");; TString trainingStrategyString(""TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,""; ""TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20"");; TString nnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:""; ""WeightInitialization=XAVIERUNIFORM:Architecture=GPU"");; nnOptions.Append("":"");; nnOptions.Append(layoutString);; nnOptions.Append("":"");; nnOptions.Append(trainingStrategyString);; factory->BookMethod(dataloader, TMVA::Types::kDL, ""DL_CPU"", nnOptions);; }; if (Use[""DL_GPU""]) {; TString layoutString(""Layout=TANH|100,TANH|50,TANH|10,LINEAR"");; TString trainingStrategyString(""TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,""; ""TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20"");; TString nnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:""; ""WeightInitialization=XAVIERUNIFORM:Architecture=GPU"");; nnOptions.Append("":"");; nnOptions.Append(layoutString);; nnOptions.Append("":"");; nnOptions.Append(trainingStrategyString);; factory->BookMethod(dataloader, TMVA::Types::kDL, ""DL_GPU"", nnOptions);; }; ; ; // Train",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:35973,Learn,LearningRate,35973,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['Learn'],['LearningRate']
Usability,"alog (const char *sel, Int_t sz, Long64_t fst, Long64_t ent);  Reset progress dialog. ;  ; void ResetProgressDialogStatus ();  ; Int_t Retrieve (const char *queryref, const char *path=0);  Send retrieve request for the query specified by ref. ;  ; Int_t Retrieve (Int_t query, const char *path=0);  Send retrieve request for the qry-th query in fQueries. ;  ; Int_t SavePerfTree (const char *pf=0, const char *qref=0);  Save performance information from TPerfStats to file 'pf'. ;  ; void SendDataSetStatus (const char *msg, UInt_t n, UInt_t tot, Bool_t st);  Send or notify data set status. ;  ; Bool_t SendingLogToWindow () const;  ; void SendLogToWindow (Bool_t mode);  ; void SetActive (Bool_t=kTRUE);  ; virtual void SetAlias (const char *alias="""");  Set an alias for this session. ;  ; void SetDataPoolUrl (const char *url);  ; virtual Int_t SetDataSetTreeName (const char *dataset, const char *treename);  Set/Change the name of the default tree. ;  ; void SetDrawFeedbackOption (TDrawFeedback *f, Option_t *opt);  Set draw feedback option. ;  ; void SetInputDataFile (const char *datafile);  Set the file to be used to optimally distribute the input data objects. ;  ; void SetLogLevel (Int_t level, UInt_t mask=TProofDebug::kAll);  Set server logging level. ;  ; void SetManager (TProofMgr *mgr);  Set manager and schedule its destruction after this for clean operations. ;  ; void SetMaxDrawQueries (Int_t max);  Set max number of draw queries whose results are saved. ;  ; Int_t SetParallel (Int_t nodes=-1, Bool_t random=kFALSE);  Tell PROOF how many slaves to use in parallel. ;  ; void SetParameter (const char *par, const char *value);  Set input list parameter. ;  ; void SetParameter (const char *par, Double_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Int_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long64_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long_t value);  Set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:17773,feedback,feedback,17773,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['feedback'],['feedback']
Usability,"already recorded in 2010/2011. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:50 Permalink . Re: Backward Compatibility . Hi ROOT user,; Thanks for your comment! And yes, backward compatibility is key in this area. I will do all I can do reduce the amount of code we need to maintain only for backward compatibility reasons - e.g. Reflex can hopefully be removed instead of being rewired to tap the clang AST (i.e. the cling reflection database). But at the same time we will make sure that all data stored by the experiments remains readable (ideally even from 2001 :-).; This is mostly an issue of type names; CINT has some non-obvious (and non-standard compliant) naming conventions for types, and we must make sure that cling continues to understand them. Or we cannot read an edm::TaggedVector anymore (because CINT would have called it an edm::TaggedVector).; We plan to release a snapshot of ROOT using cling in the third quarter of 2012; we will really appreciate feedback on problems with reading old files - as you correctly pointed out this is one of the most crucial ingredients of this project.; Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:50 Permalink . Thank you for clarifying a . Thank you for clarifying a transition plan, it is quite a reasonable approach. I just want to add a personal request to your wish list. Would it be possible to improve IO speed for reading? Very often analysis code is constrained by CPU/disk access limits when reading ntuples. The speed varies from ~100kHz for a tree with few float branches to ~200 Hz for complex data structure. A factor of few improvement for complex data can be a difference between requiring just one machine or a small farm. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Re: I/O Performance . Hi ROOT User,; We have dramatically improved the I/O performance over the last two years. If you use the latest production release also for writing data you mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:14341,feedback,feedback,14341,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['feedback'],['feedback']
Usability,"already"",name);; 1259 return nullptr;; 1260 }; 1261 }; 1262 TDirectoryFile *newdir = nullptr;; 1263 if (const char *slash = strchr(name,'/')) {; 1264 TString workname(name, Long_t(slash-name));; 1265 TDirectoryFile *tmpdir = nullptr;; 1266 GetObject(workname.Data(), tmpdir);; 1267 if (!tmpdir) {; 1268 tmpdir = (TDirectoryFile*)mkdir(workname.Data(),title);; 1269 if (!tmpdir) return nullptr;; 1270 }; 1271 if (!newdir) newdir = tmpdir;; 1272 tmpdir->mkdir(slash+1);; 1273 return newdir;; 1274 }; 1275 ; 1276 TDirectory::TContext ctxt(this);; 1277 ; 1278 newdir = new TDirectoryFile(name, title, """", this);; 1279 ; 1280 return newdir;; 1281}; 1282 ; 1283////////////////////////////////////////////////////////////////////////////////; 1284/// Purge lowest key cycles in a directory.; 1285///; 1286/// By default, only the highest cycle of a key is kept. Keys for which; 1287/// the ""KEEP"" flag has been set are not removed. See TKey::Keep().; 1288/// NOTE: This does not reduce the size of a TFile--; 1289/// the space is simply freed up to be overwritten.; 1290 ; 1291void TDirectoryFile::Purge(Short_t); 1292{; 1293 if (!IsWritable()) return;; 1294 ; 1295 TDirectory::TContext ctxt(this);; 1296 ; 1297 TKey *key;; 1298 TIter prev(GetListOfKeys(), kIterBackward);; 1299 ; 1300 while ((key = (TKey*)prev())) { // reverse loop on keys; 1301 TKey *keyprev = (TKey*)GetListOfKeys()->Before(key);; 1302 if (!keyprev) break;; 1303 if (key->GetKeep() == 0) {; 1304 if (strcmp(key->GetName(), keyprev->GetName()) == 0) {; 1305 key->Delete(); // Remove from the file.; 1306 delete key; // Remove from memory.; 1307 }; 1308 }; 1309 }; 1310 TFile *f = GetFile();; 1311 if (fModified && f) {; 1312 WriteKeys(); // Write new keys structure; 1313 WriteDirHeader(); // Write new directory header; 1314 f->WriteFree(); // Write new free segments list; 1315 f->WriteHeader(); // Write new file header; 1316 }; 1317}; 1318 ; 1319////////////////////////////////////////////////////////////////////////////////; 1320/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:43769,simpl,simply,43769,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['simpl'],['simply']
Usability,"als to calculated transformed fraction coefficients when a frozen reference frame is provided and projection integrals for similar transformations when a frozen reference range is provided. ; Definition at line 308 of file RooAddModel.cxx. ◆ IsA(). TClass * RooAddModel::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 131 of file RooAddModel.h. ◆ isDirectGenSafe(). bool RooAddModel::isDirectGenSafe ; (; const RooAbsArg & ; arg); const. overridevirtual . Direct generation is safe if all components say so. ; Reimplemented from RooAbsPdf.; Definition at line 646 of file RooAddModel.cxx. ◆ pdfList(). const RooArgList & RooAddModel::pdfList ; (; ); const. inline . Return list of component p.d.fs. ; Definition at line 66 of file RooAddModel.h. ◆ printMetaArgs(). void RooAddModel::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 702 of file RooAddModel.cxx. ◆ resetErrorCounters(). void RooAddModel::resetErrorCounters ; (; Int_t ; resetValue = 10). overridevirtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented from RooAbsPdf.; Definition at line 420 of file RooAddModel.cxx. ◆ selectNormalization(). void RooAddModel::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 599 of file RooAddModel.cxx. ◆ selectNormalizationRange(). void RooAddModel::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:88766,intuit,intuitively,88766,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,1,['intuit'],['intuitively']
Usability,"als/fit Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fit Directory Reference. Directory dependency graph for fit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ;  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ;  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ;  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ;  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ;  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ;  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ;  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ;  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ;  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ;  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ;  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ;  fitConvolution.C;   Tutorial for convolution of two functions ;  ;  fitConvolution.py;   Tutorial for convolution of two functions ;  ;  fitEllipseTGraphDLSF.cxx;  ;  fitEllipseTGraphRMM.cxx;  ;  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ;  fithist.C;   Example of fit where the model is histogram + function ;  ;  FitHistoInFile.C;   ;  ;  fitLinear.C;   Example of fitt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html:977,Simpl,Simple,977,doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,https://root.cern,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,1,['Simpl'],['Simple']
Usability,"als; // dictionary context after ResetGlobals().; 113 TString fSharedLibs; // Shared libraries loaded by G__loadfile().; 114 Int_t fGlobalsListSerial;// Last time we refreshed the ROOT list of globals.; 115 TString fIncludePath; // Interpreter include path.; 116 TString fRootmapLoadPath; // Dynamic load path for rootmap files.; 117 TEnv* fMapfile; // Association of classes to libraries.; 118 std::vector<std::string> fAutoLoadLibStorage; // A storage to return a const char* from GetClassSharedLibsForModule.; 119 std::map<size_t,std::vector<const char*>> fClassesHeadersMap; // Map of classes hashes and headers associated; 120 std::map<const cling::Transaction*,size_t> fTransactionHeadersMap; // Map which transaction contains which autoparse.; 121 std::set<size_t> fLookedUpClasses; // Set of classes for which headers were looked up already; 122 std::set<size_t> fPayloads; // Set of payloads; 123 std::set<const char*> fParsedPayloadsAddresses; // Set of payloads which were parsed; 124 std::hash<std::string> fStringHashFunction; // A simple hashing function; 125 std::unordered_set<const clang::NamespaceDecl*> fNSFromRootmaps; // Collection of namespaces fwd declared in the rootmaps; 126 TObjArray* fRootmapFiles; // Loaded rootmap files.; 127 Bool_t fLockProcessLine; // True if ProcessLine should lock gInterpreterMutex.; 128 Bool_t fCxxModulesEnabled;// True if C++ modules was enabled; 129 ; 130 std::unique_ptr<cling::Interpreter> fInterpreter; // The interpreter.; 131 std::unique_ptr<cling::MetaProcessor> fMetaProcessor; // The metaprocessor.; 132 ; 133 std::vector<cling::Value> *fTemporaries; // Stack of temporaries; 134 ROOT::TMetaUtils::TNormalizedCtxt *fNormalizedCtxt; // Which typedef to avoid stripping.; 135 ROOT::TMetaUtils::TClingLookupHelper *fLookupHelper; // lookup helper used by TClassEdit; 136 ; 137 void* fPrevLoadedDynLibInfo; // Internal info to mark the last loaded libray.; 138 std::vector<void*> fRegisterModuleDyLibs; // Stack of libraries currently runn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:4432,simpl,simple,4432,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['simpl'],['simple']
Usability,"alue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooPolynomialRooPolynomial implements a polynomial p.d.f of the form.Definition RooPolynomial.h:25; RooProdPdfEfficient implementation of a product of PDFs of the form.Definition RooProdPdf.h:33; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFit::BinsRooCmdArg Bins(Int_t nbin)Definition RooGlobalFunc.cxx:547; RooFit::ProjWDataRooCmdArg ProjWData(const RooAbsData &projData, bool binData=false)Definition RooGlobalFunc.cxx:179; RooFit::CutRooCmdArg Cut(const char *cutSpec)Definition RooGlobalFunc.cxx:320; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf316_llratioplotDefinition rf316_llratioplot.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x integrates over variables (y,z); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x averages using data variables (y,z); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) only the following components of the projection data will be used: (y,z); [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf316_llratioplot.C. tutorialsroofitrf316_llratioplot.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf316__llratioplot_8C.html:7280,Guid,Guide,7280,doc/master/rf316__llratioplot_8C.html,https://root.cern,https://root.cern/doc/master/rf316__llratioplot_8C.html,1,['Guid'],['Guide']
Usability,"alue is:; 67\f[{\partial^2\chi^2\over\partial\theta_i\partial\theta_k}\approx; 68Z_{ik}=; 69\sum^n_{j=1}{1\over\sigma^2_j}{\partial f_j\over\theta_i}; 70{\partial f_j\over\theta_k}\tag{5}; 71\f]; 72 ; 73Then the equations for parameter increments are; 74\f[\left(\partial\chi^2\over\partial\theta_i\right)_{\vec\theta={\vec\theta}^0}; 75+\sum_k Z_{ik}\cdot(\theta_k-\theta^0_k) = 0,; 76\qquad i=1\ldots m\tag{6}; 77\f]; 78 ; 79Remarkable feature of algorithm is the technique for step; 80restriction. For an initial value of parameter \f${\vec\theta}^0\f$ a; 81parallelepiped \f$P_0\f$ is built with the center at \f${\vec\theta}^0\f$ and; 82axes parallel to coordinate axes \f$\theta_i\f$. The lengths of; 83parallelepiped sides along i-th axis is \f$2b_i\f$, where \f$b_i\f$ is such a; 84value that the functions \f$f_j(\vec\theta)\f$ are quasi-linear all over; 85the parallelepiped.; 86 ; 87FUMILI takes into account simple linear inequalities in the form:; 88\f[; 89\theta_i^{\rm min}\le\theta_i\le\theta^{\rm max}_i\tag{7}; 90\f]; 91 ; 92They form parallelepiped \f$P\f$ (\f$P_0\f$ may be deformed by \f$P\f$).; 93Very similar step formulae are used in FUMILI for negative logarithm; 94of the likelihood function with the same idea - linearization of; 95function argument.; 96 ; 97*/; 98 ; 99 ; 100#include ""TFumili.h""; 101 ; 102#include <iostream>; 103#include ""TGraphAsymmErrors.h""; 104#include ""TF1.h""; 105#include ""TF2.h""; 106#include ""TF3.h""; 107#include ""TH1.h""; 108#include ""TMath.h""; 109#include ""TROOT.h""; 110#include ""TList.h""; 111#include ""TVirtualFitter.h""; 112 ; 113 ; 114extern void H1FitChisquareFumili(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; 115extern void H1FitLikelihoodFumili(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; 116extern void GraphFitChisquareFumili(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; 117 ; 118 ; 119ClassImp(TFumili);; 120 ; 121TFumili *gFumili=nullptr;; 122// Machine dependent va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:3480,simpl,simple,3480,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['simpl'],['simple']
Usability,"alue of fStreamerType.Definition TClass.cxx:6215; TClass::GetSharedLibsconst char * GetSharedLibs()Get the list of shared libraries containing the code for class cls.Definition TClass.cxx:3623; TClass::CalculateStreamerOffsetvoid CalculateStreamerOffset() constCalculate the offset between an object of this class to its base class TObject.Definition TClass.cxx:2183; TClass::GetMissingDictionariesForPairElementsvoid GetMissingDictionariesForPairElements(TCollection &result, TCollection &visited, bool recurse)Definition TClass.cxx:3973; TClass::ReplaceWithvoid ReplaceWith(TClass *newcl) constDefinition TClass.cxx:4142; TClass::RegisterAddressInRepositoryvoid RegisterAddressInRepository(const char *where, void *location, const TClass *what) constDefinition TClass.cxx:290; TClass::PropertyLong_t Property() const overrideReturns the properties of the TClass as a bit field stored as a Long_t value.Definition TClass.cxx:6086; TClass::HasDefaultConstructorBool_t HasDefaultConstructor(Bool_t testio=kFALSE) constReturn true if we have access to a constructor usable for I/O.Definition TClass.cxx:7393; TClass::GetMenuItemsvoid GetMenuItems(TList *listitems)Returns list of methods accessible by context menu.Definition TClass.cxx:3874; TClass::SetNewvoid SetNew(ROOT::NewFunc_t newFunc)Install a new wrapper around 'new'.Definition TClass.cxx:6985; TClass::fIsAMethodstd::atomic< TMethodCall * > fIsAMethodDefinition TClass.h:231; TClass::ReadRulesstatic Int_t ReadRules()Read the class.rules files from the default location:.Definition TClass.cxx:1820; TClass::CanSplitBaseAllowBool_t CanSplitBaseAllow()Pointer to the function implementing streaming for this class.Definition TClass.cxx:2247; TClass::MoveAddressInRepositoryvoid MoveAddressInRepository(const char *where, void *oldadd, void *newadd, const TClass *what) constDefinition TClass.cxx:337; TClass::fStreamerImplstd::atomic< StreamerImpl_t > fStreamerImplDefinition TClass.h:287; TClass::SetContextMenuTitlevoid SetContextMenuTitle(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:335119,usab,usable,335119,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['usab'],['usable']
Usability,"alue of fStreamerType.Definition TClass.cxx:6282; TClass::GetSharedLibsconst char * GetSharedLibs()Get the list of shared libraries containing the code for class cls.Definition TClass.cxx:3690; TClass::CalculateStreamerOffsetvoid CalculateStreamerOffset() constCalculate the offset between an object of this class to its base class TObject.Definition TClass.cxx:2250; TClass::GetMissingDictionariesForPairElementsvoid GetMissingDictionariesForPairElements(TCollection &result, TCollection &visited, bool recurse)Definition TClass.cxx:4040; TClass::ReplaceWithvoid ReplaceWith(TClass *newcl) constDefinition TClass.cxx:4209; TClass::RegisterAddressInRepositoryvoid RegisterAddressInRepository(const char *where, void *location, const TClass *what) constDefinition TClass.cxx:290; TClass::PropertyLong_t Property() const overrideReturns the properties of the TClass as a bit field stored as a Long_t value.Definition TClass.cxx:6153; TClass::HasDefaultConstructorBool_t HasDefaultConstructor(Bool_t testio=kFALSE) constReturn true if we have access to a constructor usable for I/O.Definition TClass.cxx:7460; TClass::GetMenuItemsvoid GetMenuItems(TList *listitems)Returns list of methods accessible by context menu.Definition TClass.cxx:3941; TClass::SetNewvoid SetNew(ROOT::NewFunc_t newFunc)Install a new wrapper around 'new'.Definition TClass.cxx:7052; TClass::fIsAMethodstd::atomic< TMethodCall * > fIsAMethodDefinition TClass.h:231; TClass::ReadRulesstatic Int_t ReadRules()Read the class.rules files from the default location:.Definition TClass.cxx:1887; TClass::CanSplitBaseAllowBool_t CanSplitBaseAllow()Pointer to the function implementing streaming for this class.Definition TClass.cxx:2314; TClass::MoveAddressInRepositoryvoid MoveAddressInRepository(const char *where, void *oldadd, void *newadd, const TClass *what) constDefinition TClass.cxx:337; TClass::fStreamerImplstd::atomic< StreamerImpl_t > fStreamerImplDefinition TClass.h:287; TClass::SetContextMenuTitlevoid SetContextMenuTitle(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:337757,usab,usable,337757,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['usab'],['usable']
Usability,"alueProp = kTRUE, Bool_t shapeProp = kFALSE); Bool_taddThreshold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooThresholdCategory.html:2137,clear,clearShapeDirty,2137,root/html532/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html532/RooThresholdCategory.html,1,['clear'],['clearShapeDirty']
Usability,"alueProp = kTRUE, Bool_t shapeProp = kFALSE); Bool_taddThreshold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooThresholdCategory.html:2137,clear,clearShapeDirty,2137,root/html528/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html528/RooThresholdCategory.html,2,['clear'],['clearShapeDirty']
Usability,alues are mandatory for the normalisation in the reader application !!! ; Implements TMVA::MethodBase.; Definition at line 357 of file MethodHMatrix.cxx. ◆ ReadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::MethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). void TMVA::MethodHMatrix::ReadWeightsFromXML ; (; void * ; wghtnode). virtual . read weights from XML file ; Implements TMVA::MethodBase.; Definition at line 340 of file MethodHMatrix.cxx. ◆ Streamer(). virtual void TMVA::MethodHMatrix::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodHMatrix::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 114 of file MethodHMatrix.h. ◆ Train(). void TMVA::MethodHMatrix::Train ; (; void ; ). virtual . computes H-matrices for signal and background samples ; Implements TMVA::MethodBase.; Definition at line 162 of file MethodHMatrix.cxx. Member Data Documentation. ◆ fInvHMatrixB. TMatrixD* TMVA::MethodHMatrix::fInvHMatrixB. private . inverse H-matrix (background) ; Definition at line 107 of file MethodHMatrix.h. ◆ fInvHMatrixS. TMatrixD* TMVA::MethodHMatrix::fInvHMatrixS. private . inverse H-matrix (signal) ; Definition at line 106 of file MethodHMatrix.h. ◆ fVecMeanB. TVectorD* TMVA::MethodHMatrix::fVecMeanB. private . vector of mean values (background) ; Definition at line 109 of file MethodHMatrix.h. ◆ fVecMeanS. TVectorD* TMVA::MethodHMatrix::fVecMeanS. private . vector of mean values (signal) ; Definition at line 108 of file MethodHMatrix.h. Libraries for TMVA::MethodHMatrix:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodHMatrix.h; tmva/tmva/src/MethodHMatrix.cxx. TMVAMethodHMatrix. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodHMatrix.html:35780,Guid,Guide,35780,doc/master/classTMVA_1_1MethodHMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodHMatrix.html,1,['Guid'],['Guide']
Usability,"al~TEveCompositeFrameInPack(); voidTObject::AbstractMethod(const char* method) const; virtual voidTEveCompositeFrame::AcquireEveWindow(TEveWindow* ew); voidTEveCompositeFrame::ActionPressed(); virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidDestroy(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCompositeFrameInPack.html:1533,Clear,Clear,1533,root/html528/TEveCompositeFrameInPack.html,https://root.cern,https://root.cern/root/html528/TEveCompositeFrameInPack.html,6,['Clear'],['Clear']
Usability,"am & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; double evaluate () const override;  Calculate current value of this object. ;  ; RooFormula & formula () const;  ; bool isValidReal (double, bool) const override;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Propagate server changes to embedded formula object. ;  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenericPdf.html:61337,simpl,simple,61337,doc/master/classRooGenericPdf.html,https://root.cern,https://root.cern/doc/master/classRooGenericPdf.html,1,['simpl'],['simple']
Usability,"am ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void CreateMLPOptions (TString);  translates options from option string into TMlpANN language ;  ; void DeclareOptions ();  define the options (their key words) that can be set in the option string ;  ; void Init (void);  default initialisations ;  ; void ProcessOptions ();  builds the neural network as specified by the user ;  . Private Attributes; TString fHiddenLayer;  string containing the hidden layer structure ;  ; TString fLayerSpec;  Layer specification option. ;  ; TString fLearningMethod;  the learning method (given via option string) ;  ; TTree * fLocalTrainingTree;  local copy of training tree ;  ; TMultiLayerPerceptron * fMLP;  the TMLP ;  ; TString fMLPBuildOptions;  option string to build the mlp ;  ; Int_t fNcycles;  number of training cycles ;  ; Double_t fValidationFraction;  fraction of events in training tree used for cross validation ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:26667,learn,learning,26667,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,1,['learn'],['learning']
Usability,"am an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooGenericPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file RooGenericPdf.h. ◆ translate(). void RooGenericPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overrideprotectedvirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 205 of file RooGenericPdf.cxx. ◆ writeToStream(). void RooGenericPdf::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to given stream. ; Reimplemented from RooAbsReal.; Definition at line 196 of file RooGenericPdf.cxx. Member Data Documentation. ◆ _actualVars. RooListProxy RooGenericPdf::_actualVars. protected . Definition at line 67 of file RooGenericPdf.h. ◆ _formExpr. TString RooGenericPdf::_formExpr. protected . Formula expression string. ; Definition at line 78 of file RooGenericPdf.h. ◆ _formula. RooFormula* RooGenericPdf::_formula = nullptr. mutableprotected . ! Formula engine ; Definition at line 77 of file RooGenericPdf.h. Libraries for RooGenericPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooGenericPdf.h; roofit/roofitcore/src/RooGenericPdf.cxx. RooGenericPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenericPdf.html:82316,Guid,Guide,82316,doc/master/classRooGenericPdf.html,https://root.cern,https://root.cern/doc/master/classRooGenericPdf.html,1,['Guid'],['Guide']
Usability,"am for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_subpads.cxx;  draw_th1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxx;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:165397,learn,learn,165397,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['learn'],['learn']
Usability,"am prior to adding the covariance matrix contribution. Returns the covariance matrix contribution from shifting the given uncertainty source within one sigma ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1113 of file TUnfoldSys.cxx. ◆ GetEmatrixSysTau(). void TUnfoldSys::GetEmatrixSysTau ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance matrix contribution from error on regularisation parameter ; Parameters. [in,out]ematrixoutput histogram ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result from the assigned uncertainty on the parameter tau, see method SetTauError(). ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1176 of file TUnfoldSys.cxx. ◆ GetEmatrixSysUncorr(). void TUnfoldSys::GetEmatrixSysUncorr ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). Covariance contribution from uncorrelated uncertainties of the response matrix. ; Parameters. [in,out]ematrixcovariance matrix histogram ; [in]binMapmapping of histogram bins ; [in]clearEmatif true, ematrix is cleared prior to adding this covariance matrix contribution. This method propagates the uncertainties of the response matrix histogram, specified with the constructor, to the unfolding result. It is assumed that the entries of that histogram are bin-to-bin uncorrelated. In many cases this corresponds to the ""Monte Carlo statistical uncertainties"". ; The array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 760 of file TUn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:41536,clear,clearEmat,41536,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['clear'],['clearEmat']
Usability,"am using GL (box option). ;  ; file  gldemos.C;  Menu for running GL demos. ;  ; file  glh3c.C;  Display a 3D histogram using GL (box option). ;  ; file  glparametric.C;  Show rendering of parametric surfaces. ;  ; file  glparametrics2.C;  Show rendering of parametric surfaces. ;  ; file  glrose.C;  Render a TF2 looking like a rose. ;  ; file  glsurfaces.C;  Various surfaces rendered with GL. ;  ; file  gltf3.C;  Draws the Klein bottle. ;  ; file  glViewerExercise.C;  Script showing how to use the GL viewer API to animate a picture. ;  ; file  glViewerLOD.C;  To set the Level Of Details when rendering geometry shapes. ;  ; file  glvox1.C;  This macro demonstrates how to use ""glcol"" option for TH3. ;  ; file  glvox2.C;  This macro demonstrates how to use ""glcol"" option for TH3 and how to create user defined TRANSFER FUNCTION: transfer function maps bin value to voxel's opacity. ;  ; file  grad.C;  This macro demonstrates how to create and use linear gradients to fill a histogram or a pad. ;  ; file  grad2.C;  Gradient fill with transparency and the ""SAME"" option. ;  ; file  gradients.C;  Features: ;  ; file  gviz3d.C;  Simple TStructViewer tutorial. ;  ; file  nucleus.C;  Model of a nucleus built from TGeo classes. ;  ; file  parallelcoordtrans.C;  Script illustrating the use of transparency with ||-Coord. ;  ; file  radialgradients.C;  This tutorial demonstrates how to use radial gradients, custom colors, transparency. ;  ; file  transp.C;  This demo shows how to use transparency. ;  ; file  transp_text.C;  This macro is based on labels1.C by Rene Brun. ;  ; file  transparentpad.C;  This macro demonstrates semi-transparent pads. ;  ; file  viewer3DLocal.C;  Demonstrates 3D viewer architecture TVirtualViewer3D and TBuffer3D in the local frame. ;  ; file  viewer3DMaster.C;  Demonstrates 3D viewer architecture TVirtualViewer3D and TBuffer3D in the master frame. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__gl.html:1379,Simpl,Simple,1379,doc/master/group__tutorial__gl.html,https://root.cern,https://root.cern/doc/master/group__tutorial__gl.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,"ame = 0); RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData); virtual~RooCompositeDataStore(); voidTObject::AbstractMethod(const char* method) const; virtual RooAbsArg*addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); virtual RooArgSet*addColumns(const RooArgList& varList); virtual voidappend(RooAbsDataStore& other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidattachBuffers(const RooArgSet& extObs); virtual voidTObject::Browse(TBrowser* b); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); const RooArgSet&RooAbsDataStore::cachedVars() const; virtual const RooAbsArg*cacheOwner(); virtual Bool_tchangeObservableName(const char* from, const char* to); virtual voidRooAbsDataStore::checkInit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsDataStore*clone(const char* newname = 0) const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsDataStore::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsDataStore::dirtyProp() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voiddump(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCompositeDataStore.html:1700,Clear,Clear,1700,root/html534/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html534/RooCompositeDataStore.html,1,['Clear'],['Clear']
Usability,"ame = x.frame(Title=""Projection on X with LLratio(y,z)>0.7"", Bins=40); dataSel.plotOn(frame); ; # Perform parallel projection using MC integration of pdf using given input dataSet.; # In self mode the data-weighted average of the pdf is calculated by splitting the; # input dataset in N equal pieces and calculating in parallel the weighted average; # one each subset. The N results of those calculations are then weighted into the; # final result; ; # Use four processes; model.plotOn(frame, ProjWData=dataSel, NumCPU=4); ; c = ROOT.TCanvas(""rf603_multicpu"", ""rf603_multicpu"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.6); frame.Draw(); ; c.SaveAs(""rf603_multicpu.png""); [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- Command timer: Real time 0:00:00, CP time 0.130; [#1] INFO:Minimization -- Session timer: Real time 0:00:00, CP time 0.130; [#1] INFO:Minimization -- Command timer: Real time 0:00:00, CP time 0.010; [#1] INFO:Minimization -- Session timer: Real time 0:00:00, CP time 0.140, 2 slices; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x averages using data variables (y,z); [#1] INFO:Plotting -- RooAbsReal::plotOn(model) only the following components of the projection data will be used: (y,z); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf603_multicpu.py. tutorialsroofitrf603_multicpu.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf603__multicpu_8py.html:4098,Guid,Guide,4098,doc/master/rf603__multicpu_8py.html,https://root.cern,https://root.cern/doc/master/rf603__multicpu_8py.html,1,['Guid'],['Guide']
Usability,"ame AFloat > . AFloat TMVA::DNN::TCpuMatrix< AFloat >::operator() ; (; size_t ; i, . size_t ; j . ); const. inline . Return matrix element in row i and column j. ; Definition at line 161 of file CpuMatrix.h. ◆ operator=() [1/3]. template<typename AFloat > . TCpuMatrix & TMVA::DNN::TCpuMatrix< AFloat >::operator= ; (; const TCpuMatrix< AFloat > & ; ). default . ◆ operator=() [2/3]. template<typename AFloat > . TCpuMatrix< AFloat > & TMVA::DNN::TCpuMatrix< AFloat >::operator= ; (; const TMatrixT< AFloat > & ; ). copy from a TMAtrixT . ; Deep copy without re-creating a new buffer . ◆ operator=() [3/3]. template<typename AFloat > . TCpuMatrix & TMVA::DNN::TCpuMatrix< AFloat >::operator= ; (; TCpuMatrix< AFloat > && ; ). default . ◆ Print(). template<typename AFloat > . void TMVA::DNN::TCpuMatrix< AFloat >::Print ; (; ); const. inline . Definition at line 175 of file CpuMatrix.h. ◆ Zero(). template<typename AFloat > . void TMVA::DNN::TCpuMatrix< AFloat >::Zero. Clear content of the matrix and initialize to zero elements. ; Definition at line 269 of file CpuMatrix.h. Member Data Documentation. ◆ fBuffer. template<typename AFloat > . TCpuBuffer<AFloat> TMVA::DNN::TCpuMatrix< AFloat >::fBuffer. The buffer holding the matrix elements in column-major format. ; Definition at line 91 of file CpuMatrix.h. ◆ fNCols. template<typename AFloat > . size_t TMVA::DNN::TCpuMatrix< AFloat >::fNCols. private . Definition at line 94 of file CpuMatrix.h. ◆ fNRows. template<typename AFloat > . size_t TMVA::DNN::TCpuMatrix< AFloat >::fNRows. private . Definition at line 95 of file CpuMatrix.h. ◆ fOnes. template<typename AFloat > . std::vector< AFloat > TMVA::DNN::TCpuMatrix< AFloat >::fOnes {}. staticprivate . Vector filled with ones used for BLAS calls. ; Definition at line 88 of file CpuMatrix.h. tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h; tmva/tmva/src/DNN/Architectures/Cpu/CpuMatrix.cxx. TMVADNNTCpuMatrix. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Ti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html:10113,Clear,Clear,10113,doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html,1,['Clear'],['Clear']
Usability,"ame behaviour as a TF1. Example of a function. TF2 *f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; TF12 *f12 = new TF12(""f12"",f2,0.1,""y"");; f12->Draw();. Function Members (Methods); public:. virtual~TF12(); voidTObject::AbstractMethod(const char* method) const; static voidTF1::AbsValue(Bool_t reject = kTRUE); virtual voidTF1::AddParameter(const TString& name, Double_t value); virtual Bool_tTF1::AddToGlobalList(Bool_t on = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTF1::Browse(TBrowser* b); static voidTF1::CalcGaussLegendreSamplingPoints(Int_t num, Double_t* x, Double_t* w, Double_t eps = 3.0E-11); virtual Double_tTF1::CentralMoment(Double_t n, Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 9.9999999999999995E-7); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& f12) const; virtual TH1*TF1::CreateHistogram(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tTF1::Derivative(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; virtual Double_tTF1::Derivative2(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; virtual Double_tTF1::Derivative3(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; static Double_tTF1::DerivativeError(); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTF1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTF1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TF1*DrawCopy(Option_t* option = """") const; virtual TObject*TF1::DrawDerivative(Option_t* option = ""al"")MENU ; virtual voidTF1::DrawF1(Double_t xmin, Double_t xmax, Option_t* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF12.html:1187,Clear,Clear,1187,root/html604/TF12.html,https://root.cern,https://root.cern/root/html604/TF12.html,1,['Clear'],['Clear']
Usability,ame of the state. ; Reimplemented from RooPrintable.; Definition at line 53 of file RooCatTypeLegacy.cxx. ◆ printTitle(). void RooCatType::printTitle ; (; std::ostream & ; os); const. overridevirtual . Print the title of the state. ; Reimplemented from RooPrintable.; Definition at line 63 of file RooCatTypeLegacy.cxx. ◆ printValue(). void RooCatType::printValue ; (; std::ostream & ; os); const. overridevirtual . Print the value (index integer) of the state. ; Reimplemented from RooPrintable.; Definition at line 83 of file RooCatTypeLegacy.cxx. ◆ SetName(). void RooCatType::SetName ; (; const Text_t * ; name). Constructor with name argument. ; Definition at line 39 of file RooCatTypeLegacy.cxx. ◆ setVal(). void RooCatType::setVal ; (; Int_t ; newValue). inline . Definition at line 82 of file RooCatTypeLegacy.h. ◆ Streamer(). void RooCatType::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooCatType::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 104 of file RooCatTypeLegacy.h. Friends And Related Symbol Documentation. ◆ RooAbsCategory. friend class RooAbsCategory. friend . Definition at line 100 of file RooCatTypeLegacy.h. ◆ RooAbsCategoryLValue. friend class RooAbsCategoryLValue. friend . Definition at line 99 of file RooCatTypeLegacy.h. Member Data Documentation. ◆ _label. char RooCatType::_label[256]. protected . State name. ; Definition at line 102 of file RooCatTypeLegacy.h. ◆ _value. Int_t RooCatType::_value = 0. protected . Index value. ; Definition at line 101 of file RooCatTypeLegacy.h. Libraries for RooCatType:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooFitLegacy/RooCatTypeLegacy.h; roofit/roofitcore/src/RooFitLegacy/RooCatTypeLegacy.cxx. RooCatType. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCatType.html:18925,Guid,Guide,18925,doc/master/classRooCatType.html,https://root.cern,https://root.cern/doc/master/classRooCatType.html,1,['Guid'],['Guide']
Usability,"ame or title of the window changed - propagate to frames.; Virtual from TEveElement. void PopulateEmptyFrame(TEveCompositeFrame* ef); Populate given frame-slot - intended for initial population; of a new slot or low-level window-swapping.; No layout or window-mapping is done. void SwapWindow(TEveWindow* w); Swap frames with the given window. void SwapWindowWithCurrent(); Swap frames with the current window. void UndockWindow(); Undock the window - put it into a dedicated main-frame. void UndockWindowDestroySlot(); Undock the window - put it into a dedicated main-frame.; The old window slot is destroyed. void ReplaceWindow(TEveWindow* w); Replace this window with the passed one.; Eve parentship is properly handled.; This will most likely lead to the destruction of this window.; Layout is called on the frame. void DestroyWindow(); Destroy eve-window - replace it with an empty frame-slot. void DestroyWindowAndSlot(); Destroy eve-window and its frame-slot. void ClearEveFrame(); Clears eve-frame associated with this window.; This is used in special case when the window is embedded in a foreign; GUI container and gets deleted from this side.; In particular, this happens when TRootBrowser closes a tab. void SetShowTitleBar(Bool_t x); Set display state of the title-bar.; This is forwarded to eve-frame. Bool_t IsCurrent() const; Returns true if this window is the current one. void MakeCurrent(); Make this window current. void SetCurrent(Bool_t curr); Set current state of this eve-window.; Protected method - called by window-manager. Bool_t IsAncestorOf(TEveWindow* win); Returns true if this is an ancestor of win. void TitleBarClicked(); Slot for clicking on the title-bar.; The wish that this window becomes the current one is sent to; the window-manager. TEveWindowSlot* CreateDefaultWindowSlot(); Create a default window slot.; Static helper. TEveWindowSlot* CreateWindowMainFrame(TEveWindow* eve_parent = 0); Create a new main-frame and populate it with a default window-slot.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindow.html:22222,Clear,ClearEveFrame,22222,root/html528/TEveWindow.html,https://root.cern,https://root.cern/root/html528/TEveWindow.html,12,['Clear'],"['ClearEveFrame', 'Clears']"
Usability,ame widget as a C++ statement(s) on output stream out. ; Reimplemented from TGCompositeFrame.; Definition at line 457 of file TGDockableFrame.cxx. ◆ SetFixedSize(). void TGDockableFrame::SetFixedSize ; (; Bool_t ; fixed). inline . Definition at line 132 of file TGDockableFrame.h. ◆ SetWindowName(). void TGDockableFrame::SetWindowName ; (; const char * ; name). overridevirtual . Set window name so it appear as title of the undock window. ; Reimplemented from TGWindow.; Definition at line 445 of file TGDockableFrame.cxx. ◆ ShowContainer(). void TGDockableFrame::ShowContainer ; (; ). Show dock container. ; Definition at line 357 of file TGDockableFrame.cxx. ◆ Streamer(). void TGDockableFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGDockableFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 139 of file TGDockableFrame.h. ◆ UndockContainer(). void TGDockableFrame::UndockContainer ; (; ). Undock container. ; Definition at line 286 of file TGDockableFrame.cxx. ◆ Undocked(). virtual void TGDockableFrame::Undocked ; (; ). inlinevirtual . Definition at line 113 of file TGDockableFrame.h. Friends And Related Symbol Documentation. ◆ TGUndockedFrame. friend class TGUndockedFrame. friend . Definition at line 83 of file TGDockableFrame.h. Member Data Documentation. ◆ fButtons. TGCompositeFrame* TGDockableFrame::fButtons. protected . container containing dock and hide buttons ; Definition at line 97 of file TGDockableFrame.h. ◆ fContainer. TGCompositeFrame* TGDockableFrame::fContainer. protected . container containing dockable frame ; Definition at line 96 of file TGDockableFrame.h. ◆ fDeleted. Bool_t TGDockableFrame::fDeleted. protected . kTRUE if it is being deleted ; Definition at line 93 of file TGDockableFrame.h. ◆ fDockButton. TGDockButton* TGDockableFrame::fDockButton. protected . dock button ; Definition at line 98 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockableFrame.html:38741,Undo,UndockContainer,38741,doc/master/classTGDockableFrame.html,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html,1,['Undo'],['UndockContainer']
Usability,"ame x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGCheckButton::fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedSelect(const TGWindow* p, Int_t id); Create pattern select button. ~TGedSelect(); Destructor of pattern select button. Bool_t HandleButton(Event_t* event); Handle mouse button events in pattern select button. void Enable(); Set widget state flag (kTRUE=enabled, kFALSE=disabled). void Disable(); Clear widget state flag. void DoRedraw(); Draw separator and arrow. void DrawTriangle(GContext_t gc, Int_t x, Int_t y); Draw small triangle. void SetPopup(TGedPopup* p); { fPopup = p; }. » Author: Marek Biskup, Ilka Antcheva 24/07/03 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGedSelect.html:23456,Clear,Clear,23456,root/html534/TGedSelect.html,https://root.cern,https://root.cern/root/html534/TGedSelect.html,1,['Clear'],['Clear']
Usability,"ame); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tCancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofLite.html:2162,Clear,ClearData,2162,root/html534/TProofLite.html,https://root.cern,https://root.cern/root/html534/TProofLite.html,3,['Clear'],['ClearData']
Usability,"ame, '.');; 7579 if(ext && ((strcmp(ext, "".csv"") == 0) || (strcmp(ext, "".CSV"") == 0)) && delimiter == ' ') {; 7580 delimiter = ',';; 7581 }; 7582 return ReadStream(in, branchDescriptor, delimiter);; 7583}; 7584 ; 7585////////////////////////////////////////////////////////////////////////////////; 7586/// Determine which newline this file is using.; 7587/// Return '\\r' for Windows '\\r\\n' as that already terminates.; 7588 ; 7589char TTree::GetNewlineValue(std::istream &inputStream); 7590{; 7591 Long_t inPos = inputStream.tellg();; 7592 char newline = '\n';; 7593 while(true) {; 7594 char c = 0;; 7595 inputStream.get(c);; 7596 if(!inputStream.good()) {; 7597 Error(""ReadStream"",""Error reading stream: no newline found."");; 7598 return 0;; 7599 }; 7600 if(c == newline) break;; 7601 if(c == '\r') {; 7602 newline = '\r';; 7603 break;; 7604 }; 7605 }; 7606 inputStream.clear();; 7607 inputStream.seekg(inPos);; 7608 return newline;; 7609}; 7610 ; 7611////////////////////////////////////////////////////////////////////////////////; 7612/// Create or simply read branches from an input stream.; 7613///; 7614/// \see reference information for TTree::ReadFile; 7615 ; 7616Long64_t TTree::ReadStream(std::istream& inputStream, const char *branchDescriptor, char delimiter); 7617{; 7618 char newline = 0;; 7619 std::stringstream ss;; 7620 std::istream *inTemp;; 7621 Long_t inPos = inputStream.tellg();; 7622 if (!inputStream.good()) {; 7623 Error(""ReadStream"",""Error reading stream"");; 7624 return 0;; 7625 }; 7626 if (inPos == -1) {; 7627 ss << std::cin.rdbuf();; 7628 newline = GetNewlineValue(ss);; 7629 inTemp = &ss;; 7630 } else {; 7631 newline = GetNewlineValue(inputStream);; 7632 inTemp = &inputStream;; 7633 }; 7634 std::istream& in = *inTemp;; 7635 Long64_t nlines = 0;; 7636 ; 7637 TBranch *branch = nullptr;; 7638 Int_t nbranches = fBranches.GetEntries();; 7639 if (nbranches == 0) {; 7640 char *bdname = new char[4000];; 7641 char *bd = new char[100000];; 7642 Int_t nch = 0;; 7643 if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:299551,simpl,simply,299551,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['simpl'],['simply']
Usability,"ame, . Args &&... ; args . ). inline . Definition at line 307 of file RNTupleMetrics.hxx. ◆ ObserveMetrics(). void ROOT::Experimental::Detail::RNTupleMetrics::ObserveMetrics ; (; RNTupleMetrics & ; observee). Definition at line 90 of file RNTupleMetrics.cxx. ◆ operator=() [1/2]. RNTupleMetrics & ROOT::Experimental::Detail::RNTupleMetrics::operator= ; (; const RNTupleMetrics & ; other). delete . ◆ operator=() [2/2]. RNTupleMetrics & ROOT::Experimental::Detail::RNTupleMetrics::operator= ; (; RNTupleMetrics && ; other). default . ◆ Print(). void ROOT::Experimental::Detail::RNTupleMetrics::Print ; (; std::ostream & ; output, . const std::string & ; prefix = """" . ); const. Definition at line 66 of file RNTupleMetrics.cxx. Member Data Documentation. ◆ fCounters. std::vector<std::unique_ptr<RNTuplePerfCounter> > ROOT::Experimental::Detail::RNTupleMetrics::fCounters. private . Definition at line 290 of file RNTupleMetrics.hxx. ◆ fIsEnabled. bool ROOT::Experimental::Detail::RNTupleMetrics::fIsEnabled = false. private . Definition at line 293 of file RNTupleMetrics.hxx. ◆ fName. std::string ROOT::Experimental::Detail::RNTupleMetrics::fName. private . Definition at line 292 of file RNTupleMetrics.hxx. ◆ fObservedMetrics. std::vector<RNTupleMetrics *> ROOT::Experimental::Detail::RNTupleMetrics::fObservedMetrics. private . Definition at line 291 of file RNTupleMetrics.hxx. ◆ kNamespaceSeperator. constexpr char ROOT::Experimental::Detail::RNTupleMetrics::kNamespaceSeperator = '.'. staticconstexprprivate . Symbol to split metrics name from counter / sub metrics name. ; Definition at line 288 of file RNTupleMetrics.hxx. Libraries for ROOT::Experimental::Detail::RNTupleMetrics:. [legend]; The documentation for this class was generated from the following files:; tree/ntuple/v7/inc/ROOT/RNTupleMetrics.hxx; tree/ntuple/v7/src/RNTupleMetrics.cxx. ROOTExperimentalDetailRNTupleMetrics. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Detail_1_1RNTupleMetrics.html:5788,Guid,Guide,5788,doc/master/classROOT_1_1Experimental_1_1Detail_1_1RNTupleMetrics.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Detail_1_1RNTupleMetrics.html,1,['Guid'],['Guide']
Usability,"ame, . Double_t ; value = 0 . ). Adds variable to known variables, and reprocess formula. ; Definition at line 2569 of file TFormula.cxx. ◆ AddVariables(). void TFormula::AddVariables ; (; const TString * ; vars, . const Int_t ; size . ). Adds multiple variables. ; First argument is an array of pairs<TString,Double>, where first argument is name of variable, second argument represents value. size - number of variables passed in first argument ; Definition at line 2602 of file TFormula.cxx. ◆ Class(). static TClass * TFormula::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TFormula::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TFormula::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 289 of file TFormula.h. ◆ Clear(). void TFormula::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear the formula setting expression to empty and reset the variables and parameters containers. ; Reimplemented from TObject.; Definition at line 767 of file TFormula.cxx. ◆ Compile(). Int_t TFormula::Compile ; (; const char * ; expression = """"). Compile the given expression with Cling backward compatibility method to be used in combination with the empty constructor if no expression is given , the current stored formula (retrieved with GetExpFormula()) or the title is used. ; return 0 if the formula compilation is successful ; Definition at line 650 of file TFormula.cxx. ◆ Copy(). void TFormula::Copy ; (; TObject & ; object); const. overridevirtual . Copy this to obj. ; Reimplemented from TObject.; Definition at line 684 of file TFormula.cxx. ◆ DeclFileName(). static const char * TFormula::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 289 of file TFormula.h. ◆ DoAddParameter(). void TFormula::DoAddParameter ; (; const TString & ; name, . Double_t ; value, . bool ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormula.html:31808,Clear,Clear,31808,doc/master/classTFormula.html,https://root.cern,https://root.cern/doc/master/classTFormula.html,1,['Clear'],['Clear']
Usability,"ame, TGTextEdit, TGSearchDialog, TGPrintDialog, TGGotoDialog, TGTextEditor, TGTextView, TGTextViewostream, TGToolBar, TGToolTip, TGView, TGViewFrame, TRootBrowser, TRootBrowserLite, TRootCanvas, TRootControlBar, TRootDialog, TRootHelpDialog, TGRecorder, TProofProgressLog, TNewChainDlg, TNewQueryDlg, TUploadDataSetDlg, TSessionServerFrame, TSessionFrame, TSessionQueryFrame, TSessionOutputFrame, TSessionInputFrame, TSessionViewer, and TTreeViewer. ◆ StreamerNVirtual(). void TGCompositeFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 370 of file TGFrame.h. ◆ TranslateCoordinates(). Bool_t TGCompositeFrame::TranslateCoordinates ; (; TGFrame * ; child, . Int_t ; x, . Int_t ; y, . Int_t & ; fx, . Int_t & ; fy . ). virtual . Translate coordinates to child frame. ; Definition at line 1332 of file TGFrame.cxx. Member Data Documentation. ◆ fgDefaultHints. TGLayoutHints * TGCompositeFrame::fgDefaultHints = nullptr. staticprotected . Definition at line 297 of file TGFrame.h. ◆ fLayoutBroken. Bool_t TGCompositeFrame::fLayoutBroken. protected . no layout manager is used ; Definition at line 293 of file TGFrame.h. ◆ fLayoutManager. TGLayoutManager* TGCompositeFrame::fLayoutManager. protected . layout manager ; Definition at line 291 of file TGFrame.h. ◆ fList. TList* TGCompositeFrame::fList. protected . container of frame elements ; Definition at line 292 of file TGFrame.h. ◆ fMapSubwindows. Bool_t TGCompositeFrame::fMapSubwindows. protected . kTRUE - map subwindows ; Definition at line 295 of file TGFrame.h. ◆ fMustCleanup. Int_t TGCompositeFrame::fMustCleanup. protected . cleanup mode (see EFrameCleanup) ; Definition at line 294 of file TGFrame.h. Libraries for TGCompositeFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGFrame.h; gui/gui/src/TGFrame.cxx. TGCompositeFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCompositeFrame.html:50413,Guid,Guide,50413,doc/master/classTGCompositeFrame.html,https://root.cern,https://root.cern/doc/master/classTGCompositeFrame.html,1,['Guid'],['Guide']
Usability,"ame, const char *title, RooAbsReal &x);  Constructor of flat polynomial function. ;  ;  RooPolyVar (const RooPolyVar &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Calculate and return analytical integral over x. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise that we can internally integrate over x. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyVar.html:1997,simpl,simple,1997,doc/master/classRooPolyVar.html,https://root.cern,https://root.cern/doc/master/classRooPolyVar.html,1,['simpl'],['simple']
Usability,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayC>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparseT_TArrayC_.html:2482,Clear,Clear,2482,root/html534/THnSparseT_TArrayC_.html,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html,1,['Clear'],['Clear']
Usability,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayD>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparseT_TArrayD_.html:2482,Clear,Clear,2482,root/html534/THnSparseT_TArrayD_.html,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayD_.html,1,['Clear'],['Clear']
Usability,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayF>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparseT_TArrayF_.html:2482,Clear,Clear,2482,root/html534/THnSparseT_TArrayF_.html,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayF_.html,1,['Clear'],['Clear']
Usability,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayI>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparseT_TArrayI_.html:2482,Clear,Clear,2482,root/html534/THnSparseT_TArrayI_.html,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayI_.html,1,['Clear'],['Clear']
Usability,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayL>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparseT_TArrayL_.html:2482,Clear,Clear,2482,root/html534/THnSparseT_TArrayL_.html,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayL_.html,1,['Clear'],['Clear']
Usability,"ame, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin = 0, const Double_t* xmax = 0, Int_t chunksize = 1024*16); ~THnSparseT<TArrayS>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparseT_TArrayS_.html:2482,Clear,Clear,2482,root/html534/THnSparseT_TArrayS_.html,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayS_.html,1,['Clear'],['Clear']
Usability,"ame. ; An independent timer (see class TStopwatch) is started. The name of the benchmark is entered into the list of benchmarks. Benchmark can be stopped via TBenchmark::Stop(). Results can be printed via TBenchmark::Print(). TBenchmark::Show() can be used to stop benchmark and print results. If name is an already existing benchmark, timing will resume. A summary of all benchmarks can be seen via TBenchmark::Summary(). ; Definition at line 172 of file TBenchmark.cxx. ◆ Stop(). void TBenchmark::Stop ; (; const char * ; name). virtual . Terminates Benchmark with specified name. ; Definition at line 201 of file TBenchmark.cxx. ◆ Streamer(). void TBenchmark::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TBenchmark::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file TBenchmark.h. ◆ Summary(). void TBenchmark::Summary ; (; Float_t & ; rt, . Float_t & ; cp . ). virtual . Prints a summary of all benchmarks. ; Definition at line 214 of file TBenchmark.cxx. Member Data Documentation. ◆ fCpuTime. Float_t* TBenchmark::fCpuTime. protected . Definition at line 37 of file TBenchmark.h. ◆ fNames. TString* TBenchmark::fNames. protected . Definition at line 35 of file TBenchmark.h. ◆ fNbench. Int_t TBenchmark::fNbench. protected . Definition at line 33 of file TBenchmark.h. ◆ fNmax. Int_t TBenchmark::fNmax. protected . Definition at line 34 of file TBenchmark.h. ◆ fRealTime. Float_t* TBenchmark::fRealTime. protected . Definition at line 36 of file TBenchmark.h. ◆ fTimer. TStopwatch* TBenchmark::fTimer. protected . Definition at line 38 of file TBenchmark.h. Libraries for TBenchmark:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TBenchmark.h; core/base/src/TBenchmark.cxx. TBenchmark. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBenchmark.html:16849,Guid,Guide,16849,doc/master/classTBenchmark.html,https://root.cern,https://root.cern/doc/master/classTBenchmark.html,1,['Guid'],['Guide']
Usability,"ame.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:18983,undo,undo,18983,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,6,['undo'],['undo']
Usability,ame.cxx. ◆ GetPopup(). TGPopupMenu * TGMdiTitleIcon::GetPopup ; (; ); const. inline . Definition at line 168 of file TGMdiDecorFrame.h. ◆ HandleButton(). Bool_t TGMdiTitleIcon::HandleButton ; (; Event_t * ; event). overridevirtual . Handle button event on MDI icon (popup menu) ; Reimplemented from TGFrame.; Definition at line 746 of file TGMdiDecorFrame.cxx. ◆ HandleDoubleClick(). Bool_t TGMdiTitleIcon::HandleDoubleClick ; (; Event_t * ; event). overridevirtual . Handle double click event on MDI icon (close the window) ; Reimplemented from TGFrame.; Definition at line 732 of file TGMdiDecorFrame.cxx. ◆ IsA(). TClass * TGMdiTitleIcon::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGIcon.; Definition at line 170 of file TGMdiDecorFrame.h. ◆ Streamer(). void TGMdiTitleIcon::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGIcon. ◆ StreamerNVirtual(). void TGMdiTitleIcon::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 170 of file TGMdiDecorFrame.h. Friends And Related Symbol Documentation. ◆ TGMdiFrame. friend class TGMdiFrame. friend . Definition at line 152 of file TGMdiDecorFrame.h. ◆ TGMdiTitleBar. friend class TGMdiTitleBar. friend . Definition at line 153 of file TGMdiDecorFrame.h. Member Data Documentation. ◆ fMsgWindow. const TGWindow* TGMdiTitleIcon::fMsgWindow. protected . window handling container messages ; Definition at line 156 of file TGMdiDecorFrame.h. ◆ fPopup. TGPopupMenu* TGMdiTitleIcon::fPopup. protected . Popup menu associated to the title icon. ; Definition at line 157 of file TGMdiDecorFrame.h. Libraries for TGMdiTitleIcon:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGMdiDecorFrame.h; gui/gui/src/TGMdiDecorFrame.cxx. TGMdiTitleIcon. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:27 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiTitleIcon.html:31994,Guid,Guide,31994,doc/master/classTGMdiTitleIcon.html,https://root.cern,https://root.cern/doc/master/classTGMdiTitleIcon.html,1,['Guid'],['Guide']
Usability,"ame.cxx. ◆ SavePrimitive(). void TGMdiFrame::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a MDIframe as a C++ statement(s) on output stream out. ; Reimplemented from TGCompositeFrame.; Definition at line 191 of file TGMdiFrame.cxx. ◆ SetMdiHints(). void TGMdiFrame::SetMdiHints ; (; ULong_t ; mdihints). virtual . Set MDI hints, also used to identify titlebar buttons. ; Definition at line 94 of file TGMdiFrame.cxx. ◆ SetWindowIcon(). void TGMdiFrame::SetWindowIcon ; (; const TGPicture * ; pic). Set MDI window icon (titlebar icon). ; Definition at line 112 of file TGMdiFrame.cxx. ◆ SetWindowName(). void TGMdiFrame::SetWindowName ; (; const char * ; name). overridevirtual . Set MDI window name (set titlebar title). ; Reimplemented from TGWindow.; Definition at line 103 of file TGMdiFrame.cxx. ◆ Streamer(). void TGMdiFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGMdiFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file TGMdiFrame.h. Friends And Related Symbol Documentation. ◆ TGMdiDecorFrame. friend class TGMdiDecorFrame. friend . Definition at line 45 of file TGMdiFrame.h. ◆ TGMdiMainFrame. friend class TGMdiMainFrame. friend . Definition at line 44 of file TGMdiFrame.h. Member Data Documentation. ◆ fMain. TGMdiMainFrame* TGMdiFrame::fMain. protected . pointer to the MDI main frame ; Definition at line 50 of file TGMdiFrame.h. ◆ fMdiHints. ULong_t TGMdiFrame::fMdiHints. protected . MDI hints, also used to identify titlebar buttons. ; Definition at line 51 of file TGMdiFrame.h. Libraries for TGMdiFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGMdiFrame.h; gui/gui/src/TGMdiFrame.cxx. TGMdiFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiFrame.html:36342,Guid,Guide,36342,doc/master/classTGMdiFrame.html,https://root.cern,https://root.cern/doc/master/classTGMdiFrame.html,1,['Guid'],['Guide']
Usability,"ame3); ; c = ROOT.TCanvas(""rf105_funcbinding"", ""rf105_funcbinding"", 1200, 400); c.Divide(3); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame1.GetYaxis().SetTitleOffset(1.6); frame1.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.6); frame2.Draw(); c.cd(3); ROOT.gPad.SetLeftMargin(0.15); frame3.GetYaxis().SetTitleOffset(1.6); frame3.Draw(); ; c.SaveAs(""rf105_funcbinding.png""); RooCFunction1Binding<double,double>::erf[ function=(0x7f013b501000) x=x ] = 0; RooCFunction3PdfBinding<double,double,double,double>::beta[ function=ROOT::Math::beta_pdf x=x2 a=a b=b ] = 0.934689; [#1] INFO:NumericIntegration -- RooRealIntegral::init(beta_Int[x2]) using numeric integrator RooIntegrator1D to calculate Int(x2); [#1] INFO:NumericIntegration -- RooRealIntegral::init(beta_Int[x2]) using numeric integrator RooIntegrator1D to calculate Int(x2); [#1] INFO:Fitting -- RooAbsPdf::fitTo(beta_over_beta_Int[x2]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_beta_over_beta_Int[x2]_betaData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(beta_Int[x2]) using numeric integrator RooIntegrator1D to calculate Int(x2); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(beta_Int[x2]) using numeric integrator RooIntegrator1D to calculate Int(x2); RooTFnBinding::fa1[ TFn={fa1=sin(x)/x} obs=(x3) ] = -0.0547936; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf105_funcbinding.py. tutorialsroofitrf105_funcbinding.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf105__funcbinding_8py.html:3907,Guid,Guide,3907,doc/master/rf105__funcbinding_8py.html,https://root.cern,https://root.cern/doc/master/rf105__funcbinding_8py.html,1,['Guid'],['Guide']
Usability,"ame::AddInput(UInt_t emask); virtual voidTGTextView::AddLine(const char* string); virtual voidTGTextView::AddLineFast(const char* string); virtual voidTGTextView::AddText(TGText* text); virtual voidTGTextView::AdjustWidth(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); boolbasic_ios<char,char_traits<char> >::bad() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGView::ChangeBackground(Pixel_t); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); voidbasic_ios<char,char_traits<char> >::clear(ios_base::iostate __state = goodbit); virtual voidTGTextView::Clear(Option_t* = """"); virtual voidTGTextView::Clicked(const char* word)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual Bool_tTGTextView::Copy(); basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& __rhs); virtual voidTGTextView::DataCha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGTextViewostream.html:2116,clear,clear,2116,root/html604/TGTextViewostream.html,https://root.cern,https://root.cern/root/html604/TGTextViewostream.html,1,['clear'],['clear']
Usability,"ame::AddInput(UInt_t emask); virtual voidTGTextView::AddLine(const char* string); virtual voidTGTextView::AddLineFast(const char* string); virtual voidTGTextView::AddText(TGText* text); virtual voidTGTextView::AdjustWidth(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); boolbasic_ios<char,char_traits<char> >::bad() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGView::ChangeBackground(Pixel_t); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); voidbasic_ios<char,char_traits<char> >::clear(ios_base::iostate state = goodbit); virtual voidTGTextView::Clear(Option_t* = """"); virtual voidTGTextView::Clicked(const char* word)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual Bool_tTGTextView::Copy(); basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& rhs); virtual voidTGTextView::DataChanged",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGTextViewostream.html:2238,clear,clear,2238,root/html534/TGTextViewostream.html,https://root.cern,https://root.cern/root/html534/TGTextViewostream.html,1,['clear'],['clear']
Usability,"ame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGDockButton::DrawBorder(); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); TGWindow&TGWindow::operator=(const TGWindow& tgw); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDockHideButton.html:15126,Clear,ClearFlags,15126,root/html528/TGDockHideButton.html,https://root.cern,https://root.cern/root/html528/TGDockHideButton.html,4,['Clear'],['ClearFlags']
Usability,"ame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGFrame::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); voidTGMdiWinResizer::DrawBox(Int_t x, Int_t y, UInt_t width, UInt_t height); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); voidTGMdiWinResizer::MoveResizeIt(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEditModeTGWindow::kEditDisableGrab; static TGWi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGMdiCornerWinResizer.html:14273,Clear,ClearFlags,14273,root/html602/TGMdiCornerWinResizer.html,https://root.cern,https://root.cern/root/html602/TGMdiCornerWinResizer.html,6,['Clear'],['ClearFlags']
Usability,"ame::fWMYWM y position; UInt_tTGFrame::fWidthframe width; TStringTGMainFrame::fWindowNamewindow name; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TGTextButton*fOkok button; char*fStrcutsaddress to store cuts string; char*fStrvarsaddress to store variables string; TGTextEntry*fTECutstext entry widget for cuts; TGTextEntry*fTEVarstext entry widget for variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeInput(const TGWindow* p, const TGWindow* main, char* strvars, char* strcuts); Create simple input dialog. ~TTreeInput(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TTreeInput(const TTreeInput& ). TTreeInput & operator=(const TTreeInput& ). » Author: David Gonzalez Maline 21/10/2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeInput.html:22249,simpl,simple,22249,root/html534/TTreeInput.html,https://root.cern,https://root.cern/root/html534/TTreeInput.html,1,['simpl'],['simple']
Usability,"ame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoSphereEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for sphere editor. ~TGeoSphereEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given sphere. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for Rmin. void DoRmax(); Slot for Rmax. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoTheta1(); Slot for theta1. void DoTheta2(); Slot for theta2. void DoTheta(); Slot for theta slider. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoSphereEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoSphereEditor.html:21590,undo,undoing,21590,root/html528/TGeoSphereEditor.html,https://root.cern,https://root.cern/root/html528/TGeoSphereEditor.html,1,['undo'],['undoing']
Usability,"ame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoSphereEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for sphere editor. ~TGeoSphereEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given sphere. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for Rmin. void DoRmax(); Slot for Rmax. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoTheta1(); Slot for theta1. void DoTheta2(); Slot for theta2. void DoTheta(); Slot for theta slider. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoSphereEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoSphereEditor.html:21690,undo,undoing,21690,root/html530/TGeoSphereEditor.html,https://root.cern,https://root.cern/root/html530/TGeoSphereEditor.html,1,['undo'],['undoing']
Usability,"ame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoSphereEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for sphere editor. ~TGeoSphereEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given sphere. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for Rmin. void DoRmax(); Slot for Rmax. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoTheta1(); Slot for theta1. void DoTheta2(); Slot for theta2. void DoTheta(); Slot for theta slider. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoSphereEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoSphereEditor.html:21690,undo,undoing,21690,root/html532/TGeoSphereEditor.html,https://root.cern,https://root.cern/root/html532/TGeoSphereEditor.html,1,['undo'],['undoing']
Usability,"ame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoCombiTransEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for combi matrix editor. ~TGeoCombiTransEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected combi matrix. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. void DoDx(); Slot for X. void DoDy(); Slot for Y. void DoDz(); Slot for Z. TGeoCombiTransEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoCombiTransEditor.html:23181,undo,undoing,23181,root/html604/TGeoCombiTransEditor.html,https://root.cern,https://root.cern/root/html604/TGeoCombiTransEditor.html,1,['undo'],['undoing']
Usability,"ame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoCombiTransEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for combi matrix editor. ~TGeoCombiTransEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected combi matrix. void DoName(); Slot for name. void DoRotPhi(); Slot for phi (Euler X convention). void DoRotTheta(); Slot for theta (Euler X convention). void DoRotPsi(); Slot for psi (Euler X convention). void DoRotAngle(); Slot for additional rotation about one axis. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying modifications. void DoCancel(); Slot for cancelling last un-applied operations. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last changes. void DoDx(); Slot for X. void DoDy(); Slot for Y. void DoDz(); Slot for Z. TGeoCombiTransEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoCombiTransEditor.html:23181,undo,undoing,23181,root/html602/TGeoCombiTransEditor.html,https://root.cern,https://root.cern/root/html602/TGeoCombiTransEditor.html,1,['undo'],['undoing']
Usability,"ame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Create progress bar. void SetRange(Float_t min, Float_t max); Set min and max of progress bar. void SetPosition(Float_t pos); Set progress position between [min,max]. void Increment(Float_t inc); Increment progress position. void Reset(); Reset progress bar (i.e. set pos to 0). void SetFillType(TGProgressBar::EFillType type); Set fill type. void SetBarType(TGProgressBar::EBarType type); Set bar type. void SetBarColor(ULong_t color); Set progress bar color. void SetBarColor(const char* color = ""blue""); Set progress bar color. void Format(const char* format = ""%.2f""); Set format for displaying a value. FontStruct_t GetDefaultFontStruct(); Return default font structure in use. const TGGC & GetDefaultGC(); Return default graphics context in use. void SetForegroundColor(Pixel_t pixel); Change text color drawing. void SavePrimitive(ostream& out, Option_t* option = """"); Save progress bar parameters as a C++ statement(s) on output stream out. Bool_t fDrawBar; // if true draw only bar in DoRedraw(). TGProgressBar(const TGWindow* p, UInt_t w, UInt_t h, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); { }. Float_t GetMin() const; { return fMin; }. Float_t GetMax() const; { return fMax; }. Float_t GetPosition() const; { return fPos; }. EFillType GetFillType() const; { return fFillType; }. EBarType GetBarType() const; { retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGProgressBar.html:21273,progress bar,progress bar,21273,root/html602/TGProgressBar.html,https://root.cern,https://root.cern/root/html602/TGProgressBar.html,2,['progress bar'],['progress bar']
Usability,"ame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. Cursor_tfCursorcurrent cursor; Cursor_tfDefaultCursordefault cursor; TList*fExpressionListlist of user defined expression widgets; TGListView*fListViewassociated list view; TTreeViewer*fViewerpointer to tree viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGContainer. ←; TGLVContainer. ←; TTVLVContainer. Function documentation; TTVLVContainer(const TGWindow* p, UInt_t w, UInt_t h, UInt_t options = kSunkenFrame); TGLVContainer constructor. ~TTVLVContainer(); TGLVContainer destructor. const char* Cut(); return the cut entry. TTVLVEntry * ExpressionItem(Int_t index); return the expression item at specific position. TList* ExpressionList(); return the list of user-defined expressions. const char* Ex(); return the expression on X. const char* Ey(); return the expression on Y. const char* Ez(); return the expression on Z. const char* ScanList(); return the cut entry. Bool_t HandleButton(Event_t* event); Handle mouse button event in container. Bool_t HandleMotion(Event_t* event); Handle mouse motion events. void EmptyAll(); Clear all names and aliases for expression type items. void RemoveNonStatic(); remove all non-static items from the list view, except expressions. void SelectItem(const char* name); select an item. TTVLVContainer(const TGWindow* p, UInt_t w, UInt_t h, UInt_t options = kSunkenFrame). void AddThisItem(TTVLVEntry* item); { AddFrame(item, fItemLayout); item->SetColumns(fCpos, fJmode); }. TTreeViewer * GetViewer(); {return fViewer;}. void SetListView(TGListView* lv); {fListView = lv;}. void SetViewer(TTreeViewer* viewer); {fViewer = viewer;}. » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-02 16:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTVLVContainer.html:27257,Clear,Clear,27257,root/html604/TTVLVContainer.html,https://root.cern,https://root.cern/root/html604/TTVLVContainer.html,1,['Clear'],['Clear']
Usability,"ame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. Cursor_tfCursorcurrent cursor; Cursor_tfDefaultCursordefault cursor; TList*fExpressionListlist of user defined expression widgets; TGListView*fListViewassociated list view; TTreeViewer*fViewerpointer to tree viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGContainer. ←; TGLVContainer. ←; TTVLVContainer. Function documentation; TTVLVContainer(const TGWindow* p, UInt_t w, UInt_t h, UInt_t options = kSunkenFrame); TGLVContainer constructor. ~TTVLVContainer(); TGLVContainer destructor. const char* Cut(); return the cut entry. TTVLVEntry * ExpressionItem(Int_t index); return the expression item at specific position. TList* ExpressionList(); return the list of user-defined expressions. const char* Ex(); return the expression on X. const char* Ey(); return the expression on Y. const char* Ez(); return the expression on Z. const char* ScanList(); return the cut entry. Bool_t HandleButton(Event_t* event); Handle mouse button event in container. Bool_t HandleMotion(Event_t* event); Handle mouse motion events. void EmptyAll(); Clear all names and aliases for expression type items. void RemoveNonStatic(); remove all non-static items from the list view, except expressions. void SelectItem(const char* name); select an item. TTVLVContainer(const TGWindow* p, UInt_t w, UInt_t h, UInt_t options = kSunkenFrame). void AddThisItem(TTVLVEntry* item); { AddFrame(item, fItemLayout); item->SetColumns(fCpos, fJmode); }. TTreeViewer * GetViewer(); {return fViewer;}. void SetListView(TGListView* lv); {fListView = lv;}. void SetViewer(TTreeViewer* viewer); {fViewer = viewer;}. » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-30 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTVLVContainer.html:27157,Clear,Clear,27157,root/html602/TTVLVContainer.html,https://root.cern,https://root.cern/root/html602/TTVLVContainer.html,1,['Clear'],['Clear']
Usability,"ame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionViewer.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionQueryFrame.html:21493,progress bar,progress bar,21493,root/html528/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html528/TSessionQueryFrame.html,2,['progress bar'],['progress bar']
Usability,"ame;  Define a Frame. More...;  ; class  TGaxis;  The axis painter class. More...;  ; class  TGraphPolar;  To draw a polar graph. More...;  ; class  TGraphPolargram;  To draw polar axis. More...;  ; class  TGraphQQ;  This class allows to draw quantile-quantile plots. More...;  ; class  TImage;  An abstract interface to image processing library. More...;  ; class  TImagePalette;  A class to define a conversion from pixel values to pixel color. More...;  ; class  TLatex;  To draw Mathematical Formula. More...;  ; class  TLegend;  This class displays a legend box (TPaveText) containing several legend entries. More...;  ; class  TLegendEntry;  Storage class for one entry of a TLegend. More...;  ; class  TLine;  Use the TLine constructor to create a simple line. More...;  ; class  TLink;  Special TText object used to show hyperlinks. More...;  ; class  TMarker;  Manages Markers. More...;  ; class  TMathText;  To draw TeX Mathematical Formula. More...;  ; class  TPaletteEditor;  Edit the palette via a GUI. More...;  ; class  TPave;  A TBox with a bordersize and a shadow option. More...;  ; class  TPaveLabel;  A Pave (see TPave) with a text centered in the Pave. More...;  ; class  TPaveStats;  The histogram statistics painter class. More...;  ; class  TPavesText;  A PaveText (see TPaveText) with several stacked paves. More...;  ; class  TPaveText;  A Pave (see TPave) with text, lines or/and boxes inside. More...;  ; class  TPie;  Draw a Pie Chart,. More...;  ; class  TPieSlice;  A slice of a piechart, see the TPie class. More...;  ; class  TPoints;  2-D graphics point (world coordinates). More...;  ; class  TPolyLine;  Defined by an array on N points in a 2-D space. More...;  ; class  TText;  Base class for several text objects. More...;  ; class  TTF;  Interface to the freetype 2 library. More...;  ; class  TWbox;  A TBox with a bordersize and a bordermode. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__BasicGraphics.html:2834,Guid,Guide,2834,doc/master/group__BasicGraphics.html,https://root.cern,https://root.cern/doc/master/group__BasicGraphics.html,1,['Guid'],['Guide']
Usability,"ameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGVProgressBar(const TGWindow* p = 0, UInt_t w = kProgressBarTextWidth, UInt_t h = 4, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); cconstructor. TGVProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t h); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void DoRedraw(); Draw vertical progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a vertical progress bar as a C++ statement(s) on output stream out. void Percent(Bool_t ); { fPercent = on; fClient->NeedRedraw(this); }. void ShowPos(Bool_t ); { fShowPos = on; fClient->NeedRedraw(this); }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. TGVProgressBar(const TGWindow* p = 0, UInt_t w = kProgressBarTextWidth, UInt_t h = 4, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame). virtual ~TGVProgressBar(); { }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGVProgressBar.html:21582,Simpl,Simple,21582,root/html602/TGVProgressBar.html,https://root.cern,https://root.cern/root/html602/TGVProgressBar.html,4,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"ameTitle(const char *name, const char *title)TNamedvirtual; SetObjectFit(TObject *obj)TVirtualFitterinlinevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetParameter(Int_t ipar, const char *parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh) overrideTFumilivirtual; SetParNumber(Int_t ParNum)TFumili; SetPrecision(Double_t prec=1e-6)TVirtualFitterstatic; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetUserFunc(TObject *userfunc)TVirtualFitterinlinevirtual; SetXfirst(Int_t first)TVirtualFitterinlinevirtual; SetXlast(Int_t last)TVirtualFitterinlinevirtual; SetYfirst(Int_t first)TVirtualFitterinlinevirtual; SetYlast(Int_t last)TVirtualFitterinlinevirtual; SetZfirst(Int_t first)TVirtualFitterinlinevirtual; SetZlast(Int_t last)TVirtualFitterinlinevirtual; SGZ()TFumili; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTFumilivirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TFumiliinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TFumili(Int_t maxpar=25)TFumili; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TVirtualFitter(const TVirtualFitter &tvf)TVirtualFitterprotected; TVirtualFitter()TVirtualFitter; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TFumili() overrideTFumili; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual; ~TVirtualFitter() overrideTVirtualFitter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili-members.html:11429,Guid,Guide,11429,doc/master/classTFumili-members.html,https://root.cern,https://root.cern/doc/master/classTFumili-members.html,1,['Guid'],['Guide']
Usability,"ame[], . TSeqCollection * ; pList . ). static . [static utility function]///////////////////////////// ; adds a TObjString to ""*pList"" for each entry found in the system directory ""dirName""; directories that do not exist are silently ignored. ; Definition at line 750 of file TTabCom.cxx. ◆ Class(). static TClass * TTabCom::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTabCom::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTabCom::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 226 of file TTabCom.h. ◆ ClearAll(). void TTabCom::ClearAll ; (; ). clears all lists except for user names and system include files. ; Definition at line 319 of file TTabCom.cxx. ◆ ClearClasses(). void TTabCom::ClearClasses ; (; ). Clear classes and namespace collections. ; Definition at line 218 of file TTabCom.cxx. ◆ ClearCppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::ClearPragmas ; (; ). Forget all pragmas seen so far. ; Definition at line 282 of file TTabCom.cxx. ◆ ClearSysIncFiles(). void TTabCom::ClearSysIncFiles ; (; ). Close system fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:9565,Clear,ClearCppDirectives,9565,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearCppDirectives']
Usability,"amed* set2RangeName = 0); voidinitialize(const RooNormSetCache& other); virtual TClass*IsA() const; const RooArgSet*lastSet1() const; const RooArgSet*lastSet2() const; const RooNameSet&nameSet1() const; const RooNameSet&nameSet2() const; RooNormSetCache&operator=(const RooNormSetCache&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidexpand(). Data Members; protected:. RooSetPair*_asArr! do not persist; RooHashTable*_htable! do not persist; RooNameSet_name1!; RooNameSet_name2!; Int_t_nreg; Int_t_regSize; TNamed*_set2RangeName!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNormSetCache(Int_t regSize = 64); Construct normalization set manager with given initial size; _htable = regSize>16 ? new RooHashTable(regSize,RooHashTable::Intrinsic) : 0 ;. RooNormSetCache(const RooNormSetCache& other); Copy constructor. ~RooNormSetCache(); Destructor. void clear(); Clear contents. void initialize(const RooNormSetCache& other); Initialize cache from contents of given other cache. void add(const RooArgSet* set1, const RooArgSet* set2 = 0); Add given pair of RooArgSet pointers to our store. void expand(); Expand registry size by doubling capacity. Bool_t autoCache(const RooAbsArg* self, const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0, Bool_t autoRefill = kTRUE); If RooArgSets set1 and set2 or sets with similar contents have; been seen by this cache manager before return kFALSE If not,; return kTRUE. If sets have not been seen and doRefill is true,; update cache reference to current input sets. Int_t index(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0). Bool_t contains(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0). Bool_t containsSet1(const RooArgSet* set1). const RooArgSet* lastSet1() const; { return _nreg>0?_asArr[_nreg-1]._set1:0 ; }. const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNormSetCache.html:2640,clear,clear,2640,root/html530/RooNormSetCache.html,https://root.cern,https://root.cern/root/html530/RooNormSetCache.html,4,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"amer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::PdfProposal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 118 of file PdfProposal.h. Member Data Documentation. ◆ fCache. std::unique_ptr<RooDataSet> RooStats::PdfProposal::fCache. protected . our position in the cached proposal data set ; Definition at line 109 of file PdfProposal.h. ◆ fCachePosition. Int_t RooStats::PdfProposal::fCachePosition = 0. protected . how many points to generate each time ; Definition at line 108 of file PdfProposal.h. ◆ fCacheSize. Int_t RooStats::PdfProposal::fCacheSize = 1. protected . the last point we were at ; Definition at line 107 of file PdfProposal.h. ◆ fIt. std::map<RooRealVar*,RooAbsReal*>::iterator RooStats::PdfProposal::fIt. protected . map of values in pdf to update ; Definition at line 105 of file PdfProposal.h. ◆ fLastX. RooArgSet RooStats::PdfProposal::fLastX. protected . pdf iterator ; Definition at line 106 of file PdfProposal.h. ◆ fMap. std::map<RooRealVar*, RooAbsReal*> RooStats::PdfProposal::fMap. protected . the proposal density function ; Definition at line 104 of file PdfProposal.h. ◆ fMaster. RooArgSet RooStats::PdfProposal::fMaster. protected . the cached proposal data set ; Definition at line 110 of file PdfProposal.h. ◆ fOwnsPdf. bool RooStats::PdfProposal::fOwnsPdf = false. protected . pointers to master variables needed for updates ; Definition at line 111 of file PdfProposal.h. ◆ fPdf. RooAbsPdf* RooStats::PdfProposal::fPdf = nullptr. protected . Definition at line 103 of file PdfProposal.h. Libraries for RooStats::PdfProposal:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/PdfProposal.h; roofit/roostats/src/PdfProposal.cxx. RooStatsPdfProposal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1PdfProposal.html:21237,Guid,Guide,21237,doc/master/classRooStats_1_1PdfProposal.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1PdfProposal.html,1,['Guid'],['Guide']
Usability,"amer facility.Definition TNamed.cxx:74; TNamed::TNamedTNamed(const char *name, const char *title)Definition TNamed.h:37; TNamed::Copyvoid Copy(TObject &named) const overrideCopy this to obj.Definition TNamed.cxx:94; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::~TNamedvirtual ~TNamed()TNamed destructor.Definition TNamed.cxx:42; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::TNamedTNamed(const TString &name, const TString &title)Definition TNamed.h:38; TNamed::fTitleTString fTitleDefinition TNamed.h:33; TNamed::TNamedTNamed()Definition TNamed.h:36; TNamed::Printvoid Print(Option_t *option="""") const overridePrint TNamed name and title.Definition TNamed.cxx:128; TNamed::fNameTString fNameDefinition TNamed.h:32; TNamed::Clearvoid Clear(Option_t *option="""") overrideSet name and title to empty strings ("""").Definition TNamed.cxx:64; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TNamed::HashULong_t Hash() const overrideReturn hash value for this object.Definition TNamed.h:49; TNamed::CompareInt_t Compare(const TObject *obj) const overrideCompare two TNamed objects.Definition TNamed.cxx:85; TNamed::Sizeofvirtual Int_t Sizeof() constReturn size of the TNamed part of the TObject.Definition TNamed.cxx:173; TNamed::operator=TNamed & operator=(const TNamed &rhs)TNamed assignment operator.Definition TNamed.cxx:51; TNamed::lsvoid ls(Option_t *option="""") const overrideList TNamed name and title.Definition TNamed.cxx:113; TNamed::SetNameTitlevirtual void SetNameTitle(const char *name, const char *title)Set all the TNamed parameters (name and title).Definition TNamed.cxx:154; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TStrin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TNamed_8h_source.html:4109,Clear,Clearvoid,4109,doc/master/TNamed_8h_source.html,https://root.cern,https://root.cern/doc/master/TNamed_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"amer(). void TRadialGradient::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TColorGradient. ◆ StreamerNVirtual(). void TRadialGradient::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 160 of file TColorGradient.h. ◆ TColorGradient() [1/3]. TColorGradient::TColorGradient ; (; ). inline . Definition at line 70 of file TColorGradient.h. ◆ TColorGradient() [2/3]. TColorGradient::TColorGradient ; (; Color_t ; newColor, . UInt_t ; nPoints, . const Double_t * ; points, . const Color_t * ; colorIndices, . ECoordinateMode ; mode = kObjectBoundingMode . ). There is no way to validate parameters here, so it's up to user to pass correct arguments. ; Definition at line 71 of file TColorGradient.cxx. ◆ TColorGradient() [3/3]. TColorGradient::TColorGradient ; (; Color_t ; newColor, . UInt_t ; nPoints, . const Double_t * ; points, . const Double_t * ; colors, . ECoordinateMode ; mode = kObjectBoundingMode . ). There is no way to validate parameters here, so it's up to user to pass correct arguments. ; Definition at line 73 of file TColorGradient.cxx. Member Data Documentation. ◆ fEnd. Point TRadialGradient::fEnd. private . Definition at line 155 of file TColorGradient.h. ◆ fR1. Double_t TRadialGradient::fR1 = 0. private . Definition at line 154 of file TColorGradient.h. ◆ fR2. Double_t TRadialGradient::fR2 = 0. private . Definition at line 156 of file TColorGradient.h. ◆ fStart. Point TRadialGradient::fStart. private . Definition at line 153 of file TColorGradient.h. ◆ fType. EGradientType TRadialGradient::fType = kSimple. private . Definition at line 158 of file TColorGradient.h. Libraries for TRadialGradient:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TColorGradient.h; core/base/src/TColorGradient.cxx. TRadialGradient. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRadialGradient.html:26651,Guid,Guide,26651,doc/master/classTRadialGradient.html,https://root.cern,https://root.cern/doc/master/classTRadialGradient.html,1,['Guid'],['Guide']
Usability,"amer()Definition TGeoShape.h:93; TGeoShape::kGeoClosedShape@ kGeoClosedShapeDefinition TGeoShape.h:59; TGeoShape::kGeoArb8@ kGeoArb8Definition TGeoShape.h:52; TGeoShape::kGeoPcon@ kGeoPconDefinition TGeoShape.h:50; TGeoShape::IsATClass * IsA() const overrideDefinition TGeoShape.h:171; TGeoShape::TestShapeBitBool_t TestShapeBit(UInt_t f) constDefinition TGeoShape.h:167; TGeoSkinSurfaceDefinition TGeoOpticalSurface.h:177; TGeoVolumeAssemblyVolume assemblies.Definition TGeoVolume.h:316; TGeoVolumeAssembly::MakeAssemblyFromVolumestatic TGeoVolumeAssembly * MakeAssemblyFromVolume(TGeoVolume *vol)Make a clone of volume VOL but which is an assembly.Definition TGeoVolume.cxx:3088; TGeoVolumeMultiVolume families.Definition TGeoVolume.h:266; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::WeightADouble_t WeightA() constAnalytical computation of the weight.Definition TGeoVolume.cxx:2517; TGeoVolume::ClearThreadDatavirtual void ClearThreadData() constDefinition TGeoVolume.cxx:425; TGeoVolume::SetVisibilityvoid SetVisibility(Bool_t vis=kTRUE) overrideset visibility of this volumeDefinition TGeoVolume.cxx:2347; TGeoVolume::SetNumbervoid SetNumber(Int_t number)Definition TGeoVolume.h:245; TGeoVolume::SetLineWidthvoid SetLineWidth(Width_t lwidth) overrideSet the line width.Definition TGeoVolume.cxx:2185; TGeoVolume::GetMediumTGeoMedium * GetMedium() constDefinition TGeoVolume.h:175; TGeoVolume::GetRefCountInt_t GetRefCount() constDefinition TGeoVolume.h:131; TGeoVolume::SortNodesvoid SortNodes()sort nodes by decreasing volume of the bounding box.Definition TGeoVolume.cxx:2080; TGeoVolume::Voxelizevoid Voxelize(Option_t *option)build the voxels for this volumeDefinition TGeoVolume.cxx:2464; TGeoVolume::IsRunTimeBool_t IsRunTime() constDefinition TGeoVolume.h:109; TGeoVolume::CreateThreadDatavirtual void CreateThreadData(Int_t nthreads)Definition TGeoVolume.cxx:435; TGeoVolume::GetByteCountvirtual Int_t GetByteCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:233873,Clear,ClearThreadDatavirtual,233873,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,2,['Clear'],"['ClearThreadData', 'ClearThreadDatavirtual']"
Usability,"amerNVirtual(). void TEveWindow::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 293 of file TEveWindow.h. ◆ SwapWindow(). void TEveWindow::SwapWindow ; (; TEveWindow * ; w). Swap frames with the given window. ; Definition at line 737 of file TEveWindow.cxx. ◆ SwapWindows(). void TEveWindow::SwapWindows ; (; TEveWindow * ; w1, . TEveWindow * ; w2 . ). static . Swap windows w1 and w2. ; They are properly reparented in the eve hierarch as well. Layout is called on both frames. ; Definition at line 1027 of file TEveWindow.cxx. ◆ SwapWindowWithCurrent(). void TEveWindow::SwapWindowWithCurrent ; (; ). Swap frames with the current window. ; Definition at line 750 of file TEveWindow.cxx. ◆ TitleBarClicked(). void TEveWindow::TitleBarClicked ; (; ). Slot for clicking on the title-bar. ; The wish that this window becomes the current one is sent to the window-manager. ; Definition at line 958 of file TEveWindow.cxx. ◆ UndockWindow(). void TEveWindow::UndockWindow ; (; ). Undock the window - put it into a dedicated main-frame. ; Definition at line 768 of file TEveWindow.cxx. ◆ UndockWindowDestroySlot(). void TEveWindow::UndockWindowDestroySlot ; (; ). Undock the window - put it into a dedicated main-frame. ; The old window slot is destroyed. ; Definition at line 795 of file TEveWindow.cxx. Friends And Related Symbol Documentation. ◆ TEveWindowManager. friend class TEveWindowManager. friend . Definition at line 211 of file TEveWindow.h. Member Data Documentation. ◆ fEveFrame. TEveCompositeFrame* TEveWindow::fEveFrame. protected . Definition at line 218 of file TEveWindow.h. ◆ fgCurrentBackgroundColor. Pixel_t TEveWindow::fgCurrentBackgroundColor = 0x80A0C0. staticprotected . Definition at line 226 of file TEveWindow.h. ◆ fgMainFrameDefHeight. UInt_t TEveWindow::fgMainFrameDefHeight = 480. staticprotected . Definition at line 224 of file TEveWindow.h. ◆ fgMainFrameDefWidth. UInt_t TEveWindow::fgMainFrameDefWidth = 640. staticprotected ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindow.html:45839,Undo,UndockWindow,45839,doc/master/classTEveWindow.html,https://root.cern,https://root.cern/doc/master/classTEveWindow.html,1,['Undo'],['UndockWindow']
Usability,"amerNVirtual_b);  ; void UpdateRecord (const char *name);  Updates current record according to new X, Y, Z settings. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVSession.html:2240,Clear,Clear,2240,doc/master/classTTVSession.html,https://root.cern,https://root.cern/doc/master/classTTVSession.html,1,['Clear'],['Clear']
Usability,"ameraYOZ;  ; TString fPictureFileName;  ; Float_t fPointScale;  color-set with light background ;  ; TGLPShapeObj * fPShapeWrap;  GED editor. ;  ; EPushAction fPushAction;  ; TGLRedrawTimer * fRedrawTimer;  ; Bool_t fReferenceOn;  remove guides hidden-lines ;  ; TGLVertex3 fReferencePos;  reference marker on? ;  ; Bool_t fResetCamerasOnNextUpdate;  ; Bool_t fResetCamerasOnUpdate;  ; TGLSelectRecord fSecSelRec;  select record from last select (should go to context) ;  ; TGLManipSet * fSelectedPShapeRef;  select record from last secondary select (should go to context) ;  ; TGLSelectRecord fSelRec;  select record in use as selected ;  ; Bool_t fSmartRefresh;  markup size of viewport in scene units ;  ; Bool_t fSmoothLines;  smooth point edge rendering ;  ; Bool_t fSmoothPoints;  width scale for lines ;  ; Bool_t fStereo;  ; Float_t fStereoEyeOffsetFac;  position of zero-parallax plane: 0 - near clipping plane, 1 - far clipping plane ;  ; Float_t fStereoFrustumAsymFac;  ; Bool_t fStereoQuadBuf;  use stereo rendering ;  ; Float_t fStereoZeroParallax;  draw quad buffer or left/right stereo in left/right half of window ;  ; TGLRect fViewport;  max time for scene rendering at high LOD (in ms) ;  ;  Protected Attributes inherited from TGLViewerBase; TGLCamera * fCamera;  ; Bool_t fChanged;  ; TGLClip * fClip;  ; Short_t fLOD;  ; Float_t fOLLineW;  ; TGLBoundingBox fOverallBoundingBox;  ; OverlayElmVec_t fOverlay;  ; Bool_t fResetSceneInfosOnRender;  ; TGLRnrCtx * fRnrCtx;  ; SceneInfoList_t fScenes;  ; Short_t fStyle;  ; SceneInfoVec_t fVisScenes;  ; Float_t fWFLineW;  ;  Protected Attributes inherited from TGLLockable; ELock fLock;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static Float_t fgAxisLabelScale = 1;  name says it all ;  ; static TGLColorSet fgDefaultColorSet;  fade the vie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewer.html:34180,guid,guides,34180,doc/master/classTGLViewer.html,https://root.cern,https://root.cern/doc/master/classTGLViewer.html,1,['guid'],['guides']
Usability,"amerasOnUpdate was toggled. void DoUpdateScene(); UpdateScene was clicked. void DoCameraHome(); CameraHome was clicked. void UpdateMaxDrawTimes(); Slot for fMaxSceneDrawTimeHQ and fMaxSceneDrawTimeLQ. void UpdatePointLineStuff(); Slot for point-sizes and line-widths. void DoCameraOverlay(); Update viewer with GUI state. void DoCameraCenterExt(); Set external camera center. void DoCaptureCenter(); Capture camera-center via picking. void DoDrawCameraCenter(); Draw camera center. void UpdateCameraCenter(); Update current camera with GUI state. void DoAnnotation(); Create annotation via picking. void UpdateViewerAxes(Int_t id); Update viewer with GUI state. void UpdateViewerReference(); Update viewer with GUI state. TGNumberEntry* MakeLabeledNEntry(TGCompositeFrame* p, const char* name, Int_t labelw, Int_t nd = 7, Int_t s = 5); Helper function to create fixed width TGLabel and TGNumberEntry in same row. void CreateStyleTab(); Creates ""Style"" tab. void CreateGuidesTab(); Create ""Guides"" tab. void CreateClippingTab(); Create GUI controls - clip type (none/plane/box) and plane/box properties. void CreateExtrasTab(); Create Extra Tab controls - camera rotator and stereo. void UpdateReferencePosState(); Enable/disable reference position (x/y/z) number edits based on; reference check box. void SetGuides(); Configuration of guides GUI called from SetModel(). void UpdateRotator(); Update rotator related variables. void DoRotatorStart(); Start auto-rotator. void DoRotatorStop(); Stop auto-rotator. void UpdateStereo(); Update stereo related variables. TGLViewerEditor(const TGLViewerEditor& ). void DetachFromPad(); {fIsInPad = kFALSE;}. » Author: Alja Mrak-Tadel, Matevz Tadel, Timur Pocheptsov 08/03/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2010-10-20 08:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLViewerEditor.html:23767,guid,guides,23767,root/html528/TGLViewerEditor.html,https://root.cern,https://root.cern/root/html528/TGLViewerEditor.html,1,['guid'],['guides']
Usability,"ameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn’t need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. On the other hand, the \(\mbox{MINOS}\) analysis is still meaningful, at least in principle, as long as \(\mbox{MIGRAD}\) (which is called internally by \(\mbox{MINOS}\)) does not get blocked at a limit. Unfortunately, the user has no control over this aspect of the \(\mbox{MINOS}\) calculation, although it is possible to get enough printout from the \(\mbox{MINOS}\) result to be able to determine whether the results are reliable or not.; 6.4 Fixing and releasing parameters; When M needs to be guided to the “right” minimum, often the best way to do this is with the methods e.g. MnMigrad::fix(…) and MnMigrad::release(…). That is, suppose you have a problem with ten free parameters, and when you minimize with respect to all at once, M goes to an unphysical solution characterized by an unphysical or unwanted value of parameter number four. One way to avoid this is to fix parameter four at a “good” value (not necessarily the best, since you presumably don’t know that yet), and minimize with respect to the others. Then release parameter four and minimize again. If the problem admits a “good” physical solution, you will normally find it this way. If it doesn’t work, you may see what is wrong by the following sequence (where \(\mbox{xxx}\) is the expected physical value for parameter four):; MnMigrad migrad(...);; migrad.setValue(4, xxx);; migrad.fix(4);; FunctionMinimum min = migrad();; migrad.release(4);; MnScan scan(...);; std::vector<std::pair<double, double> > points = scan(4);; where \(\mbo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:71624,guid,guided,71624,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['guid'],['guided']
Usability,"ameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CQuad12F;  CQuad1F;  CQuad4F;  CQuad4FGrad;  CQuad8F;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:63605,simpl,simplex,63605,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,3,['simpl'],['simplex']
Usability,"ameters, which is usually reliable unless warning"");; 3589 Printf("" messages are produced."");; 3590 Printf("" The optional argument [maxcalls] specifies the (approximate)"");; 3591 Printf("" maximum number of function calls after which the calculation"");; 3592 Printf("" will be stopped even if it has not yet converged."");; 3593 Printf("" The optional argument [tolerance] specifies required tolerance"");; 3594 Printf("" on the function value at the minimum."");; 3595 Printf("" The default tolerance is 0.1, and the minimization will stop"");; 3596 Printf("" when the estimated vertical distance to the minimum (EDM) is"");; 3597 Printf("" less than 0.001*[tolerance]*UP (see [SET ERRordef])."");; 3598 goto L99;; 3599 }; 3600//______________________________________________________________________________; 3601//; 3602// Command MINIMIZE; 3603//; 3604 if( !strncmp(comd.Data(),""MINI"",4) ) {; 3605 Printf("" ***>MINImize [maxcalls] [tolerance]"");; 3606 Printf("" Causes minimization of the function by the method of Migrad,"");; 3607 Printf("" as does the MIGrad command, but switches to the SIMplex method"");; 3608 Printf("" if Migrad fails to converge. Arguments are as for MIGrad."");; 3609 Printf("" Note that command requires four characters to be unambiguous."");; 3610 goto L99;; 3611 }; 3612//______________________________________________________________________________; 3613//; 3614// Command MINOS; 3615//; 3616 if( !strncmp(comd.Data(),""MIN0"",4) ) {; 3617 Printf("" ***>MINOs [maxcalls] [parno] [parno] ..."");; 3618 Printf("" Causes a Minos error analysis to be performed on the parameters"");; 3619 Printf("" whose numbers [parno] are specified. If none are specified,"");; 3620 Printf("" Minos errors are calculated for all variable parameters."");; 3621 Printf("" Minos errors may be expensive to calculate, but are very"");; 3622 Printf("" reliable since they take account of non-linearities in the"");; 3623 Printf("" problem as well as parameter correlations, and are in general"");; 3624 Printf("" asymmetric."");",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:116380,SIMpl,SIMplex,116380,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['SIMpl'],['SIMplex']
Usability,"amically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands user might override this function. void Merge(TQCommand* c); Add command to the list of merged commands.; This make it possible to group complex actions together so an end user; can undo and redo them with one command. Execution of TQUndoManager::Undo(),; TQUndoManager::Redo() methods only invokes the top level command as a whole. Merge method is analogous to logical join operation. Note: Merge method invokes redo action. Long64_t Merge(TCollection* , TFileMergeInfo* ); Merge a collection of TQCommand. void Add(TObject* obj, Option_t* opt); Add command to the list of merged commands. Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command. Bool_t CanCompress(TQCommand* c) const; By default, commands can be compressed if they are:. - equal; - setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TQCommand.html:20413,Undo,Undo,20413,root/html530/TQCommand.html,https://root.cern,https://root.cern/root/html530/TQCommand.html,5,['Undo'],['Undo']
Usability,"amically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands user might override this function. void Merge(TQCommand* c); Add command to the list of merged commands.; This make it possible to group complex actions together so an end user; can undo and redo them with one command. Execution of TQUndoManager::Undo(),; TQUndoManager::Redo() methods only invokes the top level command as a whole. Merge method is analogous to logical join operation. Note: Merge method invokes redo action. void Add(TObject* obj, Option_t* opt); Add command to the list of merged commands. Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command. Bool_t CanCompress(TQCommand* c) const; By default, commands can be compressed if they are:. - equal; - setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this function. Bool_t IsEqual(const TObject* obj) const; Equal comparison. The commands ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:20240,Undo,Undo,20240,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,1,['Undo'],['Undo']
Usability,"ample shows the basic concepts for almost any GUI-application in ROOT and it is important to understand how it is constructed. The example program is written as a named script. See “Cling the C++ Interpreter”. Remember that the named script can be executed via; root[] .x example.C; only if the filename (without extension) and the function entry point are both the same. We need to say a few words about the parent-children relationship between the widgets before going through the real code. The widgets’ behaviors are based on this relationship. Every parent widget is responsible for where the children are and it ensures all properties and behavior for them. For example, if you want to hide several widgets, it will be enough to hide their parent widget. Later you can show the parent and the children will appear too. Writing your code you have to specify the parent-child relationship. Usually in a child constructor the address of the parent is passed as an argument. In general frames are parents of simple widgets. In this example you will see how we organize the parent-children relationship by using frame widgets in addition to the canvas window and button widgets.; Let’s now go through the code of the example.C.; The first lines include ROOT header files. The header file names are almost always as the class names (TApplication, TF1, TCanvas), but there are cases when similar classes are grouped together in one header file: all frames are declared in TGFrame.h, all buttons - in TGButton.h, etc. Our small example is based on an object of the class MyMainFrame.; new MyMainFrame(gClient->GetRoot(),200,200);; The first parameter gClient->GetRoot() makes the initial connection to the window server. It is a pointer to the root window of the screen, which is obtained from gClient. The next two parameters initialize the width and height of the application window in pixels. Let see what MyMainFrame is. The three arguments pass to the TGMainFrame constructor when we create the fMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1131037,simpl,simple,1131037,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"ample, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Efficient analysis in Python section for appropriate usage in Python): ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterprete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:80017,simpl,simple,80017,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['simpl'],['simple']
Usability,"amples”. A sample is a set of values defining the inputs and the corresponding output that the network should ideally provide. In ROOT this is a TTree entry. The first thing to be decided is the network layout. This layout is described in a string where the layers are separated by semicolons. The input/output layers are defined by giving the expression for each neuron, separated by comas. Hidden layers are just described by the number of neurons.; In addition, input and output layer formulas can be preceded by ‘@’ (e.g. “@out”) if one wants to normalize the corresponding value. Also, if the string ends with ‘!’, output neurons are set up for classification, i.e. with a sigmoid (1 neuron) or softmax (more neurons) activation function.; Many questions on the good usage of neural network, including rules of dumb to determine the best network topology are addressed at ftp://ftp.sas.com/pub/neural/FAQ.html; // a simple network: 2 inputs, 10 hidden and 1 normalized; // output neuron; TMultiLayerPerceptron network(""r,z:10:@Br"",tree);; Expressions are evaluated as for TTree::Draw(). Input and outputs are taken from the TTree associated with the network. This TTree can be given as argument of the constructor or defined later with TMultiLayerPerceptron::SetData(). Events can also be weighted. The weight expression can be given in the constructor or set later with the method SetWeight() of the class TMultiLayerPerceptron. Two datasets must be defined before learning the network: a training dataset that is used when minimizing the error, and a test dataset that will avoid bias. Those two datasets can be built aside and then given to the network, or can be built from a standard expression. By default, half of the events are put in both datasets.; // a more complex 4:8:1 network; // the ptsumf branch is used as weigh;; // default event lists are explicit; TMultiLayerPerceptron network(""m,pt,acol,acopl:8:type"",""pt"",tree,; ""Entry$%2"",""Entry$/2"");; The method TMultiLayerPerceptron::S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:235470,simpl,simple,235470,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"ams[ 5] *= ratio;; f2params[10] *= ratio;; f2->SetParameters(f2params);; h2->Fit(""f2"",""N"");; auto cutg = new TCutG(""cutg"",5);; cutg->SetPoint(0,-7,-7);; cutg->SetPoint(1, 2,-7);; cutg->SetPoint(2, 2, 2);; cutg->SetPoint(3,-7, 2);; cutg->SetPoint(4,-7,-7);; h2->Draw(""lego2 0"");; h2->SetFillColor(38);; f2->SetNpx(80);; f2->SetNpy(80);; f2->Draw(""surf1 same bb [cutg]"");; return c;; }; c#define c(i)Definition RSha256.hxx:101; TCanvas.h; TCutG.h; TF2.h; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; TH2.h; nentriesint nentriesDefinition THbookFile.cxx:91; TMath.h; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TCutGGraphical cut class.Definition TCutG.h:20; TF2A 2-Dim function with parameters.Definition TF2.h:29; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; double; xDouble_t x[n]Definition legend1.C:17; RooFit::Detail::MathFuncs::ratiodouble ratio(double numerator, double denominator)Definition MathFuncs.h:103; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; AuthorRene Brun ; Definition in file fit2a.C. tutorialsfitfit2a.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fit2a_8C.html:4141,Guid,Guide,4141,doc/master/fit2a_8C.html,https://root.cern,https://root.cern/doc/master/fit2a_8C.html,1,['Guid'],['Guide']
Usability,"an = false . ). evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ; If the pointer g is not null evaluate also the gradient of the pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 891 of file FitUtil.cxx. ◆ EvaluatePoissonBinPdf(). double ROOT::Fit::FitUtil::EvaluatePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation By default is extended, pass extend to false if want to be not extended (MultiNomial) . ◆ EvaluatePoissonLogLGradient(). void ROOT::Fit::FitUtil::EvaluatePoissonLogLGradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:10238,simpl,simple,10238,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,1,['simpl'],['simple']
Usability,"an act like this, considering a given volume as temporary MARS, but we will describe this feature later on. Let us focus on the biggest pack - it is mandatory to define one. Consider the simplest geometry that is made of a single box. Here is an example on how to build it:. Example 1: Creating the World; We first need to load the geometry library. This is not needed if one does ""make map"" in root folder.; root[] gSystem->Load(""libGeom"");; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; Second, we have to create an instance of the geometry manager class. This takes care of all the modeller components, performing several tasks to insure geometry validity and containing the user interface for building and interacting with the geometry. After its creation, the geometry manager class can be accessed with the global gGeoManager:; root[] new TGeoManager(""world"", ""the simplest geometry"");; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; We want to create a single volume in our geometry, but since any volume needs to have an associated medium, we will create a dummy one. You can safely ignore the following lines for the time being, since materials and media will be explained in detail later on.; root[] TGeoMaterial *mat = new TGeoMaterial(""Vacuum"",0,0,0);; root[] TGeoMedium *med = new TGeoMedium(""Vacuum"",1,mat);; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23; We can finally make our volume having a box shape. Note that the world volume does not need to be a box - it can be any other shape. Generally, boxes and tubes are the most recommendable shapes for this purpose due to their fast navigation algorithms.; root[] TGeoVolume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:4683,simpl,simplest,4683,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simplest']
Usability,"an associated iterator class that knows how to sequentially retrieve each member in turn. The relationship between a collection and its iterator is very close and may require that the iterator has full access to the collection (i.e. it is a friend class). In general iterator will be used via the TIter wrapper class. For example:. TList TListIter; TMap TMapIter. 16.3 Foundation Classes; All collections are based on the fundamental classes: TCollection and TIterator. They are so generic that it is not possible to create objects from them; they are only used as base classes for other classes (i.e. they are abstract base classes).; The TCollection class provides the basic protocol (i.e. the minimum set of member functions) that all collection classes have to implement. These include:. Add Adds another object to the collection.; GetSize Returns the number of objects in the collection.; Clear Clears out the collection, but does not delete the removed objects.; Delete Clears out the collection and deletes the removed objects. This should only be used if the collection owns its objects (which are not normally the case).; FindObject Finds an object given either its name or address.; MakeIterator Returns an iterator associated with the collection.; Remove Removes an object from the collection. The code example below shows a class containing three lists, where the fTracks list is the owning collection and the other two lists are used to store a sub-set of the track objects. In the destructor of the class, the method Delete is called for the owning collection to delete correctly its entire track objects. To delete the objects in the container use fTrack->Delete(). To delete the container itself, do ’delete fTracks'.; class TEvent : public TObject {; private:; TList *fTracks; //list of all tracks; TList *fVertex1; //subset of tracks part of vertex1; TList *fVertex2; //subset of tracks part of vertex2; };; TEvent::~TEvent(); {; fTracks->Delete();; delete fTracks;; delete fVertex1;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:845495,Clear,Clears,845495,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Clear'],['Clears']
Usability,"an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and column-wise storage performance ;  cernbuild.C Read data (CERN staff) from an ascii file and create a root file with a Tree ;  cernstaff.C Playing with a Tree containing variables of type character ;  circular.C Example of a circular Tree ;  clonesA_Event.CExample to write & read a Tree built with a complex class inheritance tree ;  clonesA_Event.cxx;  clonesA_Event.h;  copytree.C Copy a subset of a Tree to a new Tree ;  copytree2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:154567,simpl,simple,154567,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,3,['simpl'],['simple']
Usability,"an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Type () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:12533,Clear,Clear,12533,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,1,['Clear'],['Clear']
Usability,"an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TString & String ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjString.html:2279,Clear,Clear,2279,doc/master/classTObjString.html,https://root.cern,https://root.cern/doc/master/classTObjString.html,1,['Clear'],['Clear']
Usability,"an offset. ; This function sets the output value with an offset for the given argument. It should only be used in reducer nodes. Depending on the current OffsetMode, the result will either be just the value, the value minus the offset, of just the offset.; Parameters. argPointer to the RooAbsArg object. ; valThe value to be set. ; offsetThe offset value. Exceptions. std::runtime_errorif the argument is not a reducer node. . Definition at line 100 of file EvalContext.cxx. ◆ size(). auto RooFit::EvalContext::size ; (; ); const. inline . Definition at line 88 of file EvalContext.h. Friends And Related Symbol Documentation. ◆ Evaluator. friend class Evaluator. friend . Definition at line 118 of file EvalContext.h. Member Data Documentation. ◆ _bufferIdx. std::size_t RooFit::EvalContext::_bufferIdx = 0. private . Definition at line 125 of file EvalContext.h. ◆ _buffers. std::vector<std::vector<double> > RooFit::EvalContext::_buffers. private . Definition at line 124 of file EvalContext.h. ◆ _cfgs. std::vector<RooBatchCompute::Config> RooFit::EvalContext::_cfgs. private . Definition at line 126 of file EvalContext.h. ◆ _ctx. std::vector<std::span<const double> > RooFit::EvalContext::_ctx. private . Definition at line 122 of file EvalContext.h. ◆ _currentOutput. std::span<double> RooFit::EvalContext::_currentOutput. private . Definition at line 121 of file EvalContext.h. ◆ _enableVectorBuffers. bool RooFit::EvalContext::_enableVectorBuffers = false. private . Definition at line 123 of file EvalContext.h. ◆ _offsetMode. OffsetMode RooFit::EvalContext::_offsetMode = OffsetMode::WithoutOffset. private . Definition at line 120 of file EvalContext.h. Libraries for RooFit::EvalContext:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooFit/EvalContext.h; roofit/roofitcore/src/RooFit/EvalContext.cxx. RooFitEvalContext. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1EvalContext.html:5331,Guid,Guide,5331,doc/master/classRooFit_1_1EvalContext.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1EvalContext.html,1,['Guid'],['Guide']
Usability,"an use the mouse to click on the contour of; the histogram hpx. When the mouse is clicked, the bin number and its; contents are printed.; Example2 of use of exec1.C. Root > TFile f(""hsimple.root""); Root > hpxpy.Draw(); Root > c1.AddExec(""ex2"","".x exec2.C""); When moving the mouse in the canvas, a second canvas shows the; projection along X of the bin corresponding to the Y position; of the mouse. The resulting histogram is fitted with a gaussian.; A ""dynamic"" line shows the current bin position in Y.; This more elaborated example can be used as a starting point; to develop more powerful interactive applications exploiting CINT; as a development engine. void AutoExec(); Execute the list of Execs when a pad event occurs. void Browse(TBrowser* b); Browse pad. TLegend * BuildLegend(Double_t x1 = 0.5, Double_t y1 = 0.67000000000000004, Double_t x2 = 0.88, Double_t y2 = 0.88, const char* title = """"); Build a legend from the graphical objects in the pad. A simple method to build automatically a TLegend from the; primitives in a TPad. Only those deriving from TAttLine,; TAttMarker and TAttFill are added, excluding TPave and TFrame; derived classes. x1, y1, x2, y2 are the TLegend coordinates.; title is the legend title. By default it is "" "". The caller; program owns the returned TLegend. If the pad contains some TMultiGraph or THStack the individual; graphs or histograms in them are added to the TLegend. TVirtualPad * cd(Int_t subpadnumber = 0); Set Current pad.; When a canvas/pad is divided via TPad::Divide, one can directly; set the current path to one of the subdivisions.; See TPad::Divide for the convention to number subpads.; Returns the new current pad, or 0 in case of failure.; For example:; c1.Divide(2,3); // create 6 pads (2 divisions along x, 3 along y).; To set the current pad to the bottom right pad, do; c1.cd(6);; Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad; to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad; poin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPad.html:32933,simpl,simple,32933,root/html602/TPad.html,https://root.cern,https://root.cern/root/html602/TPad.html,2,['simpl'],['simple']
Usability,"anDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TBtree (Int_t ordern=3);  Create a B-tree of certain order (by default 3). ;  ; virtual ~TBtree ();  Delete B-tree. ;  ; void Add (TObject *obj) override;  Add object to B-tree. ;  ; void AddAfter (const TObject *, TObject *obj) override;  ; void AddAt (TObject *obj, Int_t) override;  ; void AddBefore (const TObject *, TObject *obj) override;  ; void AddFirst (TObject *obj) override;  ; void AddLast (TObject *obj) override;  ; TObject * After (const TObject *obj) const override;  Cannot use this method since B-tree decides order. ;  ; TObject * At (Int_t idx) const override;  ; TObject * Before (const TObject *obj) const override;  May not use this method since B-tree decides order. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from B-tree. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from B-tree AND delete all heap based objects. ;  ; TObject * FindObject (const char *name) const override;  Find object using its name (see object's GetName()). ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using the objects Compare() member function. ;  ; TObject * First () const override;  ; TObject ** GetObjectRef (const TObject *) const override;  ; TClass * IsA () const override;  ; TObject * Last () const override;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Returns a B-tree iterator. ;  ; TObject * operator[] (Int_t i) const;  ; Int_t Order ();  ; Int_t Rank (const TObject *obj) const;  Returns the rank of the object in the tree. ;  ; TObject * Remove (TObject *obj) override;  Remove an object from the tree. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the btree to or from the I/O buffer. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBtree.html:10192,Clear,Clear,10192,doc/master/classTBtree.html,https://root.cern,https://root.cern/doc/master/classTBtree.html,1,['Clear'],['Clear']
Usability,anHist.cxx;  unuranMulti2D.cxx;  unuranMultiDim.cxx;  unuranSimple.cxx;  ► vc;  ► examples;  ► buddhabrot;  main.cpp;  main.h;  ► finitediff;  main.cpp;  ► fit;  GaussFunction.h;  MinimizerTypes.h;  testFitPerf.cxx;  ► genvector;  vectorOperation.cxx;  ► mandelbrot;  main.cpp;  main.h;  mandel.cpp;  mandel.h;  ► matrix;  main.cpp;  ► polarcoord;  main.cpp;  ► smatrix;  matrix_op_vec.h;  matrix_util.h;  testKalman.cxx;  testOperations.cxx;  TestTimer.h;  tsc.h;  ► include;  ► Vc;  ► avx;  casts.h;  const.h;  const_data.h;  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  sorthelper.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  writemaskedvector.h;  ► common;  aliasingentryhelper.h;  bitscanintrinsics.h;  deinterleave.h;  exponential.h;  fix_clang_emmintrin.h;  iif.h;  interleavedmemory.h;  logarithm.h;  macros.h;  memory.h;  memorybase.h;  memoryfwd.h;  operand.h;  operators.h;  storage.h;  support.h;  trigonometric.h;  types.h;  undomacros.h;  vectortuple.h;  windows_fix_intrin.h;  ► internal;  namespace.h;  ► scalar;  helperimpl.h;  limits.h;  macros.h;  mask.h;  math.h;  types.h;  undomacros.h;  vector.h;  writemaskedvector.h;  ► sse;  casts.h;  const.h;  const_data.h;  debug.h;  helperimpl.h;  intrinsics.h;  limits.h;  macros.h;  mask.h;  math.h;  shuffle.h;  types.h;  undomacros.h;  vector.h;  vectorhelper.h;  cpuid.h;  global.h;  support.h;  vector.h;  version.h;  ► src;  avx_sorthelper.cpp;  const.cpp;  cpuid.cpp;  support.cpp;  trigonometric.cpp;  ► tests;  arithmetics.cpp;  casts.cpp;  const.h;  convert-sincos-reference.cpp;  deinterleave.cpp;  expandandmerge.cpp;  gather.cpp;  implicit_type_conversion.cpp;  implicit_type_conversion_failures.cpp;  linkTest0.cpp;  linkTest1.cpp;  linkTestLib0.cpp;  linkTestLib1.cpp;  linkTestLib2.cpp;  linkTestLib3.cpp;  load.cpp;  mask.cpp;  math.cpp;  memory.cpp;  scalaraccess.cpp;  scatter.cpp;  sse_blend.cpp;  stlcontainer.cpp;  store.cpp;  supportfunctions.cpp;  swizzl,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:58611,undo,undomacros,58611,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['undo'],['undomacros']
Usability,"anager::AddMaterialInt_t AddMaterial(const TGeoMaterial *material)Add a material to the list. Returns index of the material in list.Definition TGeoManager.cxx:616; TGeoManager::GetHMatrixTGeoHMatrix * GetHMatrix()Return stored current matrix (global matrix of the next touched node).Definition TGeoManager.cxx:2139; TGeoManager::AddVolumeInt_t AddVolume(TGeoVolume *volume)Add a volume to the list. Returns index of the volume in list.Definition TGeoManager.cxx:743; TGeoManager::IsStreamingVoxelsBool_t IsStreamingVoxels() constDefinition TGeoManager.h:463; TGeoManager::SetCurrentPointvoid SetCurrentPoint(Double_t *point)Definition TGeoManager.h:515; TGeoManager::GetVisOptionInt_t GetVisOption() constReturns current depth to which geometry is drawn.Definition TGeoManager.cxx:2157; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; TGeoManager::ClearShapevoid ClearShape(const TGeoShape *shape)Remove a shape from the list of shapes.Definition TGeoManager.cxx:1617; TGeoManager::GetMediumTGeoMedium * GetMedium(const char *medium) constSearch for a named tracking medium. All trailing blanks stripped.Definition TGeoManager.cxx:3022; TGeoManager::WeightDouble_t Weight(Double_t precision=0.01, Option_t *option=""va"")Estimate weight of volume VOL with a precision SIGMA(W)/W better than PRECISION.Definition TGeoManager.cxx:3896; TGeoManager::SetNsegmentsvoid SetNsegments(Int_t nseg)Set number of segments for approximating circles in drawing.Definition TGeoManager.cxx:3594; TGeoManager::GetExportPrecisionstatic UInt_t GetExportPrecision()Definition TGeoManager.cxx:4341; TGeoManager::GetPainterTVirtualGeoPainter * GetPainter() constDefinition TGeoManager.h:209; TGeoManager::IsCheckingOverlapsBool_t IsCheckingOverlaps() constDefinition TGeoManager.h:389; TGeoManager::RandomPointsvoid RandomPoints(const TGeoVolume *vol, Int_t npoints=10000, Option_t *option="""")Draw random",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:123635,Clear,ClearShapevoid,123635,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,2,['Clear'],"['ClearShape', 'ClearShapevoid']"
Usability,"analysis when inverting matrices with rank problems ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:23321,Clear,Clear,23321,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,2,['Clear'],['Clear']
Usability,"ance::GetSeparationGain ; (; const Double_t ; nLeft, . const Double_t ; targetLeft, . const Double_t ; target2Left, . const Double_t ; nTot, . const Double_t ; targetTot, . const Double_t ; target2Tot . ). Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ; into a ""left-node"" and a ""right-node"" (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) this is then the quality criteria which is optimized for when trying to increase the information in the system for the Regression: as the ""Gain is maximised"", the RMS (sqrt(variance)) which is used as a ""separation"" index should be as small as possible. the ""figure of merit"" here has to be -(rms left+rms-right) or 1/rms... ; Definition at line 69 of file RegressionVariance.cxx. ◆ GetSeparationIndex(). Double_t TMVA::RegressionVariance::GetSeparationIndex ; (; const Double_t ; n, . const Double_t ; target, . const Double_t ; target2 . ). virtual . Separation Index: a simple Variance. ; Definition at line 88 of file RegressionVariance.cxx. ◆ IsA(). virtual TClass * TMVA::RegressionVariance::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 94 of file RegressionVariance.h. ◆ Streamer(). virtual void TMVA::RegressionVariance::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::RegressionVariance::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 94 of file RegressionVariance.h. Member Data Documentation. ◆ fName. TString TMVA::RegressionVariance::fName. protected . name of the concrete Separation Index implementation ; Definition at line 92 of file RegressionVariance.h. Libraries for TMVA::RegressionVariance:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/RegressionVariance.h; tmva/tmva/src/RegressionVariance.cxx. TMVARegressionVariance. ROOT master - Reference Guide Generated on Tue Nov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RegressionVariance.html:4399,simpl,simple,4399,doc/master/classTMVA_1_1RegressionVariance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RegressionVariance.html,1,['simpl'],['simple']
Usability,"anch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Implement multi-line detailed printing. ;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; virtual bool readFromStream (std::istream &is, bool compact, bool verbose=false)=0;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:15099,clear,clear,15099,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clear']
Usability,"anch::fgCount! branch counter; static TBranch::EStatusBitsTBranch::kAutoDelete; static TBranch::EStatusBitsTBranch::kDoNotUseBufferMap. private:. Long64_tfRequestedEntry! Cursor indicating which entry is being requested. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchRef(); Default constructor. TBranchRef(TTree* tree); Main constructor called by TTree::BranchRef. ~TBranchRef(); Typical destructor. void Clear(Option_t* option = """"); Clear entries in the TRefTable. Int_t Fill(); Fill the branch basket with the referenced objects parent numbers. Bool_t Notify(); This function is called by TRefTable::Notify, itself called by; TRef::GetObject.; The function reads the branch containing the object referenced; by the TRef. void Print(Option_t* option = """") const; Print the TRefTable branch. void ReadLeavesImpl(TBuffer& b); This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. void FillLeavesImpl(TBuffer& b); This function called by TBranch::Fill overloads TBranch::FillLeaves. void Reset(Option_t* option = """"); Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. void ResetAfterMerge(TFileMergeInfo* ); Reset a Branch after a Merge operation (drop data but keep customizations); TRefTable is cleared. Int_t SetParent(const TObject* obj, Int_t branchID); -- Set the current parent branch. This function is called by TBranchElement::GetEntry(); and TBranchElement::Fill() when reading or writing; branches that may contain referenced objects. TBranchRef(). TRefTable * GetRefTable() const; {return fRefTable;}. void SetRequestedEntry(Long64_t entry); {fRequestedEntry = entry;}. » Author: Rene Brun 19/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TBranchRef.html:15481,clear,cleared,15481,root/html604/TBranchRef.html,https://root.cern,https://root.cern/root/html604/TBranchRef.html,2,['clear'],['cleared']
Usability,"anch::fgCount! branch counter; static TBranch::EStatusBitsTBranch::kAutoDelete; static TBranch::EStatusBitsTBranch::kDoNotUseBufferMap. private:. Long64_tfRequestedEntry! Cursor indicating which entry is being requested. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchRef(); Default constructor. TBranchRef(TTree* tree); Main constructor called by TTree::BranchRef. ~TBranchRef(); Typical destructor. void Clear(Option_t* option = """"); Clear entries in the TRefTable. Int_t Fill(); Fill the branch basket with the referenced objects parent numbers. Bool_t Notify(); This function is called by TRefTable::Notify, itself called by; TRef::GetObject.; The function reads the branch containing the object referenced; by the TRef. void Print(Option_t* option = """") const; Print the TRefTable branch. void ReadLeavesImpl(TBuffer& b); This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. void FillLeavesImpl(TBuffer& b); This function called by TBranch::Fill overloads TBranch::FillLeaves. void Reset(Option_t* option = """"); Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. void ResetAfterMerge(TFileMergeInfo* ); Reset a Branch after a Merge operation (drop data but keep customizations); TRefTable is cleared. Int_t SetParent(const TObject* obj, Int_t branchID); -- Set the current parent branch. This function is called by TBranchElement::GetEntry(); and TBranchElement::Fill() when reading or writing; branches that may contain referenced objects. TBranchRef(). TRefTable * GetRefTable() const; {return fRefTable;}. void SetRequestedEntry(Long64_t entry); {fRequestedEntry = entry;}. » Author: Rene Brun 19/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 14:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBranchRef.html:15481,clear,cleared,15481,root/html602/TBranchRef.html,https://root.cern,https://root.cern/root/html602/TBranchRef.html,2,['clear'],['cleared']
Usability,"anches to be processed in parallel when IMT is on, sorted by average task time ; Definition at line 144 of file TTree.h. ◆ fTargetMemoryRatio. Float_t TTree::fTargetMemoryRatio {1.1f}. protected . ! Ratio for memory usage in uncompressed buffers versus actual occupancy. ; 1.0 ; Definition at line 146 of file TTree.h. ◆ fTimerInterval. Int_t TTree::fTimerInterval. protected . Timer interval in milliseconds. ; Definition at line 91 of file TTree.h. ◆ fTotalBuffers. std::atomic<Long64_t> TTree::fTotalBuffers. protected . ! Total number of bytes in branch buffers ; Definition at line 108 of file TTree.h. ◆ fTotBytes. Long64_t TTree::fTotBytes. protected . Total number of bytes in all branches before compression. ; Definition at line 86 of file TTree.h. ◆ fTransientBuffer. TBuffer* TTree::fTransientBuffer. protected . ! Pointer to the current transient buffer. ; Definition at line 138 of file TTree.h. ◆ fTreeIndex. TVirtualIndex* TTree::fTreeIndex. protected . Pointer to the tree Index (if any) ; Definition at line 129 of file TTree.h. ◆ fUpdate. Int_t TTree::fUpdate. protected . Update frequency for EntryLoop. ; Definition at line 93 of file TTree.h. ◆ fUserInfo. TList* TTree::fUserInfo. protected . pointer to a list of user objects associated to this Tree ; Definition at line 133 of file TTree.h. ◆ fWeight. Double_t TTree::fWeight. protected . Tree weight (see TTree::SetWeight) ; Definition at line 90 of file TTree.h. ◆ fZipBytes. Long64_t TTree::fZipBytes. protected . Total number of bytes in all branches after compression. ; Definition at line 87 of file TTree.h. ◆ kMaxEntries. constexpr Long64_t TTree::kMaxEntries = TVirtualTreePlayer::kMaxEntries. staticconstexpr . Definition at line 229 of file TTree.h. Libraries for TTree:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TTree.h; tree/tree/src/TTree.cxx. TTree. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:236787,Guid,Guide,236787,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['Guid'],['Guide']
Usability,"and histograms in each bin ;  ; const TString & Color (const TString &);  human readable color strings ;  ; void ComputeStat (const std::vector< TMVA::Event * > &, std::vector< Float_t > *, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Int_t signalClass, Bool_t norm=kFALSE);  sanity check ;  ; Double_t ComputeVariance (Double_t sumx2, Double_t sumx, Int_t nx);  compute variance from given sums ;  ; Bool_t ContainsRegularExpression (const TString &s);  check if regular expression helper function to search for ""$!%^&()'<>?= "" in a string ;  ; void FormattedOutput (const std::vector< Double_t > &, const std::vector< TString > &, const TString titleVars, const TString titleValues, MsgLogger &logger, TString format=""%+1.3f"");  formatted output of simple table ;  ; void FormattedOutput (const TMatrixD &, const std::vector< TString > &, MsgLogger &logger);  formatted output of matrix (with labels) ;  ; void FormattedOutput (const TMatrixD &, const std::vector< TString > &vert, const std::vector< TString > &horiz, MsgLogger &logger);  formatted output of matrix (with labels) ;  ; void * GetChild (void *parent, const char *childname=nullptr);  get child node ;  ; const char * GetContent (void *node);  XML helpers. ;  ; const TMatrixD * GetCorrelationMatrix (const TMatrixD *covMat);  turns covariance into correlation matrix ;  ; Double_t GetCorrelationRatio (const TH2F &);  Compute Correlation Ratio of 2D histogram to estimate functional dependency between two variables Author: Moritz Backes, Geneva (2009) ;  ; TH1 * GetCumulativeDist (TH1 *h);  get the cumulative distribution of a histogram ;  ; Int_t GetIndexMaxElement (std::vector< Double_t > &);  find index of maximum entry in vector ;  ; Int_t GetIndexMinElement (std::vector< Double_t > &);  find index of minimum entry in vector ;  ; Double_t GetMutualInformation (const TH2F &);  Mutual Information method for non-linear correlations estimates in 2D histogram Author: Moritz Backes, Geneva (2009) ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Tools.html:2779,simpl,simple,2779,doc/master/classTMVA_1_1Tools.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Tools.html,1,['simpl'],['simple']
Usability,"and in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:1860,undo,undo,1860,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,12,['undo'],['undo']
Usability,"and it is not. Of course, we managed to get rid of the ""unnecessary"" volume C in our geometry, but we end-up with a more flat structure for D,E and F (more daughters inside). This can get much worse when extensively used, as in the case: assemblies of assemblies.; For deciding what to choose between using virtual containers or assemblies for a specific case, one can use for both cases, after the geometry was closed:; gGeoManager->SetTopVolume(ptr_D);; gGeoManager->Test();; gGeoManager->RestoreMasterVolume();; TGeoManager::RestoreMasterVolumevoid RestoreMasterVolume()Restore the master volume of the geometry.Definition TGeoManager.cxx:3118; TGeoManager::Testvoid Test(Int_t npoints=1000000, Option_t *option="""")Check time of finding ""Where am I"" for n points.Definition TGeoManager.cxx:1942; The ptr_D is a pointer to volume D containing the interesting structure. The test will provide the timing for classifying 1 million random points inside D.; Examples of Volume Positioning; Now let us make a simple volume representing a copper wire. We suppose that a medium is already created (see TGeoMedium class on how to create media).; We will create a TUBE shape for our wire, having Rmin=0cm, Rmax=0.01cm and a half-length dZ=1cm:; TGeoTube *tube = new TGeoTube(""wire_tube"",0,0.01,1);; TGeoTubeDefinition TGeoTube.h:17; One may omit the name for the shape wire_tube, if no retrieving by name is further needed during geometry building. Different volumes having different names and materials can share the same shape.; Now let's make the volume for our wire:; TGeoVolume *wire_co = new TGeoVolume(""WIRE_CO"",tube,ptrCOPPER); //(*); (*) Do not bother to delete the media, shapes or volumes that you have created since all will be automatically cleaned on exit by the manager class.; If we would have taken a look inside TGeoManager::MakeTube() method, we would have been able to create our wire with a single line:; TGeoVolume *wire_co = gGeoManager->MakeTube(""WIRE_CO"",ptrCOPPER,0,0.01,1); //(*); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:34709,simpl,simple,34709,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simple']
Usability,"and not all columns are equally interesting. Create a TTree to store columnar data. Construct a TTree; Add a column of Fundamental Types and Arrays thereof; Add a column of a STL Collection instances; Add a column holding an object; Add a column holding a TObjectArray; Fill the tree; Add a column to an already existing Tree; An Example. Construct a TTree; TTree tree(name, title); namechar name[80]Definition TGX11.cxx:110; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; Creates a Tree with name and title.; Various kinds of branches can be added to a tree:; Variables representing fundamental types, simple classes/structures or list of variables: for example for C or Fortran structures.; Any C++ object or collection, provided by the STL or ROOT. In the following, the details about the creation of different types of branches are given. Add a column (""branch"") holding fundamental types and arrays thereof; This strategy works also for lists of variables, e.g. to describe simple structures. It is strongly recommended to persistify those as objects rather than lists of leaves.; auto branch = tree.Branch(branchname, address, leaflist, bufsize). address is the address of the first item of a structure; leaflist is the concatenation of all the variable names and types separated by a colon character : The variable name and the variable type are separated by a slash (/). The variable type must be 1 character. (Characters after the first are legal and will be appended to the visible name of the leaf, but have no effect.) If no type is given, the type of the variable is assumed to be the same as the previous variable. If the first variable does not have a type, it is assumed of type F by default. The list of currently supported types is given below:; C : a character string terminated by the 0 character; B : an 8 bit signed integer (Char_t); Treated as a character when in an array.; b : an 8 bit unsigned integer (UChar_t); S : a 16 bit signed integer (Short_t); s : ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:2380,simpl,simple,2380,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['simpl'],['simple']
Usability,"and remove all instances of element from them. ; Definition at line 287 of file TEveScene.cxx. ◆ DestroyScenes(). void TEveSceneList::DestroyScenes ; (; ). Destroy all scenes and their contents. ; Tho object with non-zero deny-destroy will still survive. ; Definition at line 247 of file TEveScene.cxx. ◆ IsA(). TClass * TEveSceneList::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 100 of file TEveScene.h. ◆ operator=(). TEveSceneList & TEveSceneList::operator= ; (; const TEveSceneList & ; ). private . ◆ ProcessSceneChanges(). void TEveSceneList::ProcessSceneChanges ; (; Bool_t ; dropLogicals, . TExMap * ; stampMap . ). Loop over all scenes and update them accordingly: . if scene is marked as changed, it is repainted;; otherwise iteration is done over the set of stamped elements and their physical/logical shapes are updated accordingly. This allows much finer update granularity without resetting of complex GL-viewer and GL-scene state. ; Definition at line 307 of file TEveScene.cxx. ◆ RepaintAllScenes(). void TEveSceneList::RepaintAllScenes ; (; Bool_t ; dropLogicals). Repaint all scenes. ; Definition at line 276 of file TEveScene.cxx. ◆ RepaintChangedScenes(). void TEveSceneList::RepaintChangedScenes ; (; Bool_t ; dropLogicals). Repaint scenes that are tagged as changed. ; Definition at line 261 of file TEveScene.cxx. ◆ Streamer(). void TEveSceneList::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEveSceneList::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file TEveScene.h. Libraries for TEveSceneList:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveScene.h; graf3d/eve/src/TEveScene.cxx. TEveSceneList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSceneList.html:36662,Guid,Guide,36662,doc/master/classTEveSceneList.html,https://root.cern,https://root.cern/doc/master/classTEveSceneList.html,1,['Guid'],['Guide']
Usability,"and return the TTreeCache registered with the file and which may; 6329/// contain branches for us. If create is true and there is no cache; 6330/// a new cache is created with default size.; 6331 ; 6332TTreeCache *TTree::GetReadCache(TFile *file, bool create); 6333{; 6334 TTreeCache *pe = GetReadCache(file);; 6335 if (create && !pe) {; 6336 if (fCacheDoAutoInit); 6337 SetCacheSizeAux(true, -1);; 6338 pe = dynamic_cast<TTreeCache*>(file->GetCacheRead(GetTree()));; 6339 if (pe && pe->GetTree() != GetTree()) pe = nullptr;; 6340 }; 6341 return pe;; 6342}; 6343 ; 6344////////////////////////////////////////////////////////////////////////////////; 6345/// Return a pointer to the list containing user objects associated to this tree.; 6346///; 6347/// The list is automatically created if it does not exist.; 6348///; 6349/// WARNING: By default the TTree destructor will delete all objects added; 6350/// to this list. If you do not want these objects to be deleted,; 6351/// call:; 6352///; 6353/// mytree->GetUserInfo()->Clear();; 6354///; 6355/// before deleting the tree.; 6356 ; 6357TList* TTree::GetUserInfo(); 6358{; 6359 if (!fUserInfo) {; 6360 fUserInfo = new TList();; 6361 fUserInfo->SetName(""UserInfo"");; 6362 }; 6363 return fUserInfo;; 6364}; 6365 ; 6366////////////////////////////////////////////////////////////////////////////////; 6367/// Appends the cluster range information stored in 'fromtree' to this tree,; 6368/// including the value of fAutoFlush.; 6369///; 6370/// This is used when doing a fast cloning (by TTreeCloner).; 6371/// See also fAutoFlush and fAutoSave if needed.; 6372 ; 6373void TTree::ImportClusterRanges(TTree *fromtree); 6374{; 6375 Long64_t autoflush = fromtree->GetAutoFlush();; 6376 if (fromtree->fNClusterRange == 0 && fromtree->fAutoFlush == fAutoFlush) {; 6377 // nothing to do; 6378 } else if (fNClusterRange || fromtree->fNClusterRange) {; 6379 Int_t newsize = fNClusterRange + 1 + fromtree->fNClusterRange;; 6380 if (newsize > fMaxClusterRange)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:248550,Clear,Clear,248550,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['Clear'],['Clear']
Usability,"and terminate any interaction in viewer. Bool_t HandleCrossing(Event_t* event); Handle generic Event_t type 'event' - provided to catch focus changes; and terminate any interaction in viewer. Bool_t HandleButton(Event_t* event); Handle mouse button 'event'. Bool_t HandleDoubleClick(Event_t* event); Handle mouse double click 'event'. Bool_t HandleConfigureNotify(Event_t* event); Handle configure notify 'event' - a window resize/movement. Bool_t HandleExpose(Event_t* event); Handle window expose 'event' - show. Bool_t HandleKey(Event_t* event); Handle keyboard 'event'. Bool_t HandleMotion(Event_t* event); Handle mouse motion 'event'. Bool_t Rotate(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Method to handle action TGLViewer::kDragCameraRotate. Bool_t HandleTimer(TTimer* t); If mouse delay timer times out emit signal. void StartMouseTimer(); Start mouse timer in single-shot mode. void StopMouseTimer(); Make sure mouse timers are not running. void ClearMouseOver(); Clear mouse-over state and emit mouse-over signals.; Current overlay element is also told the mouse has left. void Repaint(); Handle window expose 'event' - show. void PopupContextMenu(TGLPhysicalShape* pshp, Event_t* event, Int_t gx, Int_t gy); Popup context menu. void TriggerTooltip(const char* text); Trigger display of tooltip. void RemoveTooltip(); Hide the tooltip. void SetMouseOverSelectDelay(Int_t ms); Set delay of mouse-over probe (highlight). void SetMouseOverTooltipDelay(Int_t ms); Set delay of tooltip timer. Int_t ControlValue(Int_t v); { return fViewerCentricControls ? -v : v; }. Int_t GetTooltipPixelTolerance() const; { return fTooltipPixelTolerance; }. void SetTooltipPixelTolerance(Int_t t); { fTooltipPixelTolerance = t; }. Int_t GetSecSelType() const; { return fSecSelType; }. void SetSecSelType(Int_t t); { fSecSelType = t; }. Bool_t GetDoInternalSelection() const; { return fDoInternalSelection; }. void SetDoInternalSelection(Bool_t x); { fDoInternalSelection = x; }. Bool_t GetArcBall(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLEventHandler.html:13966,Clear,ClearMouseOver,13966,root/html534/TGLEventHandler.html,https://root.cern,https://root.cern/root/html534/TGLEventHandler.html,2,['Clear'],"['Clear', 'ClearMouseOver']"
Usability,"and terminate any interaction in viewer. Bool_t HandleCrossing(Event_t* event); Handle generic Event_t type 'event' - provided to catch focus changes; and terminate any interaction in viewer. Bool_t HandleButton(Event_t* event); Handle mouse button 'event'. Bool_t HandleDoubleClick(Event_t* event); Handle mouse double click 'event'. Bool_t HandleConfigureNotify(Event_t* event); Handle configure notify 'event' - a window resize/movement. Bool_t HandleExpose(Event_t* event); Handle window expose 'event' - show. Bool_t HandleKey(Event_t* event); Handle keyboard 'event'. Bool_t HandleMotion(Event_t* event); Handle mouse motion 'event'. Bool_t Rotate(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Method to handle action TGLViewer::kDragCameraRotate. Bool_t HandleTimer(TTimer* t); If mouse delay timer times out emit signal. void StartMouseTimer(); Start mouse timer in single-shot mode. void StopMouseTimer(); Make sure mouse timers are not running. void ClearMouseOver(); Clear mouse-over state and emit mouse-over signals.; Current overlay element is also told the mouse has left. void Repaint(); Handle window expose 'event' - show. void PopupContextMenu(TGLPhysicalShape* pshp, Event_t* event, Int_t gx, Int_t gy); Popup context menu. void TriggerTooltip(const char* text); Trigger display of tooltip. void RemoveTooltip(); Hide the tooltip. void SetMouseOverSelectDelay(Int_t ms); Set delay of mouse-over probe (highlight). void SetMouseOverTooltipDelay(Int_t ms); Set delay of tooltip timer. Int_t ControlValue(Int_t v); { return fViewerCentricControls ? -v : v; }. Int_t GetTooltipPixelTolerance() const; { return fTooltipPixelTolerance; }. void SetTooltipPixelTolerance(Int_t t); { fTooltipPixelTolerance = t; }. Int_t GetSecSelType() const; { return fSecSelType; }. void SetSecSelType(Int_t t); { fSecSelType = t; }. Bool_t GetDoInternalSelection() const; { return fDoInternalSelection; }. void SetDoInternalSelection(Bool_t x); { fDoInternalSelection = x; }. » Author: Bertrand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLEventHandler.html:13810,Clear,ClearMouseOver,13810,root/html528/TGLEventHandler.html,https://root.cern,https://root.cern/root/html528/TGLEventHandler.html,6,['Clear'],"['Clear', 'ClearMouseOver']"
Usability,"and terminate any interaction in viewer. Bool_t HandleCrossing(Event_t* event); Handle generic Event_t type 'event' - provided to catch focus changes; and terminate any interaction in viewer. Bool_t HandleButton(Event_t* event); Handle mouse button 'event'. Bool_t HandleDoubleClick(Event_t* event); Handle mouse double click 'event'. Bool_t HandleConfigureNotify(Event_t* event); Handle configure notify 'event' - a window resize/movement. Bool_t HandleExpose(Event_t* event); Handle window expose 'event' - show. Bool_t HandleKey(Event_t* event); Handle keyboard 'event'. Bool_t HandleMotion(Event_t* event); Handle mouse motion 'event'. Bool_t Rotate(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Method to handle action TGLViewer::kDragCameraRotate. Bool_t HandleTimer(TTimer* t); If mouse delay timer times out emit signal. void StartMouseTimer(); Start mouse timer in single-shot mode. void StopMouseTimer(); Make sure mouse timers are not running. void ClearMouseOver(); Clear mouse-over state and emit mouse-over signals.; Current overlay element is also told the mouse has left. void Repaint(); Handle window expose 'event' - show. void PopupContextMenu(TGLPhysicalShape* pshp, Event_t* event, Int_t gx, Int_t gy); Popup context menu. void TriggerTooltip(const char* text); Trigger display of tooltip. void RemoveTooltip(); Hide the tooltip. void SetMouseOverSelectDelay(Int_t ms); Set delay of mouse-over probe (highlight). void SetMouseOverTooltipDelay(Int_t ms); Set delay of tooltip timer. Int_t ControlValue(Int_t v); { return fViewerCentricControls ? -v : v; }. TGLEventHandler(TGWindow* w, TObject* obj). Int_t GetTooltipPixelTolerance() const; { return fTooltipPixelTolerance; }. void SetTooltipPixelTolerance(Int_t t); { fTooltipPixelTolerance = t; }. Int_t GetSecSelType() const; { return fSecSelType; }. void SetSecSelType(Int_t t); { fSecSelType = t; }. Bool_t GetDoInternalSelection() const; { return fDoInternalSelection; }. void SetDoInternalSelection(Bool_t x); { fDo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLEventHandler.html:14500,Clear,ClearMouseOver,14500,root/html602/TGLEventHandler.html,https://root.cern,https://root.cern/root/html602/TGLEventHandler.html,4,['Clear'],"['Clear', 'ClearMouseOver']"
Usability,"and the TEventLists can be defined in the constructor, or later with the suited setter method. The lists used for training and test can be defined either explicitly, or via a string containing the formula to be used to define them, exactly as for a TCut.; The learning method is defined using the TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :. TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS. A weight can be assigned to events, either in the constructor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finally, note that even if this implementation is inspired from the mlpfit code, the feature lists are not exactly matching:. mlpfit hybrid learning method is not implemented; output neurons can be normalized, this is not the case for mlpfit; the neural net is exported in C++, FORTRAN or PYTHON; the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron. ; Definition at line 26 of file TMultiLayerPerceptron.h. Public ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:8121,simpl,simple,8121,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['simpl'],['simple']
Usability,and thus qualifies as performance killer. Only used for testing. ; Definition at line 58 of file CudaMatrix.h. Public Member Functions;  TCudaDeviceReference (AFloat *devicePointer);  ;  operator AFloat ();  ; void operator+= (AFloat value);  ; void operator-= (AFloat value);  ; void operator= (AFloat value);  ; void operator= (const TCudaDeviceReference &other);  . Private Attributes; AFloat * fDevicePointer;  . #include <TMVA/DNN/Architectures/Cuda/CudaMatrix.h>; Constructor & Destructor Documentation. ◆ TCudaDeviceReference(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::TCudaDeviceReference ; (; AFloat * ; devicePointer). Definition at line 209 of file CudaMatrix.h. Member Function Documentation. ◆ operator AFloat(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::operator AFloat. Definition at line 217 of file CudaMatrix.h. ◆ operator+=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator+= ; (; AFloat ; value). Definition at line 244 of file CudaMatrix.h. ◆ operator-=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator-= ; (; AFloat ; value). Definition at line 256 of file CudaMatrix.h. ◆ operator=() [1/2]. template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator= ; (; AFloat ; value). Definition at line 235 of file CudaMatrix.h. ◆ operator=() [2/2]. template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator= ; (; const TCudaDeviceReference< AFloat > & ; other). Definition at line 227 of file CudaMatrix.h. Member Data Documentation. ◆ fDevicePointer. template<typename AFloat > . AFloat* TMVA::DNN::TCudaDeviceReference< AFloat >::fDevicePointer. private . Definition at line 62 of file CudaMatrix.h. tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaMatrix.h. TMVADNNTCudaDeviceReference. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html:2577,Guid,Guide,2577,doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html,1,['Guid'],['Guide']
Usability,"and when a bin outside the limits is added, call SetFloat() before adding the bin. ; Definition at line 297 of file TH2Poly.cxx. ◆ AddBinToPartition(). void TH2Poly::AddBinToPartition ; (; TH2PolyBin * ; bin). protected . Adds the input bin into the partition cell matrix. ; This method is called in AddBin() and ChangePartition(). ; Definition at line 443 of file TH2Poly.cxx. ◆ ChangePartition(). void TH2Poly::ChangePartition ; (; Int_t ; n, . Int_t ; m . ). Changes the number of partition cells in the histogram. ; Deletes the old partition and constructs a new one. ; Definition at line 515 of file TH2Poly.cxx. ◆ Class(). static TClass * TH2Poly::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TH2Poly::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TH2Poly::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 184 of file TH2Poly.h. ◆ ClearBinContents(). void TH2Poly::ClearBinContents ; (; ). Clears the contents of all bins in the histogram. ; Definition at line 566 of file TH2Poly.cxx. ◆ Clone(). TObject * TH2Poly::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TH1.; Definition at line 554 of file TH2Poly.cxx. ◆ ComputeIntegral(). Double_t TH2Poly::ComputeIntegral ; (; Bool_t ; ). overridevirtual . NOT IMPLEMENTED for TH2Poly. ; Reimplemented from TH1.; Definition at line 1728 of file TH2Poly.cxx. ◆ Copy(). void TH2Poly::Copy ; (; TObject & ; newth2p); const. overridevirtual . Copy function for TH2Poly. ; Reimplemented from TH2.; Definition at line 212 of file TH2Poly.cxx. ◆ CreateBin(). TH2PolyBin * TH2Poly::CreateBin ; (; TObject * ; poly). virtual . Create appropriate histogram bin. ; e.g. TH2Poly creates TH2PolyBin, TProfile2Poly creates TProfile2PolyBin This is done so",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:69320,Clear,ClearBinContents,69320,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,1,['Clear'],['ClearBinContents']
Usability,and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite PROOF-Lite Server Application Interface; TProofSuperMaster PROOF control class for making submasters; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t> Class describing a vector container; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t> Class describing a vector container; TPyDispatcher Python dispatcher class; TPyMultiGenFunction Python for Math::IMultiGenFunction equivalent; TPyMultiGradFunction Python for Math::IMultiGradFunction equivalent; TPyReturn Python morphing return object; TPySelector Python equivalent base class for PROOF; TPythia8 Interface class of Pythia8; TPythia8Decayer Particle Decayer using Pythia8; TPython Access to the python interpreter; TQApplication creates ROOT environment with the Qt windowing system; TQCanvasImp ABC describing Qt GUI independent main window; TQCanvasMenu interface to Qt based context sensitive popup menus; TQClass Class with connections; TQCommand encapsulates the information for undo/redo a single action.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:124868,undo,undo,124868,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['undo'],['undo']
Usability,"and);  Exec normal constructor. ;  ;  TExec (const TExec &text);  Copy constructor. ;  ; virtual ~TExec ();  Exec default destructor. ;  ; virtual void Exec (const char *command="""");  Execute the command referenced by this object. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Execute the command referenced by this object. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetAction (const char *action);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExec.html:5169,Clear,Clear,5169,doc/master/classTExec.html,https://root.cern,https://root.cern/doc/master/classTExec.html,1,['Clear'],['Clear']
Usability,"and.h>. Inheritance diagram for TFoamIntegrand:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFoamIntegrand(). TFoamIntegrand::TFoamIntegrand ; (; ). inline . Definition at line 11 of file TFoamIntegrand.h. ◆ ~TFoamIntegrand(). TFoamIntegrand::~TFoamIntegrand ; (; ). inlineoverride . Definition at line 12 of file TFoamIntegrand.h. Member Function Documentation. ◆ Class(). static TClass * TFoamIntegrand::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TFoamIntegrand::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TFoamIntegrand::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 15 of file TFoamIntegrand.h. ◆ DeclFileName(). static const char * TFoamIntegrand::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 15 of file TFoamIntegrand.h. ◆ Density(). virtual Double_t TFoamIntegrand::Density ; (; Int_t ; ndim, . Double_t * ;  . ). pure virtual . Implemented in FoamDistribution, and FoamIntegrandFunction. ◆ IsA(). TClass * TFoamIntegrand::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 15 of file TFoamIntegrand.h. ◆ Streamer(). void TFoamIntegrand::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFoamIntegrand::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 15 of file TFoamIntegrand.h. Libraries for TFoamIntegrand:. [legend]; The documentation for this class was generated from the following file:; math/foam/inc/TFoamIntegrand.h. TFoamIntegrand. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoamIntegrand.html:11873,Guid,Guide,11873,doc/master/classTFoamIntegrand.html,https://root.cern,https://root.cern/doc/master/classTFoamIntegrand.html,1,['Guid'],['Guide']
Usability,"andler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically genera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofServ.html:18355,resume,resume,18355,root/html534/TXProofServ.html,https://root.cern,https://root.cern/root/html534/TXProofServ.html,1,['resume'],['resume']
Usability,"andler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofServ.h 29233 2009-06-26 08:07:47Z brun $ » Last generated: 2010-11-1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofServ.html:17608,resume,resume,17608,root/html528/TXProofServ.html,https://root.cern,https://root.cern/root/html528/TXProofServ.html,1,['resume'],['resume']
Usability,"andler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofServ.h 29233 2009-06-26 08:07:47Z brun $ » Last generated: 2011-07-0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXProofServ.html:17795,resume,resume,17795,root/html530/TXProofServ.html,https://root.cern,https://root.cern/root/html530/TXProofServ.html,1,['resume'],['resume']
Usability,"andler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TXProofServ.h 29233 2009-06-26 08:07:47Z brun $ » Last generated: 2011-12-0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXProofServ.html:17795,resume,resume,17795,root/html532/TXProofServ.html,https://root.cern,https://root.cern/root/html532/TXProofServ.html,1,['resume'],['resume']
Usability,"andling -- RooTreeDataStore::loadValues(ds) Skipping ...; [#0] WARNING:DataHandling -- RooTreeDataStore::loadValues(ds) Ignored 35 out-of-range events; RooDataSet::ds[x,y] = 65 entries; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #7 because y cannot accommodate the value 13.3845; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #8 because y cannot accommodate the value 11.1861; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #12 because y cannot accommodate the value 13.7009; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #14 because y cannot accommodate the value -10.6852; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping ...; [#0] WARNING:DataHandling -- RooTreeDataStore::loadValues(ds2) Ignored 36 out-of-range events; RooDataSet::ds2[x,y,z] = 26 entries; [#1] INFO:DataHandling -- RooAbsReal::attachToTree(i) TTree Int_t branch i will be converted to double precision.; RooDataSet::ds3[i,x] = 100 entries; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping event #2 because i cannot accommodate the value 0; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping event #5 because i cannot accommodate the value 0; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping event #8 because i cannot accommodate the value 0; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping event #11 because i cannot accommodate the value 0; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping ...; [#0] WARNING:DataHandling -- RooTreeDataStore::loadValues(ds4) Ignored 33 out-of-range events; RooDataSet::ds4[i,x] = 67 entries; RooDataSet::dsABC[x,y,c] = 26 entries; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf401_importttreethx.C. tutorialsroofitrf401_importttreethx.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf401__importttreethx_8C.html:9388,Guid,Guide,9388,doc/master/rf401__importttreethx_8C.html,https://root.cern,https://root.cern/doc/master/rf401__importttreethx_8C.html,1,['Guid'],['Guide']
Usability,"andom.; The resulting integral is normalized to 1. Double_t * GetIntegral(); Return a pointer to the array of bins integral.; if the pointer fIntegral is null, TH1::ComputeIntegral is called. void Copy(TObject& hnew) const; -*-*-*-*-*Copy this histogram structure to newth1*-*-*-*-*-*-*-*-*-*-*-*. Note that this function does not copy the list of associated functions.; Use TObJect::Clone to make a full copy of an histogram. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the histogram to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); -*-*-*-*-*-*-*-*-*Compute distance from point px,py to a line*-*-*-*-*-*. Compute the closest distance of approach from point px,py to elements; of an histogram.; The distance is computed in pixels units. Algorithm:; Currently, this simple model computes the distance from the mouse; to the histogram contour only. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. void Divide(const TH1* h1); -*-*-*-*-*-*-*-*-*Divide this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this/h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionaly; compute Binomial errors. IMPORTANT NOTE: If you",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:57125,simpl,simple,57125,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,2,['simpl'],['simple']
Usability,"ane3D::Plane3DPlane3D(const Point &p1, const Point &p2, const Point &p3)constructor from three Cartesian point belonging to the planeDefinition Plane3D.h:107; ROOT::Math::Impl::Plane3D::DistanceScalar Distance(const PositionVector3D< T1, U > &p) constReturn the distance to a Point described with generic coordinates.Definition Plane3D.h:179; ROOT::Math::PositionVector3DClass describing a generic position vector (point) in 3 dimensions.Definition PositionVector3D.h:55; ROOT::Math::PositionVector3D::YScalar Y() constCartesian Y, converting if necessary from internal coordinate system.Definition PositionVector3D.h:275; ROOT::Math::PositionVector3D::ZScalar Z() constCartesian Z, converting if necessary from internal coordinate system.Definition PositionVector3D.h:280; ROOT::Math::PositionVector3D::XScalar X() constCartesian X, converting if necessary from internal coordinate system.Definition PositionVector3D.h:270; ROOT::Math::CrossSVector< T, 3 > Cross(const SVector< T, 3 > &lhs, const SVector< T, 3 > &rhs)Vector Cross Product (only for 3-dim vectors) .Definition Functions.h:323; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::Plane3DImpl::Plane3D< double > Plane3DDefinition Plane3D.h:306; ROOT::Math::XYZPointPositionVector3D< Cartesian3D< double >, DefaultCoordinateSystemTag > XYZPoint3D Point based on the cartesian coordinates x,y,z in double precisionDefinition Point3Dfwd.h:38; ROOT::Math::sqrtVecExpr< UnaryOp< Sqrt< T >, VecExpr< A, T, D >, T >, T, D > sqrt(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:281; ROOT::Math::Plane3DFImpl::Plane3D< float > Plane3DFDefinition Plane3D.h:307; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; mTMarker mDefinition textangle.C:8. mathgenvectorincMathGenVectorPlane3D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2Plane3D_8h_source.html:17917,Guid,Guide,17917,doc/master/GenVector_2Plane3D_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2Plane3D_8h_source.html,1,['Guid'],['Guide']
Usability,"aningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64 x 64 channels. Light - height modes group, display mode = surface, 64 x 64 channels. The weight; between both shading algorithms is set to 0.5. One can observe the influence of; bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:18126,Simpl,Simple,18126,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['Simpl'],['Simple']
Usability,"anks to a lambda expression having as input parameters the two columns of the database: ""IPLongitude' - for the longitude, and the; ""IPLatitude"" - for the latitude.; The data related to the latitude and the longitude has been provided from the; log files storing the users IP.; This product includes GeoLite2 data created by MaxMind, available from; <a href=""http://www.maxmind.com"">http://www.maxmind.com.; ; void df028_SQliteIPLocation() {; ; auto rdf = ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT * FROM accesslog;"");; ; auto f = TFile::Open(""http://root.cern/files/WM.root"");; auto worldMap = f->Get<TH2Poly>(""WMUSA"");; ; auto fillIPLocation = [&worldMap] ( const std::string &sLongitude, const std::string &sLatitude ) {; if (!( sLongitude == """" ) && !( sLatitude == """" )) {; auto latitude = std::stof(sLatitude);; auto longitude = std::stof(sLongitude);; worldMap->Fill(longitude, latitude);; }; };; ; rdf.Foreach( fillIPLocation, { ""IPLongitude"", ""IPLatitude"" } );; ; auto worldMapCanvas = new TCanvas();; worldMapCanvas->SetLogz();; worldMap->SetTitle(""ROOT Downloads per Location (GitHub excluded);Longitude;Latitude"");; worldMap->DrawClone(""colz"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH2Poly2D Histogram with Polygonal BinsDefinition TH2Poly.h:66; ROOT::RDF::FromSqliteRDataFrame FromSqlite(std::string_view fileName, std::string_view query)Factory method to create a SQlite RDataFrame.Definition RSqliteDS.cxx:538; . DateAugust 2018 ; AuthorAlexandra-Maria Dobrescu ; Definition in file df028_SQliteIPLocation.C. tutorialsdataframedf028_SQliteIPLocation.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df028__SQliteIPLocation_8C.html:2385,Guid,Guide,2385,doc/master/df028__SQliteIPLocation_8C.html,https://root.cern,https://root.cern/doc/master/df028__SQliteIPLocation_8C.html,1,['Guid'],['Guide']
Usability,"annotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie; vector<TH1*>lowHistsx pb per jet bin for - variations over list of systematics; stringname; TH1*nominalx pb per jet bin. all histograms need index of binning to be consistent; vector<RooStats::HistFactory::EstimateSummary::NormFactor>normFactor; stringnormName; map<string,pair<double,double> >overallSyst""acceptance""->(0.8,1.2); TH1*relStatErrorAn (optional) externally provided shape for this error; stringshapeFactorName; vector<RooStats::HistFactory::EstimateSummary::ShapeSys>shapeSysts; vector<string>systSourceForHist. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; EstimateSummary(). ~EstimateSummary(); {}. void Print(const char* opt = 0) const. void AddSyst(const string& sname, TH1* low, TH1* high). bool operator==(const RooStats::HistFactory::EstimateSummary& other) const; Comparator for two Estimate summary objects. Useful to make sure two analyses are the same. bool CompareHisto(const TH1* one, const TH1* two) const. EstimateSummary(); simple structure to hold necessary information about each channel. » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2015-06-02 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__HistFactory__EstimateSummary.html:7523,simpl,simple,7523,root/html604/RooStats__HistFactory__EstimateSummary.html,https://root.cern,https://root.cern/root/html604/RooStats__HistFactory__EstimateSummary.html,1,['simpl'],['simple']
Usability,"annotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie; vector<TH1*>lowHistsx pb per jet bin for - variations over list of systematics; stringname; TH1*nominalx pb per jet bin. all histograms need index of binning to be consistent; vector<RooStats::HistFactory::EstimateSummary::NormFactor>normFactor; stringnormName; map<string,pair<double,double> >overallSyst""acceptance""->(0.8,1.2); TH1*relStatErrorAn (optional) externally provided shape for this error; stringshapeFactorName; vector<RooStats::HistFactory::EstimateSummary::ShapeSys>shapeSysts; vector<string>systSourceForHist. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; EstimateSummary(). ~EstimateSummary(); {}. void Print(const char* opt = 0) const. void AddSyst(const string& sname, TH1* low, TH1* high). bool operator==(const RooStats::HistFactory::EstimateSummary& other) const; Comparator for two Estimate summary objects. Useful to make sure two analyses are the same. bool CompareHisto(const TH1* one, const TH1* two) const. EstimateSummary(); simple structure to hold necessary information about each channel. » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__EstimateSummary.html:7523,simpl,simple,7523,root/html602/RooStats__HistFactory__EstimateSummary.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__EstimateSummary.html,1,['simpl'],['simple']
Usability,"another RooAbsArg to our cache. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Structure printing. void randomize(const char* rangeName = 0); Set a new value sampled from a uniform distribution over the fit range.; Prints a warning and does nothing if the fit range is not finite. void setBin(Int_t ibin, const char* rangeName = 0); Set value to center of bin 'ibin' of binning 'rangeName' (or of; default binning if no range is specified). void setBin(Int_t ibin, const RooAbsBinning& binning); Set value to center of bin 'ibin' of binning 'binning'. void randomize(const RooAbsBinning& binning); Set a new value sampled from a uniform distribution over the fit range.; Prints a warning and does nothing if the fit range is not finite. void setBinFast(Int_t ibin, const RooAbsBinning& binning); Set value to center of bin 'ibin' of binning 'rangeName' (or of; default binning if no range is specified). Bool_t fitRangeOKForPlotting() const; Check if fit range is usable as plot range, i.e. it is neither; open ended, nor empty. Bool_t inRange(const char* name) const; Check if current value is inside range with given name. TH1* createHistogram(const char* name, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Create an empty ROOT histogram TH1,TH2 or TH3 suitabe to store information represent by the RooAbsRealLValue. This function accepts the following arguments. name -- Name of the ROOT histogram. Binning(const char* name) -- Apply binning with given name to x axis of histogram; Binning(RooAbsBinning& binning) -- Apply specified binning to x axis of histogram; Binning(int_t nbins) -- Apply specified binning to x axis of histogram; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsRealLValue.html:40987,usab,usable,40987,root/html528/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html528/RooAbsRealLValue.html,6,['usab'],['usable']
Usability,"ans: double sized border, white background and a bit wider to allow for text to be printed in the bar. ; Definition at line 343 of file TGProgressBar.cxx. ◆ ~TGVProgressBar(). TGVProgressBar::~TGVProgressBar ; (; ). inlineoverride . Definition at line 136 of file TGProgressBar.h. Member Function Documentation. ◆ Class(). static TClass * TGVProgressBar::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGVProgressBar::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGVProgressBar::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 144 of file TGProgressBar.h. ◆ DeclFileName(). static const char * TGVProgressBar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 144 of file TGProgressBar.h. ◆ DoRedraw(). void TGVProgressBar::DoRedraw ; (; ). overrideprotectedvirtual . Draw vertical progress bar. ; Implements TGProgressBar.; Definition at line 359 of file TGProgressBar.cxx. ◆ GetDefaultSize(). TGDimension TGVProgressBar::GetDefaultSize ; (; ); const. inlineoverridevirtual . std::cout << fWidth << ""x"" << fHeight << std::endl; ; Reimplemented from TGFrame.; Definition at line 138 of file TGProgressBar.h. ◆ IsA(). TClass * TGVProgressBar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGProgressBar.; Definition at line 144 of file TGProgressBar.h. ◆ Percent(). void TGVProgressBar::Percent ; (; Bool_t ; ). inlineoverridevirtual . Reimplemented from TGProgressBar.; Definition at line 142 of file TGProgressBar.h. ◆ SavePrimitive(). void TGVProgressBar::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a vertical progress bar as a C++ statement(s) on output stream out. ; Reimplemented from TGProgressBar.; Definition at line 438 of file TGProgressBar.cxx. ◆ ShowPos(). v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVProgressBar.html:32625,progress bar,progress bar,32625,doc/master/classTGVProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGVProgressBar.html,1,['progress bar'],['progress bar']
Usability,"ansfer one single large buffer of 10 Mbytes in one single transaction.; Not only the TreeCache minimizes the number of transfers, but in addition; it can sort the blocks to be read in increasing order such that the file; is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TreeCache in; reading ahead as much data as they can and return to the application; the maximum data specified in the cache and have the next chunk of data ready; when the next request comes. HOW TO USE the TreeCache. A few use cases are discussed below. It is not simple to activate the cache; by default (except case1 below) because there are many possible configurations.; In some applications you know a priori the list of branches to read.; In other applications the analysis loop calls several layers of user functions; where it is impossible to predict a priori which branches will be used. This; is probably the most frequent case. In this case ROOT I/O will flag used; branches automatically when a branch buffer is read during the learning phase.; The TreeCache interface provides functions to instruct the cache about the used; branches if they are known a priori. In the examples below, portions of analysis; code are shown. The few statements involving the TreeCache are marked with //<<<. 1- with TTree::Draw. the TreeCache is automatically used by TTree::Draw. The function knows; which branches are used in the query and it puts automatically these branches; in the cache. The entry range is also known automatically. 2- with TTree::Process and TSelectors. You must enable the cache and tell the system which branches to cache; and also specify the entry range. It is important to specify the entry range; in case you process only a subset of the events, otherwise you run the risk; to store in the cache entries that you do not need. --example 2a; --; TTree *T = (TTree*)f->Get(""mytree"");; Long64_t nentries = T->GetEntries();; Int_t cachesize = 10000000; //10 MBytes; T->SetCacheS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:4191,learn,learning,4191,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,3,['learn'],['learning']
Usability,anual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_tfLastReadPos; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; TMutex*fMutexListMutex to protect the various lists. Used by the condvars.; Int_tfNFound! number of blocks that were found in the cache; Int_tfNMissed! number of blocks that were not found in the cache and were unzipped; Int_tTTreeCache::fNReadMissNumber of blocks read and not found in the chache; Int_tTTreeCache::fNReadOkNumber of blocks read and found in the cache; Int_tTTreeCache::fNReadPrefNumber of blocks that were prefetched; Int_tfNStalls! number of hits which caused a stall; Int_tfNUnzip! number of blocks that were unzipped; Int_tTFileCacheRead::fNbNumber of long buffers; Int_tTTreeCache::fNbranches! Number of branches in the cache; Long64_tTFileCacheRead::fNoCacheBytesReadNumber of bytes read by basket to fill cached tree; Int_tTFileCacheRead::fNoCacheReadCallsNumber of read calls by basket to fill cached tree; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tfNseekMax! fNseek can change so we need to know its max size; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tTTreeCache::fOneTime! used in the learning phase ; Bool_tfParallelIndicate if we want to activate the parallelism (for this instance); Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch!Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.; TTreeCache::EPrefillTypeTTreeCache::fPrefillTypeWhether a prefilling is enabled (and if applicable which type); Int_tTFileCacheRead::fReadCallsNumber of read calls for this cache; Bool_tTTreeCache::fReadDirectionSet! read direction established; Bool_tTTreeCache::fReverseRead! reading in reverse mode ; Long64_t*TFileCacheRead::fSeek[fNseek],MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCacheUnzip.html:13846,learn,learning,13846,root/html534/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html534/TTreeCacheUnzip.html,1,['learn'],['learning']
Usability,anual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_tfLastReadPos; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; TMutex*fMutexListMutex to protect the various lists. Used by the condvars.; Int_tfNFound! number of blocks that were found in the cache; Int_tfNMissed! number of blocks that were not found in the cache and were unzipped; Int_tTTreeCache::fNReadMissNumber of blocks read and not found in the chache; Int_tTTreeCache::fNReadOkNumber of blocks read and found in the cache; Int_tTTreeCache::fNReadPrefNumber of blocks that were prefetched; Int_tfNStalls! number of hits which caused a stall; Int_tfNUnzip! number of blocks that were unzipped; Int_tTFileCacheRead::fNbNumber of long buffers; Int_tTTreeCache::fNbranches! Number of branches in the cache; Long64_tTFileCacheRead::fNoCacheBytesReadNumber of bytes read by basket to fill cached tree; Int_tTFileCacheRead::fNoCacheReadCallsNumber of read calls by basket to fill cached tree; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tfNseekMax! fNseek can change so we need to know its max size; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tTTreeCache::fOneTime! used in the learning phase; Bool_tfParallelIndicate if we want to activate the parallelism (for this instance); Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch! Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.; TTreeCache::EPrefillTypeTTreeCache::fPrefillTypeWhether a prefilling is enabled (and if applicable which type); Int_tTFileCacheRead::fReadCallsNumber of read calls for this cache; Bool_tTTreeCache::fReadDirectionSet! read direction established; Bool_tTTreeCache::fReverseRead! reading in reverse mode; Long64_t*TFileCacheRead::fSeek[fNseek] ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCacheUnzip.html:14532,learn,learning,14532,root/html602/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html602/TTreeCacheUnzip.html,2,['learn'],['learning']
Usability,"anumeric labels. ;  ;  motorcycle.C;   Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  ;  multigraph.C;   Create and Draw a TMultiGraph. ;  ;  multigraphpalettecolor.C;   Palette coloring for multi-graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  multipalette.C;   Draw color plots using different color palettes. ;  ;  scatter.C;   Draw a scatter plot. ;  ;  seism.C;   Strip chart example. ;  ;  splines_test.C;   Examples of use of the spline classes. ;  ;  surfaces.C;   Draw 2-Dim functions. ;  ;  timeonaxis.C;   This macro illustrates the use of the time mode on the axis with different time intervals and time formats. ;  ;  timeonaxis2.C;   Define the time offset as 2003, January 1st. ;  ;  timeonaxis3.C;   This example compares what the system time function gmtime and localtime give with what gives TGaxis. ;  ;  timeSeriesFromCSV.C;   This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017. ;  ;  timeSeriesFromCSV.py;   This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017. ;  ;  timeSeriesFromCSV_TDF.C;   This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017. ;  ;  waves.C;   Hint: Spherical waves ;  ;  zdemo.C;   This macro is an example of graphs in log scales with annotations. ;  ;  zones.C;   Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads. ;  ;  zones.py;   Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads. ;  . tutorialsgraphs. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html:4059,Guid,Guide,4059,doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html,https://root.cern,https://root.cern/doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html,1,['Guid'],['Guide']
Usability,"anvas ;  . Friends; class RAttrBase;  ; class RCanvas;  ; class RChangeAttrRequest;  ; class RDrawableDisplayItem;  ; class RDrawableExecRequest;  ; class RDrawableMenuRequest;  ; class RIndirectDisplayItem;  ; class RLegend;  ; class RPadBase;  ; class RStyle;  . #include <ROOT/RDrawable.hxx>. Inheritance diagram for ROOT::Experimental::RDrawable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Version_t. using ROOT::Experimental::RDrawable::Version_t = uint64_t. Definition at line 123 of file RDrawable.hxx. Constructor & Destructor Documentation. ◆ RDrawable() [1/2]. ROOT::Experimental::RDrawable::RDrawable ; (; const RDrawable & ; ). protecteddelete . ◆ RDrawable() [2/2]. ROOT::Experimental::RDrawable::RDrawable ; (; const char * ; csstype). inlineexplicit . Definition at line 208 of file RDrawable.hxx. ◆ ~RDrawable(). RDrawable::~RDrawable ; (; ). virtualdefault . Member Function Documentation. ◆ ClearStyle(). void ROOT::Experimental::RDrawable::ClearStyle ; (; ). inline . Definition at line 213 of file RDrawable.hxx. ◆ CollectShared(). virtual void ROOT::Experimental::RDrawable::CollectShared ; (; Internal::RIOSharedVector_t & ; ). inlineprotectedvirtual . Reimplemented in ROOT::Experimental::RPadBase, ROOT::Experimental::TObjectDrawable, ROOT::Experimental::RHistDrawable< DIMENSIONS >, ROOT::Experimental::RHistDrawable< 1 >, ROOT::Experimental::RHistDrawable< 2 >, ROOT::Experimental::RHistDrawable< 3 >, ROOT::Experimental::RHistStatBox< DIMENSIONS >, ROOT::Experimental::RHistStatBox< 1 >, ROOT::Experimental::RHistStatBox< 2 >, and ROOT::Experimental::RHistStatBox< 3 >.; Definition at line 181 of file RDrawable.hxx. ◆ Display(). std::unique_ptr< RDisplayItem > RDrawable::Display ; (; const RDisplayContext & ; ctxt). protectedvirtual . Creates display item for drawable By default item contains drawable data itself. ; Reimplemented in ROOT::Experimental::RPad, ROOT::Experimental::TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RDrawable.html:3837,Clear,ClearStyle,3837,doc/master/classROOT_1_1Experimental_1_1RDrawable.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RDrawable.html,1,['Clear'],['ClearStyle']
Usability,"anvas with histogram"");; ; auto h1 = new TH1I(TString::Format(""hist%d"", n), ""Histogram with random data"", 100, -5., 5);; h1->SetDirectory(nullptr);; h1->FillRandom(""gaus"", 10000);; ; h1->Draw();; ; pads.push_back(c);; }; ; TCanvas::SaveAll(pads, ""image%03d.png""); // create 100 PNG images; ; TCanvas::SaveAll(pads, ""image.svg""); // create 100 SVG images, %d pattern will be automatically append; ; TCanvas::SaveAll(pads, ""images.root""); // create single ROOT file with all canvases; ; TCanvas::SaveAll(); // save all existing canvases in allcanvases.pdf file; }; c#define c(i)Definition RSha256.hxx:101; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; gROOT#define gROOTDefinition TROOT.h:406; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::SaveAllstatic Bool_t SaveAll(const std::vector< TPad * > &={}, const char *filename="""", Option_t *option="""")Save provided pads/canvases into the image file(s) Filename can include printf argument for image num...Definition TCanvas.cxx:2654; TH1I1-D histogram with an int per channel (see TH1 documentation)Definition TH1.h:540; TH1::SetDirectoryvirtual void SetDirectory(TDirectory *dir)By default, when a histogram is created, it is added to the list of histogram objects in the current ...Definition TH1.cxx:8937; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; AuthorSergey Linev ; Definition in file saveall.C. tutorialsgraphicssaveall.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/saveall_8C.html:2591,Guid,Guide,2591,doc/master/saveall_8C.html,https://root.cern,https://root.cern/doc/master/saveall_8C.html,1,['Guid'],['Guide']
Usability,"anvas() [2/3]. TRootCanvas::TRootCanvas ; (; TCanvas * ; c = nullptr, . const char * ; name = ""ROOT Canvas"", . UInt_t ; width = 500, . UInt_t ; height = 300 . ). Create a basic ROOT canvas. ; Definition at line 303 of file TRootCanvas.cxx. ◆ TRootCanvas() [3/3]. TRootCanvas::TRootCanvas ; (; TCanvas * ; c, . const char * ; name, . Int_t ; x, . Int_t ; y, . UInt_t ; width, . UInt_t ; height . ). Create a basic ROOT canvas. ; Definition at line 317 of file TRootCanvas.cxx. ◆ ~TRootCanvas(). TRootCanvas::~TRootCanvas ; (; ). override . Delete ROOT basic canvas. ; Order is significant. Delete in reverse order of creation. ; Definition at line 621 of file TRootCanvas.cxx. Member Function Documentation. ◆ Activated(). void TRootCanvas::Activated ; (; Int_t ; id). Slot handling tab switching in the browser, to properly set the canvas and the model to the editor. ; Definition at line 2072 of file TRootCanvas.cxx. ◆ AdjustSize(). void TRootCanvas::AdjustSize ; (; ). Keep the same canvas size while docking/undocking toolbar. ; Definition at line 1706 of file TRootCanvas.cxx. ◆ Class(). static TClass * TRootCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRootCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRootCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 150 of file TRootCanvas.h. ◆ Close(). void TRootCanvas::Close ; (; ). overridevirtual . Called via TCanvasImp interface by TCanvas. ; Reimplemented from TCanvasImp.; Definition at line 671 of file TRootCanvas.cxx. ◆ CloseWindow(). void TRootCanvas::CloseWindow ; (; ). overridevirtual . In case window is closed via WM we get here. ; Reimplemented from TGMainFrame.; Definition at line 714 of file TRootCanvas.cxx. ◆ CreateCanvas(). void TRootCanvas::CreateCanvas ; (; const char * ; name). private . Create the actual canvas. ; Definition at line 332 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootCanvas.html:43543,undo,undocking,43543,doc/master/classTRootCanvas.html,https://root.cern,https://root.cern/doc/master/classTRootCanvas.html,1,['undo'],['undocking']
Usability,"anvas.; To automate files loading and objects drawing, one can provide number of URL parameters in address string like:. file - name of the file, which will be automatically open with page loading; files - array of file names for loading; json - name of JSON file with stored ROOT object like histogram or canvas; item - item name to be displayed; opt - drawing option for the item; items - array of items name to be displayed; opts - array of drawing options for the items; expand - item name(s) to be expanded in the hierarchy browser; focus - item name to be focused on in the hierarchy browser; title - set browser title; dir - list files in directory on http server, see https://github.com/root-project/jsroot/issues/283; layout - can be ‘simple’, ‘flex’, ‘tabs’, ‘gridNxM’, ‘horizNMK’, ‘vertNMK’; browser - layout of the browser ‘fix’ (default), ‘float’, ‘no’ (hidden), ‘off’ (fully disabled); nobrowser - do not display file browser (same as browser=no); float - display floating browser (same as browser=float); status - configure status line ‘no’ (default), ‘off’ (completely disable), ‘size’; inject - name of extra JavaScript to load, see several examples in demo/ subdir; optimize - drawing optimization 0:off, 1:only large histograms (default), 2:always; palette - id of default color palette, 51..121 - new ROOT6 palette (default 57); interactive - enable/disable interactive functions 0 - disable all, 1 - enable all; noselect - hide file-selection part in the browser (only when file name is specified); mathjax - use MathJax for latex output; latex - ‘off’, ‘symbols’, ‘normal’, ‘mathjax’, ‘alwaysmath’ control of TLatex processor; style - name of TStyle object to define global JSROOT style; toolbar - show canvas tool buttons ‘off’, ‘on’ and ‘popup’, ‘left’ or ‘right’ for position, ‘vert’ for vertical; divsize - fixed size in pixels for main div element like &dvisize=1500x800; canvsize - default canvas size in pixels like &canvsize=1200x800; optstat - settings for stat box, def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:1987,simpl,simple,1987,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['simpl'],['simple']
Usability,"anvas::GetUIDstd::string GetUID() constReturn unique identifier for the canvas Used in iPython display.Definition RCanvas.cxx:199; ROOT::Experimental::RCanvas::CreateJSONstd::string CreateJSON()Provide JSON which can be used for offline display.Definition RCanvas.cxx:211; ROOT::Experimental::RCanvas::Createstatic std::shared_ptr< RCanvas > Create(const std::string &title)Create new canvas instance.Definition RCanvas.cxx:89; ROOT::Experimental::RCanvas::ClearOnClosevoid ClearOnClose(const std::shared_ptr< void > &handle)Set handle which will be cleared when connection is closed.Definition RCanvas.cxx:239; ROOT::Experimental::RCanvas::Updatevoid Update(bool async=false, CanvasCallback_t callback=nullptr)update drawingDefinition RCanvas.cxx:78; ROOT::Experimental::RCanvas::Hidevoid Hide()Hide all canvas displays.Definition RCanvas.cxx:171; ROOT::Experimental::RChangeAttrRequest::Processstd::unique_ptr< RDrawableReply > Process() overrideApply attributes changes to the drawable Return mask with actions which were really applied.Definition RCanvas.cxx:327; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::HashUInt_t Hash(ECaseCompare cmp=kExact) constReturn hash value.Definition TString.cxx:677; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; int; nconst Int_t nDefinition legend1.C:16; ROOT::Experimental::Internal::RIOSharedVector_tstd::vector< RIOSharedBase * > RIOSharedVector_tDefinition RDrawable.hxx:52; ROOT::Experimental::CanvasCallback_tstd::function< void(bool)> CanvasCallback_tDefinition RVirtualCanvasPainter.hxx:22; ROOT::Experimental::GPadLogRLogChannel & GPadLog()Log channel for GPad diagnostics.Definition RAttrBase.cxx:17. graf2dgpadv7srcRCanvas.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCanvas_8cxx_source.html:17231,Guid,Guide,17231,doc/master/RCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RCanvas_8cxx_source.html,1,['Guid'],['Guide']
Usability,"anvas::fSelectedX. protected . ! X of selected object ; Definition at line 51 of file TCanvas.h. ◆ fSelectedY. Int_t TCanvas::fSelectedY. protected . ! Y of selected object ; Definition at line 52 of file TCanvas.h. ◆ fUpdated. Bool_t TCanvas::fUpdated. protected . ! Set to True when Update method was called ; Definition at line 64 of file TCanvas.h. ◆ fUpdating. Bool_t TCanvas::fUpdating. protected . ! True when Updating the canvas ; Definition at line 60 of file TCanvas.h. ◆ fUseGL. Bool_t TCanvas::fUseGL. protected . ! True when rendering is with GL ; Definition at line 62 of file TCanvas.h. ◆ fWindowHeight. UInt_t TCanvas::fWindowHeight. protected . Height of window (including menubar, borders, etc.) ; Definition at line 42 of file TCanvas.h. ◆ fWindowTopX. Int_t TCanvas::fWindowTopX. protected . Top X position of window (in pixels) ; Definition at line 39 of file TCanvas.h. ◆ fWindowTopY. Int_t TCanvas::fWindowTopY. protected . Top Y position of window (in pixels) ; Definition at line 40 of file TCanvas.h. ◆ fWindowWidth. UInt_t TCanvas::fWindowWidth. protected . Width of window (including borders, etc.) ; Definition at line 41 of file TCanvas.h. ◆ fXsizeReal. Size_t TCanvas::fXsizeReal. protected . Current size of canvas along X in CM. ; Definition at line 35 of file TCanvas.h. ◆ fXsizeUser. Size_t TCanvas::fXsizeUser. protected . User specified size of canvas along X in CM. ; Definition at line 33 of file TCanvas.h. ◆ fYsizeReal. Size_t TCanvas::fYsizeReal. protected . Current size of canvas along Y in CM. ; Definition at line 36 of file TCanvas.h. ◆ fYsizeUser. Size_t TCanvas::fYsizeUser. protected . User specified size of canvas along Y in CM. ; Definition at line 34 of file TCanvas.h. Libraries for TCanvas:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpad/inc/TCanvas.h; graf2d/gpad/src/TCanvas.cxx. TCanvas. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:99283,Guid,Guide,99283,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['Guid'],['Guide']
Usability,"anvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::SetNpxvirtual void SetNpx(Int_t npx=100)Set the number of points used to draw the function.Definition TF1.cxx:3433; TF1::GetParametersvirtual Double_t * GetParameters() constDefinition TF1.h:548; TF1::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF1.cxx:1333; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetParametervirtual void SetParameter(Int_t param, Double_t value)Definition TF1.h:667; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::SetBinContentvirtual void SetBinContent(Int_t bin, Double_t content)Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater th...Definition TH1.cxx:9222; TH1::SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TLegend::AddEntryTLegendEntry * AddEntry(const TObject *obj, const char *label="""", Option_t *option=""lpf"")Add a new entry to this legend.Definition TLegend.cxx:320; TLegend::Drawvoid Draw(Option_t *option="""") overrideDraw this legend with its current attributes.Definition TLegend.cxx:425; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; AuthorRene Brun ; Definition in file FittingDemo.C. tutorialsfitFittingDemo.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FittingDemo_8C.html:9854,Guid,Guide,9854,doc/master/FittingDemo_8C.html,https://root.cern,https://root.cern/doc/master/FittingDemo_8C.html,1,['Guid'],['Guide']
Usability,"any Branch of this; Tree or any branch in the list of friend trees. aname may be of the form branchname/leafname. Double_t GetMaximum(const char* columname); Return maximum of column with name columname.; if the Tree has an associated TEventList or TEntryList, the maximum; is computed for the entries in this list. Long64_t GetMaxTreeSize(); Static function which returns the tree file size limit in bytes. Double_t GetMinimum(const char* columname); Return minimum of column with name columname.; if the Tree has an associated TEventList or TEntryList, the minimum; is computed for the entries in this list. TVirtualTreePlayer* GetPlayer(); Load the TTreePlayer (if not already done). TList* GetUserInfo(); Return a pointer to the list containing user objects associated to this tree. The list is automatically created if it does not exist. WARNING: By default the TTree destructor will delete all objects added; to this list. If you do not want these objects to be deleted,; call:. mytree->GetUserInfo()->Clear();. before deleting the tree. void ImportClusterRanges(TTree* fromtree); Appends the cluster range information stored in 'fromtree' to this tree,; including the value of fAutoFlush. This is used when doing a fast cloning (by TTreeCloner).; See also fAutoFlush and fAutoSave if needed. void KeepCircular(); Keep a maximum of fMaxEntries in memory. Int_t LoadBaskets(Long64_t maxmemory = 2000000000); Read in memory all baskets from all branches up to the limit of maxmemory bytes. If maxmemory is non null and positive SetMaxVirtualSize is called; with this value. Default for maxmemory is 2000000000 (2 Gigabytes).; The function returns the total number of baskets read into memory; if negative an error occurred while loading the branches.; This method may be called to force branch baskets in memory; when random access to branch entries is required.; If random access to only a few branches is required, you should; call directly TBranch::LoadBaskets. Long64_t LoadTree(Long64_t entry",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:99717,Clear,Clear,99717,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,1,['Clear'],['Clear']
Usability,"ap, TGCocoa, TGQuartz, TButton, TCanvas, TDialogCanvas, TGroupButton, TInspectCanvas, TPad, TPaveClass, TSlider, TSliderBox, TArc, TArrow, TBox, TCandle, TCrown, TCurlyArc, TCurlyLine, TCutG, TDiamond, TEllipse, TFrame, TGraphPolar, TGraphQQ, TLegend, TLegendEntry, TMathText, TPave, TPaveLabel, TPaveStats, TPavesText, TPaveText, TPieSlice, TPolyLine, TWbox, TGraphNode, TImageDump, TPDF, TPostScript, TSVG, TTeXDump, TGWin32, TGX11, TGX11TTF, TBRIK, TCONE, TCONS, TCTUB, TELTU, TGTRA, THYPE, TMarker3DBox, TMaterial, TMixture, TNode, TNodeDiv, TPARA, TPCON, TPGON, TShape, TSPHE, TTRAP, TTRD1, TTRD2, TTUBE, TTUBS, TXTRU, TGLTH3Composition, TWebPadPainter, TWebPS, THbookBranch, THbookTree, TEfficiency, TF1, TF12, TF2, TF3, TGraph, TGraph2D, TGraph2DAsymmErrors, TGraph2DErrors, TGraphAsymmErrors, TGraphBentErrors, TGraphErrors, TGraphMultiErrors, TH1, TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, TProfile2Poly, TProfile3D, TScatter, TSpline, TSpline3, TSpline5, ROOT::v5::TF1Data, TPaletteAxis, TProofChain, RooCurve, RooEllipse, RooHist, TBranch, TBranchClones, TBranchElement, TBranchObject, TBranchRef, TBranchSTL, TChain, TNtuple, TNtupleD, TTree, TTreeSQL, TParallelCoordVar, and TSpider. ◆ StreamerNVirtual(). void TAttFill::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 41 of file TAttFill.h. Member Data Documentation. ◆ fFillColor. Color_t TAttFill::fFillColor. protected . Fill area color. ; Definition at line 22 of file TAttFill.h. ◆ fFillStyle. Style_t TAttFill::fFillStyle. protected . Fill area style. ; Definition at line 23 of file TAttFill.h. Libraries for TAttFill:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TAttFill.h; core/base/src/TAttFill.cxx. TAttFill. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttFill.html:14290,Guid,Guide,14290,doc/master/classTAttFill.html,https://root.cern,https://root.cern/doc/master/classTAttFill.html,1,['Guid'],['Guide']
Usability,"ap<std::string,RooDataSet*>& ); 2005\brief \parblock \endparblock; 2006\htmlonly; 2007<div class=""pyrootbox"">; 2008\endhtmlonly; 2009## PyROOT; 2010The Import function is pythonized for converting python dict to std::map.; 2011The keywords must correspond to the CmdArg of the function.; 2012The instances in the dict must correspond to the template argument in std::map of the function.; 2013\htmlonly; 2014</div>; 2015\endhtmlonly; 2016 ; 2017\fn RooFit::Import(const std::map<std::string,TH1*>&); 2018\brief \parblock \endparblock; 2019\htmlonly; 2020<div class=""pyrootbox"">; 2021\endhtmlonly; 2022## PyROOT; 2023The Import function is pythonized for converting python dict to std::map.; 2024The keywords must correspond to the CmdArg of the function.; 2025The instances in the dict must correspond to the template argument in std::map of the function.; 2026\htmlonly; 2027</div>; 2028\endhtmlonly; 2029 ; 2030\fn RooFit::Import(const std::map<std::string,RooDataHist*>&); 2031\brief \parblock \endparblock; 2032\htmlonly; 2033<div class=""pyrootbox"">; 2034\endhtmlonly; 2035## PyROOT; 2036The Import function is pythonized for converting python dict to std::map.; 2037The keywords must correspond to the CmdArg of the function.; 2038The instances in the dict must correspond to the template argument in std::map of the function.; 2039\htmlonly; 2040</div>; 2041\endhtmlonly; 2042 ; 2043\fn RooFit::Link(const std::map<std::string,RooAbsData*>&); 2044\brief \parblock \endparblock; 2045\htmlonly; 2046<div class=""pyrootbox"">; 2047\endhtmlonly; 2048## PyROOT; 2049The Link function is pythonized for converting python dict to std::map.; 2050The keywords must correspond to the CmdArg of the function.; 2051The instances in the dict must correspond to the template argument in std::map of the function.; 2052\htmlonly; 2053</div>; 2054\endhtmlonly; 2055 ; 2056*/. master_TMPpyzdoc_roofit.pyzdoc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/__roofit_8pyzdoc_source.html:92136,Guid,Guide,92136,doc/master/__roofit_8pyzdoc_source.html,https://root.cern,https://root.cern/doc/master/__roofit_8pyzdoc_source.html,1,['Guid'],['Guide']
Usability,"apacity greater than or equal to newCap. void Clear(); Clear string without changing its capacity. void Clobber(Ssiz_t nc); Clear string and make sure it has a capacity of nc. void Clone(Ssiz_t nc); Make self a distinct copy with capacity of at least tot, where tot cannot; be smaller than the current length. Preserve previous contents. void FillBuffer(char*& buffer); Copy string into I/O buffer. void ReadBuffer(char*& buffer); Read string from I/O buffer. TString * ReadString(TBuffer& b, const TClass* clReq); Read TString object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Int_t Sizeof() const; Returns size string will occupy on I/O buffer. void Streamer(TBuffer& b); Stream a string object. void WriteString(TBuffer& b, const TString* a); Write TString object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Ssiz_t GetInitialCapacity(). Ssiz_t GetResizeIncrement(). Ssiz_t GetMaxWaste(). Ssiz_t InitialCapacity(Ssiz_t ic = 15); Set default initial capacity for all TStrings. Default is 15. Ssiz_t ResizeIncrement(Ssiz_t ri = 16); Set default resize increment for all TStrings. Default is 16. Ssiz_t MaxWaste(Ssiz_t mw = 15); Set maximum space that may be wasted in a string before doing a resize.; Default is 15. TSubString operator()(Ssiz_t start, Ssiz_t len) const; Return sub-string of string starting at start with length len. TSubString SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; Returns a substring matching ""pattern"", or the null substring; if there is no such match. It would be nice if this could be yet another; overloaded version of operator(), but this would result in a type; conversion ambiguity with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TString.html:13829,Simpl,Simplified,13829,root/html530/TString.html,https://root.cern,https://root.cern/root/html530/TString.html,2,['Simpl'],['Simplified']
Usability,"ape* shape, Option_t* option = """"); virtual~TVolume(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TShape* shape, Bool_t IsMaster = kFALSE); virtual TVolumePosition*Add(TVolume* node, Double_t x = 0, Double_t y = 0, Double_t z = 0, TRotMatrix* matrix = 0, UInt_t id = 0, Option_t* option = """"); virtual TVolumePosition*Add(TVolume* node, Double_t x, Double_t y, Double_t z, const char* matrixname, UInt_t id = 0, Option_t* option = """"); virtual voidTDataSet::AddAt(TDataSet* dataset, Int_t idx = 0); virtual voidTDataSet::AddAtAndExpand(TDataSet* dataset, Int_t idx = 0); virtual voidTDataSet::AddFirst(TDataSet* dataset); virtual voidTDataSet::AddLast(TDataSet* dataset); virtual TObject*TObjectSet::AddObject(TObject* obj, Bool_t makeOwner = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); TDataSet*TDataSet::At(Int_t idx) const; virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TDataSet::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual TNode*CreateTNode(const TVolumePosition* position = 0); virtual voidTObjectSet::Delete(Option_t* opt = """"); virtual voidDeletePosition(TVolumePosition* position); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTObjectSet::DoOwner(Bool_t done = kTRUE); virtual voidDraw(Option_t* depth = ""3"")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawOnly(Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVolume.html:2052,Clear,Clear,2052,root/html528/TVolume.html,https://root.cern,https://root.cern/root/html528/TVolume.html,4,['Clear'],['Clear']
Usability,"ape.h. ◆ SetMainColor(). void TEveShape::SetMainColor ; (; Color_t ; color). overridevirtual . Set main color. ; Override so that line-color can also be changed if it is equal to fill color (which is treated as main color). ; Reimplemented from TEveElement.; Definition at line 58 of file TEveShape.cxx. ◆ SetMiniFrame(). virtual void TEveShape::SetMiniFrame ; (; Bool_t ; r). inlinevirtual . Definition at line 65 of file TEveShape.h. ◆ Streamer(). void TEveShape::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEveShape::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file TEveShape.h. ◆ WriteVizParams(). void TEveShape::WriteVizParams ; (; std::ostream & ; out, . const TString & ; var . ). overridevirtual . Write visualization parameters. ; Reimplemented from TEveElement.; Definition at line 89 of file TEveShape.cxx. Friends And Related Symbol Documentation. ◆ TEveShapeEditor. friend class TEveShapeEditor. friend . Definition at line 27 of file TEveShape.h. Member Data Documentation. ◆ fDrawFrame. Bool_t TEveShape::fDrawFrame. protected . Definition at line 42 of file TEveShape.h. ◆ fFillColor. Color_t TEveShape::fFillColor. protected . Definition at line 38 of file TEveShape.h. ◆ fHighlightFrame. Bool_t TEveShape::fHighlightFrame. protected . Definition at line 43 of file TEveShape.h. ◆ fLineColor. Color_t TEveShape::fLineColor. protected . Definition at line 39 of file TEveShape.h. ◆ fLineWidth. Float_t TEveShape::fLineWidth. protected . Definition at line 40 of file TEveShape.h. ◆ fMiniFrame. Bool_t TEveShape::fMiniFrame. protected . Definition at line 44 of file TEveShape.h. Libraries for TEveShape:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveShape.h; graf3d/eve/src/TEveShape.cxx. TEveShape. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveShape.html:43736,Guid,Guide,43736,doc/master/classTEveShape.html,https://root.cern,https://root.cern/doc/master/classTEveShape.html,1,['Guid'],['Guide']
Usability,"ape; kGeoInvalidShape; kGeoTorus; kGeoBox; kGeoPara; kGeoSph; kGeoTube; kGeoTubeSeg; kGeoCone; kGeoConeSeg; kGeoPcon; kGeoPgon; kGeoArb8; kGeoEltu; kGeoTrap; kGeoCtub; kGeoTrd1; kGeoTrd2; kGeoComb; kGeoClosedShape; kGeoXtru; kGeoParaboloid; kGeoHalfSpace; kGeoHype; kGeoSavePrimitive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_tTGeoBBox::fDXX half-length; Double_tTGeoBBox::fDYY half-length; Double_tTGeoBBox::fDZZ half-length; TStringTNamed::fNameobject identifier; Double_tTGeoBBox::fOrigin[3]box origin; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; TStringTNamed::fTitleobject title. private:. TGeoBoolNode*fNodetop boolean node. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const; Needed just for cleanup. TGeoCompositeShape(); Default constructor. TGeoCompositeShape(const char* name, const char* expression); Default constructor. TGeoCompositeShape(const char* expression); Default constructor. TGeoCompositeShape(const char* name, TGeoBoolNode* node); Constructor with a Boolean node. ~TGeoCompositeShape(); destructor. Double_t Capacity() const; Computes capacity of this shape [length^3] by sampling with 1% error. void ComputeBBox(); compute bounding box of the sphere. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Computes normal vector in POINT to the composite shape. Bool_t Contains(Double_t* point) const; Tests if point is inside the shape. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute closest distance from point px,py to each corner. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to this composi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoCompositeShape.html:17438,Clear,ClearThreadData,17438,root/html532/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html532/TGeoCompositeShape.html,1,['Clear'],['ClearThreadData']
Usability,"ape; kGeoInvalidShape; kGeoTorus; kGeoBox; kGeoPara; kGeoSph; kGeoTube; kGeoTubeSeg; kGeoCone; kGeoConeSeg; kGeoPcon; kGeoPgon; kGeoArb8; kGeoEltu; kGeoTrap; kGeoCtub; kGeoTrd1; kGeoTrd2; kGeoComb; kGeoClosedShape; kGeoXtru; kGeoParaboloid; kGeoHalfSpace; kGeoHype; kGeoSavePrimitive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_tTGeoBBox::fDXX half-length; Double_tTGeoBBox::fDYY half-length; Double_tTGeoBBox::fDZZ half-length; TStringTNamed::fNameobject identifier; Double_tTGeoBBox::fOrigin[3]box origin; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; TStringTNamed::fTitleobject title. private:. TGeoBoolNode*fNodetop boolean node. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const; Needed just for cleanup. void CreateThreadData(Int_t nthreads); Needed just for cleanup. TGeoCompositeShape(); Default constructor. TGeoCompositeShape(const char* name, const char* expression); Default constructor. TGeoCompositeShape(const char* expression); Default constructor. TGeoCompositeShape(const char* name, TGeoBoolNode* node); Constructor with a Boolean node. ~TGeoCompositeShape(); destructor. Double_t Capacity() const; Computes capacity of this shape [length^3] by sampling with 1% error. void ComputeBBox(); compute bounding box of the sphere. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Computes normal vector in POINT to the composite shape. Bool_t Contains(const Double_t* point) const; Tests if point is inside the shape. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute closest distance from point px,py to each corner. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCompositeShape.html:18339,Clear,ClearThreadData,18339,root/html534/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html534/TGeoCompositeShape.html,1,['Clear'],['ClearThreadData']
Usability,"apeInt_t AddShape(const TGeoShape *shape)Add a shape to the list. Returns index of the shape in list.Definition TGeoManager.cxx:703; TGeoManager::SetMaxVisNodesvoid SetMaxVisNodes(Int_t maxnodes=10000)set the maximum number of visible nodes.Definition TGeoManager.cxx:2380; TGeoManager::CleanGarbagevoid CleanGarbage()Clean temporary volumes and shapes from garbage collection.Definition TGeoManager.cxx:1627; TGeoManager::Voxelizevoid Voxelize(Option_t *option=nullptr)Voxelize all non-divided volumes.Definition TGeoManager.cxx:3129; TGeoManager::GetVirtualLevelInt_t GetVirtualLevel()Find level of virtuality of current overlapping node (number of levels up having the same tracking me...Definition TGeoManager.cxx:2166; TGeoManager::GetBorderSurfaceTGeoBorderSurface * GetBorderSurface(const char *name) constGet border surface with a given name;.Definition TGeoManager.cxx:2060; TGeoManager::ClearThreadDatavoid ClearThreadData() constDefinition TGeoManager.cxx:953; TGeoManager::ClearTracksvoid ClearTracks()Definition TGeoManager.h:415; TGeoManager::fSizePNEIdInt_t fSizePNEIdarray of physical node entriesDefinition TGeoManager.h:140; TGeoManager::PopDummyvoid PopDummy(Int_t ipop=9999)Definition TGeoManager.h:597; TGeoManager::CheckOverlapsvoid CheckOverlaps(Double_t ovlp=0.1, Option_t *option="""")Check all geometry for illegal overlaps within a limit OVLP.Definition TGeoManager.cxx:3869; TGeoManager::MakeTubsTGeoVolume * MakeTubs(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a tube segment shape with given medium.Definition TGeoManager.cxx:3213; TGeoManager::fPdgIdInt_t fPdgId[1024]Definition TGeoManager.h:78; TGeoManager::SortOverlapsvoid SortOverlaps()Sort overlaps by decreasing overlap distance. Extrusions comes first.Definition TGeoManager.cxx:2476; TGeoManager::DisableInactiveVolumesvoid DisableInactiveVolumes()Definition TGeoManager.h:362; TGeoManager::SetCurrentPointvo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:92390,Clear,ClearTracksvoid,92390,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,2,['Clear'],"['ClearTracks', 'ClearTracksvoid']"
Usability,"apeSpecific for TBuffer3DSphere; Try first add to viewer; Int_t reqSections = viewer->AddObject(buffer);; if (reqSections != TBuffer3D::kNone) {; if (reqSections & TBuffer3D::kRawSizes) {; Fill out kRawSizes...; }; if (reqSections & TBuffer3D::kRaw) {; Fill out kRaw...; }; Add second time to viewer - ignore return cannot do more; viewer->AddObject(buffer);; }; }>; ShapeSpecific: If the viewer can directly display the buffer without; filling of the kRaw/kRawSizes section it will not need to request client side; tessellation.; Currently we provide the following various shape specific classes, which the; OpenGL viewer can take advantage of (see TBuffer3D.h and TBuffer3DTypes.h). TBuffer3DSphere - solid, hollow and cut spheres*; TBuffer3DTubeSeg - angle tube segment; TBuffer3DCutTube - angle tube segment with plane cut ends. *OpenGL only supports solid spheres at present - cut/hollow ones will be; requested tessellated.; Anyone is free to add new TBuffer3D classes, but it should be clear that the; viewers require updating to be able to take advantage of them. The number of; native shapes in OpenGL will be expanded over time.; BoundingBox: You are not obliged to complete this, as any viewer; requiring one internally (OpenGL) will build one for you if you do not provide.; However; to do this the viewer will force you to provide the raw tessellation, and the; resulting box will be axis aligned with the overall scene, which is non-ideal; for rotated shapes.; As we need to support orientated (rotated) bounding boxes, TBuffer3D requires; the 6 vertices of the box. We also provide a convenience function, SetAABoundingBox(),; for simpler case of setting an axis aligned bounding box. Master/Local Reference Frames; The Core section of TBuffer3D contains two members relating to reference; frames:; fLocalFrame & fLocalMaster. fLocalFrame indicates; if any positions in the buffer (bounding box and tessellation vertexes) are; in local or master (world; frame). fLocalMaster is a stand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBuffer3D.html:3422,clear,clear,3422,root/html526/TBuffer3D.html,https://root.cern,https://root.cern/root/html526/TBuffer3D.html,13,['clear'],['clear']
Usability,"aph->ComputeRange(rwxmin, rwymin, rwxmax, rwymax); //this is redefined in TGraphErrors; 1360 ; 1361 if (rwxmin == rwxmax) rwxmax += 1.;; 1362 if (rwymin == rwymax) rwymax += 1.;; 1363 dx = 0.1*(rwxmax-rwxmin);; 1364 dy = 0.1*(rwymax-rwymin);; 1365 uxmin = rwxmin - dx;; 1366 uxmax = rwxmax + dx;; 1367 minimum = rwymin - dy;; 1368 maximum = rwymax + dy;; 1369 }; 1370 if (theGraph->GetMinimum() != -1111) rwymin = minimum = theGraph->GetMinimum();; 1371 if (theGraph->GetMaximum() != -1111) rwymax = maximum = theGraph->GetMaximum();; 1372 if (uxmin < 0 && rwxmin >= 0) uxmin = 0.9*rwxmin;; 1373 if (uxmax > 0 && rwxmax <= 0) {; 1374 if (gPad->GetLogx()) uxmax = 1.1*rwxmax;; 1375 else uxmax = 0;; 1376 }; 1377 if (minimum < 0 && rwymin >= 0) minimum = 0.9*rwymin;; 1378 if (maximum > 0 && rwymax <= 0) {; 1379 //if(gPad->GetLogy()) maximum = 1.1*rwymax;; 1380 //else maximum = 0;; 1381 }; 1382 if (minimum <= 0 && gPad->GetLogy()) minimum = 0.001*maximum;; 1383 if (uxmin <= 0 && gPad->GetLogx()) {; 1384 if (uxmax > 1000) uxmin = 1;; 1385 else uxmin = 0.001*uxmax;; 1386 }; 1387 rwymin = minimum;; 1388 rwymax = maximum;; 1389 ; 1390 // Create a temporary histogram and fill each bin with the; 1391 // function value.; 1392 char chopth[8] = "" "";; 1393 if (strstr(chopt,""x+"")) strncat(chopth, ""x+"",3);; 1394 if (strstr(chopt,""y+"")) strncat(chopth, ""y+"",3);; 1395 if (optionIAxis) strncat(chopth, ""A"",2);; 1396 if (!theGraph->GetHistogram()) {; 1397 // the graph is created with at least as many bins as there are; 1398 // points to permit zooming on the full range.; 1399 rwxmin = uxmin;; 1400 rwxmax = uxmax;; 1401 npt = 100;; 1402 if (theNpoints > npt) npt = theNpoints;; 1403 TH1F *h = new TH1F(TString::Format(""%s_h"",GetName()),GetTitle(),npt,rwxmin,rwxmax);; 1404 theGraph->SetHistogram(h);; 1405 if (!theGraph->GetHistogram()) return;; 1406 theGraph->GetHistogram()->SetMinimum(rwymin);; 1407 theGraph->GetHistogram()->SetMaximum(rwymax);; 1408 theGraph->GetHistogram()->GetYaxis()->SetLimits(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:51070,ux,uxmin,51070,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,4,['ux'],"['uxmax', 'uxmin']"
Usability,"aph->InheritsFrom(""TCutG"")) {; 1024 //make sure first and last point are the same; 1025 if (ipoint == 0) {; 1026 theX[theNpoints-1] = theX[0];; 1027 theY[theNpoints-1] = theY[0];; 1028 }; 1029 if (ipoint == theNpoints-1) {; 1030 theX[0] = theX[theNpoints-1];; 1031 theY[0] = theY[theNpoints-1];; 1032 }; 1033 }; 1034 }; 1035 badcase = kFALSE;; 1036 gPad->Modified(kTRUE);; 1037 //gPad->Update();; 1038 }; 1039 break;; 1040 ; 1041 case kButton1Up:; 1042 ; 1043 if (gROOT->IsEscaped()) {; 1044 gROOT->SetEscape(kFALSE);; 1045 x.clear();; 1046 y.clear();; 1047 break;; 1048 }; 1049 ; 1050 // Compute x,y range; 1051 xmin = gPad->GetUxmin();; 1052 xmax = gPad->GetUxmax();; 1053 ymin = gPad->GetUymin();; 1054 ymax = gPad->GetUymax();; 1055 dx = xmax-xmin;; 1056 dy = ymax-ymin;; 1057 dxr = dx/(1 - gPad->GetLeftMargin() - gPad->GetRightMargin());; 1058 dyr = dy/(1 - gPad->GetBottomMargin() - gPad->GetTopMargin());; 1059 ; 1060 if (theGraph->GetHistogram()) {; 1061 // Range() could change the size of the pad pixmap and therefore should; 1062 // be called before the other paint routines; 1063 gPad->Range(xmin - dxr*gPad->GetLeftMargin(),; 1064 ymin - dyr*gPad->GetBottomMargin(),; 1065 xmax + dxr*gPad->GetRightMargin(),; 1066 ymax + dyr*gPad->GetTopMargin());; 1067 gPad->RangeAxis(xmin, ymin, xmax, ymax);; 1068 }; 1069 if (middle) {; 1070 for(i=0;i<theNpoints;i++) {; 1071 if (badcase) continue; //do not update if big zoom and points moved; 1072 if (!x.empty()) theX[i] = gPad->PadtoX(gPad->AbsPixeltoX(x[i]+dpx));; 1073 if (!y.empty()) theY[i] = gPad->PadtoY(gPad->AbsPixeltoY(y[i]+dpy));; 1074 }; 1075 } else {; 1076 theX[ipoint] = gPad->PadtoX(gPad->AbsPixeltoX(pxold));; 1077 theY[ipoint] = gPad->PadtoY(gPad->AbsPixeltoY(pyold));; 1078 if (theGraph->InheritsFrom(""TCutG"")) {; 1079 //make sure first and last point are the same; 1080 if (ipoint == 0) {; 1081 theX[theNpoints-1] = theX[0];; 1082 theY[theNpoints-1] = theY[0];; 1083 }; 1084 if (ipoint == theNpoints-1) {; 1085 theX[0] = theX[th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:38525,clear,clear,38525,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['clear'],['clear']
Usability,"aph::GetYDouble_t * GetY() constDefinition TGraph.h:140; TGraph::GetNInt_t GetN() constDefinition TGraph.h:132; TGraph::GetXDouble_t * GetX() constDefinition TGraph.h:139; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TListA doubly linked list.Definition TList.h:38; TList::FirstTObject * First() const overrideReturn the first object in the list. Returns 0 when list is empty.Definition TList.cxx:657; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this collection using its name.Definition TObjArray.cxx:415; TPolyMarkerA PolyMarker is defined by an array on N points in a 2-D space.Definition TPolyMarker.h:31; TPolyMarker::Drawvoid Draw(Option_t *option="""") overrideDraw.Definition TPolyMarker.cxx:189; TPolyMarker::SetPointvirtual void SetPoint(Int_t point, Double_t x, Double_t y)Set point number n.Definition TPolyMarker.cxx:341; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; AuthorRene Brun ; Definition in file FirstContour.C. tutorialshistFirstContour.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FirstContour_8C.html:5506,Guid,Guide,5506,doc/master/FirstContour_8C.html,https://root.cern,https://root.cern/doc/master/FirstContour_8C.html,1,['Guid'],['Guide']
Usability,"aphBentErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphBentErrors.cxx:416; TGraphBentErrors::fEYlowDouble_t * fEYlow[fNpoints] array of Y low errorsDefinition TGraphBentErrors.h:30; TGraphBentErrors::fEYhighdDouble_t * fEYhighd[fNpoints] array of Y high displacementsDefinition TGraphBentErrors.h:36; TGraphBentErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphBentErrors.cxx:278; TGraphBentErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphBentErrors.cxx:646; TGraphBentErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE***to arrays[***] or to f*** Copy points.Definition TGraphBentErrors.cxx:312; TGraphBentErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideGet low error on Y[i].Definition TGraphBentErrors.cxx:463; TGraphBentErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphBentErrors.cxx:402; TGraphBentErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideGet high error on Y[i].Definition TGraphBentErrors.cxx:452; TGraphBentErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphBentErrors.cxx:210; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::AllocateArraysDouble_t ** AllocateArrays(Int_t Narrays, Int_t arraySize)Allocate arrays.Definition TGraph.cxx:598; bool; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25. histhistincTGraphBentErrors.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8h_source.html:11868,Guid,Guide,11868,doc/master/TGraphBentErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8h_source.html,1,['Guid'],['Guide']
Usability,"aphErrors; TGraphPolar : example; TMultiGraph : example, exclusion; TGraph2D : example; TEfficiency : docu; TLatex : example; TMathText : example; TCanvas : example; TPad : example; TRatioPlot : example; TLegend : example; TTree : single-branch draw; TPolyLine : dflt; TGaxis : dflt; TEllipse : dflt; TArrow : dflt; TPolyMarker3D: dflt. More examples of supported classes can be found on: https://root.cern/js/latest/examples.htm; There are special JSROOT draw options which only can be used with for TCanvas or TPad objects:. logx - enable log10 scale for X axis; logy - enable log10 scale for Y axis; logz - enable log10 scale for Z axis; log - enable log10 scale for X,Y,Z axes; log2x - enable log2 scale for X axis; log2y - enable log2 scale for Y axis; log2z - enable log2 scale for Z axis; log2 - enable log2 scale for X,Y,Z axes; gridx - enable grid for X axis; gridy - enable grid for X axis; grid - enable grid for X and Y axes; tickx - enable ticks for X axis; ticky - enable ticks for X axis; tick - enable ticks for X and Y axes; rx - reverse X axis; ry - reverse Y axis; rotate - rotate frame; fixframe - disable interactive moving of the frame; nozoomx - disable zooming on X axis; nozoomy - disable zooming on Y axis; cpXY - create palette XY for the canvas like cp50; nopalette - ignore palette stored with TCanvas; nocolors - ignore colors list stored with TCanvas; lcolors - use only locally colors list stored with TCanvas; nomargins - clear frame margins. 1.4 Superimposing draw objects; In the URL string one could use “+” sign to specify objects superposition:. item=hpx+hprof. With similar syntax one could specify individual draw options for superimposed objects. item=hpx+hprof&opt=logy+hist. Here “logy” option will be used for “hpx1” item and “hist” option for “hprof;1” item.; While draw option can include “+” sign itself, for superposition one could specify arrays of items and draw options like:. item=[hpx;1,hprof;1]&opt=[logy,hist]. 1.5 TTree draw; JSROOT provides pos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:7828,clear,clear,7828,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['clear'],['clear']
Usability,"apped file. When a TKeyMapFile object is clicked in the browser, a new copy of this object is copied into the local directory and the action corresponding to object->Browse is executed (typically Draw). ; Definition at line 20 of file TKeyMapFile.h. Public Member Functions;  TKeyMapFile ();  Default constructor. ;  ;  TKeyMapFile (const char *name, const char *classname, TMapFile *mapfile);  Constructor. ;  ;  ~TKeyMapFile () override;  ; void Browse (TBrowser *b) override;  Browse the contained objects. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeyMapFile.html:1438,Clear,Clear,1438,doc/master/classTKeyMapFile.html,https://root.cern,https://root.cern/doc/master/classTKeyMapFile.html,1,['Clear'],['Clear']
Usability,"apply(unsigned int i) constDefinition Expression.h:244; ROOT::Math::BinaryOp::IsInUsebool IsInUse(const T *p) constDefinition Expression.h:251; ROOT::Math::BinaryOp::operator()T operator()(unsigned int i, unsigned int j) constDefinition Expression.h:247; ROOT::Math::ConstantConstant expression class A class representing constant expressions (literals) in the parse tree.Definition Expression.h:400; ROOT::Math::Constant::applyT apply(unsigned int) constDefinition Expression.h:410; ROOT::Math::Constant::rhs_const T rhs_Definition Expression.h:418; ROOT::Math::Constant::~Constant~Constant()Definition Expression.h:407; ROOT::Math::Constant::operator()T operator()(unsigned int, unsigned int) constDefinition Expression.h:412; ROOT::Math::Constant::ConstantConstant(const T &rhs)Definition Expression.h:403; ROOT::Math::ExprDefinition Expression.h:138; ROOT::Math::Expr::applyT apply(unsigned int i) constDefinition Expression.h:150; ROOT::Math::Expr::printstd::ostream & print(std::ostream &os) constused by operator<<() simplify to use apply(i,j)Definition Expression.h:184; ROOT::Math::Expr::ExprExpr(const ExprType &rhs)Definition Expression.h:143; ROOT::Math::Expr::value_typeT value_typeDefinition Expression.h:140; ROOT::Math::Expr::rhs_ExprType rhs_Definition Expression.h:203; ROOT::Math::Expr::operator()T operator()(unsigned int i, unsigned j) constDefinition Expression.h:153; ROOT::Math::Expr::kCols@ kColsDefinition Expression.h:178; ROOT::Math::Expr::kRows@ kRowsDefinition Expression.h:176; ROOT::Math::Expr::~Expr~Expr()Definition Expression.h:147; ROOT::Math::Expr::IsInUsebool IsInUse(const T *p) constfunction to determine if any use operand is being used (has same memory address)Definition Expression.h:161; ROOT::Math::MatRepStdExpression wrapper class for Matrix objects.Definition MatrixRepresentationsStatic.h:54; ROOT::Math::UnaryOpUnaryOperation class A class representing unary operators in the parse tree.Definition Expression.h:361; ROOT::Math::UnaryOp::rhs_const RHS ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Expression_8h_source.html:14652,simpl,simplify,14652,doc/master/Expression_8h_source.html,https://root.cern,https://root.cern/doc/master/Expression_8h_source.html,1,['simpl'],['simplify']
Usability,"apshot with deepCloning option is a set; # of cloned objects, all their clone (recursive) server; # dependencies, together form a self-consistent; # set that is free of external dependencies; ; sclone3 = s3.snapshot(True); ; # Set printing; # ------------------------; ; # Inline printing only show list of names of contained objects; print(""sclone = "", sclone); ; # Plain print shows the same, by name of the set; sclone.Print(); ; # Standard printing shows one line for each item with the items name, name; # and value; sclone.Print(""s""); ; # Verbose printing adds each items arguments, and 'extras' as defined by; # the object; sclone.Print(""v""); ; # Using RooArgLists; # ---------------------------------; ; # List constructors exists with up to 9 initial arguments; l = ROOT.RooArgList(a, b, c, d); ; # Lists have an explicit order and allow multiple arguments with the same; # name; l.add(ROOT.RooArgList(a, b, c, d)); ; # Access by index is provided; arg4 = l.at(4); [#0] WARNING:InputArguments -- The parameter 'b' with range [-10, 10] of the RooGaussian 'g' exceeds the safe range of (0, inf). Advise to limit its range.; RooArgSet::sclone = (a,b,c,d,e,g); 1) RooRealVar:: a = 1; 2) RooRealVar:: b = 2; 3) RooRealVar:: c = 3 +/- 0.5; 4) RooRealVar:: d = 4; 5) RooCategory:: e = sig(idx = 0); ; 6) RooGaussian:: g = 0.882497; 1) 0x7b39df0 RooRealVar:: a = 1 C L(-10 - 10) ""a""; 2) 0x7b3a1e0 RooRealVar:: b = 2 C L(-10 - 10) ""b""; 3) 0x7b13900 RooRealVar:: c = 3 +/- 0.5 L(-10 - 10) ""c""; 4) 0x7aa7d60 RooRealVar:: d = 4 L(-10 - 10) ""d""; 5) 0x7e8fbd0 RooCategory:: e = sig(idx = 0); ""e""; 6) 0x7ea8d00 RooGaussian:: g[ x=x mean=a sigma=b ] = 0.882497 ""g""; sclone = { @0x7eaa940, @0x7eaa948, @0x7eaa950, @0x7eaa958, @0x7eaa960, @0x7eaa968 }; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf508_listsetmanip.py. tutorialsroofitrf508_listsetmanip.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf508__listsetmanip_8py.html:4662,Guid,Guide,4662,doc/master/rf508__listsetmanip_8py.html,https://root.cern,https://root.cern/doc/master/rf508__listsetmanip_8py.html,1,['Guid'],['Guide']
Usability,"ar * GetSessionDir() const; { return fSessionDir; }. const char * GetPackageDir() const; { return fPackageDir; }. const char * GetDataDir() const; { return fDataDir; }. Int_t GetProtocol() const; { return fProtocol; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetGroupId() const; { return fGroupId; }. Int_t GetGroupSize() const; { return fGroupSize; }. Int_t GetLogLevel() const; { return fLogLevel; }. TSocket * GetSocket() const; { return fSocket; }. Float_t GetRealTime() const; { return fRealTime; }. Float_t GetCpuTime() const; { return fCpuTime; }. Int_t GetQuerySeqNum() const; { return fQuerySeqNum; }. Int_t GetTotSessions() const; { return fTotSessions; }. Int_t GetActSessions() const; { return fActSessions; }. Float_t GetEffSessions() const; { return fEffSessions; }. TList * GetEnabledPackages() const; { return fEnabledPackages; }. Int_t GetInflateFactor() const; { return fInflateFactor; }. Long64_t GetMsgSizeHWM() const; { return fMsgSizeHWM; }. const char * GetPrefix() const; { return fPrefix; }. TProofLockPath * GetCacheLock(); { return fCacheLock; }. EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE). void HandleTermination(); { Terminate(0); }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsEndMaster() const; { return fEndMaster; }. Bool_t IsMaster() const; { return fMasterServ; }. Bool_t IsTopMaster() const; { return fOrdinal == ""0""; }. void ReleaseWorker(const char* ); { }. void DisableTimeout(); Disable / Enable read timeout. { }. void EnableTimeout(); { }. void LogToMaster(Bool_t on = kTRUE); Log control. { fSendLogToMaster = on; }. » Author: Fons Rademakers 16/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofServ.h 36592 2010-11-11 10:43:17Z ganis $ » Last generated: 2010-12-10 14:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServ.html:32544,resume,resume,32544,root/html528/TProofServ.html,https://root.cern,https://root.cern/root/html528/TProofServ.html,1,['resume'],['resume']
Usability,ar * TParallelCoordSelect::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 89 of file TParallelCoordRange.h. ◆ GetTitle(). const char * TParallelCoordSelect::GetTitle ; (; ); const. inlineoverridevirtual . Returns title of object. ; This default method returns the class title (i.e. description). Classes that give objects a title should override this method. ; Reimplemented from TObject.; Definition at line 84 of file TParallelCoordRange.h. ◆ IsA(). TClass * TParallelCoordSelect::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TList.; Definition at line 89 of file TParallelCoordRange.h. ◆ SetActivated(). void TParallelCoordSelect::SetActivated ; (; bool ; on). Activate the selection. ; Definition at line 505 of file TParallelCoordRange.cxx. ◆ SetShowRanges(). void TParallelCoordSelect::SetShowRanges ; (; bool ; s). Show the ranges needles. ; Definition at line 516 of file TParallelCoordRange.cxx. ◆ SetTitle(). void TParallelCoordSelect::SetTitle ; (; const char * ; title). inline . Definition at line 87 of file TParallelCoordRange.h. ◆ Streamer(). void TParallelCoordSelect::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TList. ◆ StreamerNVirtual(). void TParallelCoordSelect::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 89 of file TParallelCoordRange.h. Member Data Documentation. ◆ fTitle. TString TParallelCoordSelect::fTitle. private . Definition at line 77 of file TParallelCoordRange.h. Libraries for TParallelCoordSelect:. [legend]; The documentation for this class was generated from the following files:; tree/treeviewer/inc/TParallelCoordRange.h; tree/treeviewer/src/TParallelCoordRange.cxx. TParallelCoordSelect. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:07 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordSelect.html:25788,Guid,Guide,25788,doc/master/classTParallelCoordSelect.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordSelect.html,1,['Guid'],['Guide']
Usability,"ar *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::Smoothvirtual void Smooth(Int_t ntimes=1, Option_t *option="""")Smooth bin contents of this histogram.Definition TH1.cxx:6879; TH1::AddDirectorystatic void AddDirectory(Bool_t add=kTRUE)Sets the flag controlling the automatic add of histograms in memory.Definition TH1.cxx:1294; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::SetNamevoid SetName(const char *name) overrideChange the name of this histogram.Definition TH1.cxx:8960; TH1::AndersonDarlingTestvirtual Double_t AndersonDarlingTest(const TH1 *h2, Option_t *option="""") constStatistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling ...Definition TH1.cxx:8062; TH1::Chi2Testvirtual Double_t Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) consttest for comparing weighted and unweighted histograms.Definition TH1.cxx:2008; TH1::KolmogorovTestvirtual Double_t KolmogorovTest(const TH1 *h2, Option_t *option="""") constStatistical test of compatibility in shape between this histogram and h2, using Kolmogorov test.Definition TH1.cxx:8178; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; AuthorRene Brun ; Definition in file testSmooth.C. tutorialshisttestSmooth.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/testSmooth_8C.html:3795,Guid,Guide,3795,doc/master/testSmooth_8C.html,https://root.cern,https://root.cern/doc/master/testSmooth_8C.html,1,['Guid'],['Guide']
Usability,"ar *option="""", Bool_t isRegexp=kTRUE)Return a space separated list of loaded shared libraries.Definition TSystem.cxx:2136; TSystem::HomeDirectoryvirtual const char * HomeDirectory(const char *userName=nullptr)Return the user's home directory.Definition TSystem.cxx:887; TSystem::ProcessEventsvirtual Bool_t ProcessEvents()Process pending events (GUI, timers, sockets).Definition TSystem.cxx:416; TSystem::GetSoExtvirtual const char * GetSoExt() constGet the shared library extension.Definition TSystem.cxx:4013; TSystem::GetDirNamevirtual TString GetDirName(const char *pathname)Return the directory name in pathname.Definition TSystem.cxx:1032; TSystem::Unlinkvirtual int Unlink(const char *name)Unlink, i.e.Definition TSystem.cxx:1381; TSystem::GetFlagsOptvirtual const char * GetFlagsOpt() constReturn the optimization flags.Definition TSystem.cxx:3935; TTimeStampThe TTimeStamp encapsulates seconds and ns since EPOCH.Definition TTimeStamp.h:45; TUUIDThis class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDent...Definition TUUID.h:42; TUUID::ReadBuffervoid ReadBuffer(char *&buffer)Stream UUID from input buffer.Definition TUUID.cxx:291; TUUID::FillBuffervoid FillBuffer(char *&buffer)Stream UUID into output buffer.Definition TUUID.cxx:275; TUrlThis class represents a WWW compatible URL.Definition TUrl.h:33; TUrl::GetAnchorconst char * GetAnchor() constDefinition TUrl.h:70; TUrl::GetUrlconst char * GetUrl(Bool_t withDeflt=kFALSE) constReturn full URL.Definition TUrl.cxx:390; TUrl::SetAnchorvoid SetAnchor(const char *anchor)Definition TUrl.h:86; TUrl::GetFileAndOptionsconst char * GetFileAndOptions() constReturn the file and its options (the string specified behind the ?).Definition TUrl.cxx:504; TUrl::GetFileconst char * GetFile() constDefinition TUrl.h:69; TUrl::GetValueFromOptionsconst char * GetValueFromOptions(const char *key) constReturn a value for a given key from the URL options.Definition TUrl.cxx:660; TUrl::SetProtocolvoid SetPro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:251392,GUID,GUIDs,251392,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['GUID'],['GUIDs']
Usability,"ar *player=0, TSocket *s=0);  Construct a TProofPlayer object. ;  ; virtual Int_t PollForNewWorkers ();  Asks the PROOF Serv for new workers in Dynamic Startup mode and activates them. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList *wrks);  Used for shuting down the workres after a query is finished. ;  ; virtual void SaveWorkerInfo ();  Save information about the worker set in the file .workers in the working dir. ;  ; Int_t SendFile (const char *file, Int_t opt=(kBinary|kForward|kCp|kCpBin), const char *rfile=0, TSlave *sl=0);  Send a file to master or slave servers. ;  ; virtual void SendInputDataFile ();  Send the input data objects to the master; the objects are taken from the dedicated list and / or the specified file. ;  ; void SetDSet (TDSet *dset);  ; void SetFeedback (TString &opt, TString &optfb, Int_t action);  Extract from opt in optfb information about wanted feedback settings. ;  ; void SetPlayer (TVirtualProofPlayer *player);  Set a new PROOF player. ;  ; void SetupWorkersEnv (TList *wrks, Bool_t increasingpool=kFALSE);  Set up packages, loaded macros, include and lib paths ... ;  ; virtual Bool_t StartSlaves (Bool_t attach=kFALSE);  Start up PROOF slaves. ;  ; void UpdateDialog ();  Final update of the progress dialog. ;  ; virtual void ValidateDSet (TDSet *dset);  Validate a TDSet. ;  ; Int_t VerifyDataSetParallel (const char *uri, const char *optStr);  Internal function for parallel dataset verification used TProof::VerifyDataSet and TProofLite::VerifyDataSet. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:39474,feedback,feedback,39474,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['feedback'],['feedback']
Usability,"ar *player=0, TSocket *s=0);  Construct a TProofPlayer object. ;  ; virtual Int_t PollForNewWorkers ();  Asks the PROOF Serv for new workers in Dynamic Startup mode and activates them. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList *wrks);  Used for shuting down the workres after a query is finished. ;  ; virtual void SaveWorkerInfo ();  Save information about the worker set in the file .workers in the working dir. ;  ; Int_t SendFile (const char *file, Int_t opt=(kBinary|kForward|kCp|kCpBin), const char *rfile=0, TSlave *sl=0);  Send a file to master or slave servers. ;  ; virtual void SendInputDataFile ();  Send the input data objects to the master; the objects are taken from the dedicated list and / or the specified file. ;  ; void SetDSet (TDSet *dset);  ; void SetFeedback (TString &opt, TString &optfb, Int_t action);  Extract from opt in optfb information about wanted feedback settings. ;  ; void SetPlayer (TVirtualProofPlayer *player);  Set a new PROOF player. ;  ; void SetupWorkersEnv (TList *wrks, Bool_t increasingpool=kFALSE);  Set up packages, loaded macros, include and lib paths ... ;  ; void UpdateDialog ();  Final update of the progress dialog. ;  ; virtual void ValidateDSet (TDSet *dset);  Validate a TDSet. ;  ; Int_t VerifyDataSetParallel (const char *uri, const char *optStr);  Internal function for parallel dataset verification used TProof::VerifyDataSet and TProofLite::VerifyDataSet. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Private Attributes; TCondor * fCondor;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofCondor.html:38072,feedback,feedback,38072,doc/master/classTProofCondor.html,https://root.cern,https://root.cern/doc/master/classTProofCondor.html,1,['feedback'],['feedback']
Usability,"ar *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; Bool_t HandleTimer (TTimer *timer) override;  Send feedback objects to client. ;  ; Int_t MakeSelector (const char *selfile);  Create the selector object and save the relevant files and binary information in the cache so that the worker can pick it up. ;  ; void SetupFeedback () override;  Setup reporting of feedback objects. ;  ;  Protected Member Functions inherited from TProofPlayerRemote; TProof * GetProof () const;  ; Bool_t HandleTimer (TTimer *timer) override;  Send feedback objects to client. ;  ; Int_t InitPacketizer (TDSet *dset, Long64_t nentries, Long64_t first, const char *defpackunit, const char *defpackdata);  Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ;  ; TList * MergeFeedback ();  Merge feedback lists. ;  ; Bool_t MergeOutputFiles ();  Merge output in files. ;  ; void NotifyMemory (TObject *obj);  Printout the memory record after merging object 'obj' This record is used by the memory monitor. ;  ; virtual Bool_t SendSelector (const char *selector_file);  Send the selector file(s) to master or worker nodes. ;  ; void SetLastMergingMsg (TObject *obj);  Set the message to be notified in case of exception. ;  ; void SetSelectorDataMembersFromOutputList ();  Set the selector's data members: find the mappin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLite.html:20941,feedback,feedback,20941,doc/master/classTProofPlayerLite.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLite.html,1,['feedback'],['feedback']
Usability,ar * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t fBlue;  Per cent of blue. ;  ; Bool_t fBoundingBox;  True for Encapsulated PostScript. ;  ; Bool_t fClear;  True when page must be cleared. ;  ; Int_t fClip;  Clipping mode. ;  ; Bool_t fClipStatus;  Clipping Indicator. ;  ; Int_t fCurrentColor;  current Postscript color index ;  ; Float_t fDXC;  ; Float_t fDYC;  ; TString fFileName;  PS file name. ;  ; Bool_t fFontEmbed;  True is FontEmbed has been called. ;  ; Float_t fFX;  ; Float_t fFY;  ; Float_t fGreen;  Per cent of green. ;  ; Int_t fIXzone;  Current zone along X. ;  ; Int_t fIYzone;  Current zone along Y. ;  ; Int_t fLastCellBlue;  Last blue value. ;  ; Int_t fLastCellGreen;  Last green value. ;  ; Int_t fLastCellRed;  Last red value. ;  ; Float_t fLineScale;  Line width scale factor. ;  ; Float_t fMarkerSizeCur;  current transformed value of marker size ;  ; Int_t fMaxLines;  Maximum number of lines in a PS array. ;  ; Float_t fMaxsize;  Largest dimension of X and Y. ;  ; Int_t fMode;  PostScript mode. ;  ; Int_t fNbCellLine;  Number of boxes in the current line. ;  ; Int_t fNbCellW;  Number of boxes per line. ;  ; Int_t fNbinCT;  Number,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPostScript.html:32360,clear,cleared,32360,doc/master/classTPostScript.html,https://root.cern,https://root.cern/doc/master/classTPostScript.html,1,['clear'],['cleared']
Usability,"ar * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TProofServ.h>. Inheritance diagram for TProofLockPath:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofLockPath(). TProofLockPath::TProofLockPath ; (; const char * ; path). inline . Definition at line 354 of file TProofServ.h. ◆ ~TProofLockPath(). TProofLockPath::~TProofLockPath ; (; ). inlineoverride . Definition at line 355 of file TProofServ.h. Member Function Documentation. ◆ IsLocked(). Bool_t TProofLockPath::IsLocked ; (; ); const. inline . Definition at line 360 of file TProofServ.h. ◆ Lock(). Int_t TProofLockPath::Lock ; (; ). Locks the directory. ; Waits if lock is hold by an other process. Returns 0 on success, -1 in case of error. ; Definition at line 6986 of file TProofServ.cxx. ◆ Unlock(). Int_t TProofLockPath::Unlock ; (; ). Unlock the directory. ; Returns 0 in case of success, -1 in case of error. ; Definition at line 7022 of file TProofServ.cxx. Member Data Documentation. ◆ fLockId. Int_t TProofLockPath::fLockId. private . Definition at line 351 of file TProofServ.h. proof/proof/inc/TProofServ.h; proof/proof/src/TProofServ.cxx. TProofLockPath. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLockPath.html:12037,Guid,Guide,12037,doc/master/classTProofLockPath.html,https://root.cern,https://root.cern/doc/master/classTProofLockPath.html,1,['Guid'],['Guide']
Usability,"ar * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCache; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; bool _allowOptimize;  ; bool _clearOnRedirect;  ; bool _optCacheModeSeen;  ! ;  ; RooArgSet * _optCacheObservables = nullptr;  ! current optCacheObservables ;  ;  Protected Attributes inherited from RooCacheManager< RooAbsCacheElement >; Int_t _lastIndex;  ! Last slot accessed ;  ; Int_t _maxSize;  ! Maximum size ;  ; std::vector< RooNormSetCache > _nsetCache;  ! Normalization/Integration set manager ;  ; std::vector< RooAbsCacheElement * > _object;  ! Payload ;  ; Int_t _size;  ! Actual use ;  ; bool _wired;  ! In wired mode, there is a single payload which is returned always ;  ;  Protected Attributes inherited from RooAbsCache; RooAbsArg * _owner;  Pointer to owning RooAbsArg. ;  . Static Protected Attributes; static bool _clearObsList;  Clear obslist on sterilize? ;  . #include <RooObjCacheManager.h>. Inheritance diagram for RooObjCacheManager:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooObjCacheManager() [1/2]. RooObjCacheManager::RooObjCacheManager ; (; RooAbsArg * ; owner = nullptr, . Int_t ; maxSize = 2, . bool ; clearCacheOnServerRedirect = true, . bool ; allowOptimize = false . ). Constructor of object cache manager for given owner. ; If clearCacheOnServerRedirect is true all cache elements will be cleared when a server redirect is intercepted by the cache manager. This is the default strategy and should only be overridden when you really understand what you're doing as properly implementing server redirect in cache elements can get very complicated, especially if there are (cyclical) reference back to the owning object ; Definition at line 47 of file RooObjCacheManager.cxx. ◆ RooObjCacheManager() [2/2]",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:6617,Clear,Clear,6617,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['Clear'],['Clear']
Usability,ar >> 1. constexpr . Definition at line 97 of file RtypesCore.h. ◆ kMaxInt. constexpr Int_t kMaxInt = Int_t(kMaxUInt >> 1). constexpr . Definition at line 105 of file RtypesCore.h. ◆ kMaxLong. constexpr Long_t kMaxLong = Long_t(kMaxULong >> 1). constexpr . Definition at line 109 of file RtypesCore.h. ◆ kMaxLong64. constexpr Long64_t kMaxLong64 = Long64_t(kMaxULong64 >> 1). constexpr . Definition at line 113 of file RtypesCore.h. ◆ kMaxShort. constexpr Int_t kMaxShort = kMaxUShort >> 1. constexpr . Definition at line 101 of file RtypesCore.h. ◆ kMaxUChar. constexpr Int_t kMaxUChar = 256. constexpr . Definition at line 96 of file RtypesCore.h. ◆ kMaxUInt. constexpr UInt_t kMaxUInt = UInt_t(~0). constexpr . Definition at line 104 of file RtypesCore.h. ◆ kMaxULong. constexpr ULong_t kMaxULong = ULong_t(~0). constexpr . Definition at line 108 of file RtypesCore.h. ◆ kMaxULong64. constexpr ULong64_t kMaxULong64 = ULong64_t(~0LL). constexpr . Definition at line 112 of file RtypesCore.h. ◆ kMaxUShort. constexpr Int_t kMaxUShort = 65534. constexpr . Definition at line 100 of file RtypesCore.h. ◆ kMinChar. constexpr Int_t kMinChar = -kMaxChar - 1. constexpr . Definition at line 98 of file RtypesCore.h. ◆ kMinInt. constexpr Int_t kMinInt = -kMaxInt - 1. constexpr . Definition at line 106 of file RtypesCore.h. ◆ kMinLong. constexpr Long_t kMinLong = -kMaxLong - 1. constexpr . Definition at line 110 of file RtypesCore.h. ◆ kMinLong64. constexpr Long64_t kMinLong64 = -kMaxLong64 - 1. constexpr . Definition at line 114 of file RtypesCore.h. ◆ kMinShort. constexpr Int_t kMinShort = -kMaxShort - 1. constexpr . Definition at line 102 of file RtypesCore.h. ◆ kNPOS. constexpr Ssiz_t kNPOS = ~(Ssiz_t)0. constexpr . Definition at line 117 of file RtypesCore.h. ◆ kTRUE. constexpr Bool_t kTRUE = true. constexpr . Definition at line 93 of file RtypesCore.h. corefoundationincRtypesCore.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:14 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RtypesCore_8h.html:12087,Guid,Guide,12087,doc/master/RtypesCore_8h.html,https://root.cern,https://root.cern/doc/master/RtypesCore_8h.html,1,['Guid'],['Guide']
Usability,"ar dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; R; ROOT::Internal::SHA256::sha256_updatevoid sha256_update(sha256_t *p, const unsigned char *data, size_t size)Definition RSha256.hxx:224; ROOT::Internal::SHA256::sha256_transformstatic void sha256_transform(uint32_t *state, const uint32_t *data)Definition RSha256.hxx:158; ROOT::Internal::SHA256::sha256_write_byte_blockstatic void sha256_write_byte_block(sha256_t *p)Definition RSha256.hxx:214; ROOT::Internal::SHA256::Kstatic const uint32_t K[64]Definition RSha256.hxx:148; ROOT::Internal::SHA256::sha256_finalvoid sha256_final(sha256_t *p, unsigned char *digest)Definition RSha256.hxx:238; ROOT::Internal::SHA256::sha256_initvoid sha256_init(sha256_t *p)Definition RSha256.hxx:75; ROOT::Internal::SHA256::sha256_hashvoid sha256_hash(unsigned char *buf, const unsigned char *data, size_t size); ROOT::Internal::Sha256void Sha256(const unsigned char *data, int len, ULong64_t *fDigest)Definition RSha256.hxx:267; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Internal::SHA256::sha256_tDefinition RSha256.hxx:60; ROOT::Internal::SHA256::sha256_t::bufferunsigned char buffer[64]Definition RSha256.hxx:63; ROOT::Internal::SHA256::sha256_t::stateuint32_t state[8]Definition RSha256.hxx:61; ROOT::Internal::SHA256::sha256_t::countuint64_t countDefinition RSha256.hxx:62. corefoundationresROOTRSha256.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RSha256_8hxx_source.html:11671,Guid,Guide,11671,doc/master/RSha256_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RSha256_8hxx_source.html,1,['Guid'],['Guide']
Usability,"ar* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tfConfidenceLevelconfidence level; Double_tfLowerLimitlower interval limit; RooArgSetfParametersset containing the parameter of interest; Double_tfUpperLimitupper interval limit. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: SimpleInterval.h 31285 2009-11-18 16:38:36Z moneta $ » Last generated: 2010-09-23 20:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__SimpleInterval.html:6810,Simpl,SimpleInterval,6810,root/html528/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html528/RooStats__SimpleInterval.html,3,['Simpl'],"['Simple', 'SimpleInterval']"
Usability,"ar* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tfConfidenceLevelconfidence level; Double_tfLowerLimitlower interval limit; RooArgSetfParametersset containing the parameter of interest; Double_tfUpperLimitupper interval limit. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: SimpleInterval.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SimpleInterval.html:6879,Simpl,SimpleInterval,6879,root/html530/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html530/RooStats__SimpleInterval.html,3,['Simpl'],"['Simple', 'SimpleInterval']"
Usability,"ar* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tfConfidenceLevelconfidence level; Double_tfLowerLimitlower interval limit; RooArgSetfParametersset containing the parameter of interest; Double_tfUpperLimitupper interval limit. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: SimpleInterval.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__SimpleInterval.html:6879,Simpl,SimpleInterval,6879,root/html532/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html532/RooStats__SimpleInterval.html,3,['Simpl'],"['Simple', 'SimpleInterval']"
Usability,"ar* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::Des",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttFillEditor.html:1644,Clear,Clear,1644,root/html526/TAttFillEditor.html,https://root.cern,https://root.cern/root/html526/TAttFillEditor.html,420,['Clear'],['Clear']
Usability,"ar* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); voidCreateRefsTab(); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrackListEditor.html:1631,Clear,Clear,1631,root/html528/TEveTrackListEditor.html,https://root.cern,https://root.cern/root/html528/TEveTrackListEditor.html,6,['Clear'],['Clear']
Usability,"ar* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; voidCreateColorRadioButtons(); voidCreateColorSliders(); virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPShapeObjEditor.html:1622,Clear,Clear,1622,root/html528/TGLPShapeObjEditor.html,https://root.cern,https://root.cern/root/html528/TGLPShapeObjEditor.html,6,['Clear'],['Clear']
Usability,"ar* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); voidConnectSelected(TCanvas* c); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManagerEditor.html:3402,Clear,Clear,3402,root/html528/TGeoManagerEditor.html,https://root.cern,https://root.cern/root/html528/TGeoManagerEditor.html,6,['Clear'],['Clear']
Usability,"ar* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); voidChangeRightLogo(const char* name); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); voidCleanupSession(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); voidDeleteQuery(); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); voidDisableTimer()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionViewer.html:1701,Clear,Clear,1701,root/html528/TSessionViewer.html,https://root.cern,https://root.cern/root/html528/TSessionViewer.html,6,['Clear'],['Clear']
Usability,"ar* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tfConfidenceLevelconfidence level; Double_tfLowerLimitlower interval limit; RooArgSetfParametersset containing the parameter of interest; Double_tfUpperLimitupper interval limit. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name); Default constructor. SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SimpleInterval.html:6437,Simpl,SimpleInterval,6437,root/html526/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"ar* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TOrdCollection*fToggleslist of TToggle objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TToggleGroup(); Constructor. TToggleGroup(const TToggleGroup& ); Copy constructor. TToggleGroup & operator=(const TToggleGroup& ); Assignment operator. ~TToggleGroup(); Deletes togglegroup but does not disposes toggled objects!. Int_t Add(TToggle* t, Bool_t select = 1); Add a new toggle. Int_t InsertAt(TToggle* t, Int_t pos, Bool_t select = 1); Add a new toggle at a specific position. void Select(Int_t idx); Select a toggle. void Select(TToggle* t); Selector a toggle. void DeleteAll(); Disposes of all objects and clears array. Int_t GetTogglesCount(); {return fToggles->GetSize();}. TToggle * At(Int_t idx); {return (TToggle*)fToggles->At(idx);}. void Remove(TToggle* t); {fToggles->Remove(t);}. void Remove(Int_t pos); {fToggles->RemoveAt(pos);}. TToggle * First(); {return (TToggle*)fToggles->First();}. TToggle * Last(); {return (TToggle*)fToggles->Last();}. Int_t IndexOf(TToggle* t); {return fToggles->IndexOf(t);}. » Author: Piotr Golonka 31/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TToggleGroup.h 26606 2008-12-02 20:36:09Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TToggleGroup.html:6633,clear,clears,6633,root/html532/TToggleGroup.html,https://root.cern,https://root.cern/root/html532/TToggleGroup.html,1,['clear'],['clears']
Usability,"ar* stateNameList); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearRange(const char* name, Bool_t silent); voidRooAbsArg::clearShapeDirty() const; voidclearTypes(); voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; Bool_tdefineType(const char* label); Bool_tdefineType(const char* label, Int_t index); virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCategory.html:2126,clear,clearValueAndShapeDirty,2126,root/html532/RooCategory.html,https://root.cern,https://root.cern/root/html532/RooCategory.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"ar.cxx. ◆ SetButtonWidth(). void TRootControlBar::SetButtonWidth ; (; UInt_t ; width). overridevirtual . Set button width in pixels. ; Reimplemented from TControlBarImp.; Definition at line 251 of file TRootControlBar.cxx. ◆ SetFont(). void TRootControlBar::SetFont ; (; const char * ; fontName). overridevirtual . sets new font for control bar buttons ; Reimplemented from TControlBarImp.; Definition at line 170 of file TRootControlBar.cxx. ◆ SetTextColor(). void TRootControlBar::SetTextColor ; (; const char * ; colorName). overridevirtual . sets text color for control bar buttons, e.g.: root > .x tutorials/demos.C root > bar->SetTextColor(""red"") ; Reimplemented from TControlBarImp.; Definition at line 229 of file TRootControlBar.cxx. ◆ Show(). void TRootControlBar::Show ; (; ). overridevirtual . Show controlbar. If not yet created create it first. ; Reimplemented from TControlBarImp.; Definition at line 122 of file TRootControlBar.cxx. ◆ Streamer(). void TRootControlBar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGMainFrame. ◆ StreamerNVirtual(). void TRootControlBar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file TRootControlBar.h. Member Data Documentation. ◆ fBwidth. UInt_t TRootControlBar::fBwidth. private . button width in pixels ; Definition at line 28 of file TRootControlBar.h. ◆ fL1. TGLayoutHints* TRootControlBar::fL1. private . button layout hints ; Definition at line 27 of file TRootControlBar.h. ◆ fWidgets. TList* TRootControlBar::fWidgets. private . list of TGTextButton or TGPictureButtons ; Definition at line 26 of file TRootControlBar.h. Libraries for TRootControlBar:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TRootControlBar.h; gui/gui/src/TRootControlBar.cxx. TRootControlBar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootControlBar.html:41542,Guid,Guide,41542,doc/master/classTRootControlBar.html,https://root.cern,https://root.cern/doc/master/classTRootControlBar.html,1,['Guid'],['Guide']
Usability,ar::fLeftHint. protected . Definition at line 187 of file TGMdiDecorFrame.h. ◆ fLFrame. TGCompositeFrame* TGMdiTitleBar::fLFrame. protected . Definition at line 186 of file TGMdiDecorFrame.h. ◆ fLHint. TGLayoutHints* TGMdiTitleBar::fLHint. protected . Definition at line 187 of file TGMdiDecorFrame.h. ◆ fMdiWin. const TGWindow* TGMdiTitleBar::fMdiWin. protected . owner MDI window ; Definition at line 182 of file TGMdiDecorFrame.h. ◆ fMFrame. TGCompositeFrame * TGMdiTitleBar::fMFrame. protected . Definition at line 186 of file TGMdiDecorFrame.h. ◆ fMidButPressed. Bool_t TGMdiTitleBar::fMidButPressed. protected . mouse button pressed ; Definition at line 189 of file TGMdiDecorFrame.h. ◆ fMiddleHint. TGLayoutHints * TGMdiTitleBar::fMiddleHint. protected . Definition at line 187 of file TGMdiDecorFrame.h. ◆ fRFrame. TGCompositeFrame * TGMdiTitleBar::fRFrame. protected . the three parts of the title bar ; Definition at line 186 of file TGMdiDecorFrame.h. ◆ fRightButPressed. Bool_t TGMdiTitleBar::fRightButPressed. protected . Definition at line 189 of file TGMdiDecorFrame.h. ◆ fRightHint. TGLayoutHints * TGMdiTitleBar::fRightHint. protected . layout hints ; Definition at line 187 of file TGMdiDecorFrame.h. ◆ fWinIcon. TGMdiTitleIcon* TGMdiTitleBar::fWinIcon. protected . title icon ; Definition at line 184 of file TGMdiDecorFrame.h. ◆ fWinName. TGLabel* TGMdiTitleBar::fWinName. protected . window name label ; Definition at line 185 of file TGMdiDecorFrame.h. ◆ fX0. Int_t TGMdiTitleBar::fX0. protected . Definition at line 188 of file TGMdiDecorFrame.h. ◆ fY0. Int_t TGMdiTitleBar::fY0. protected . initial position of the mouse click ; Definition at line 188 of file TGMdiDecorFrame.h. Libraries for TGMdiTitleBar:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGMdiDecorFrame.h; gui/gui/src/TGMdiDecorFrame.cxx. TGMdiTitleBar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:27 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiTitleBar.html:40309,Guid,Guide,40309,doc/master/classTGMdiTitleBar.html,https://root.cern,https://root.cern/doc/master/classTGMdiTitleBar.html,1,['Guid'],['Guide']
Usability,"arAttributes(). void TGeoManager::ClearAttributes ; (; ). Reset all attributes to default ones. ; Default attributes for visualization are those defined before closing the geometry. ; Definition at line 1455 of file TGeoManager.cxx. ◆ ClearNavigators(). void TGeoManager::ClearNavigators ; (; ). Clear all navigators. ; Definition at line 881 of file TGeoManager.cxx. ◆ ClearOverlaps(). void TGeoManager::ClearOverlaps ; (; ). Clear the list of overlaps. ; Definition at line 1605 of file TGeoManager.cxx. ◆ ClearPhysicalNodes(). void TGeoManager::ClearPhysicalNodes ; (; Bool_t ; mustdelete = kFALSE). Clear the current list of physical nodes, so that we can start over with a new list. ; If MUSTDELETE is true, delete previous nodes. ; Definition at line 3542 of file TGeoManager.cxx. ◆ ClearShape(). void TGeoManager::ClearShape ; (; const TGeoShape * ; shape). Remove a shape from the list of shapes. ; Definition at line 1617 of file TGeoManager.cxx. ◆ ClearThreadData(). void TGeoManager::ClearThreadData ; (; ); const. Definition at line 953 of file TGeoManager.cxx. ◆ ClearThreadsMap(). void TGeoManager::ClearThreadsMap ; (; ). static . Clear the current map of threads. ; This will be filled again by the calling threads via ThreadId calls. ; Definition at line 984 of file TGeoManager.cxx. ◆ ClearTracks(). void TGeoManager::ClearTracks ; (; ). inline . Definition at line 415 of file TGeoManager.h. ◆ CloseGeometry(). void TGeoManager::CloseGeometry ; (; Option_t * ; option = ""d""). Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-time shapes)building the cache manager, voxelizing all volumes, counting the total number of physical nodes and registering the manager class to the browser. ; Definition at line 1480 of file TGeoManager.cxx. ◆ ConvertReflections(). void TGeoManager::ConvertReflections ; (; ). Convert all reflections in geometry to normal rotations + reflected shapes. ; Definition at line 1723 of file TGeoManager.cxx. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:78582,Clear,ClearThreadData,78582,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Clear'],['ClearThreadData']
Usability,"arNo)TMinuitvirtual; ResetBit(UInt_t f)TObjectinline; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetErrorDef(Double_t up)TMinuitvirtual; SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t))TMinuitvirtual; SetGraphicsMode(Bool_t mode=kTRUE)TMinuitinlinevirtual; SetMaxIterations(Int_t maxiter=500)TMinuitinlinevirtual; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectFit(TObject *obj)TMinuitinlinevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetPrintLevel(Int_t printLevel=0)TMinuitvirtual; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTMinuitvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TMinuitinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TMinuit(const TMinuit &m)TMinuitprivate; TMinuit()TMinuit; TMinuit(Int_t maxpar)TMinuit; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TMinuit() overrideTMinuit; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit-members.html:12468,Guid,Guide,12468,doc/master/classTMinuit-members.html,https://root.cern,https://root.cern/doc/master/classTMinuit-members.html,1,['Guid'],['Guide']
Usability,"ar_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayerRemote::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tFinalize(TQueryResult* qr); virtual Long64_tFinalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerLite.html:4610,Feedback,Feedback,4610,root/html602/TProofPlayerLite.html,https://root.cern,https://root.cern/root/html602/TProofPlayerLite.html,2,['Feedback'],['Feedback']
Usability,"ar_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayerRemote::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayerRemote::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayerRemote::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerSuperMaster.html:5112,Feedback,Feedback,5112,root/html602/TProofPlayerSuperMaster.html,https://root.cern,https://root.cern/root/html602/TProofPlayerSuperMaster.html,2,['Feedback'],['Feedback']
Usability,"arallel; world. The parallel world has to be closed before calling any navigation; method. Function Members (Methods); public:. virtual~TGeoParallelWorld(); voidTObject::AbstractMethod(const char* method) const; voidAddNode(TGeoPhysicalNode* pnode); voidAddOverlap(TGeoVolume* vol); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckOverlaps(Double_t ovlp = 0.001); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; Bool_tCloseGeometry(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TGeoPhysicalNode*FindNextBoundary(Double_t[3] point, Double_t[3] dir, Double_t& step, Double_t stepmax = 1.0E+30); TGeoPhysicalNode*FindNode(Double_t[3] point); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGeoManager*GetGeometry() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoParallelWorld.html:1259,Clear,Clear,1259,root/html602/TGeoParallelWorld.html,https://root.cern,https://root.cern/root/html602/TGeoParallelWorld.html,1,['Clear'],['Clear']
Usability,"arallelWorld(const char* name, TGeoManager* mgr); virtual~TGeoParallelWorld(); voidTObject::AbstractMethod(const char* method) const; voidAddNode(const char* path); voidAddOverlap(TGeoVolume* vol, Bool_t activate = kTRUE); voidAddOverlap(const char* volname, Bool_t activate = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckOverlaps(Double_t ovlp = 0.001); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; Bool_tCloseGeometry(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TGeoPhysicalNode*FindNextBoundary(Double_t* point, Double_t* dir, Double_t& step, Double_t stepmax = 1.E30); TGeoPhysicalNode*FindNode(Double_t* point); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGeoManager*GetGeometry() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoParallelWorld.html:1415,Clear,Clear,1415,root/html534/TGeoParallelWorld.html,https://root.cern,https://root.cern/root/html534/TGeoParallelWorld.html,1,['Clear'],['Clear']
Usability,"arallelisation of TTree::GetEntry. ;  ; file  imt101_parTreeProcessing.C;   Illustrate the usage of the TTreeProcessorMT::Process method. ;  ; file  mp001_fillHistos.C;   Fill histograms in parallel and write them on file. ;  ; file  mp101_fillNtuples.C;   Fill n-tuples in distinct workers. ;  ; file  mp102_readNtuplesFillHistosAndFit.C;   Read n-tuples in distinct workers, fill histograms, merge them and fit. ;  ; file  mp103_processSelector.C;   Illustrate the usage of the multiproc TSelector interfaces with the h1 analysis example. ;  ; file  mp104_processH1.C;   Illustrate the usage of the multiproc to process the H1 analysis example. ;  ; file  mp105_processEntryList.C;   Illustrate the usage of the multiproc to process TEntryList with the H1 analysis example. ;  ; file  mp201_parallelHistoFill.C;   Parallel fill of a histogram This tutorial shows how a histogram can be filled in parallel with a multiprocess approach. ;  ; file  mp_H1_lambdas.C;   Lambdas used to check and fit the result of the H1 analysis. ;  ; file  mt001_fillHistos.C;   Fill histograms in parallel and write them on file. ;  ; file  mt101_fillNtuples.C;   Fill n-tuples in distinct workers. ;  ; file  mt102_readNtuplesFillHistosAndFit.C;   Read n-tuples in distinct workers, fill histograms, merge them and fit. ;  ; file  mt103_fillNtupleFromMultipleThreads.C;   Fill the same TNtuple from different threads. ;  ; file  mt201_parallelHistoFill.C;   Parallel fill of a histogram. ;  ; file  mt301_TTaskGroupSimple.C;   Shows how to run items of work asynchronously with a TTaskGroup. ;  ; file  mt304_fillHistos.C;   Fill histograms in parallel with automatic binning. ;  ; file  mtbb001_fillHistos.C;   Fill histograms in parallel and write them on file. ;  ; file  mtbb101_fillNtuples.C;   Fill n-tuples in distinct workers. ;  ; file  mtbb201_parallelHistoFill.C;   Parallel fill of a histogram. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__multicore.html:2305,Guid,Guide,2305,doc/master/group__tutorial__multicore.html,https://root.cern,https://root.cern/doc/master/group__tutorial__multicore.html,1,['Guid'],['Guide']
Usability,aramListEditor::InitModel ; (; TObject * ; obj). protectedvirtual . Initialize widgets when a new object is selected. ; Definition at line 117 of file TEveParamList.cxx. ◆ IsA(). TClass * TEveParamListEditor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 149 of file TEveParamList.h. ◆ operator=(). TEveParamListEditor & TEveParamListEditor::operator= ; (; const TEveParamListEditor & ; ). private . ◆ SetModel(). void TEveParamListEditor::SetModel ; (; TObject * ; obj). overridevirtual . Set model object. ; Implements TGedFrame.; Definition at line 203 of file TEveParamList.cxx. ◆ Streamer(). void TEveParamListEditor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TEveParamListEditor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 149 of file TEveParamList.h. Member Data Documentation. ◆ fBoolParameters. std::vector<TGCheckButton*> TEveParamListEditor::fBoolParameters. protected . Definition at line 133 of file TEveParamList.h. ◆ fFloatParameters. std::vector<TGNumberEntry*> TEveParamListEditor::fFloatParameters. protected . Definition at line 132 of file TEveParamList.h. ◆ fIntParameters. std::vector<TGNumberEntry*> TEveParamListEditor::fIntParameters. protected . Definition at line 131 of file TEveParamList.h. ◆ fM. TEveParamList* TEveParamListEditor::fM. protected . Definition at line 129 of file TEveParamList.h. ◆ fParamFrame. TGVerticalFrame* TEveParamListEditor::fParamFrame. protected . Definition at line 130 of file TEveParamList.h. Libraries for TEveParamListEditor:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveParamList.h; graf3d/eve/src/TEveParamList.cxx. TEveParamListEditor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:40 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveParamListEditor.html:37496,Guid,Guide,37496,doc/master/classTEveParamListEditor.html,https://root.cern,https://root.cern/doc/master/classTEveParamListEditor.html,1,['Guid'],['Guide']
Usability,"arameter. ;  ; RooPlot * plotPull (const RooRealVar &param, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Plot the distribution of pull values for the specified parameter on a newly created frame. ;  ; RooPlot * plotPull (const RooRealVar &param, double lo=-3.0, double hi=3.0, Int_t nbins=25, bool fitGauss=false);  Create a RooPlot of the pull distribution for the given parameter. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMCStudy.html:7056,Clear,Clear,7056,doc/master/classRooMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooMCStudy.html,1,['Clear'],['Clear']
Usability,"arameters at the time of the call.Definition TMinuit.cxx:6304; TMinuit::fOriginTString fOrigin[kMAXWARN]Definition TMinuit.h:173; TMinuit::mncrosvirtual void mncros(Double_t &aopt, Int_t &iercr)Find point where MNEVAL=AMIN+UP.Definition TMinuit.cxx:1798; TMinuit::fLnewmnBool_t fLnewmnDefinition TMinuit.h:161; TMinuit::GetNumFreeParsvirtual Int_t GetNumFreePars() constreturns the number of currently free parametersDefinition TMinuit.cxx:863; TMinuit::mnhes1virtual void mnhes1()Calculate first derivatives (GRD) and uncertainties (DGRD)Definition TMinuit.cxx:4218; TMinuit::fIcircInt_t fIcirc[2]Definition TMinuit.h:153; TMinuit::mnfreevirtual void mnfree(Int_t k)Restores one or more fixed parameter(s) to variable status.Definition TMinuit.cxx:3256; TMinuit::mncntrvirtual void mncntr(Int_t ke1, Int_t ke2, Int_t &ierrf)Print function contours in two variables, on line printer.Definition TMinuit.cxx:1132; TMinuit::fAminDouble_t fAminDefinition TMinuit.h:49; TMinuit::Contourvirtual TObject * Contour(Int_t npoints=10, Int_t pa1=0, Int_t pa2=1)Creates a TGraph object describing the n-sigma contour of a TMinuit fit.Definition TMinuit.cxx:653; TMinuit::fEDMDouble_t fEDMDefinition TMinuit.h:51; TMinuit::fDgrdDouble_t * fDgrdDefinition TMinuit.h:85; TMinuit::mnparmvirtual void mnparm(Int_t k, TString cnamj, Double_t uk, Double_t wk, Double_t a, Double_t b, Int_t &ierflg)Implements one parameter definition.Definition TMinuit.cxx:5665; TMinuit::fMNOTwDouble_t * fMNOTwDefinition TMinuit.h:114; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; bool; double; int; yDouble_t y[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. mathminuitincTMinuit.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8h_source.html:33956,Guid,Guide,33956,doc/master/TMinuit_8h_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8h_source.html,1,['Guid'],['Guide']
Usability,"arameters). void SetEta(Double_t eta); Sets Eta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEpsilon(Double_t eps); Sets Epsilon - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetDelta(Double_t delta); Sets Delta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEtaDecay(Double_t ed); Sets EtaDecay - Eta *= EtaDecay at each epoch; (look at the constructor for the complete description; of learning methods and parameters). void SetTau(Double_t tau); Sets Tau - used in line search; (look at the constructor for the complete description; of learning methods and parameters). void SetReset(Int_t reset); Sets number of epochs between two resets of the; search direction to the steepest descent.; (look at the constructor for the complete description; of learning methods and parameters). void GetEntry(Int_t ) const; Load an entry into the network. void Train(Int_t nEpoch, Option_t* option = ""text"", Double_t minE = 0); Train the network.; nEpoch is the number of iterations.; option can contain:; - ""text"" (simple text output); - ""graph"" (evoluting graphical training curves); - ""update=X"" (step for the text/graph output update); - ""+"" will skip the randomisation and start from the previous values.; - ""current"" (draw in the current canvas); - ""minErrorTrain"" (stop when NN error on the training sample gets below minE; - ""minErrorTest"" (stop when NN error on the test sample gets below minE; All combinations are available. Double_t Result(Int_t event, Int_t index = 0) const; Computes the output for a given event.; Look at the output neuron designed by index. Double_t GetError(Int_t event) const; Error on the output for a given event. Double_t GetError(TMultiLayerPerceptron::EDataSet set) const; Error on the whole dataset. Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:24645,learn,learning,24645,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['learn'],['learning']
Usability,"arameters. [in]gcspecifies the GC to be changed ; [in]gvalspecifies the mask and the values to be set. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ ChangeProperties(). void TGWin32VirtualXProxy::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented from TVirtualX. ◆ ChangeProperty(). void TGWin32VirtualXProxy::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that might ask about the window properties ; [in]datathe property data ; [in]lenthe length of the specified data format . Reimplemented from TVirtualX. ◆ ChangeWindowAttributes(). void TGWin32VirtualXProxy::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ; The mask data member of ""attr"" specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented from TVirtualX. ◆ CheckEvent(). Bool_t TGWin32VirtualXProxy::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; Reimplemented from TVirtualX.; Definition at line 312 of file TGWin32VirtualXProxy.cxx. ◆ ClearArea()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:55085,simpl,simply,55085,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['simpl'],['simply']
Usability,"aration ; Definition at line 226 of file TGeoOpticalSurface.h. ◆ GetNode1(). TGeoNode const * TGeoBorderSurface::GetNode1 ; (; ); const. inline . Definition at line 221 of file TGeoOpticalSurface.h. ◆ GetNode2(). TGeoNode const * TGeoBorderSurface::GetNode2 ; (; ); const. inline . Definition at line 222 of file TGeoOpticalSurface.h. ◆ GetSurface(). TGeoOpticalSurface const * TGeoBorderSurface::GetSurface ; (; ); const. inline . Definition at line 220 of file TGeoOpticalSurface.h. ◆ IsA(). TClass * TGeoBorderSurface::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 226 of file TGeoOpticalSurface.h. ◆ Print(). void TGeoBorderSurface::Print ; (; Option_t * ; option = """"); const. overridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 370 of file TGeoOpticalSurface.cxx. ◆ Streamer(). void TGeoBorderSurface::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoBorderSurface::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 226 of file TGeoOpticalSurface.h. Member Data Documentation. ◆ fNode1. TGeoNode const* TGeoBorderSurface::fNode1 = nullptr. private . Definition at line 209 of file TGeoOpticalSurface.h. ◆ fNode2. TGeoNode const* TGeoBorderSurface::fNode2 = nullptr. private . Definition at line 210 of file TGeoOpticalSurface.h. ◆ fSurface. TGeoOpticalSurface const* TGeoBorderSurface::fSurface = nullptr. private . Definition at line 208 of file TGeoOpticalSurface.h. Libraries for TGeoBorderSurface:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoOpticalSurface.h; geom/geom/src/TGeoOpticalSurface.cxx. TGeoBorderSurface. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBorderSurface.html:14880,Guid,Guide,14880,doc/master/classTGeoBorderSurface.html,https://root.cern,https://root.cern/doc/master/classTGeoBorderSurface.html,1,['Guid'],['Guide']
Usability,"archHighRes ; Definition at line 115 of file TSpectrum2.cxx. ◆ SetResolution(). void TSpectrum2::SetResolution ; (; Double_t ; resolution = 1). NOT USED resolution: determines resolution of the neighboring peaks default value is 1 correspond to 3 sigma distance between peaks. ; Higher values allow higher resolution (smaller distance between peaks. May be set later through SetResolution. ; Definition at line 289 of file TSpectrum2.cxx. ◆ SmoothMarkov(). const char * TSpectrum2::SmoothMarkov ; (; Double_t ** ; source, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; averWindow . ). This function calculates smoothed spectrum from source spectrum based on Markov chain method. ; The result is placed in the array pointed by source pointer.; Function parameters:; source-pointer to the array of source spectrum; ssizex-x length of source; ssizey-y length of source; averWindow-width of averaging smoothing window. Smoothing; Goal: Suppression of statistical fluctuations the algorithm is based on discrete Markov chain, which has very simple invariant distribution ; \[; U_2 = \frac{p_{1.2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2 U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1} ... U_2 U_1; \]. \(U_1\) being defined from the normalization condition \( \sum_{i=1}^{n} U_i = 1\) n is the length of the smoothed spectrum and ; \[; p_{i,i\pm1} = A_i \sum_{k=1}^{m} exp\left[\frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; \]. is the probability of the change of the peak position from channel i to the channel i+1. \(A_i\) is the normalization constant so that \( p_{i,i-1}+p_{i,i+1}=1\) and m is a width of smoothing window. We have extended this algorithm to two dimensions.; Reference:; [1] Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Example 4 - Smooth.C; ; #include <TSpectrum2.h>; ; void Smooth() {; Int_t i, j;; const Int_t nbinsx = 256;; const Int_t nbinsy = 256;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbinsx;; Double_t ymin = 0;; D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2.html:46737,simpl,simple,46737,doc/master/classTSpectrum2.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html,1,['simpl'],['simple']
Usability,"architecture class ;  ►CTCpuBufferTCpuBuffer ;  CTDestructor;  CTCpuMatrixThe TCpuMatrix class ;  CTCudaThe TCuda architecture class ;  ►CTCudaDeviceBufferTCudaDeviceBuffer ;  CTDestructor;  CTCudaDeviceReferenceTCudaDeviceReference ;  ►CTCudaHostBufferTCudaHostBuffer ;  CTDestructor;  CTCudaMatrixTCudaMatrix Class ;  CTDataLoaderTDataLoader ;  CTDataLoader< AData, TReference< AReal > >;  CTDeviceTDevice ;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTSharedLayerLayer class width shared weight and bias layers ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassificationClass to perform two class classification ;  CClassificationResultClass to save the results of the classifier ;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to pe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:76223,simpl,simple,76223,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['simpl'],['simple']
Usability,"archive request for the query specified by ref. ;  ; Int_t Archive (Int_t query, const char *url);  Send archive request for the qry-th query in fQueries. ;  ; void Browse (TBrowser *b) override;  Build the PROOF's structure in the browser. ;  ; virtual Bool_t CancelStagingDataSet (const char *dataset);  Cancels a dataset staging request. ;  ; void cd (Int_t id=-1);  Set session with 'id' the default one. ;  ; Int_t CleanupSession (const char *sessiontag);  Send cleanup request for the session specified by tag. ;  ; virtual void ClearCache (const char *file=0);  Remove file from all file caches. ;  ; void ClearData (UInt_t what=kUnregistered, const char *dsname=0);  Remove files for the data directory. ;  ; virtual void ClearDataSetCache (const char *dataset=0);  Clear the content of the dataset cache, if any (matching 'dataset', if defined). ;  ; void ClearFeedback ();  Clear feedback list. ;  ; void ClearInput ();  Clear input object list. ;  ; void ClearInputData (const char *name);  Remove obj 'name' form the input data list;. ;  ; void ClearInputData (TObject *obj=0);  Remove obj form the input data list; if obj is null (default), clear the input data info. ;  ; Int_t ClearPackage (const char *package);  Remove a specific package. ;  ; Int_t ClearPackages ();  Remove all packages. ;  ; void Close (Option_t *option="""");  Close all open slave servers. ;  ; void CloseProgressDialog ();  Close progress dialog. ;  ; TDrawFeedback * CreateDrawFeedback ();  Draw feedback creation proxy. ;  ; void DataSetStatus (const char *msg, Bool_t status, Int_t done, Int_t total);  Send dataset preparation status. ;  ; Int_t DeactivateWorker (const char *ord, Bool_t save=kTRUE);  Remove the worker identified by the ordinal number 'ord' from the the active list. ;  ; void DeleteDrawFeedback (TDrawFeedback *f);  Delete draw feedback object. ;  ; void DeleteParameters (const char *wildcard);  Delete the input list parameters specified by a wildcard (e.g. ;  ; void Detach (Option_t *op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:4659,Clear,ClearInputData,4659,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['Clear'],['ClearInputData']
Usability,"archy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » POSTSCRIPT; » TTeXDump. class TTeXDump: public TVirtualPS. TTeXDump: Graphics interface to TeX; This class allow to generate PGF/TikZ vector graphics output; which can be included in TeX and LaTeX documents. PGF is a TeX macro package for generating graphics. It is platform; and format-independent and works together with the most important TeX; backend drivers, including pdftex and dvips. It comes with a; user-friendly syntax layer called TikZ. To generate a such file it is enough to do:. gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");. Then, the generated file (hpx.tex) can be included in a; LaTeX document (simple.tex) in the following way:. \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}. Note the three directives needed at the top of the LaTeX file:. \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}. Then including the picture in the document is done with the; \input<\tt> directive.; The command pdflatex simple.tex will generate the; corresponding pdf file simple.pdf.; . Function Members (Methods); public:. virtual~TTeXDump(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidCellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); virtual voidCellArrayEnd(); virtual voidCellArrayFill(Int_t r, Int_t g, Int_t b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTeXDump.html:1042,simpl,simple,1042,root/html602/TTeXDump.html,https://root.cern,https://root.cern/root/html602/TTeXDump.html,1,['simpl'],['simple']
Usability,"are bins but no axis ;  ; Bool_t HasUnderflow (int axis) const;  check whether an axis has an underflow bin ;  ; virtual Bool_t IsBinFactorGlobal (void) const;  check whether there is only a global scaling factor for this node ;  ; void PrintStream (std::ostream &out, Int_t indent=0, int debug=0) const;  print some information about this binning tree ;  ; void SetBinFactorFunction (Double_t normalisation, TF1 *userFunc=nullptr);  set normalisation factor and function which are used in calls to GetBinFactor() ;  ; void SetBinMapEntry (Int_t *binMap, Int_t globalBin, Int_t destBin) const;  set one entry in a bin map ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldBinningXML.html:10431,Clear,Clear,10431,doc/master/classTUnfoldBinningXML.html,https://root.cern,https://root.cern/doc/master/classTUnfoldBinningXML.html,1,['Clear'],['Clear']
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecExtraEvent(); TRecExtraEvent(const TRecExtraEvent&); ~TRecExtraEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMEN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecExtraEvent.html:2498,resume,resume,2498,root/html528/TRecExtraEvent.html,https://root.cern,https://root.cern/root/html528/TRecExtraEvent.html,8,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecGuiEvent(); TRecGuiEvent(const TRecGuiEvent&); ~TRecGuiEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Event_t*CreateEvent(TRecGuiEvent* ge); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecGuiEvent.html:2518,resume,resume,2518,root/html528/TRecGuiEvent.html,https://root.cern,https://root.cern/root/html528/TRecGuiEvent.html,8,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecWinPair(const TRecWinPair&); TRecWinPair(Window_t key, Window_t value); ~TRecWinPair(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecWinPair.html:2513,resume,resume,2513,root/html528/TRecWinPair.html,https://root.cern,https://root.cern/root/html528/TRecWinPair.html,8,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecorder(); TRecorder(const TRecorder&); TRecorder(const char* filename, Option_t* option = ""READ""); virtual~TRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorder.html:2507,resume,resume,2507,root/html528/TRecorder.html,https://root.cern,https://root.cern/root/html528/TRecorder.html,6,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecorder(); TRecorder(const char* filename, Option_t* option = ""READ""); virtual~TRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorder.html:2507,resume,resume,2507,root/html534/TRecorder.html,https://root.cern,https://root.cern/root/html534/TRecorder.html,2,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecExtraEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecExtraEvent.html:2548,resume,resume,2548,root/html602/TRecExtraEvent.html,https://root.cern,https://root.cern/root/html602/TRecExtraEvent.html,4,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecGuiEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Event_t*CreateEvent(TRecGuiEvent* ge); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecGuiEvent.html:2542,resume,resume,2542,root/html602/TRecGuiEvent.html,https://root.cern,https://root.cern/root/html602/TRecGuiEvent.html,4,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecWinPair(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecWinPair.html:2537,resume,resume,2537,root/html602/TRecWinPair.html,https://root.cern,https://root.cern/root/html602/TRecWinPair.html,4,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorder.html:2531,resume,resume,2531,root/html602/TRecorder.html,https://root.cern,https://root.cern/root/html602/TRecorder.html,4,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecEvent.html:2531,resume,resume,2531,root/html602/TRecEvent.html,https://root.cern,https://root.cern/root/html602/TRecEvent.html,4,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecorderState(); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char*); virtual voidListGui(const char*); TRecorderState&operator=(const TRecorderState&); virtual voidPause(TRecorder*); virtual voidPrevCanvases(const char*, Option_t*); virtual Bool_tReplay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder*); virtual voidResume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStart(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidStop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorderState.html:2530,resume,resume,2530,root/html602/TRecorderState.html,https://root.cern,https://root.cern/root/html602/TRecorderState.html,4,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecorderState(); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char*); virtual voidListGui(const char*); TRecorderState&operator=(const TRecorderState&); virtual voidPause(TRecorder*); virtual voidPrevCanvases(const char*, Option_t*); virtual Bool_tReplay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder*); virtual voidResume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp); virtual voidStart(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidStop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorderState.html:2480,resume,resume,2480,root/html528/TRecorderState.html,https://root.cern,https://root.cern/root/html528/TRecorderState.html,6,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecorderState(); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char*); virtual voidListGui(const char*); TRecorderState&operator=(const TRecorderState&); virtual voidPause(TRecorder*); virtual voidPrevCanvases(const char*, Option_t*); virtual Bool_tReplay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder*); virtual voidResume(TRecorder*); virtual voidShowMembers(TMemberInspector&); virtual voidStart(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidStop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_Str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorderState.html:2482,resume,resume,2482,root/html534/TRecorderState.html,https://root.cern,https://root.cern/root/html534/TRecorderState.html,2,"['pause', 'resume']","['paused', 'resume']"
Usability,"are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. ~TRecEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecEvent.html:2481,resume,resume,2481,root/html528/TRecEvent.html,https://root.cern,https://root.cern/root/html528/TRecEvent.html,8,"['pause', 'resume']","['paused', 'resume']"
Usability,"are visible, otherwise return false. ;  ; TStructNode * GetNodePtr () const;  Returns top node pointer. ;  ; void GLWidgetProcessedEventSlot (Event_t *event);  Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. ;  ; void LevelDistValueSetSlot (Long_t dist);  Emmited when user changes distance between levels. ;  ; void MouseOverSlot (TGLPhysicalShape *shape);  MouseOver slot. ;  ; void RedoButtonSlot ();  Activated when user click Redo button. Repeat last Undo action. ;  ; void ResetButtonSlot ();  Resets camera. ;  ; void ScaleByChangedSlot ();  Activated when user press radio button. ;  ; void SetLinksVisibility (Bool_t val);  Sets links visibility to ""visible"". ;  ; void SetNodePtr (TStructNode *val);  Sets top node pointer and updates view. ;  ; void SetPointerButtonSlot ();  Sets pointer given in fPointerTestEntry to the main pointer. ;  ; void ShowLinksToggled (Bool_t on);  Changes links visibility and refresh view. ;  ; void UndoButtonSlot ();  UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. ;  ; void Update (Bool_t resetCamera=false);  Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. ;  ; void UpdateButtonSlot ();  Update button slot. Updates scene. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewerGUI.html:2412,Undo,UndoButtonSlot,2412,doc/master/classTStructViewerGUI.html,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html,2,['Undo'],"['UndoButton', 'UndoButtonSlot']"
Usability,"ared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chisquare/(ndf-1)) as it is done when fitting a TGraph with no point errors.; Excluding points; You can use TF1::RejectPoint inside your fitting function to exclude some points within a certain range from the fit. See the tutorial fit/fitExclude.C.; Warning when using the option ""0""; When selecting the option ""0"", the fitted function is added to the list of functions of the histogram, but it is not drawn when the histogram is drawn. You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; h.Draw(); // function is not drawn; h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; h.Draw(); // function is visible again; TF1::kNotDraw@ kNotDrawDefinition TF1.h:346. Definition at line 4262 of file TH1.cxx. ◆ FitOptionsMake(). Int_t TH1::FitOptionsMake ; (; Option_t * ; option, . Foption_t & ; Foption . ). static . Decode string choptin and fill fitOption structure. ; Definition at line 4652 of file TH1.cxx. ◆ FitPanel(). void TH1::FitPanel ; (; ). virtual . Display a panel with all histogram fit options. ; See class TFitPanel for example ; Definition at line 4284 of file TH1.cxx. ◆ GetAsymmetry(). TH1 * TH1::GetAsymmetry ; (; TH1 * ; h2, . Double_t ; c2 = 1, . Double_t ; dc2 = 0 . ). Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined as: ; Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this; works for 1D, 2D, etc. hist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:143720,undo,undo,143720,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['undo'],['undo']
Usability,"ared when connection is closed. ; Reimplemented from ROOT::Experimental::Internal::RVirtualCanvasPainter.; Definition at line 757 of file RCanvasPainter.cxx. Member Data Documentation. ◆ fCanvas. RCanvas& ROOT::Experimental::RCanvasPainter::fCanvas. private . ! Canvas we are painting, *this will be owned by canvas ; Definition at line 109 of file RCanvasPainter.cxx. ◆ fCmds. std::list<std::shared_ptr<WebCommand> > ROOT::Experimental::RCanvasPainter::fCmds. private . ! list of submitted commands ; Definition at line 114 of file RCanvasPainter.cxx. ◆ fCmdsCnt. uint64_t ROOT::Experimental::RCanvasPainter::fCmdsCnt {0}. private . ! commands counter ; Definition at line 115 of file RCanvasPainter.cxx. ◆ fHelpHandles. std::vector<std::unique_ptr<ROOT::RWebDisplayHandle> > ROOT::Experimental::RCanvasPainter::fHelpHandles. private . ! array of handles for help widgets ; Definition at line 122 of file RCanvasPainter.cxx. ◆ fJsonComp. int ROOT::Experimental::RCanvasPainter::fJsonComp {23}. private . ! json compression for data send to client ; Definition at line 120 of file RCanvasPainter.cxx. ◆ fSnapshotDelivered. uint64_t ROOT::Experimental::RCanvasPainter::fSnapshotDelivered {0}. private . ! minimal version delivered to all connections ; Definition at line 117 of file RCanvasPainter.cxx. ◆ fUpdatesLst. std::list<WebUpdate> ROOT::Experimental::RCanvasPainter::fUpdatesLst. private . ! list of callbacks for canvas update ; Definition at line 118 of file RCanvasPainter.cxx. ◆ fWebConn. std::list<WebConn> ROOT::Experimental::RCanvasPainter::fWebConn. private . !< configured display ; ! connections list ; Definition at line 113 of file RCanvasPainter.cxx. ◆ fWindow. std::shared_ptr<ROOT::RWebWindow> ROOT::Experimental::RCanvasPainter::fWindow. private . Definition at line 111 of file RCanvasPainter.cxx. gui/canvaspainter/src/RCanvasPainter.cxx. ROOTExperimentalRCanvasPainter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:13438,Guid,Guide,13438,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,1,['Guid'],['Guide']
Usability,"ared_ptr< RFileDialog > Embed(const std::shared_ptr< RWebWindow > &window, unsigned connid, const std::string &args)Create dialog instance to use as embedded dialog inside other widget Embedded dialog started on the c...Definition RFileDialog.cxx:438; ROOT::RFileDialog::SetCallbackvoid SetCallback(RFileDialogCallback_t callback)Assign callback.Definition RFileDialog.cxx:102; ROOT::RFileDialog::fBrowsableRBrowserData fBrowsable! central browsing elementDefinition RFileDialog.hxx:55; ROOT::RFileDialog::fTitlestd::string fTitle! title, when not specified default will be usedDefinition RFileDialog.hxx:54; ROOT::RFileDialog::IsCompletedbool IsCompleted() constDefinition RFileDialog.hxx:111; ROOT::RFileDialog::SendInitMsgvoid SendInitMsg(unsigned connid)Sends initial message to the client.Definition RFileDialog.cxx:230; ROOT::RFileDialog::GetTypeconst EDialogTypes & GetType() constDefinition RFileDialog.hxx:86; ROOT::RFileDialog::SetWorkingPathvoid SetWorkingPath(const std::string &)Change current working path of file dialog If dialog already shown, change will be immediately applie...Definition RFileDialog.cxx:338; ROOT::RFileDialog::~RFileDialogvirtual ~RFileDialog()destructorDefinition RFileDialog.cxx:91; ROOT::RFileDialog::fSelectstd::string fSelect! result of file selectionDefinition RFileDialog.hxx:63; ROOT::RWebDisplayArgsHolds different arguments for starting browser with RWebDisplayHandle::Display() method.Definition RWebDisplayArgs.hxx:33; ROOT::MacOSX::DetailsDefinition TMacOSXSystem.h:30; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RFileDialogCallback_tstd::function< void(const std::string &)> RFileDialogCallback_tfunction signature for file dialog call-backs argument is selected file nameDefinition RFileDialog.hxx:36. guibrowserv7incROOTRFileDialog.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RFileDialog_8hxx_source.html:11743,Guid,Guide,11743,doc/master/RFileDialog_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RFileDialog_8hxx_source.html,1,['Guid'],['Guide']
Usability,"arent branch.; Int_tTBranch::fReadBasket! Current basket number when reading; Long64_tTBranch::fReadEntry! Current entry number when reading; G__p2memfuncTBranch::fReadLeaves! Pointer to the ReadLeaves implementation to use. ; TRefTable*fRefTablepointer to the TRefTable; Bool_tTBranch::fSkipZip! After being read, the buffer will not be unziped.; Int_tTBranch::fSplitLevelBranch split level; TStringTNamed::fTitleobject title; Long64_tTBranch::fTotBytesTotal number of bytes in all leaves before compression; TTree*TBranch::fTree! Pointer to Tree header; Int_tTBranch::fWriteBasketLast basket number written; Long64_tTBranch::fZipBytesTotal number of bytes in all leaves after compression; static Int_tTBranch::fgCount! branch counter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchRef(); Default constructor. TBranchRef(TTree* tree); Main constructor called by TTree::BranchRef. ~TBranchRef(); Typical destructor. void Clear(Option_t* option = """"); Clear entries in the TRefTable. Int_t Fill(); Fill the branch basket with the referenced objects parent numbers. void FillLeaves(TBuffer& b); This function called by TBranch::Fill overloads TBranch::FillLeaves. Bool_t Notify(); This function is called by TRefTable::Notify, itself called by; TRef::GetObject.; The function reads the branch containing the object referenced; by the TRef. void Print(Option_t* option = """") const; Print the TRefTable branch. void ReadLeavesImpl(TBuffer& b); This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. void Reset(Option_t* option = """"); Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. Int_t SetParent(const TObject* obj, Int_t branchID); -- Set the current parent branch. This function is called by TBranchElement::GetEntry(); and TBranchElement::Fill() when reading or writing; branches that may contain referenced objects. TRefTable * GetRefTable() const; {return fRefTable;}. void SetReadEntry(Long6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranchRef.html:13216,Clear,Clear,13216,root/html528/TBranchRef.html,https://root.cern,https://root.cern/root/html528/TBranchRef.html,2,['Clear'],['Clear']
Usability,"arent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateElements ();  Annihilate elements. ;  ; Bool_t ApplyVizTag (const TString &tag, const TString &fallback_tag="""");  Set the VizTag, find model-element from the VizDB and copy visualization-parameters from it. ;  ; List_i BeginChildren ();  ; List_ci BeginChildren () const;  ; List_i BeginParents ();  ; List_ci BeginParents () const;  ; virtual Bool_t CanEditMainTrans () const;  ; virtual void CheckReferenceCount (const TEveException &eh=""TEveElement::CheckReferenceCount "");  Check external references to this and eventually auto-destruct the render-element. ;  ; virtual void ClearStamps ();  ; virtual void CloneChildrenRecurse (TEveElement *dest, Int_t level=0) const;  Clone children and attach them to the dest element. ;  ; virtual TEveElement * CloneElement () const;  Clone the element via copy constructor. ;  ; virtual TEveElement * CloneElementRecurse (Int_t level=0) const;  Clone elements and recurse 'level' deep over children. ;  ; virtual void CollectSceneParents (List_t &scenes);  Collect all parents of class TEveScene. ;  ; virtual void CollectSceneParentsFromChildren (List_t &scenes, TEveElement *parent);  Collect scene-parents from all children. ;  ; virtual void CopyVizParams (const TEveElement *el);  Copy visualization parameters from element el. ;  ; virtual void CopyVizParamsFromDB ();  Copy visualization parameters from the model-element fVizModel. ;  ; void CSCApplyMainColorToAllChildren ();  ; void CSCApplyMainColorToMatchingChildren ();  ; void CSCApplyMainTransparencyToAllChildren ();  ; void CSCApplyMainTransparencyToMatchingChildren ();  ; void CSCImplySelectAllChildren ();  ; void CSCTakeAnyParen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoNode.html:4647,Clear,ClearStamps,4647,doc/master/classTEveGeoNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoNode.html,2,['Clear'],['ClearStamps']
Usability,"arge:%ld bytes. Maximum is:%ld bytes"",; 672 ""Iterators for collection"",; 673 fClass->GetName(),; 674 (Long_t)info.fIterSize,; 675 (Long_t)sizeof(e.fIterator));; 676 }; 677 fReadMemberWise = new TObjArray(TCollection::kInitCapacity,-1);; 678 fConversionReadMemberWise = 0;; 679 fWriteMemberWise = 0;; 680 fFunctionCreateIterators = info.fCreateIterators;; 681 fFunctionCopyIterator = info.fCopyIterator;; 682 fFunctionNextIterator = info.fNext;; 683 fFunctionDeleteIterator = info.fDeleteSingleIterator;; 684 fFunctionDeleteTwoIterators = info.fDeleteTwoIterators;; 685}; 686 ; 687namespace {; 688 template <class vec>; 689 void clearVector(vec& v); 690 {; 691 // Clear out the proxies.; 692 ; 693 for(typename vec::iterator i=v.begin(); i != v.end(); ++i) {; 694 typename vec::value_type e = *i;; 695 if ( e ) {; 696 delete e;; 697 }; 698 }; 699 v.clear();; 700 }; 701}; 702////////////////////////////////////////////////////////////////////////////////; 703/// Standard destructor; 704 ; 705TGenCollectionProxy::~TGenCollectionProxy(); 706{; 707 clearVector(fProxyList);; 708 clearVector(fProxyKept);; 709 clearVector(fStaged);; 710 ; 711 if ( fValue.load() ) delete fValue.load();; 712 if ( fVal ) delete fVal;; 713 if ( fKey ) delete fKey;; 714 ; 715 delete fReadMemberWise;; 716 if (fConversionReadMemberWise) {; 717 std::map<std::string, TObjArray*>::iterator it;; 718 std::map<std::string, TObjArray*>::iterator end = fConversionReadMemberWise->end();; 719 for( it = fConversionReadMemberWise->begin(); it != end; ++it ) {; 720 delete it->second;; 721 }; 722 delete fConversionReadMemberWise;; 723 fConversionReadMemberWise = 0;; 724 }; 725 delete fWriteMemberWise;; 726}; 727 ; 728////////////////////////////////////////////////////////////////////////////////; 729/// Virtual copy constructor; 730 ; 731TVirtualCollectionProxy* TGenCollectionProxy::Generate() const; 732{; 733 if ( !fValue.load(std::memory_order_relaxed) ) Initialize(kFALSE);; 734 ; 735 if( fPointers ); 736 return new TGen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:21357,clear,clear,21357,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,4,['clear'],"['clear', 'clearVector']"
Usability,"arguments. RooPlot* plotOn(RooPlot *frame, PlotOpt o); Plotting engine function for internal use. Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted; function that occur in the previously plotted dataset are projected via partial integration,; otherwise no projections are performed. Optionally, certain projections can be performed; by summing over the values present in a provided dataset ('projData'), to correctly; project out data dependents that are not properly described by the PDF (e.g. per-event errors). The functions value can be multiplied with an optional scale factor. The interpretation; of the scale factor is unique for generic real functions, for PDFs there are various interpretations; possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details). The default projection behaviour can be overriden by supplying an optional set of dependents; to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface; to modify the default projection behavour. RooPlot* plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0) const; OBSOLETE -- RETAINED FOR BACKWARD COMPATIBILITY. Use the plotOn(frame,Slice(...)) instead. RooPlot* plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsReal::PlotOpt o) const; Plotting engine for asymmetries. Implements the functionality if plotOn(frame,Asymmetry(...))). Plot asymmetry of ourselves, defined as. asym = f(asymCat=-1) - f(asymCat=+1) / ( f(asymCat=-1) + f(asymCat=+1) ). on frame. If frame contains a histogram, all dimensions of the plotted; asymmetry function that occur in the previously plotted dataset are projected via partial integration.; Otherwise no projections are performed,. The asymmetry function can be multiplied with an optional scale factor. The default projection; behaviour can be o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:50959,intuit,intuitive,50959,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['intuit'],['intuitive']
Usability,"arguments; 389/// - nargs : number of arguments; 390 ; 391Int_t TFumili::ExecuteCommand(const char *command, Double_t *args, Int_t nargs){; 392 TString comand = command;; 393 static TString clower = ""abcdefghijklmnopqrstuvwxyz"";; 394 static TString cupper = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";; 395 const Int_t nntot = 40;; 396 const char *cname[nntot] = {; 397 ""MINImize "", // 0 checked; 398 ""SEEk "", // 1 none; 399 ""SIMplex "", // 2 checked same as 0; 400 ""MIGrad "", // 3 checked same as 0; 401 ""MINOs "", // 4 none; 402 ""SET xxx "", // 5 lot of stuff; 403 ""SHOw xxx "", // 6 -----------; 404 ""TOP of pag"", // 7 .; 405 ""fiX "", // 8 .; 406 ""REStore "", // 9 .; 407 ""RELease "", // 10 .; 408 ""SCAn "", // 11 not yet implemented; 409 ""CONtour "", // 12 not yet implemented; 410 ""HESse "", // 13 not yet implemented; 411 ""SAVe "", // 14 obsolete; 412 ""IMProve "", // 15 not yet implemented; 413 ""CALl fcn "", // 16 .; 414 ""STAndard "", // 17 .; 415 ""END "", // 18 .; 416 ""EXIt "", // 19 .; 417 ""RETurn "", // 20 .; 418 ""CLEar "", // 21 .; 419 ""HELP "", // 22 not yet implemented; 420 ""MNContour "", // 23 not yet implemented; 421 ""STOp "", // 24 .; 422 ""JUMp "", // 25 not yet implemented; 423 "" "", //; 424 "" "", //; 425 ""FUMili "", // 28 checked same as 0; 426 "" "", //; 427 "" "", //; 428 "" "", //; 429 "" "", //; 430 ""COVARIANCE"", // 33; 431 ""PRINTOUT "", // 34; 432 ""GRADIENT "", // 35; 433 ""MATOUT "", // 36; 434 ""ERROR DEF "", // 37; 435 ""LIMITS "", // 38; 436 ""PUNCH ""}; // 39; 437 ; 438 ; 439 fCword = comand;; 440 fCword.ToUpper();; 441 if (nargs<=0) fCmPar[0] = 0;; 442 Int_t i;; 443 for(i=0;i<fMaxParam;i++) {; 444 if(i<nargs) fCmPar[i] = args[i];; 445 }; 446 /*; 447 fNmaxIter = int(fCmPar[0]);; 448 if (fNmaxIter <= 0) {; 449 fNmaxIter = fNpar*10 + 20 + fNpar*M*5;; 450 }; 451 fEPS = fCmPar[1];; 452 */; 453 //*-*- look for command in list CNAME . . . . . . . . . .; 454 TString ctemp = fCword(0,3);; 455 Int_t ind;; 456 for (ind = 0; ind < nntot; ++ind) {; 457 if (strncmp(ctemp.Data(),cname[ind],3) == 0) break;; 458 }; 459 if (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:13302,CLEar,CLEar,13302,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['CLEar'],['CLEar']
Usability,"ari, or Opera instead. Classes; struct  TInterpreter::CallFuncIFacePtr_t;  ; struct  ROOT::Internal::InterpreterMutexRegistrationRAII;  ; class  TInterpreter::SuspendAutoLoadingRAII;  ; class  TInterpreter::SuspendAutoParsing;  ; class  TInterpreter;  This class defines an abstract interface to a generic command line interpreter. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define gInterpreter   (TInterpreter::Instance());  ; #define R__LOCKGUARD_CLING(mutex)   ::ROOT::Internal::InterpreterMutexRegistrationRAII _R__UNIQUE_(R__guard)(mutex); { };  . Typedefs; typedef TInterpreter * CreateInterpreter_t(void *shlibHandle, const char *argv[]);  ; typedef void * DestroyInterpreter_t(TInterpreter *);  . Variables; R__EXTERN TInterpreter * gCling;  ; R__EXTERN TVirtualMutex * gInterpreterMutex;  . Macro Definition Documentation. ◆ gInterpreter. #define gInterpreter   (TInterpreter::Instance()). Definition at line 573 of file TInterpreter.h. ◆ R__LOCKGUARD_CLING. #define R__LOCKGUARD_CLING; (;  ; mutex);    ::ROOT::Internal::InterpreterMutexRegistrationRAII _R__UNIQUE_(R__guard)(mutex); { }. Definition at line 48 of file TInterpreter.h. Typedef Documentation. ◆ CreateInterpreter_t. typedef TInterpreter * CreateInterpreter_t(void *shlibHandle, const char *argv[]). Definition at line 570 of file TInterpreter.h. ◆ DestroyInterpreter_t. typedef void * DestroyInterpreter_t(TInterpreter *). Definition at line 571 of file TInterpreter.h. Variable Documentation. ◆ gCling. R__EXTERN TInterpreter* gCling. Definition at line 574 of file TInterpreter.h. ◆ gInterpreterMutex. R__EXTERN TVirtualMutex* gInterpreterMutex. Definition at line 46 of file TInterpreter.h. coremetaincTInterpreter.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TInterpreter_8h.html:2637,Guid,Guide,2637,doc/master/TInterpreter_8h.html,https://root.cern,https://root.cern/doc/master/TInterpreter_8h.html,1,['Guid'],['Guide']
Usability,"ariables of the model, stored in the following way: (x0(0), x1(0), x2(0), x3(0), x0(1), x1(1), x2(1), x3(1),... ; Definition at line 583 of file TLinearFitter.cxx. ◆ Chisquare() [1/2]. void TLinearFitter::Chisquare ; (; ). virtual . Calculates the chisquare. ; Definition at line 797 of file TLinearFitter.cxx. ◆ Chisquare() [2/2]. Double_t TLinearFitter::Chisquare ; (; Int_t ; , . Double_t * ;  . ); const. inlineoverridevirtual . Implements TVirtualFitter.; Definition at line 269 of file TLinearFitter.h. ◆ Class(). static TClass * TLinearFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TLinearFitter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TLinearFitter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 277 of file TLinearFitter.h. ◆ Clear(). void TLinearFitter::Clear ; (; Option_t * ; option = """"). overridevirtual . Clears everything. Used in TH1::Fit and TGraph::Fit(). ; Implements TVirtualFitter.; Definition at line 731 of file TLinearFitter.cxx. ◆ ClearPoints(). void TLinearFitter::ClearPoints ; (; ). virtual . To be used when different sets of points are fitted with the same formula. ; Definition at line 771 of file TLinearFitter.cxx. ◆ ComputeTValues(). void TLinearFitter::ComputeTValues ; (; ). private . Computes parameters' t-values and significance. ; Definition at line 862 of file TLinearFitter.cxx. ◆ CreateSubset(). void TLinearFitter::CreateSubset ; (; Int_t ; ntotal, . Int_t ; h, . Int_t * ; index . ). private . Creates a p-subset to start ntotal - total number of points from which the subset is chosen. ; Definition at line 2291 of file TLinearFitter.cxx. ◆ CStep(). Double_t TLinearFitter::CStep ; (; Int_t ; step, . Int_t ; h, . Double_t * ; residuals, . Int_t * ; index, . Int_t * ; subdat, . Int_t ; start, . Int_t ; end . ). private . The CStep procedure, as described in the article. ; Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearFitter.html:36141,Clear,Clears,36141,doc/master/classTLinearFitter.html,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html,1,['Clear'],['Clears']
Usability,"arious statistical distributions (continuous and discrete). ; Whenever possible the conventions followed are those of the CRC Concise Encyclopedia of Mathematics, Second Edition (or Mathworld). By convention the distributions are centered around 0, so for example in the case of a Gaussian there is no parameter mu. The user must calculate the shift themselves if they wish.; MathCore provides the majority of the probability density functions, of the cumulative distributions and of the quantiles (inverses of the cumulatives). Additional distributions are also provided by the MathMore library. . Modules;  Probability Density Functions (PDF);  Probability density functions of various statistical distributions (continuous and discrete). ;  ;  Cumulative Distribution Functions (CDF);  Cumulative distribution functions of various distributions. ;  ;  Statistical functions from truncated distributions;  Statistical functions for the truncated distributions. ;  ;  Quantile Functions;  Inverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions. ;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Classes; class  ROOT::Math::Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  ROOT::Math::VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  ROOT::Math::VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  ROOT::Math::VavilovFast;  Class describing a Vavilov distribution. More...;  . ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/group__StatFunc.html:2225,Guid,Guide,2225,doc/v632/group__StatFunc.html,https://root.cern,https://root.cern/doc/v632/group__StatFunc.html,1,['Guid'],['Guide']
Usability,"arity vector-matrix product ;  SMatrix Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  VecOps;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.e ;  PROOF benchmark utilitiesSet of utilities to benchmark a PROOF facility ;  XProofD client LibraryThe XProofD client library, libProofx, contain the classes providing the client to interact with the XRootD-based xproofd daemon ;  TMVAThe Multi Variate Analysis package ;  RooFitRooFit toolkit classes ;  RooFitCoreCore RooFit classes ;  RooStatsRooStats toolkit classes ;  DataFrameROOT's RDataFrame allows to analyse data stored in TTrees with a high level interface ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros helping to learn ROOT by example ;  Tutorials specific to Mac/CocoaVarious examples showing graphics done with the Mac graphics system Cocoa. These examples run only on Mac/Os ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Data Frame tutorialsThese examples show the functionalities of the RDataFrame class ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showing the FITS file interface ;  FOAM tutorialsExamples showing how to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/modules.html:8968,learn,learn,8968,doc/v614/modules.html,https://root.cern,https://root.cern/doc/v614/modules.html,1,['learn'],['learn']
Usability,"ark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGeometryTGeometry description.Definition TGeometry.h:39; TGeometry::Drawvoid Draw(Option_t *option="""") overrideDraw this Geometry.Definition TGeometry.cxx:254; TGeometry::SetBombvirtual void SetBomb(Float_t bomb=1.4)Definition TGeometry.h:102; TGeometry::FindObjectTObject * FindObject(const char *name) const overrideSearch object identified by name in the geometry tree.Definition TGeometry.cxx:273; TGeometry::cdvirtual void cd(const char *path=nullptr)Change Current Geometry to this.Definition TGeometry.cxx:246; TGeometry::GetNodeTNode * GetNode(const char *name) constReturn pointer to node with name in the geometry tree.Definition TGeometry.cxx:345; TNodeTNode description.Definition TNode.h:33; TNode::Drawvoid Draw(Option_t *option="""") overrideDraw Referenced node with current parameters.Definition TNode.cxx:322; TObject::IsZombieR__ALWAYS_INLINE Bool_t IsZombie() constDefinition TObject.h:153; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; c1return c1Definition legend1.C:41; na49viewDefinition na49view.py:1; AuthorRene Brun ; Definition in file na49view.C. tutorialsgeomna49view.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/na49view_8C.html:3858,Guid,Guide,3858,doc/master/na49view_8C.html,https://root.cern,https://root.cern/doc/master/na49view_8C.html,1,['Guid'],['Guide']
Usability,"arker Color) ;  tprofile2polyRealistic.C;  tprofile2polyRealisticModuleError.C;  transpad.C Example of a canvas showing two histograms with different scales ;  twoscales.C Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  xyplot.C Example showing how to produce a plot with an orthogonal axis system centered at (0,0) ;  ► histfactory;  example.C;  example.py;  makeExample.C;  makeQuickModel.py;  ModifyInterpolation.C;  ► html;  MakeTutorials.C;  ► http;  custom.CThis program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons ;  histfitserver.CThis program demonstrates simultaneous update of histogram and fitted function ;  httpaccess.CThis program demonstrates access control to the THttpServer with digest methods ;  httpcontrol.CThis program demonstrates simple application control via THttpServer Two histogram are filled within endless loop ;  httpserver.CThis program creates : ;  httptextlog.CThis macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser ;  httptextlog.js;  ► image;  galaxy_image.C Importing an image and manipulating it ;  hist2image.C Create an image from a 2-D histogram and manipulate it ;  hsumanim.C This script is a slightly modified version of hsum.C ;  image2hist.C Create a 2-D histogram from an image ;  img2pad.C Display image in canvas and pad ;  imgconv.C Open rose512.jpg and save it in the following formats: .png, .gif, .xpm and tiff ;  pad2png.C Create a canvas and save as png ;  rose_image.C Display image in a new canvas and pad ;  trans_graph.C Demonstrates how to access and manipulate ARGB pixel values of an image +.. ;  ► io;  copyFiles.C Example of script showing how to copy all",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:126719,simpl,simple,126719,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['simpl'],['simple']
Usability,"arkerColorAlpha(Color_t mcolor, Float_t malpha)TAttMarkervirtual; SetMarkerSize(Size_t msize=1)TAttMarkerinlinevirtual; SetMarkerStyle(Style_t mstyle=1)TAttMarkerinlinevirtual; SetMaxMarkerSize(Double_t max)TScatterinline; SetMinMarkerSize(Double_t min)TScatterinline; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTScattervirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TScatterinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttMarker()TAttMarker; TAttMarker(Color_t color, Style_t style, Size_t msize)TAttMarker; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TScatter()TScatter; TScatter(Int_t n)TScatter; TScatter(Int_t n, const Double_t *x, const Double_t *y, const Double_t *col=nullptr, const Double_t *size=nullptr)TScatter; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual; ~TScatter() overrideTScatter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTScatter-members.html:9390,Guid,Guide,9390,doc/master/classTScatter-members.html,https://root.cern,https://root.cern/doc/master/classTScatter-members.html,1,['Guid'],['Guide']
Usability,"arkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gROOT#define gROOTDefinition TROOT.h:406; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TAttFill::GetFillColorvirtual Color_t GetFillColor() constReturn the fill area color.Definition TAttFill.h:30; TCanvasThe Canvas class.Definition TCanvas.h:23; TColorThe color creation and management class.Definition TColor.h:21; TColor::GetColorPalettestatic Int_t GetColorPalette(Int_t i)Static function returning the color number i in current palette.Definition TColor.cxx:1504; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; TColor::GetNumberOfColorsstatic Int_t GetNumberOfColors()Static function returning number of colors in the color palette.Definition TColor.cxx:1524; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TPolyLineDefined by an array on N points in a 2-D space.Definition TPolyLine.h:23; TPolyLine::Classstatic TClass * Class(); TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; AuthorRene Brun ; Definition in file triangles.C. tutorialsgraphicstriangles.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/triangles_8C.html:3821,Guid,Guide,3821,doc/master/triangles_8C.html,https://root.cern,https://root.cern/doc/master/triangles_8C.html,1,['Guid'],['Guide']
Usability,"array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:5278,Clear,Clear,5278,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,1,['Clear'],['Clear']
Usability,"array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:4528,Clear,Clear,4528,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,2,['Clear'],['Clear']
Usability,"array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:5631,Clear,Clear,5631,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,1,['Clear'],['Clear']
Usability,"array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the varia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html:5471,Clear,Clear,5471,doc/master/classROOT_1_1Math_1_1RMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RMinimizer.html,1,['Clear'],['Clear']
Usability,"array of gradients; Output parameters:; fval: The calculated function value.; grad: The vector of first derivatives. The meaning of the parameters par is of course defined by the user,; who uses the values of those parameters to calculate their function value.; The starting values must be specified by the user. Inside FCN user has to define Z-matrix by means TFumili::GetZ; and TFumili::Derivatives,; set theoretical function by means of TFumili::SetUserFunc,; but first - pass number of parameters by TFumili::SetParNumber. Later values are determined by Fumili as it searches for the minimum; or performs whatever analysis is requested by the user. The default function calls the function specified in SetFCN. Double_t EvalTFN(Double_t* , Double_t* ); Evaluate theoretical function; df: array of partial derivatives; X: vector of theoretical function argument. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs). Execute MINUIT commands. MINImize, SIMplex, MIGrad and FUMili all; will call TFumili::Minimize method. For full command list see; MINUIT. Reference Manual. CERN Program Library Long Writeup D506. Improvement and errors calculation are not yet implemented as well; as Monte-Carlo seeking and minimization.; Contour commands are also unsupported. command : command string; args : array of arguments; nargs : number of arguments. Int_t ExecuteSetCommand(Int_t ). Called from TFumili::ExecuteCommand in case; of ""SET xxx"" and ""SHOW xxx"". void FixParameter(Int_t ipar); Fixes parameter number ipar. Double_t * GetCovarianceMatrix() const; return a pointer to the covariance matrix. Double_t GetCovarianceMatrixElement(Int_t i, Int_t j) const; return element i,j from the covariance matrix. Int_t GetNumberTotalParameters() const; return the total number of parameters (free + fixed). Int_t GetNumberFreeParameters() const; return the number of free parameters. Double_t GetParError(Int_t ipar) const; return error of parameter ipar. Double_t GetParameter(Int_t ipar) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFumili.html:18615,SIMpl,SIMplex,18615,root/html602/TFumili.html,https://root.cern,https://root.cern/root/html602/TFumili.html,2,['SIMpl'],['SIMplex']
Usability,"array of idsDefinition RCanvas.hxx:25; ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest~RChangeAttrRequest() override=default; ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdatebool NeedCanvasUpdate() const overrideDefinition RCanvas.hxx:36; ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequestRChangeAttrRequest()=default; ROOT::Experimental::RChangeAttrRequest::fNeedUpdatebool fNeedUpdate! is canvas update requiredDefinition RCanvas.hxx:29; ROOT::Experimental::RChangeAttrRequest::operator=RChangeAttrRequest & operator=(const RChangeAttrRequest &)=delete; ROOT::Experimental::RChangeAttrRequest::updatebool updateupdate canvas at the endDefinition RCanvas.hxx:28; ROOT::Experimental::RChangeAttrRequest::Processstd::unique_ptr< RDrawableReply > Process() overrideApply attributes changes to the drawable Return mask with actions which were really applied.Definition RCanvas.cxx:327; ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequestRChangeAttrRequest(const RChangeAttrRequest &)=delete; ROOT::Experimental::RDrawableRequestBase class for requests which can be submitted from the clients.Definition RDrawableRequest.hxx:50; ROOT::Experimental::RDrawable::Version_tuint64_t Version_tDefinition RDrawable.hxx:123; ROOT::Experimental::RPadBaseBase class for graphic containers for RDrawable-s.Definition RPadBase.hxx:37; ROOT::Experimental::RPadBase::SetDrawableVersionvoid SetDrawableVersion(Version_t vers) overrideAssign drawable version - for pad itself and all primitives.Definition RPadBase.cxx:238; ROOT::Experimental::CanvasCallback_tstd::function< void(bool)> CanvasCallback_tDefinition RVirtualCanvasPainter.hxx:22; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Internal::UpdateDefinition TBranchProxyDirector.cxx:42. graf2dgpadv7incROOTRCanvas.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCanvas_8hxx_source.html:16067,Guid,Guide,16067,doc/master/RCanvas_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RCanvas_8hxx_source.html,1,['Guid'],['Guide']
Usability,"array of nodes inside this volume; 46 TGeoShape *fShape; // shape; 47 TGeoMedium *fMedium; // tracking medium; 48 static TGeoMedium *fgDummyMedium; //! dummy medium; 49 TGeoPatternFinder *fFinder; // finder object for divisions; 50 TGeoVoxelFinder *fVoxels; // finder object for bounding boxes; 51 TGeoManager *fGeoManager; //! pointer to TGeoManager owning this volume; 52 ; 53 TObject *fField; //! just a hook for now; 54 TString fOption; //! option - if any; 55 Int_t fNumber; // volume serial number in the list of volumes; 56 Int_t fNtotal; // total number of physical nodes; 57 Int_t fRefCount; // reference counter; 58 Char_t fTransparency; // transparency setting; 59 TGeoExtension *fUserExtension; //! Transient user-defined extension to volumes; 60 TGeoExtension *fFWExtension; //! Transient framework-defined extension to volumes; 61 ; 62private:; 63 TGeoVolume(const TGeoVolume &) = delete;; 64 TGeoVolume &operator=(const TGeoVolume &) = delete;; 65 ; 66public:; 67 virtual void ClearThreadData() const;; 68 virtual void CreateThreadData(Int_t nthreads);; 69 ; 70public:; 71 enum EGeoVolumeTypes {; 72 kVolumeReplicated = BIT(14),; 73 kVolumeSelected = BIT(15),; 74 kVolumeDiv = BIT(16),; 75 kVolumeOverlap = BIT(17),; 76 kVolumeImportNodes = BIT(18),; 77 kVolumeMulti = BIT(19),; 78 kVoxelsXYZ = BIT(20), // not used; 79 kVoxelsCyl = BIT(21), // not used; 80 kVolumeClone = BIT(22),; 81 kVolumeAdded = BIT(23),; 82 kVolumeOC = BIT(21) // overlapping candidates; 83 };; 84 // constructors; 85 TGeoVolume();; 86 TGeoVolume(const char *name, const TGeoShape *shape, const TGeoMedium *med = nullptr);; 87 ; 88 // destructor; 89 ~TGeoVolume() override;; 90 // methods; 91 virtual void cd(Int_t inode) const;; 92 void Browse(TBrowser *b) override;; 93 Double_t Capacity() const;; 94 void CheckShapes();; 95 void ClearNodes() { fNodes = nullptr; }; 96 void ClearShape();; 97 void CleanAll();; 98 virtual TGeoVolume *CloneVolume() const;; 99 void CloneNodesAndConnect(TGeoVolume *newmother) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8h_source.html:2585,Clear,ClearThreadData,2585,doc/master/TGeoVolume_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8h_source.html,1,['Clear'],['ClearThreadData']
Usability,"arrays of managed PIDs. ; Definition at line 193 of file TRefTable.cxx. ◆ FillBuffer(). void TRefTable::FillBuffer ; (; TBuffer & ; b). virtual . Fill buffer b with the fN elements in fParentdIDs. ; This function is called by TBranchRef::FillLeaves. ; Definition at line 225 of file TRefTable.cxx. ◆ FindPIDGUID(). Int_t TRefTable::FindPIDGUID ; (; const char * ; guid); const. protected . Get fProcessGUIDs' index of the TProcessID with GUID guid. ; Definition at line 238 of file TRefTable.cxx. ◆ GetInternalIdxForPID() [1/2]. Int_t TRefTable::GetInternalIdxForPID ; (; Int_t ; pid); const. protected . Get the index for fProcessIDs, fAllocSize, etc given a PID. ; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID ; Definition at line 278 of file TRefTable.cxx. ◆ GetInternalIdxForPID() [2/2]. Int_t TRefTable::GetInternalIdxForPID ; (; TProcessID * ; procid); const. protected . Get the index for fProcessIDs, fAllocSize, etc given a PID. ; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID ; Definition at line 269 of file TRefTable.cxx. ◆ GetN(). Int_t TRefTable::GetN ; (; Int_t ; pid); const. inline . Definition at line 80 of file TRefTable.h. ◆ GetNumPIDs(). Int_t TRefTable::GetNumPIDs ; (; ); const. inline . Definition at line 78 of file TRefTable.h. ◆ GetOwner(). TObject * TRefTable::GetOwner ; (; ); const. inline . Definition at line 81 of file TRefTable.h. ◆ GetParent(). TObject * TRefTable::GetParent ; (; Int_t ; uid, . TProcessID * ; context = nullptr . ); const. Return object corresponding to uid. ; Definition at line 249 of file TRefTable.cxx. ◆ GetParents(). TObjArray * TRefTable::GetParents ; (; ); const. inline . Definition at line 83 of file TRefTable.h. ◆ GetRefTable(). TRefTable * TRefTable::GetRefTable ; (; ). static . Static function returning the current TRefTable. ; Definition at line 287 of file TRefTable.cxx. ◆ GetSize(). Int_t TRefTable::GetSize ; (; Int_t ; pid); const. inline . Definition at line 79 of file TRefTable.h. ◆ GetUID(). UInt_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefTable.html:17859,GUID,GUID,17859,doc/master/classTRefTable.html,https://root.cern,https://root.cern/doc/master/classTRefTable.html,1,['GUID'],['GUID']
Usability,"ars, list<RooAbsDataStore*> dstoreList); Merge columns of supplied data set(s) with this data set. All; data sets must have equal number of entries. In case of; duplicate columns the column of the last dataset in the list; prevails. void append(RooAbsDataStore& other). Double_t sumEntries() const. Int_t numEntries() const. void reset(). void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); Cache given RooAbsArgs with this tree: The tree is; given direct write access of the args internal cache; the args values is pre-calculated for all data points; in this data collection. Upon a get() call, the; internal cache of 'newVar' will be loaded with the; precalculated value and it's dirty flag will be cleared. void setArgStatus(const RooArgSet& set, Bool_t active); Activate or deactivate the branch status of the TTree branch associated; with the given set of dataset observables. void resetCache(); Remove tree with values of cached observables; and clear list of cached observables. void attachBuffers(const RooArgSet& extObs). void resetBuffers(). void restoreAlternateBuffers(). void checkInit() const. Stat_t GetEntries() const; Interface function to TTree::GetEntries. void Reset(Option_t* option = 0); Interface function to TTree::Reset. Int_t Fill(); Interface function to TTree::Fill. Int_t GetEntry(Int_t entry = 0, Int_t getall = 0); Interface function to TTree::GetEntry. void Draw(Option_t* option = """"). void Streamer(TBuffer& ); Stream an object of class RooTreeDataStore. RooAbsDataStore* clone(const char* newname = 0) const; { return new RooTreeDataStore(*this,newname) ; }. RooAbsDataStore* clone(const RooArgSet& vars, const char* newname = 0) const; { return new RooTreeDataStore(*this,vars,newname) ; }. Bool_t isWeighted() const; { return (_wgtVar!=0||_extWgtArray!=0) ; }. TTree& tree(); Tree access. { return *_tree ; }. const TTree* tree() const; { return _tree ; }. const RooAbsArg* cacheOwner(); { return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooTreeDataStore.html:17754,clear,clear,17754,root/html534/RooTreeDataStore.html,https://root.cern,https://root.cern/root/html534/RooTreeDataStore.html,3,['clear'],['clear']
Usability,"ars_time0[0] from array expression vars_time0 of size 30; : Using variable vars_time1[0] from array expression vars_time1 of size 30; : Using variable vars_time2[0] from array expression vars_time2 of size 30; : Using variable vars_time3[0] from array expression vars_time3 of size 30; : Using variable vars_time4[0] from array expression vars_time4 of size 30; : Using variable vars_time5[0] from array expression vars_time5 of size 30; : Using variable vars_time6[0] from array expression vars_time6 of size 30; : Using variable vars_time7[0] from array expression vars_time7 of size 30; : Using variable vars_time8[0] from array expression vars_time8 of size 30; : Using variable vars_time9[0] from array expression vars_time9 of size 30; DataSetFactory : [dataset] : Number of events in input trees; : ; : ; : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 1600; : Signal -- testing events : 400; : Signal -- training and testing events: 2000; : Background -- training events : 1600; : Background -- testing events : 400; : Background -- training and testing events: 2000; : ; Factory : ␛[1mTrain all methods␛[0m; Factory : Train method: TMVA_LSTM for Classification; : ; : Start of deep neural network training on CPU using MT, nthreads = 4; : ; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 10, 1, 30 ) Batch size = 100 Loss function = C; Layer 0 LSTM Layer: (NInput = 30, NState = 10, NTime = 10 ) Output = ( 100 , 10 , 10 ); Layer 1 RESHAPE Layer Input = ( 1 , 10 , 10 ) Output = ( 1 , 100 , 100 ) ; Layer 2 DENSE Layer: ( Input = 100 , Width = 64 ) Output = ( 1 , 100 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:14551,Learn,Learning,14551,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,2,['Learn'],['Learning']
Usability,"arser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteOptionsToStream (std::ostream &o, const TString &prefix) const;  write options to output stream (e.g. in writing the MVA weight files ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Configurable.html:2517,Clear,Clear,2517,doc/master/classTMVA_1_1Configurable.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Configurable.html,1,['Clear'],['Clear']
Usability,"as been overridden by the user. void Evolution(); this function is called from ""init"" and controls the evolution of the; individuals.; the function can be overridden to change the parameters for mutation rate; sexual reproduction and so on. Double_t SpreadControl(Int_t steps, Int_t ofSteps, Double_t factor); this function provides the ability to change the stepSize of a mutation according to; the success of the last generations. Parameters:; int ofSteps : = if OF the number of STEPS given in this variable (ofSteps); int successSteps : >sucessSteps Generations could improve the result; double factor : than multiply the stepSize ( spread ) by this factor; (if ofSteps == successSteps nothing is changed, if ofSteps < successSteps, the spread; is divided by the factor). using this function one can increase the stepSize of the mutation when we have; good success (to pass fast through the easy phase-space) and reduce the stepSize; if we are in a difficult ""territory"" of the phase-space. Bool_t HasConverged(Int_t steps = 10, Double_t ratio = 0.10000000000000001); gives back true if the last ""steps"" steps have lead to an improvement of the; ""fitness"" of the ""individuals"" of at least ""improvement"". this gives a simple measure of if the fitness of the individuals is; converging and no major improvement is to be expected soon. GeneticAlgorithm(TMVA::IFitterTarget& target, Int_t populationSize, const vector<TMVA::Interval*>& ranges, UInt_t seed = 0). GeneticPopulation& GetGeneticPopulation(); { return fPopulation; }. Double_t GetSpread() const; { return fSpread; }. void SetSpread(Double_t s); { fSpread = s; }. void SetMakeCopies(Bool_t s); { fMakeCopies = s; }. Bool_t GetMakeCopies(); { return fMakeCopies; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__GeneticAlgorithm.html:5293,simpl,simple,5293,root/html604/TMVA__GeneticAlgorithm.html,https://root.cern,https://root.cern/root/html604/TMVA__GeneticAlgorithm.html,1,['simpl'],['simple']
Usability,"as been overridden by the user. void Evolution(); this function is called from ""init"" and controls the evolution of the; individuals.; the function can be overridden to change the parameters for mutation rate; sexual reproduction and so on. Double_t SpreadControl(Int_t steps, Int_t ofSteps, Double_t factor); this function provides the ability to change the stepSize of a mutation according to; the success of the last generations. Parameters:; int ofSteps : = if OF the number of STEPS given in this variable (ofSteps); int successSteps : >sucessSteps Generations could improve the result; double factor : than multiply the stepSize ( spread ) by this factor; (if ofSteps == successSteps nothing is changed, if ofSteps < successSteps, the spread; is divided by the factor). using this function one can increase the stepSize of the mutation when we have; good success (to pass fast through the easy phase-space) and reduce the stepSize; if we are in a difficult ""territory"" of the phase-space. Bool_t HasConverged(Int_t steps = 10, Double_t ratio = 0.10000000000000001); gives back true if the last ""steps"" steps have lead to an improvement of the; ""fitness"" of the ""individuals"" of at least ""improvement"". this gives a simple measure of if the fitness of the individuals is; converging and no major improvement is to be expected soon. GeneticAlgorithm(TMVA::IFitterTarget& target, Int_t populationSize, const vector<TMVA::Interval*>& ranges, UInt_t seed = 0). GeneticPopulation& GetGeneticPopulation(); { return fPopulation; }. Double_t GetSpread() const; { return fSpread; }. void SetSpread(Double_t s); { fSpread = s; }. void SetMakeCopies(Bool_t s); { fMakeCopies = s; }. Bool_t GetMakeCopies(); { return fMakeCopies; }. » Author: Peter Speckmayer » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__GeneticAlgorithm.html:5285,simpl,simple,5285,root/html602/TMVA__GeneticAlgorithm.html,https://root.cern,https://root.cern/root/html602/TMVA__GeneticAlgorithm.html,1,['simpl'],['simple']
Usability,"as solid lines and no special techniques are used to clarify the picture, the result is the previous picture which is very cluttered and useless. To improve the readability of the Parallel Coordinates output and to explore interactively the data set, many techniques are available. We have implemented a few in ROOT. First of all, in order to show better where the clusters on the various axes are, a 1D histogram is associated to each axis. These histograms (one per axis) are filled according to the number of lines passing through the bins. The histogram’s axis can be represented with colors or as bar charts. These histograms can be represented which colors (get from a palette according to the bin contents) or as bar charts. Both representations can be cumulated on the same plot. This technique allows seeing clearly where the clusters are on an individual axis but it does not give any hints about the correlations between the axes.; Avery simple technique allows to make the clusters appearing: Instead of painting solid lines we paint dotted lines. The cluttering of each individual line is reduced and the clusters show clearly as we can see on the next figure. The spacing between the dots is a parameter which can be adjusted in order to get the best results. Using dotted lines is a very simple method to reduce the cluttering. Interactivity is a very important aspect of the Parallel Coordinates plots. To really explore the data set it is essential to act directly with the events and the axes. For instance, changing the axes order may show clusters which were not visible in a different order. On the next figure the axes order has been changed interactively. We can see that many more clusters appear and all the “random spheres” we put in the data set are now clearly visible. Having moved the variables u,v,w after the variables x,y,z the correlation between these two sets of variables is clear also. Axis order is very important to show clusters. To pursue further data sets e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:613598,simpl,simple,613598,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"asCallback_t callback) final;  perform special action when drawing is ready ;  ; std::string GetWindowAddr () const final;  Returns web window name. ;  ; std::string GetWindowUrl (bool remote) final;  Returns connection URL for web window. ;  ; bool IsCanvasModified (uint64_t id) const final;  return true if canvas modified since last painting ;  ; void NewDisplay (const std::string &where) final;  Create new display for the canvas See ROOT::RWebWindowsManager::Show() docu for more info. ;  ; int NumDisplays () const final;  Returns number of connected displays. ;  ; bool ProduceBatchOutput (const std::string &fname, int width, int height) final;  Produce batch output, using chrome headless mode with DOM dump. ;  ; std::string ProduceJSON () final;  Produce JSON for the canvas. ;  ; void Run (double tm=0.) final;  Run canvas functionality for specified period of time Required when canvas used not from the main thread. ;  ; void SetClearOnClose (const std::shared_ptr< void > &) final;  Set handle to window which will be cleared when connection is closed. ;  ;  Public Member Functions inherited from ROOT::Experimental::Internal::RVirtualCanvasPainter; virtual ~RVirtualCanvasPainter ();  Default destructor. ;  . Private Types; typedef std::vector< Detail::RMenuItem > MenuItemsVector;  . Private Member Functions;  RCanvasPainter (const RCanvasPainter &)=delete;  Disable copy construction. ;  ; void CancelCommands (unsigned connid=0);  Cancel command execution on provided connection All commands are cancelled, when connid === 0. ;  ; void CancelUpdates ();  Cancel all pending Canvas::Update() ;  ; void CheckDataToSend ();  Check if canvas need to send data to the clients. ;  ; std::string CreateSnapshot (RDrawable::RDisplayContext &ctxt);  Create JSON representation of data, which should be send to the clients Here server-side painting is performed - each drawable adds own elements in so-called display list, which transferred to the clients. ;  ; void CreateWindow ();  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html:2151,clear,cleared,2151,doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvasPainter.html,1,['clear'],['cleared']
Usability,"asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TObject &rhs)TObjectinline; Paint(Option_t *option="""")TObjectvirtual; Pop()TObjectvirtual; Print(Option_t *option="""") constTObjectvirtual; Read(const char *name)TObjectvirtual; ReadBuffer(char *&buffer)TFreevirtual; RecursiveRemove(TObject *obj)TObjectvirtual; ResetBit(UInt_t f)TObjectinline; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetFirst(Long64_t first)TFreeinline; SetLast(Long64_t last)TFreeinline; SetObjectStat(Bool_t stat)TObjectstatic; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTFree; Streamer(TBuffer &) overrideTFreevirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TFreeinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TFree()TFree; TFree(TList *lfree, Long64_t first, Long64_t last)TFree; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TFree() overrideTFree; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFree-members.html:5572,Guid,Guide,5572,doc/master/classTFree-members.html,https://root.cern,https://root.cern/doc/master/classTFree-members.html,1,['Guid'],['Guide']
Usability,"as_PDF(UInt_t idx); static RooResolutionModel&as_RMODEL(UInt_t idx); static RooArgSetas_SET(UInt_t idx); static const char*as_STRING(UInt_t idx); static RooRealVar&as_VAR(UInt_t idx); static RooAbsRealLValue&as_VARLV(UInt_t idx); RooAbsArg&asARG(const char*); RooCategory&asCAT(const char*); RooAbsCategory&asCATFUNC(const char*); RooAbsCategoryLValue&asCATLV(const char*); RooAbsData&asDATA(const char*); RooDataHist&asDHIST(const char*); Double_tasDOUBLE(const char*); RooDataSet&asDSET(const char*); RooAbsReal&asFUNC(const char*); Int_tasINT(const char*); RooArgListasLIST(const char*); TObject&asOBJ(const char*); RooAbsPdf&asPDF(const char*); RooResolutionModel&asRMODEL(const char*); RooArgSetasSET(const char*); const char*asSTRING(const char*); RooRealVar&asVAR(const char*); RooAbsRealLValue&asVARLV(const char*); const char*autoClassNamePostFix() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; RooAbsArg*createArg(const char* className, const char* objName, const char* varList); RooCategory*createCategory(const char* name, const char* stateNameList = 0); RooRealVar*createVariable(const char* name, Double_t xmin, Double_t xmax); vector<std::string>ctorArgs(const char* className); virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFactoryWSTool.html:2633,Clear,Clear,2633,root/html530/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html530/RooFactoryWSTool.html,3,['Clear'],['Clear']
Usability,"as_PDF(UInt_t idx); static RooResolutionModel&as_RMODEL(UInt_t idx); static RooArgSetas_SET(UInt_t idx); static const char*as_STRING(UInt_t idx); static RooRealVar&as_VAR(UInt_t idx); static RooAbsRealLValue&as_VARLV(UInt_t idx); RooAbsArg&asARG(const char*); RooCategory&asCAT(const char*); RooAbsCategory&asCATFUNC(const char*); RooAbsCategoryLValue&asCATLV(const char*); RooAbsData&asDATA(const char*); RooDataHist&asDHIST(const char*); Double_tasDOUBLE(const char*); RooDataSet&asDSET(const char*); RooAbsReal&asFUNC(const char*); Int_tasINT(const char*); RooArgListasLIST(const char*); TObject&asOBJ(const char*); RooAbsPdf&asPDF(const char*); RooResolutionModel&asRMODEL(const char*); RooArgSetasSET(const char*); const char*asSTRING(const char*); RooRealVar&asVAR(const char*); RooAbsRealLValue&asVARLV(const char*); const char*autoClassNamePostFix() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; RooAbsArg*createArg(const char* className, const char* objName, const char* varList); RooCategory*createCategory(const char* name, const char* stateNameList = 0); RooRealVar*createVariable(const char* name, Double_t xmin, Double_t xmax); vector<string>ctorArgs(const char* className); virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFactoryWSTool.html:2597,Clear,Clear,2597,root/html602/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html602/RooFactoryWSTool.html,2,['Clear'],['Clear']
Usability,"ase Checklist | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Release Checklist. Steps to be followed to produce a new ROOT release are:; Prerequisites. Get the 'green' light from all main developers; C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:1007,Guid,Guides,1007,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,1,['Guid'],['Guides']
Usability,"ase Class for all MVA method ;  CMethodBayesClassifierDescription of bayesian classifiers ;  CMethodBDTAnalysis of Boosted Decision Trees ;  CMethodBoostClass for boosting a TMVA method ;  CMethodC50;  CMethodCategoryClass for categorizing the phase space ;  CMethodCFMlpANNInterface to Clermond-Ferrand artificial neural network ;  ►CMethodCFMlpANN_UtilsImplementation of Clermond-Ferrand artificial neural network ;  CVARn2;  CMethodCompositeBaseVirtual base class for combining several TMVA method ;  CMethodCrossValidation;  CMethodCutsMultivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements ;  CMethodDL;  ►CMethodDNNDeep Neural Network Implementation ;  CTTrainingSettings;  CMethodDTAnalysis of Boosted Decision Trees ;  CMethodFDAFunction discriminant analysis (FDA) ;  CMethodFisherFisher and Mahalanobis Discriminants (Linear Discriminant Analysis) ;  CMethodHMatrixH-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables ;  CMethodInfo;  CMethodKNNAnalysis of k-nearest neighbor ;  CMethodLDLinear Discriminant ;  CMethodLikelihoodLikelihood analysis (""non-parametric approach"") ;  CMethodMLPMultilayer Perceptron class built off of MethodANNBase ;  CMethodPDEFoamThe PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density ;  CMethodPDERSThis is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA ;  CMethodPyAdaBoost;  CMethodPyGTB;  CMethodPyKeras;  CMethodPyRandomForest;  CMethodRSNNS;  CMethodRSVM;  CMethodRuleFitJ Friedman's RuleFit method ;  CMethodRXGB;  CMethodSVMSMO Platt's SVM classifier with Keerthi & Shavade improvements ;  CMethodTMlpANNThis is the TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:83808,simpl,simple,83808,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,3,['simpl'],['simple']
Usability,"ase make sure ""; 1091 ""you have CUDA installed and it was successfully ""; 1092 ""detected by CMAKE."" << Endl;; 1093#endif // DNNCUDA; 1094}; 1095 ; 1096////////////////////////////////////////////////////////////////////////////////; 1097 ; 1098void TMVA::MethodDNN::TrainCpu(); 1099{; 1100 ; 1101#ifdef DNNCPU // Included only if DNNCPU flag is set.; 1102 Log() << kINFO << ""Start of neural network training on CPU."" << Endl << Endl;; 1103 ; 1104 size_t nValidationSamples = GetNumValidationSamples();; 1105 size_t nTrainingSamples = GetEventCollection(Types::kTraining).size() - nValidationSamples;; 1106 size_t nTestSamples = nValidationSamples;; 1107 ; 1108 Log() << kDEBUG << ""Using "" << nValidationSamples << "" validation samples."" << Endl;; 1109 Log() << kDEBUG << ""Using "" << nTestSamples << "" training samples."" << Endl;; 1110 ; 1111 fNet.Initialize(fWeightInitialization);; 1112 ; 1113 size_t trainingPhase = 1;; 1114 for (TTrainingSettings & settings : fTrainingSettings) {; 1115 ; 1116 if (fInteractive){; 1117 fInteractive->ClearGraphs();; 1118 }; 1119 ; 1120 Log() << ""Training phase "" << trainingPhase << "" of ""; 1121 << fTrainingSettings.size() << "":"" << Endl;; 1122 trainingPhase++;; 1123 ; 1124 TNet<TCpu<>> net(settings.batchSize, fNet);; 1125 net.SetWeightDecay(settings.weightDecay);; 1126 net.SetRegularization(settings.regularization);; 1127 // Need to convert dropoutprobabilities to conventions used; 1128 // by backend implementation.; 1129 std::vector<Double_t> dropoutVector(settings.dropoutProbabilities);; 1130 for (auto & p : dropoutVector) {; 1131 p = 1.0 - p;; 1132 }; 1133 net.SetDropoutProbabilities(dropoutVector);; 1134 net.InitializeGradients();; 1135 auto testNet = net.CreateClone(settings.batchSize);; 1136 ; 1137 using DataLoader_t = TDataLoader<TMVAInput_t, TCpu<>>;; 1138 ; 1139 // Split training data into training and validation set; 1140 const std::vector<Event *> &allData = GetEventCollection(Types::kTraining);; 1141 const std::vector<Event *> trainin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:40096,Clear,ClearGraphs,40096,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Clear'],['ClearGraphs']
Usability,"ase of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Flo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofPlayerRemote.html:19248,feedback,feedback,19248,root/html530/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html530/TProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"ase of failure. See TPad::cd() for an explanation of the parameter. ; Implements TVirtualPad.; Definition at line 716 of file TCanvas.cxx. ◆ Class(). static TClass * TCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 238 of file TCanvas.h. ◆ Clear(). void TCanvas::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all primitives from the canvas. ; If option ""D"" is specified, direct sub-pads are cleared but not deleted. This option is not recursive, i.e. pads in direct sub-pads are deleted. ; Implements TVirtualPad.; Definition at line 734 of file TCanvas.cxx. ◆ Cleared(). void TCanvas::Cleared ; (; TVirtualPad * ; pad). virtual . Emit pad Cleared signal. ; Definition at line 767 of file TCanvas.cxx. ◆ ClearPadSave(). void TCanvas::ClearPadSave ; (; ). inline . Definition at line 140 of file TCanvas.h. ◆ Close(). void TCanvas::Close ; (; Option_t * ; option = """"). overridevirtual . Close canvas. ; Delete window/pads data structure ; Implements TVirtualPad.; Definition at line 785 of file TCanvas.cxx. ◆ Closed(). void TCanvas::Closed ; (; ). overridevirtual . Emit Closed signal. ; Reimplemented from TPad.; Definition at line 775 of file TCanvas.cxx. ◆ Constructor() [1/4]. void TCanvas::Constructor ; (; ). Canvas default constructor. ; Definition at line 188 of file TCanvas.cxx. ◆ Constructor() [2/4]. void TCanvas::Constructor ; (; const char * ; name, . const char * ; title, . Int_t ; form . ). Create a new canvas with a predefined size form. ; If form < 0 the menubar is not shown. form = 1 700x500 at 10,10 (set by TStyle::SetCanvasDefH,W,X,Y); form = 2 500x500 at 20,20; form = 3 500x500 at 30,30; form = 4 500x500 at 40,40; form = 5 500x500 at 50,50 . Definition at line 284 of file TCanvas.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:66655,Clear,ClearPadSave,66655,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['Clear'],['ClearPadSave']
Usability,"ase of failure. See TPad::cd() for an explanation of the parameter. ; Implements TVirtualPad.; Definition at line 719 of file TCanvas.cxx. ◆ Class(). static TClass * TCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 238 of file TCanvas.h. ◆ Clear(). void TCanvas::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all primitives from the canvas. ; If option ""D"" is specified, direct sub-pads are cleared but not deleted. This option is not recursive, i.e. pads in direct sub-pads are deleted. ; Implements TVirtualPad.; Definition at line 737 of file TCanvas.cxx. ◆ Cleared(). void TCanvas::Cleared ; (; TVirtualPad * ; pad). virtual . Emit pad Cleared signal. ; Definition at line 770 of file TCanvas.cxx. ◆ ClearPadSave(). void TCanvas::ClearPadSave ; (; ). inline . Definition at line 140 of file TCanvas.h. ◆ Close(). void TCanvas::Close ; (; Option_t * ; option = """"). overridevirtual . Close canvas. ; Delete window/pads data structure ; Implements TVirtualPad.; Definition at line 788 of file TCanvas.cxx. ◆ Closed(). void TCanvas::Closed ; (; ). overridevirtual . Emit Closed signal. ; Reimplemented from TPad.; Definition at line 778 of file TCanvas.cxx. ◆ Constructor() [1/4]. void TCanvas::Constructor ; (; ). Canvas default constructor. ; Definition at line 191 of file TCanvas.cxx. ◆ Constructor() [2/4]. void TCanvas::Constructor ; (; const char * ; name, . const char * ; title, . Int_t ; form . ). Create a new canvas with a predefined size form. ; If form < 0 the menubar is not shown. form = 1 700x500 at 10,10 (set by TStyle::SetCanvasDefH,W,X,Y); form = 2 500x500 at 20,20; form = 3 500x500 at 30,30; form = 4 500x500 at 40,40; form = 5 500x500 at 50,50 . Definition at line 287 of file TCanvas.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:67031,Clear,ClearPadSave,67031,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['Clear'],['ClearPadSave']
Usability,"ase when using the branches created via a TStreamerInfo (i.e. More...;  ; class  TLeafF;  A TLeaf for a 32 bit floating point data type. More...;  ; class  TLeafF16;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafG;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafI;  A TLeaf for an Integer data type. More...;  ; class  TLeafL;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafO;  A TLeaf for a bool data type. More...;  ; class  TLeafObject;  A TLeaf for a general object derived from TObject. More...;  ; class  TLeafS;  A TLeaf for a 16 bit Integer data type. More...;  ; class  TMethodBrowsable;  This helper object allows the browsing of methods of objects stored in branches. More...;  ; class  TNonSplitBrowsable;  Allows a TBrowser to browse non-split branches as if they were split. More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits parallelized decompression of its own content. More...;  ; class  TTreeCloner;  Class implement",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tree.html:4979,simpl,simple,4979,doc/master/group__tree.html,https://root.cern,https://root.cern/doc/master/group__tree.html,1,['simpl'],['simple']
Usability,"ase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__ScanMinimizer.html:4503,Simpl,SimplexSeedGeneratorfSeedGenerator,4503,root/html602/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__ScanMinimizer.html,1,['Simpl'],['SimplexSeedGeneratorfSeedGenerator']
Usability,"ase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__ScanMinimizer.html:4503,Simpl,SimplexSeedGeneratorfSeedGenerator,4503,root/html604/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__ScanMinimizer.html,1,['Simpl'],['SimplexSeedGeneratorfSeedGenerator']
Usability,"ase.cxx. Public Member Functions;  TGWin32CallBackObject (TGWin32CallBack cb, void *p);  ;  ~TGWin32CallBackObject ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32CallBackObject.html:1246,Clear,Clear,1246,doc/master/classTGWin32CallBackObject.html,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html,1,['Clear'],['Clear']
Usability,"ase/inc/TStorage.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Typedefs |; Variables ; TStorage.h File Reference. #include ""Rtypes.h"". Include dependency graph for TStorage.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TStorage;  Storage manager. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Typedefs; typedef void(* FreeHookFun_t) (void *, void *addr, size_t);  ; using ROOT::Internal::FreeIfTMapFile_t = bool(void *);  ; using ROOT::Internal::GetMapFileMapllocDesc_t = void *(void *);  ; typedef void *(* ReAllocCFun_t) (void *, size_t, size_t);  ; typedef char *(* ReAllocCharFun_t) (char *, size_t, size_t);  ; typedef void *(* ReAllocFun_t) (void *, size_t);  . Variables; R__EXTERN FreeIfTMapFile_t * ROOT::Internal::gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * ROOT::Internal::gGetMapFileMallocDesc = nullptr;  ; R__EXTERN void * ROOT::Internal::gMmallocDesc = nullptr;  . Typedef Documentation. ◆ FreeHookFun_t. typedef void(* FreeHookFun_t) (void *, void *addr, size_t). Definition at line 27 of file TStorage.h. ◆ ReAllocCFun_t. typedef void *(* ReAllocCFun_t) (void *, size_t, size_t). Definition at line 29 of file TStorage.h. ◆ ReAllocCharFun_t. typedef char *(* ReAllocCharFun_t) (char *, size_t, size_t). Definition at line 30 of file TStorage.h. ◆ ReAllocFun_t. typedef void *(* ReAllocFun_t) (void *, size_t). Definition at line 28 of file TStorage.h. corebaseincTStorage.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStorage_8h.html:1934,Guid,Guide,1934,doc/master/TStorage_8h.html,https://root.cern,https://root.cern/doc/master/TStorage_8h.html,1,['Guid'],['Guide']
Usability,"aseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BaseIntegratorOptions.html:2541,Clear,ClearExtra,2541,root/html534/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BaseIntegratorOptions.html,1,['Clear'],['ClearExtra']
Usability,"aset cache, if any (matching 'dataset', if defined). ; Reimplemented in TProofLite.; Definition at line 10896 of file TProof.cxx. ◆ ClearFeedback(). void TProof::ClearFeedback ; (; ). Clear feedback list. ; Definition at line 10012 of file TProof.cxx. ◆ ClearInput(). void TProof::ClearInput ; (; ). Clear input object list. ; Definition at line 9742 of file TProof.cxx. ◆ ClearInputData() [1/2]. void TProof::ClearInputData ; (; const char * ; name). Remove obj 'name' form the input data list;. ; Definition at line 9572 of file TProof.cxx. ◆ ClearInputData() [2/2]. void TProof::ClearInputData ; (; TObject * ; obj = 0). Remove obj form the input data list; if obj is null (default), clear the input data info. ; Definition at line 9538 of file TProof.cxx. ◆ ClearPackage(). Int_t TProof::ClearPackage ; (; const char * ; package). Remove a specific package. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7857 of file TProof.cxx. ◆ ClearPackages(). Int_t TProof::ClearPackages ; (; ). Remove all packages. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7840 of file TProof.cxx. ◆ Close(). void TProof::Close ; (; Option_t * ; opt = """"). Close all open slave servers. ; Client can decide to shutdown the remote session by passing option is 'S' or 's'. Default for clients is detach, if supported. Masters always shutdown the remote counterpart. ; Definition at line 1798 of file TProof.cxx. ◆ CloseProgressDialog(). void TProof::CloseProgressDialog ; (; ). Close progress dialog. ; Definition at line 9283 of file TProof.cxx. ◆ Collect() [1/4]. Int_t TProof::Collect ; (; const TSlave * ; sl, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). private . Collect responses from slave sl. ; Returns the number of slaves that responded (=1). If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the message that stops this collect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:76319,Clear,ClearPackages,76319,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['ClearPackages']
Usability,"asisConvVar() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:3657,Clear,Clear,3657,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,3,['Clear'],['Clear']
Usability,"ass ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; virtual void InitializeContext ();  Initialize parser parameters, such as, disactivate non-standards libxml1 features, on/off validation, clear error and warning messages. ;  ; virtual void OnValidateError (const TString &message);  This function is called when an error from the parser has occurred. ;  ; virtual void OnValidateWarning (const TString &message);  This function is called when a warning from the parser has occurred. ;  ; virtual void ReleaseUnderlying ();  To release any existing document. ;  ; virtual void SetParseCode (Int_t code);  Set the parse code: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; _xmlParserCtxt * fContext;  Parse the xml file. ;  ; Int_t fParseCode;  To keep track of the errorcodes. ;  ; Bool_t fRep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLParser.html:13403,clear,clear,13403,doc/master/classTXMLParser.html,https://root.cern,https://root.cern/doc/master/classTXMLParser.html,1,['clear'],['clear']
Usability,"ass * TVirtualX::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TVirtualX::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TVirtualX::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 334 of file TVirtualX.h. ◆ ClearArea(). void TVirtualX::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). virtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1603 of file TVirtualX.cxx. ◆ ClearWindow() [1/2]. void TVirtualX::ClearWindow ; (; ). virtual . Clears the entire area of the current window. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 177 of file TVirtualX.cxx. ◆ ClearWindow() [2/2]. void TVirtualX::ClearWindow ; (; Window_t ; id). virtual . Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1872 of file TVirtualX.cxx. ◆ CloseDisplay(). void TVirtualX::CloseDisplay ; (; ). virtual . Closes connection to display server and destroys all windows. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1207 of file TVirtualX.cxx. ◆ ClosePixmap(). void TVirtualX::ClosePixmap ; (; ). virtual . Deletes current pixmap. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 191 of file TVirtualX.cxx. ◆ CloseWindow(). void TVirtualX::CloseWindow ; (; ). virtual . Deletes current window. ; Reimplemented in TGCocoa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:55280,Clear,Clears,55280,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['Clear'],['Clears']
Usability,"ass *oldcl = (TClass*)gROOT->GetListOfClasses()->FindObject(fName.Data());; 1407 ; 1408 InsertTClassInRegistryRAII insertRAII(fState,fName,fNoInfoOrEmuOrFwdDeclNameRegistry);; 1409 ; 1410 if (oldcl && oldcl->TestBit(kLoading)) {; 1411 // Do not recreate a class while it is already being created!; 1412 ; 1413 // We can no longer reproduce this case, to check whether we are, we use; 1414 // this code:; 1415 // Fatal(""Init"",""A bad replacement for %s was requested\n"",name);; 1416 return;; 1417 }; 1418 ; 1419 TClass **persistentRef = nullptr;; 1420 if (oldcl) {; 1421 ; 1422 persistentRef = oldcl->fPersistentRef.exchange(nullptr);; 1423 ; 1424 // The code from here is also in ForceReload.; 1425 TClass::RemoveClass(oldcl);; 1426 // move the StreamerInfo immediately so that there are; 1427 // properly updated!; 1428 ; 1429 if (oldcl->CanIgnoreTObjectStreamer()) {; 1430 IgnoreTObjectStreamer();; 1431 }; 1432 TVirtualStreamerInfo *info;; 1433 ; 1434 TIter next(oldcl->GetStreamerInfos());; 1435 while ((info = (TVirtualStreamerInfo*)next())) {; 1436 // We need to force a call to BuildOld; 1437 info->Clear(""build"");; 1438 info->SetClass(this);; 1439 fStreamerInfo->AddAtAndExpand(info,info->GetClassVersion());; 1440 }; 1441 oldcl->fStreamerInfo->Clear();; 1442 // The code diverges here from ForceReload.; 1443 ; 1444 // Move the Schema Rules too.; 1445 fSchemaRules = oldcl->fSchemaRules;; 1446 oldcl->fSchemaRules = nullptr;; 1447 ; 1448 // Move the TFunctions.; 1449 fFuncTemplate = oldcl->fFuncTemplate;; 1450 if (fFuncTemplate); 1451 fFuncTemplate->fClass = this;; 1452 oldcl->fFuncTemplate = nullptr;; 1453 fMethod.store( oldcl->fMethod );; 1454 if (fMethod); 1455 (*fMethod).fClass = this;; 1456 oldcl->fMethod = nullptr;; 1457 ; 1458 }; 1459 ; 1460 SetBit(kLoading);; 1461 // Advertise ourself as the loading class for this class name; 1462 TClass::AddClass(this);; 1463 ; 1464 Bool_t isStl = TClassEdit::IsSTLCont(fName);; 1465 ; 1466 if (!gInterpreter); 1467 ::Fatal(""TClass::Init"", ""g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:55595,Clear,Clear,55595,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['Clear'],['Clear']
Usability,"ass *oldcl = (TClass*)gROOT->GetListOfClasses()->FindObject(fName.Data());; 1474 ; 1475 InsertTClassInRegistryRAII insertRAII(fState,fName,fNoInfoOrEmuOrFwdDeclNameRegistry);; 1476 ; 1477 if (oldcl && oldcl->TestBit(kLoading)) {; 1478 // Do not recreate a class while it is already being created!; 1479 ; 1480 // We can no longer reproduce this case, to check whether we are, we use; 1481 // this code:; 1482 // Fatal(""Init"",""A bad replacement for %s was requested\n"",name);; 1483 return;; 1484 }; 1485 ; 1486 TClass **persistentRef = nullptr;; 1487 if (oldcl) {; 1488 ; 1489 persistentRef = oldcl->fPersistentRef.exchange(nullptr);; 1490 ; 1491 // The code from here is also in ForceReload.; 1492 TClass::RemoveClass(oldcl);; 1493 // move the StreamerInfo immediately so that there are; 1494 // properly updated!; 1495 ; 1496 if (oldcl->CanIgnoreTObjectStreamer()) {; 1497 IgnoreTObjectStreamer();; 1498 }; 1499 TVirtualStreamerInfo *info;; 1500 ; 1501 TIter next(oldcl->GetStreamerInfos());; 1502 while ((info = (TVirtualStreamerInfo*)next())) {; 1503 // We need to force a call to BuildOld; 1504 info->Clear(""build"");; 1505 info->SetClass(this);; 1506 fStreamerInfo->AddAtAndExpand(info,info->GetClassVersion());; 1507 }; 1508 oldcl->fStreamerInfo->Clear();; 1509 // The code diverges here from ForceReload.; 1510 ; 1511 // Move the Schema Rules too.; 1512 fSchemaRules = oldcl->fSchemaRules;; 1513 oldcl->fSchemaRules = nullptr;; 1514 ; 1515 // Move the TFunctions.; 1516 fFuncTemplate = oldcl->fFuncTemplate;; 1517 if (fFuncTemplate); 1518 fFuncTemplate->fClass = this;; 1519 oldcl->fFuncTemplate = nullptr;; 1520 fMethod.store( oldcl->fMethod );; 1521 if (fMethod); 1522 (*fMethod).fClass = this;; 1523 oldcl->fMethod = nullptr;; 1524 ; 1525 }; 1526 ; 1527 SetBit(kLoading);; 1528 // Advertise ourself as the loading class for this class name; 1529 TClass::AddClass(this);; 1530 ; 1531 Bool_t isStl = TClassEdit::IsSTLCont(fName);; 1532 ; 1533 if (!gInterpreter); 1534 ::Fatal(""TClass::Init"", ""g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:58346,Clear,Clear,58346,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['Clear'],['Clear']
Usability,"ass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TFileHandler; int fFileNum;  ; int fMask;  ; int fReadyMask;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TProof.h>. Inheritance diagram for TProofInputHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofInputHandler() [1/2]. TProofInputHandler::TProofInputHandler ; (; const TProofInputHandler & ; ). private . ◆ TProofInputHandler() [2/2]. TProofInputHandler::TProofInputHandler ; (; TProof * ; p, . TSocket * ; s . ). Constructor. ; Definition at line 160 of file TProof.cxx. Member Function Documentation. ◆ Notify(). Bool_t TProofInputHandler::Notify ; (; ). overridevirtual . Handle input. ; Reimplemented from TFileHandler.; Definition at line 169 of file TProof.cxx. ◆ operator=(). TProofInputHandler & TProofInputHandler::operator= ; (; const TProofInputHandler & ; ). private . ◆ ReadNotify(). Bool_t TProofInputHandler::ReadNotify ; (; ). inlineoverridevirtual . Notify when something can be read from the descriptor associated with this handler. ; Reimplemented from TFileHandler.; Definition at line 208 of file TProof.h. Member Data Documentation. ◆ fProof. TProof* TProofInputHandler::fProof. private . Definition at line 201 of file TProof.h. ◆ fSocket. TSocket* TProofInputHandler::fSocket. private . Definition at line 200 of file TProof.h. proof/proof/inc/TProof.h; proof/proof/src/TProof.cxx. TProofInputHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofInputHandler.html:17902,Guid,Guide,17902,doc/master/classTProofInputHandler.html,https://root.cern,https://root.cern/doc/master/classTProofInputHandler.html,1,['Guid'],['Guide']
Usability,"ass . ◆ Class_Name(). static const char * TMVA::IFitterTarget::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::IFitterTarget::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 61 of file IFitterTarget.h. ◆ DeclFileName(). static const char * TMVA::IFitterTarget::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 61 of file IFitterTarget.h. ◆ EstimatorFunction(). virtual Double_t TMVA::IFitterTarget::EstimatorFunction ; (; std::vector< Double_t > & ; parameters). pure virtual . Implemented in ROOT::Math::MultiGenFunctionFitness, TMVA::MethodCuts, TMVA::MethodFDA, TMVA::OptimizeConfigParameters, TMVA::ResultsMulticlass, TMVA::MethodMLP, and TMVA::MinuitFitter. ◆ IsA(). virtual TClass * TMVA::IFitterTarget::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented in TMVA::MethodCuts, TMVA::MethodFDA, TMVA::MethodMLP, TMVA::MinuitFitter, TMVA::OptimizeConfigParameters, and TMVA::ResultsMulticlass.; Definition at line 61 of file IFitterTarget.h. ◆ ProgressNotifier(). virtual void TMVA::IFitterTarget::ProgressNotifier ; (; TString ; , . TString ;  . ). inlinevirtual . Definition at line 57 of file IFitterTarget.h. ◆ Streamer(). virtual void TMVA::IFitterTarget::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TMVA::MethodCuts, TMVA::MethodFDA, TMVA::MethodMLP, TMVA::MinuitFitter, TMVA::OptimizeConfigParameters, and TMVA::ResultsMulticlass. ◆ StreamerNVirtual(). void TMVA::IFitterTarget::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file IFitterTarget.h. The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/IFitterTarget.h; tmva/tmva/src/IFitterTarget.cxx. TMVAIFitterTarget. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1IFitterTarget.html:3488,Guid,Guide,3488,doc/master/classTMVA_1_1IFitterTarget.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IFitterTarget.html,1,['Guid'],['Guide']
Usability,"ass Element> inline TVectorT<Element> &TVectorT<Element> Use(Int_t n, float* data); { return Use(0,n-1,data); }. template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(Int_t n, const float* data) const; { return Use(0,n-1,data); }. template<class Element> inline TVectorT<Element> &TVectorT<Element> Use(TVectorT<float>& v). template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(const TVectorT<float>& v) const. template<class Element> inline TVectorT<Element> TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const. template<class Element> inline const Element &TVectorT<Element> operator()(Int_t ind) const; Access a vector element. template<class Element> inline Element &TVectorT<Element> operator()(Int_t ind); Access a vector element. Int_t GetLwb() const; { return fRowLwb; }. Int_t GetUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetNoElements() const; { return fNrows; }. Element * GetMatrixArray(); { return fElements; }. const Element * GetMatrixArray() const; { return fElements; }. void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. void SetElements(const float* elements). TVectorT<Element> & Shift(Int_t row_shift); { fRowLwb += row_shift; return *this; }. TVectorT<Element> & ResizeTo(Int_t lwb, Int_t upb). TVectorT<Element> & ResizeTo(Int_t n); { return ResizeTo(0,n-1); }. TVectorT<Element> & Use(Int_t lwb, Int_t upb, float* data). const Element & operator[](Int_t index) const; { return (*this)(index); }. Element & operator[](Int_t index); { return (*this)(index); }. void Clear(Option_t* = """"). » Last changed: root/matrix:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVectorT_float_.html:18403,Clear,Clear,18403,root/html534/TVectorT_float_.html,https://root.cern,https://root.cern/root/html534/TVectorT_float_.html,1,['Clear'],['Clear']
Usability,"ass FuncVector>; class ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: ; double operator( const double * x) and if the derivatives are required: void Gradient( const double * x, double * g) and void FdF( const double * x, double &f, double * g) ; Definition at line 68 of file GSLMultiRootFunctionAdapter.h. Static Public Member Functions; static int Df (const gsl_vector *x, void *p, gsl_matrix *h);  ; static int F (const gsl_vector *x, void *p, gsl_vector *f);  ; static int FDf (const gsl_vector *x, void *p, gsl_vector *f, gsl_matrix *h);  evaluate derivative and function at the same time ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootFunctionAdapter.h>; Member Function Documentation. ◆ Df(). template<class FuncVector > . static int ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >::Df ; (; const gsl_vector * ; x, . void * ; p, . gsl_matrix * ; h . ). inlinestatic . Definition at line 87 of file GSLMultiRootFunctionAdapter.h. ◆ F(). template<class FuncVector > . static int ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >::F ; (; const gsl_vector * ; x, . void * ; p, . gsl_vector * ; f . ). inlinestatic . Definition at line 74 of file GSLMultiRootFunctionAdapter.h. ◆ FDf(). template<class FuncVector > . static int ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >::FDf ; (; const gsl_vector * ; x, . void * ; p, . gsl_vector * ; f, . gsl_matrix * ; h . ). inlinestatic . evaluate derivative and function at the same time ; Definition at line 104 of file GSLMultiRootFunctionAdapter.h. The documentation for this class was generated from the following file:; math/mathmore/src/GSLMultiRootFunctionAdapter.h. ROOTMathGSLMultiRootFunctionAdapter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionAdapter.html:2349,Guid,Guide,2349,doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionAdapter.html,1,['Guid'],['Guide']
Usability,"ass T > . using ROOT::TSeq< T >::value_type = T. Definition at line 76 of file TSeq.hxx. Constructor & Destructor Documentation. ◆ TSeq() [1/2]. template<class T > . ROOT::TSeq< T >::TSeq ; (; T ; theEnd). inline . Definition at line 79 of file TSeq.hxx. ◆ TSeq() [2/2]. template<class T > . ROOT::TSeq< T >::TSeq ; (; T ; theBegin, . T ; theEnd, . T ; theStep = 1 . ). inline . Definition at line 82 of file TSeq.hxx. Member Function Documentation. ◆ begin(). template<class T > . iterator ROOT::TSeq< T >::begin ; (; ); const. inline . Definition at line 172 of file TSeq.hxx. ◆ checkIntegralType(). template<class T > . void ROOT::TSeq< T >::checkIntegralType ; (; ). inlineprivate . Definition at line 69 of file TSeq.hxx. ◆ empty(). template<class T > . bool ROOT::TSeq< T >::empty ; (; ); const. inline . Definition at line 197 of file TSeq.hxx. ◆ end(). template<class T > . iterator ROOT::TSeq< T >::end ; (; ); const. inline . Definition at line 175 of file TSeq.hxx. ◆ front(). template<class T > . T const & ROOT::TSeq< T >::front ; (; ); const. inline . Definition at line 181 of file TSeq.hxx. ◆ operator[](). template<class T > . T ROOT::TSeq< T >::operator[] ; (; T ; s); const. inline . Definition at line 185 of file TSeq.hxx. ◆ size(). template<class T > . std::size_t ROOT::TSeq< T >::size ; (; ); const. inline . Definition at line 189 of file TSeq.hxx. ◆ step(). template<class T > . T ROOT::TSeq< T >::step ; (; ); const. inline . Definition at line 193 of file TSeq.hxx. Member Data Documentation. ◆ fBegin. template<class T > . const T ROOT::TSeq< T >::fBegin. private . Definition at line 72 of file TSeq.hxx. ◆ fEnd. template<class T > . const T ROOT::TSeq< T >::fEnd. private . Definition at line 73 of file TSeq.hxx. ◆ fStep. template<class T > . const T ROOT::TSeq< T >::fStep. private . Definition at line 74 of file TSeq.hxx. core/cont/inc/ROOT/TSeq.hxx. ROOTTSeq. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSeq.html:4286,Guid,Guide,4286,doc/master/classROOT_1_1TSeq.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSeq.html,1,['Guid'],['Guide']
Usability,ass TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGGotoDialog::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 129 of file TGTextEditDialogs.h. Member Data Documentation. ◆ fBGoTo. TGTextBuffer* TGGotoDialog::fBGoTo. protected . goto line number text buffer ; Definition at line 117 of file TGTextEditDialogs.h. ◆ fCancelButton. TGButton* TGGotoDialog::fCancelButton. protected . cancel button ; Definition at line 114 of file TGTextEditDialogs.h. ◆ fF1. TGCompositeFrame* TGGotoDialog::fF1. protected . Definition at line 112 of file TGTextEditDialogs.h. ◆ fF2. TGCompositeFrame * TGGotoDialog::fF2. protected . sub frames ; Definition at line 112 of file TGTextEditDialogs.h. ◆ fGoTo. TGTextEntry* TGGotoDialog::fGoTo. protected . goto line number entry widget ; Definition at line 116 of file TGTextEditDialogs.h. ◆ fGotoButton. TGButton* TGGotoDialog::fGotoButton. protected . goto button ; Definition at line 113 of file TGTextEditDialogs.h. ◆ fL1. TGLayoutHints* TGGotoDialog::fL1. protected . Definition at line 115 of file TGTextEditDialogs.h. ◆ fL21. TGLayoutHints * TGGotoDialog::fL21. protected . layout hints ; Definition at line 115 of file TGTextEditDialogs.h. ◆ fL5. TGLayoutHints * TGGotoDialog::fL5. protected . Definition at line 115 of file TGTextEditDialogs.h. ◆ fL6. TGLayoutHints * TGGotoDialog::fL6. protected . Definition at line 115 of file TGTextEditDialogs.h. ◆ fLGoTo. TGLabel* TGGotoDialog::fLGoTo. protected . goto label ; Definition at line 118 of file TGTextEditDialogs.h. ◆ fRetCode. Long_t* TGGotoDialog::fRetCode. protected . return code ; Definition at line 119 of file TGTextEditDialogs.h. Libraries for TGGotoDialog:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGTextEditDialogs.h; gui/gui/src/TGTextEditDialogs.cxx. TGGotoDialog. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGGotoDialog.html:40735,Guid,Guide,40735,doc/master/classTGGotoDialog.html,https://root.cern,https://root.cern/doc/master/classTGGotoDialog.html,1,['Guid'],['Guide']
Usability,"ass TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WaitFinishPrefetch ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCacheRead.html:4532,Clear,Clear,4532,doc/master/classTFileCacheRead.html,https://root.cern,https://root.cern/doc/master/classTFileCacheRead.html,1,['Clear'],['Clear']
Usability,"ass TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsStudy;  RooAbsStudy ()=default;  ;  RooAbsStudy (const char *name, const char *title);  Constructor. ;  ;  RooAbsStudy (const RooAbsStudy &other);  Copy constructor. ;  ;  ~RooAbsStudy () override;  Destructor. ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; RooLinkedList * detailedData ();  ; virtual void dump ();  ; void releaseDetailData ();  ; void storeDetailedOutput (bool flag);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooDataSet * summaryData ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenFitStudy.html:2578,Clear,Clear,2578,doc/master/classRooGenFitStudy.html,https://root.cern,https://root.cern/doc/master/classRooGenFitStudy.html,1,['Clear'],['Clear']
Usability,"ass can not have a ""pragma C++ class"" ; Definition at line 1564 of file TTreeProxyGenerator.cxx. ◆ ReleaseDefaultErrorHandler(). void ROOT::Internal::ReleaseDefaultErrorHandler ; (; ). Destructs resources that are taken by using the default error handler. ; This function is called during the destruction of gROOT. ; Definition at line 47 of file TErrorDefaultHandler.cxx. ◆ RequiresCleanup(). Bool_t ROOT::Internal::RequiresCleanup ; (; TObject & ; obj). inline . Definition at line 386 of file TROOT.h. ◆ ResetReadEntry(). void ROOT::Internal::ResetReadEntry ; (; TFriendProxy * ; fp). Helper function to call SetReadEntry on all TFriendProxy. ; Definition at line 39 of file TBranchProxyDirector.cxx. ◆ SetErrorSystemMsgHandler(). ErrorSystemMsgHandlerFunc_t ROOT::Internal::SetErrorSystemMsgHandler ; (; ErrorSystemMsgHandlerFunc_t ; h). Returns the previous system error message handler. ; Definition at line 56 of file TError.cxx. ◆ SetRequireCleanup(). void ROOT::Internal::SetRequireCleanup ; (; TObject & ; obj). inline . Definition at line 381 of file TROOT.h. ◆ Sha256(). void ROOT::Internal::Sha256 ; (; const unsigned char * ; data, . int ; len, . ULong64_t * ; fDigest . ). Definition at line 267 of file RSha256.hxx. Variable Documentation. ◆ gFreeIfTMapFile. ROOT::Internal::FreeIfTMapFile_t * ROOT::Internal::gFreeIfTMapFile = nullptr. Definition at line 141 of file TStorage.h. ◆ gGetMapFileMallocDesc. ROOT::Internal::GetMapFileMapllocDesc_t * ROOT::Internal::gGetMapFileMallocDesc = nullptr. Definition at line 142 of file TStorage.h. ◆ gGetROOT. GetROOTFun_t ROOT::Internal::gGetROOT = &GetROOT1. static . Definition at line 399 of file TROOT.cxx. ◆ gMmallocDesc. void * ROOT::Internal::gMmallocDesc = nullptr. Definition at line 143 of file TStorage.h. ◆ gROOTLocal. TROOT * ROOT::Internal::gROOTLocal = ROOT::GetROOT(). Definition at line 379 of file TROOT.h. ROOTInternal. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:41468,Guid,Guide,41468,doc/v632/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html,1,['Guid'],['Guide']
Usability,"ass describing current object ; Reimplemented from TGeoPatternFinder.; Definition at line 136 of file TGeoPatternFinder.h. ◆ IsOnBoundary(). Bool_t TGeoPatternX::IsOnBoundary ; (; const Double_t * ; point); const. overridevirtual . Checks if the current point is on division boundary. ; Reimplemented from TGeoPatternFinder.; Definition at line 340 of file TGeoPatternFinder.cxx. ◆ MakeCopy(). TGeoPatternFinder * TGeoPatternX::MakeCopy ; (; Bool_t ; reflect = kFALSE). overridevirtual . Make a copy of this finder. Reflect by Z if required. ; Implements TGeoPatternFinder.; Definition at line 403 of file TGeoPatternFinder.cxx. ◆ operator=(). TGeoPatternX & TGeoPatternX::operator= ; (; const TGeoPatternX & ; pf). assignment operator ; Definition at line 286 of file TGeoPatternFinder.cxx. ◆ SavePrimitive(). void TGeoPatternX::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Definition at line 415 of file TGeoPatternFinder.cxx. ◆ Streamer(). void TGeoPatternX::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoPatternFinder. ◆ StreamerNVirtual(). void TGeoPatternX::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 136 of file TGeoPatternFinder.h. ◆ UpdateMatrix(). void TGeoPatternX::UpdateMatrix ; (; Int_t ; idiv, . TGeoHMatrix & ; matrix . ); const. overridevirtual . Fills external matrix with the local one corresponding to the given division index. ; Reimplemented from TGeoPatternFinder.; Definition at line 331 of file TGeoPatternFinder.cxx. Libraries for TGeoPatternX:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoPatternFinder.h; geom/geom/src/TGeoPatternFinder.cxx. TGeoPatternX. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternX.html:18589,Guid,Guide,18589,doc/master/classTGeoPatternX.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternX.html,1,['Guid'],['Guide']
Usability,"ass describing current object ; Reimplemented from TGeoPatternFinder.; Definition at line 168 of file TGeoPatternFinder.h. ◆ IsOnBoundary(). Bool_t TGeoPatternY::IsOnBoundary ; (; const Double_t * ; point); const. overridevirtual . Checks if the current point is on division boundary. ; Reimplemented from TGeoPatternFinder.; Definition at line 534 of file TGeoPatternFinder.cxx. ◆ MakeCopy(). TGeoPatternFinder * TGeoPatternY::MakeCopy ; (; Bool_t ; reflect = kFALSE). overridevirtual . Make a copy of this finder. Reflect by Z if required. ; Implements TGeoPatternFinder.; Definition at line 597 of file TGeoPatternFinder.cxx. ◆ operator=(). TGeoPatternY & TGeoPatternY::operator= ; (; const TGeoPatternY & ; pf). assignment operator ; Definition at line 480 of file TGeoPatternFinder.cxx. ◆ SavePrimitive(). void TGeoPatternY::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Definition at line 609 of file TGeoPatternFinder.cxx. ◆ Streamer(). void TGeoPatternY::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoPatternFinder. ◆ StreamerNVirtual(). void TGeoPatternY::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 168 of file TGeoPatternFinder.h. ◆ UpdateMatrix(). void TGeoPatternY::UpdateMatrix ; (; Int_t ; idiv, . TGeoHMatrix & ; matrix . ); const. overridevirtual . Fills external matrix with the local one corresponding to the given division index. ; Reimplemented from TGeoPatternFinder.; Definition at line 525 of file TGeoPatternFinder.cxx. Libraries for TGeoPatternY:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoPatternFinder.h; geom/geom/src/TGeoPatternFinder.cxx. TGeoPatternY. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternY.html:18589,Guid,Guide,18589,doc/master/classTGeoPatternY.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternY.html,1,['Guid'],['Guide']
Usability,"ass describing current object ; Reimplemented from TGeoPatternFinder.; Definition at line 200 of file TGeoPatternFinder.h. ◆ IsOnBoundary(). Bool_t TGeoPatternZ::IsOnBoundary ; (; const Double_t * ; point); const. overridevirtual . Checks if the current point is on division boundary. ; Reimplemented from TGeoPatternFinder.; Definition at line 724 of file TGeoPatternFinder.cxx. ◆ MakeCopy(). TGeoPatternFinder * TGeoPatternZ::MakeCopy ; (; Bool_t ; reflect = kFALSE). overridevirtual . Make a copy of this finder. Reflect by Z if required. ; Implements TGeoPatternFinder.; Definition at line 787 of file TGeoPatternFinder.cxx. ◆ operator=(). TGeoPatternZ & TGeoPatternZ::operator= ; (; const TGeoPatternZ & ; pf). assignment operator ; Definition at line 671 of file TGeoPatternFinder.cxx. ◆ SavePrimitive(). void TGeoPatternZ::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Definition at line 799 of file TGeoPatternFinder.cxx. ◆ Streamer(). void TGeoPatternZ::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoPatternFinder. ◆ StreamerNVirtual(). void TGeoPatternZ::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 200 of file TGeoPatternFinder.h. ◆ UpdateMatrix(). void TGeoPatternZ::UpdateMatrix ; (; Int_t ; idiv, . TGeoHMatrix & ; matrix . ); const. overridevirtual . Fills external matrix with the local one corresponding to the given division index. ; Reimplemented from TGeoPatternFinder.; Definition at line 715 of file TGeoPatternFinder.cxx. Libraries for TGeoPatternZ:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoPatternFinder.h; geom/geom/src/TGeoPatternFinder.cxx. TGeoPatternZ. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternZ.html:18589,Guid,Guide,18589,doc/master/classTGeoPatternZ.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternZ.html,1,['Guid'],['Guide']
Usability,"ass documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (defualt: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/people?) - URL of CERN's xWho; Root.Html.Charset (default: ISO-8859-1) - HTML character set. IX. Behind the scene; Internally, THtml is just an API class that sets up the list of known; classes, and forwards API invocations to the ""work horses"".; TDocOutput; generates the output by letting a; TDocParser; object parse the sources, which in turn invokes objects deriving from; TDocDirective; to process directives.; . Function Members (Methods); public:. THtml(); virtual~THtml(); voidTObject::AbstractMethod(const char* method) const; voidAddMacroPath(const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConvert(const char* filename, const char* title, const char* dirname = """", const char* relpath = ""../"", Int_t includeOutput = kNoOutput, const char* context = """"); virtual voidTObject::Copy(TObject& object) const; Bool_tCopyFileFromEtcDir(const char* filename) const; virtual voidCreateAuxiliaryFiles() const; voidCreateHierarchy(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THtml.html:17570,Clear,Clear,17570,root/html528/THtml.html,https://root.cern,https://root.cern/root/html528/THtml.html,4,['Clear'],['Clear']
Usability,"ass for all named ROOT classes.Definition TNamed.h:29; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::fNameTString fNameDefinition TNamed.h:32; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::AddAtvoid AddAt(TObject *obj, Int_t idx) overrideAdd object at position ids.Definition TObjArray.cxx:254; TObjArray::AddAtAndExpandvirtual void AddAtAndExpand(TObject *obj, Int_t idx)Add object at position idx.Definition TObjArray.cxx:235; TObjArray::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the array AND delete all heap based objects.Definition TObjArray.cxx:356; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::UncheckedAtTObject * UncheckedAt(Int_t i) constDefinition TObjArray.h:84; TObjArray::RemoveAtTObject * RemoveAt(Int_t idx) overrideRemove object at index idx.Definition TObjArray.cxx:694; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TVirtualGeoPainterAbstract class for geometry painters.Definition TVirtualGeoPainter.h:32; bool; double; int. geomgeomsrcTGeoPhysicalNode.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPhysicalNode_8cxx_source.html:35322,Guid,Guide,35322,doc/master/TGeoPhysicalNode_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPhysicalNode_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ass function calls the dtor). ;  ; void UpdateInstCount () const;  Histogram all objects according to their classes. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjectTable.html:8905,Clear,Clear,8905,doc/master/classTObjectTable.html,https://root.cern,https://root.cern/doc/master/classTObjectTable.html,1,['Clear'],['Clear']
Usability,"ass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsInInterval(const RooArgSet&) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Double_tLowerLimit(); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::SimpleInterval&operator=(const RooStats::SimpleInterval&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMembe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SimpleInterval.html:3760,Simpl,SimpleInterval,3760,root/html526/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__SimpleInterval.html,2,['Simpl'],['SimpleInterval']
Usability,"ass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddNewSurface(); voidAlphaChanged(); voidAlphaChanged(Int_t alpha); virtual voidTObject::AppendPad(Option_t* option = """"); voidApplyAlpha(); voidApplyGridParameters(); voidApplyPlanes(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); voidBoxCutToggled(); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); voidColorChanged(Pixel_t pixelColor); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroyS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGL5DDataSetEditor.html:1859,Clear,Clear,1859,root/html528/TGL5DDataSetEditor.html,https://root.cern,https://root.cern/root/html528/TGL5DDataSetEditor.html,6,['Clear'],['Clear']
Usability,"ass::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TPave.; Definition at line 142 of file TPaveClass.cxx. ◆ SetClasses(). void TPaveClass::SetClasses ; (; const char * ; classes = ""this"", . Option_t * ; option = ""ID"" . ). virtual . Set classes. ; Definition at line 98 of file TPaveClass.cxx. ◆ SetClassTree(). virtual void TPaveClass::SetClassTree ; (; TClassTree * ; classtree). inlinevirtual . Definition at line 42 of file TPaveClass.h. ◆ ShowClassesUsedBy(). void TPaveClass::ShowClassesUsedBy ; (; const char * ; classes = ""this""). virtual . Show classes used by. ; Definition at line 122 of file TPaveClass.cxx. ◆ ShowClassesUsing(). void TPaveClass::ShowClassesUsing ; (; const char * ; classes = ""this""). virtual . Show classes using. ; Definition at line 132 of file TPaveClass.cxx. ◆ ShowLinks(). void TPaveClass::ShowLinks ; (; Option_t * ; option = ""HMR""). virtual . Set link options in the ClassTree object. . ""C"" show References from code; ""H"" show ""Has a"" relations; ""M"" show Multiple Inheritance; ""R"" show References from data members . Definition at line 113 of file TPaveClass.cxx. ◆ Streamer(). void TPaveClass::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TPave. ; Reimplemented from TPave. ◆ StreamerNVirtual(). void TPaveClass::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 45 of file TPaveClass.h. Member Data Documentation. ◆ fClassTree. TClassTree* TPaveClass::fClassTree. protected . Pointer to the TClassTree referencing this object. ; Definition at line 26 of file TPaveClass.h. Libraries for TPaveClass:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpad/inc/TPaveClass.h; graf2d/gpad/src/TPaveClass.cxx. TPaveClass. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveClass.html:28530,Guid,Guide,28530,doc/master/classTPaveClass.html,https://root.cern,https://root.cern/doc/master/classTPaveClass.html,1,['Guid'],['Guide']
Usability,"assDef_StreamerNVirtual_b). inline . Definition at line 81 of file MetropolisHastings.h. Member Data Documentation. ◆ fChainParams. RooArgSet RooStats::MetropolisHastings::fChainParams. protected . RooRealVars that are stored in the chain. ; Definition at line 70 of file MetropolisHastings.h. ◆ fFunction. RooAbsReal* RooStats::MetropolisHastings::fFunction = nullptr. protected . function that will generate likelihood values ; Definition at line 68 of file MetropolisHastings.h. ◆ fNumBurnInSteps. Int_t RooStats::MetropolisHastings::fNumBurnInSteps = 0. protected . number of iterations to discard as burn-in, starting from the first ; Definition at line 73 of file MetropolisHastings.h. ◆ fNumIters. Int_t RooStats::MetropolisHastings::fNumIters = 0. protected . number of iterations to run metropolis algorithm ; Definition at line 72 of file MetropolisHastings.h. ◆ fParameters. RooArgSet RooStats::MetropolisHastings::fParameters. protected . RooRealVars that define all parameter space. ; Definition at line 69 of file MetropolisHastings.h. ◆ fPropFunc. ProposalFunction* RooStats::MetropolisHastings::fPropFunc = nullptr. protected . Proposal function for MCMC integration. ; Definition at line 71 of file MetropolisHastings.h. ◆ fSign. enum FunctionSign RooStats::MetropolisHastings::fSign = kSignUnset. protected . whether the likelihood is negative (like NLL) or positive ; Definition at line 74 of file MetropolisHastings.h. ◆ fType. enum FunctionType RooStats::MetropolisHastings::fType = kTypeUnset. protected . whether the likelihood is on a regular, log, (or other) scale ; Definition at line 75 of file MetropolisHastings.h. Libraries for RooStats::MetropolisHastings:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/MetropolisHastings.h; roofit/roostats/src/MetropolisHastings.cxx. RooStatsMetropolisHastings. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MetropolisHastings.html:20102,Guid,Guide,20102,doc/master/classRooStats_1_1MetropolisHastings.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MetropolisHastings.html,1,['Guid'],['Guide']
Usability,"assDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTextView;  TGTextView (const TGWindow *parent, UInt_t w, UInt_t h, const char *string, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  TGTextView (const TGWindow *parent, UInt_t w, UInt_t h, TGText *text, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  TGTextView (const TGWindow *parent=nullptr, UInt_t w=1, UInt_t h=1, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  ~TGTextView () override;  Cleanup text view widget. ;  ; virtual void AddLine (const char *string);  Add a line of text to the view widget. ;  ; virtual void AddLineFast (const char *string);  Add a line of text to the view widget. ;  ; virtual void AddText (TGText *text);  Add text to the view widget. ;  ; virtual void AdjustWidth ();  Adjust widget width to longest line. ;  ; void Clear (Option_t *="""") override;  Clear text view widget. ;  ; virtual void Clicked (const char *word);  ; virtual Bool_t Copy ();  Copy selected text to clipboard. ;  ; virtual void DataChanged ();  ; virtual void DataDropped (const char *fname);  ; virtual void DoubleClicked (const char *word);  ; TGText * GetText () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in text editor. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle mouse crossing event. ;  ; Bool_t HandleDNDDrop (TDNDData *data) override;  Handle Drop event. ;  ; Atom_t HandleDNDEnter (Atom_t *typelist) override;  Handle Drag Enter event. ;  ; Bool_t HandleDNDLeave () override;  Handle Drag Leave event. ;  ; Atom_t HandleDNDPosition (Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot) override;  Handle Drag position event. ;  ; Bool_t HandleDoubleClick (Event_t *event) override;  handle double click ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in the text ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextViewostream.html:2037,Clear,Clear,2037,doc/master/classTGTextViewostream.html,https://root.cern,https://root.cern/doc/master/classTGTextViewostream.html,2,['Clear'],['Clear']
Usability,"assDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTextView;  TGTextView (const TGWindow *parent, UInt_t w, UInt_t h, const char *string, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  TGTextView (const TGWindow *parent, UInt_t w, UInt_t h, TGText *text, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  TGTextView (const TGWindow *parent=nullptr, UInt_t w=1, UInt_t h=1, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  ~TGTextView () override;  Cleanup text view widget. ;  ; virtual void AddLine (const char *string);  Add a line of text to the view widget. ;  ; virtual void AddLineFast (const char *string);  Add a line of text to the view widget. ;  ; virtual void AddText (TGText *text);  Add text to the view widget. ;  ; virtual void AdjustWidth ();  Adjust widget width to longest line. ;  ; void Clear (Option_t *="""") override;  Clear text view widget. ;  ; virtual void Clicked (const char *word);  ; virtual void DataChanged ();  ; virtual void DataDropped (const char *fname);  ; virtual void DoubleClicked (const char *word);  ; TGText * GetText () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in text editor. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle mouse crossing event. ;  ; Bool_t HandleDNDDrop (TDNDData *data) override;  Handle Drop event. ;  ; Atom_t HandleDNDEnter (Atom_t *typelist) override;  Handle Drag Enter event. ;  ; Bool_t HandleDNDLeave () override;  Handle Drag Leave event. ;  ; Atom_t HandleDNDPosition (Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot) override;  Handle Drag position event. ;  ; Bool_t HandleDoubleClick (Event_t *event) override;  handle double click ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in the text editor widget. ;  ; Bool_t HandleSelectionClear (Event_t *event",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEdit.html:7764,Clear,Clear,7764,doc/master/classTGTextEdit.html,https://root.cern,https://root.cern/doc/master/classTGTextEdit.html,2,['Clear'],['Clear']
Usability,"assInfo_IsLoaded(ClassInfo_t* info) const; virtual boolClassInfo_IsValid(ClassInfo_t* info) const; virtual boolClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; virtual const char*ClassInfo_Name(ClassInfo_t* info) const; virtual void*ClassInfo_New(ClassInfo_t* info) const; virtual void*ClassInfo_New(ClassInfo_t* info, int n) const; virtual void*ClassInfo_New(ClassInfo_t* info, void* arena) const; virtual void*ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; virtual intClassInfo_Next(ClassInfo_t* info) const; virtual Long_tClassInfo_Property(ClassInfo_t* info) const; virtual intClassInfo_RootFlag(ClassInfo_t* info) const; virtual intClassInfo_Size(ClassInfo_t* info) const; virtual Long_tClassInfo_Tagnum(ClassInfo_t* info) const; virtual const char*ClassInfo_Title(ClassInfo_t* info) const; virtual const char*ClassInfo_TmpltName(ClassInfo_t* info) const; virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearFileBusy(); virtual voidClearStack(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreateListOfBaseClasses(TClass* cl); virtual voidCreateListOfDataMembers(TClass* cl); virtual voidCreateListOfMethodArgs(TFunction* m); virtual voidCreateListOfMethods(TClass* cl); virtual intDataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; virtual voidDataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; virtual DataMemberInfo_t*DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; virtual DataMemberInfo_t*DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; virtual boolDataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; virtual intDataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; virtual const char*DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; virtual intDataMemberInfo_Next(DataMemb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:5383,Clear,Clear,5383,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,4,['Clear'],['Clear']
Usability,"ass_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TASPaletteEditor.h>. Inheritance diagram for TASPaletteEditor::PaintPalette:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ PaintPalette(). TASPaletteEditor::PaintPalette::PaintPalette ; (; TImagePalette ** ; palette, . TAttImage * ; attImage . ). inline . Definition at line 47 of file TASPaletteEditor.h. Member Function Documentation. ◆ Paint(). void TASPaletteEditor::PaintPalette::Paint ; (; Option_t * ; option = """"). overridevirtual . Actually paint the paletter. ; Reimplemented from TObject.; Definition at line 892 of file TASPaletteEditor.cxx. Member Data Documentation. ◆ fAttImage. TAttImage* TASPaletteEditor::PaintPalette::fAttImage. protected . Definition at line 45 of file TASPaletteEditor.h. ◆ fPalette. TImagePalette** TASPaletteEditor::PaintPalette::fPalette. protected . Definition at line 44 of file TASPaletteEditor.h. Libraries for TASPaletteEditor::PaintPalette:. [legend]; The documentation for this class was generated from the following files:; graf2d/asimage/inc/TASPaletteEditor.h; graf2d/asimage/src/TASPaletteEditor.cxx. TASPaletteEditorPaintPalette. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html:10823,Guid,Guide,10823,doc/master/classTASPaletteEditor_1_1PaintPalette.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html,1,['Guid'],['Guide']
Usability,ass_Name(). static const char * TGUndockedFrame::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGUndockedFrame::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TGDockableFrame.h. ◆ CloseWindow(). void TGUndockedFrame::CloseWindow ; (; ). overridevirtual . Close undocked frame (called via WM close button). ; Reimplemented from TGMainFrame.; Definition at line 213 of file TGDockableFrame.cxx. ◆ DeclFileName(). static const char * TGUndockedFrame::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TGDockableFrame.h. ◆ FixSize(). void TGUndockedFrame::FixSize ; (; ). Fix the size of the undocked frame so it cannot be changed via the WM. ; Definition at line 203 of file TGDockableFrame.cxx. ◆ IsA(). TClass * TGUndockedFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGTransientFrame.; Definition at line 78 of file TGDockableFrame.h. ◆ operator=(). TGUndockedFrame & TGUndockedFrame::operator= ; (; const TGUndockedFrame & ; ). privatedelete . ◆ Streamer(). void TGUndockedFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGTransientFrame. ◆ StreamerNVirtual(). void TGUndockedFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TGDockableFrame.h. Member Data Documentation. ◆ fDockable. TGDockableFrame* TGUndockedFrame::fDockable. protected . orignal dockable frame ; Definition at line 69 of file TGDockableFrame.h. Libraries for TGUndockedFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGDockableFrame.h; gui/gui/src/TGDockableFrame.cxx. TGUndockedFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:40 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGUndockedFrame.html:39034,Guid,Guide,39034,doc/master/classTGUndockedFrame.html,https://root.cern,https://root.cern/doc/master/classTGUndockedFrame.html,1,['Guid'],['Guide']
Usability,"assed the filters. For the most common; // types, the type of the values stored in the column is automatically; // guessed.; auto hist = d.Filter(cutb1).Histo1D();; std::cout << ""Filled h "" << hist->GetEntries() << "" times, mean: "" << hist->GetMean() << std::endl;; ; // ### `Foreach` action; // The most generic action of all: an operation is applied to all entries.; // In this case we fill a histogram. In some sense this is a violation of a; // purely functional paradigm - C++ allows to do that.; TH1F h(""h"", ""h"", 12, -1, 11);; d.Filter([](int b2) { return b2 % 2 == 0; }, {""b2""}).Foreach([&h](double b1) { h.Fill(b1); });; ; std::cout << ""Filled h with "" << h.GetEntries() << "" entries"" << std::endl;; ; // ## Express your chain of operations with clarity!; // We are discussing an example here but it is not hard to imagine much more; // complex pipelines of actions acting on data. Those might require code; // which is well organised, for example allowing to conditionally add filters; // or again to clearly separate filters and actions without the need of; // writing the entire pipeline on one line. This can be easily achieved.; // We'll show this by re-working the `Count` example:; auto cutb1_result = d.Filter(cutb1);; auto cutb1b2_result = d.Filter(cutb1b2, {""b2"", ""b1""});; auto cutb1_cutb1b2_result = cutb1_result.Filter(cutb1b2, {""b2"", ""b1""});; // Now we want to count:; auto evts_cutb1_result = cutb1_result.Count();; auto evts_cutb1b2_result = cutb1b2_result.Count();; auto evts_cutb1_cutb1b2_result = cutb1_cutb1b2_result.Count();; ; std::cout << ""Events passing cutb1: "" << *evts_cutb1_result << std::endl; << ""Events passing cutb1b2: "" << *evts_cutb1b2_result << std::endl; << ""Events passing both: "" << *evts_cutb1_cutb1b2_result << std::endl;; ; // ## Calculating quantities starting from existing columns; // Often, operations need to be carried out on quantities calculated starting; // from the ones present in the columns. We'll create in this example a third; // column",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df001__introduction_8C.html:5055,clear,clearly,5055,doc/master/df001__introduction_8C.html,https://root.cern,https://root.cern/doc/master/df001__introduction_8C.html,1,['clear'],['clearly']
Usability,"asses.Definition TGeoVolume.h:43; TGeoVolume::RandomRaysvoid RandomRays(Int_t nrays=10000, Double_t startx=0, Double_t starty=0, Double_t startz=0, const char *target_vol=nullptr, Bool_t check_norm=kFALSE)Random raytracing method.Definition TGeoVolume.cxx:1409; TGeoVolume::AddNodevirtual TGeoNode * AddNode(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:975; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; TGeoVolume::SetLineColorvoid SetLineColor(Color_t lcolor) overrideSet the line color.Definition TGeoVolume.cxx:2169; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStopwatch::Printvoid Print(Option_t *option="""") const overridePrint the real and cpu time passed between the start and stop events.Definition TStopwatch.cxx:219; TStringBasic string class.Definition TString.h:139; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TView3DThe 3D view class.Definition TView3D.h:29; TView3D::SetParallelvoid SetParallel() overrideSet the parallel option (default).Definition TView3D.cxx:1304; TView3D::Sidevoid Side() overrideDefinition TView3D.cxx:1933; AuthorAndrei Gheata ; Definition in file parallel_world.C. tutorialsgeomparallel_world.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/parallel__world_8C.html:10454,Guid,Guide,10454,doc/master/parallel__world_8C.html,https://root.cern,https://root.cern/doc/master/parallel__world_8C.html,1,['Guid'],['Guide']
Usability,"assification.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ;  TMVAClassificationApplication.C;   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ;  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ;  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ;  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ;  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ;  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ;  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ;  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ;  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ;  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ;  TMVARegression.C;   This macro provides examples for the training and testing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:5960,simpl,simple,5960,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['simpl'],['simple']
Usability,"ast one material from the ""Materials"" shutter item category. Generally, for creating objects, the interface is always in the TGeoManagerEditor in different categories - one should just provide a name and requested parameters.; Create a shape that will be used for the top volume within the ""Shapes"" category. For the moment, the shapes that have editors are Box, Para, Trd1, Trd2, Tube, Tube segment, Cone, Cone segment, Hype, Pcon, Torus and Sphere.; Create a medium from one of the existing materials from the ""Medium"" category. You will notice that some categories as ""Volume"" and ""Medium"" are inactive at the beginning because at that time there is no material yet (for making a medium) and no shape (for making a volume). These categories are dynamically activated once all the required components are defined.; Create a volume from the ""Volumes"" category. You will notice that contrary to the other editors, the volume editor is opened in a tab, not transient - this is because it is more complex.; Go back to ""General"" category and select the newly created volume as the top one (you can do it also from the volume category). This is just for starting. To create some hierarchy, one has to create several other volumes and the matrices to position them. Once this is done, use the volume editor interface to:; add/remove daughters, change shape, edit position of daughters; change visualization settings; divide the volume (only if there are no daughters yet). Close the geometry from the ""General"" category. . Modules;  GDML tools;  GDML tools for geometry classes. ;  ;  Geometry classes;  The Geometry related classes. ;  ;  Materials;  ;  Shapes;  Shapes are geometrical objects that provide the basic modeling functionality. ;  ;  Geometry builder;  The Geometry builder related classes. ;  ;  Geometry painter;  The Geometry painter, checker, overlap and track related classes. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:146082,Guid,Guide,146082,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['Guid'],['Guide']
Usability,"ast send packetDefinition RWebWindow.hxx:88; ROOT::RWebWindow::WebConn::fKeyUsedint fKeyUsed! key value used to verify connectionDefinition RWebWindow.hxx:73; ROOT::RWebWindow::WebConn::~WebConn~WebConn()Destructor for WebConn Notify special HTTP request which blocks headless browser from exit.Definition RWebWindow.cxx:42; ROOT::RWebWindow::WebConn::fMutexstd::mutex fMutex! mutex must be used to protect all following dataDefinition RWebWindow.hxx:81; ROOT::RWebWindow::WebConn::fDoingSendbool fDoingSend! true when performing send operationDefinition RWebWindow.hxx:86; ROOT::RWebWindow::WebConn::fSendCreditsint fSendCredits! how many send operation can be performed without confirmation from other sideDefinition RWebWindow.hxx:84; ROOT::RWebWindow::WebConn::WebConnWebConn(unsigned connid, unsigned wsid)Definition RWebWindow.hxx:93; ROOT::RWebWindow::WebConn::fNewKeystd::string fNewKey! new key if connection request reloadDefinition RWebWindow.hxx:74; ROOT::RWebWindow::WebConn::fWSIdunsigned fWSId! websocket idDefinition RWebWindow.hxx:79; ROOT::RWebWindow::WebConn::fSendStamptimestamp_t fSendStamp! last server operation, always used from window threadDefinition RWebWindow.hxx:77; ROOT::RWebWindow::WebConn::fRecvStamptimestamp_t fRecvStamp! last receive operation, protected with connection mutexDefinition RWebWindow.hxx:82; ROOT::RWebWindow::WebConn::fRecvCountint fRecvCount! number of received packets, should return back with next sendingDefinition RWebWindow.hxx:83; ROOT::RWebWindow::WebConn::ResetStampsvoid ResetStamps()Definition RWebWindow.hxx:101; ROOT::RWebWindow::WebConn::fQueuestd::queue< QueueItem > fQueue! output queueDefinition RWebWindow.hxx:89; ROOT::RWebWindow::WebConn::fDisplayHandlestd::unique_ptr< RWebDisplayHandle > fDisplayHandle! handle assigned with started web display (when exists)Definition RWebWindow.hxx:75. guiwebdisplayincROOTRWebWindow.hxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:08:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:51157,Guid,Guide,51157,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['Guid'],['Guide']
Usability,ast. Float_t TVirtualPacketizer::fMBsReadLast. protected . Definition at line 92 of file TVirtualPacketizer.h. ◆ fMinPacketTime. Double_t TVirtualPacketizer::fMinPacketTime. protected . Definition at line 66 of file TVirtualPacketizer.h. ◆ fProcTime. Float_t TVirtualPacketizer::fProcTime. protected . Definition at line 82 of file TVirtualPacketizer.h. ◆ fProcTimeLast. Float_t TVirtualPacketizer::fProcTimeLast. protected . Definition at line 89 of file TVirtualPacketizer.h. ◆ fProgress. TTimer* TVirtualPacketizer::fProgress. protected . Definition at line 73 of file TVirtualPacketizer.h. ◆ fProgressPerf. TNtuple* TVirtualPacketizer::fProgressPerf. protected . Definition at line 88 of file TVirtualPacketizer.h. ◆ fProgressStatus. TProofProgressStatus* TVirtualPacketizer::fProgressStatus. protected . Definition at line 72 of file TVirtualPacketizer.h. ◆ fReportPeriod. Float_t TVirtualPacketizer::fReportPeriod. protected . Definition at line 95 of file TVirtualPacketizer.h. ◆ fSlaveStats. TMap* TVirtualPacketizer::fSlaveStats. protected . Definition at line 70 of file TVirtualPacketizer.h. ◆ fStartTime. TTime TVirtualPacketizer::fStartTime. protected . Definition at line 80 of file TVirtualPacketizer.h. ◆ fStop. Bool_t TVirtualPacketizer::fStop. protected . Definition at line 100 of file TVirtualPacketizer.h. ◆ fTimeUpdt. Float_t TVirtualPacketizer::fTimeUpdt. protected . Definition at line 83 of file TVirtualPacketizer.h. ◆ fTotalEntries. Long64_t TVirtualPacketizer::fTotalEntries. protected . Definition at line 75 of file TVirtualPacketizer.h. ◆ fUseEstOpt. EUseEstOpt TVirtualPacketizer::fUseEstOpt. protected . Definition at line 97 of file TVirtualPacketizer.h. ◆ fValid. Bool_t TVirtualPacketizer::fValid. protected . Definition at line 99 of file TVirtualPacketizer.h. proof/proof/inc/TVirtualPacketizer.h; proof/proof/src/TVirtualPacketizer.cxx. TVirtualPacketizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPacketizer.html:24793,Guid,Guide,24793,doc/master/classTVirtualPacketizer.html,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer.html,1,['Guid'],['Guide']
Usability,"asurement(const char* Name, const char* Title = """"). void SetOutputFilePrefix(const string& prefix); set output prefix. { fOutputFilePrefix = prefix; }. std::string GetOutputFilePrefix(); retrieve prefix for output files. { return fOutputFilePrefix; }. void SetPOI(const string& POI); insert PoI at beginning of vector of PoIs. { fPOI.insert( fPOI.begin(), POI ); }. void AddPOI(const string& POI); append parameter to vector of PoIs. { fPOI.push_back(POI); }. std::string GetPOI(unsigned int i = 0); get name of PoI at given index. { return fPOI.at(i); }. std::vector<std::string>& GetPOIList(); get vector of PoI names. { return fPOI; }. void ClearConstantParams(); empty vector of constant parameters. { fConstantParams.clear(); }. std::vector< std::string >& GetConstantParams(); get vector of all constant parameters. { return fConstantParams; }. std::map<std::string, double>& GetParamValues(); get map: parameter name <--> parameter value. { return fParamValues; }. void ClearParamValues(); clear map of parameter values. { fParamValues.clear(); }. void AddFunctionObject(const RooStats::HistFactory::PreprocessFunction function); add a preprocess function object. { fFunctionObjects.push_back( function ); }. void SetFunctionObjects(vector<RooStats::HistFactory::PreprocessFunction> objects); get vector of defined function objects. { fFunctionObjects = objects; }. std::vector< RooStats::HistFactory::PreprocessFunction >& GetFunctionObjects(); { return fFunctionObjects; }. std::vector< RooStats::HistFactory::Asimov >& GetAsimovDatasets(); get vector of defined Asimov Datasets. { return fAsimovDatasets; }. void AddAsimovDataset(RooStats::HistFactory::Asimov dataset); add an Asimov Dataset. { fAsimovDatasets.push_back(dataset); }. void SetLumi(double Lumi); set integrated luminosity used to normalise histograms (if NormalizeByTheory is true for this sample). { fLumi = Lumi; }. void SetLumiRelErr(double RelErr); set relative uncertainty on luminosity. { fLumiRelErr = RelErr; }. doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__Measurement.html:12820,Clear,ClearParamValues,12820,root/html602/RooStats__HistFactory__Measurement.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__Measurement.html,4,"['Clear', 'clear']","['ClearParamValues', 'clear']"
Usability,"at gives TGaxis ;  timeSeriesFromCSV.C This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017 ;  timeSeriesFromCSV.py This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017 ;  timeSeriesFromCSV_TDF.C This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017 ;  waves.C Hint: Spherical waves ;  zdemo.C This macro is an example of graphs in log scales with annotations ;  zones.C Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  zones.py Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  ► gui;  buttonChangelabel.CThis macro gives an example for changing text button labels anytime the Start or Pause buttons are clicked ;  buttongroupState.CA simple example that shows the enabled and disabled state of a button group with radio and check buttons ;  buttonsLayout.CThis macro gives an example of different buttons' layout ;  buttonTest.CThis macro gives an example of how to set/change text button attributes ;  calendar.CThis macro gives an example of how to use html widget to display tabular data ;  CPUMeter.CSimple macro showing capabilities of the TGSpeedo widget ;  customContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample showing how to customize a context menu for a class ;  drag_and_drop.CThis tutorial illustrates how to use drag and drop within ROOT ;  exec3.CExample of using signal/slot in TCanvas/TPad to get feedback about processed events ;  exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that eac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:117328,Pause,Pause,117328,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,3,['Pause'],['Pause']
Usability,"at line 110 of file TGProgressBar.cxx. ◆ IsA(). TClass * TGProgressBar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGFrame.; Reimplemented in TGVProgressBar.; Definition at line 90 of file TGProgressBar.h. ◆ Percent(). virtual void TGProgressBar::Percent ; (; Bool_t ; on). inlinevirtual . Reimplemented in TGVProgressBar.; Definition at line 78 of file TGProgressBar.h. ◆ Reset(). void TGProgressBar::Reset ; (; ). virtual . Reset progress bar (i.e. set pos to 0). ; Definition at line 126 of file TGProgressBar.cxx. ◆ SavePrimitive(). void TGProgressBar::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save progress bar parameters as a C++ statement(s) on output stream out. ; Reimplemented from TGFrame.; Reimplemented in TGVProgressBar.; Definition at line 396 of file TGProgressBar.cxx. ◆ SetBarColor() [1/2]. void TGProgressBar::SetBarColor ; (; const char * ; color = ""blue""). Set progress bar color. ; Definition at line 166 of file TGProgressBar.cxx. ◆ SetBarColor() [2/2]. void TGProgressBar::SetBarColor ; (; Pixel_t ; color). virtual . Set progress bar color. ; Definition at line 156 of file TGProgressBar.cxx. ◆ SetBarType(). void TGProgressBar::SetBarType ; (; EBarType ; type). Set bar type. ; Definition at line 146 of file TGProgressBar.cxx. ◆ SetFillType(). void TGProgressBar::SetFillType ; (; EFillType ; type). Set fill type. ; Definition at line 136 of file TGProgressBar.cxx. ◆ SetForegroundColor(). void TGProgressBar::SetForegroundColor ; (; Pixel_t ; pixel). overridevirtual . Change text color drawing. ; Reimplemented from TGFrame.; Definition at line 207 of file TGProgressBar.cxx. ◆ SetMax(). void TGProgressBar::SetMax ; (; Float_t ; max). inline . Definition at line 82 of file TGProgressBar.h. ◆ SetMin(). void TGProgressBar::SetMin ; (; Float_t ; min). inline . Definition at line 81 of file TGProgressBar.h. ◆ SetPosition(). void TGProgressBar::SetPosition ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGProgressBar.html:35046,progress bar,progress bar,35046,doc/master/classTGProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGProgressBar.html,1,['progress bar'],['progress bar']
Usability,"at line 112 of file MsgLogger.h. ◆ fgColorMap. std::atomic< const std::map< TMVA::EMsgType, std::string > * > TMVA::MsgLogger::fgColorMap {0}. staticprivate . matches output types with terminal colors ; Definition at line 118 of file MsgLogger.h. ◆ fgInhibitOutput. std::atomic< Bool_t > TMVA::MsgLogger::fgInhibitOutput {kFALSE}. staticprivate . flag to suppress all output ; Definition at line 115 of file MsgLogger.h. ◆ fgMaxSourceSize. const UInt_t TMVA::MsgLogger::fgMaxSourceSize = 25. staticprivate . maximum length of source name ; Definition at line 113 of file MsgLogger.h. ◆ fgOutputSupressed. std::atomic<Bool_t> TMVA::MsgLogger::fgOutputSupressed. staticprivate . disable the output globally (used by generic booster) ; Definition at line 114 of file MsgLogger.h. ◆ fgPrefix. const std::string TMVA::MsgLogger::fgPrefix = """". staticprivate . the prefix of the source name ; Definition at line 110 of file MsgLogger.h. ◆ fgSuffix. const std::string TMVA::MsgLogger::fgSuffix = "": "". staticprivate . suffix following source name ; Definition at line 111 of file MsgLogger.h. ◆ fgTypeMap. std::atomic< const std::map< TMVA::EMsgType, std::string > * > TMVA::MsgLogger::fgTypeMap {0}. staticprivate . matches output types with strings ; Definition at line 117 of file MsgLogger.h. ◆ fMinType. EMsgType TMVA::MsgLogger::fMinType. private . minimum type for output ; Definition at line 119 of file MsgLogger.h. ◆ fObjSource. const TObject* TMVA::MsgLogger::fObjSource. private . the source TObject (used for name) ; Definition at line 108 of file MsgLogger.h. ◆ fStrSource. std::string TMVA::MsgLogger::fStrSource. private . alternative string source ; Definition at line 109 of file MsgLogger.h. Libraries for TMVA::MsgLogger:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MsgLogger.h; tmva/tmva/src/MsgLogger.cxx. TMVAMsgLogger. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MsgLogger.html:19281,Guid,Guide,19281,doc/master/classTMVA_1_1MsgLogger.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MsgLogger.html,1,['Guid'],['Guide']
Usability,"at line 121 of file TGeoOpticalSurface.cxx. ◆ StringToModel(). TGeoOpticalSurface::ESurfaceModel TGeoOpticalSurface::StringToModel ; (; const char * ; model). static . Definition at line 87 of file TGeoOpticalSurface.cxx. ◆ StringToType(). TGeoOpticalSurface::ESurfaceType TGeoOpticalSurface::StringToType ; (; const char * ; type). static . Definition at line 48 of file TGeoOpticalSurface.cxx. ◆ TypeToString(). const char * TGeoOpticalSurface::TypeToString ; (; ESurfaceType ; type). static . Definition at line 70 of file TGeoOpticalSurface.cxx. Member Data Documentation. ◆ fConstProperties. TList TGeoOpticalSurface::fConstProperties. private . Definition at line 106 of file TGeoOpticalSurface.h. ◆ fFinish. ESurfaceFinish TGeoOpticalSurface::fFinish = kFpolished. private . Definition at line 99 of file TGeoOpticalSurface.h. ◆ fModel. ESurfaceModel TGeoOpticalSurface::fModel = kMglisur. private . Definition at line 98 of file TGeoOpticalSurface.h. ◆ fName. std::string TGeoOpticalSurface::fName = """". private . Definition at line 96 of file TGeoOpticalSurface.h. ◆ fPolish. Double_t TGeoOpticalSurface::fPolish = 0.0. private . Definition at line 103 of file TGeoOpticalSurface.h. ◆ fProperties. TList TGeoOpticalSurface::fProperties. private . Definition at line 105 of file TGeoOpticalSurface.h. ◆ fSigmaAlpha. Double_t TGeoOpticalSurface::fSigmaAlpha = 0.0. private . Definition at line 102 of file TGeoOpticalSurface.h. ◆ fType. ESurfaceType TGeoOpticalSurface::fType = kTdielectric_metal. private . Definition at line 97 of file TGeoOpticalSurface.h. ◆ fValue. Double_t TGeoOpticalSurface::fValue = 0.0. private . Definition at line 101 of file TGeoOpticalSurface.h. Libraries for TGeoOpticalSurface:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoOpticalSurface.h; geom/geom/src/TGeoOpticalSurface.cxx. TGeoOpticalSurface. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoOpticalSurface.html:24829,Guid,Guide,24829,doc/master/classTGeoOpticalSurface.html,https://root.cern,https://root.cern/doc/master/classTGeoOpticalSurface.html,1,['Guid'],['Guide']
Usability,at line 143 of file TGDockableFrame.cxx. Member Function Documentation. ◆ Class(). static TClass * TGDockHideButton::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGDockHideButton::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGDockHideButton::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 58 of file TGDockableFrame.h. ◆ DeclFileName(). static const char * TGDockHideButton::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 58 of file TGDockableFrame.h. ◆ DoRedraw(). void TGDockHideButton::DoRedraw ; (; ). overrideprotectedvirtual . Draw dock hide button. ; Reimplemented from TGDockButton.; Definition at line 154 of file TGDockableFrame.cxx. ◆ IsA(). TClass * TGDockHideButton::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGDockButton.; Definition at line 58 of file TGDockableFrame.h. ◆ SetAspectRatio(). void TGDockHideButton::SetAspectRatio ; (; Int_t ; a). inline . Definition at line 56 of file TGDockableFrame.h. ◆ Streamer(). void TGDockHideButton::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGDockButton. ◆ StreamerNVirtual(). void TGDockHideButton::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 58 of file TGDockableFrame.h. Member Data Documentation. ◆ fAspectRatio. Int_t TGDockHideButton::fAspectRatio. protected . triangle orientation ; Definition at line 49 of file TGDockableFrame.h. Libraries for TGDockHideButton:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGDockableFrame.h; gui/gui/src/TGDockableFrame.cxx. TGDockHideButton. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:58 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockHideButton.html:34563,Guid,Guide,34563,doc/master/classTGDockHideButton.html,https://root.cern,https://root.cern/doc/master/classTGDockHideButton.html,1,['Guid'],['Guide']
Usability,"at line 1802 of file TGLViewer.cxx. ◆ SetDrawCameraCenter(). void TGLViewer::SetDrawCameraCenter ; (; Bool_t ; x). Draw camera look at and rotation point. ; Definition at line 2084 of file TGLViewer.cxx. ◆ SetEventHandler(). void TGLViewer::SetEventHandler ; (; TGEventHandler * ; handler). virtual . Set the event-handler. ; The event-handler is owned by the viewer. If GLWidget is set, the handler is propagated to it.; If called with handler=0, the current handler will be deleted (also from TGLWidget). ; Definition at line 2301 of file TGLViewer.cxx. ◆ SetFader(). void TGLViewer::SetFader ; (; Float_t ; x). inline . Definition at line 350 of file TGLViewer.h. ◆ SetGedEditor(). virtual void TGLViewer::SetGedEditor ; (; TGedEditor * ; ed). inlinevirtual . Definition at line 382 of file TGLViewer.h. ◆ SetGuideState(). void TGLViewer::SetGuideState ; (; Int_t ; axesType, . Bool_t ; axesDepthTest, . Bool_t ; referenceOn, . const Double_t * ; referencePos . ). Set the state of guides (axes & reference markers) from arguments. ; Definition at line 2069 of file TGLViewer.cxx. ◆ SetIgnoreSizesOnUpdate(). void TGLViewer::SetIgnoreSizesOnUpdate ; (; Bool_t ; v). inline . Definition at line 356 of file TGLViewer.h. ◆ SetLineScale(). void TGLViewer::SetLineScale ; (; Float_t ; s). inline . Definition at line 256 of file TGLViewer.h. ◆ SetMaxSceneDrawTimeHQ(). void TGLViewer::SetMaxSceneDrawTimeHQ ; (; Float_t ; t). inline . Definition at line 310 of file TGLViewer.h. ◆ SetMaxSceneDrawTimeLQ(). void TGLViewer::SetMaxSceneDrawTimeLQ ; (; Float_t ; t). inline . Definition at line 311 of file TGLViewer.h. ◆ SetOrthoCamera(). void TGLViewer::SetOrthoCamera ; (; ECameraType ; camera, . Double_t ; zoom, . Double_t ; dolly, . Double_t ; center[3], . Double_t ; hRotate, . Double_t ; vRotate . ). Set an orthographic camera to supplied configuration - note this does not need to be the current camera - though you will not see the effect if it is not. ; 'camera' defines the ortho camera - one ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewer.html:64682,guid,guides,64682,doc/master/classTGLViewer.html,https://root.cern,https://root.cern/doc/master/classTGLViewer.html,1,['guid'],['guides']
Usability,at line 209 of file GSLMCIntegrationWorkspace.h. ◆ Parameters() [2/2]. const MiserParameters & ROOT::Math::GSLMiserIntegrationWorkspace::Parameters ; (; ); const. inline . Definition at line 208 of file GSLMCIntegrationWorkspace.h. ◆ ReInit(). bool ROOT::Math::GSLMiserIntegrationWorkspace::ReInit ; (; ). inlineoverridevirtual . re-initialize an existing the workspace ; Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 182 of file GSLMCIntegrationWorkspace.h. ◆ SetMiserParameters(). void ROOT::Math::GSLMiserIntegrationWorkspace::SetMiserParameters ; (; ). inlineprivate . Definition at line 220 of file GSLMCIntegrationWorkspace.h. ◆ SetOptions(). virtual void ROOT::Math::GSLMiserIntegrationWorkspace::SetOptions ; (; const ROOT::Math::IOptions & ; ). inlineoverridevirtual . set options ; Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 214 of file GSLMCIntegrationWorkspace.h. ◆ SetParameters(). void ROOT::Math::GSLMiserIntegrationWorkspace::SetParameters ; (; const MiserParameters & ; p). inline . Definition at line 197 of file GSLMCIntegrationWorkspace.h. ◆ Type(). MCIntegration::Type ROOT::Math::GSLMiserIntegrationWorkspace::Type ; (; ); const. inlineoverridevirtual . Implements ROOT::Math::GSLMCIntegrationWorkspace.; Definition at line 205 of file GSLMCIntegrationWorkspace.h. Member Data Documentation. ◆ fHaveNewParams. bool ROOT::Math::GSLMiserIntegrationWorkspace::fHaveNewParams. private . Definition at line 230 of file GSLMCIntegrationWorkspace.h. ◆ fParams. MiserParameters ROOT::Math::GSLMiserIntegrationWorkspace::fParams. private . Definition at line 232 of file GSLMCIntegrationWorkspace.h. ◆ fWs. gsl_monte_miser_state* ROOT::Math::GSLMiserIntegrationWorkspace::fWs. private . Definition at line 231 of file GSLMCIntegrationWorkspace.h. math/mathmore/src/GSLMCIntegrationWorkspace.h. ROOTMathGSLMiserIntegrationWorkspace. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMiserIntegrationWorkspace.html:5454,Guid,Guide,5454,doc/master/classROOT_1_1Math_1_1GSLMiserIntegrationWorkspace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMiserIntegrationWorkspace.html,1,['Guid'],['Guide']
Usability,"at line 223 of file TCollection.cxx. ◆ begin(). TIter TCollection::begin ; (; ); const. inline . Definition at line 292 of file TCollection.h. ◆ Browse(). void TCollection::Browse ; (; TBrowser * ; b). overridevirtual . Browse this collection (called by TBrowser). ; If b=0, there is no Browse call TObject::Browse(0) instead. This means TObject::Inspect() will be invoked indirectly ; Reimplemented from TObject.; Reimplemented in TRootIconList.; Definition at line 248 of file TCollection.cxx. ◆ Capacity(). Int_t TCollection::Capacity ; (; ); const. inline . Definition at line 167 of file TCollection.h. ◆ Class(). static TClass * TCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 222 of file TCollection.h. ◆ Clear(). void TCollection::Clear ; (; Option_t * ; option = """"). overridepure virtual . Reimplemented from TObject.; Implemented in TListOfEnums, TListOfEnumsWithLock, TBtree, TClonesArray, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TListOfDataMembers, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, and TViewPubFunctions. ◆ Clone(). TObject * TCollection::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a clone of an collection using the Streamer facility. ; If newname is specified, this will be the name of the new collection. ; Reimplemented from TObject.; Definition at line 263 of file TCollection.cxx. ◆ Compare(). Int_t TCollection::Compare ; (; const TObject * ; obj); const. overridevirtual . Compare two TCollection objects. ; Returns 0 when equal, -1 when this is smaller and +1 when bigger (like strcmp()). ; Reimplemented from TObject.; Definition at line 275 of file TCollection.cxx. ◆ Contains() [1/2]. Bool_t TCol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCollection.html:17216,Clear,Clear,17216,doc/v632/classTCollection.html,https://root.cern,https://root.cern/doc/v632/classTCollection.html,2,['Clear'],['Clear']
Usability,"at line 287 of file RWebWindowsManager.cxx. Member Function Documentation. ◆ AddServerLocation(). void RWebWindowsManager::AddServerLocation ; (; const std::string & ; server_prefix, . const std::string & ; files_path . ). static . Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ; Definition at line 178 of file RWebWindowsManager.cxx. ◆ AssignMainThrd(). void RWebWindowsManager::AssignMainThrd ; (; ). static . Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ; Definition at line 117 of file RWebWindowsManager.cxx. ◆ ClearServerLocations(). void RWebWindowsManager::ClearServerLocations ; (; ). static . Clear all server locations Does not change configuration of already running HTTP server. ; Definition at line 239 of file RWebWindowsManager.cxx. ◆ CreateServer(). bool RWebWindowsManager::CreateServer ; (; bool ; with_http = false). private . Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP port, which should be used for the server, provide following entry in rootrc file: ; WebGui.HttpPort: 8088; or specify range of http ports, which can be used: WebGui.HttpPortMin: 8800; WebGui.HttpPortMax: 9800; By default range [8800..9800] is used; One also can bind HTTP server socket to loopback address, In that case only connection from localhost will be available: WebGui.HttpLoopback: yes; Or one could specify hostname which should be used for binding of server socket WebGui.HttpBind: hostname | ipaddress; To use secured protocol, following parameter should be specified WebGui.UseHttps: yes; WebGui.ServerC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:8588,Clear,ClearServerLocations,8588,doc/master/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html,1,['Clear'],['ClearServerLocations']
Usability,"at line 29 of file TGMimeTypes.h. Public Member Functions;  TGMime ();  ;  ~TGMime () override;  Delete mime object. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMime.html:1267,Clear,Clear,1267,doc/master/classTGMime.html,https://root.cern,https://root.cern/doc/master/classTGMime.html,1,['Clear'],['Clear']
Usability,"at line 369 of file TFileInfo.cxx. ◆ SetIndex(). void TFileInfo::SetIndex ; (; Int_t ; idx). inline . Definition at line 100 of file TFileInfo.h. ◆ SetSize(). void TFileInfo::SetSize ; (; Long64_t ; size). inline . Definition at line 86 of file TFileInfo.h. ◆ SetUUID(). void TFileInfo::SetUUID ; (; const char * ; uuid). Set the UUID to the value associated to the string 'uuid'. ; This is useful to set the UUID to the one of the ROOT file during verification.; NB: we do not change the name in here, because this would screw up lists of these objects hashed on the name. Those lists need to be rebuild. TFileCollection does that in RemoveDuplicates. ; Definition at line 238 of file TFileInfo.cxx. ◆ Streamer(). void TFileInfo::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFileInfo::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 104 of file TFileInfo.h. Member Data Documentation. ◆ fCurrentUrl. TUrl* TFileInfo::fCurrentUrl. private . Definition at line 42 of file TFileInfo.h. ◆ fIndex. Int_t TFileInfo::fIndex. private . Definition at line 50 of file TFileInfo.h. ◆ fMD5. TMD5* TFileInfo::fMD5. private . Definition at line 47 of file TFileInfo.h. ◆ fMetaDataList. TList* TFileInfo::fMetaDataList. private . Definition at line 48 of file TFileInfo.h. ◆ fSize. Long64_t TFileInfo::fSize. private . Definition at line 45 of file TFileInfo.h. ◆ fUrlList. TList* TFileInfo::fUrlList. private . current URL to access the file, points to URL ; Definition at line 44 of file TFileInfo.h. ◆ fUUID. TUUID* TFileInfo::fUUID. private . Definition at line 46 of file TFileInfo.h. Libraries for TFileInfo:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TFileInfo.h; core/base/src/TFileInfo.cxx. TFileInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileInfo.html:23058,Guid,Guide,23058,doc/master/classTFileInfo.html,https://root.cern,https://root.cern/doc/master/classTFileInfo.html,1,['Guid'],['Guide']
Usability,"at line 37 of file RBrowser.hxx. ◆ fConnId. unsigned ROOT::RBrowser::fConnId {0}. protected . ! default connection id ; Definition at line 34 of file RBrowser.hxx. ◆ fLastProgressSend. float ROOT::RBrowser::fLastProgressSend {0}. protected . ! last value of send progress ; Definition at line 42 of file RBrowser.hxx. ◆ fLastProgressSendTm. long long ROOT::RBrowser::fLastProgressSendTm {0}. protected . ! time when last progress message was send ; Definition at line 43 of file RBrowser.hxx. ◆ fPostponed. std::vector<std::vector<std::string> > ROOT::RBrowser::fPostponed. protected . ! postponed messages, handled in timer ; Definition at line 49 of file RBrowser.hxx. ◆ fPromptFileOutput. std::string ROOT::RBrowser::fPromptFileOutput. protected . ! file name for prompt output ; Definition at line 41 of file RBrowser.hxx. ◆ fTimer. std::unique_ptr<RBrowserTimer> ROOT::RBrowser::fTimer. protected . ! timer to handle postponed requests ; Definition at line 48 of file RBrowser.hxx. ◆ fTitle. std::string ROOT::RBrowser::fTitle. protected . ! title ; Definition at line 33 of file RBrowser.hxx. ◆ fUseRCanvas. bool ROOT::RBrowser::fUseRCanvas {false}. protected . ! which canvas should be used ; Definition at line 36 of file RBrowser.hxx. ◆ fWebWindow. std::shared_ptr<RWebWindow> ROOT::RBrowser::fWebWindow. protected . ! web window to browser ; Definition at line 45 of file RBrowser.hxx. ◆ fWidgetCnt. int ROOT::RBrowser::fWidgetCnt {0}. protected . ! counter for created widgets ; Definition at line 40 of file RBrowser.hxx. ◆ fWidgets. std::vector<std::shared_ptr<RBrowserWidget> > ROOT::RBrowser::fWidgets. protected . ! all browser widgets ; Definition at line 39 of file RBrowser.hxx. Libraries for ROOT::RBrowser:. [legend]; The documentation for this class was generated from the following files:; gui/browserv7/inc/ROOT/RBrowser.hxx; gui/browserv7/src/RBrowser.cxx. ROOTRBrowser. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowser.html:13713,Guid,Guide,13713,doc/master/classROOT_1_1RBrowser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowser.html,1,['Guid'],['Guide']
Usability,"at line 373 of file TRatioPlot.cxx. ◆ SetGridlines() [1/2]. void TRatioPlot::SetGridlines ; (; Double_t * ; gridlines, . Int_t ; numGridlines . ). virtual . Set where horizontal, dashed lines are drawn on the lower pad. ; Can be used to override existing default lines (or disable them).; Parameters. gridlinesDouble_t array of y positions for the dashed lines ; numGridlinesLength of gridlines . Definition at line 1682 of file TRatioPlot.cxx. ◆ SetGridlines() [2/2]. void TRatioPlot::SetGridlines ; (; std::vector< double > ; gridlines). virtual . Set where horizontal, dashed lines are drawn on the lower pad. ; Can be used to override existing default lines (or disable them).; Parameters. gridlinesVector of y positions for the dashes lines. ; void ratioplot4() {; gStyle->SetOptStat(0);; auto c1 = new TCanvas(""c1"", ""fit residual simple"");; auto h1 = new TH1D(""h1"", ""h1"", 50, -5, 5);; h1->FillRandom(""gaus"", 2000);; h1->Fit(""gaus"", ""0"");; h1->GetXaxis()->SetTitle(""x"");; h1->GetYaxis()->SetTitle(""y"");; auto rp1 = new TRatioPlot(h1);; std::vector<double> lines = {-3, -2, -1, 0, 1, 2, 3};; rp1->SetGridlines(lines);; rp1->Draw();; rp1->GetLowerRefGraph()->SetMinimum(-4);; rp1->GetLowerRefGraph()->SetMaximum(4);; }; ratioplot4Definition ratioplot4.py:1; . Definition at line 1670 of file TRatioPlot.cxx. ◆ SetH1DrawOpt(). void TRatioPlot::SetH1DrawOpt ; (; Option_t * ; opt). Sets the drawing option for h1. ; Definition at line 353 of file TRatioPlot.cxx. ◆ SetH2DrawOpt(). void TRatioPlot::SetH2DrawOpt ; (; Option_t * ; opt). Sets the drawing option for h2. ; Definition at line 361 of file TRatioPlot.cxx. ◆ SetInsetWidth(). void TRatioPlot::SetInsetWidth ; (; Double_t ; width). Set the inset on the outer sides of all the pads. ; It's used to make the outer pad draggable. ; Definition at line 1632 of file TRatioPlot.cxx. ◆ SetLeftMargin(). void TRatioPlot::SetLeftMargin ; (; Float_t ; margin). Sets the left margin of both pads. ; Parameters. marginThe new margin . Definition at line ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRatioPlot.html:39430,simpl,simple,39430,doc/master/classTRatioPlot.html,https://root.cern,https://root.cern/doc/master/classTRatioPlot.html,1,['simpl'],['simple']
Usability,"at line 424 of file TGeoScaledShape.cxx. ◆ SavePrimitive(). void TGeoScaledShape::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox.; Definition at line 322 of file TGeoScaledShape.cxx. ◆ SetPoints() [1/2]. void TGeoScaledShape::SetPoints ; (; Double_t * ; points); const. overridevirtual . Mesh points for scaled shapes. ; Reimplemented from TGeoBBox.; Definition at line 344 of file TGeoScaledShape.cxx. ◆ SetPoints() [2/2]. void TGeoScaledShape::SetPoints ; (; Float_t * ; points); const. overridevirtual . Mesh points for scaled shapes. ; Reimplemented from TGeoBBox.; Definition at line 358 of file TGeoScaledShape.cxx. ◆ SetScale(). void TGeoScaledShape::SetScale ; (; TGeoScale * ; scale). inline . Definition at line 66 of file TGeoScaledShape.h. ◆ SetSegsAndPols(). void TGeoScaledShape::SetSegsAndPols ; (; TBuffer3D & ; buffer); const. overridevirtual . Fill TBuffer3D structure for segments and polygons. ; Reimplemented from TGeoBBox.; Definition at line 301 of file TGeoScaledShape.cxx. ◆ Streamer(). void TGeoScaledShape::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBBox. ◆ StreamerNVirtual(). void TGeoScaledShape::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of file TGeoScaledShape.h. Member Data Documentation. ◆ fScale. TGeoScale* TGeoScaledShape::fScale. protected . Definition at line 24 of file TGeoScaledShape.h. ◆ fShape. TGeoShape* TGeoScaledShape::fShape. protected . Definition at line 23 of file TGeoScaledShape.h. Libraries for TGeoScaledShape:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoScaledShape.h; geom/geom/src/TGeoScaledShape.cxx. TGeoScaledShape. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoScaledShape.html:34507,Guid,Guide,34507,doc/master/classTGeoScaledShape.html,https://root.cern,https://root.cern/doc/master/classTGeoScaledShape.html,1,['Guid'],['Guide']
Usability,"at line 424 of file TInterpreter.h. ◆ ClassInfo_Property(). virtual Long_t TInterpreter::ClassInfo_Property ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 429 of file TInterpreter.h. ◆ ClassInfo_Size(). virtual int TInterpreter::ClassInfo_Size ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 430 of file TInterpreter.h. ◆ ClassInfo_Tagnum(). virtual Longptr_t TInterpreter::ClassInfo_Tagnum ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 431 of file TInterpreter.h. ◆ ClassInfo_Title(). virtual const char * TInterpreter::ClassInfo_Title ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 435 of file TInterpreter.h. ◆ ClassInfo_TmpltName(). virtual const char * TInterpreter::ClassInfo_TmpltName ; (; ClassInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 436 of file TInterpreter.h. ◆ ClearFileBusy(). virtual void TInterpreter::ClearFileBusy ; (; ). pure virtual . Implemented in TCling. ◆ ClearStack(). virtual void TInterpreter::ClearStack ; (; ). pure virtual . Implemented in TCling. ◆ CodeComplete(). virtual void TInterpreter::CodeComplete ; (; const std::string & ; , . size_t & ; , . std::vector< std::string > & ;  . ). inlinevirtual . Reimplemented in TCling.; Definition at line 279 of file TInterpreter.h. ◆ CreateEnum(). virtual TEnum * TInterpreter::CreateEnum ; (; void * ; VD, . TClass * ; cl . ); const. pure virtual . Implemented in TCling. ◆ CreateListOfBaseClasses(). virtual void TInterpreter::CreateListOfBaseClasses ; (; TClass * ; cl); const. pure virtual . Implemented in TCling. ◆ CreateListOfDataMembers(). virtual void TInterpreter::CreateListOfDataMembers ; (; TClass * ; cl); const. pure virtual . Implemented in TCling. ◆ CreateListOfMethodArgs(). virtual void TInterpreter::CreateListOfMethodArgs ; (; TFunction * ; m); const. pure virtual . Implemented in TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:58153,Clear,ClearFileBusy,58153,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['Clear'],['ClearFileBusy']
Usability,at line 45 of file TMaterial.h. ◆ GetInterLength(). virtual Float_t TMaterial::GetInterLength ; (; ); const. inlinevirtual . Definition at line 47 of file TMaterial.h. ◆ GetNumber(). virtual Int_t TMaterial::GetNumber ; (; ); const. inlinevirtual . Definition at line 42 of file TMaterial.h. ◆ GetRadLength(). virtual Float_t TMaterial::GetRadLength ; (; ); const. inlinevirtual . Definition at line 46 of file TMaterial.h. ◆ GetZ(). virtual Float_t TMaterial::GetZ ; (; ); const. inlinevirtual . Definition at line 44 of file TMaterial.h. ◆ IsA(). TClass * TMaterial::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TMixture.; Definition at line 49 of file TMaterial.h. ◆ Streamer(). void TMaterial::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TMaterial. ; Reimplemented from TObject.; Reimplemented in TMixture.; Definition at line 81 of file TMaterial.cxx. ◆ StreamerNVirtual(). void TMaterial::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 49 of file TMaterial.h. Member Data Documentation. ◆ fA. Float_t TMaterial::fA. protected . Definition at line 31 of file TMaterial.h. ◆ fDensity. Float_t TMaterial::fDensity. protected . Definition at line 33 of file TMaterial.h. ◆ fInterLength. Float_t TMaterial::fInterLength. protected . Definition at line 35 of file TMaterial.h. ◆ fNumber. Int_t TMaterial::fNumber. protected . Definition at line 30 of file TMaterial.h. ◆ fRadLength. Float_t TMaterial::fRadLength. protected . Definition at line 34 of file TMaterial.h. ◆ fZ. Float_t TMaterial::fZ. protected . Definition at line 32 of file TMaterial.h. Libraries for TMaterial:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TMaterial.h; graf3d/g3d/src/TMaterial.cxx. TMaterial. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:57 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMaterial.html:17115,Guid,Guide,17115,doc/master/classTMaterial.html,https://root.cern,https://root.cern/doc/master/classTMaterial.html,1,['Guid'],['Guide']
Usability,at line 53 of file TGTRA.h. ◆ GetTl1(). Float_t TGTRA::GetTl1 ; (; ); const. inline . Definition at line 51 of file TGTRA.h. ◆ GetTl2(). Float_t TGTRA::GetTl2 ; (; ); const. inline . Definition at line 55 of file TGTRA.h. ◆ GetTwist(). Float_t TGTRA::GetTwist ; (; ); const. inline . Definition at line 48 of file TGTRA.h. ◆ IsA(). TClass * TGTRA::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TBRIK.; Definition at line 58 of file TGTRA.h. ◆ SetPoints(). void TGTRA::SetPoints ; (; Double_t * ; points); const. overrideprotectedvirtual . Create GTRA points. ; Reimplemented from TBRIK.; Definition at line 109 of file TGTRA.cxx. ◆ Streamer(). void TGTRA::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TBRIK. ◆ StreamerNVirtual(). void TGTRA::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 58 of file TGTRA.h. Member Data Documentation. ◆ fAlpha1. Float_t TGTRA::fAlpha1. protected . Definition at line 34 of file TGTRA.h. ◆ fAlpha2. Float_t TGTRA::fAlpha2. protected . Definition at line 38 of file TGTRA.h. ◆ fBl1. Float_t TGTRA::fBl1. protected . Definition at line 32 of file TGTRA.h. ◆ fBl2. Float_t TGTRA::fBl2. protected . Definition at line 36 of file TGTRA.h. ◆ fH1. Float_t TGTRA::fH1. protected . Definition at line 31 of file TGTRA.h. ◆ fH2. Float_t TGTRA::fH2. protected . Definition at line 35 of file TGTRA.h. ◆ fTl1. Float_t TGTRA::fTl1. protected . Definition at line 33 of file TGTRA.h. ◆ fTl2. Float_t TGTRA::fTl2. protected . Definition at line 37 of file TGTRA.h. ◆ fTwist. Float_t TGTRA::fTwist. protected . Definition at line 30 of file TGTRA.h. Libraries for TGTRA:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TGTRA.h; graf3d/g3d/src/TGTRA.cxx. TGTRA. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:38 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTRA.html:23820,Guid,Guide,23820,doc/master/classTGTRA.html,https://root.cern,https://root.cern/doc/master/classTGTRA.html,1,['Guid'],['Guide']
Usability,at line 60 of file RooNumGenConfig.h. ◆ _method1DCondCat. RooCategory RooNumGenConfig::_method1DCondCat. protected . Selects integration method for 1D conditional p.d.f.s with categories. ; Definition at line 61 of file RooNumGenConfig.h. ◆ _method2D. RooCategory RooNumGenConfig::_method2D. protected . Selects integration method for 2D p.d.f.s. ; Definition at line 63 of file RooNumGenConfig.h. ◆ _method2DCat. RooCategory RooNumGenConfig::_method2DCat. protected . Selects integration method for 2D p.d.f.s with categories. ; Definition at line 64 of file RooNumGenConfig.h. ◆ _method2DCond. RooCategory RooNumGenConfig::_method2DCond. protected . Selects integration method for 2D conditional p.d.f.s. ; Definition at line 65 of file RooNumGenConfig.h. ◆ _method2DCondCat. RooCategory RooNumGenConfig::_method2DCondCat. protected . Selects integration method for 2D conditional p.d.f.s with categories. ; Definition at line 66 of file RooNumGenConfig.h. ◆ _methodND. RooCategory RooNumGenConfig::_methodND. protected . Selects integration method for ND p.d.f.s. ; Definition at line 68 of file RooNumGenConfig.h. ◆ _methodNDCat. RooCategory RooNumGenConfig::_methodNDCat. protected . Selects integration method for ND p.d.f.s with categories. ; Definition at line 69 of file RooNumGenConfig.h. ◆ _methodNDCond. RooCategory RooNumGenConfig::_methodNDCond. protected . Selects integration method for ND conditional p.d.f.s. ; Definition at line 70 of file RooNumGenConfig.h. ◆ _methodNDCondCat. RooCategory RooNumGenConfig::_methodNDCondCat. protected . Selects integration method for ND conditional p.d.f.s with categories. ; Definition at line 71 of file RooNumGenConfig.h. Libraries for RooNumGenConfig:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooNumGenConfig.h; roofit/roofitcore/src/RooNumGenConfig.cxx. RooNumGenConfig. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:03 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenConfig.html:22264,Guid,Guide,22264,doc/master/classRooNumGenConfig.html,https://root.cern,https://root.cern/doc/master/classRooNumGenConfig.html,1,['Guid'],['Guide']
Usability,"at line 61 of file RooUniform.cxx. ◆ getGenerator(). Int_t RooUniform::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Advertise internal generator. ; Reimplemented from RooAbsPdf.; Definition at line 107 of file RooUniform.cxx. ◆ IsA(). TClass * RooUniform::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 50 of file RooUniform.h. ◆ Streamer(). void RooUniform::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooUniform::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file RooUniform.h. ◆ translate(). void RooUniform::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 53 of file RooUniform.cxx. Member Data Documentation. ◆ x. RooListProxy RooUniform::x. protected . Definition at line 43 of file RooUniform.h. Libraries for RooUniform:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooUniform.h; roofit/roofit/src/RooUniform.cxx. RooUniform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUniform.html:77654,Guid,Guide,77654,doc/master/classRooUniform.html,https://root.cern,https://root.cern/doc/master/classRooUniform.html,1,['Guid'],['Guide']
Usability,"at line 773 of file DeepNet.h. ◆ AddReshapeLayer() [2/2]. template<typename Architecture_t , typename Layer_t > . void TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::AddReshapeLayer ; (; TReshapeLayer< Architecture_t > * ; reshapeLayer). Function for adding Reshape Layer in the Deep Neural Network, when the layer is already created. ; Definition at line 870 of file DeepNet.h. ◆ Backward(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Backward ; (; const Tensor_t & ; input, . const Matrix_t & ; groundTruth, . const Matrix_t & ; weights . ). Function that executes the entire backward pass in the network. ; Definition at line 1033 of file DeepNet.h. ◆ calculateDimension(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::calculateDimension ; (; int ; imgDim, . int ; fltDim, . int ; padding, . int ; stride . ). private . Definition at line 421 of file DeepNet.h. ◆ Clear(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . void TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Clear ; (; ). inline . Remove all layers from the network. ; Definition at line 334 of file DeepNet.h. ◆ Forward(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Forward ; (; Tensor_t & ; input, . bool ; applyDropout = false . ). Function that executes the entire forward pass in the network. ; Definition at line 896 of file DeepNet.h. ◆ GetBatchDepth(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . size_t TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::GetBatchDepth ; (; ); const. inline . Definition at line 342 of file DeepNet.h. ◆ GetBatchHeight(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . size_t TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::GetBatchHeight ; (; ); const. inline . Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html:18084,Clear,Clear,18084,doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,1,['Clear'],['Clear']
Usability,"at line 86 of file TUnfoldIterativeEM.h. ◆ SubtractBackground(). void TUnfoldIterativeEM::SubtractBackground ; (; const TH1 * ; hist_bgr, . const char * ; name, . Double_t ; scale = 1.0 . ). Definition at line 128 of file TUnfoldIterativeEM.cxx. Member Data Documentation. ◆ f_constInputBins. const TUnfoldBinning* TUnfoldIterativeEM::f_constInputBins. protected . Definition at line 74 of file TUnfoldIterativeEM.h. ◆ f_constOutputBins. const TUnfoldBinning * TUnfoldIterativeEM::f_constOutputBins. protected . Definition at line 74 of file TUnfoldIterativeEM.h. ◆ f_inputBins. TUnfoldBinning* TUnfoldIterativeEM::f_inputBins. protected . Definition at line 73 of file TUnfoldIterativeEM.h. ◆ f_outputBins. TUnfoldBinning * TUnfoldIterativeEM::f_outputBins. protected . Definition at line 73 of file TUnfoldIterativeEM.h. ◆ fA. TMatrixD* TUnfoldIterativeEM::fA. protected . Definition at line 75 of file TUnfoldIterativeEM.h. ◆ fBgr. TVectorD* TUnfoldIterativeEM::fBgr. protected . Definition at line 79 of file TUnfoldIterativeEM.h. ◆ fDXDY. TMatrixD* TUnfoldIterativeEM::fDXDY. protected . Definition at line 84 of file TUnfoldIterativeEM.h. ◆ fEpsilon. TVectorD* TUnfoldIterativeEM::fEpsilon. protected . Definition at line 76 of file TUnfoldIterativeEM.h. ◆ fScaleBias. double TUnfoldIterativeEM::fScaleBias. protected . Definition at line 80 of file TUnfoldIterativeEM.h. ◆ fStep. Int_t TUnfoldIterativeEM::fStep. protected . Definition at line 82 of file TUnfoldIterativeEM.h. ◆ fX. TVectorD* TUnfoldIterativeEM::fX. protected . Definition at line 83 of file TUnfoldIterativeEM.h. ◆ fX0. TVectorD* TUnfoldIterativeEM::fX0. protected . Definition at line 77 of file TUnfoldIterativeEM.h. ◆ fY. TVectorD* TUnfoldIterativeEM::fY. protected . Definition at line 78 of file TUnfoldIterativeEM.h. hist/unfold/inc/TUnfoldIterativeEM.h; hist/unfold/src/TUnfoldIterativeEM.cxx. TUnfoldIterativeEM. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldIterativeEM.html:17199,Guid,Guide,17199,doc/master/classTUnfoldIterativeEM.html,https://root.cern,https://root.cern/doc/master/classTUnfoldIterativeEM.html,1,['Guid'],['Guide']
Usability,"at line 87 of file TProofLog.cxx. ◆ Save(). Int_t TProofLog::Save ; (; const char * ; ord = ""*"", . const char * ; fname = 0, . Option_t * ; opt = ""w"" . ). Save the content associated with worker 'ord' to finel 'fname'. ; If 'ord' is ""*"" (default), the log from all the workers is saved. If 'opt' is ""a"" the file is open in append mode; otherwise the file is truncated. ; Definition at line 201 of file TProofLog.cxx. ◆ SetLogToBox(). void TProofLog::SetLogToBox ; (; Bool_t ; lgbox = kFALSE). inline . Definition at line 70 of file TProofLog.h. ◆ SetMaxTransferSize(). void TProofLog::SetMaxTransferSize ; (; Long64_t ; maxsz). static . Set max transfer size. ; Definition at line 304 of file TProofLog.cxx. ◆ StartTime(). TDatime TProofLog::StartTime ; (; ). inline . Definition at line 67 of file TProofLog.h. ◆ Streamer(). void TProofLog::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TProofLog::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 75 of file TProofLog.h. Friends And Related Symbol Documentation. ◆ TProofLogElem. friend class TProofLogElem. friend . Definition at line 34 of file TProofLog.h. ◆ TProofMgrLite. friend class TProofMgrLite. friend . Definition at line 35 of file TProofLog.h. ◆ TXProofMgr. friend class TXProofMgr. friend . Definition at line 36 of file TProofLog.h. Member Data Documentation. ◆ fElem. TList* TProofLog::fElem. private . Definition at line 41 of file TProofLog.h. ◆ fFILE. void* TProofLog::fFILE. private . Definition at line 40 of file TProofLog.h. ◆ fMgr. TProofMgr* TProofLog::fMgr. private . Definition at line 39 of file TProofLog.h. ◆ fStartTime. TDatime TProofLog::fStartTime. private . Definition at line 42 of file TProofLog.h. proof/proof/inc/TProofLog.h; proof/proof/src/TProofLog.cxx. TProofLog. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLog.html:22672,Guid,Guide,22672,doc/master/classTProofLog.html,https://root.cern,https://root.cern/doc/master/classTProofLog.html,1,['Guid'],['Guide']
Usability,"at this box have to be aligned with the local coordinates;; Algorithms for dividing the shape along a given axis. The modeller currently provides a set of 20 basic shapes, which we will call primitives. It also provides a special class allowing the creation of shapes as a result of Boolean operations between primitives. These are called composite shapes and the composition operation can be recursive (combined composites). This allows the creation of a quite large number of different shape topologies and combinations. You can have a look and run the tutorial: http://root.cern.ch/root/html/examples/geodemo.C.html. Primitive Shapes - the general inheritance scheme. Shapes are named objects and all primitives have constructors like:; TGeoXXX(const char *name,<type> param1,<type> param2, ...);; TGeoXXX(<type> param1,<type> param2, ...);; Naming shape primitive is mandatory only for the primitives used in Boolean composites (see “Composite Shapes”). For the sake of simplicity, we will describe only the constructors in the second form.; 18.3.1 Units; The length units used in the geometry are arbitrary. However, there are certain functionalities that work with the assumption that the used lengths are expressed in centimeters. This is the case for shape capacity or volume weight computation. The same is valid when using the ROOT geometry as navigator for an external transport MC package (e.g. GEANT) via the VMC interface.; Other units in use: All angles used for defining rotation matrices or some shape parameters are expressed in degrees. Material density is expressed in [g/cm3].; 18.3.2 Primitive Shapes; 18.3.2.1 Boxes - TGeoBBox Class; Normally a box has to be built only with 3 parameters: DX,DY,DZ representing the half-lengths on X, Y and Z-axes. In this case, the origin of the box will match the one of its reference frame and the box will range from: -DX to DX on X-axis, from -DY to DY on Y and from -DZ to DZ on Z. On the other hand, any other shape needs to compute and s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:898492,simpl,simplicity,898492,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simplicity']
Usability,"at to indicate of Method Transformations have been optained yet or not (normally done in MethodBase::TrainMethod); TStringfOptimizationFitTypewhich type of optimisation procedure to be used; map<TString,TMVA::Interval*>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). std::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__OptimizeConfigParameters.html:3467,simpl,simple,3467,root/html602/TMVA__OptimizeConfigParameters.html,https://root.cern,https://root.cern/root/html602/TMVA__OptimizeConfigParameters.html,2,['simpl'],['simple']
Usability,"at we have already created.; chamber->AddNode(wire_co, 1, new TGeoTranslation(-0.2,0,0));; chamber->AddNode(wire_co, 2, new TGeoTranslation(0.2,0,0));; TGeoTranslationClass describing translations.Definition TGeoMatrix.h:116; The 2 nodes that we have created inside chamber will both point to a wire_co object, but will be completely distinct : WIRE_CO_1 and WIRE_CO_2. We will want now to place symmetrically 1000 chambers on a pad, following a pattern of 20 rows and 50 columns. One way to do this will be to replicate our chamber by positioning it 1000 times in different positions of the pad. Unfortunately, this is far from being the optimal way of doing what we want. Imagine that we would like to find out which of the 1000 chambers is containing a (x,y,z) point defined in the pad reference. You will never have to do that, since the modeller will take care of it for you, but let's guess what it has to do. The most simple algorithm will just loop over all daughters, convert the point from mother to local reference and check if the current chamber contains the point or not. This might be efficient for pads with few chambers, but definitely not for 1000. Fortunately the modeler is smarter than that and create for each volume some optimization structures called voxels (see Voxelization) to minimize the penalty having too many daughters, but if you have 100 pads like this in your geometry you will anyway loose a lot in your tracking performance.; The way out when volumes can be arranged according to simple patterns is the usage of divisions. We will describe them in detail later on. Let's think now at a different situation : instead of 1000 chambers of the same type, we may have several types of chambers. Let's say all chambers are cylindrical and have a wire inside, but their dimensions are different. However, we would like all to be represented by a single volume family, since they have the same properties. ; Definition at line 43 of file TGeoVolume.h. Public Types; enum ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:10372,simpl,simple,10372,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['simpl'],['simple']
Usability,"at::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); virtual~TGNumberEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidAssociate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGNumberEntry.html:4082,Clear,Clear,4082,root/html528/TGNumberEntry.html,https://root.cern,https://root.cern/root/html528/TGNumberEntry.html,4,['Clear'],['Clear']
Usability,"at>>({3,2,1,0}, ""1"", ""2"");; 45 std::unique_ptr<ROperator>op ( new ROperator_Transpose<float>({3,2,1,0}, ""1"", ""2"")) ;; 46 model3.AddOperator(std::move(op));; 47 //op->Initialize(model3);; 48 //std::cout << (op->Generate(""1""));; 49 ; 50 model3.AddInputTensorInfo(""3"", ETensorType::FLOAT, {2,3});; 51 model3.AddInputTensorInfo(""4"", ETensorType::FLOAT, {3,2});; 52 std::unique_ptr<ROperator> op2 (new ROperator_Gemm<float> (1.0, 1.0, 0, 0, ""3"", ""4"", ""5""));; 53 model3.AddOperator(std::move(op2));; 54 std::unique_ptr<ROperator> op3 (new ROperator_Relu<float> (""5"", ""6""));; 55 model3.AddOperator(std::move(op3));; 56 //op2->Initialize(model3);; 57 //std::cout << (op2->Generate(""2""));; 58 ; 59 model3.Generate();; 60 model3.PrintGenerated();; 61*/; 62}; mainint main()Definition Prototype.cxx:12; RModelParser_ONNX.hxx; RModel.hxx; TMVA::Experimental::SOFIE::RModelParser_ONNXDefinition RModelParser_ONNX.hxx:27; TMVA::Experimental::SOFIE::RModelParser_ONNX::ParseRModel Parse(std::string filename, bool verbose=false)Definition RModelParser_ONNX.cxx:312; TMVA::Experimental::SOFIE::RModelDefinition RModel.hxx:12; TMVA::Experimental::SOFIE::RModel::OutputGeneratedvoid OutputGenerated(std::string filename="""", bool append=false)Definition RModel.cxx:1081; TMVA::Experimental::SOFIE::RModel::PrintInitializedTensorsvoid PrintInitializedTensors()Definition RModel.cxx:985; TMVA::Experimental::SOFIE::RModel::HeadInitializedTensorsvoid HeadInitializedTensors(std::string name, int n_print=50)Definition RModel.cxx:1045; TMVA::Experimental::SOFIE::RModel::Generatevoid Generate(std::underlying_type_t< Options > options, int batchSize=-1, long pos=0, bool verbose=false)Definition RModel.cxx:703; TMVA::Experimental::SOFIE::RModel::PrintRequiredInputTensorsvoid PrintRequiredInputTensors()Definition RModel.cxx:955; TMVA::Experimental::SOFIEDefinition RModelParser_Keras.h:41. tmvasofiesrcPrototype.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Prototype_8cxx_source.html:3186,Guid,Guide,3186,doc/master/Prototype_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Prototype_8cxx_source.html,1,['Guid'],['Guide']
Usability,at_t TTeXDump::XtoTeX ; (; Double_t ; x). Convert X from world coordinate to TeX. ; Definition at line 883 of file TTeXDump.cxx. ◆ YtoTeX(). Float_t TTeXDump::YtoTeX ; (; Double_t ; y). Convert Y from world coordinate to TeX. ; Definition at line 892 of file TTeXDump.cxx. Member Data Documentation. ◆ fBoundingBox. Bool_t TTeXDump::fBoundingBox. protected . True when the TeX header is printed. ; Definition at line 26 of file TTeXDump.h. ◆ fCurrentAlpha. Float_t TTeXDump::fCurrentAlpha. protected . Current Alpha value. ; Definition at line 32 of file TTeXDump.h. ◆ fCurrentBlue. Float_t TTeXDump::fCurrentBlue. protected . Current Blue component. ; Definition at line 31 of file TTeXDump.h. ◆ fCurrentGreen. Float_t TTeXDump::fCurrentGreen. protected . Current Green component. ; Definition at line 30 of file TTeXDump.h. ◆ fCurrentRed. Float_t TTeXDump::fCurrentRed. protected . Current Red component. ; Definition at line 29 of file TTeXDump.h. ◆ fLineScale. Float_t TTeXDump::fLineScale. protected . Line width scale factor. ; Definition at line 33 of file TTeXDump.h. ◆ fRange. Bool_t TTeXDump::fRange. protected . True when a range has been defined. ; Definition at line 27 of file TTeXDump.h. ◆ fStandalone. Bool_t TTeXDump::fStandalone. protected . True when a TeX file should be standalone. ; Definition at line 28 of file TTeXDump.h. ◆ fType. Int_t TTeXDump::fType. protected . Workstation type used to know if the Tex is open. ; Definition at line 25 of file TTeXDump.h. ◆ fXsize. Float_t TTeXDump::fXsize. protected . Page size along X. ; Definition at line 23 of file TTeXDump.h. ◆ fYsize. Float_t TTeXDump::fYsize. protected . Page size along Y. ; Definition at line 24 of file TTeXDump.h. Libraries for TTeXDump:. [legend]; The documentation for this class was generated from the following files:; graf2d/postscript/inc/TTeXDump.h; graf2d/postscript/src/TTeXDump.cxx. TTeXDump. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTeXDump.html:36694,Guid,Guide,36694,doc/master/classTTeXDump.html,https://root.cern,https://root.cern/doc/master/classTTeXDump.html,1,['Guid'],['Guide']
Usability,"at_t*fPhysicalShapeColor; Int_tfSelectedPart; TGLSelectionBufferfSelection; TGLPlotPainter::ESelectionBasefSelectionBase; Bool_tfSelectionPass; Bool_tfUpdateSelection; TAxis*fXAxis; Double_tfXOYSectionPos; Double_tfXOZSectionPos; TAxis*fYAxis; Double_tfYOZSectionPos; TAxis*fZAxis; vector<Double_t>fZLevels. private:. const TColor*fPadColor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Paint(); Draw lego/surf/whatever you can. void PrintPlot() const; Generate PS using gl2ps. Bool_t PlotSelected(Int_t px, Int_t py); Read color buffer content to find selected object. void SetPadColor(const TColor* color); Used in a pad. void SetFrameColor(const TColor* frameColor); Set plot's back box color. void InvalidateSelection(); Selection must be updated. const TColor * GetPadColor() const; Get pad color. void MoveSection(Int_t px, Int_t py); Create dynamic profile using selected plane. void DrawSections() const; Draw sections (if any). void ClearBuffers() const. // Clear buffer.; Float_t rgb[3] = {1.f, 1.f, 1.f};; if (const TColor *color = GetPadColor()); color->GetRGB(rgb[0], rgb[1], rgb[2]);; glClearColor(rgb[0], rgb[1], rgb[2], 1.);; glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);. void DrawPaletteAxis() const; Draw. Palette. Axis. void SaveModelviewMatrix() const. void SaveProjectionMatrix() const. void RestoreModelviewMatrix() const. void RestoreProjectionMatrix() const. const TGLPlotBox& RefBackBox() const; { return fBackBox; }. void SetPhysicalShapeColor(const Float_t* rgba). void InitGL() const. void DeInitGL() const. void DrawPlot() const. Bool_t InitGeometry(); Init geometry does plot's specific initialization. void StartPan(Int_t px, Int_t py); Pan function is already declared in TVirtualGLPainter. void AddOption(const TString& stringOption); Add string option, it can be a digit in ""lego"" or ""surf"". void ProcessEvent(Int_t event, Int_t px, Int_t py); Function to process additional events (key presses, mouse clicks.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLPlotPainter.html:3366,Clear,ClearBuffers,3366,root/html530/TGLPlotPainter.html,https://root.cern,https://root.cern/root/html530/TGLPlotPainter.html,1,['Clear'],['ClearBuffers']
Usability,"ata Documentation. ◆ fAsymErrors. bool ROOT::Fit::DataOptions::fAsymErrors. use asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true) ; Definition at line 55 of file DataOptions.h. ◆ fBinVolume. bool ROOT::Fit::DataOptions::fBinVolume. normalize data by the bin volume (it is used in the Poisson likelihood fits) ; Definition at line 48 of file DataOptions.h. ◆ fCoordErrors. bool ROOT::Fit::DataOptions::fCoordErrors. use errors on the x coordinates when available (default is true) ; Definition at line 54 of file DataOptions.h. ◆ fErrors1. bool ROOT::Fit::DataOptions::fErrors1. use all errors equal to 1, i.e. fit without errors (default is false) ; Definition at line 52 of file DataOptions.h. ◆ fExpErrors. bool ROOT::Fit::DataOptions::fExpErrors. use expected errors from the function and not from the data ; Definition at line 53 of file DataOptions.h. ◆ fIntegral. bool ROOT::Fit::DataOptions::fIntegral. use integral of bin content instead of bin center (default is false) ; Definition at line 47 of file DataOptions.h. ◆ fNormBinVolume. bool ROOT::Fit::DataOptions::fNormBinVolume. normalize data by a normalized the bin volume (bin volume divided by a reference value) ; Definition at line 49 of file DataOptions.h. ◆ fUseEmpty. bool ROOT::Fit::DataOptions::fUseEmpty. use empty bins (default is false) with a fixed error of 1 ; Definition at line 50 of file DataOptions.h. ◆ fUseRange. bool ROOT::Fit::DataOptions::fUseRange. use the function range when creating the fit data (default is false) ; Definition at line 51 of file DataOptions.h. Collaboration diagram for ROOT::Fit::DataOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; math/mathcore/inc/Fit/DataOptions.h. ROOTFitDataOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Fit_1_1DataOptions.html:3621,Guid,Guide,3621,doc/master/structROOT_1_1Fit_1_1DataOptions.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Fit_1_1DataOptions.html,1,['Guid'],['Guide']
Usability,"ata Documentation. ◆ fBranchMap. BranchMap_t TBranchSTL::fBranchMap. private . ! Branch map ; Definition at line 64 of file TBranchSTL.h. ◆ fBranchVector. std::vector<ElementBranchHelper_t> TBranchSTL::fBranchVector. private . ! Branch vector ; Definition at line 65 of file TBranchSTL.h. ◆ fClassName. TString TBranchSTL::fClassName. private . Name of the parent class, if we're the data member. ; Definition at line 72 of file TBranchSTL.h. ◆ fClassVersion. Int_t TBranchSTL::fClassVersion. mutableprivate . Version number of the class. ; Definition at line 73 of file TBranchSTL.h. ◆ fClCheckSum. UInt_t TBranchSTL::fClCheckSum. private . Class checksum. ; Definition at line 74 of file TBranchSTL.h. ◆ fCollProxy. TVirtualCollectionProxy* TBranchSTL::fCollProxy. private . ! Collection proxy ; Definition at line 67 of file TBranchSTL.h. ◆ fContName. TString TBranchSTL::fContName. private . Class name of referenced object. ; Definition at line 71 of file TBranchSTL.h. ◆ fID. Int_t TBranchSTL::fID. private . Element serial number in the streamer info. ; Definition at line 77 of file TBranchSTL.h. ◆ fInd. TIndArray TBranchSTL::fInd. private . ! Indices ; Definition at line 70 of file TBranchSTL.h. ◆ fIndArrayCl. TClass* TBranchSTL::fIndArrayCl. private . ! Class of the ind array ; Definition at line 69 of file TBranchSTL.h. ◆ fInfo. TStreamerInfo* TBranchSTL::fInfo. mutableprivate . ! The streamer info ; Definition at line 75 of file TBranchSTL.h. ◆ fObject. char* TBranchSTL::fObject. private . ! Pointer to object at address or the ; Definition at line 76 of file TBranchSTL.h. ◆ fParent. TBranch* TBranchSTL::fParent. private . ! Parent of this branch ; Definition at line 68 of file TBranchSTL.h. Libraries for TBranchSTL:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBranchSTL.h; tree/tree/src/TBranchSTL.cxx. TBranchSTL. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchSTL.html:34455,Guid,Guide,34455,doc/master/classTBranchSTL.html,https://root.cern,https://root.cern/doc/master/classTBranchSTL.html,1,['Guid'],['Guide']
Usability,"ata is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. void PrepareInputDataFile(TString& dataFile); Prepare the file with the input data objects to be sent the master; the; objects are taken from the dedicated list and / or the specified file.; If the fInputData is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. void AddInput(TObject* obj); Add objects that might be needed during the processing of; the selector (see Process()). void ClearInput(); Clear input object list. TList * GetInputList(); Get input list. TObject * GetOutput(const char* name); Get specified object that has been produced during the processing; (see Process()). TList * GetOutputList(); Get list with all object created during processing (see Process()). void SetParameter(const char* par, const char* value); Set input list parameter. If the parameter is already; set it will be set to the new value. void SetParameter(const char* par, Int_t value); Set an input list parameter. void SetParameter(const char* par, Long_t value); Set an input list parameter. void SetParameter(const char* par, Long64_t value); Set an input list parameter. void SetParameter(const char* par, Double_t value); Set an input list parameter. TObject * GetParameter(const char* par) const; Get specified parameter. A parameter set via SetParameter() is either; a TParameter or a TNamed or 0 in case par is not defined. void DeleteParameters(const char* wildcard); Delete the input list parameters s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:73242,Clear,ClearInput,73242,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['Clear'],"['Clear', 'ClearInput']"
Usability,"ata is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. void PrepareInputDataFile(TString& dataFile); Prepare the file with the input data objects to be sent the master; the; objects are taken from the dedicated list and / or the specified file.; If the fInputData is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the content of fInputData. void AddInput(TObject* obj); Add objects that might be needed during the processing of; the selector (see Process()). void ClearInput(); Clear input object list. TList * GetInputList(); Get input list. TObject * GetOutput(const char* name); Get specified object that has been produced during the processing; (see Process()). TObject * GetOutput(const char* name, TList* out); Find object 'name' in list 'out' or in the files specified in there. TList * GetOutputList(); Get list with all object created during processing (see Process()). void SetParameter(const char* par, const char* value); Set input list parameter. If the parameter is already; set it will be set to the new value. void SetParameter(const char* par, Int_t value); Set an input list parameter. void SetParameter(const char* par, Long_t value); Set an input list parameter. void SetParameter(const char* par, Long64_t value); Set an input list parameter. void SetParameter(const char* par, Double_t value); Set an input list parameter. TObject * GetParameter(const char* par) const; Get specified parameter. A parameter set via SetParameter() is either; a TParameter or a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:83907,Clear,ClearInput,83907,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['Clear'],"['Clear', 'ClearInput']"
Usability,"ata set infoDefinition DataLoader.cxx:524; TMVA::DataLoader::SetBackgroundWeightExpressionvoid SetBackgroundWeightExpression(const TString &variable)Definition DataLoader.cxx:556; TMVA::DataLoader::AddVariablevoid AddVariable(const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx:485; TMVA::Envelope::BookMethodvirtual void BookMethod(TString methodname, TString methodtitle, TString options="""")Method to book the machine learning method to perform the algorithm.Definition Envelope.cxx:163; TMVA::Experimental::ClassificationDefinition Classification.h:162; TMVA::Experimental::Classification::GetResultsstd::vector< ClassificationResult > & GetResults()Return the vector of TMVA::Experimental::ClassificationResult objects.Definition Classification.cxx:945; TMVA::Experimental::Classification::Evaluatevirtual void Evaluate()Method to perform Train/Test over all ml method booked.Definition Classification.cxx:248; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Types::kBDT@ kBDTDefinition Types.h:86; TMVA::Types::kSVM@ kSVMDefinition Types.h:89; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TStringBasic string class.Definition TString.h:139; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; classificationvoid classification(UInt_t jobs=4)Definition classification.C:14; unsigned int; ; #include <TMVA/Classification.h>; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/Classification.h. Classification. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Classification.html:6602,Guid,Guide,6602,doc/master/classTMVA_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Classification.html,1,['Guid'],['Guide']
Usability,"ata with ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Processing data with ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/processing-data-root.html:1015,Guid,Guides,1015,d/processing-data-root.html,https://root.cern,https://root.cern/d/processing-data-root.html,1,['Guid'],['Guides']
Usability,"ata& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvPdf.html:4794,clear,clearEvalError,4794,root/html532/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html532/RooNumConvPdf.html,1,['clear'],['clearEvalError']
Usability,"ata& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumConvPdf.html:4794,clear,clearEvalError,4794,root/html528/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html528/RooNumConvPdf.html,1,['clear'],['clearEvalError']
Usability,"ata& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvPdf.html:4794,clear,clearEvalError,4794,root/html530/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html530/RooNumConvPdf.html,1,['clear'],['clearEvalError']
Usability,"ata.hxx. ◆ fMutex. TVirtualMutex* ROOT::RGeomDescription::fMutex {nullptr}. private . ! external mutex used to protect all data ; Definition at line 266 of file RGeomData.hxx. ◆ fNodes. std::vector<TGeoNode *> ROOT::RGeomDescription::fNodes. private . ! flat list of all nodes ; Definition at line 242 of file RGeomData.hxx. ◆ fPreferredOffline. bool ROOT::RGeomDescription::fPreferredOffline {false}. private . ! indicates that full description should be provided to client ; Definition at line 260 of file RGeomData.hxx. ◆ fSearch. std::string ROOT::RGeomDescription::fSearch. private . ! search string in hierarchy ; Definition at line 255 of file RGeomData.hxx. ◆ fSearchJson. std::string ROOT::RGeomDescription::fSearchJson. private . ! drawing json for search ; Definition at line 256 of file RGeomData.hxx. ◆ fSelectedStack. std::vector<int> ROOT::RGeomDescription::fSelectedStack. private . ! selected branch of geometry by stack ; Definition at line 247 of file RGeomData.hxx. ◆ fShapes. std::vector<ShapeDescr> ROOT::RGeomDescription::fShapes. private . ! shapes with created descriptions ; Definition at line 253 of file RGeomData.hxx. ◆ fSignals. std::vector<std::pair<const void *, RGeomSignalFunc_t> > ROOT::RGeomDescription::fSignals. private . ! registered signals ; Definition at line 268 of file RGeomData.hxx. ◆ fSortMap. std::vector<int> ROOT::RGeomDescription::fSortMap. private . ! nodes in order large -> smaller volume ; Definition at line 252 of file RGeomData.hxx. ◆ fVisibility. std::vector<RGeomNodeVisibility> ROOT::RGeomDescription::fVisibility. private . ! custom visibility flags for physical nodes ; Definition at line 244 of file RGeomData.hxx. Libraries for ROOT::RGeomDescription:. [legend]; The documentation for this class was generated from the following files:; geom/webviewer/inc/ROOT/RGeomData.hxx; geom/webviewer/src/RGeomData.cxx. ROOTRGeomDescription. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:32147,Guid,Guide,32147,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,1,['Guid'],['Guide']
Usability,"ata; 1003. user interface running in all browsers; 101 ; 102To start http server simply create instance; 103of the THttpServer class like:; 104 ; 105 serv = new THttpServer(""http:8080"");; 106 ; 107This will starts civetweb-based http server with http port 8080.; 108Than one should be able to open address ""http://localhost:8080""; 109in any modern web browser (Firefox, Chrome, Opera, ...) and browse objects,; 110created in ROOT application. By default, server can access files,; 111canvases and histograms via `gROOT` pointer. All such objects; 112can be displayed with JSROOT graphics.; 113 ; 114At any time one could register other objects with the command:; 115 ; 116 TGraph* gr = new TGraph(10);; 117 gr->SetName(""gr1"");; 118 serv->Register(""graphs/subfolder"", gr);; 119 ; 120If objects content is changing in the application, one could; 121enable monitoring flag in the browser - than objects view; 122will be regularly updated.; 123 ; 124More information: https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html; 125*/; 126 ; 127ClassImp(THttpServer);; 128 ; 129////////////////////////////////////////////////////////////////////////////////; 130/// constructor; 131///; 132/// As argument, one specifies engine kind which should be; 133/// created like ""http:8080"". One could specify several engines; 134/// at once, separating them with semicolon ("";""). Following engines are supported:; 135///; 136/// http - TCivetweb, civetweb-based implementation of http protocol; 137/// fastcgi - TFastCgi, special protocol for communicating with web servers; 138///; 139/// For each created engine one should provide socket port number like ""http:8080"" or ""fastcgi:9000"".; 140/// Additional engine-specific options can be supplied with URL syntax like ""http:8080?thrds=10"".; 141/// Full list of supported options should be checked in engines docu.; 142///; 143/// One also can configure following options, separated by semicolon:; 144///; 145/// readonly, ro - set read-only mode (default); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:3719,guid,guides,3719,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['guid'],['guides']
Usability,"ata; mtable = data.table(tcatType); mtable.Print(""v""); ; # Create a cat X cat product category; # ----------------------------------------------------------------------; ; # A SUPER-category is 'product' of _lvalue_ categories. The state names of a super; # category is a composite of the state labels of the input categories; b0Xtcat = ROOT.RooSuperCategory(""b0Xtcat"", ""b0flav X tagCat"", {b0flav, tagCat}); ; # Make a table of the product category state multiplicity in data; stable = data.table(b0Xtcat); stable.Print(""v""); ; # Since the super category is an lvalue, is explicitly possible; b0Xtcat.setLabel(""{B0bar;Lepton}""); ; # A MULTI-category is a 'product' of any category (function). The state names of a super; # category is a composite of the state labels of the input categories; b0Xttype = ROOT.RooMultiCategory(""b0Xttype"", ""b0flav X tagType"", {b0flav, tcatType}); ; # Make a table of the product category state multiplicity in data; xtable = data.table(b0Xttype); xtable.Print(""v""); RooCategory::tagCat = Lepton(idx = 0); ; RooCategory::b0flav = B0(idx = -1); ; ; Table tcatType : pData; +----------------+------+; | Cut based | 5040 |; | Neural Network | 4960 |; +----------------+------+; ; ; Table b0Xtcat : pData; +---------------------+------+; | {B0;Lepton} | 1302 |; | {B0bar;Lepton} | 1192 |; | {B0;Kaon} | 1232 |; | {B0bar;Kaon} | 1314 |; | {B0;NetTagger-1} | 1242 |; | {B0bar;NetTagger-1} | 1208 |; | {B0;NetTagger-2} | 1282 |; | {B0bar;NetTagger-2} | 1228 |; +---------------------+------+; ; ; Table b0Xttype : pData; +------------------------+------+; | {Cut based;B0} | 2534 |; | {Neural Network;B0} | 2524 |; | {Cut based;B0bar} | 2506 |; | {Neural Network;B0bar} | 2436 |; +------------------------+------+; ; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf406_cattocatfuncs.py. tutorialsroofitrf406_cattocatfuncs.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf406__cattocatfuncs_8py.html:3591,Guid,Guide,3591,doc/master/rf406__cattocatfuncs_8py.html,https://root.cern,https://root.cern/doc/master/rf406__cattocatfuncs_8py.html,1,['Guid'],['Guide']
Usability,"ata;; 377 ; 378 if (isSignal); 379 {; 380 for (size_t n = 0; n <= binROC; ++n); 381 {; 382 truePositives.at (n) += weight;; 383 }; 384 for (size_t n = binROC+1; n < numBinsROC; ++n); 385 {; 386 falseNegatives.at (n) += weight;; 387 }; 388 ; 389 datSig.at (binData) += weight;; 390 sumWeightsSig += weight;; 391 }; 392 else; 393 {; 394 for (size_t n = 0; n <= binROC; ++n); 395 {; 396 falsePositives.at (n) += weight;; 397 }; 398 for (size_t n = binROC+1; n < numBinsROC; ++n); 399 {; 400 trueNegatives.at (n) += weight;; 401 }; 402 ; 403 datBkg.at (binData) += weight;; 404 sumWeightsBkg += weight;; 405 }; 406 }; 407 ; 408 std::vector<double> sigEff;; 409 std::vector<double> backRej;; 410 ; 411 double bestSignificance = 0;; 412 double bestCutSignificance = 0;; 413 ; 414 double numEventsScaleFactor = 1.0;; 415 if (m_scaleToNumEvents > 0); 416 {; 417 size_t numEvents = m_output.size ();; 418 numEventsScaleFactor = double (m_scaleToNumEvents)/double (numEvents);; 419 }; 420 ; 421 clear (""ROC"");; 422 clear (""Significance"");; 423 ; 424 for (size_t i = 0; i < numBinsROC; ++i); 425 {; 426 double tp = truePositives.at (i) * numEventsScaleFactor;; 427 double fp = falsePositives.at (i) * numEventsScaleFactor;; 428 double tn = trueNegatives.at (i) * numEventsScaleFactor;; 429 double fn = falseNegatives.at (i) * numEventsScaleFactor;; 430 ; 431 double seff = (tp+fn == 0.0 ? 1.0 : (tp / (tp+fn)));; 432 double brej = (tn+fp == 0.0 ? 0.0 : (tn / (tn+fp)));; 433 ; 434 sigEff.push_back (seff);; 435 backRej.push_back (brej);; 436 ; 437 // m_histROC->Fill (seff, brej);; 438 addPoint (""ROC"", seff, brej); // x, y; 439 ; 440 ; 441 double currentCut = (i * binSizeROC)+minVal;; 442 ; 443 double sig = tp;; 444 double bkg = fp;; 445 double significance = sig / sqrt (sig + bkg);; 446 if (significance > bestSignificance); 447 {; 448 bestSignificance = significance;; 449 bestCutSignificance = currentCut;; 450 }; 451 ; 452 addPoint (""Significance"", currentCut, significance);; 453 // m_histSignificance-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8cxx_source.html:14925,clear,clear,14925,doc/master/NeuralNet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html,2,['clear'],['clear']
Usability,"ataInputHandler.h. ◆ ReadInputTree(). TTree * TMVA::DataInputHandler::ReadInputTree ; (; const TString & ; dataFile). private . create trees from these ascii files ; Definition at line 152 of file DataInputHandler.cxx. ◆ Sbegin(). std::vector< TreeInfo >::const_iterator TMVA::DataInputHandler::Sbegin ; (; ); const. inline . Definition at line 113 of file DataInputHandler.h. ◆ Send(). std::vector< TreeInfo >::const_iterator TMVA::DataInputHandler::Send ; (; ); const. inline . Definition at line 114 of file DataInputHandler.h. ◆ SignalTreeInfo(). const TreeInfo & TMVA::DataInputHandler::SignalTreeInfo ; (; Int_t ; i); const. inline . Definition at line 108 of file DataInputHandler.h. ◆ Streamer(). virtual void TMVA::DataInputHandler::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::DataInputHandler::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 134 of file DataInputHandler.h. Member Data Documentation. ◆ fExplicitTrainTest. std::map< std::string, Bool_t > TMVA::DataInputHandler::fExplicitTrainTest. private . if set to true the user has specified training and testing data explicitly ; Definition at line 130 of file DataInputHandler.h. ◆ fInputTrees. std::map< TString, std::vector<TreeInfo> > TMVA::DataInputHandler::fInputTrees. mutableprivate . list of input trees per class (classname is given as first parameter in the map) ; Definition at line 129 of file DataInputHandler.h. ◆ fLogger. MsgLogger* TMVA::DataInputHandler::fLogger. mutableprivate . ! message logger ; Definition at line 131 of file DataInputHandler.h. Libraries for TMVA::DataInputHandler:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/DataInputHandler.h; tmva/tmva/src/DataInputHandler.cxx. TMVADataInputHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html:21132,Guid,Guide,21132,doc/master/classTMVA_1_1DataInputHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html,1,['Guid'],['Guide']
Usability,"ataSB.Size(), True); 114result = fitter.Result(); 115result.Print(ROOT.std.cout); 116 ; 117c1 = ROOT.TCanvas(""Simfit"", ""Simultaneous fit of two histograms"", 10, 10, 700, 700); 118c1.Divide(1, 2); 119c1.cd(1); 120ROOT.gStyle.SetOptFit(1111); 121 ; 122fB.SetFitResult(result, iparB); 123fB.SetRange(rangeB().first, rangeB().second); 124fB.SetLineColor(ROOT.kBlue); 125hB.GetListOfFunctions().Add(fB); 126hB.Draw(); 127 ; 128c1.cd(2); 129fSB.SetFitResult(result, iparSB); 130fSB.SetRange(rangeSB().first, rangeSB().second); 131fSB.SetLineColor(ROOT.kRed); 132hSB.GetListOfFunctions().Add(fSB); 133hSB.Draw(); 134 ; 135c1.SaveAs(""combinedFit.png""); ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; object; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; TMatrixTAutoloadOps::AddTMatrixT< Element > & Add(TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source)Modify addition: target += scalar * source.Definition TMatrixT.cxx:2936; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28. tutorialsfitcombinedFit.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/combinedFit_8py_source.html:5174,simpl,simple,5174,doc/master/combinedFit_8py_source.html,https://root.cern,https://root.cern/doc/master/combinedFit_8py_source.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"ataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:3776,clear,clearShapeDirty,3776,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,2,['clear'],['clearShapeDirty']
Usability,"ataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:4222,clear,clearShapeDirty,4222,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,1,['clear'],['clearShapeDirty']
Usability,"ataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:6394,clear,clearEvalErrorLog,6394,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,"ataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidAddElement(const char* path, TTable::EColumnType type); voidTDataSet::AddMain(TDataSet* set); voidAddResponse(const char* chit); voidAddVolumePath(const char* path); Bool_tTTable::BoundsOk(const char* where, Int_t at) const; virtual voidTTable::Clear(Option_t* opt = """"); voidTTable::CopyStruct(Char_t* dest, const Char_t* src); Char_t*TTable::Create(); virtual voidTTable::Delete(Option_t* opt = """"); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tTTable::EntryLoop(const Char_t* exprFileName, Int_t& action, TObject* obj, Int_t nentries = 1000000000, Int_t firstentry = 0, Option_t* option = """"); virtual TTableDescriptor*TGenericTable::GetDescriptorPointer() const; TDataSet*TDataSet::GetRealParent(); voidTDataSet::MakeCollection(); voidTObject::MakeZombie(); Bool_tTTable::OutOfBoundsError(const char* where, Int_t i) const; voidTTable::ReAlloc(Int_t newsize); virtual voidTGenericTable::SetDescriptorPointer(TTableDescriptor* list); Int_tTTable::SetfN(Long_t len); voidTGenericTable::SetGenericType(); virtual voidTDataSet::SetMother(TObject* mother); voidTTable::SetTablePointer(void* table); virtual voidTTable::SetType(const char *const type); voidTTable::SetUsedRows(Int_t n); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user); voidTTable::StreamerHeader(TBuffer& b, Version_t version = 3); voidTTable::StreamerTable(TBuffer& b, Version_t version = 3); static const char*TTable::TableDictionary(const char* className, const char* structName, TTableDescriptor*& ColDescriptors). Data Members; public:. enum TTable::EColumnType { kNAN; kFloat; kInt; kLong; kShort; kDouble; kUInt; kULong; kUShort; kUChar; kChar; kPtr; kBool; kEndColumnType; };; enum TTable::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TResponseTable.html:11723,Clear,Clear,11723,root/html528/TResponseTable.html,https://root.cern,https://root.cern/root/html528/TResponseTable.html,4,['Clear'],['Clear']
Usability,"ataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:6470,clear,clearValueDirty,6470,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['clear'],['clearValueDirty']
Usability,"ataset, . TString ; fin, . Int_t ; Nevt = -1, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ rulevis(). void TMVA::rulevis ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisCorr() [1/2]. void TMVA::rulevisCorr ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisCorr() [2/2]. void TMVA::rulevisCorr ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ rulevisHists() [1/2]. void TMVA::rulevisHists ; (; TDirectory * ; rfdir, . TDirectory * ; vardir, . TDirectory * ; corrdir, . TMVAGlob::TypeOfPlot ; type . ). ◆ rulevisHists() [2/2]. void TMVA::rulevisHists ; (; TString ; fin = ""TMVA.root"", . TMVAGlob::TypeOfPlot ; type = TMVAGlob::kNorm, . bool ; useTMVAStyle = kTRUE . ). ◆ TMVAGui(). void TMVA::TMVAGui ; (; const char * ; fName = ""TMVA.root"", . TString ; dataset = """" . ). ◆ TMVAMultiClassGui(). void TMVA::TMVAMultiClassGui ; (; const char * ; fName = ""TMVAMulticlass.root"", . TString ; dataset = """" . ). ◆ TMVARegGui(). void TMVA::TMVARegGui ; (; const char * ; fName = ""TMVAReg.root"", . TString ; dataset = """" . ). ◆ training_history(). void TMVA::training_history ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variables(). void TMVA::variables ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). ◆ variablesMultiClass(). void TMVA::variablesMultiClass ; (; TString ; dataset, . TString ; fin = ""TMVA.root"", . TString ; dirName = ""InputVariables_Id"", . TString ; title = ""TMVA Input Variables"", . Bool_t ; isRegression = kFALSE, . Bool_t ; useTMVAStyle = kTRUE . ). TMVA. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceTMVA.html:43717,Guid,Guide,43717,doc/v632/namespaceTMVA.html,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html,1,['Guid'],['Guide']
Usability,"atch window showing, used by RBrowser. ;  ; void SetShowCallback (WebWindowShowCallback_t func);  Assign show callback which can catch window showing, used by RBrowser. ;  ; void Terminate ();  Terminate http server and ROOT application. ;  . Static Public Member Functions; static void AddServerLocation (const std::string &server_prefix, const std::string &files_path);  Configure server location which can be used for loading of custom scripts or files When THttpServer instance of RWebWindowsManager will be created, THttpServer::AddLocation() method with correspondent arguments will be invoked. ;  ; static void AssignMainThrd ();  Re-assigns main thread id Normally main thread id recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to call this method to let RWebWindowsManager correctly recognize such situation. ;  ; static void ClearServerLocations ();  Clear all server locations Does not change configuration of already running HTTP server. ;  ; static std::map< std::string, std::string > GetServerLocations ();  Returns server locations as <std::string, std::string> Key is location name (with slash at the end) and value is file path. ;  ; static std::shared_ptr< RWebWindowsManager > & Instance ();  Returns default window manager Used to display all standard ROOT elements like TCanvas or TFitPanel. ;  ; static bool IsLoopbackMode ();  Returns true if loopback mode used by THttpServer for web widgets. ;  ; static bool IsMainThrd ();  Returns true when called from main process Main process recognized at the moment when library is loaded It supposed to be a thread where gApplication->Run() will be called If application runs in separate thread, one have to use AssignMainThrd() method to let RWebWindowsManager correctly recognize such situation. ;  ; static void SetLoopbackMode (bool on=true);  Set loopback mode for THttpServer used for web widgets By default is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:2315,Clear,ClearServerLocations,2315,doc/master/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html,2,['Clear'],"['Clear', 'ClearServerLocations']"
Usability,"atchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ;  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ;  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ;  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ;  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ;  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ;  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ;  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ;  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ;  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ;  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ;  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_RNN_Classification.C;   T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:1492,learn,learning,1492,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['learn'],['learning']
Usability,"atched from external scripts. ; Definition at line 587 of file RBrowser.cxx. ◆ AddInitWidget(). void RBrowser::AddInitWidget ; (; const std::string & ; kind). protected . Create new widget and send init message to the client. ; Definition at line 606 of file RBrowser.cxx. ◆ AddRCanvas(). void ROOT::RBrowser::AddRCanvas ; (; ). inline . Definition at line 86 of file RBrowser.hxx. ◆ AddTCanvas(). void ROOT::RBrowser::AddTCanvas ; (; ). inline . Definition at line 85 of file RBrowser.hxx. ◆ AddWidget(). std::shared_ptr< RBrowserWidget > RBrowser::AddWidget ; (; const std::string & ; kind). protected . Creates new widget. ; Definition at line 555 of file RBrowser.cxx. ◆ CheckWidgtesModified(). void RBrowser::CheckWidgtesModified ; (; unsigned ; connid). protected . Check if any widget was modified and update if necessary. ; Definition at line 766 of file RBrowser.cxx. ◆ ClearOnClose(). void RBrowser::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 1001 of file RBrowser.cxx. ◆ CloseTab(). void RBrowser::CloseTab ; (; const std::string & ; name). protected . Close and delete specified widget. ; Definition at line 632 of file RBrowser.cxx. ◆ FindWidget(). std::shared_ptr< RBrowserWidget > RBrowser::FindWidget ; (; const std::string & ; name, . const std::string & ; kind = """" . ); const. protected . Find widget by name or kind. ; Definition at line 616 of file RBrowser.cxx. ◆ GetActiveWidget(). std::shared_ptr< RBrowserWidget > ROOT::RBrowser::GetActiveWidget ; (; ); const. inlineprotected . Definition at line 54 of file RBrowser.hxx. ◆ GetCatchWindowShow(). bool ROOT::RBrowser::GetCatchWindowShow ; (; ); const. inline . Is RWebWindow::Show calls catched for embeding of created widgets. ; Definition at line 102 of file RBrowser.hxx. ◆ GetCurrentWorkingDirectory(). std::string RBrowser::GetCurrentWorkingDirectory ; (; ). protected . Return the current directory of ROOT. ; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowser.html:6492,clear,cleared,6492,doc/master/classROOT_1_1RBrowser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowser.html,1,['clear'],['cleared']
Usability,"atches. copytree3.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ; Only selected entries are copied to the new Tree. The input file has been generated by the program in $ROOTSYS/test/Event with Event 1000 1 99 1; ; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; void copytree3(); {; // Get old file, old tree and set top branch address; TString dir = ""$ROOTSYS/test/Event.root"";; gSystem->ExpandPathName(dir);; const auto filename = gSystem->AccessPathName(dir) ? ""./Event.root"" : ""$ROOTSYS/test/Event.root"";; ; TFile oldfile(filename);; TTree *oldtree;; oldfile.GetObject(""T"", oldtree);; ; const auto nentries = oldtree->GetEntries();; ; Event *event = nullptr;; oldtree->SetBranchAddress(""event"", &event);; ; // Create a new file + a clone of old tree in new file; TFile newfile(""small.root"", ""recreate"");; auto newtree = oldtree->CloneTree(0);; ; for (auto i : ROOT::TSeqI(nentries)) {; oldtree->GetEntry(i);; if (event->GetNtrack() > 605); newtree->Fill();; event->Clear();; }; ; newtree->Print();; newfile.Write();; }; R__LOAD_LIBRARY#define R__LOAD_LIBRARY(LIBRARY)Definition Rtypes.h:496; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; nentriesint nentriesDefinition THbookFile.cxx:91; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; EventDefinition collection_pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/copytree3_8C.html:1194,Clear,Clear,1194,doc/master/copytree3_8C.html,https://root.cern,https://root.cern/doc/master/copytree3_8C.html,1,['Clear'],['Clear']
Usability,"ate ()=0;  . #include <TVirtualRefProxy.h>. Inheritance diagram for TVirtualRefProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TVirtualRefProxy(). virtual TVirtualRefProxy::~TVirtualRefProxy ; (; ). inlinevirtual . Definition at line 84 of file TVirtualRefProxy.h. Member Function Documentation. ◆ Clone(). virtual TVirtualRefProxy * TVirtualRefProxy::Clone ; (; ); const. pure virtual . Implemented in TRefArrayProxy, and TRefProxy. ◆ GetClass(). virtual TClass * TVirtualRefProxy::GetClass ; (; ); const. pure virtual . Implemented in TRefProxy. ◆ GetCounterValue(). virtual Int_t TVirtualRefProxy::GetCounterValue ; (; TFormLeafInfoReference * ; info, . void * ; data . ). pure virtual . Implemented in TRefProxy, and TRefArrayProxy. ◆ GetObject(). virtual void * TVirtualRefProxy::GetObject ; (; TFormLeafInfoReference * ; info, . void * ; data, . int ; instance . ). pure virtual . Implemented in TRefProxy, and TRefArrayProxy. ◆ GetPreparedReference(). virtual void * TVirtualRefProxy::GetPreparedReference ; (; void * ; data). pure virtual . Implemented in TRefProxy. ◆ GetValueClass(). virtual TClass * TVirtualRefProxy::GetValueClass ; (; void * ; data); const. pure virtual . Implemented in TRefProxy. ◆ HasCounter(). virtual Bool_t TVirtualRefProxy::HasCounter ; (; ); const. pure virtual . Implemented in TRefArrayProxy, and TRefProxy. ◆ Release(). virtual void TVirtualRefProxy::Release ; (; ). pure virtual . Implemented in TRefProxy. ◆ SetClass(). virtual void TVirtualRefProxy::SetClass ; (; TClass * ; classptr). pure virtual . Implemented in TRefProxy. ◆ Update(). virtual Bool_t TVirtualRefProxy::Update ; (; ). pure virtual . Implemented in TRefProxy. The documentation for this class was generated from the following file:; core/meta/inc/TVirtualRefProxy.h. TVirtualRefProxy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualRefProxy.html:2774,Guid,Guide,2774,doc/master/classTVirtualRefProxy.html,https://root.cern,https://root.cern/doc/master/classTVirtualRefProxy.html,1,['Guid'],['Guide']
Usability,ate . Definition at line 208 of file TGDMLParse.h. ◆ fpvolmap. PvolMap TGDMLParse::fpvolmap. private . Map containing volume names and the TGeoVolume for it. ; Definition at line 218 of file TGDMLParse.h. ◆ freflectmap. ReflectionsMap TGDMLParse::freflectmap. private . Map containing placed volume names and the TGeoNode for it. ; Definition at line 219 of file TGDMLParse.h. ◆ freflsolidmap. ReflSolidMap TGDMLParse::freflsolidmap. private . Map containing reflection names and the Solid name ir references to. ; Definition at line 220 of file TGDMLParse.h. ◆ freflvolmap. ReflVolMap TGDMLParse::freflvolmap. private . Map containing reflection names and the TGDMLRefl for it - containing refl matrix. ; Definition at line 221 of file TGDMLParse.h. ◆ frotmap. RotMap TGDMLParse::frotmap. private . Map containing position names and the TGeoTranslation for it. ; Definition at line 209 of file TGDMLParse.h. ◆ fsclmap. SclMap TGDMLParse::fsclmap. private . Map containing rotation names and the TGeoRotation for it. ; Definition at line 210 of file TGDMLParse.h. ◆ fsolmap. SolMap TGDMLParse::fsolmap. private . Map containing mixture names and the TGeoMixture for it. ; Definition at line 216 of file TGDMLParse.h. ◆ fStartFile. const char* TGDMLParse::fStartFile. Definition at line 103 of file TGDMLParse.h. ◆ fVolID. int TGDMLParse::fVolID. Definition at line 99 of file TGDMLParse.h. ◆ fvolmap. VolMap TGDMLParse::fvolmap. private . Map containing solid names and the TGeoShape for it. ; Definition at line 217 of file TGDMLParse.h. ◆ fWorld. TGeoVolume* TGDMLParse::fWorld. Definition at line 98 of file TGDMLParse.h. ◆ fWorldName. TString TGDMLParse::fWorldName. Definition at line 97 of file TGDMLParse.h. Libraries for TGDMLParse:. [legend]; The documentation for this class was generated from the following files:; geom/gdml/inc/TGDMLParse.h; geom/gdml/src/TGDMLParse.cxx. TGDMLParse. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:58 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLParse.html:53691,Guid,Guide,53691,doc/master/classTGDMLParse.html,https://root.cern,https://root.cern/doc/master/classTGDMLParse.html,1,['Guid'],['Guide']
Usability,"ate . Definition at line 287 of file RCsvDS.cxx. ◆ SetEntry(). bool ROOT::RDF::RCsvDS::SetEntry ; (; unsigned int ; slot, . ULong64_t ; entry . ). finalvirtual . Advance the ""cursors"" returned by GetColumnReaders to the selected entry for a particular slot. ; Parameters. [in]slotThe data processing slot that needs to be considered ; [in]entryThe entry which needs to be pointed to by the reader pointers Slots are adopted to accommodate parallel data processing. Different workers will loop over different ranges and will be labelled by different ""slot"" values. Returns true if the entry has to be processed, false otherwise. . Implements ROOT::RDF::RDataSource.; Definition at line 505 of file RCsvDS.cxx. ◆ SetNSlots(). void ROOT::RDF::RCsvDS::SetNSlots ; (; unsigned int ; nSlots). finalvirtual . Inform RDataSource of the number of processing slots (i.e. ; worker threads) used by the associated RDataFrame. Slots numbers are used to simplify parallel execution: RDataFrame guarantees that different threads will always pass different slot values when calling methods concurrently. ; Implements ROOT::RDF::RDataSource.; Definition at line 536 of file RCsvDS.cxx. ◆ ValidateColTypes(). void ROOT::RDF::RCsvDS::ValidateColTypes ; (; std::vector< std::string > & ; columns); const. private . Definition at line 203 of file RCsvDS.cxx. Member Data Documentation. ◆ fBoolEvtValues. std::vector<std::deque<bool> > ROOT::RDF::RCsvDS::fBoolEvtValues. private . Definition at line 64 of file RCsvDS.hxx. ◆ fColAddresses. std::vector<std::vector<void *> > ROOT::RDF::RCsvDS::fColAddresses. private . Definition at line 57 of file RCsvDS.hxx. ◆ fColContainingEmpty. std::set<std::string> ROOT::RDF::RCsvDS::fColContainingEmpty. private . Definition at line 55 of file RCsvDS.hxx. ◆ fColTypes. std::unordered_map<std::string, ColType_t> ROOT::RDF::RCsvDS::fColTypes. private . Definition at line 54 of file RCsvDS.hxx. ◆ fColTypesList. std::list<ColType_t> ROOT::RDF::RCsvDS::fColTypesList. private . Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html:13940,simpl,simplify,13940,doc/master/classROOT_1_1RDF_1_1RCsvDS.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RCsvDS.html,1,['simpl'],['simplify']
Usability,ate . Definition at line 56 of file TGeoPainter.h. ◆ fIsRaytracing. Bool_t TGeoPainter::fIsRaytracing. private . Definition at line 55 of file TGeoPainter.h. ◆ fLastVolume. TGeoVolume* TGeoPainter::fLastVolume. private . Definition at line 67 of file TGeoPainter.h. ◆ fMat. Double_t TGeoPainter::fMat[9]. private . Definition at line 46 of file TGeoPainter.h. ◆ fNsegments. Int_t TGeoPainter::fNsegments. private . Definition at line 47 of file TGeoPainter.h. ◆ fNVisNodes. Int_t TGeoPainter::fNVisNodes. private . Definition at line 48 of file TGeoPainter.h. ◆ fOverlap. TGeoOverlap* TGeoPainter::fOverlap. private . Definition at line 60 of file TGeoPainter.h. ◆ fPaintingOverlaps. Bool_t TGeoPainter::fPaintingOverlaps. private . Definition at line 54 of file TGeoPainter.h. ◆ fPlugin. TGeoIteratorPlugin* TGeoPainter::fPlugin. private . Definition at line 68 of file TGeoPainter.h. ◆ fTopVisible. Bool_t TGeoPainter::fTopVisible. private . Definition at line 53 of file TGeoPainter.h. ◆ fTopVolume. TGeoVolume* TGeoPainter::fTopVolume. private . Definition at line 66 of file TGeoPainter.h. ◆ fVisBranch. TString TGeoPainter::fVisBranch. private . Definition at line 57 of file TGeoPainter.h. ◆ fVisLevel. Int_t TGeoPainter::fVisLevel. private . Definition at line 49 of file TGeoPainter.h. ◆ fVisLock. Bool_t TGeoPainter::fVisLock. private . Definition at line 52 of file TGeoPainter.h. ◆ fVisOption. Int_t TGeoPainter::fVisOption. private . Definition at line 50 of file TGeoPainter.h. ◆ fVisVolumes. TObjArray* TGeoPainter::fVisVolumes. private . Definition at line 69 of file TGeoPainter.h. ◆ fVolInfo. TString TGeoPainter::fVolInfo. private . Definition at line 58 of file TGeoPainter.h. Libraries for TGeoPainter:. [legend]; The documentation for this class was generated from the following files:; geom/geompainter/inc/TGeoPainter.h; geom/geompainter/src/TGeoPainter.cxx. TGeoPainter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:07 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:46464,Guid,Guide,46464,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,1,['Guid'],['Guide']
Usability,"ate Attributes |; List of all members ; TMVA::IPythonInteractive Class ReferenceTMVA. ; This class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook. ; It’s only initialized in Jupyter notebook context. In initialization we specify some title, and a TGraph will be created for every title. We can add new data points easily to all TGraphs. These graphs are added to a TMultiGraph, and during an interactive training we get this TMultiGraph object and plot it with JsROOT. ; Definition at line 94 of file MethodBase.h. Public Member Functions;  IPythonInteractive ();  standard constructor ;  ;  ~IPythonInteractive ();  standard destructor ;  ; void AddPoint (Double_t x, Double_t y1, Double_t y2);  This function is used only in 2 TGraph case, and it will add new data points to graphs. ;  ; void AddPoint (std::vector< Double_t > &dat);  This function can add data points to as many TGraphs as we have. ;  ; void ClearGraphs ();  This function sets the point number to 0 for all graphs. ;  ; TMultiGraph * Get ();  ; void Init (std::vector< TString > &graphTitles);  This function gets some title and it creates a TGraph for every title. ;  ; bool NotInitialized ();  . Private Attributes; std::vector< TGraph * > fGraphs;  ; Int_t fIndex;  ; TMultiGraph * fMultiGraph;  ; Int_t fNumGraphs;  . #include <TMVA/MethodBase.h>; Constructor & Destructor Documentation. ◆ IPythonInteractive(). TMVA::IPythonInteractive::IPythonInteractive ; (; ). standard constructor ; Definition at line 146 of file MethodBase.cxx. ◆ ~IPythonInteractive(). TMVA::IPythonInteractive::~IPythonInteractive ; (; ). standard destructor ; Definition at line 154 of file MethodBase.cxx. Member Function Documentation. ◆ AddPoint() [1/2]. void TMVA::IPythonInteractive::AddPoint ; (; Double_t ; x, . Double_t ; y1, . Double_t ; y2 . ). This function is used only in 2 TGraph case, and it will add new data points to graphs. ; Parameters. [in]xthe x coordinate ; [in]y1the y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1IPythonInteractive.html:1154,Clear,ClearGraphs,1154,doc/master/classTMVA_1_1IPythonInteractive.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPythonInteractive.html,1,['Clear'],['ClearGraphs']
Usability,"ate Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RGeomDescription Class Reference. . Definition at line 210 of file RGeomData.hxx. Classes; class  ShapeDescr;  . Public Member Functions;  RGeomDescription ()=default;  ; void AddSignalHandler (const void *handler, RGeomSignalFunc_t func);  Add signal handler. ;  ; void Build (TGeoManager *mgr, const std::string &volname="""");  Collect information about geometry hierarchy into flat list like it done in JSROOT ClonedNodes.createClones. ;  ; void Build (TGeoVolume *vol);  Collect information about geometry from single volume like it done in JSROOT ClonedNodes.createClones. ;  ; bool ChangeConfiguration (const std::string &json);  Change configuration by client Returns true if any parameter was really changed. ;  ; bool ChangeNodeVisibility (const std::vector< std::string > &path, bool on);  Change visibility for specified element Returns true if changes was performed. ;  ; bool ClearAllPhysVisibility ();  Reset all custom visibility settings. ;  ; void ClearCache ();  Clear cached data, need to be clear when connection broken. ;  ; void ClearDrawData ();  Clear raw data. Will be rebuild when next connection will be established. ;  ; bool ClearPhysNodeVisibility (const std::vector< std::string > &path);  Reset custom visibility of physical node by path. ;  ; int FindNodeId (const std::vector< int > &stack);  Returns nodeid for given stack array, returns -1 in case of failure. ;  ; std::string GetActiveItem () const;  ; std::vector< int > GetClickedItem () const;  ; std::string GetDrawJson () const;  ; std::string GetDrawOptions () const;  Returns draw options, used for JSROOT TGeoPainter. ;  ; std::vector< int > GetHighlightedItem () const;  ; int GetJsonComp () const;  Returns JSON compression level for data transfer. ;  ; int GetMaxVisFaces () const;  Returns maximal visible number of faces, ignored when non-positive. ;  ; int GetMaxVisNodes () const;  Returns maximal visible number o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:1166,Clear,ClearAllPhysVisibility,1166,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,2,['Clear'],['ClearAllPhysVisibility']
Usability,"ate an iterator over all bins. Public interface is THnIter.Definition THn.cxx:207; THn::Resetvoid Reset(Option_t *option="""") overrideReset the contents of a THn.Definition THn.cxx:250; THn::GetBinLong64_t GetBin(const Int_t *idx) const overrideDefinition THn.h:56; THn::GetBinLong64_t GetBin(const char *name[]) const overrideDefinition THn.h:67; THn::Sumw2void Sumw2() overrideEnable calculation of errors.Definition THn.cxx:216; THn::THnTHn()=default; THn::GetBinLong64_t GetBin(const Double_t *x) const overrideDefinition THn.h:59; THn::AddBinContentvoid AddBinContent(Long64_t bin, Double_t v=1.) overrideDefinition THn.h:112; THn::GetNbinsLong64_t GetNbins() const overrideDefinition THn.h:54; THn::ProjectionTH3D * Projection(Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") constForwards to THnBase::Projection().Definition THn.h:160; THn::SetBinContentvoid SetBinContent(Long64_t bin, Double_t v) overrideDefinition THn.h:100; THn::GetArrayvirtual TNDArray & GetArray()=0; THn::GetArrayvirtual const TNDArray & GetArray() const =0; THn::ProjectionTHn * Projection(Int_t ndim, const Int_t *dim, Option_t *option="""") constDefinition THn.h:165; TNDArrayTDefinition TNDArray.h:114; TNDArrayN-Dim array class.Definition TNDArray.h:46; TNDArray::AddAtvirtual void AddAt(ULong64_t linidx, Double_t value)=0; TNDArray::AtAsDoublevirtual Double_t AtAsDouble(ULong64_t linidx) const =0; TNDArray::GetNbinsLong64_t GetNbins() constDefinition TNDArray.h:69; TNDArray::GetCellSizeLong64_t GetCellSize(Int_t dim) constDefinition TNDArray.h:70; TNDArray::GetBinLong64_t GetBin(const Int_t *idx) constDefinition TNDArray.h:72; TNDArray::SetAsDoublevirtual void SetAsDouble(ULong64_t linidx, Double_t value)=0; bool; double; int; xDouble_t x[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5; v@ vDefinition rootcling_impl.cxx:3699; groupDefinition TWinNTSystem.h:50. histhistincTHn.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THn_8h_source.html:17284,Guid,Guide,17284,doc/master/THn_8h_source.html,https://root.cern,https://root.cern/doc/master/THn_8h_source.html,1,['Guid'],['Guide']
Usability,"ate input values to each neuron. void PrintMessage(TString message, Bool_t force = kFALSE) const; print messages, turn off printing by setting verbose and debug flag appropriately. void WaitForKeyboard(); wait for keyboard input, for debugging. void PrintNetwork() const; print network representation, for debugging. void PrintLayer(TObjArray* layer) const; print a single layer, for debugging. void PrintNeuron(TMVA::TNeuron* neuron) const; print a neuron, for debugging. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); get the mva value generated by the NN. const std::vector<Float_t> & GetRegressionValues(); get the regression value generated by the NN. const std::vector<Float_t> & GetMulticlassValues(); get the multiclass classification values generated by the NN. void AddWeightsXMLTo(void* parent) const; create XML description of ANN classifier. void ReadWeightsFromXML(void* wghtnode); read MLP from xml weight file. void ReadWeightsFromStream(istream& istr); destroy/clear the network then read it back in from the weights file. const TMVA::Ranking* CreateRanking(); compute ranking of input variables by summing function of weights. void CreateWeightMonitoringHists(const TString& bulkname, vector<TH1*>* hv = 0) const. void WriteMonitoringHistosToFile() const; write histograms to file. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. Bool_t Debug() const; who the hell makes such strange Debug flags that even use ""global pointers"".. MethodANNBase(const TString& jobName, TMVA::Types::EMVA methodType, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir); constructors dictated by subclassing off of MethodBase. void SetActivation(TMVA::TActivation* activation); setters for subclasses. void SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator). void Train(); this will have to be overridden by every subclass. Double_t GetNetworkOutput(); { return GetOutputN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodANNBase.html:23650,clear,clear,23650,root/html602/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodANNBase.html,2,['clear'],['clear']
Usability,"ate input values to each neuron. void PrintMessage(TString message, Bool_t force = kFALSE) const; print messages, turn off printing by setting verbose and debug flag appropriately. void WaitForKeyboard(); wait for keyboard input, for debugging. void PrintNetwork() const; print network representation, for debugging. void PrintLayer(TObjArray* layer) const; print a single layer, for debugging. void PrintNeuron(TMVA::TNeuron* neuron) const; print a neuron, for debugging. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); get the mva value generated by the NN. const std::vector<Float_t> & GetRegressionValues(); get the regression value generated by the NN. const std::vector<Float_t> & GetMulticlassValues(); get the multiclass classification values generated by the NN. void AddWeightsXMLTo(void* parent) const; create XML description of ANN classifier. void ReadWeightsFromXML(void* wghtnode); read MLP from xml weight file. void ReadWeightsFromStream(istream& istr); destroy/clear the network then read it back in from the weights file. const TMVA::Ranking* CreateRanking(); compute ranking of input variables by summing function of weights. void CreateWeightMonitoringHists(const TString& bulkname, vector<TH1*>* hv = 0) const. void WriteMonitoringHistosToFile() const; write histograms to file. void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. Bool_t Debug() const; who the hell makes such strange Debug flags that even use ""global pointers"".. void SetActivation(TMVA::TActivation* activation); setters for subclasses. void SetNeuronInputCalculator(TMVA::TNeuronInput* inputCalculator). void Train(); this will have to be overridden by every subclass. Double_t GetNetworkOutput(); { return GetOutputNeuron()->GetActivationValue(); }. Int_t NumCycles(); accessors. { return fNcycles; }. TNeuron* GetInputNeuron(Int_t index); { return (TNeuron*)fInputLayer->At(index); }. TNeuron* GetOutputNeuron(Int_t index = 0); { return fOutputNeur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodANNBase.html:20899,clear,clear,20899,root/html528/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodANNBase.html,4,['clear'],['clear']
Usability,"ate instance of TSQLStatement class, TSQLServer::Statement() method; should be used. Depending of the driver, used for connection to ODBC,; appropriate object instance will be created. For the moment there are; three different implementation of TSQLStatement class: for MySQL,; Oracle and ODBC. Hopefully, support of ODBC will allows usage of; statements for most existing RDBMS. // first connect to data base; TSQLServer* serv = TSQLServer::Connect(""mysql://hostname.domain:3306/test"",; ""user"", ""pass"");; // check if connection is ok; if ((serv!=0) && serv->IsConnected()) {; // create statement instance; TSQLStatement* stmt = serv->Statement(""CREATE TABLE TESTTABLE (ID1 INT, ID2 INT, FFIELD VARCHAR(255), FVALUE VARCHAR(255))"";; // process statement; stmt->Process();; // destroy object; delete stmt;; }; delete serv;. 2. Insert data to data base. There is a special syntax of SQL queries, which allow to use values,; provided as parameters. For instance, insert one row in TESTTABLE, created; with previous example, one can simply execute query like:. serv->Query(""INSERT INTO TESTTABLE VALUES (1, 2, \""name1\"", \""value1\"""");. But when many (100-1000) rows should be inserted, each call of; TSQLServer::Query() method will cause communication loop with database; server. As a result, insertion of data will takes too much time. TSQLStatement provides a mechanism to insert many rows at once. First of all,; appropriate statement should be created:. TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (?, ?, ?, ?)"", 100);. Here question marks ""?"" indicates where statement parameters can be inserted.; To specify values of parameters, SetInt(), SetDouble(), SetString() and other; methods of TSQLStatement class should be used. Before parameters values; can be specified, NextIteration() method of statement class should be called.; For each new row first, NextIteration() called, that parameters values are; specified. There is one limitation - once pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSQLStatement.html:1881,simpl,simply,1881,root/html528/TSQLStatement.html,https://root.cern,https://root.cern/root/html528/TSQLStatement.html,3,['simpl'],['simply']
Usability,"ate one subbranch for each data member of; the object TTrack. ==> Case E. TBranch *branch = tree->Branch( branchname, STLcollection, buffsize, splitlevel);; STLcollection is the address of a pointer to std::vector, std::list,; std::deque, std::set or std::multiset containing pointers to objects.; If the splitlevel is a value bigger than 100 (TTree::kSplitCollectionOfPointers); then the collection will be written in split mode, e.g. if it contains objects of; any types deriving from TTrack this function will sort the objects; based on their type and store them in separate branches in split; mode. ==> branch->SetAddress(Void *address); In case of dynamic structures changing with each entry for example, one must; redefine the branch address before filling the branch again.; This is done via the TBranch::SetAddress member function. ==> tree->Fill(); loops on all defined branches and for each branch invokes the Fill function. See also the class TNtuple (a simple Tree with branches of floats); and the class TNtupleD (a simple Tree with branches of doubles). Adding a Branch to an Existing Tree. You may want to add a branch to an existing tree. For example,; if one variable in the tree was computed with a certain algorithm,; you may want to try another algorithm and compare the results.; One solution is to add a new branch, fill it, and save the tree.; The code below adds a simple branch to an existing tree.; Note the kOverwrite option in the Write method, it overwrites the; existing tree. If it is not specified, two copies of the tree headers; are saved. void tree3AddBranch(){; TFile f(""tree3.root"", ""update"");. Float_t new_v;; TTree *t3 = (TTree*)f->Get(""t3"");; TBranch *newBranch = t3->Branch(""new_v"", &new_v, ""new_v/F"");. //read the number of entries in the t3; Long64_t nentries = t3->GetEntries();. for (Long64_t i = 0; i < nentries; i++){; new_v= gRandom->Gaus(0, 1);; newBranch->Fill();; }; // save only the new version of the tree; t3->Write("""", TObject::kOverwrite);; }; A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:7364,simpl,simple,7364,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,6,['simpl'],['simple']
Usability,"ate randomly points (vectors) according to an arbitrary probability distribution in n dimensions, for which you supply your own method. FOAM can do it for you! Even if your distributions has quite strong peaks and is discontinuous!; FOAM generates random points with weight one or with variable weight.; FOAM is capable to integrate using efficient ""adaptive"" MC method. (The distribution does not need to be normalized to one.). How does it work?; FOAM is the simplified version of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks. See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. FOAM is now fully integrated with the ROOT package. The important bonus of the ROOT use is persistency of the FOAM objects!; For more sophisticated problems full version of FOAM may be more appropriate: See full version of FOAM. Simple example of the use of FOAM:; ; #include ""Riostream.h""; #include ""TFoam.h""; #include ""TCanvas.h""; #include ""TH2.h""; #include ""TMath.h""; #include ""TFoamIntegrand.h""; #include ""TRandom3.h""; ; //_____________________________________________________________________________; Double_t sqr(Double_t x){; return x*x;; }; //_____________________________________________________________________________; Double_t Camel2(Int_t nDim, Double_t *Xarg){; // 2-dimensional distribution for Foam, normalized to one (within 1e-5); Double_t x=Xarg[0];; Double_t y=Xarg[1];; Double_t GamSq= sqr(0.100e0);; Double_t Dist= 0;; Dist +=exp(-(sqr(x-1./3) +sqr(y-1./3))/GamSq)/GamSq/TMath::Pi();; Dist +=exp(-(sqr(x-2./3) +sqr(y-2./3))/GamSq)/GamSq/TMath::Pi();; return 0.5*Dist;; }; //_____________________________________________________________________________; ; Int_t foam_kanwa(){; cout<<""--- kanwa started ---""<<endl;; TH2D *hst_xy = new TH2D(""hst_xy"" , ""x-y plot"", 50,0,1.0, 50,0,1.0);; Double_t MCvect[2]; // 2-dim vector generated in the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoam.html:1641,Simpl,Simple,1641,doc/master/classTFoam.html,https://root.cern,https://root.cern/doc/master/classTFoam.html,1,['Simpl'],['Simple']
Usability,"ate(). template<class Element > . void TMatrixT< Element >::Allocate ; (; Int_t ; no_rows, . Int_t ; no_cols, . Int_t ; row_lwb = 0, . Int_t ; col_lwb = 0, . Int_t ; init = 0, . Int_t ; = -1 . ). protected . Allocate new matrix. ; Arguments are number of rows, columns, row lowerbound (0 default) and column lowerbound (0 default). ; Definition at line 464 of file TMatrixT.cxx. ◆ Class() [1/2]. template<class Element > . static TClass * TMatrixT< Element >::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class() [2/2]. TClass * TMatrixT< double >::Class ; (; ). ◆ Class_Name(). template<class Element > . static const char * TMatrixT< Element >::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). template<class Element > . static constexpr Version_t TMatrixT< Element >::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 215 of file TMatrixT.h. ◆ Clear(). template<class Element > . void TMatrixT< Element >::Clear ; (; Option_t * ; = """"). inlineoverridevirtual . Implements TMatrixTBase< Element >.; Definition at line 123 of file TMatrixT.h. ◆ DeclFileName(). template<class Element > . static const char * TMatrixT< Element >::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 215 of file TMatrixT.h. ◆ Delete_m(). template<class Element > . void TMatrixT< Element >::Delete_m ; (; Int_t ; size, . Element *& ; m . ). protected . Delete data pointer m, if it was assigned on the heap. ; Definition at line 406 of file TMatrixT.cxx. ◆ Determinant() [1/2]. template<class Element > . Double_t TMatrixT< Element >::Determinant. overridevirtual . Return the matrix determinant. ; Reimplemented from TMatrixTBase< Element >.; Definition at line 1355 of file TMatrixT.cxx. ◆ Determinant() [2/2]. template<class Element > . void TMatrixT< Element >::Determinant ; (; Double_t & ; d1, . Double_t & ; d2 . ); const. overridevirtual . Return the matrix d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixT.html:33756,Clear,Clear,33756,doc/master/classTMatrixT.html,https://root.cern,https://root.cern/doc/master/classTMatrixT.html,1,['Clear'],['Clear']
Usability,"ate(). void TClonesArray::ExpandCreate ; (; Int_t ; n). virtual . Expand or shrink the array to n elements and create the clone objects by calling their default ctor. ; If n is less than the current size the array is shrunk and the allocated space is freed. This routine is typically used to create a clonesarray into which one can directly copy object data without going via the ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). ; Definition at line 514 of file TClonesArray.cxx. ◆ ExpandCreateFast(). void TClonesArray::ExpandCreateFast ; (; Int_t ; n). virtual . Expand or shrink the array to n elements and create the clone objects by calling their default ctor. ; If n is less than the current size the array is shrunk but the allocated space is not freed. This routine is typically used to create a clonesarray into which one can directly copy object data without going via the ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). This is a simplified version of ExpandCreate used in the TTree mechanism. ; Definition at line 558 of file TClonesArray.cxx. ◆ GetClass(). TClass * TClonesArray::GetClass ; (; ); const. inline . Definition at line 53 of file TClonesArray.h. ◆ IsA(). TClass * TClonesArray::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 83 of file TClonesArray.h. ◆ MultiSort(). void TClonesArray::MultiSort ; (; Int_t ; nTCs, . TClonesArray ** ; tcs, . Int_t ; upto = kMaxInt . ). Sort multiple TClonesArrays simultaneously with this array. ; If objects in array are sortable (i.e. IsSortable() returns true for all objects) then sort array. ; Definition at line 1061 of file TClonesArray.cxx. ◆ New(). TObject * TClonesArray::New ; (; Int_t ; idx). Create an object of type fClass with the default ctor at the specified index. ; Returns 0 in case of error. ; Definition at line 968 of file TClonesArray.cxx. ◆ operator=(). TClonesArray & TClonesArray::operator= ; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:37348,simpl,simplified,37348,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['simpl'],['simplified']
Usability,"ate; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *option="""") constTH1virtual; Class()TH1Fstatic; Class_Name()TH1Fstatic; Class_Version()TH1Finlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearUnderflowAndOverflow()TH1virtual; Clone(const char *newname="""") const overrideTH1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral(Bool_t onlyPositive=false)TH1virtual; Copy(TObject &hnew) const overrideTH1Fvirtual; TH1::TAttLine::Copy(TAttLine &attline) constTAttLine; TH1::TAttFill::Copy(TAttFill &attfill) constTAttFill; TH1::TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; TArrayF::Copy(TArrayF &array) constTArrayFinline; DeclFileName()TH1Finlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TH1virtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTH1virtual; Divide(TF1 *f1, Double_t c1=1)TH1virtual; Divide(const TH1 *h1)TH1virtual; Divide(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""")TH1virtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1F-members.html:2393,Clear,ClearUnderflowAndOverflow,2393,doc/master/classTH1F-members.html,https://root.cern,https://root.cern/doc/master/classTH1F-members.html,1,['Clear'],['ClearUnderflowAndOverflow']
Usability,"ate; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *option="""") constTH1virtual; Class()TH1Istatic; Class_Name()TH1Istatic; Class_Version()TH1Iinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearUnderflowAndOverflow()TH1virtual; Clone(const char *newname="""") const overrideTH1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral(Bool_t onlyPositive=false)TH1virtual; Copy(TObject &hnew) const overrideTH1Ivirtual; TH1::TAttLine::Copy(TAttLine &attline) constTAttLine; TH1::TAttFill::Copy(TAttFill &attfill) constTAttFill; TH1::TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; TArrayI::Copy(TArrayI &array) constTArrayIinline; DeclFileName()TH1Iinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TH1virtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTH1virtual; Divide(TF1 *f1, Double_t c1=1)TH1virtual; Divide(const TH1 *h1)TH1virtual; Divide(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""")TH1virtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1I-members.html:2377,Clear,ClearUnderflowAndOverflow,2377,doc/master/classTH1I-members.html,https://root.cern,https://root.cern/doc/master/classTH1I-members.html,1,['Clear'],['ClearUnderflowAndOverflow']
Usability,"ate; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *option="""") constTH1virtual; Class()TH2Fstatic; Class_Name()TH2Fstatic; Class_Version()TH2Finlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearUnderflowAndOverflow()TH1virtual; Clone(const char *newname="""") const overrideTH1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral(Bool_t onlyPositive=false)TH1virtual; Copy(TObject &hnew) const overrideTH2Fvirtual; TH2::TAttLine::Copy(TAttLine &attline) constTAttLine; TH2::TAttFill::Copy(TAttFill &attfill) constTAttFill; TH2::TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; TArrayF::Copy(TArrayF &array) constTArrayFinline; DeclFileName()TH2Finlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TH1virtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTH1virtual; Divide(TF1 *f1, Double_t c1=1)TH1virtual; Divide(const TH1 *h1)TH1virtual; Divide(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""")TH1virtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2F-members.html:2622,Clear,ClearUnderflowAndOverflow,2622,doc/master/classTH2F-members.html,https://root.cern,https://root.cern/doc/master/classTH2F-members.html,1,['Clear'],['ClearUnderflowAndOverflow']
Usability,"ate; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *option="""") constTH1virtual; Class()TH3Dstatic; Class_Name()TH3Dstatic; Class_Version()TH3Dinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearUnderflowAndOverflow()TH1virtual; Clone(const char *newname="""") const overrideTH1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral(Bool_t onlyPositive=false)TH1virtual; Copy(TObject &hnew) const overrideTH3Dvirtual; TH3::TAttLine::Copy(TAttLine &attline) constTAttLine; TH3::TAttFill::Copy(TAttFill &attfill) constTAttFill; TH3::TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; TArrayD::Copy(TArrayD &array) constTArrayDinline; DeclFileName()TH3Dinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TH1virtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTH1virtual; Divide(TF1 *f1, Double_t c1=1)TH1virtual; Divide(const TH1 *h1)TH1virtual; Divide(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""")TH1virtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3D-members.html:2727,Clear,ClearUnderflowAndOverflow,2727,doc/master/classTH3D-members.html,https://root.cern,https://root.cern/doc/master/classTH3D-members.html,1,['Clear'],['ClearUnderflowAndOverflow']
Usability,"ateEditor(TClass* cl, Bool_t recurse); voidTGedEditor::ActivateEditors(TList* bcl, Bool_t recurse); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTVirtualPadEditor::Build(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTGedEditor::ConnectToCanvas(TCanvas* c); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTVirtualPadEditor::DeleteEditors(); virtual voidDeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; static voidDestroyEditors()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGedEditor.html:1631,Clear,Clear,1631,root/html528/TEveGedEditor.html,https://root.cern,https://root.cern/root/html528/TEveGedEditor.html,6,['Clear'],['Clear']
Usability,"atedDefinition DataLoader.cxx:541; TMVA::DataLoader::fATreeTypeInt_t fATreeTypetype of event (=classIndex)Definition DataLoader.h:206; TMVA::DataLoader::fTestAssignTreestd::vector< TTree * > fTestAssignTreefor each class: tmp tree if user wants to assign the events directlyDefinition DataLoader.h:204; TMVA::DataLoader::fAnalysisTypeTypes::EAnalysisType fAnalysisTypethe training typeDefinition DataLoader.h:210; TMVA::DataLoader::SetCutvoid SetCut(const TString &cut, const TString &className="""")Definition DataLoader.cxx:575; TMVA::DataLoader::AddVariablevoid AddVariable(const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx:485; TMVA::DataLoader::PrepareFoldDataSetvoid PrepareFoldDataSet(CvSplit &s, UInt_t foldNumber, Types::ETreeType tt=Types::kTraining)Function for assigning the correct folds to the testing or training set.Definition DataLoader.cxx:670; TMVA::DataSetInfoClass that contains all the data information.Definition DataSetInfo.h:62; TMVA::DataSetManagerClass that contains all the data information.Definition DataSetManager.h:51; TMVA::Types::EAnalysisTypeEAnalysisTypeDefinition Types.h:126; TMVA::Types::ETreeTypeETreeTypeDefinition Types.h:142; TMVA::Types::kMaxTreeType@ kMaxTreeTypealso used as temporary storage for trees not yet assigned for testing;training...Definition Types.h:145; TMVA::Types::kTraining@ kTrainingDefinition Types.h:143; TStringBasic string class.Definition TString.h:139; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; bool; double; int; unsigned int; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::DataLoaderCopyvoid DataLoaderCopy(TMVA::DataLoader *des, TMVA::DataLoader *src); ttauto * ttDefinition textangle.C:16; Types.h. tmvatmvaincTMVADataLoader.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataLoader_8h_source.html:21329,Guid,Guide,21329,doc/master/DataLoader_8h_source.html,https://root.cern,https://root.cern/doc/master/DataLoader_8h_source.html,1,['Guid'],['Guide']
Usability,"ategory, RooTreeDataStore, RooTruthModel, RooUniformBinning, RooVectorDataStore, RooWorkspace::CodeRepo, RooWorkspace::WSDir, RooWorkspace, RooWrapperPdf, RooXYChi2Var, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooStats::BayesianCalculator, RooStats::SamplingSummaryLookup, RooStats::AcceptanceRegion, RooStats::SamplingSummary, RooStats::ConfidenceBelt, RooStats::ConfInterval, RooStats::Heaviside, RooStats::HLFactory, RooStats::HybridPlot, RooStats::HybridResult, RooStats::HypoTestInverterPlot, RooStats::HypoTestInverterResult, RooStats::HypoTestPlot, RooStats::HypoTestResult, RooStats::LikelihoodInterval, RooStats::LikelihoodIntervalPlot, RooStats::MarkovChain, RooStats::MCMCCalculator, RooStats::MCMCInterval, RooStats::MCMCIntervalPlot, RooStats::MetropolisHastings, RooStats::PdfProposal, RooStats::PointSetInterval, RooStats::ProposalFunction, RooStats::ProposalHelper, RooStats::SamplingDistPlot, RooStats::SamplingDistribution, RooStats::SequentialProposal, RooStats::SimpleInterval, RooStats::SPlot, RooStats::ToyMCStudy, RooStats::ToyMCPayload, RooStats::UniformProposal, RooStats::UpperLimitMCSModule, ROOT::Experimental::XRooFit::xRooBrowser, ROOT::Experimental::XRooFit::xRooNode, TODBCResult, TODBCRow, TMVA::CvSplitKFolds, TMVA::Results, TMVA::ResultsClassification, TMVA::ResultsMulticlass, TMVA::ResultsRegression, ROOT::Internal::TreeUtils::RNoCleanupNotifier, TBasket, TBasketSQL, TBranch, TVirtualBranchBrowsable, TMethodBrowsable, TNonSplitBrowsable, TCollectionPropertyBrowsable, TCollectionMethodBrowsable, TBranchClones, TBranchElement, TBranchObject, TBranchRef, TBranchSTL, TBufferSQL, TChain, TChainElement, TCut, TEntryList, TEntryListArray, TEntryListBlock, TEntryListFromFile, TEventList, TFriendElement, TLeaf, TLeafB, TLeafC, TLeafD, TLeafD32, TLeafElement, TLeafF, TLeafF16, TLeafG, TLeafI, TLeafL, TLeafO, TLeafObject, TLeafS, TNtuple, TNtupleD, TQueryResult, TSelector, TSelectorScalar, TTree, TTreeCache, TTreeCacheUnzip, TTreeSQL, TVirtualIndex, T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:68854,Simpl,SimpleInterval,68854,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,2,['Simpl'],['SimpleInterval']
Usability,"ategory.cxx. ◆ setLabel() [2/4]. virtual bool RooAbsCategoryLValue::setLabel ; (; const char * ; label, . bool ; printError = true . ). virtual . Change category state by specifying a state name. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. Returnsbool to signal an error. ; Implements RooAbsCategoryLValue. ◆ setLabel() [3/4]. bool RooAbsCategoryLValue::setLabel ; (; const std::pair< std::string, value_type > & ; nameIdxPair, . bool ; printError = true . ). inline . Change category state to the state name of another category. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. NoteThe state index of the other category is ignored. ; Returnsbool to signal an error. ; Definition at line 69 of file RooAbsCategoryLValue.h. ◆ setLabel() [4/4]. bool RooAbsCategoryLValue::setLabel ; (; const std::string & ; label, . bool ; printError = true . ). inline . Set the value of the super category by specifying the state name. ; This looks up the corresponding index number, and calls setIndex(). ; Definition at line 60 of file RooAbsCategoryLValue.h. ◆ Streamer(). void RooSuperCategory::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsCategoryLValue. ◆ StreamerNVirtual(). void RooSuperCategory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 66 of file RooSuperCategory.h. Member Data Documentation. ◆ _multiCat. RooTemplateProxy<RooMultiCategory> RooSuperCategory::_multiCat. private . Definition at line 64 of file RooSuperCategory.h. Libraries for RooSuperCategory:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooSuperCategory.h; roofit/roofitcore/src/RooSuperCategory.cxx. RooSuperCategory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSuperCategory.html:55354,Guid,Guide,55354,doc/master/classRooSuperCategory.html,https://root.cern,https://root.cern/doc/master/classRooSuperCategory.html,1,['Guid'],['Guide']
Usability,"ates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to PERL syntax and functionality ;  rootalias.CDefines aliases: ;  rootenv.CProduce a picture of the ROOT environment ;  rootlogoff.CExample of rootlogoff.C ;  rootlogon.CExample of rootlogon.C ;  rootmarks.CPrints a summary of all ROOT benchmarks (must be run before) ;  tasks.CExample of TTasks . ROOT 6.08/07 - Reference Guide Generated on Thu May 31 2018 21:48:33 using Doxygen 1.8.13. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:159566,Guid,Guide,159566,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['Guid'],['Guide']
Usability,"ates the ""distance"" between two points; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters ; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class for all TMVA method; TMVA::MethodBayesClassifier Friedman's BayesClassifier method ; TMVA::MethodBoost ; TMVA::MethodCFMlpANN Interface for Clermond-Ferrand artificial neural network; TMVA::MethodCFMlpANN_Utils Implementation of Clermond-Ferrand artificial neural network; TMVA::MethodCommittee Analysis of Boosted MVA methods; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees ; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach) ; TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach"") ; TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Analysis of PDEFoam discriminant (PDEFoam or Mahalanobis approach) ; TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodSeedDistance Function Discriminant Analysis; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MetricEuler calculates the ""distance"" between two points; TMVA::MetricManhattan calculates the ""distance"" between two points; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:95412,simpl,simple,95412,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['simpl'],['simple']
Usability,ath ; (; ); const. inline . Definition at line 124 of file TGeoPhysicalNode.h. ◆ GetPhysicalNode(). TGeoPhysicalNode * TGeoPNEntry::GetPhysicalNode ; (; ); const. inline . Definition at line 134 of file TGeoPhysicalNode.h. ◆ IsA(). TClass * TGeoPNEntry::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 138 of file TGeoPhysicalNode.h. ◆ operator=(). TGeoPNEntry & TGeoPNEntry::operator= ; (; const TGeoPNEntry & ; pne). inlineprotected . Definition at line 109 of file TGeoPhysicalNode.h. ◆ SetMatrix(). void TGeoPNEntry::SetMatrix ; (; const TGeoHMatrix * ; mat). Set the additional matrix for this node entry. ; The matrix will be deleted by this class unless registered by the user to gGeoManager ; Definition at line 631 of file TGeoPhysicalNode.cxx. ◆ SetPhysicalNode(). void TGeoPNEntry::SetPhysicalNode ; (; TGeoPhysicalNode * ; node). Setter for the corresponding physical node. ; Definition at line 618 of file TGeoPhysicalNode.cxx. ◆ Streamer(). void TGeoPNEntry::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoPNEntry::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 138 of file TGeoPhysicalNode.h. Member Data Documentation. ◆ fGlobalOrig. TGeoHMatrix* TGeoPNEntry::fGlobalOrig. private . Definition at line 105 of file TGeoPhysicalNode.h. ◆ fMatrix. const TGeoHMatrix* TGeoPNEntry::fMatrix. private . Definition at line 104 of file TGeoPhysicalNode.h. ◆ fNode. TGeoPhysicalNode* TGeoPNEntry::fNode. private . Definition at line 103 of file TGeoPhysicalNode.h. Libraries for TGeoPNEntry:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoPhysicalNode.h; geom/geom/src/TGeoPhysicalNode.cxx. TGeoPNEntry. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:09 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPNEntry.html:16986,Guid,Guide,16986,doc/master/classTGeoPNEntry.html,https://root.cern,https://root.cern/doc/master/classTGeoPNEntry.html,1,['Guid'],['Guide']
Usability,"ath(TString::Format(""%s:%s"", current, dirName.Data()));; ; TControlBar *bar = new TControlBar(""vertical"", ""Demos"", 10, 10);; bar->AddButton(""Help Demos"", "".x demoshelp.C"", ""Click Here For Help on Running the Demos"");; bar->AddButton(""browser"", ""new TBrowser;"", ""Start the ROOT Browser"");; bar->AddButton(""framework"", "".x graphics/framework.C"", ""An Example of Object Oriented User Interface"");; bar->AddButton(""first"", "".x graphics/first.C"", ""An Example of Slide with Root"");; bar->AddButton(""hsimple"", "".x hsimple.C"", ""An Example Creating Histograms/Ntuples on File"");; bar->AddButton(""hsum"", "".x hist/hsum.C"", ""Filling Histograms and Some Graphics Options"");; bar->AddButton(""formula1"", "".x graphics/formula1.C"", ""Simple Formula and Functions"");; bar->AddButton(""surfaces"", "".x graphs/surfaces.C"", ""Surface Drawing Options"");; bar->AddButton(""fillrandom"", "".x hist/fillrandom.C"", ""Histograms with Random Numbers from a Function"");; bar->AddButton(""fit1"", "".x fit/fit1.C"", ""A Simple Fitting Example"");; bar->AddButton(""multifit"", "".x fit/multifit.C"", ""Fitting in Subranges of Histograms"");; bar->AddButton(""h1ReadAndDraw"", "".x hist/h1ReadAndDraw.C"", ""Drawing Options for 1D Histograms"");; bar->AddButton(""graph"", "".x graphs/graph.C"", ""Example of a Simple Graph"");; bar->AddButton(""gerrors"", "".x graphs/gerrors.C"", ""Example of a Graph with Error Bars"");; bar->AddButton(""tornado"", "".x graphics/tornado.C"", ""Examples of 3-D PolyMarkers"");; bar->AddButton(""geometry"", "".x geom/rootgeom.C"", ""Example of TGeoManager drawing"");; bar->AddButton(""file"", "".x io/file.C"", ""The ROOT File Format"");; bar->AddButton(""fildir"", "".x io/fildir.C"", ""The ROOT File, Directories and Keys"");; bar->AddButton(""tree"", "".x tree/tree.C"", ""The Tree Data Structure"");; bar->AddButton(""ntuple1"", "".x tree/ntuple1.C"", ""Ntuples and Selections"");; bar->AddButton(""benchmarks"", "".x legacy/benchmarks.C"", ""Runs several tests and produces an benchmark report"");; bar->AddButton(""rootmarks"", "".x legacy/rootmarks.C"", ""Prints an Estimate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/demos_8C.html:1565,Simpl,Simple,1565,doc/master/demos_8C.html,https://root.cern,https://root.cern/doc/master/demos_8C.html,1,['Simpl'],['Simple']
Usability,"ath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0); static voidTProof::AddEnvVar(const char* name, const char* value); voidTProof::AddFeedback(const char* name); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:1943,Clear,Clear,1943,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,3,['Clear'],['Clear']
Usability,"ath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0); static voidTProof::AddEnvVar(const char* name, const char* value); voidTProof::AddFeedback(const char* name); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* send",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:1952,Clear,Clear,1952,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,6,['Clear'],['Clear']
Usability,"ath::VirtualIntegratorMultiDim ; ROOT::Math::VirtualIntegratorOneDim ; ROOT::Math::WrappedMultiTF1 ; ROOT::Math::WrappedTF1 ; ROOT::MathMore ; ROOT::Minuit2::CombinedMinimizer ; ROOT::Minuit2::FCNBase ; ROOT::Minuit2::FCNGradientBase ; ROOT::Minuit2::FumiliFCNBase ; ROOT::Minuit2::FumiliMinimizer ; ROOT::Minuit2::FunctionMinimizer ; ROOT::Minuit2::FunctionMinimum ; ROOT::Minuit2::GenericFunction ; ROOT::Minuit2::MinosError ; ROOT::Minuit2::Minuit2Minimizer ; ROOT::Minuit2::MinuitParameter ; ROOT::Minuit2::MnApplication ; ROOT::Minuit2::MnContours ; ROOT::Minuit2::MnFumiliMinimize ; ROOT::Minuit2::MnHesse ; ROOT::Minuit2::MnMachinePrecision ; ROOT::Minuit2::MnMigrad ; ROOT::Minuit2::MnMinimize ; ROOT::Minuit2::MnMinos ; ROOT::Minuit2::MnPlot ; ROOT::Minuit2::MnScan ; ROOT::Minuit2::MnSimplex ; ROOT::Minuit2::MnStrategy ; ROOT::Minuit2::MnUserParameterState ; ROOT::Minuit2::MnUserParameters ; ROOT::Minuit2::ModularFunctionMinimizer ; ROOT::Minuit2::ScanMinimizer ; ROOT::Minuit2::SimplexMinimizer ; ROOT::Minuit2::VariableMetricMinimizer ; ROOT::TArrayProxy<ROOT::TArrayType<Long64_t,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<ULong64_t,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<bool,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<char,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<double,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<float,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<int,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<long,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<short,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned char,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned int,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned long,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned short,0> > ; ROOT::TBranchProxy ; ROOT::TBranchProxyClassDescriptor Class to cache the information we gathered about the branch and its content; ROOT::TBranchProxyDescriptor Describe the proxy for a branch; ROOT::TBranchProxyDirector ; ROOT::TClaArrayProxy<ROOT::TArrayType<Long64_t,0> > ; ROOT::TClaArr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:20516,Simpl,SimplexMinimizer,20516,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,3,['Simpl'],['SimplexMinimizer']
Usability,"atibility ;  ; void DeclareOptions ();  MethodKNN options. ;  ; Double_t GausKernel (const kNN::Event &event_knn, const kNN::Event &event, const std::vector< Double_t > &svec) const;  Gaussian kernel. ;  ; Double_t getKernelRadius (const kNN::List &rlist) const;  Get polynomial kernel radius. ;  ; double getLDAValue (const kNN::List &rlist, const kNN::Event &event_knn);  ; const std::vector< Double_t > getRMS (const kNN::List &rlist, const kNN::Event &event_knn) const;  Get polynomial kernel radius. ;  ; void Init (void);  Initialization. ;  ; void MakeKNN (void);  create kNN ;  ; Double_t PolnKernel (Double_t value) const;  polynomial kernel ;  ; void ProcessOptions ();  process the options specified by the user ;  . Private Attributes; Int_t fBalanceDepth;  number of binary tree levels used for balancing tree ;  ; kNN::EventVec fEvent;  ! (untouched) events used for learning ;  ; TString fKernel;  =""Gaus"",""Poln"" - kernel type for smoothing ;  ; LDA fLDA;  ! Experimental feature for local knn analysis ;  ; kNN::ModulekNN * fModule;  ! module where all work is done ;  ; Int_t fnkNN;  number of k-nearest neighbors ;  ; Float_t fScaleFrac;  fraction of events used to compute variable width ;  ; Float_t fSigmaFact;  scale factor for Gaussian sigma in Gaus. kernel ;  ; Double_t fSumOfWeightsB;  sum-of-weights for background training events ;  ; Double_t fSumOfWeightsS;  sum-of-weights for signal training events ;  ; Int_t fTreeOptDepth;  number of binary tree levels used for optimization ;  ; Bool_t fTrim;  set equal number of signal and background events ;  ; Bool_t fUseKernel;  use polynomial kernel weight function ;  ; Bool_t fUseLDA;  use local linear discriminant analysis to compute MVA ;  ; Bool_t fUseWeight;  use weights to count kNN ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodKNN.html:26411,learn,learning,26411,doc/master/classTMVA_1_1MethodKNN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodKNN.html,1,['learn'],['learning']
Usability,"atic . Definition at line 133 of file RooCFunction3Binding.h. ◆ IsA(). template<class VO , class VI1 , class VI2 , class VI3 > . TClass * RooCFunction3Ref< VO, VI1, VI2, VI3 >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 155 of file RooCFunction3Binding.h. ◆ name(). template<class VO , class VI1 , class VI2 , class VI3 > . const char * RooCFunction3Ref< VO, VI1, VI2, VI3 >::name ; (; ); const. inline . Definition at line 111 of file RooCFunction3Binding.h. ◆ operator()(). template<class VO , class VI1 , class VI2 , class VI3 > . VO RooCFunction3Ref< VO, VI1, VI2, VI3 >::operator() ; (; VI1 ; x, . VI2 ; y, . VI3 ; z . ); const. inline . Definition at line 106 of file RooCFunction3Binding.h. ◆ Streamer(). template<class VO , class VI1 , class VI2 , class VI3 > . void RooCFunction3Ref< VO, VI1, VI2, VI3 >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Definition at line 165 of file RooCFunction3Binding.h. ◆ StreamerNVirtual(). template<class VO , class VI1 , class VI2 , class VI3 > . void RooCFunction3Ref< VO, VI1, VI2, VI3 >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 155 of file RooCFunction3Binding.h. Member Data Documentation. ◆ _fmap. template<class VO , class VI1 , class VI2 , class VI3 > . RooCFunction3Map< VO, VI1, VI2, VI3 > * RooCFunction3Ref< VO, VI1, VI2, VI3 >::_fmap = nullptr. staticprivate . Pointer to embedded function. ; Definition at line 153 of file RooCFunction3Binding.h. ◆ _ptr. template<class VO , class VI1 , class VI2 , class VI3 > . func_t RooCFunction3Ref< VO, VI1, VI2, VI3 >::_ptr. private . Pointer to embedded function. ; Definition at line 151 of file RooCFunction3Binding.h. roofit/roofit/inc/RooCFunction3Binding.h. RooCFunction3Ref. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3Ref.html:14814,Guid,Guide,14814,doc/master/classRooCFunction3Ref.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3Ref.html,1,['Guid'],['Guide']
Usability,atic . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoNavigatorArray::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 311 of file TGeoNavigator.h. ◆ DeclFileName(). static const char * TGeoNavigatorArray::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 311 of file TGeoNavigator.h. ◆ GetCurrentNavigator(). TGeoNavigator * TGeoNavigatorArray::GetCurrentNavigator ; (; ); const. inline . Definition at line 308 of file TGeoNavigator.h. ◆ IsA(). TClass * TGeoNavigatorArray::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TCollection.; Definition at line 311 of file TGeoNavigator.h. ◆ operator=(). TGeoNavigatorArray & TGeoNavigatorArray::operator= ; (; const TGeoNavigatorArray & ; ). privatedelete . ◆ SetCurrentNavigator(). TGeoNavigator * TGeoNavigatorArray::SetCurrentNavigator ; (; Int_t ; inav). inline . Definition at line 309 of file TGeoNavigator.h. ◆ Streamer(). void TGeoNavigatorArray::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TCollection. ◆ StreamerNVirtual(). void TGeoNavigatorArray::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 311 of file TGeoNavigator.h. Member Data Documentation. ◆ fCurrentNavigator. TGeoNavigator* TGeoNavigatorArray::fCurrentNavigator. private . Definition at line 296 of file TGeoNavigator.h. ◆ fGeoManager. TGeoManager* TGeoNavigatorArray::fGeoManager. private . Definition at line 297 of file TGeoNavigator.h. Libraries for TGeoNavigatorArray:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoNavigator.h; geom/geom/src/TGeoNavigator.cxx. TGeoNavigatorArray. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:06 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigatorArray.html:22835,Guid,Guide,22835,doc/master/classTGeoNavigatorArray.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigatorArray.html,1,['Guid'],['Guide']
Usability,atic . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TOptionListItem::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TOptionListItem::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 120 of file TDataMember.h. ◆ DeclFileName(). static const char * TOptionListItem::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 120 of file TDataMember.h. ◆ IsA(). TClass * TOptionListItem::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 120 of file TDataMember.h. ◆ Streamer(). void TOptionListItem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TOptionListItem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 120 of file TDataMember.h. Member Data Documentation. ◆ fDataMember. TDataMember* TOptionListItem::fDataMember. Definition at line 108 of file TDataMember.h. ◆ fOptLabel. TString TOptionListItem::fOptLabel. Definition at line 113 of file TDataMember.h. ◆ fOptName. TString TOptionListItem::fOptName. Definition at line 112 of file TDataMember.h. ◆ fToggleMaskBit. Long_t TOptionListItem::fToggleMaskBit. Definition at line 111 of file TDataMember.h. ◆ fValue. Long_t TOptionListItem::fValue. Data member to which this option belongs. ; Definition at line 109 of file TDataMember.h. ◆ fValueMaskBit. Long_t TOptionListItem::fValueMaskBit. Definition at line 110 of file TDataMember.h. Libraries for TOptionListItem:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TDataMember.h; core/meta/src/TDataMember.cxx. TOptionListItem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:04 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTOptionListItem.html:12713,Guid,Guide,12713,doc/master/classTOptionListItem.html,https://root.cern,https://root.cern/doc/master/classTOptionListItem.html,1,['Guid'],['Guide']
Usability,"atic Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TSignalHandler; Int_t fDelay;  ; ESignals fSignal;  ; Bool_t fSync;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TProof.h>. Inheritance diagram for TProofInterruptHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofInterruptHandler() [1/2]. TProofInterruptHandler::TProofInterruptHandler ; (; const TProofInterruptHandler & ; ). private . ◆ TProofInterruptHandler() [2/2]. TProofInterruptHandler::TProofInterruptHandler ; (; TProof * ; p). inline . Definition at line 192 of file TProof.h. Member Function Documentation. ◆ Notify(). Bool_t TProofInterruptHandler::Notify ; (; ). overridevirtual . TProof interrupt handler. ; Implements TSysEvtHandler.; Definition at line 122 of file TProof.cxx. ◆ operator=(). TProofInterruptHandler & TProofInterruptHandler::operator= ; (; const TProofInterruptHandler & ; ). private . Member Data Documentation. ◆ fProof. TProof* TProofInterruptHandler::fProof. private . Definition at line 187 of file TProof.h. proof/proof/inc/TProof.h; proof/proof/src/TProof.cxx. TProofInterruptHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofInterruptHandler.html:17024,Guid,Guide,17024,doc/master/classTProofInterruptHandler.html,https://root.cern,https://root.cern/doc/master/classTProofInterruptHandler.html,1,['Guid'],['Guide']
Usability,"atic Public Member Functions |; List of all members ; ROOT::RCompressionSetting Struct Reference. ; The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. ; Both are defined in Bits.h. The default is to use the global setting and the default of the global setting is to use the ZLIB compression algorithm.; The LZMA algorithm (from the XZ package) is also available. The LZMA compression usually results in greater compression factors, but takes more CPU time and memory when compressing. LZMA memory usage is particularly high for compression levels 8 and 9.; Finally, the LZ4 package results in worse compression ratios than ZLIB but achieves much faster decompression rates. The current algorithms support level 1 to 9. The higher the level the greater the compression and more CPU time and memory resources used during compression. Level 0 means no compression.; Recommendation for the compression algorithm's levels:; ZLIB is recommended to be used with compression level 1 [101]; LZMA is recommended to be used with compression level 7-8 (higher is better, since in the case of LZMA we don't care about compression/decompression speed) [207 - 208]; LZ4 is recommended to be used with compression level 4 [404]; ZSTD is recommended to be used with compression level 5 [505] . Definition at line 45 of file Compression.h. Classes; struct  EAlgorithm;  ; struct  EDefaults;  ; struct  ELevel;  . Static Public Member Functions; static std::string AlgorithmToString (EAlgorithm::EValues algorithm);  . #include <Compression.h>; Member Function Documentation. ◆ AlgorithmToString(). static std::string ROOT::RCompressionSetting::AlgorithmToString ; (; EAlgorithm::EValues ; algorithm). static . The documentation for this struct was generated from the following file:; core/zip/inc/Compression.h. ROOTRCompressionSetting. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/structROOT_1_1RCompressionSetting.html:2088,Guid,Guide,2088,doc/v632/structROOT_1_1RCompressionSetting.html,https://root.cern,https://root.cern/doc/v632/structROOT_1_1RCompressionSetting.html,1,['Guid'],['Guide']
Usability,"atic Public Member Functions |; Protected Attributes |; List of all members ; TGeoCombiTrans Class ReferenceThe Geometry Package » Geometry classes. ; Class describing rotation + translation. ; Most frequently used in the description of TGeoNode 's ; Definition at line 317 of file TGeoMatrix.h. Public Member Functions;  TGeoCombiTrans ();  dummy ctor ;  ;  TGeoCombiTrans (const char *name);  Named ctor. ;  ;  TGeoCombiTrans (const char *name, Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot);  Named ctor. ;  ;  TGeoCombiTrans (const TGeoCombiTrans &other);  ;  TGeoCombiTrans (const TGeoMatrix &other);  Copy ctor from generic matrix. ;  ;  TGeoCombiTrans (const TGeoTranslation &tr, const TGeoRotation &rot);  Constructor from a translation and a rotation. ;  ;  TGeoCombiTrans (Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot);  Constructor from a translation specified by X,Y,Z and a pointer to a rotation. ;  ;  ~TGeoCombiTrans () override;  destructor ;  ; void Clear (Option_t *option="""") override;  Reset translation/rotation to identity. ;  ; TGeoRotation * GetRotation () const;  ; const Double_t * GetRotationMatrix () const override;  get the rotation array ;  ; const Double_t * GetScale () const override;  ; const Double_t * GetTranslation () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; TGeoMatrix * MakeClone () const override;  Make a clone of this matrix. ;  ; void Multiply (const TGeoMatrix *right);  multiply to the right with an other transformation if right is identity matrix, just return ;  ; TGeoCombiTrans operator* (const TGeoMatrix &other) const;  ; TGeoCombiTrans & operator*= (const TGeoMatrix &other);  Composition. ;  ; TGeoCombiTrans & operator= (const TGeoCombiTrans &other);  ; TGeoCombiTrans & operator= (const TGeoMatrix &matrix);  Assignment operator with generic matrix. ;  ; Bool_t operator== (const TGeoMatrix &other) const;  Is-equal operator. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCombiTrans.html:1163,Clear,Clear,1163,doc/master/classTGeoCombiTrans.html,https://root.cern,https://root.cern/doc/master/classTGeoCombiTrans.html,1,['Clear'],['Clear']
Usability,"atic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; virtual void Init (const char *cl, void *object, const char *redo, const char *undo);  Common protected method used in several constructors. ;  ; void PrintCollectionHeader (Option_t *option) const override;  Print collection header. ;  ;  Protected Member Functions inherited from TList; TObjLinkPtr_t * DoSort (TObjLinkPtr_t *head, Int_t n);  Sort linked list. ;  ; TObjLink * FindLink (const TObject *obj, Int_t &idx) const;  Returns the TObjLink object that contains object obj. ;  ; void InsertAfter (const TObjLinkPtr_t &newlink, const TObjLinkPtr_t &prev);  Insert a new link in the chain. ;  ; TObjLink * LinkAt (Int_t idx) const;  sorting order (when calling Sort() or for TSortedList) ;  ; Bool_t LnkCompare (const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);  Compares the objects stored in the TObjLink objects. ;  ; TObjLinkPtr_t NewLink (TObject *obj, const TObjLinkPtr_t &prev=nullptr);  Return a new TObjLink. ;  ; TObjLinkPtr_t NewLink (TObject *obj, TObjLink *prev);  ; TObjLinkPtr_t NewOptLink (TObject *obj, Option_t *opt, const TObjLin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:26340,undo,undo,26340,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"atic TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TProofProgressStatus::EStatusBitskFileCorrupted; static TProofProgressStatus::EStatusBitskFileNotOpen; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Long64_tfBytesRead; Double_tfCPUTime; Long64_tfEntries; Long64_tfLastEntriesLast chunck; Double_tfLastProcTimethe wallclock time of the last addition; Double_tfLastUpdateTimestamp of last change; Double_tfLearnTimethe time spent in learning phase; Double_tfProcTimethe wallclock time; Long64_tfReadCalls. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0); Main and default constructor. TProofProgressStatus& operator+=(const TProofProgressStatus& st); '+=' operator. TProofProgressStatus& operator-=(const TProofProgressStatus& st); '-=' operator. TProofProgressStatus operator-(TProofProgressStatus& st); '-' operator. void Print(Option_t* option = """") const; Dump the content. void SetLastUpdate(Double_t updtTime = 0); Update time stamp either with the passed value (if > 0) or with; the current time. Double_t GetCurrentRate() const; Get current rate. Rteunr the average rate if the current is not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressStatus.html:7242,learn,learning,7242,root/html602/TProofProgressStatus.html,https://root.cern,https://root.cern/root/html602/TProofProgressStatus.html,2,['learn'],['learning']
Usability,"atic TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. LayoutChunk_t*fChunksArray of chunks. The actual size will be maxChunks.; const TGFont*fFontThe font used when laying out the text.; Int_tfNumChunksNumber of chunks actually used in following array.; const char*fStringThe string that was layed out.; Int_tfWidthThe maximum width of all lines in the text layout. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGTextLayout(); destructor. void DrawText(Drawable_t dst, GContext_t gc, Int_t x, Int_t y, Int_t firstChar, Int_t lastChar) const; Use the information in the TGTextLayout object to display a multi-line,; justified string of text. This procedure is useful for simple widgets that need to display; single-font, multi-line text and want TGFont to handle the details. dst -- Window or pixmap in which to draw.; gc -- Graphics context to use for drawing text.; x, y -- Upper-left hand corner of rectangle in which to draw; (pixels).; firstChar -- The index of the first character to draw from the given; text item. 0 specfies the beginning.; lastChar -- The index just after the last character to draw from the; given text item. A number < 0 means to draw all characters. void UnderlineChar(Drawable_t dst, GContext_t gc, Int_t x, Int_t y, Int_t underline) const; Use the information in the TGTextLayout object to display an underline; below an individual character. This procedure does not draw the text,; just the underline. This procedure is useful for simple widgets that need to display; single-font, multi-line text with an individual character underlined; and want TGFont to handle the details. To display larger amounts of; underlined text, construct and use an underlined font. dst -- Window ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextLayout.html:6947,simpl,simple,6947,root/html602/TGTextLayout.html,https://root.cern,https://root.cern/root/html602/TGTextLayout.html,2,['simpl'],['simple']
Usability,"atic const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); Horizontal progress bar constructor. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void ShowPosition(Bool_t set = kTRUE, Bool_t percent = kTRUE, const char* format = ""%.2f""); Show postion text, either in percent or formatted according format. void DoRedraw(); Draw horizontal progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a horizontal progress bar as a C++ statement(s) on output stream out. virtual ~TGHProgressBar(); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHProgressBar.html:20410,progress bar,progress bar,20410,root/html528/TGHProgressBar.html,https://root.cern,https://root.cern/root/html528/TGHProgressBar.html,4,['progress bar'],['progress bar']
Usability,"atic function (called by TH1), interface to TSpectrum2::Search ; Definition at line 1712 of file TSpectrum2.cxx. ◆ Streamer(). void TSpectrum2::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSpectrum2::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file TSpectrum2.h. Member Data Documentation. ◆ fgAverageWindow. Int_t TSpectrum2::fgAverageWindow = 3. staticprotected . Average window of searched peaks. ; Definition at line 27 of file TSpectrum2.h. ◆ fgIterations. Int_t TSpectrum2::fgIterations = 3. staticprotected . Maximum number of decon iterations (default=3) ; Definition at line 28 of file TSpectrum2.h. ◆ fHistogram. TH1* TSpectrum2::fHistogram. protected . resulting histogram ; Definition at line 26 of file TSpectrum2.h. ◆ fMaxPeaks. Int_t TSpectrum2::fMaxPeaks. protected . Maximum number of peaks to be found. ; Definition at line 20 of file TSpectrum2.h. ◆ fNPeaks. Int_t TSpectrum2::fNPeaks. protected . number of peaks found ; Definition at line 21 of file TSpectrum2.h. ◆ fPosition. Double_t* TSpectrum2::fPosition. protected . [fNPeaks] array of current peak positions ; Definition at line 22 of file TSpectrum2.h. ◆ fPositionX. Double_t* TSpectrum2::fPositionX. protected . [fNPeaks] X position of peaks ; Definition at line 23 of file TSpectrum2.h. ◆ fPositionY. Double_t* TSpectrum2::fPositionY. protected . [fNPeaks] Y position of peaks ; Definition at line 24 of file TSpectrum2.h. ◆ fResolution. Double_t TSpectrum2::fResolution. protected . NOT USED resolution of the neighboring peaks ; Definition at line 25 of file TSpectrum2.h. Libraries for TSpectrum2:. [legend]; The documentation for this class was generated from the following files:; hist/spectrum/inc/TSpectrum2.h; hist/spectrum/src/TSpectrum2.cxx. TSpectrum2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2.html:50779,Guid,Guide,50779,doc/master/classTSpectrum2.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html,1,['Guid'],['Guide']
Usability,"atic void * first(void *env)Definition TCollectionProxyInfo.h:318; ROOT::Detail::TCollectionProxyInfo::Type::sizestatic void * size(void *env)Definition TCollectionProxyInfo.h:309; ROOT::Detail::TCollectionProxyInfo::Type::Iter_tT::iterator Iter_tDefinition TCollectionProxyInfo.h:297; ROOT::Detail::TCollectionProxyInfo::Type::Cont_tT Cont_tDefinition TCollectionProxyInfo.h:296; ROOT::Detail::TCollectionProxyInfo::Type::PValue_tValue_t * PValue_tDefinition TCollectionProxyInfo.h:302; ROOT::Detail::TCollectionProxyInfo::Type::PCont_tCont_t * PCont_tDefinition TCollectionProxyInfo.h:301; ROOT::Detail::TCollectionProxyInfo::Type::nextstatic void * next(void *env)Definition TCollectionProxyInfo.h:331; ROOT::Detail::TCollectionProxyInfo::Type::Value_tT::value_type Value_tDefinition TCollectionProxyInfo.h:298; ROOT::Detail::TCollectionProxyInfo::Type::constructstatic void * construct(void *what, size_t size)Definition TCollectionProxyInfo.h:340; ROOT::Detail::TCollectionProxyInfo::Type::Iterators_tIterators< Cont_t, fgLargeIterator > Iterators_tDefinition TCollectionProxyInfo.h:360; ROOT::Detail::TCollectionProxyInfo::Type::objectstatic PCont_t object(void *ptr)Definition TCollectionProxyInfo.h:306; ROOT::Detail::TCollectionProxyInfo::Type::Env_tEnviron< Iter_t > Env_tDefinition TCollectionProxyInfo.h:299; ROOT::Detail::TCollectionProxyInfo::Type::collectstatic void * collect(void *coll, void *array)Definition TCollectionProxyInfo.h:346; ROOT::Detail::TCollectionProxyInfo::Type::~Typevirtual ~Type()Definition TCollectionProxyInfo.h:304; ROOT::Detail::TCollectionProxyInfo::Type::PEnv_tEnv_t * PEnv_tDefinition TCollectionProxyInfo.h:300; mTMarker mDefinition textangle.C:8; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::Iterators::PtrSize_t::fAddressvoid * fAddressDefinition TCollectionProxyInfo.h:813. corecontincTCollectionProxyInfo.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html:55027,Guid,Guide,55027,doc/master/TCollectionProxyInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html,1,['Guid'],['Guide']
Usability,"atic void DisplayMarkerTypes()Display the table of markers with their numbers.Definition TMarker.cxx:103; TMarker::PaintMarkerNDCvirtual void PaintMarkerNDC(Double_t u, Double_t v)Draw this marker with new coordinates in NDC.Definition TMarker.cxx:332; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Streamervirtual void Streamer(TBuffer &)Stream an object of class TObject.Definition TObject.cxx:894; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Copyvirtual void Copy(TObject &object) constCopy this to obj.Definition TObject.cxx:146; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TPointDefinition TPoint.h:31; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TTextBase class for several text objects.Definition TText.h:22; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; v@ vDefinition rootcling_impl.cxx:3699; Rectangle_tRectangle structure (maps to the X11 XRectangle structure)Definition GuiTypes.h:361; Rectangle_t::fXShort_t fXDefinition GuiTypes.h:362. graf2dgrafsrcTMarker.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMarker_8cxx_source.html:24315,Guid,Guide,24315,doc/master/TMarker_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMarker_8cxx_source.html,1,['Guid'],['Guide']
Usability,"atic; SetPoint(Int_t point, Double_t x, Double_t y, Double_t z)TGraph2Dvirtual; SetTitle(const char *title="""") overrideTGraph2Dvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTGraph2Dvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TGraph2Dinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttMarker()TAttMarker; TAttMarker(Color_t color, Style_t style, Size_t msize)TAttMarker; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TGraph2D()TGraph2D; TGraph2D(Int_t n)TGraph2D; TGraph2D(Int_t n, Int_t *x, Int_t *y, Int_t *z)TGraph2D; TGraph2D(Int_t n, Float_t *x, Float_t *y, Float_t *z)TGraph2D; TGraph2D(Int_t n, Double_t *x, Double_t *y, Double_t *z)TGraph2D; TGraph2D(TH2 *h2)TGraph2D; TGraph2D(const char *name, const char *title, Int_t n, Double_t *x, Double_t *y, Double_t *z)TGraph2D; TGraph2D(const char *filename, const char *format=""%lg %lg %lg"", Option_t *option="""")TGraph2D; TGraph2D(const TGraph2D &)TGraph2D; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TGraph2D() overrideTGraph2D; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2D-members.html:12194,Guid,Guide,12194,doc/master/classTGraph2D-members.html,https://root.cern,https://root.cern/doc/master/classTGraph2D-members.html,1,['Guid'],['Guide']
Usability,"atically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3464 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3408 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2903 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to analDeps ; Definition at line 3146 of file RooAbsReal.cxx. ◆ matchArgs() [2/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a, . const RooArgProxy & ; b . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the contents of proxies a,b occur in set 'allDeps' then the arguments held in a,b are copied from allDeps to analDeps ; Definition at line 3163 of file RooAbsReal.cxx. ◆ matchArgs() [3/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:121791,clear,cleared,121791,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['clear'],['cleared']
Usability,"atically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2988 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to analDeps ; Definition at line 3228 of file RooAbsReal.cxx. ◆ matchArgs() [2/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a, . const RooArgProxy & ; b . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the contents of proxies a,b occur in set 'allDeps' then the arguments held in a,b are copied from allDeps to analDeps ; Definition at line 3245 of file RooAbsReal.cxx. ◆ matchArgs() [3/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:123121,clear,cleared,123121,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['clear'],['cleared']
Usability,aticconstexpr . ReturnsVersion of this class ; Definition at line 45 of file TPosixMutex.h. ◆ DeclFileName(). static const char * TPosixMutex::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 45 of file TPosixMutex.h. ◆ IsA(). TClass * TPosixMutex::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TMutexImp.; Definition at line 45 of file TPosixMutex.h. ◆ Lock(). Int_t TPosixMutex::Lock ; (; ). overridevirtual . Lock the mutex. ; Implements TMutexImp.; Definition at line 74 of file TPosixMutex.cxx. ◆ Streamer(). void TPosixMutex::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TMutexImp. ◆ StreamerNVirtual(). void TPosixMutex::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 45 of file TPosixMutex.h. ◆ TryLock(). Int_t TPosixMutex::TryLock ; (; ). overridevirtual . Try locking the mutex. Returns 0 if mutex can be locked. ; Implements TMutexImp.; Definition at line 82 of file TPosixMutex.cxx. ◆ UnLock(). Int_t TPosixMutex::UnLock ; (; void ; ). overridevirtual . Unlock the mutex. ; Implements TMutexImp.; Definition at line 90 of file TPosixMutex.cxx. Friends And Related Symbol Documentation. ◆ TPosixCondition. friend class TPosixCondition. friend . Definition at line 30 of file TPosixMutex.h. Member Data Documentation. ◆ fMutex. pthread_mutex_t TPosixMutex::fMutex. private . Definition at line 33 of file TPosixMutex.h. ◆ kIsRecursive. constexpr int TPosixMutex::kIsRecursive = (1ULL << ( 14 )). staticconstexprprivate . Definition at line 35 of file TPosixMutex.h. Libraries for TPosixMutex:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/TPosixMutex.h; core/thread/src/TPosixMutex.cxx. TPosixMutex. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:10 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPosixMutex.html:13353,Guid,Guide,13353,doc/master/classTPosixMutex.html,https://root.cern,https://root.cern/doc/master/classTPosixMutex.html,1,['Guid'],['Guide']
Usability,aticprivate . Definition at line 37 of file TStructNode.h. ◆ fHeight. Float_t TStructNode::fHeight. private . Definition at line 53 of file TStructNode.h. ◆ fLevel. UInt_t TStructNode::fLevel. private . Definition at line 43 of file TStructNode.h. ◆ fMaxLevel. UInt_t TStructNode::fMaxLevel. private . Definition at line 55 of file TStructNode.h. ◆ fMaxObjects. UInt_t TStructNode::fMaxObjects. private . Definition at line 56 of file TStructNode.h. ◆ fMembers. TList* TStructNode::fMembers. private . Definition at line 49 of file TStructNode.h. ◆ fMembersCount. ULong_t TStructNode::fMembersCount. private . Definition at line 44 of file TStructNode.h. ◆ fName. TString TStructNode::fName. private . Definition at line 38 of file TStructNode.h. ◆ fNodeType. ENodeType TStructNode::fNodeType. private . Definition at line 54 of file TStructNode.h. ◆ fParent. TStructNode* TStructNode::fParent. private . Definition at line 42 of file TStructNode.h. ◆ fPointer. void* TStructNode::fPointer. private . Definition at line 46 of file TStructNode.h. ◆ fSize. ULong_t TStructNode::fSize. private . Definition at line 40 of file TStructNode.h. ◆ fTotalSize. ULong_t TStructNode::fTotalSize. private . Definition at line 41 of file TStructNode.h. ◆ fTypeName. TString TStructNode::fTypeName. private . Definition at line 39 of file TStructNode.h. ◆ fVisible. Bool_t TStructNode::fVisible. private . Definition at line 48 of file TStructNode.h. ◆ fWidth. Float_t TStructNode::fWidth. private . Definition at line 52 of file TStructNode.h. ◆ fX. Float_t TStructNode::fX. private . Definition at line 50 of file TStructNode.h. ◆ fY. Float_t TStructNode::fY. private . Definition at line 51 of file TStructNode.h. Libraries for TStructNode:. [legend]; The documentation for this class was generated from the following files:; graf3d/gviz3d/inc/TStructNode.h; graf3d/gviz3d/src/TStructNode.cxx. TStructNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructNode.html:25820,Guid,Guide,25820,doc/master/classTStructNode.html,https://root.cern,https://root.cern/doc/master/classTStructNode.html,1,['Guid'],['Guide']
Usability,"ation ; (; const DataSetInfo * ; dsi, . TString ; resultsName . ). constructor ; Definition at line 51 of file ResultsClassification.cxx. ◆ ~ResultsClassification(). TMVA::ResultsClassification::~ResultsClassification ; (; ). destructor ; Definition at line 61 of file ResultsClassification.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::ResultsClassification::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::ResultsClassification::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::ResultsClassification::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 90 of file ResultsClassification.h. ◆ Clear() [1/2]. void TMVA::ResultsClassification::Clear ; (; Option_t * ; ). inlineoverridevirtual . Reimplemented from TObject.; Definition at line 64 of file ResultsClassification.h. ◆ Clear() [2/2]. virtual void TObject::Clear ; (; Option_t * ; = """"). inlinevirtual . Reimplemented from TObject.; Definition at line 119 of file TObject.h. ◆ DeclFileName(). static const char * TMVA::ResultsClassification::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 90 of file ResultsClassification.h. ◆ GetAnalysisType(). Types::EAnalysisType TMVA::ResultsClassification::GetAnalysisType ; (; ). inlineoverridevirtual . Reimplemented from TMVA::Results.; Definition at line 80 of file ResultsClassification.h. ◆ GetSize(). Long64_t TMVA::ResultsClassification::GetSize ; (; ); const. inline . Definition at line 71 of file ResultsClassification.h. ◆ GetValueVector(). std::vector< Float_t > * TMVA::ResultsClassification::GetValueVector ; (; ). inline . Definition at line 77 of file ResultsClassification.h. ◆ GetValueVectorTypes(). std::vector< Bool_t > * TMVA::ResultsClassification::GetValueVectorTypes ; (; ). inline . Definition at line 78 of file ResultsClassific",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsClassification.html:13139,Clear,Clear,13139,doc/master/classTMVA_1_1ResultsClassification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsClassification.html,1,['Clear'],['Clear']
Usability,"ation Instantiate the Qt system within ROOT environment; TQtBrush create QBrush object based on the ROOT ""fill"" attributes ; TQtClientFilter Map Qt and ROOT event; TQtClientWidget QFrame implementation backing ROOT TGWindow objects; TQtMarker Convert ROOT TMarker objects on to QPointArray; TQtPadFont < Create Qt QFont object based on ROOT TAttText attributes; TQtRootSlot ; TQtTimer QTimer to awake the ROOT event loop from Qt event loop; TQtWidget QWidget to back ROOT TCanvas (Can be used with Qt designer); TQuaternion a quaternion class; TQueryDescription Query description; TQueryResult Class describing a query; TQueryResultManager PROOF query result manager; TROOT Top level (or root) structure for all classes; TRWLock Reader/writer lock; TRadialGradient Radial gradient fill.; TRandom Simple Random number generator (periodicity = 10**9); TRandom1 Ranlux Random number generators with periodicity > 10**14; TRandom2 Random number generator with periodicity of 10**26; TRandom3 Random number generator: Mersenne Twister; TRealData Description of persistent data members; TRecCmdEvent Class stores information about 1 commandline event (= 1 command typed by user in commandline); TRecEvent Abstract class. Defines basic interface for storing information about ROOT events; TRecExtraEvent Class stores information about extra events; TRecGuiEvent Class stores information about 1 GUI event in ROOT; TRecWinPair Class used for storing of window IDs mapping. Needed for replaying events.; TRecorder Class provides direct recorder/replayer interface for a user.; TRecorderInactive Represents state of TRecorder after its creation; TRecorderPaused Represents state of TRecorder when paused; TRecorderRecording Represents state of TRecorder when recording events; TRecorderReplaying Represents state of TRecorder when replaying; TRecorderState Abstract class that defines interface for a state of recorder; TRedirectOutputGuard Exception safe output redirection; TRef Persistent Reference link to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:126771,Simpl,Simple,126771,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['Simpl'],['Simple']
Usability,"ation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:3502,Learn,Learning,3502,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,2,"['Learn', 'learn']","['Learning', 'learning']"
Usability,"ation in ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » First Steps With ROOT Simulation in ROOT. The ROOT framework consists of many classes, grouped into several categories. Finally, the latter are grouped ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/simulation-root.html:1008,Guid,Guides,1008,d/simulation-root.html,https://root.cern,https://root.cern/d/simulation-root.html,1,['Guid'],['Guides']
Usability,"ation of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteTwoIterators_t) (void *begin, void *end);  ; enum  EProperty { kIsAssociative = (1ULL << ( 2 )); , kIsEmulated = (1ULL << ( 3 )); , kNeedDelete = (1ULL << ( 4 )); , kCustomAlloc = (1ULL << ( 5 )); };  ; typedef void *(* Next_t) (void *iter, const void *end);  iter and end should be pointers to an iterator to be incremented and an iterator that points to the end of the collection, respectively. ;  . Public Member Functions;  TVirtualCollectionProxy ();  ;  TVirtualCollectionProxy (TClass *cl);  ; virtual ~TVirtualCollectionProxy ();  ; virtual void * Allocate (UInt_t n, Bool_t forceDelete)=0;  Allocates space for storing at least n elements. ;  ; virtual void * At (UInt_t idx)=0;  Return the address of the value at index idx ;  ; virtual void Clear (const char *opt="""")=0;  Clear the container. ;  ; virtual void Commit (void *)=0;  Commits pending elements in a staging area (see Allocate() for more information). ;  ; virtual void DeleteArray (void *p, Bool_t dtorOnly=kFALSE) const;  Execute the container array destructor. ;  ; virtual void Destructor (void *p, Bool_t dtorOnly=kFALSE) const;  Execute the container destructor. ;  ; virtual TVirtualCollectionProxy * Generate () const =0;  Returns a clean object of the actual class that derives from TVirtualCollectionProxy. ;  ; virtual TClass * GetCollectionClass () const;  Return a pointer to the TClass representing the proxied container class. ;  ; virtual Int_t GetCollectionType () const =0;  Return the type of the proxied collection (see enumeration TClassEdit::ESTLType) ;  ; virtual TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version)=0;  ; virtual CopyIterator_t GetFunctionCopyIterator (Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualCollectionProxy.html:2752,Clear,Clear,2752,doc/master/classTVirtualCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionProxy.html,2,['Clear'],['Clear']
Usability,"ation(); voidTBufferFile::CheckCount(UInt_t offset); UInt_tTBufferFile::CheckObject(UInt_t offset, const TClass* cl, Bool_t readClass = kFALSE); voidCheckVersionBuf(); voidCreateElemNode(const TStreamerElement* elem); XMLNodePointer_tCreateItemNode(const char* name); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTBuffer::Expand(Int_t newsize); Bool_tExtractPointer(XMLNodePointer_t node, void*& ptr, TClass*& cl); voidExtractReference(XMLNodePointer_t node, const void* ptr, const TClass* cl); const char*TXMLSetup::GetElItemName(TStreamerElement* el); Bool_tTXMLSetup::IsValidXmlSetup(const char* setupstr); voidTObject::MakeZombie(); voidTBufferFile::operator=(const TBufferFile&); voidPerformPostProcessing(); voidPerformPreProcessing(const TStreamerElement* elem, XMLNodePointer_t elemnode); TXMLStackObj*PopStack(); Bool_tProcessPointer(const void* ptr, XMLNodePointer_t node); TXMLStackObj*PushStack(XMLNodePointer_t current, Bool_t simple = kFALSE); virtual Int_tTBuffer::Read(const char* name); Bool_tTXMLSetup::ReadSetupFromStr(const char* setupstr); voidRegisterPointer(const void* ptr, XMLNodePointer_t node); voidSetCompressionLevel(int level); voidSetXML(TXMLEngine* xml); voidShiftStack(const char* info = 0); TXMLStackObj*Stack(Int_t depth = 0); XMLNodePointer_tStackNode(); Bool_tVerifyAttr(XMLNodePointer_t node, const char* name, const char* value, const char* errinfo = 0); Bool_tVerifyElemNode(const TStreamerElement* elem); Bool_tVerifyItemNode(const char* name, const char* errinfo = 0); Bool_tVerifyNode(XMLNodePointer_t node, const char* name, const char* errinfo = 0); Bool_tVerifyStackAttr(const char* name, const char* value, const char* errinfo = 0); Bool_tVerifyStackNode(const char* name, const char* errinfo = 0); voidWorkWithClass(TStreamerInfo* info, const TClass* cl = 0); voidWorkWithElement(TStreamerElement* elem, Int_t number); virtual Int_tTBuffer::Write(const char* name, Int_t opt, Int_t bufs); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferXML.html:18098,simpl,simple,18098,root/html526/TBufferXML.html,https://root.cern,https://root.cern/root/html526/TBufferXML.html,1,['simpl'],['simple']
Usability,"ation, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tfConfidenceLevelconfidence level; Double_tfLowerLimitlower interval limit; RooArgSetfParametersset containing the parameter of interest; Double_tfUpperLimitupper interval limit. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-03-10 17:20; This page has been automatically generated. For commen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleInterval.html:6835,Simpl,SimpleInterval,6835,root/html534/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"ation. If may be given in various forms, specified by mode . mode=kSysErrModeMatrix the histogram sysError corresponds to an alternative response matrix. . mode=kSysErrModeShift the content of the histogram sysError are the absolute shifts of the response matrix . mode=kSysErrModeRelative the content of the histogram sysError specifies the relative uncertainties . Internally, all three cases are transformed to the case mode=kSysErrModeMatrix. ; Definition at line 292 of file TUnfoldSys.cxx. ◆ Class(). static TClass * TUnfoldSys::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TUnfoldSys::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TUnfoldSys::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 146 of file TUnfoldSys.h. ◆ ClearResults(). void TUnfoldSys::ClearResults ; (; void ; ). overrideprotectedvirtual . Clear all data members which depend on the unfolding results. ; Reimplemented from TUnfold.; Definition at line 650 of file TUnfoldSys.cxx. ◆ DeclFileName(). static const char * TUnfoldSys::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 146 of file TUnfoldSys.h. ◆ DoBackgroundSubtraction(). void TUnfoldSys::DoBackgroundSubtraction ; (; void ; ). protected . perform background subtraction ; This prepares the data members for the base class TUnfold, such that the background is properly taken into account. ; Definition at line 377 of file TUnfoldSys.cxx. ◆ GetBackground(). void TUnfoldSys::GetBackground ; (; TH1 * ; bgrHist, . const char * ; bgrSource = nullptr, . const Int_t * ; binMap = nullptr, . Int_t ; includeError = 3, . Bool_t ; clearHist = kTRUE . ); const. get background into a histogram ; Parameters. [in,out]bgrHisttarget histogram, content and errors will be altered ; [in]bgrSource(default=nullptr) name of backgrond source or zero to add all",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:33051,Clear,Clear,33051,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['Clear'],['Clear']
Usability,"ation. ◆ HuberLossFunctionBDT() [1/2]. TMVA::HuberLossFunctionBDT::HuberLossFunctionBDT ; (; ). Definition at line 240 of file LossFunction.cxx. ◆ HuberLossFunctionBDT() [2/2]. TMVA::HuberLossFunctionBDT::HuberLossFunctionBDT ; (; Double_t ; quantile). inline . Definition at line 183 of file LossFunction.h. ◆ ~HuberLossFunctionBDT(). TMVA::HuberLossFunctionBDT::~HuberLossFunctionBDT ; (; ). inline . Definition at line 184 of file LossFunction.h. Member Function Documentation. ◆ Fit(). Double_t TMVA::HuberLossFunctionBDT::Fit ; (; std::vector< LossFunctionEventInfo > & ; evs). virtual . huber BDT, determine the fit value for the terminal node based upon the events in the terminal node ; Implements TMVA::LossFunctionBDT.; Definition at line 334 of file LossFunction.cxx. ◆ Init(). void TMVA::HuberLossFunctionBDT::Init ; (; std::map< const TMVA::Event *, LossFunctionEventInfo > & ; evinfomap, . std::vector< double > & ; boostWeights . ). virtual . huber BDT, initialize the targets and prepare for the regression ; Implements TMVA::LossFunctionBDT.; Definition at line 246 of file LossFunction.cxx. ◆ SetTargets(). void TMVA::HuberLossFunctionBDT::SetTargets ; (; std::vector< const TMVA::Event * > & ; evs, . std::map< const TMVA::Event *, LossFunctionEventInfo > & ; evinfomap . ). virtual . huber BDT, set the targets for a collection of events ; Implements TMVA::LossFunctionBDT.; Definition at line 271 of file LossFunction.cxx. ◆ Target(). Double_t TMVA::HuberLossFunctionBDT::Target ; (; LossFunctionEventInfo & ; e). virtual . huber BDT, set the target for a single event ; Implements TMVA::LossFunctionBDT.; Definition at line 323 of file LossFunction.cxx. Libraries for TMVA::HuberLossFunctionBDT:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/LossFunction.h; tmva/tmva/src/LossFunction.cxx. TMVAHuberLossFunctionBDT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1HuberLossFunctionBDT.html:5085,Guid,Guide,5085,doc/master/classTMVA_1_1HuberLossFunctionBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HuberLossFunctionBDT.html,1,['Guid'],['Guide']
Usability,"ation. ◆ asfactor. ROOT::R::TRFunctionImport TMVA::MethodRXGB::asfactor. protected . Definition at line 101 of file MethodRXGB.h. ◆ asmatrix. ROOT::R::TRFunctionImport TMVA::MethodRXGB::asmatrix. protected . Definition at line 102 of file MethodRXGB.h. ◆ fDataSetManager. DataSetManager* TMVA::MethodRXGB::fDataSetManager. private . Definition at line 80 of file MethodRXGB.h. ◆ fEta. Double_t TMVA::MethodRXGB::fEta. protected . Definition at line 89 of file MethodRXGB.h. ◆ fFactorNumeric. std::vector<UInt_t> TMVA::MethodRXGB::fFactorNumeric. protected . Definition at line 93 of file MethodRXGB.h. ◆ fMaxDepth. UInt_t TMVA::MethodRXGB::fMaxDepth. protected . Definition at line 90 of file MethodRXGB.h. ◆ fModel. ROOT::R::TRObject* TMVA::MethodRXGB::fModel. protected . Definition at line 103 of file MethodRXGB.h. ◆ fNRounds. UInt_t TMVA::MethodRXGB::fNRounds. protected . Definition at line 88 of file MethodRXGB.h. ◆ IsModuleLoaded. Bool_t MethodRXGB::IsModuleLoaded = ROOT::R::TRInterface::Instance().Require(""xgboost""). staticprotected . Definition at line 91 of file MethodRXGB.h. ◆ predict. ROOT::R::TRFunctionImport TMVA::MethodRXGB::predict. protected . Definition at line 96 of file MethodRXGB.h. ◆ xgbdmatrix. ROOT::R::TRFunctionImport TMVA::MethodRXGB::xgbdmatrix. protected . Definition at line 98 of file MethodRXGB.h. ◆ xgbload. ROOT::R::TRFunctionImport TMVA::MethodRXGB::xgbload. protected . Definition at line 100 of file MethodRXGB.h. ◆ xgbsave. ROOT::R::TRFunctionImport TMVA::MethodRXGB::xgbsave. protected . Definition at line 99 of file MethodRXGB.h. ◆ xgbtrain. ROOT::R::TRFunctionImport TMVA::MethodRXGB::xgbtrain. protected . Definition at line 97 of file MethodRXGB.h. Libraries for TMVA::MethodRXGB:. [legend]; The documentation for this class was generated from the following files:; tmva/rmva/inc/TMVA/MethodRXGB.h; tmva/rmva/src/MethodRXGB.cxx. TMVAMethodRXGB. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodRXGB.html:34654,Guid,Guide,34654,doc/master/classTMVA_1_1MethodRXGB.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodRXGB.html,1,['Guid'],['Guide']
Usability,"ation.; static Int_tfgCountNumber of TStreamerInfo instances; static TStreamerElement*fgElementPointer to current TStreamerElement. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TStreamerInfo(); Default ctor. TStreamerInfo(TClass* cl); Create a TStreamerInfo object. ~TStreamerInfo(); TStreamerInfo dtor. void Build(); Build the I/O data structure for the current class version.; A list of TStreamerElement derived classes is built by scanning; one by one the list of data members of the analyzed class. void BuildCheck(); Check if built and consistent with the class dictionary.; This method is called by TFile::ReadStreamerInfo. void BuildEmulated(TFile* file); Create an Emulation TStreamerInfo object. Bool_t BuildFor(const TClass* cl). Check if we can build this for foreign class - do we have some rules; to do that. void BuildOld(); rebuild the TStreamerInfo structure. void Clear(Option_t* ); If opt cointains 'built', reset this StreamerInfo as if Build or BuildOld; was never called on it (usefull to force their re-running). void CallShowMembers(void* obj, TMemberInspector& insp) const; Emulated a call ShowMembers() on the obj of this class type, passing insp and parent. TObject * Clone(const char* newname = """") const; Make a clone of an object using the Streamer facility.; If newname is specified, this will be the name of the new object. Bool_t CompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete); Return True if the current StreamerInfo in cl or info is equivalent to this TStreamerInfo.; 'Equivalent' means the same number of persistent data member which the same actual C++ type and; the same name.; if 'warn' is true, Warning message are printed to explicit the differences.; if 'complete' is false, stop at the first error, otherwise continue until all members have been checked. void ComputeSize(); Compute total size of all persistent elements of the class. void ForceWriteInfo(TFile* file, Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TStreamerInfo.html:15289,Clear,Clear,15289,root/html532/TStreamerInfo.html,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html,1,['Clear'],['Clear']
Usability,"ation.cxx:1949; TApplication::ProcessLinevirtual Longptr_t ProcessLine(const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr)Process a single command line, either a C++ statement or an interpreter command starting with a ""....Definition TApplication.cxx:1565; TApplication::fgApplicationsstatic TList * fgApplicationsDefinition TApplication.h:82; TApplication::Closestatic void Close(TApplication *app)Static function used to close a remote application.Definition TApplication.cxx:2070; TApplication::SetEchoModevirtual void SetEchoMode(Bool_t mode)Set console echo mode:Definition TApplication.cxx:1968; TApplication::Helpvirtual void Help(const char *line)The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxy...Definition TApplication.cxx:1208; TApplication::LineProcessedvirtual void LineProcessed(const char *line)Emit signal when a line has been processed.Definition TApplication.cxx:1941; TApplication::ClearInputFilesvoid ClearInputFiles()Clear list containing macro files passed as program arguments.Definition TApplication.cxx:318; TApplication::fAppImpTApplicationImp * fAppImpDefinition TApplication.h:60; TApplication::EExitOnExceptionEExitOnExceptionDefinition TApplication.h:51; TApplication::kAbort@ kAbortDefinition TApplication.h:54; TApplication::kExit@ kExitDefinition TApplication.h:53; TApplication::ExecuteFilestatic Longptr_t ExecuteFile(const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE)Execute a file containing a C++ macro (static method).Definition TApplication.cxx:1729; TApplication::InitializeGraphicsvoid InitializeGraphics(Bool_t only_web=kFALSE)Initialize the graphics environment.Definition TApplication.cxx:244; TApplication::Openvirtual void Open()Definition TApplication.h:132; TApplication::LoadGraphicsLibsvirtual void LoadGraphicsLibs()Load shared libs necessary for graphics.Definition TApplication.cxx:1333; TApplication::StopIdleingvirtual void StopIdleing()Called when system stops idleing.Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:87352,Clear,ClearInputFilesvoid,87352,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,3,['Clear'],"['Clear', 'ClearInputFiles', 'ClearInputFilesvoid']"
Usability,"ation3D::Transformvoid Transform(const PositionVector3D< CoordSystem, Tag1 > &p1, PositionVector3D< CoordSystem, Tag2 > &p2) constTransformation operation for points between different coordinate system tags.Definition Translation3D.h:194; ROOT::Math::Impl::Translation3D::operator!=bool operator!=(const Translation3D< T > &rhs) constDefinition Translation3D.h:277; ROOT::Math::Impl::Translation3D::SetComponentsvoid SetComponents(T dx, T dy, T dz)Set the components from 3 scalars.Definition Translation3D.h:142; ROOT::Math::LorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system ...Definition LorentzVector.h:59; ROOT::Math::PositionVector3DClass describing a generic position vector (point) in 3 dimensions.Definition PositionVector3D.h:55; ROOT::Math::PositionVector3D::YScalar Y() constCartesian Y, converting if necessary from internal coordinate system.Definition PositionVector3D.h:275; ROOT::Math::PositionVector3D::ZScalar Z() constCartesian Z, converting if necessary from internal coordinate system.Definition PositionVector3D.h:280; ROOT::Math::PositionVector3D::XScalar X() constCartesian X, converting if necessary from internal coordinate system.Definition PositionVector3D.h:270; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::Translation3DFImpl::Translation3D< float > Translation3DFDefinition Translation3D.h:310; ROOT::Math::Translation3DImpl::Translation3D< double > Translation3DDefinition Translation3D.h:309; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v2@ v2Definition rootcling_impl.cxx:3702; v@ vDefinition rootcling_impl.cxx:3699; v1@ v1Definition rootcling_impl.cxx:3701; mTMarker mDefinition textangle.C:8. mathgenvectorincMathGenVectorTranslation3D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2Translation3D_8h_source.html:18851,Guid,Guide,18851,doc/master/GenVector_2Translation3D_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2Translation3D_8h_source.html,1,['Guid'],['Guide']
Usability,"ation::kL2@ kL2; TMVA::DNN::ERegularization::kL1@ kL1; TMVA::DNN::ERegularization::kNone@ kNone; TMVA::DNN::EActivationFunctionEActivationFunctionEnum that represents layer activation functions.Definition Functions.h:32; TMVA::DNN::EActivationFunction::kRelu@ kRelu; TMVA::DNN::EActivationFunction::kGauss@ kGauss; TMVA::DNN::EActivationFunction::kTanh@ kTanh; TMVA::DNN::EActivationFunction::kFastTanh@ kFastTanh; TMVA::DNN::EActivationFunction::kSigmoid@ kSigmoid; TMVA::DNN::EActivationFunction::kIdentity@ kIdentity; TMVA::DNN::EActivationFunction::kSoftSign@ kSoftSign; TMVA::DNN::EActivationFunction::kSymmRelu@ kSymmRelu; TMVA::DNN::ELossFunctionELossFunctionEnum that represents objective functions for the net, i.e.Definition Functions.h:57; TMVA::DNN::ELossFunction::kCrossEntropy@ kCrossEntropy; TMVA::DNN::ELossFunction::kSoftmaxCrossEntropy@ kSoftmaxCrossEntropy; TMVA::DNN::ELossFunction::kMeanSquaredError@ kMeanSquaredError; TMVA::DNN::evaluateGradientsvoid evaluateGradients(typename Architecture_t::Matrix_t &dY, ELossFunction f, const typename Architecture_t::Matrix_t &Y, const typename Architecture_t::Matrix_t &output, const typename Architecture_t::Matrix_t &weights)Compute the gradient of the given output function f for given activations output of the output layer ...Definition Functions.h:215; TMVA::DNN::initializevoid initialize(typename Architecture_t::Matrix_t &A, EInitialization m)Definition Functions.h:282; TMVA::DNN::evaluateDerivativevoid evaluateDerivative(typename Architecture_t::Tensor_t &B, EActivationFunction f, const typename Architecture_t::Tensor_t &A)Compute the first partial derivative of the activation function for the values given in tensor A and ...Definition Functions.h:125; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; mTMarker mDefinition textangle.C:8; outputstatic void output(). tmvatmvaincTMVADNNFunctions.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2DNN_2Functions_8h_source.html:15218,Guid,Guide,15218,doc/master/tmva_2tmva_2inc_2TMVA_2DNN_2Functions_8h_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2DNN_2Functions_8h_source.html,1,['Guid'],['Guide']
Usability,"ationFunction::kSoftSign@ kSoftSign; TMVA::DNN::EActivationFunction::kSymmRelu@ kSymmRelu; TMVA::DNN::ELossFunctionELossFunctionEnum that represents objective functions for the net, i.e.Definition Functions.h:57; TMVA::DNN::ModeOutputValuesModeOutputValuesDefinition NeuralNet.h:179; TMVA::DNN::TMVAInput_tstd::tuple< const std::vector< Event * > &, const DataSetInfo & > TMVAInput_tDefinition DataLoader.h:40; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::gConfigConfig & gConfig(); TMVA::gToolsTools & gTools(); TMVA::fetchValueTString fetchValue(const std::map< TString, TString > &keyValueMap, TString key)Definition MethodDNN.cxx:320; TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMVA::MethodDNN::TTrainingSettingsDefinition MethodDNN.h:90; TMVA::MethodDNN::TTrainingSettings::regularizationDNN::ERegularization regularizationDefinition MethodDNN.h:94; TMVA::MethodDNN::TTrainingSettings::convergenceStepssize_t convergenceStepsDefinition MethodDNN.h:93; TMVA::MethodDNN::TTrainingSettings::learningRateDouble_t learningRateDefinition MethodDNN.h:95; TMVA::MethodDNN::TTrainingSettings::testIntervalsize_t testIntervalDefinition MethodDNN.h:92; TMVA::MethodDNN::TTrainingSettings::batchSizesize_t batchSizeDefinition MethodDNN.h:91; TMVA::MethodDNN::TTrainingSettings::dropoutProbabilitiesstd::vector< Double_t > dropoutProbabilitiesDefinition MethodDNN.h:98; TMVA::MethodDNN::TTrainingSettings::multithreadingbool multithreadingDefinition MethodDNN.h:99; TMVA::MethodDNN::TTrainingSettings::weightDecayDouble_t weightDecayDefinition MethodDNN.h:97; TMVA::MethodDNN::TTrainingSettings::momentumDouble_t momentumDefinition MethodDNN.h:96; lTLine lDefinition textangle.C:4; Config.h; Types.h; outputstatic void output(). tmvatmvasrcMethodDNN.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:73023,learn,learningRateDefinition,73023,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,2,"['Guid', 'learn']","['Guide', 'learningRateDefinition']"
Usability,ationFunctionindicates the activation function for this layer ; eModeOutputindicates a potential tranformation of the output values before further computation DIRECT does not further transformation; SIGMOID applies a sigmoid transformation to each output value (to create a probability); SOFTMAX applies a softmax transformation to all output values (mutually exclusive probability) . Definition at line 122 of file NeuralNet.cxx. ◆ LayerData() [5/6]. TMVA::DNN::LayerData::LayerData ; (; const LayerData & ; other). inline . copy c'tor of LayerData ; Definition at line 515 of file NeuralNet.h. ◆ LayerData() [6/6]. TMVA::DNN::LayerData::LayerData ; (; LayerData && ; other). inline . move c'tor of LayerData ; Definition at line 538 of file NeuralNet.h. Member Function Documentation. ◆ activationFunction(). std::shared_ptr< std::function< double(double)> > TMVA::DNN::LayerData::activationFunction ; (; ); const. inline . Definition at line 607 of file NeuralNet.h. ◆ clear(). void TMVA::DNN::LayerData::clear ; (; ). inline . clear the values and the deltas ; Definition at line 576 of file NeuralNet.h. ◆ clearDropOut(). void TMVA::DNN::LayerData::clearDropOut ; (; ). inline . clear the drop-out-data for this layer ; Definition at line 620 of file NeuralNet.h. ◆ computeProbabilities(). LayerData::container_type TMVA::DNN::LayerData::computeProbabilities ; (; ); const. private . compute the probabilities from the node values ; Definition at line 140 of file NeuralNet.cxx. ◆ deltasBegin() [1/2]. iterator_type TMVA::DNN::LayerData::deltasBegin ; (; ). inline . returns iterator to the begin of the deltas (back-propagation) ; Definition at line 591 of file NeuralNet.h. ◆ deltasBegin() [2/2]. const_iterator_type TMVA::DNN::LayerData::deltasBegin ; (; ); const. inline . returns const iterator to the begin of the deltas (back-propagation) ; Definition at line 594 of file NeuralNet.h. ◆ deltasEnd() [1/2]. iterator_type TMVA::DNN::LayerData::deltasEnd ; (; ). inline . returns iterator to ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html:10931,clear,clear,10931,doc/master/classTMVA_1_1DNN_1_1LayerData.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html,1,['clear'],['clear']
Usability,"ationOption(). void RooStats::HypoTestInverterResult::SetInterpolationOption ; (; InterpolOption_t ; opt). inline . set the interpolation option, linear (kLinear ) or spline (kSpline) ; Definition at line 165 of file HypoTestInverterResult.h. ◆ SetTestSize(). virtual void RooStats::HypoTestInverterResult::SetTestSize ; (; double ; size). inlinevirtual . set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval) ; Definition at line 99 of file HypoTestInverterResult.h. ◆ Streamer(). void RooStats::HypoTestInverterResult::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooStats::ConfInterval. ◆ StreamerNVirtual(). void RooStats::HypoTestInverterResult::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 213 of file HypoTestInverterResult.h. ◆ UpperLimit(). double HypoTestInverterResult::UpperLimit ; (; ). overridevirtual . return the interval upper limit ; Reimplemented from RooStats::SimpleInterval.; Definition at line 954 of file HypoTestInverterResult.cxx. ◆ UpperLimitEstimatedError(). double HypoTestInverterResult::UpperLimitEstimatedError ; (; ). Estimate of lower limit error function evaluates only a rough error on the lower limit. ; Be careful when using this estimation ; Definition at line 1097 of file HypoTestInverterResult.cxx. ◆ UseCLs(). void RooStats::HypoTestInverterResult::UseCLs ; (; bool ; on = true). inline . flag to switch between using CLsb (default) or CLs as confidence level ; Definition at line 108 of file HypoTestInverterResult.h. Friends And Related Symbol Documentation. ◆ HypoTestInverter. friend class HypoTestInverter. friend . Definition at line 210 of file HypoTestInverterResult.h. ◆ HypoTestInverterPlot. friend class HypoTestInverterPlot. friend . Definition at line 211 of file HypoTestInverterResult.h. Member Data Documentation. ◆ fCLsCleanupThreshold. double RooStats::HypoTestInverterResult::fCLsCleanupThreshol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:38207,Simpl,SimpleInterval,38207,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,"ationX::InverseRotationX Inverse() constReturn inverse of a rotation.Definition RotationX.h:189; ROOT::Math::RotationX::RotationXRotationX(Scalar angle)Construct from an angle.Definition RotationX.h:62; ROOT::Math::RotationX::operator()DisplacementVector3D< CoordSystem, U > operator()(const DisplacementVector3D< CoordSystem, U > &v) constRotation operation on a cartesian vector.Definition RotationX.h:129; ROOT::Math::RotationX::operator!=bool operator!=(const RotationX &rhs) constDefinition RotationX.h:217; ROOT::Math::RotationX::SinAngleScalar SinAngle() constSine or Cosine of the rotation angle.Definition RotationX.h:110; ROOT::Math::RotationX::operator==bool operator==(const RotationX &rhs) constEquality/inequality operators.Definition RotationX.h:213; ROOT::Math::RotationX::AngleScalar Angle() constAngle of rotation.Definition RotationX.h:105; ROOT::Math::RotationX::SetComponentsvoid SetComponents(Scalar angle)Definition RotationX.h:94; ROOT::Math::RotationX::RotationXRotationX()Default constructor (identity rotation)Definition RotationX.h:57; ROOT::Math::RotationX::fAngleScalar fAngleDefinition RotationX.h:223; ROOT::Math::RotationX::Rectifyvoid Rectify()Rectify makes sure the angle is in (-pi,pi].Definition RotationX.h:74; ROOT::Math::RotationX::Scalardouble ScalarDefinition RotationX.h:49; R; double; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::gv_detail::distdouble dist(Rotation3D const &r1, Rotation3D const &r2)Definition 3DDistances.cxx:48; ROOT::Math::DistanceAxisAngle::Scalar Distance(const AxisAngle &r1, const R &r2)Distance between two rotations.Definition AxisAngle.h:321; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699. mathgenvectorincMathGenVectorRotationX.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2RotationX_8h_source.html:12087,Guid,Guide,12087,doc/master/GenVector_2RotationX_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2RotationX_8h_source.html,1,['Guid'],['Guide']
Usability,"ations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooSta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:43400,simpl,simple,43400,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['simpl'],['simple']
Usability,"ations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::HistoToWorkspaceFactory ; RooStats::HistFactory::LinInterpVar Piecewise linear int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:43387,simpl,simple,43387,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['simpl'],['simple']
Usability,"ative ; (; TMatrixT< AReal > & ; B, . const TMatrixT< AReal > & ; A . ). inlinestatic . Definition at line 125 of file ActivationFunctions.hxx. ◆ UpdateParams(). template<typename AReal > . void TMVA::DNN::TReference< Real_t >::UpdateParams ; (; TMatrixT< AReal > & ; x, . TMatrixT< AReal > & ; tildeX, . TMatrixT< AReal > & ; y, . TMatrixT< AReal > & ; z, . TMatrixT< AReal > & ; fVBiases, . TMatrixT< AReal > & ; fHBiases, . TMatrixT< AReal > & ; fWeights, . TMatrixT< AReal > & ; VBiasError, . TMatrixT< AReal > & ; HBiasError, . AReal ; learningRate, . size_t ; fBatchSize . ). static . Definition at line 48 of file DenoisePropagation.hxx. ◆ UpdateParamsLogReg(). template<typename AReal > . void TMVA::DNN::TReference< Real_t >::UpdateParamsLogReg ; (; TMatrixT< AReal > & ; input, . TMatrixT< AReal > & ; output, . TMatrixT< AReal > & ; difference, . TMatrixT< AReal > & ; p, . TMatrixT< AReal > & ; fWeights, . TMatrixT< AReal > & ; fBiases, . AReal ; learningRate, . size_t ; fBatchSize . ). static . Definition at line 191 of file DenoisePropagation.hxx. Member Data Documentation. ◆ fgRandomGen. template<typename Real_t > . TRandom * TMVA::DNN::TReference< Real_t >::fgRandomGen = nullptr. staticprivate . Definition at line 55 of file Reference.h. tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h; tmva/tmva/src/DNN/Architectures/Reference/ActivationFunctions.hxx; tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx; tmva/tmva/src/DNN/Architectures/Reference/DenoisePropagation.hxx; tmva/tmva/src/DNN/Architectures/Reference/Initialization.hxx; tmva/tmva/src/DNN/Architectures/Reference/LossFunctions.hxx; tmva/tmva/src/DNN/Architectures/Reference/OutputFunctions.hxx; tmva/tmva/src/DNN/Architectures/Reference/Propagation.hxx; tmva/tmva/src/DNN/Architectures/Reference/RecurrentPropagation.hxx; tmva/tmva/src/DNN/Architectures/Reference/Regularization.hxx. TMVADNNTReference. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html:46960,Guid,Guide,46960,doc/master/classTMVA_1_1DNN_1_1TReference.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html,1,['Guid'],['Guide']
Usability,"atives. . Saving Canvas in TeX ; . Being able to generate TeX graphics can be useful for several reasons:. 	To have an easy to modify the image, in particular the labels and titles (ASCII file).; 	To have the same font in all labels, legends, plot titles etc. as in the text body of a document.; 	Render Math formulae using... more . Defining C++14 ; Hi,. A new C++ meeting is coming up in a few days. Many, many proposals are on the table; they can be found here and here. Out of those proposals only very few will be discussed at the meeting; likely only those that are about to make it into C++14. Given that I am rather new in this business... more . On the way to ROOT 6 ; Hi!. We are running late with ROOT 6, in part because I'm just back at work after being sick for 4 weeks. The other cling team members were hacking away at Fermilab, and I'll demonstrate how major that step to version 6 is for ROOT. ""Commit Activity Index"" for ROOT. SVNPlot defines a... more . C++14 ; Hi,. Two weeks ago I participated at the ISO C++ standard meeting. It was my and CERN's first one and a pleasant surprise. A few news items:. 	The next two standards are planned for 2014 and 2017, with 2014 being a bit like 2003: mostly bug fixes and usability improvements.; 	There is now (... more . Pages1; 2; 3; 4; next ›; last ». Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog.html:4984,usab,usability,4984,d/blog.html,https://root.cern,https://root.cern/d/blog.html,3,"['Guid', 'guid', 'usab']","['Guides', 'guidelines', 'usability']"
Usability,"ator ();  ; static IntegrationMultiDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNCalls ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static void PrintDefault (const char *name=nullptr, std::ostream &os=std::cout);  print only the specified default options ;  ; static void SetDefaultAbsTolerance (double tol);  ; static void SetDefaultIntegrator (const char *name);  ; static void SetDefaultNCalls (unsigned int ncall);  ; static void SetDefaultRelTolerance (double tol);  ; static void SetDefaultWKSize (unsigned int size);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  ;  Protected Attributes inherited from ROOT::Math::BaseIntegratorOptions; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::IntegratorMultiDimOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IntegratorMultiDimOptions() [1/2]. ROOT::Math::IntegratorMultiDimOptions::IntegratorMultiDimOptions ; (; IOptions * ; extraOpts = nullptr). constructor using the default options can pass a pointer to extra options (N.B. ; pointer will be managed by the class) ; Definition at line 285 of file IntegratorOptions.cxx. ◆ ~IntegratorMultiDimOptions(). ROOT::Math::IntegratorMultiDimOptions::~IntegratorMultiDimOptions ; (; ). inlineoverride . Definition at line 203 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:3382,Clear,ClearExtra,3382,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,1,['Clear'],['ClearExtra']
Usability,"ator line; TGVerticalFrame Composite frame with vertical child layout; TGVerticalLayout Vertical layout manager; TGView View widget base class; TGViewFrame Frame containing the actual text; TGViewPort Viewport through which to look at a container frame; TGWidget Widget base class; TGWindow GUI Window base class; TGX11 Interface to X11; TGX11TTF Interface to X11 + TTF font handling; TGXYLayout X / Y - layout manager; TGXYLayoutHints Hits for the X / Y - layout manager; TGaxis Graphics axis; TGedEditor ROOT graphics editor; TGedFrame base editor's frame; TGedMarkerPopup marker select popup; TGedMarkerSelect Marker selection button; TGedNameFrame frame showing the selected object name; TGedPatternFrame pattern frame; TGedPatternPopup Color selector popup; TGedPatternSelect pattern selection check-button; TGedPatternSelector select pattern frame; TGedPopup popup window; TGedSelect selection check-button; TGenCollectionProxy ; TGenCollectionProxy::Method ; TGenCollectionProxy::Value ; TGenPhaseSpace Simple Phase Space Generator; TGenerator Event generator interface abstract baseclass; TGenericTable Generic array of C-structure (a'la STL vector); TGenericTable::iterator ; TGeoArb8 arbitrary trapezoid with 8 vertices; TGeoAtt class for visibility, activity and optimization attributes for volumes/nodes; TGeoBBox box primitive; TGeoBBoxEditor TGeoBBox editor; TGeoBatemanSol Solution for the Bateman equation; TGeoBoolNode a boolean node; TGeoBuilder geometry builder singleton; TGeoCacheState class storing the cache state; TGeoChecker a simple geometry checker; TGeoCombiTrans rotation + translation; TGeoCombiTransEditor TGeoCombiTrans editor; TGeoCompositeShape boolean composite shape; TGeoCone conical tube class; TGeoConeEditor TGeoCone editor; TGeoConeSeg conical tube segment class ; TGeoConeSegEditor TGeoConeSeg editor; TGeoCtub cut tube segment class ; TGeoCtubEditor TGeoCtub editor; TGeoDecayChannel Decay channel for Elements; TGeoElemIter Iterator for radionuclide chains.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:81349,Simpl,Simple,81349,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,6,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"ator*RooAbsData::_cacheIter! Iterator over cached variables; RooArgSetRooAbsData::_cachedVars! External variables cached with this data set; TDirectory*RooDirItem::_dir! Associated directory; RooAbsDataStore*RooAbsData::_dstoreData storage implementation; TIterator*RooAbsData::_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; map<std::string,RooAbsData*>RooAbsData::_ownedComponentsOwned external components; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool ; RooArgSetRooAbsData::_varsDimensions of this data set; RooArgSet_varsNoWgtVars without weight variable ; RooRealVar*_wgtVarPointer to weight variable (if set) ; static RooAbsData::StorageTypeRooAbsData::defaultStorageType; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooDataSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooDataSet(); Default constructor for persistence. RooDataSet(const char* name, const char* title, const RooArgSet& vars, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Construct an unbinned dataset from a RooArgSet defining the dimensions of the dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataSet.html:18049,Clear,Clear,18049,root/html534/RooDataSet.html,https://root.cern,https://root.cern/root/html534/RooDataSet.html,1,['Clear'],['Clear']
Usability,"ator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::const_iterator = Internal::TypedIter<T, decltype(std::cbegin(std::declval<Range_t>())), isDynamic>. Definition at line 144 of file RRangeCast.hxx. ◆ iterator. template<typename T , bool isDynamic, typename Range_t > . using ROOT::RRangeCast< T, isDynamic, Range_t >::iterator = Internal::TypedIter<T, decltype(std::begin(std::declval<Range_t>())), isDynamic>. Definition at line 148 of file RRangeCast.hxx. Constructor & Destructor Documentation. ◆ RRangeCast(). template<typename T , bool isDynamic, typename Range_t > . ROOT::RRangeCast< T, isDynamic, Range_t >::RRangeCast ; (; Range_t && ; inputRange). inline . Definition at line 138 of file RRangeCast.hxx. Member Function Documentation. ◆ begin() [1/2]. template<typename T , bool isDynamic, typename Range_t > . iterator ROOT::RRangeCast< T, isDynamic, Range_t >::begin ; (; ). inline . Definition at line 149 of file RRangeCast.hxx. ◆ begin() [2/2]. template<typename T , bool isDynamic, typename Range_t > . const_iterator ROOT::RRangeCast< T, isDynamic, Range_t >::begin ; (; ); const. inline . Definition at line 145 of file RRangeCast.hxx. ◆ end() [1/2]. template<typename T , bool isDynamic, typename Range_t > . iterator ROOT::RRangeCast< T, isDynamic, Range_t >::end ; (; ). inline . Definition at line 150 of file RRangeCast.hxx. ◆ end() [2/2]. template<typename T , bool isDynamic, typename Range_t > . const_iterator ROOT::RRangeCast< T, isDynamic, Range_t >::end ; (; ); const. inline . Definition at line 146 of file RRangeCast.hxx. Member Data Documentation. ◆ fInputRange. template<typename T , bool isDynamic, typename Range_t > . Range_t ROOT::RRangeCast< T, isDynamic, Range_t >::fInputRange. private . Definition at line 153 of file RRangeCast.hxx. core/foundation/inc/ROOT/RRangeCast.hxx. ROOTRRangeCast. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RRangeCast.html:3439,Guid,Guide,3439,doc/v632/classROOT_1_1RRangeCast.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RRangeCast.html,1,['Guid'],['Guide']
Usability,"ator.cxx. Member Function Documentation. ◆ ApproximatePosterior(). void RooStats::BayesianCalculator::ApproximatePosterior ; (; ); const. protected . approximate posterior in nbins using a TF1 scan the poi values and evaluate the posterior at each point and save the result in a cloned TF1 For each point the posterior is evaluated by integrating the nuisance parameters ; Definition at line 1319 of file BayesianCalculator.cxx. ◆ Class(). static TClass * RooStats::BayesianCalculator::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::BayesianCalculator::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::BayesianCalculator::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 194 of file BayesianCalculator.h. ◆ ClearAll(). void RooStats::BayesianCalculator::ClearAll ; (; ); const. protected . clear all cached pdf objects ; Definition at line 714 of file BayesianCalculator.cxx. ◆ ComputeIntervalFromApproxPosterior(). void RooStats::BayesianCalculator::ComputeIntervalFromApproxPosterior ; (; double ; c1, . double ; c2 . ); const. protected . compute the interval using the approximate posterior function ; Definition at line 1364 of file BayesianCalculator.cxx. ◆ ComputeIntervalFromCdf(). void RooStats::BayesianCalculator::ComputeIntervalFromCdf ; (; double ; c1, . double ; c2 . ); const. protected . internal function compute the interval using Cdf integration ; Definition at line 1243 of file BayesianCalculator.cxx. ◆ ComputeIntervalUsingRooFit(). void RooStats::BayesianCalculator::ComputeIntervalUsingRooFit ; (; double ; c1, . double ; c2 . ); const. protected . internal function compute the interval using RooFit ; Definition at line 1194 of file BayesianCalculator.cxx. ◆ ComputeShortestInterval(). void RooStats::BayesianCalculator::ComputeShortestInterval ; (; ); const. protected . compute the shortest interval fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:22834,clear,clear,22834,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['clear'],['clear']
Usability,"ator<ROOT::TCollectionProxyInfo::EnvironBase*> >fProxyListStack of recursive proxies; TObjArray*fReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read); void*fResizeContainer accessors: resize container; intfSTL_typeSTL container type; TGenCollectionProxy::MethodfSizeContainer accessors: size of container; vector<TGenCollectionProxy::TStaging*,allocator<TGenCollectionProxy::TStaging*> >fStagedOptimization: Keep staged array once they were created; type_info&fTypeinfoType information; TGenCollectionProxy::Value*fValDescriptor of the Value_type; intfValDiffOffset between two consecutive value_types (memory layout).; intfValOffsetOffset from key to value (in maps); TGenCollectionProxy::Value*fValueDescriptor of the container value type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DeleteItem(void* ptr); Delete individual item from STL container. s. Streamer(TBuffer& refBuffer). s. Streamer(TBuffer& refBuffer). else s-> Clear(). void Resize(size_t nelement). TGenCollectionProxy* Initialize() const; Late initialization of collection proxy. TGenCollectionProxy* InitializeEx(); Some hack to avoid const-ness. void CheckFunctions() const; Allow to check function pointers. TGenCollectionProxy(). TVirtualCollectionProxy* Generate() const; Virtual copy constructor. TGenCollectionProxy(const TGenCollectionProxy& copy); Copy constructor. TGenCollectionProxy(TGenCollectionProxy::Info_t typ, size_t iter_size); Initializing constructor. TGenCollectionProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl). virtual ~TGenCollectionProxy(); Standard destructor. TClass * GetCollectionClass(); Return a pointer to the TClass representing the container. Int_t GetCollectionType(); Return the type of collection see TClassEdit::ESTLType. ULong_t GetIncrement(); Return the offset between two consecutive value_types (memory layout). UInt_t Sizeof() const; Return the sizeof the collection object. void PushProxy(void* objsta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGenCollectionProxy.html:6094,Clear,Clear,6094,root/html530/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html530/TGenCollectionProxy.html,1,['Clear'],['Clear']
Usability,"ator=(const RooStats::SimpleInterval& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetConfidenceLevel(Double_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; RooStats::SimpleIntervalSimpleInterval(const char* name = 0); RooStats::SimpleIntervalSimpleInterval(const RooStats::SimpleInterval&); RooStats::SimpleIntervalSimpleInterval(const RooStats::SimpleInterval& other, const char* name); RooStats::SimpleIntervalSimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Double_tUpperLimit(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleInterval.html:5023,Simpl,SimpleIntervalSimpleInterval,5023,root/html602/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleInterval.html,12,['Simpl'],"['SimpleInterval', 'SimpleIntervalSimpleInterval']"
Usability,"ators to be called when browsing branches. ; The user can remove any of the generators as follows: TMethodBrowsable::Unregister();; which will cause the browser not to show any methods. ; Definition at line 372 of file TBranchBrowsable.cxx. Member Data Documentation. ◆ fBranch. const TBranch* TVirtualBranchBrowsable::fBranch {nullptr}. private . pointer to the branch element representing the top object ; Definition at line 92 of file TBranchBrowsable.h. ◆ fClass. TClass* TVirtualBranchBrowsable::fClass {nullptr}. private . pointer to TClass representing our type (i.e. return type for methods), 0 if basic type ; Definition at line 95 of file TBranchBrowsable.h. ◆ fgGenerators. std::list< TVirtualBranchBrowsable::MethodCreateListOfBrowsables_t > TVirtualBranchBrowsable::fgGenerators. staticprivate . list of MethodCreateListOfBrowsables_t called by CreateListOfBrowsables ; Definition at line 97 of file TBranchBrowsable.h. ◆ fgGeneratorsSet. bool TVirtualBranchBrowsable::fgGeneratorsSet =false. staticprivate . have we set the generators yet? empty is not good enough - user might have removed them ; Definition at line 98 of file TBranchBrowsable.h. ◆ fLeaves. TList* TVirtualBranchBrowsable::fLeaves {nullptr}. private . pointer to leaves ; Definition at line 94 of file TBranchBrowsable.h. ◆ fParent. const TVirtualBranchBrowsable* TVirtualBranchBrowsable::fParent {nullptr}. private . parent method if this method is member of a returned class ; Definition at line 93 of file TBranchBrowsable.h. ◆ fTypeIsPointer. bool TVirtualBranchBrowsable::fTypeIsPointer {false}. private . return type is pointer to class ; Definition at line 96 of file TBranchBrowsable.h. Libraries for TVirtualBranchBrowsable:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBranchBrowsable.h; tree/tree/src/TBranchBrowsable.cxx. TVirtualBranchBrowsable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualBranchBrowsable.html:25629,Guid,Guide,25629,doc/master/classTVirtualBranchBrowsable.html,https://root.cern,https://root.cern/doc/master/classTVirtualBranchBrowsable.html,1,['Guid'],['Guide']
Usability,"atrix * ; rmat = nullptr . ). Constructor providing left and right shapes and matrices (in the Boolean operation). ; Definition at line 164 of file TGeoBoolNode.cxx. ◆ ~TGeoBoolNode(). TGeoBoolNode::~TGeoBoolNode ; (; ). override . Destructor. ; — deletion of components handled by TGeoManager class. ; Definition at line 196 of file TGeoBoolNode.cxx. Member Function Documentation. ◆ AssignPoints(). void TGeoBoolNode::AssignPoints ; (; Int_t ; npoints, . Double_t * ; points . ). protected . Set fPoints array. ; Definition at line 206 of file TGeoBoolNode.cxx. ◆ Class(). static TClass * TGeoBoolNode::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoBoolNode::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoBoolNode::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 91 of file TGeoBoolNode.h. ◆ ClearThreadData(). void TGeoBoolNode::ClearThreadData ; (; ); const. Definition at line 85 of file TGeoBoolNode.cxx. ◆ ComputeBBox(). virtual void TGeoBoolNode::ComputeBBox ; (; Double_t & ; dx, . Double_t & ; dy, . Double_t & ; dz, . Double_t * ; origin . ). pure virtual . Implemented in TGeoUnion, TGeoIntersection, and TGeoSubtraction. ◆ ComputeNormal(). virtual void TGeoBoolNode::ComputeNormal ; (; const Double_t * ; point, . const Double_t * ; dir, . Double_t * ; norm . ). pure virtual . Implemented in TGeoUnion, TGeoIntersection, and TGeoSubtraction. ◆ Contains(). virtual Bool_t TGeoBoolNode::Contains ; (; const Double_t * ; point); const. pure virtual . Implemented in TGeoUnion, TGeoIntersection, and TGeoSubtraction. ◆ CreateThreadData(). void TGeoBoolNode::CreateThreadData ; (; Int_t ; nthreads). Create thread data for n threads max. ; Definition at line 100 of file TGeoBoolNode.cxx. ◆ DeclFileName(). static const char * TGeoBoolNode::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBoolNode.html:15719,Clear,ClearThreadData,15719,doc/master/classTGeoBoolNode.html,https://root.cern,https://root.cern/doc/master/classTGeoBoolNode.html,1,['Clear'],['ClearThreadData']
Usability,"atrix ; (; size_t ; n). inline . create a new diagonal matrix of size n ; Definition at line 291 of file RooLagrangianMorphFunc.cxx. ◆ invertMatrix(). double invertMatrix ; (; const Matrix & ; matrix, . Matrix & ; inverse . ). inline . Definition at line 309 of file RooLagrangianMorphFunc.cxx. ◆ makeRootMatrix(). TMatrixD makeRootMatrix ; (; const Matrix & ; in). inline . convert a matrix into a TMatrixD ; Definition at line 275 of file RooLagrangianMorphFunc.cxx. ◆ makeSuperMatrix(). Matrix makeSuperMatrix ; (; const TMatrixD & ; in). inline . convert a TMatrixD into a Matrix ; Definition at line 283 of file RooLagrangianMorphFunc.cxx. ◆ printMatrix(). void printMatrix ; (; const TMatrixD & ; mat). inline . write a matrix ; Definition at line 301 of file RooLagrangianMorphFunc.cxx. ◆ size(). template<class MatrixT > . size_t size ; (; const MatrixT & ; matrix). inline . retrieve the size of a square matrix . ◆ size< TMatrixD >(). template<> . size_t size< TMatrixD > ; (; const TMatrixD & ; mat). inline . Definition at line 114 of file RooLagrangianMorphFunc.cxx. ◆ writeMatrixToFileT(). template<class MatrixT > . void writeMatrixToFileT ; (; const MatrixT & ; matrix, . const char * ; fname . ). inline . write a matrix to a text file ; Definition at line 144 of file RooLagrangianMorphFunc.cxx. ◆ writeMatrixToStreamT(). template<class MatrixT > . void writeMatrixToStreamT ; (; const MatrixT & ; matrix, . std::ostream & ; stream . ). write a matrix to a stream ; Definition at line 123 of file RooLagrangianMorphFunc.cxx. Variable Documentation. ◆ morphLargestWeight. constexpr double morphLargestWeight = 10e7. staticconstexpr . Definition at line 89 of file RooLagrangianMorphFunc.cxx. ◆ morphUnityDeviation. constexpr double morphUnityDeviation = 10e-6. staticconstexpr . Definition at line 90 of file RooLagrangianMorphFunc.cxx. roofitroofitsrcRooLagrangianMorphFunc.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:09:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RooLagrangianMorphFunc_8cxx.html:4899,Guid,Guide,4899,doc/v632/RooLagrangianMorphFunc_8cxx.html,https://root.cern,https://root.cern/doc/v632/RooLagrangianMorphFunc_8cxx.html,1,['Guid'],['Guide']
Usability,"atrix Decomposition Bunch-Kaufman; TDecompBase Matrix Decomposition Base; TDecompChol Matrix Decompositition Cholesky; TDecompLU Matrix Decompositition LU; TDecompQRH Matrix Decompositition QRH; TDecompSVD Matrix Decompositition SVD; TDecompSparse Matrix Decompositition LU; TDialogCanvas A specialized canvas to set attributes.; TDiamond Diamond class; TDictAttributeMap Container for name/value pairs of TDictionary attributes; TDictionary Interface to dictionary; TDirectory Describe directory structure in memory; TDirectoryFile Describe directory structure in a ROOT file; TDocDirective THtml directive handler; TDocHtmlDirective Handler for ""Begin_Html""/""End_Html"" for raw HTML in documentation comments; TDocLatexDirective Handler for ""Begin_Latex""/""End_Latex"" to generate an image from latex; TDocMacroDirective Handler for ""Begin_Macro""/""End_Macro"" for code that is executed and that can generate an image for documentation; TDocOutput generates documentation web pages; TDocParser parser for reference documentation; TDrawFeedback Present PROOF query feedback; TELTU ELTU shape; TEditQueryFrame Edit query frame; TEfficiency calculating efficiencies; TEllipse An ellipse; TEmulatedCollectionProxy ; TEmulatedMapProxy ; TEntryList A list of entries in a TTree; TEntryListArray A list of entries and subentries in a TTree; TEntryListBlock Used internally in TEntryList to store the entry numbers; TEntryListFromFile Manager for entry lists from different files; TEnum Enum type class; TEnumConstant ; TEnv Handle ROOT configuration resources; TEnvRec Individual TEnv records; TEve3DProjection 3D scaling ""projection""; TEveArrow Class for gl visualisation of arrow.; TEveArrowEditor GUI editor for TEveArrow.; TEveArrowGL GL renderer class for TEveArrow.; TEveBox 3D box with arbitrary vertices.; TEveBoxGL GL renderer class for TEveBox.; TEveBoxProjected Projection of TEveBox.; TEveBoxProjectedGL GL renderer class for TEveBoxProjected.; TEveBoxSet Collection of 3D primitives (fixed-size bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:56702,feedback,feedback,56702,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['feedback'],['feedback']
Usability,"atrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfoldSys has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfoldSys. TUnfoldDensity adds features to TUnfoldSys, related to possible complex multidimensional arrangements of bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfoldSys are the getter functions. For TUnfoldSys, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . repeated calls to SubtractBackground() to specify background sources . repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Description of (systematic) uncertainties available in TUnfoldSys. There are covariance matrix contributions and there are systematic shifts",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:1642,simpl,simply,1642,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['simpl'],['simply']
Usability,"atrix {; 318protected:; 319 Double_t fTranslation[3]; // translation vector; 320 TGeoRotation *fRotation; // rotation matrix; 321public:; 322 TGeoCombiTrans();; 323 TGeoCombiTrans(const TGeoCombiTrans &other) : TGeoCombiTrans((TGeoMatrix &)other) {}; 324 TGeoCombiTrans(const TGeoMatrix &other);; 325 TGeoCombiTrans(const TGeoTranslation &tr, const TGeoRotation &rot);; 326 TGeoCombiTrans(const char *name);; 327 TGeoCombiTrans(Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot);; 328 TGeoCombiTrans(const char *name, Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot);; 329 ; 330 TGeoCombiTrans &operator=(const TGeoCombiTrans &other) { return TGeoCombiTrans::operator=((TGeoMatrix &)other); }; 331 TGeoCombiTrans &operator=(const TGeoMatrix &matrix);; 332 TGeoCombiTrans &operator*=(const TGeoMatrix &other);; 333 TGeoCombiTrans operator*(const TGeoMatrix &other) const;; 334 Bool_t operator==(const TGeoMatrix &other) const;; 335 ; 336 ~TGeoCombiTrans() override;; 337 ; 338 void Clear(Option_t *option = """") override;; 339 TGeoHMatrix Inverse() const override;; 340 TGeoMatrix *MakeClone() const override;; 341 void Multiply(const TGeoMatrix *right);; 342 void RegisterYourself() override;; 343 void RotateX(Double_t angle) override;; 344 void RotateY(Double_t angle) override;; 345 void RotateZ(Double_t angle) override;; 346 void ReflectX(Bool_t leftside, Bool_t rotonly = kFALSE) override;; 347 void ReflectY(Bool_t leftside, Bool_t rotonly = kFALSE) override;; 348 void ReflectZ(Bool_t leftside, Bool_t rotonly = kFALSE) override;; 349 void SavePrimitive(std::ostream &out, Option_t *option = """") override;; 350 void SetDx(Double_t dx) override { SetTranslation(dx, fTranslation[1], fTranslation[2]); }; 351 void SetDy(Double_t dy) override { SetTranslation(fTranslation[0], dy, fTranslation[2]); }; 352 void SetDz(Double_t dz) override { SetTranslation(fTranslation[0], fTranslation[1], dz); }; 353 void SetTranslation(const TGeoTranslation &tr);; 354 void SetTranslation(Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8h_source.html:15468,Clear,Clear,15468,doc/master/TGeoMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8h_source.html,1,['Clear'],['Clear']
Usability,"atrix(). void TGeoBuilder::RegisterMatrix ; (; TGeoMatrix * ; matrix). Register a matrix to the list of matrices. ; It will be cleaned-up at the destruction TGeoManager. ; Definition at line 133 of file TGeoBuilder.cxx. ◆ SetGeometry(). void TGeoBuilder::SetGeometry ; (; TGeoManager * ; geom). inlineprivate . current geometry ; Definition at line 37 of file TGeoBuilder.h. ◆ Streamer(). void TGeoBuilder::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoBuilder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 105 of file TGeoBuilder.h. ◆ Volume() [1/2]. TGeoVolume * TGeoBuilder::Volume ; (; const char * ; name, . const char * ; shape, . Int_t ; nmed, . Double_t * ; upar, . Int_t ; npar = 0 . ). Create a volume in GEANT3 style. . NAME Volume name; SHAPE Volume type; NMED Tracking medium number; NPAR Number of shape parameters; UPAR Vector containing shape parameters . Definition at line 972 of file TGeoBuilder.cxx. ◆ Volume() [2/2]. TGeoVolume * TGeoBuilder::Volume ; (; const char * ; name, . const char * ; shape, . Int_t ; nmed, . Float_t * ; upar, . Int_t ; npar = 0 . ). Create a volume in GEANT3 style. . NAME Volume name; SHAPE Volume type; NMED Tracking medium number; NPAR Number of shape parameters; UPAR Vector containing shape parameters . Definition at line 886 of file TGeoBuilder.cxx. Member Data Documentation. ◆ fGeometry. TGeoManager* TGeoBuilder::fGeometry. private . Definition at line 35 of file TGeoBuilder.h. ◆ fgInstance. TGeoBuilder * TGeoBuilder::fgInstance = nullptr. staticprotected . Definition at line 28 of file TGeoBuilder.h. Libraries for TGeoBuilder:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoBuilder.h; geom/geom/src/TGeoBuilder.cxx. TGeoBuilder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBuilder.html:34033,Guid,Guide,34033,doc/master/classTGeoBuilder.html,https://root.cern,https://root.cern/doc/master/classTGeoBuilder.html,1,['Guid'],['Guide']
Usability,"atrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance matrix contribution from error on regularisation parameter ; Parameters. [in,out]ematrixoutput histogram ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result from the assigned uncertainty on the parameter tau, see method SetTauError(). ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1176 of file TUnfoldSys.cxx. ◆ GetEmatrixSysUncorr(). void TUnfoldSys::GetEmatrixSysUncorr ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). Covariance contribution from uncorrelated uncertainties of the response matrix. ; Parameters. [in,out]ematrixcovariance matrix histogram ; [in]binMapmapping of histogram bins ; [in]clearEmatif true, ematrix is cleared prior to adding this covariance matrix contribution. This method propagates the uncertainties of the response matrix histogram, specified with the constructor, to the unfolding result. It is assumed that the entries of that histogram are bin-to-bin uncorrelated. In many cases this corresponds to the ""Monte Carlo statistical uncertainties"". ; The array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 760 of file TUnfoldSys.cxx. ◆ GetEmatrixTotal(). void TUnfoldSys::GetEmatrixTotal ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr . ). Get total error matrix, summing up all contributions. ; Parameters. [out]ematrixhistogram which will be filled ; [in]binMap(default=nullptr) remapping of histogram bins. the array binMap is explained with the method GetOutput(). ; Definition at line 1276 of file TUnfoldSys.cxx. ◆ GetRhoItotal(). void TU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:42004,clear,clearEmatif,42004,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,2,['clear'],"['clearEmatif', 'cleared']"
Usability,"atrixDSparse* src); virtual voidClearResults(); TMatrixDSparse*TUnfold::CreateSparseMatrix(Int_t nrow, Int_t ncol, Int_t nele, Int_t* row, Int_t* col, Double_t* data) const; static voidTUnfold::DeleteMatrix(TMatrixD** m); static voidTUnfold::DeleteMatrix(TMatrixDSparse** m); voidDoBackgroundSubtraction(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Double_tTUnfold::DoUnfold(); voidTUnfold::ErrorMatrixToHist(TH2* ematrix, const TMatrixDSparse* emat, const Int_t* binMap, Bool_t doClear) const; const TMatrixDSparse*TUnfold::GetAx() const; const TMatrixDSparse*TUnfold::GetDXDAM(int i) const; const TMatrixDSparse*TUnfold::GetDXDAZ(int i) const; const TMatrixDSparse*TUnfold::GetDXDtauSquared() const; const TMatrixDSparse*TUnfold::GetDXDY() const; const TMatrixDSparse*TUnfold::GetE() const; const TMatrixDSparse*TUnfold::GetEinv() const; voidGetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat); Int_tTUnfold::GetNx() const; Int_tTUnfold::GetNy() const; const TMatrixDSparse*TUnfold::GetVxx() const; const TMatrixDSparse*TUnfold::GetVxxInv() const; const TMatrixD*TUnfold::GetX() const; static Bool_tTUnfold::InvertMConditioned(TMatrixD* A); TMatrixD*TUnfold::InvertMSparse(const TMatrixDSparse* A) const; voidTObject::MakeZombie(); TMatrixDSparse*TUnfold::MultiplyMSparseM(const TMatrixDSparse* a, const TMatrixD* b) const; TMatrixDSparse*TUnfold::MultiplyMSparseMSparse(const TMatrixDSparse* a, const TMatrixDSparse* b) const; TMatrixDSparse*TUnfold::MultiplyMSparseMSparseTranspVector(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixTBase<Double_t>* v) const; TMatrixDSparse*TUnfold::MultiplyMSparseTranspMSparse(const TMatrixDSparse* a, const TMatrixDSparse* b) const; virtual TMatrixDSparse*PrepareCorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixDSparse* dsys); virtual voidPrepareSysError(); virtual TMatrixDSparse*PrepareUncorrEmat(const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:14691,clear,clearEmat,14691,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,3,['clear'],['clearEmat']
Usability,"atrixT<Element> &TMatrixT<Element> Use(const TMatrixT<double>& a) const. template <class Element> inline TMatrixT<Element> TMatrixT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixT<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixT<Element> operator()(Int_t rown, Int_t coln). void Plus(const TMatrixT <Element> &a,const TMatrixT <Element> &b); Elementary constructors. void Minus(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b); { Mult(a,b); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). TMatrixT <Element> & Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, double* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id: TMatrixT.h 34744 2010-08-07 06:16:36Z brun $ » Last generated: 2010-10-01 15:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixT_double_.html:26427,Clear,Clear,26427,root/html528/TMatrixT_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixT_double_.html,1,['Clear'],['Clear']
Usability,"atrixT<Element> &TMatrixT<Element> Use(const TMatrixT<float>& a) const. template <class Element> inline TMatrixT<Element> TMatrixT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixT<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixT<Element> operator()(Int_t rown, Int_t coln). void Plus(const TMatrixT <Element> &a,const TMatrixT <Element> &b); Elementary constructors. void Minus(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b); { Mult(a,b); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). TMatrixT <Element> & Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, float* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id: TMatrixT.h 39086 2011-05-04 09:36:17Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMatrixT_float_.html:26265,Clear,Clear,26265,root/html530/TMatrixT_float_.html,https://root.cern,https://root.cern/root/html530/TMatrixT_float_.html,1,['Clear'],['Clear']
Usability,"atrixT<Element> &TMatrixT<Element> Use(const TMatrixT<float>& a) const. template <class Element> inline TMatrixT<Element> TMatrixT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixT<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixT<Element> operator()(Int_t rown, Int_t coln). void Plus(const TMatrixT <Element> &a,const TMatrixT <Element> &b); Elementary constructors. void Minus(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b); { Mult(a,b); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). TMatrixT <Element> & Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, float* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id: TMatrixT.h 39086 2011-05-04 09:36:17Z moneta $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMatrixT_float_.html:26265,Clear,Clear,26265,root/html532/TMatrixT_float_.html,https://root.cern,https://root.cern/root/html532/TMatrixT_float_.html,1,['Clear'],['Clear']
Usability,"atrix[0];; 993 newrot[1] = fRotationMatrix[3];; 994 newrot[2] = fRotationMatrix[6];; 995 newrot[3] = fRotationMatrix[1];; 996 newrot[4] = fRotationMatrix[4];; 997 newrot[5] = fRotationMatrix[7];; 998 newrot[6] = fRotationMatrix[2];; 999 newrot[7] = fRotationMatrix[5];; 1000 newrot[8] = fRotationMatrix[8];; 1001 h.SetRotation(newrot);; 1002 return h;; 1003}; 1004 ; 1005////////////////////////////////////////////////////////////////////////////////; 1006/// Perform orthogonality test for rotation.; 1007 ; 1008Bool_t TGeoRotation::IsValid() const; 1009{; 1010 const Double_t *r = fRotationMatrix;; 1011 Double_t cij;; 1012 for (Int_t i = 0; i < 2; i++) {; 1013 for (Int_t j = i + 1; j < 3; j++) {; 1014 // check columns; 1015 cij = TMath::Abs(r[i] * r[j] + r[i + 3] * r[j + 3] + r[i + 6] * r[j + 6]);; 1016 if (cij > 1E-4); 1017 return kFALSE;; 1018 // check rows; 1019 cij = TMath::Abs(r[3 * i] * r[3 * j] + r[3 * i + 1] * r[3 * j + 1] + r[3 * i + 2] * r[3 * j + 2]);; 1020 if (cij > 1E-4); 1021 return kFALSE;; 1022 }; 1023 }; 1024 return kTRUE;; 1025}; 1026 ; 1027////////////////////////////////////////////////////////////////////////////////; 1028/// reset data members; 1029 ; 1030void TGeoRotation::Clear(Option_t *); 1031{; 1032 memcpy(fRotationMatrix, kIdentityMatrix, kN9);; 1033 ResetBit(kGeoRotation);; 1034}; 1035 ; 1036////////////////////////////////////////////////////////////////////////////////; 1037/// Perform a rotation about Z having the sine/cosine of the rotation angle.; 1038 ; 1039void TGeoRotation::FastRotZ(const Double_t *sincos); 1040{; 1041 fRotationMatrix[0] = sincos[1];; 1042 fRotationMatrix[1] = -sincos[0];; 1043 fRotationMatrix[3] = sincos[0];; 1044 fRotationMatrix[4] = sincos[1];; 1045 SetBit(kGeoRotation);; 1046}; 1047 ; 1048////////////////////////////////////////////////////////////////////////////////; 1049/// Returns rotation angle about Z axis in degrees. If the rotation is a pure; 1050/// rotation about Z, fixX parameter does not matter, otherw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:35166,Clear,Clear,35166,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['Clear'],['Clear']
Usability,"ats (gif, gif+, jpg, png). ;  ; Bool_t SavePictureWidth (const TString &fileName, Int_t width, Bool_t pixel_object_scale=kTRUE);  Save picture with given width (height scaled proportionally). ;  ; void SetAutoRotator (TGLAutoRotator *ar);  Set the auto-rotator for this viewer. The old rotator is deleted. ;  ; void SetCameraOverlay (TGLCameraOverlay *m);  ; void SetClearColor (Color_t col);  Set background method. ;  ; void SetClipAutoUpdate (Bool_t x);  ; void SetCurrentCamera (ECameraType camera);  Set current active camera - 'cameraType' one of: kCameraPerspX, kCameraPerspY, kCameraPerspZ, kCameraOrthoXOY, kCameraOrthoXOZ, kCameraOrthoZOY, kCameraOrthoXnOY, kCameraOrthoXnOZ, kCameraOrthoZnOY. ;  ; void SetDrawCameraCenter (Bool_t x);  Draw camera look at and rotation point. ;  ; virtual void SetEventHandler (TGEventHandler *handler);  Set the event-handler. ;  ; void SetFader (Float_t x);  ; virtual void SetGedEditor (TGedEditor *ed);  ; void SetGuideState (Int_t axesType, Bool_t axesDepthTest, Bool_t referenceOn, const Double_t *referencePos);  Set the state of guides (axes & reference markers) from arguments. ;  ; void SetIgnoreSizesOnUpdate (Bool_t v);  ; void SetLineScale (Float_t s);  ; void SetMaxSceneDrawTimeHQ (Float_t t);  ; void SetMaxSceneDrawTimeLQ (Float_t t);  ; void SetOrthoCamera (ECameraType camera, Double_t zoom, Double_t dolly, Double_t center[3], Double_t hRotate, Double_t vRotate);  Set an orthographic camera to supplied configuration - note this does not need to be the current camera - though you will not see the effect if it is not. ;  ; void SetPerspectiveCamera (ECameraType camera, Double_t fov, Double_t dolly, Double_t center[3], Double_t hRotate, Double_t vRotate);  Set a perspective camera to supplied configuration - note this does not need to be the current camera - though you will not see the effect if it is not. ;  ; void SetPictureFileName (const TString &f);  ; void SetPointScale (Float_t s);  ; void SetResetCamerasOnUpdate (Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLSAViewer.html:13091,guid,guides,13091,doc/master/classTGLSAViewer.html,https://root.cern,https://root.cern/doc/master/classTGLSAViewer.html,1,['guid'],['guides']
Usability,"attr . ). overridevirtual . Change window attributes. ; Reimplemented from TVirtualX.; Definition at line 1698 of file GX11Gui.cxx. ◆ CheckEvent(). Bool_t TGX11::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; If there is fill in the event structure and return true. If no such event return false. ; Reimplemented from TVirtualX.; Definition at line 1753 of file GX11Gui.cxx. ◆ Class(). static TClass * TGX11::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGX11::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGX11::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 401 of file TGX11.h. ◆ ClearArea(). void TGX11::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Clear a window area to the background color. ; Reimplemented from TVirtualX.; Definition at line 1741 of file GX11Gui.cxx. ◆ ClearPixmap(). void TGX11::ClearPixmap ; (; Drawable * ; pix). private . Clear the pixmap pix. ; Definition at line 407 of file TGX11.cxx. ◆ ClearWindow() [1/2]. void TGX11::ClearWindow ; (; ). overridevirtual . Clear current window. ; Reimplemented from TVirtualX.; Definition at line 422 of file TGX11.cxx. ◆ ClearWindow() [2/2]. void TGX11::ClearWindow ; (; Window_t ; id). overridevirtual . Clear window. ; Reimplemented from TVirtualX.; Definition at line 2142 of file GX11Gui.cxx. ◆ CloseDisplay(). void TGX11::CloseDisplay ; (; ). overridevirtual . Close connection to display server. ; Reimplemented from TVirtualX.; Definition at line 840 of file GX11Gui.cxx. ◆ ClosePixmap(). void TGX11::ClosePixmap ; (; ). overridevirtual . Delete current pixmap. ; Reimplemented from TVirtualX.; Definition at line 439 of file TGX11.cxx. ◆ CloseWindow(). void TGX11::CloseWindow ; (; ). overridevirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:57983,Clear,Clear,57983,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['Clear'],['Clear']
Usability,"atures ROOT offers? Did you enable the tree cache (on by default for PROOF and one tree per file, off - for now, still - otherwise)? Do you only read the branches you need? I am working on a new TTree read access class that should simplify all of that considerably (and is type safe - no more void*&!); maybe I should take your comment as an invitation to speed up :-); Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Re: Interpreters . Hi ROOT user,; Thanks for your comments - they are excellent!; Your scenario would probably work - but we decided against it, and I believe that we have good reasons for that :-); GCCXML's future is limited; there is a re-write based on GCC's plugin mechanism, but both suffer from the same problems: we cannot influence what the GCC parser does. And reading headers, writing XML, parsing XML, writing (huge files of) C++, compiling, linking, loading - that's really, really inefficient and error prone.; Python is much simpler than C++. But it's still a horrible language in our environment, unless it's used as bash++. Not a single algorithm should be written in Python: it's terribly hard to convert it into C++, and it's incredibly slow in Python (ask the Google developers about youtube).; So C++ is not a good interpreted language, mainly due to its syntactic verbosity and its lack of dynamic interfaces and reflection capabilities - think; const std::type_info& ti = std::type_info::lookup(""MyClass"");; MyBase* ptr = ti.default_construct();; And Python is not appropriate for many use cases due to its lack of type safety and speed, and its lack of native binding to C++. Then which other language should we use?; Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Hi Alex, . Hi Alex,; Very good points but let me try to defend python. I have found that a following approach (used by ATLAS that I also adopted in my private code) works fantastically well:; -- Use python t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:16791,simpl,simpler,16791,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['simpl'],['simpler']
Usability,atures bits);  Set a specific IO feature. ;  ; bool Test (EIOFeatures bits) const;  Test to see if a given feature is set. ;  ; bool Test (Experimental::EIOFeatures bits) const;  Test to see if a given feature is set. ;  ; bool Test (Experimental::EIOUnsupportedFeatures bits) const;  . Static Public Attributes; static constexpr int kIOFeatureCount = 1;  . Private Member Functions;  TIOFeatures (UChar_t IOBits);  ; UChar_t GetFeatures () const;  ; void Set (UChar_t newBits);  . Private Attributes; UChar_t fIOBits {0};  . Friends; class ::TBasket;  ; class ::TBranch;  ; class ::TTree;  . #include <ROOT/TIOFeatures.hxx>; Constructor & Destructor Documentation. ◆ TIOFeatures() [1/2]. ROOT::TIOFeatures::TIOFeatures ; (; ). inline . Definition at line 75 of file TIOFeatures.hxx. ◆ TIOFeatures() [2/2]. ROOT::TIOFeatures::TIOFeatures ; (; UChar_t ; IOBits). inlineprivate . Definition at line 96 of file TIOFeatures.hxx. Member Function Documentation. ◆ Clear() [1/3]. void TIOFeatures::Clear ; (; EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 80 of file TIOFeatures.cxx. ◆ Clear() [2/3]. void TIOFeatures::Clear ; (; Experimental::EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this ver,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:3208,Clear,Clear,3208,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,2,['Clear'],['Clear']
Usability,"atures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/namespaceROOT.html:2893,simpl,simple,2893,doc/v624/namespaceROOT.html,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html,1,['simpl'],['simple']
Usability,atus.hxx. ◆ GetNEntries(). NTupleSize_t ROOT::Experimental::RNTupleFillStatus::GetNEntries ; (; ); const. inline . Return the number of entries written into the current cluster. ; Definition at line 50 of file RNTupleFillStatus.hxx. ◆ GetUnzippedClusterSize(). std::size_t ROOT::Experimental::RNTupleFillStatus::GetUnzippedClusterSize ; (; ); const. inline . Return the number of bytes written into the current cluster. ; Definition at line 52 of file RNTupleFillStatus.hxx. ◆ ShouldFlushCluster(). bool ROOT::Experimental::RNTupleFillStatus::ShouldFlushCluster ; (; ); const. inline . Return true if the caller should call FlushCluster. ; Definition at line 56 of file RNTupleFillStatus.hxx. Friends And Related Symbol Documentation. ◆ RNTupleFillContext. friend class RNTupleFillContext. friend . Definition at line 37 of file RNTupleFillStatus.hxx. Member Data Documentation. ◆ fLastEntrySize. std::size_t ROOT::Experimental::RNTupleFillStatus::fLastEntrySize = 0. private . Number of bytes written for the last entry. ; Definition at line 45 of file RNTupleFillStatus.hxx. ◆ fNEntriesSinceLastFlush. NTupleSize_t ROOT::Experimental::RNTupleFillStatus::fNEntriesSinceLastFlush = 0. private . Number of entries written into the current cluster. ; Definition at line 41 of file RNTupleFillStatus.hxx. ◆ fShouldFlushCluster. bool ROOT::Experimental::RNTupleFillStatus::fShouldFlushCluster = false. private . Definition at line 46 of file RNTupleFillStatus.hxx. ◆ fUnzippedClusterSize. std::size_t ROOT::Experimental::RNTupleFillStatus::fUnzippedClusterSize = 0. private . Number of bytes written into the current cluster. ; Definition at line 43 of file RNTupleFillStatus.hxx. Libraries for ROOT::Experimental::RNTupleFillStatus:. [legend]; The documentation for this class was generated from the following file:; tree/ntuple/v7/inc/ROOT/RNTupleFillStatus.hxx. ROOTExperimentalRNTupleFillStatus. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillStatus.html:3637,Guid,Guide,3637,doc/master/classROOT_1_1Experimental_1_1RNTupleFillStatus.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleFillStatus.html,1,['Guid'],['Guide']
Usability,atusBar. protected . Definition at line 107 of file TRootBrowserLite.h. ◆ fTextEdit. TGTextEdit* TRootBrowserLite::fTextEdit. protected . contents of browsed text file ; Definition at line 112 of file TRootBrowserLite.h. ◆ fTextFileName. TString TRootBrowserLite::fTextFileName. private . Definition at line 64 of file TRootBrowserLite.h. ◆ fToolBar. TGToolBar* TRootBrowserLite::fToolBar. private . Definition at line 46 of file TRootBrowserLite.h. ◆ fToolBarButton. TGButton* TRootBrowserLite::fToolBarButton[7]. protected . same size as gToolBarData[] ; Definition at line 105 of file TRootBrowserLite.h. ◆ fToolBarSep. TGHorizontal3DLine* TRootBrowserLite::fToolBarSep. private . Definition at line 47 of file TRootBrowserLite.h. ◆ fTreeHdr. TGCompositeFrame* TRootBrowserLite::fTreeHdr. private . Definition at line 53 of file TRootBrowserLite.h. ◆ fTreeLock. Bool_t TRootBrowserLite::fTreeLock. protected . true when we want to lock TGListTree ; Definition at line 109 of file TRootBrowserLite.h. ◆ fTreeView. TGCanvas* TRootBrowserLite::fTreeView. protected . Definition at line 103 of file TRootBrowserLite.h. ◆ fV1. TGVerticalFrame* TRootBrowserLite::fV1. private . Definition at line 48 of file TRootBrowserLite.h. ◆ fV2. TGVerticalFrame* TRootBrowserLite::fV2. private . Definition at line 49 of file TRootBrowserLite.h. ◆ fViewMenu. TGPopupMenu* TRootBrowserLite::fViewMenu. protected . Definition at line 97 of file TRootBrowserLite.h. ◆ fViewMode. Int_t TRootBrowserLite::fViewMode. protected . current IconBox view mode ; Definition at line 110 of file TRootBrowserLite.h. ◆ fWidgets. TList* TRootBrowserLite::fWidgets. private . Definition at line 66 of file TRootBrowserLite.h. Libraries for TRootBrowserLite:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TRootBrowserLite.h; gui/gui/src/TRootBrowserLite.cxx. TRootBrowserLite. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserLite.html:61764,Guid,Guide,61764,doc/master/classTRootBrowserLite.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserLite.html,1,['Guid'],['Guide']
Usability,"atusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. THashTablefStringPropertyall properties of String type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDictAttributeMap(); Default constructor. ~TDictAttributeMap(); Default destructor. void AddProperty(const char* key, const char* value); Add a property with a String value to the TDictAttributeMap.; Parameters: key and char* value of the property. Bool_t HasKey(const char* key) const. const char* GetPropertyAsString(const char* key) const; Access the value of a String property using the key. TString RemovePropertyString(const char* key); Remove a String property from the attribute map specified by the key.; Returns the TString property removed or NULL if the property does not exist. Bool_t RemoveProperty(const char* key); Remove a property from the attribute map specified by the key.; Returns true if property exists and was removed, false if property; does not exist. void Clear(Option_t* option = """"); Deletes all the properties of the class. TDictAttributeMap(). Int_t GetPropertySize() const; { return fStringProperty.GetSize(); }. » Author: Bianca-Cristina Cristescu 03/07/13 » Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-02 15:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TDictAttributeMap.html:6966,Clear,Clear,6966,root/html604/TDictAttributeMap.html,https://root.cern,https://root.cern/root/html604/TDictAttributeMap.html,1,['Clear'],['Clear']
Usability,"atusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. THashTablefStringPropertyall properties of String type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDictAttributeMap(); Default constructor. ~TDictAttributeMap(); Default destructor. void AddProperty(const char* key, const char* value); Add a property with a String value to the TDictAttributeMap.; Parameters: key and char* value of the property. Bool_t HasKey(const char* key) const. const char* GetPropertyAsString(const char* key) const; Access the value of a String property using the key. TString RemovePropertyString(const char* key); Remove a String property from the attribute map specified by the key.; Returns the TString property removed or NULL if the property does not exist. Bool_t RemoveProperty(const char* key); Remove a property from the attribute map specified by the key.; Returns true if property exists and was removed, false if property; does not exist. void Clear(Option_t* option = """"); Deletes all the properties of the class. TDictAttributeMap(). Int_t GetPropertySize() const; { return fStringProperty.GetSize(); }. » Author: Bianca-Cristina Cristescu 03/07/13 » Copyright (C) 1995-2013, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-30 14:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDictAttributeMap.html:6966,Clear,Clear,6966,root/html602/TDictAttributeMap.html,https://root.cern,https://root.cern/root/html602/TDictAttributeMap.html,1,['Clear'],['Clear']
Usability,"atusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionQueryFrame.html:22609,progress bar,progress bar,22609,root/html602/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html,2,['progress bar'],['progress bar']
Usability,"ault constructor.Definition TArrow.cxx:47; TArrow::fAngleFloat_t fAngleArrow opening angle (degrees)Definition TArrow.h:31; TArrow::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TArrow.cxx:365; TArrow::SetOptionvirtual void SetOption(Option_t *option="">"")Definition TArrow.h:62; TArrow::fgDefaultOptionstatic TString fgDefaultOptionDefault Arrow shapes.Definition TArrow.h:37; TArrow::fOptionTString fOptionArrow shapes.Definition TArrow.h:33; TArrow::PaintArrowNDCvirtual void PaintArrowNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2, Float_t arrowsize=0.05, Option_t *option="">"")Draw this arrow with new coordinates in NDC.Definition TArrow.cxx:352; TArrow::PaintArrowvirtual void PaintArrow(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Float_t arrowsize=0.05, Option_t *option="">"")Draw this arrow with new coordinates.Definition TArrow.cxx:175; TArrow::~TArrow~TArrow() overrideArrow default destructor.Definition TArrow.cxx:91; TArrow::GetArrowSizeFloat_t GetArrowSize() constDefinition TArrow.h:52; TArrow::SetAnglevirtual void SetAngle(Float_t angle=60)Definition TArrow.h:60; TArrow::GetDefaultArrowSizestatic Float_t GetDefaultArrowSize()Get default arrow size.Definition TArrow.cxx:431; TArrow::Copyvoid Copy(TObject &arrow) const overrideCopy this arrow to arrow.Definition TArrow.cxx:108; TAttFillFill Area Attributes class.Definition TAttFill.h:19; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; double; arrowDefinition RArrowDS.hxx:17; v2@ v2Definition rootcling_impl.cxx:3702; v1@ v1Definition rootcling_impl.cxx:3701; Drawth1 Draw(). graf2dgrafincTArrow.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TArrow_8h_source.html:6743,simpl,simple,6743,doc/master/TArrow_8h_source.html,https://root.cern,https://root.cern/doc/master/TArrow_8h_source.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"ault the first one is taken. ; Definition at line 1185 of file TDSet.cxx. ◆ AddFriend(). void TDSet::AddFriend ; (; TDSet * ; friendset, . const char * ; alias . ). virtual . Add friend dataset to this set. ; Only possible if the TDSet type is a TTree or derived class. The friendset will be owned by this class and deleted in its destructor. ; Definition at line 1335 of file TDSet.cxx. ◆ AddInput(). void TDSet::AddInput ; (; TObject * ; obj). Add objects that might be needed during the processing of the selector (see Process()). ; Definition at line 966 of file TDSet.cxx. ◆ Class(). static TClass * TDSet::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDSet::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDSet::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 262 of file TDSet.h. ◆ ClearInput(). void TDSet::ClearInput ; (; ). Clear input object list. ; Definition at line 978 of file TDSet.cxx. ◆ Current(). TDSetElement * TDSet::Current ; (; ); const. inline . Definition at line 238 of file TDSet.h. ◆ DeclFileName(). static const char * TDSet::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 262 of file TDSet.h. ◆ Draw() [1/3]. Long64_t TDSet::Draw ; (; const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). virtual . Draw expression varexp for specified entries. ; Returns -1 in case of error or number of selected events in case of success. For more see TTree::Draw(). ; Definition at line 1501 of file TDSet.cxx. ◆ Draw() [2/3]. Long64_t TDSet::Draw ; (; const char * ; varexp, . const TCut & ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). virtual . Draw expression varexp for specified entries. ; Returns -1 in case of erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSet.html:21734,Clear,Clear,21734,doc/master/classTDSet.html,https://root.cern,https://root.cern/doc/master/classTDSet.html,1,['Clear'],['Clear']
Usability,"aultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t options=kDoubleBorder|kSunkenFrame);  Create progress bar. ;  ;  ~TGProgressBar () override;  ; virtual void Format (const char *format=""%.2f"");  Set format for displaying a value. ;  ; Pixel_t GetBarColor () const;  ; EBarType GetBarType () const;  ; EFillType GetFillType () const;  ; FontStruct_t GetFontStruct () const;  ; TString GetFormat () const;  ; Float_t GetMax () const;  ; Float_t GetMin () const;  ; GContext_t GetNormGC () const;  ; Float_t GetPosition () const;  ; Bool_t GetShowPos () const;  ; const char * GetValueFormat () const;  ; void Increment (Float_t inc);  Increment progress position. ;  ; TClass * IsA () const override;  ; virtual void Percent (Bool_t on);  ; virtual void Reset ();  Reset progress bar (i.e. set pos to 0). ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save progress bar parameters as a C++ statement(s) on output stream out. ;  ; void SetBarColor (const char *color=""blue"");  Set progress bar color. ;  ; virtual void SetBarColor (Pixel_t color);  Set progress bar color. ;  ; void SetBarType (EBarType type);  Set bar type. ;  ; void SetFillType (EFillType type);  Set fill type. ;  ; void SetForegroundColor (Pixel_t pixel) override;  Change text color drawing. ;  ; void SetMax (Float_t max);  ; void SetMin (Float_t min);  ; void SetPosition (Float_t pos);  Set progress position between [min,max]. ;  ; void SetRange (Float_t min, Float_t max);  Set min and max of progress bar. ;  ; virtual void ShowPos (Bool_t on);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UsePercent () const;  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, W",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHProgressBar.html:2829,progress bar,progress bar,2829,doc/master/classTGHProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGHProgressBar.html,2,['progress bar'],['progress bar']
Usability,"aus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits are set. . ""C"" In case of linear fitting, do no calculate the chisquare (saves CPU time). . ""G"" Uses the gradient implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""EX0"" When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates . ""ROB"" In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points . This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors. See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; The fitting of the TGraph, i.e simple data points without any error associated, is performed using the un-weighted least-square (chi-square) method. TGraphErrors fit:; In case of a TGraphErrors or TGraphAsymmErrors object, when x errors are present, the error along x, is projected along the y-direction by calculating the function at the points x-ex_low and x+ex_high, where ex_low and ex_high are the corresponding lower and upper error in x. The chi-square is then computed as the sum of the quantity below at each data point:. \[; \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; \]. where x and y are the point coordinates, and ‘f’(x)is the derivative of the functionf(x)`.; In case of asymmetric errors, if the function lies below (above) the data point, ey is ey_low (ey_high).; The approach used to approximate the uncertainty in y because of the errors in x is to make it equal the error in x times the slope of the line. This approach is called ""effective variance method"" and the implementation is provided in the function FitUtil::EvaluateChi2Effective. Linear fitt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:49914,simpl,simple,49914,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['simpl'],['simple']
Usability,"ause the viewer to suspend redraws etc, and after the EndScene the viewer will reset the camera to frame the new scene and redraw. [x3d viewer does not support changing of scenes - objects added after the first Open/CloseScene pair will be ignored.]. Filling TBuffer3D and Adding to Viewer; The viewers behind the TVirtualViewer3D interface differ greatly in their capabilities e.g. Some know how to draw certain shapes natively (e.g. spheres/tubes in OpenGL) - others always require a raw tessellation description of points/lines/segments.; Some need the 3D object positions in the global frame, others can cope with local frames + a translation matrix - which can give considerable performance benefits. To cope with these situations the object buffer is filled out in negotiation with the viewer. TBuffer3D classes are conceptually divided into enumerated sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). . The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D are used to test/set/clear these section valid flags.; The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw) are sufficient to describe any tessellated shape in a generic fashion. An additional ShapeSpecific section in derived shape specific classes allows a more abstract shape description (""a sphere of inner radius x, outer radius y""). This enables a viewer which knows how to draw (tessellate) the shape itself to do so, which can bring considerable performance and quality benefits, while providing a generic fallback suitable for all viewers.; The rules for client negotiation with the viewer are:. If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; Complete the mandatory Core section.; Complete the ShapeSpecific section if applicable.; Complete the BoundingBox if you can.; Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:3281,Clear,ClearSectionsValid,3281,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,2,"['Clear', 'clear']","['ClearSectionsValid', 'clear']"
Usability,"aused. class TRecorderPaused: public TRecorderState. Represents state of TRecorder when paused. Function Members (Methods); public:. TRecorderPaused(const TRecorderPaused&); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderPaused&operator=(const TRecorderPaused&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder* r); virtual voidResume(TRecorder* r); virtual voidShowMembers(TMemberInspector& insp); virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TRecorderPaused(TRecorderReplaying* state); voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState). private:. (unknown)(). Data Members; private:. TRecorderReplaying*fReplayingStateReplaying that is paused. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRecorderPaused(TRecorderReplaying* state); Rememeber the recorder state that is paused. void Resume(TRecorder* r); Continues replaying. void ReplayStop(TRecorder* r); Replaying is cancelled. TRecorder::ERecorderState GetState() const; Gets current state of recorder. TRecorderPaused(TRecorderReplaying* state). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TRecorder.h 35206 2010-09-08 14:01:27Z bellenot $ » Last generated: 2010-09-23 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorderPaused.html:1480,pause,paused,1480,root/html528/TRecorderPaused.html,https://root.cern,https://root.cern/root/html528/TRecorderPaused.html,3,"['Resume', 'pause']","['Resume', 'paused']"
Usability,"aused. class TRecorderPaused: public TRecorderState. Represents state of TRecorder when paused. Function Members (Methods); public:. TRecorderPaused(const TRecorderPaused&); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderPaused&operator=(const TRecorderPaused&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder* r); virtual voidResume(TRecorder* r); virtual voidShowMembers(TMemberInspector& insp); virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TRecorderPaused(TRecorderReplaying* state); voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState). private:. (unknown)(). Data Members; private:. TRecorderReplaying*fReplayingStateReplaying that is paused. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRecorderPaused(TRecorderReplaying* state); Rememeber the recorder state that is paused. void Resume(TRecorder* r); Continues replaying. void ReplayStop(TRecorder* r); Replaying is cancelled. TRecorder::ERecorderState GetState() const; Gets current state of recorder. TRecorderPaused(TRecorderReplaying* state). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TRecorder.h 35206 2010-09-08 14:01:27Z bellenot $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRecorderPaused.html:1480,pause,paused,1480,root/html530/TRecorderPaused.html,https://root.cern,https://root.cern/root/html530/TRecorderPaused.html,3,"['Resume', 'pause']","['Resume', 'paused']"
Usability,"aused. class TRecorderPaused: public TRecorderState. Represents state of TRecorder when paused. Function Members (Methods); public:. TRecorderPaused(const TRecorderPaused&); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidTRecorderState::ListCmd(const char*); virtual voidTRecorderState::ListGui(const char*); TRecorderPaused&operator=(const TRecorderPaused&); virtual voidTRecorderState::Pause(TRecorder*); virtual voidTRecorderState::PrevCanvases(const char*, Option_t*); virtual Bool_tTRecorderState::Replay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder* r); virtual voidResume(TRecorder* r); virtual voidShowMembers(TMemberInspector& insp); virtual voidTRecorderState::Start(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidTRecorderState::Stop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TRecorderPaused(TRecorderReplaying* state); voidTRecorderState::ChangeState(TRecorder* r, TRecorderState* s, Bool_t deletePreviousState). private:. (unknown)(). Data Members; private:. TRecorderReplaying*fReplayingStateReplaying that is paused. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRecorderPaused(TRecorderReplaying* state); Rememeber the recorder state that is paused. void Resume(TRecorder* r); Continues replaying. void ReplayStop(TRecorder* r); Replaying is cancelled. TRecorder::ERecorderState GetState() const; Gets current state of recorder. TRecorderPaused(TRecorderReplaying* state). » Author: Katerina Opocenska 11/09/2008 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TRecorder.h 35206 2010-09-08 14:01:27Z bellenot $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TRecorderPaused.html:1480,pause,paused,1480,root/html532/TRecorderPaused.html,https://root.cern,https://root.cern/root/html532/TRecorderPaused.html,3,"['Resume', 'pause']","['Resume', 'paused']"
Usability,"aussian resolution PDF do setConvolutionWindow(gaussMean,gaussSigma,5) Note that for a 'wide' Gaussian the -inf to +inf integration may converge more quickly than that over a finite range! The default numeric precision is 1e-7, i.e. the global default for numeric integration but you should experiment with this value to see if it is sufficient for example by studying the number of function calls that MINUIT needs to fit your function as function of the convolution precision. ; Definition at line 29 of file RooNumConvolution.h. Public Member Functions;  RooNumConvolution ();  ;  RooNumConvolution (const char *name, const char *title, RooRealVar &convVar, RooAbsReal &pdf, RooAbsReal &resmodel, const RooNumConvolution *proto=nullptr);  Constructor of convolution operator PDF. ;  ;  RooNumConvolution (const RooNumConvolution &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooNumConvolution () override;  Destructor. ;  ; void clearConvolutionWindow ();  Removes previously defined convolution window, reverting to convolution from -inf to +inf. ;  ; TObject * clone (const char *newname) const override;  ; RooNumIntConfig & convIntConfig ();  ; const RooNumIntConfig & convIntConfig () const;  ; double evaluate () const override;  Calculate convolution integral. ;  ; TClass * IsA () const override;  ; RooAbsReal & model () const;  ; RooAbsReal & pdf () const;  ; const TH2 * profileData () const;  ; void setCallProfiling (bool flag, Int_t nbinX=40, Int_t nbinCall=40, Int_t nCallHigh=1000);  Activate call profile if flag is set to true. ;  ; void setCallWarning (Int_t threshold=2000);  Activate warning messages if number of function calls needed for evaluation of convolution integral exceeds given threshold. ;  ; void setConvolutionWindow (RooAbsReal &centerParam, RooAbsReal &widthParam, double widthScaleFactor=1);  Restrict convolution integral to finite range [ x - C - S*W, x - C + S*W ] where x is current value of convolution variablem, C = centerParam, W=widthPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvolution.html:2912,clear,clearConvolutionWindow,2912,doc/master/classRooNumConvolution.html,https://root.cern,https://root.cern/doc/master/classRooNumConvolution.html,1,['clear'],['clearConvolutionWindow']
Usability,"auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ; Create 10 histograms and merge them into one; root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3687; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html:3807,simpl,simple,3807,doc/v632/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TExecutorCRTP.html,1,['simpl'],['simple']
Usability,"auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TProcessExecutor pool; auto tenOnes = pool.Map([]() { return 1; }, 10); auto ten = Reduce([](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }, tenOnes); ; Create 10 histograms and merge them into one; root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TExecutorCRTP::Mapauto Map(F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >Execute a function without arguments several times.Definition TExecutorCRTP.hxx:185; ROOT::TExecutorCRTP::ReduceT * Reduce(const std::vector< T * > &mergeObjs)""Reduce"" an std::vector into a single object by using the object's Merge method.Definition TExecutorCRTP.hxx:347; ROOT::TProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel,...Definition TProcessExecutor.hxx:37; ROOT::TProcessExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TProcessExecutor.hxx:262; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3699; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345. Definition at line 103 of file TExecutorCRTP.hxx. Public Member Functions;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html:3808,simpl,simple,3808,doc/master/classROOT_1_1TExecutorCRTP.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TExecutorCRTP.html,1,['simpl'],['simple']
Usability,"available in TSpectrum2Painter and paint ""h2"". ; TSpectrum2Painter offers a large set of options/attributes. In the ""option"" parameter each of them can be set to specific values via ""operators"" in the option itself. for instance on can do: h2->Draw(""SPEC a(30,30,0)"");; to draw h2 with TSpectrum2Painter using all the default attributes except the viewing angles. The operators' names are case insensitive (one can use ""a"" or ""A""). Operators parameters are separated by "","". The operators can be put is any order in the option. Operators must be separated by "" "". No "" "" characters should be put in an operator. This help page describes all the available operators.; The way ""h2"" will be painted is controlled with 2 parameters the ""Display; modes groups"" and the ""Display Modes"".; ""Display modes groups"" can take the following values:. 0 = Simple - it covers simple display modes using one color only; 1 = Light - in this group the shading is carried out according to the position of the fictive light source; 2 = Height - in this group the shading is carried out according to the channel contents; 3 = LightHeight - combination of two previous shading algorithms. One can control the weight between both algorithms. ""Display modes"" can take the following values:. 1 = Points.; 2 = Grid.; 3 = Contours.; 4 = Bars.; 5 = LinesX.; 6 = LinesY.; 7 = BarsX.; 8 = BarsY.; 9 = Needles.; 10 = Surface.; 11 = Triangles. Using this function these parameters can be set using the ""dm"" operator in the option. Example: h2->Draw(""SPEC dm(1,2)"");; will paint the 2D histogram h2 using the ""Light Display mode group"" and the ""Grid Display mode"". The following table summarises all the possible combinations of the ""Display modes groups"" and the ""Display modes"". Simple Light Height Light-Height . Points X X X X . Grid X X X X . Contours X - X - . Bars X - X - . LinesX X X X X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . The Pen Attributes can be chang",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:44351,Simpl,Simple,44351,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"available look for b/src/C.cxx for class A::B::C. out_fsys will contain the file system's (i.e. local machine's) full path name to the file. The function returns false if the class's source file cannot be found.; If your software cannot be mapped into this scheme then derive your own class from TFileDefinition and pass it to THtml::SetFileDefinition(). ; Definition at line 279 of file THtml.cxx. ◆ IsA(). TClass * THtml::TFileDefinition::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 85 of file THtml.h. ◆ MatchFileSysName(). TString THtml::TFileDefinition::MatchFileSysName ; (; TString & ; filename, . TFileSysEntry ** ; fse = 0 . ); const. protected . Find filename in the list of system files; return the system file name and change filename to the file name as included. ; filename must be normalized (no ""/./"" etc) before calling. ; Definition at line 308 of file THtml.cxx. ◆ NormalizePath(). void THtml::TFileDefinition::NormalizePath ; (; TString & ; path); const. protected . Remove ""/./"" and collapse ""/subdir/../"" to ""/"". ; Definition at line 289 of file THtml.cxx. ◆ SplitClassIntoDirFile(). void THtml::TFileDefinition::SplitClassIntoDirFile ; (; const TString & ; clname, . TString & ; dir, . TString & ; filename . ); const. protected . Given a class name with a scope, split the class name into directory part and file name: A::B::C becomes module B, filename C. ; Definition at line 234 of file THtml.cxx. ◆ Streamer(). void THtml::TFileDefinition::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void THtml::TFileDefinition::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 85 of file THtml.h. html/inc/THtml.h; html/src/THtml.cxx. THtmlTFileDefinition. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TFileDefinition.html:16309,Guid,Guide,16309,doc/master/classTHtml_1_1TFileDefinition.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileDefinition.html,1,['Guid'],['Guide']
Usability,"ave been checked.; 2853 ; 2854Bool_t TStreamerInfo::CompareContent(TClass *cl, TVirtualStreamerInfo *info, Bool_t warn, Bool_t complete, TFile *file); 2855{; 2856 Bool_t result = kTRUE;; 2857 R__ASSERT( (cl==0 || info==0) && (cl!=0 || info!=0) /* must compare to only one thing! */);; 2858 ; 2859 TString name;; 2860 TString type;; 2861 TStreamerElement *el;; 2862 TStreamerElement *infoel = 0;; 2863 ; 2864 TIter next(GetElements());; 2865 TIter infonext((TList*)0);; 2866 TIter basenext((TList*)0);; 2867 TIter membernext((TList*)0);; 2868 if (info) {; 2869 infonext = info->GetElements();; 2870 }; 2871 if (cl) {; 2872 TList *tlb = cl->GetListOfBases();; 2873 if (tlb) { // Loop over bases; 2874 basenext = tlb;; 2875 }; 2876 tlb = cl->GetListOfDataMembers();; 2877 if (tlb) {; 2878 membernext = tlb;; 2879 }; 2880 }; 2881 ; 2882 // First let's compare base classes; 2883 Bool_t done = kFALSE;; 2884 TString localClass;; 2885 TString otherClass;; 2886 while(!done) {; 2887 localClass.Clear();; 2888 otherClass.Clear();; 2889 el = (TStreamerElement*)next();; 2890 if (el && el->IsBase()) {; 2891 localClass = el->GetName();; 2892 } else {; 2893 el = 0;; 2894 }; 2895 if (cl) {; 2896 TBaseClass *tbc = (TBaseClass*)basenext();; 2897 if (tbc) {; 2898 otherClass = tbc->GetName();; 2899 } else if (el==0) {; 2900 done = kTRUE;; 2901 break;; 2902 }; 2903 } else {; 2904 infoel = (TStreamerElement*)infonext();; 2905 if (infoel && infoel->IsBase()) {; 2906 otherClass = infoel->GetName();; 2907 } else if (el==0) {; 2908 done = kTRUE;; 2909 break;; 2910 }; 2911 }; 2912 if (TClassEdit::IsSTLCont(localClass)) {; 2913 localClass = TClassEdit::ShortType( localClass, TClassEdit::kDropStlDefault );; 2914 otherClass = TClassEdit::ShortType( otherClass, TClassEdit::kDropStlDefault );; 2915 }; 2916 // Need to normalize the name; 2917 if (localClass != otherClass) {; 2918 if (warn) {; 2919 if (el==0) {; 2920 Warning(""CompareContent"",; 2921 ""The in-memory layout version %d for class '%s' has a base class ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:114468,Clear,Clear,114468,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['Clear'],['Clear']
Usability,"aveLabel, TPaveStats, TPavesText, TPaveText, TPieSlice, TPolyLine, TWbox, TGraphEdge, TGraphNode, TImageDump, TPDF, TPostScript, TSVG, TTeXDump, TGWin32, TGX11, TGX11TTF, TEveLine, TEveLineProjected, TEveScalableStraightLineSet, TEveStraightLineSet, TEveStraightLineSetProjected, TEveTrack, TEveTrackList, TEveTrackProjected, TEveTrackListProjected, TEveMCTrack, TBRIK, TCONE, TCONS, TCTUB, TELTU, TGTRA, THelix, THYPE, TMarker3DBox, TNode, TNodeDiv, TPARA, TPCON, TPGON, TPolyLine3D, TShape, TSPHE, TTRAP, TTRD1, TTRD2, TTUBE, TTUBS, TXTRU, TGLAxis, TGLTH3Composition, TWebPadPainter, TWebPS, THbookTree, TEfficiency, TF1, TF12, TF2, TF3, TGraph, TGraph2D, TGraph2DAsymmErrors, TGraph2DErrors, TGraphAsymmErrors, TGraphBentErrors, TGraphErrors, TGraphMultiErrors, TH1, TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, TProfile2Poly, TProfile3D, TScatter, TSpline, TSpline3, TSpline5, ROOT::v5::TF1Data, TPaletteAxis, TParticle, TPrimary, TProofChain, RooCurve, RooEllipse, RooHist, TChain, TNtuple, TNtupleD, TTree, TTreeSQL, TParallelCoordRange, TParallelCoordSelect, TParallelCoordVar, and TSpider. ◆ StreamerNVirtual(). void TAttLine::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 45 of file TAttLine.h. Member Data Documentation. ◆ fLineColor. Color_t TAttLine::fLineColor. protected . Line color. ; Definition at line 21 of file TAttLine.h. ◆ fLineStyle. Style_t TAttLine::fLineStyle. protected . Line style. ; Definition at line 22 of file TAttLine.h. ◆ fLineWidth. Width_t TAttLine::fLineWidth. protected . Line width. ; Definition at line 23 of file TAttLine.h. Libraries for TAttLine:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TAttLine.h; core/base/src/TAttLine.cxx. TAttLine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttLine.html:15754,Guid,Guide,15754,doc/master/classTAttLine.html,https://root.cern,https://root.cern/doc/master/classTAttLine.html,1,['Guid'],['Guide']
Usability,"avePrimitive(). void TGeoArb8::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Reimplemented in TGeoTrap, and TGeoGtra. ◆ SetDimensions(). void TGeoArb8::SetDimensions ; (; Double_t * ; param). overridevirtual . Implements TGeoShape.; Reimplemented in TGeoTrap, and TGeoGtra. ◆ SetDz(). void TGeoArb8::SetDz ; (; Double_t ; dz). inline . Definition at line 88 of file TGeoArb8.h. ◆ SetPlaneVertices(). void TGeoArb8::SetPlaneVertices ; (; Double_t ; zpl, . Double_t * ; vertices . ); const. ◆ SetPoints() [1/2]. void TGeoArb8::SetPoints ; (; Double_t * ; points); const. overridevirtual . Implements TGeoShape. ◆ SetPoints() [2/2]. void TGeoArb8::SetPoints ; (; Float_t * ; points); const. overridevirtual . Implements TGeoShape. ◆ SetVertex(). virtual void TGeoArb8::SetVertex ; (; Int_t ; vnum, . Double_t ; x, . Double_t ; y . ). virtual . ◆ Sizeof3D(). void TGeoArb8::Sizeof3D ; (; ); const. overridevirtual . Implements TGeoShape. ◆ Streamer(). void TGeoArb8::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGeoTrap, and TGeoGtra. ◆ StreamerNVirtual(). void TGeoArb8::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 93 of file TGeoArb8.h. Member Data Documentation. ◆ fDz. Double_t TGeoArb8::fDz {0}. protected . Definition at line 26 of file TGeoArb8.h. ◆ fTwist. Double_t* TGeoArb8::fTwist {nullptr}. protected . Definition at line 27 of file TGeoArb8.h. ◆ fXY. Double_t TGeoArb8::fXY[8][2]. protected . [4] tangents of twist angles ; Definition at line 28 of file TGeoArb8.h. Libraries for TGeoArb8:. [legend]; The documentation for this class was generated from the following file:; geom/geom/inc/TGeoArb8.h. TGeoArb8. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoArb8.html:34002,Guid,Guide,34002,doc/master/classTGeoArb8.html,https://root.cern,https://root.cern/doc/master/classTGeoArb8.html,1,['Guid'],['Guide']
Usability,"aversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:1776,undo,undo,1776,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,24,['undo'],['undo']
Usability,"avetext with statistics; 8864 if (!gStyle->GetOptFit()) fit = nullptr;; 8865 Bool_t done = kFALSE;; 8866 if (!dostat && !fit) {; 8867 if (stats) { fFunctions->Remove(stats); delete stats;}; 8868 return;; 8869 }; 8870 Double_t statw = gStyle->GetStatW();; 8871 if (fit) statw = 1.8*gStyle->GetStatW();; 8872 Double_t stath = nlines*gStyle->GetStatFontSize();; 8873 if (stath <= 0 || 3 == (gStyle->GetStatFont()%10)) {; 8874 stath = 0.25*nlines*gStyle->GetStatH();; 8875 }; 8876 if (fit) stath += gStyle->GetStatH();; 8877 if (stats) {; 8878 stats->Clear();; 8879 done = kTRUE;; 8880 } else {; 8881 stats = new TPaveStats(; 8882 gStyle->GetStatX()-statw,; 8883 gStyle->GetStatY()-stath,; 8884 gStyle->GetStatX(),; 8885 gStyle->GetStatY(),""brNDC"");; 8886 ; 8887 stats->SetParent(fH);; 8888 stats->SetOptFit(dofit);; 8889 stats->SetOptStat(dostat);; 8890 stats->SetFillColor(gStyle->GetStatColor());; 8891 stats->SetFillStyle(gStyle->GetStatStyle());; 8892 stats->SetBorderSize(gStyle->GetStatBorderSize());; 8893 stats->SetName(""stats"");; 8894 ; 8895 stats->SetTextColor(gStyle->GetStatTextColor());; 8896 stats->SetTextAlign(12);; 8897 stats->SetTextFont(gStyle->GetStatFont());; 8898 if (gStyle->GetStatFont()%10 > 2); 8899 stats->SetTextSize(gStyle->GetStatFontSize());; 8900 stats->SetFitFormat(gStyle->GetFitFormat());; 8901 stats->SetStatFormat(gStyle->GetStatFormat());; 8902 stats->SetBit(kCanDelete);; 8903 stats->SetBit(kMustCleanup);; 8904 }; 8905 if (print_name) stats->AddText(h2->GetName());; 8906 if (print_entries) {; 8907 if (h2->GetEntries() < 1e7) tt.Form(""%s = %-7d"",gStringEntries.Data(),Int_t(h2->GetEntries()+0.5));; 8908 else tt.Form(""%s = %14.7g"",gStringEntries.Data(),Float_t(h2->GetEntries()));; 8909 stats->AddText(tt.Data());; 8910 }; 8911 if (print_mean) {; 8912 if (print_mean == 1) {; 8913 tf.Form(""%s = %s%s"",gStringMeanX.Data(),""%"",stats->GetStatFormat());; 8914 tt.Form(tf.Data(),h2->GetMean(1));; 8915 stats->AddText(tt.Data());; 8916 tf.Form(""%s = %s%s"",gStringMeanY",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:318057,Clear,Clear,318057,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"avilovAccurateCdf::DoEvalPar ; (; double ; x, . const double * ; p . ); const. overridevirtual . Evaluate the function, using parameters p. ; Parameters. xThe Landau parameter \(x = \lambda_L\) ; pvector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). . Implements ROOT::Math::IParametricFunctionOneDim.; Definition at line 94 of file VavilovAccurateCdf.cxx. ◆ NPar(). unsigned int ROOT::Math::VavilovAccurateCdf::NPar ; (; ); const. overridevirtual . Return the number of Parameters. ; Implements ROOT::Math::IBaseParam.; Definition at line 74 of file VavilovAccurateCdf.cxx. ◆ ParameterName(). std::string ROOT::Math::VavilovAccurateCdf::ParameterName ; (; unsigned int ; i); const. overridevirtual . Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ; Reimplemented from ROOT::Math::IBaseParam.; Definition at line 78 of file VavilovAccurateCdf.cxx. ◆ Parameters(). const double * ROOT::Math::VavilovAccurateCdf::Parameters ; (; ); const. overridevirtual . Access the parameter values. ; Implements ROOT::Math::IBaseParam.; Definition at line 64 of file VavilovAccurateCdf.cxx. ◆ SetParameters(). void ROOT::Math::VavilovAccurateCdf::SetParameters ; (; const double * ; p). overridevirtual . Set the parameter values. ; Parameters. pvector of doubles containing the parameter values (Norm, x0, xi, kappa, beta2). . Implements ROOT::Math::IBaseParam.; Definition at line 68 of file VavilovAccurateCdf.cxx. Member Data Documentation. ◆ fP. double ROOT::Math::VavilovAccurateCdf::fP[5]. private . Definition at line 136 of file VavilovAccurateCdf.h. Libraries for ROOT::Math::VavilovAccurateCdf:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/VavilovAccurateCdf.h; math/mathmore/src/VavilovAccurateCdf.cxx. ROOTMathVavilovAccurateCdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurateCdf.html:6464,Guid,Guide,6464,doc/master/classROOT_1_1Math_1_1VavilovAccurateCdf.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurateCdf.html,1,['Guid'],['Guide']
Usability,"aving filled some entries in a Tree. ;  ; TPrincipal * Principal (const char *varexp="""", const char *selection="""", Option_t *option=""np"", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Interface to the Principal Components Analysis class. ;  ; void Print (Option_t *option="""") const override;  Print a summary of the tree contents. ;  ; virtual void PrintCacheStats (Option_t *option="""") const;  Print statistics about the TreeCache for this tree. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over entries and return a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; virtual Long64_t ReadStream (std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be calle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofChain.html:25023,simpl,simply,25023,doc/master/classTProofChain.html,https://root.cern,https://root.cern/doc/master/classTProofChain.html,3,['simpl'],['simply']
Usability,"aviour (in the middle just below the designated frame) set position to -1,-1. ; Definition at line 409 of file TGToolTip.cxx. ◆ SetText(). void TGToolTip::SetText ; (; const char * ; new_text). Set new tool tip text. ; Definition at line 390 of file TGToolTip.cxx. ◆ Show(). void TGToolTip::Show ; (; Int_t ; x, . Int_t ; y . ). Show tool tip window. ; Definition at line 233 of file TGToolTip.cxx. ◆ Streamer(). void TGToolTip::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGToolTip::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 58 of file TGToolTip.h. Member Data Documentation. ◆ fBox. const TBox* TGToolTip::fBox. private . box in pad to which tooltip is associated ; Definition at line 32 of file TGToolTip.h. ◆ fDelay. TTimer* TGToolTip::fDelay. private . popup delay timer ; Definition at line 29 of file TGToolTip.h. ◆ fL1. TGLayoutHints* TGToolTip::fL1. private . layout used to place text in frame ; Definition at line 28 of file TGToolTip.h. ◆ fLabel. TGLabel* TGToolTip::fLabel. private . help text ; Definition at line 27 of file TGToolTip.h. ◆ fPad. const TVirtualPad* TGToolTip::fPad. private . pad to which tooltip is associated ; Definition at line 31 of file TGToolTip.h. ◆ fWindow. const TGFrame* TGToolTip::fWindow. private . frame to which tool tip is associated ; Definition at line 30 of file TGToolTip.h. ◆ fX. Int_t TGToolTip::fX. private . X position in fWindow where to popup. ; Definition at line 33 of file TGToolTip.h. ◆ fY. Int_t TGToolTip::fY. private . Y position in fWindow where to popup. ; Definition at line 34 of file TGToolTip.h. Libraries for TGToolTip:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGToolTip.h; gui/gui/src/TGToolTip.cxx. TGToolTip. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGToolTip.html:39070,Guid,Guide,39070,doc/master/classTGToolTip.html,https://root.cern,https://root.cern/doc/master/classTGToolTip.html,1,['Guid'],['Guide']
Usability,"avoid going through the NIC card for local operations. ; Reimplemented from TSystem.; Definition at line 159 of file TDavixSystem.cxx. ◆ Locate(). Int_t TDavixSystem::Locate ; (; const char * ; path, . TString & ; endurl . ). virtual . Definition at line 167 of file TDavixSystem.cxx. ◆ MakeDirectory(). Int_t TDavixSystem::MakeDirectory ; (; const char * ; name). virtual . Make a directory. ; Returns 0 in case of success and -1 if the directory could not be created (either already exists or illegal path name). ; Reimplemented from TSystem.; Definition at line 194 of file TDavixSystem.cxx. ◆ OpenDirectory(). void * TDavixSystem::OpenDirectory ; (; const char * ; name). virtual . Open a directory. Returns 0 if directory does not exist. ; Reimplemented from TSystem.; Definition at line 115 of file TDavixSystem.cxx. ◆ Streamer(). virtual void TDavixSystem::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TDavixSystem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file TDavixSystem.h. ◆ Unlink(). int TDavixSystem::Unlink ; (; const char * ; name). virtual . Unlink, i.e. ; remove, a file.; If the file is currently open by the current or another process, the behavior of this function is implementation-defined (in particular, POSIX systems unlink the file name, while Windows does not allow the file to be deleted and the operation is a no-op). ; Reimplemented from TSystem.; Definition at line 208 of file TDavixSystem.cxx. Member Data Documentation. ◆ d_ptr. TDavixFileInternal* TDavixSystem::d_ptr. private . Definition at line 38 of file TDavixSystem.h. Libraries for TDavixSystem:. [legend]; The documentation for this class was generated from the following files:; net/davix/inc/TDavixSystem.h; net/davix/src/TDavixSystem.cxx. TDavixSystem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixSystem.html:37855,Guid,Guide,37855,doc/master/classTDavixSystem.html,https://root.cern,https://root.cern/doc/master/classTDavixSystem.html,1,['Guid'],['Guide']
Usability,"aw ; (; ). overrideprotectedvirtual . Draw selected marker type as current one. ; Reimplemented from TGCheckButton.; Definition at line 173 of file TGedMarkerSelect.cxx. ◆ GetDefaultSize(). TGDimension TGedMarkerSelect::GetDefaultSize ; (; ); const. inlineoverridevirtual . default size ; Reimplemented from TGCheckButton.; Definition at line 54 of file TGedMarkerSelect.h. ◆ GetMarkerStyle(). Style_t TGedMarkerSelect::GetMarkerStyle ; (; ); const. inline . Definition at line 50 of file TGedMarkerSelect.h. ◆ MarkerSelected(). virtual void TGedMarkerSelect::MarkerSelected ; (; Style_t ; marker = 0). inlinevirtual . Definition at line 52 of file TGedMarkerSelect.h. ◆ ProcessMessage(). Bool_t TGedMarkerSelect::ProcessMessage ; (; Longptr_t ; msg, . Longptr_t ; parm1, . Longptr_t ; parm2 . ). overridevirtual . Process messages according to the user input. ; Reimplemented from TGFrame.; Definition at line 158 of file TGedMarkerSelect.cxx. ◆ SavePrimitive(). void TGedMarkerSelect::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; = """" . ). overridevirtual . Save the pattern select widget as a C++ statement(s) on output stream out. ; Reimplemented from TGCheckButton.; Definition at line 225 of file TGedMarkerSelect.cxx. ◆ SetMarkerStyle(). void TGedMarkerSelect::SetMarkerStyle ; (; Style_t ; pattern). Set marker. ; Definition at line 205 of file TGedMarkerSelect.cxx. Member Data Documentation. ◆ fMarkerStyle. Style_t TGedMarkerSelect::fMarkerStyle. protected . marker style ; Definition at line 40 of file TGedMarkerSelect.h. ◆ fPicture. const TGPicture* TGedMarkerSelect::fPicture. protected . image used for popup window ; Definition at line 41 of file TGedMarkerSelect.h. Libraries for TGedMarkerSelect:. [legend]; The documentation for this class was generated from the following files:; gui/ged/inc/TGedMarkerSelect.h; gui/ged/src/TGedMarkerSelect.cxx. TGedMarkerSelect. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedMarkerSelect.html:40450,Guid,Guide,40450,doc/master/classTGedMarkerSelect.html,https://root.cern,https://root.cern/doc/master/classTGedMarkerSelect.html,1,['Guid'],['Guide']
Usability,aw > . void ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::PartialReport ; (; ROOT::RDF::RCutFlowReport & ; rep); const. inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 154 of file RFilterWithMissingValues.hxx. ◆ Report(). template<typename PrevNodeRaw > . void ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::Report ; (; ROOT::RDF::RCutFlowReport & ; rep); const. inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 152 of file RFilterWithMissingValues.hxx. ◆ StopProcessing(). template<typename PrevNodeRaw > . void ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::StopProcessing ; (; ). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 160 of file RFilterWithMissingValues.hxx. ◆ TriggerChildrenCount(). template<typename PrevNodeRaw > . void ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::TriggerChildrenCount ; (; ). inlinefinalvirtual . Implements ROOT::Detail::RDF::RFilterBase.; Definition at line 175 of file RFilterWithMissingValues.hxx. Member Data Documentation. ◆ fDiscardEntryWithMissingValue. template<typename PrevNodeRaw > . bool ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::fDiscardEntryWithMissingValue. private . Definition at line 70 of file RFilterWithMissingValues.hxx. ◆ fPrevNodePtr. template<typename PrevNodeRaw > . const std::shared_ptr<PrevNode_t> ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::fPrevNodePtr. private . Definition at line 64 of file RFilterWithMissingValues.hxx. ◆ fValues. template<typename PrevNodeRaw > . std::vector<RColumnReaderBase *> ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >::fValues. private . Definition at line 67 of file RFilterWithMissingValues.hxx. tree/dataframe/inc/ROOT/RDF/RFilterWithMissingValues.hxx. ROOTDetailRDFRFilterWithMissingValues. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html:11588,Guid,Guide,11588,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html,1,['Guid'],['Guide']
Usability,"aw a standard Histogram (default); 1959 ; 1960 if ((optionHist) || !chopt[0]) {; 1961 if (!optionRot) {; 1962 gxwork[0] = wmin;; 1963 if (!optionOne) gywork[0] = TMath::Min(TMath::Max((Double_t)0,gPad->GetUymin()); 1964 ,gPad->GetUymax());; 1965 else gywork[0] = gPad->GetUymin();; 1966 ywmin = gywork[0];; 1967 npt = 2;; 1968 for (i=first; i<=last;i++) {; 1969 if (!optionBins) {; 1970 gxwork[npt-1] = gxwork[npt-2];; 1971 gxwork[npt] = wmin+((i-first+1)*delta);; 1972 } else {; 1973 xi1 = x[i]; xi = x[i-1];; 1974 if (xi1 < xi) {; 1975 if (i != last) Error(where, ""X must be in increasing order"");; 1976 else Error(where, ""X must have N+1 values with option N"");; 1977 goto do_cleanup;; 1978 }; 1979 gxwork[npt-1] = x[i-1]; gxwork[npt] = x[i];; 1980 }; 1981 gywork[npt-1] = y[i-1];; 1982 gywork[npt] = y[i-1];; 1983 if (gywork[npt] < vymin) {gywork[npt] = vymin; gywork[npt-1] = vymin;}; 1984 if ((gxwork[npt-1] >= uxmin-rounding && gxwork[npt-1] <= uxmax+rounding) ||; 1985 (gxwork[npt] >= uxmin-rounding && gxwork[npt] <= uxmax+rounding)) npt += 2;; 1986 if (i == last) {; 1987 gxwork[npt-1] = gxwork[npt-2];; 1988 gywork[npt-1] = gywork[0];; 1989 //make sure that the fill area does not overwrite the frame; 1990 //take into account the frame line width; 1991 if (gxwork[0] < vxmin) {gxwork[0] = vxmin; gxwork[1 ] = vxmin;}; 1992 if (gywork[0] < vymin) {gywork[0] = vymin; gywork[npt-1] = vymin;}; 1993 ; 1994 ComputeLogs(npt, optionZ);; 1995 ; 1996 // do not draw the two vertical lines on the edges; 1997 Int_t nbpoints = npt-2;; 1998 Int_t point1 = 1;; 1999 ; 2000 if (optionOff) {; 2001 // remove points before the low cutoff; 2002 Int_t ip;; 2003 for (ip=point1; ip<=nbpoints; ip++) {; 2004 if (gyworkl[ip] != ywmin) {; 2005 point1 = ip;; 2006 break;; 2007 }; 2008 }; 2009 // remove points after the high cutoff; 2010 Int_t point2 = nbpoints;; 2011 for (ip=point2; ip>=point1; ip--) {; 2012 if (gyworkl[ip] != ywmin) {; 2013 point2 = ip;; 2014 break;; 2015 }; 2016 }; 2017 nbpoints = point2-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:73221,ux,uxmin-rounding,73221,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['ux'],['uxmin-rounding']
Usability,"aw or deriving from them).; 236 ; 237bool TSelector::IsStandardDraw(const char *selec); 238{; 239 // Make sure we have a name; 240 if (!selec) {; 241 ::Info(""TSelector::IsStandardDraw"",; 242 ""selector name undefined - do nothing"");; 243 return false;; 244 }; 245 ; 246 bool stdselec = false;; 247 if (!strchr(selec, '.')) {; 248 if (strstr(selec, ""TSelectorDraw"")) {; 249 stdselec = true;; 250 } else {; 251 TClass *cl = TClass::GetClass(selec);; 252 if (cl && (cl->InheritsFrom(""TProofDraw"") ||; 253 cl->InheritsFrom(""TSelectorDraw""))); 254 stdselec = true;; 255 }; 256 }; 257 ; 258 // We are done; 259 return stdselec;; 260}; 261 ; 262////////////////////////////////////////////////////////////////////////////////; 263/// Imports the content of 'output' in the internal output list. Existing content; 264/// in the output list is discarded (unless found also in 'output').; 265/// In particular, if 'output' is nullptr or empty, reset the internal list.; 266/// On return, the content of 'output' is cleared to avoid double deletion issues.; 267/// (The caller is responsible of 'output' as container: its content is transferred; 268/// under the selector ownership).; 269 ; 270void TSelector::ImportOutput(TList *output) {; 271 ; 272 // Reset the list, if required; 273 if (!output || output->GetSize() <= 0) {; 274 fOutput->Delete();; 275 return;; 276 }; 277 ; 278 TObject *o;; 279 ; 280 // Remove from new list objects already existing locally; 281 TIter nxexo(fOutput);; 282 while ((o = nxexo())) {; 283 if (output->FindObject(o)) output->Remove(o);; 284 }; 285 ; 286 // Transfer remaining objects; 287 TIter nxo(output);; 288 while ((o = nxo())) {; 289 fOutput->Add(o);; 290 }; 291 ; 292 // Cleanup original list; 293 output->SetOwner(false);; 294 output->Clear(""nodelete"");; 295 ; 296 // Done; 297 return;; 298}; 299 ; 300////////////////////////////////////////////////////////////////////////////////; 301/// This method is called before processing entry. It is the user's responsibility t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8cxx_source.html:10544,clear,cleared,10544,doc/master/TSelector_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8cxx_source.html,1,['clear'],['cleared']
Usability,"aw(""SPEC c1(3) dm(0,1) a(30,30,0)"");; The operator “lp(x,y,z)” sets the light position. In Light and LightHeight display modes groups the color palette is calculated according to the fictive light source position in 3-d space. Using this function one can change the source’s position and thus achieve various graphical effects. This function does not apply for Simple and Height display modes groups. Default is: lp(1000,1000,100) .; The operator “s(shading,shadow)” allows to set the shading. The surface picture is composed of triangles. The edges of the neighboring triangles can be smoothed (shaded). The shadow can be painted as well. The function does not apply on Simple display modes group. The possible values for shading are:. 0 = Not Shaded,; 1 = Shaded. The possible values for shadow are:. 0 = Shadows are not painted,; 1 = Shadows are painted. Default values: s(1,0) .; The operator “b(bezier)” sets the Bezier smoothing. For Simple display modes group and for Grid, LinesX and LinesY display modes one can smooth data using Bezier smoothing algorithm. The function does not apply on other display modes groups and display modes. Possible values are: 0 = No bezier smoothing, 1 = Bezier smoothing. Default value is: b(0).; The operator “cw(width)” sets the contour width. This function applies only on for the Contours display mode. One can change the width between horizontal slices and thus their density. Default value: cw(50) .; The operator “lhw(weight)” sets the light height weight. For LightHeight display modes group one can change the weight between both shading algorithms. The function does not apply on other display modes groups. Default value is lhw(0.5) .; The operator “cm(enable,color,width,height,style)” allows to draw a marker on each node. In addition to the surface drawn using any above given algorithm one can display channel marks. One can control the color as well as the width, height (in pixels) and the style of the marks. The parameter enable can be set to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:106378,Simpl,Simple,106378,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simple']
Usability,"aw).; Float_tTGLSceneInfo::fOLLineWOptional override of scene outline line-width; TGLSceneBase*TGLSceneInfo::fScene; UInt_tTGLSceneInfo::fSceneStampScene's time-stamp on last update.; Short_tTGLSceneInfo::fStyleOptional override of scene style; TGLBoundingBoxTGLSceneInfo::fTransformedBBox; Bool_tTGLSceneInfo::fUpdateTimeoutedSet if update was interrupted.; Bool_tTGLSceneInfo::fViewCheckViewer side check if render is necessary.; TGLViewerBase*TGLSceneInfo::fViewer; Float_tTGLSceneInfo::fWFLineWOptional override of scene wire-frame line-width. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSceneInfo(TGLViewerBase* view = 0, TGLScene* scene = 0); Constructor. ~TSceneInfo(); Destructor. void ClearDrawElementVec(TGLScene::DrawElementVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearDrawElementPtrVec(TGLScene::DrawElementPtrVec_t& vec, Int_t maxSize); Clear given vec and if it grew too large compared to the size of; shape-of-interest also resize it. void ClearAfterRebuild(); Clear DrawElementVector fVisibleElement and optionally resize it; so that it doesn't take more space then required by all the; elements in the scene's draw-list. void ClearAfterUpdate(); Clear DrawElementPtrVectors and optionally resize them so that; they don't take more space then required by all the elements in; the scene's draw-list. void Lodify(TGLRnrCtx& ctx); Quantize LODs for gice render-context. void PreDraw(); Prepare for drawing - fill DrawElementPtrVectors from the; contents of fVisibleElements if there was some change. void PostDraw(); Clean-up after drawing, nothing to be done here. void ResetDrawStats(); Reset draw statistics. void UpdateDrawStats(const TGLPhysicalShape& shape, Short_t lod); Update draw stats, for newly drawn 'shape'. void DumpDrawStats(); Output draw stats to Info stream. TGLScene& operator=(const TGLScene::TSceneInfo& ). Bool_t CmpDrawEle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene__TSceneInfo.html:6435,Clear,ClearDrawElementPtrVec,6435,root/html602/TGLScene__TSceneInfo.html,https://root.cern,https://root.cern/root/html602/TGLScene__TSceneInfo.html,4,['Clear'],"['Clear', 'ClearDrawElementPtrVec']"
Usability,"aw.C 1-D histogram drawing options ;  h2proj.C;  hbars.C Example of bar charts with 1-d histograms ;  histpalettecolor.C Palette coloring for histogram is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color) ;  hksimple.C Illustrates the advantages of a TH1K histogram ;  hlabels1.C 1-D histograms with alphanumeric labels ;  hlabels2.C 2-D histograms with alphanumeric labels ;  hstack.C Example of stacked histograms: class THStack ;  hsum.C Histograms filled and drawn in a loop ;  hsumTimer.C Demo of Timers ;  legendautoplaced.C The legend can be placed automatically in the current pad in an empty space found at painting time ;  logscales.C Draw parametric functions with log scales ;  multicolor.C Use a THStack to show a 2-D hist with cells with different colors ;  ratioplot1.C Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot1.py Example creating a simple ratio plot of two histograms using the pois division option ;  ratioplot2.C Example of a fit residual plot ;  ratioplot2.py Example of a fit residual plot ;  ratioplot3.C Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot3.py Example which shows how you can get the graph of the lower plot and set the y axis range for it ;  ratioplot4.C Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot4.py Example that shows custom dashed lines on the lower plot, specified by a vector of floats ;  ratioplot5.C Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot5.py Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors ;  ratioplot6.C Example showing a fit residual plot, where the separation margin has been set to 0 ;  ratioplot6.py Exa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:125485,simpl,simple,125485,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['simpl'],['simple']
Usability,"aw.h. Constructor & Destructor Documentation. ◆ TProofDraw(). TProofDraw::TProofDraw ; (; ). Constructor. ; Definition at line 113 of file TProofDraw.cxx. ◆ ~TProofDraw(). TProofDraw::~TProofDraw ; (; ). override . Destructor. ; Definition at line 132 of file TProofDraw.cxx. Member Function Documentation. ◆ Begin(). void TProofDraw::Begin ; (; TTree * ; tree). overridevirtual . Executed by the client before processing. ; Reimplemented from TSelector.; Reimplemented in TProofDrawHist, TProofDrawProfile, and TProofDrawProfile2D.; Definition at line 172 of file TProofDraw.cxx. ◆ Class(). static TClass * TProofDraw::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofDraw::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofDraw::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 93 of file TProofDraw.h. ◆ ClearFormula(). void TProofDraw::ClearFormula ; (; ). protectedvirtual . Delete internal buffers. ; Definition at line 294 of file TProofDraw.cxx. ◆ CompileVariables(). Bool_t TProofDraw::CompileVariables ; (; ). protectedvirtual . Compiles each variable from fTreeDrawArgsParser for the tree fTree. ; Return kFALSE if any of the variable is not compilable. ; Definition at line 403 of file TProofDraw.cxx. ◆ DeclFileName(). static const char * TProofDraw::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 93 of file TProofDraw.h. ◆ DefVar(). virtual void TProofDraw::DefVar ; (; ). protectedpure virtual . Implemented in TProofDrawHist, TProofDrawEventList, TProofDrawEntryList, TProofDrawProfile, TProofDrawProfile2D, TProofDrawGraph, TProofDrawPolyMarker3D, TProofDrawListOfGraphs, and TProofDrawListOfPolyMarkers3D. ◆ DoFill(). virtual void TProofDraw::DoFill ; (; Long64_t ; entry, . Double_t ; w, . const Double_t * ; v . ). protectedpure virtual . Implemented in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDraw.html:15250,Clear,ClearFormula,15250,doc/master/classTProofDraw.html,https://root.cern,https://root.cern/doc/master/classTProofDraw.html,1,['Clear'],['ClearFormula']
Usability,"awData();; 2098 return true;; 2099}; 2100 ; 2101/////////////////////////////////////////////////////////////////////////////////; 2102/// Change configuration by client; 2103/// Returns true if any parameter was really changed; 2104 ; 2105bool RGeomDescription::ChangeConfiguration(const std::string &json); 2106{; 2107 auto cfg = TBufferJSON::FromJSON<RGeomConfig>(json);; 2108 if (!cfg); 2109 return false;; 2110 ; 2111 TLockGuard lock(fMutex);; 2112 ; 2113 auto json1 = TBufferJSON::ToJSON(cfg.get());; 2114 auto json2 = TBufferJSON::ToJSON(&fCfg);; 2115 ; 2116 if (json1 == json2); 2117 return false;; 2118 ; 2119 fCfg = *cfg; // use assign; 2120 ; 2121 ClearDrawData();; 2122 ; 2123 return true;; 2124}; 2125 ; 2126/////////////////////////////////////////////////////////////////////////////////; 2127/// Change search query and belongs to it json string; 2128/// Returns true if any parameter was really changed; 2129 ; 2130bool RGeomDescription::SetSearch(const std::string &query, const std::string &json); 2131{; 2132 TLockGuard lock(fMutex);; 2133 ; 2134 bool changed = (fSearch != query) || (fSearchJson != json);; 2135 fSearch = query;; 2136 fSearchJson = json;; 2137 return changed;; 2138}; 2139 ; 2140/////////////////////////////////////////////////////////////////////////////////; 2141/// Save geometry configuration as C++ macro; 2142 ; 2143void RGeomDescription::SavePrimitive(std::ostream &fs, const std::string &name); 2144{; 2145 std::string prefix = "" "";; 2146 ; 2147 if (fCfg.vislevel != 0); 2148 fs << prefix << name << ""SetVisLevel("" << fCfg.vislevel << "");"" << std::endl;; 2149 if (fCfg.maxnumnodes != 0); 2150 fs << prefix << name << ""SetMaxVisNodes("" << fCfg.maxnumnodes << "");"" << std::endl;; 2151 if (fCfg.maxnumfaces != 0); 2152 fs << prefix << name << ""SetMaxVisFaces("" << fCfg.maxnumfaces << "");"" << std::endl;; 2153 if (fCfg.showtop); 2154 fs << prefix << name << ""SetTopVisible(true);"" << std::endl;; 2155 if (fCfg.build_shapes != 1); 2156 fs << prefix << name <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:63884,Clear,ClearDrawData,63884,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['Clear'],['ClearDrawData']
Usability,"awable(). void TPadPainter::CopyDrawable ; (; Int_t ; device, . Int_t ; px, . Int_t ; py . ). overridevirtual . Copy a gVirtualX pixmap. ; Implements TVirtualPadPainter.; Definition at line 324 of file TPadPainter.cxx. ◆ CreateDrawable(). Int_t TPadPainter::CreateDrawable ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Create a gVirtualX Pixmap. ; Implements TVirtualPadPainter.; Definition at line 306 of file TPadPainter.cxx. ◆ DeclFileName(). static const char * TPadPainter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 109 of file TPadPainter.h. ◆ DestroyDrawable(). void TPadPainter::DestroyDrawable ; (; Int_t ; device). overridevirtual . Close the current gVirtualX pixmap. ; Implements TVirtualPadPainter.; Definition at line 333 of file TPadPainter.cxx. ◆ DrawBox(). void TPadPainter::DrawBox ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . EBoxMode ; mode . ). overridevirtual . Paint a simple box. ; Implements TVirtualPadPainter.; Definition at line 390 of file TPadPainter.cxx. ◆ DrawFillArea() [1/2]. void TPadPainter::DrawFillArea ; (; Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 411 of file TPadPainter.cxx. ◆ DrawFillArea() [2/2]. void TPadPainter::DrawFillArea ; (; Int_t ; n, . const Float_t * ; x, . const Float_t * ; y . ). overridevirtual . Paint filled area. ; Implements TVirtualPadPainter.; Definition at line 425 of file TPadPainter.cxx. ◆ DrawLine(). void TPadPainter::DrawLine ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). overridevirtual . Paint a simple line. ; Implements TVirtualPadPainter.; Definition at line 360 of file TPadPainter.cxx. ◆ DrawLineNDC(). void TPadPainter::DrawLineNDC ; (; Double_t ; u1, . Double_t ; v1, . Double_t ; u2, . Double_t ; v2 . ). overridevirtual . Paint a simple line in normalized coordinates. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPadPainter.html:8204,simpl,simple,8204,doc/master/classTPadPainter.html,https://root.cern,https://root.cern/doc/master/classTPadPainter.html,1,['simpl'],['simple']
Usability,"ax). pure virtual . Implemented in TProofPlayer. ◆ SetMerging(). virtual void TVirtualProofPlayer::SetMerging ; (; Bool_t ; on = kTRUE). pure virtual . Implemented in TProofPlayerRemote, and TProofPlayer. ◆ SetOutputFilePath(). virtual void TVirtualProofPlayer::SetOutputFilePath ; (; const char * ; fp). pure virtual . Implemented in TProofPlayer. ◆ SetStopTimer(). virtual void TVirtualProofPlayer::SetStopTimer ; (; Bool_t ; on = kTRUE, . Bool_t ; abort = kFALSE, . Int_t ; timeout = 0 . ). pure virtual . Implemented in TProofPlayer. ◆ StopProcess(). virtual void TVirtualProofPlayer::StopProcess ; (; Bool_t ; abort, . Int_t ; timeout = -1 . ). pure virtual . Implemented in TProofPlayer, and TProofPlayerRemote. ◆ StoreFeedback(). virtual void TVirtualProofPlayer::StoreFeedback ; (; TObject * ; slave, . TList * ; out . ). pure virtual . Implemented in TProofPlayer, TProofPlayerRemote, and TProofPlayerLite. ◆ StoreOutput(). virtual void TVirtualProofPlayer::StoreOutput ; (; TList * ; out). pure virtual . Implemented in TProofPlayer, and TProofPlayerRemote. ◆ Streamer(). void TVirtualProofPlayer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TVirtualProofPlayer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 142 of file TVirtualProofPlayer.h. ◆ UpdateAutoBin(). virtual void TVirtualProofPlayer::UpdateAutoBin ; (; const char * ; name, . Double_t & ; xmin, . Double_t & ; xmax, . Double_t & ; ymin, . Double_t & ; ymax, . Double_t & ; zmin, . Double_t & ; zmax . ). pure virtual . Implemented in TProofPlayer. ◆ UpdateProgressInfo(). virtual void TVirtualProofPlayer::UpdateProgressInfo ; (; ). pure virtual . Implemented in TProofPlayer. proof/proof/inc/TVirtualProofPlayer.h; proof/proof/src/TVirtualProofPlayer.cxx. TVirtualProofPlayer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualProofPlayer.html:30668,Guid,Guide,30668,doc/master/classTVirtualProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTVirtualProofPlayer.html,1,['Guid'],['Guide']
Usability,"ax, Double_t tmin, Double_t tmax); TGraphPolargram Constructor. TGraphPolargram(const char* name = """"); Short constructor used in the case of a spider plot. ~TGraphPolargram(); TGraphPolargram destructor. void ChangeRangePolar(Double_t tmin, Double_t tmax); Set the Polar range.; tmin is the start number.; tmax is the end number. Int_t DistancetoPrimitive(Int_t px, Int_t py); Everything within the circle belongs to the TGraphPolargram. void Draw(Option_t* options = """"); Draw Polargram. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Indicate that there is something to click here. Int_t FindAlign(Double_t angle); Find the alignement rule to apply for TText::SetTextAlign(Short_t). Double_t FindTextAngle(Double_t theta); Determine the orientation of the polar labels according to their angle. void Init(); Initiallize some of the fields of TGraphPolargram. void Paint(Option_t* options = """"); Paint TGraphPolargram. void PaintCircle(Double_t x, Double_t y, Double_t r, Double_t phimin, Double_t phimax, Double_t theta); This is simplifed from TEllipse::PaintEllipse.; Draw this ellipse with new coordinates. void PaintPolarDivisions(Bool_t noLabels); Draw Polar divisions.; Check for editable pad or create default. void PaintRadialDivisions(Bool_t drawaxis); Paint radial divisions.; Check for editable pad or create default. void ReduceFraction(Int_t Num, Int_t Denom, Int_t& rnum, Int_t& rden); Reduce fractions. void SetAxisAngle(Double_t angle = 0); Set axis angle. void SetNdivPolar(Int_t Ndiv = 508); Set the number of Polar divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major Polar divisions.; j sets the minor Polar divisions. void SetNdivRadial(Int_t Ndiv = 508); Set the number of radial divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major radial divisions.; j sets the minor radial divisions. void SetPolarLabel(Int_t div, const TString& label); Set some specified polar labels, used in the case of a spider plot. void SetPolarLabelColor(Color_t tco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphPolargram.html:11759,simpl,simplifed,11759,root/html528/TGraphPolargram.html,https://root.cern,https://root.cern/root/html528/TGraphPolargram.html,6,['simpl'],['simplifed']
Usability,"aximum phi; Float_tfPhiminminimum phi; Float_tfRmaxmaximum radius; Float_tfRminminimum radius; Float_tfThemaxmaximum theta; Float_tfTheminminimum theta; TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag; Float_tfaXCoeff along Ox; Float_tfaYCoeff along Oy; Float_tfaZCoeff along Oz. private:. Float_tfAspectRatioRelation between asumth and grid size (by default 1.0); Double_t*fCoTab! Table of cos(fPhimin) .... cos(Phi); Double_t*fCoThetaTab! Table of sin(gThemin) .... cos(Theta); Int_tfNdivnumber of divisions; Int_tfNz! number of sections; Double_t*fSiTab! Table of sin(fPhimin) .... sin(Phi). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSPHE(); SPHE shape default constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t themin, Float_t themax, Float_t phimin, Float_t phimax); SPHE shape normal constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmax); SPHE shape ""simplified"" constructor. ~TSPHE(); SPHE shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a PSPHE. Compute the closest distance of approach from point px,py to each; computed outline point of the PSPHE (stolen from PCON). void SetEllipse(const Float_t* factors); Set ellipse. void SetNumberOfDivisions(Int_t p); Set number of divisions. void SetPoints(Double_t* points) const; Create SPHE points. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). void MakeTableOfCoSin() const; Make table of sine and cosine. void Streamer(TBuffer& ); Stream a class object. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. TSPHE(). Float_t GetRmin() const; {return fRmin;}. Float_t GetRmax() const; {return fRmax;}. Float_t GetThemin() const; {return fThemin;}. Float_t GetThemax() const; {return fThemax;}. Float_t GetPhimin() const; {return fPhimin;}. Float",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSPHE.html:9447,simpl,simplified,9447,root/html534/TSPHE.html,https://root.cern,https://root.cern/root/html534/TSPHE.html,1,['simpl'],['simplified']
Usability,"aximum phi; Float_tfPhiminminimum phi; Float_tfRmaxmaximum radius; Float_tfRminminimum radius; Float_tfThemaxmaximum theta; Float_tfTheminminimum theta; TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag; Float_tfaXCoeff along Ox; Float_tfaYCoeff along Oy; Float_tfaZCoeff along Oz. private:. Float_tfAspectRatioRelation between asumth and grid size (by default 1.0); Double_t*fCoTab! Table of cos(fPhimin) .... cos(Phi); Double_t*fCoThetaTab! Table of sin(gThemin) .... cos(Theta); Int_tfNdivnumber of divisions; Int_tfNz! number of sections; Double_t*fSiTab! Table of sin(fPhimin) .... sin(Phi). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSPHE(); SPHE shape default constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t themin, Float_t themax, Float_t phimin, Float_t phimax); SPHE shape normal constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmax); SPHE shape ""simplified"" constructor. ~TSPHE(); SPHE shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a PSPHE. Compute the closest distance of approach from point px,py to each; computed outline point of the PSPHE (stolen from PCON). void SetEllipse(const Float_t* factors); Set ellipse. void SetNumberOfDivisions(Int_t p); Set number of divisions. void SetPoints(Double_t* points) const; Create SPHE points. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). void MakeTableOfCoSin() const; Make table of sine and cosine. void Streamer(TBuffer& b); Stream a class object. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. TSPHE(). Float_t GetRmin() const; {return fRmin;}. Float_t GetRmax() const; {return fRmax;}. Float_t GetThemin() const; {return fThemin;}. Float_t GetThemax() const; {return fThemax;}. Float_t GetPhimin() const; {return fPhimin;}. Floa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSPHE.html:9213,simpl,simplified,9213,root/html528/TSPHE.html,https://root.cern,https://root.cern/root/html528/TSPHE.html,3,['simpl'],['simplified']
Usability,"axis; static TStringTVirtualFitter::fgDefaultname of the default fitter (""Minuit"",""Fumili"",etc); static Double_tTVirtualFitter::fgErrorDefError definition (default=1); static TVirtualFitter*TVirtualFitter::fgFitterCurrent fitter (default TFitter); static Int_tTVirtualFitter::fgMaxiterMaximum number of iterations; static Int_tTVirtualFitter::fgMaxparMaximum number of fit parameters for current fitter; static Double_tTVirtualFitter::fgPrecisionmaximum precision. private:. Double_t*fCovarCovariance matrix; TMinuit*fMinuitpointer to the TMinuit object; Int_tfNlogNumber of elements in fSunLog; Double_t*fSumLogSum of logs (array of fNlog elements). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitter(Int_t maxpar = 25); default constructor*-*-; *-* ===================. ~TFitter(); default destructor*-*-*-; *-* ==================. Double_t Chisquare(Int_t npar, Double_t* params) const; return a chisquare equivalent. void Clear(Option_t* option = """"); reset the fitter environment. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void FixParameter(Int_t ipar); Fix parameter ipar. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.94999999999999996); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at which to compute the intervals, for ndim > 1; should be in order: (x0,y0, x1, y1, ... xn, yn); ci - computed intervals are returned in this array; cl - confidence level, default=0.95; NOTE, that the intervals are approximate for nonlinear(in parameters) models. void GetConfidenceIntervals(TObject* obj, Double_t cl = 0.94999999999999996); Computes confidence intervals at level cl. Default is 0.95; The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3.; For Gra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitter.html:11526,Clear,Clear,11526,root/html602/TFitter.html,https://root.cern,https://root.cern/root/html602/TFitter.html,2,['Clear'],['Clear']
Usability,"axis; static TStringTVirtualFitter::fgDefaultname of the default fitter (""Minuit"",""Fumili"",etc); static Double_tTVirtualFitter::fgErrorDefError definition (default=1); static TVirtualFitter*TVirtualFitter::fgFitterCurrent fitter (default TFitter); static Int_tTVirtualFitter::fgMaxiterMaximum number of iterations; static Int_tTVirtualFitter::fgMaxparMaximum number of fit parameters for current fitter; static Double_tTVirtualFitter::fgPrecisionmaximum precision. private:. Double_t*fCovarCovariance matrix; TMinuit*fMinuitpointer to the TMinuit object; Int_tfNlogNumber of elements in fSunLog; Double_t*fSumLogSum of logs (array of fNlog elements). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitter(Int_t maxpar = 25); default constructor*-*-; *-* ===================. ~TFitter(); default destructor*-*-*-; *-* ==================. Double_t Chisquare(Int_t npar, Double_t* params) const; return a chisquare equivalent. void Clear(Option_t* option = """"); reset the fitter environment. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs); Execute a fitter command;; command : command string; args : list of nargs command arguments. void FixParameter(Int_t ipar); Fix parameter ipar. void GetConfidenceIntervals(Int_t n, Int_t ndim, const Double_t* x, Double_t* ci, Double_t cl = 0.95); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at which to compute the intervals, for ndim > 1; should be in order: (x0,y0, x1, y1, ... xn, yn); ci - computed intervals are returned in this array; cl - confidence level, default=0.95; NOTE, that the intervals are approximate for nonlinear(in parameters) models. void GetConfidenceIntervals(TObject* obj, Double_t cl = 0.95); Computes confidence intervals at level cl. Default is 0.95; The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3.; For Graphs, confidence intervals are ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitter.html:10889,Clear,Clear,10889,root/html528/TFitter.html,https://root.cern,https://root.cern/root/html528/TFitter.html,4,['Clear'],['Clear']
Usability,"axisTAxis * GetYaxis()Definition TH1.h:325; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::SetMinimumvirtual void SetMinimum(Double_t minimum=-1111)Definition TH1.h:405; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::SetBorderSizevoid SetBorderSize(Short_t bordersize) overrideDefinition TPad.h:326; TPad::SetFillStylevoid SetFillStyle(Style_t fstyle) overrideOverride TAttFill::FillStyle for TPad because we want to handle style=0 as style 4000.Definition TPad.cxx:6074; TPad::GetAbsWNDCDouble_t GetAbsWNDC() const overrideDefinition TPad.h:222; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPad::SetBorderModevoid SetBorderMode(Short_t bordermode) overrideDefinition TPad.h:325; TPad::GetAbsHNDCDouble_t GetAbsHNDC() const overrideDefinition TPad.h:223; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TTextBase class for several text objects.Definition TText.h:22; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMath::Cconstexpr Double_t C()Velocity of light in .Definition TMath.h:114; AuthorOlivier Couet ; Definition in file canvas2.C. tutorialsgraphicscanvas2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/canvas2_8C.html:9970,Guid,Guide,9970,doc/master/canvas2_8C.html,https://root.cern,https://root.cern/doc/master/canvas2_8C.html,1,['Guid'],['Guide']
Usability,"ay improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete(). void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClonesArray.html:14528,Clear,Clear,14528,root/html526/TClonesArray.html,https://root.cern,https://root.cern/root/html526/TClonesArray.html,2,['Clear'],['Clear']
Usability,"ay improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object da",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:17181,Clear,Clear,17181,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,4,['Clear'],['Clear']
Usability,"ay object (if one); Short_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Short_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafS(); Default constructor for LeafS*-*-*-*-*-*-*-*-; *-* ============================. TLeafS(TBranch* parent, const char* name, const char* type); Create a LeafS*-*-; *-* ==============; -. ~TLeafS(); Default destructor for a LeafS*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s); read a integer integer from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. TLeafS(). Int_t GetMaximum() const; { return fMaximum; }. Int_t GetMinimum() const; { return fMinimum; }. void * GetValuePointer() const; {return fValue;}. void SetMaximum(Short_t max); { f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TLeafS.html:8523,simpl,simple,8523,root/html532/TLeafS.html,https://root.cern,https://root.cern/root/html532/TLeafS.html,1,['simpl'],['simple']
Usability,"ay object (if one); Short_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Short_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafS(); Default constructor for LeafS*-*-*-*-*-*-*-*-; *-* ============================. TLeafS(TBranch* parent, const char* name, const char* type); Create a LeafS*-*-; *-* ==============; -. ~TLeafS(); Default destructor for a LeafS*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s); read a integer integer from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. TLeafS(). void * GetValuePointer() const; {return fValue;}. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TLeafS.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLeafS.html:8394,simpl,simple,8394,root/html528/TLeafS.html,https://root.cern,https://root.cern/root/html528/TLeafS.html,2,['simpl'],['simple']
Usability,"ay object (if one); Short_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Short_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafS(); Default constructor for LeafS*-*-*-*-*-*-*-*-; *-* ============================. TLeafS(TBranch* parent, const char* name, const char* type); Create a LeafS*-*-; *-* ==============; -. ~TLeafS(); Default destructor for a LeafS*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a integer integer from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. TLeafS(). Int_t GetMaximum() const; { return fMaximum; }. Int_t GetMinimum() const; { return fMinimum; }. void * GetValuePointer() const; {return fValue;}. void SetMaxim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLeafS.html:8686,simpl,simple,8686,root/html534/TLeafS.html,https://root.cern,https://root.cern/root/html534/TLeafS.html,1,['simpl'],['simple']
Usability,"ay object (if one); Short_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Short_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafS(); Default constructor for LeafS*-*-*-*-*-*-*-*-; *-* ============================. TLeafS(TBranch* parent, const char* name, const char* type); Create a LeafS*-*-; *-* ==============; -. ~TLeafS(); Default destructor for a LeafS*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a integer integer from std::istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. TLeafS(). Int_t GetMaximum() const; { return fMaximum; }. Int_t GetMinimum() const; { return fMinimum; }. void * GetValuePointer() const; {return fValue;}. void Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLeafS.html:9178,simpl,simple,9178,root/html602/TLeafS.html,https://root.cern,https://root.cern/root/html602/TLeafS.html,2,['simpl'],['simple']
Usability,"ay() [1/2]. template<class Engine > . void TRandomGen< Engine >::RndmArray ; (; Int_t ; n, . Double_t * ; array . ). inlineoverridevirtual . Return an array of n random numbers uniformly distributed in ]0,1]. ; Reimplemented from TRandom.; Definition at line 66 of file TRandomGen.h. ◆ RndmArray() [2/2]. template<class Engine > . void TRandomGen< Engine >::RndmArray ; (; Int_t ; n, . Float_t * ; array . ). inlineoverridevirtual . Return an array of n random numbers uniformly distributed in ]0,1]. ; Reimplemented from TRandom.; Definition at line 63 of file TRandomGen.h. ◆ SetSeed(). template<class Engine > . void TRandomGen< Engine >::SetSeed ; (; ULong_t ; seed = 0). inlineoverridevirtual . Set the random generator seed. ; Note that default value is zero, which is different than the default value used when constructing the class. If the seed is zero the seed is set to a random value which in case of TRandom depends on the lowest 4 bytes of TUUID The UUID will be identical if SetSeed(0) is called with time smaller than 100 ns Instead if a different generator implementation is used (TRandom1, 2 or 3) the seed is generated using a 128 bit UUID. This results in different seeds and then random sequence for every SetSeed(0) call. ; Reimplemented from TRandom.; Definition at line 69 of file TRandomGen.h. ◆ Streamer(). template<class Engine > . void TRandomGen< Engine >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TRandom. ◆ StreamerNVirtual(). template<class Engine > . void TRandomGen< Engine >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 73 of file TRandomGen.h. Member Data Documentation. ◆ fEngine. template<class Engine > . Engine TRandomGen< Engine >::fEngine. protected . Definition at line 52 of file TRandomGen.h. math/mathcore/inc/TRandomGen.h. TRandomGen. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandomGen.html:19273,Guid,Guide,19273,doc/master/classTRandomGen.html,https://root.cern,https://root.cern/doc/master/classTRandomGen.html,1,['Guid'],['Guide']
Usability,"ay.h; TAttFillFill Area Attributes class.Definition TAttFill.h:19; TCollection::SetOwnervirtual void SetOwner(Bool_t enable=kTRUE)Set whether this collection is the owner (enable==true) of its content.Definition TCollection.cxx:746; TGDMLMatrixThis class is used in the process of reading and writing the GDML ""matrix"" tag.Definition TGDMLMatrix.h:33; TGeoBatemanSol::ConcentrationDouble_t Concentration(Double_t time) constFind concentration of the element at a given time.Definition TGeoElement.cxx:1601; TGeoElementRNClass representing a radionuclidevoid TGeoManager::SetDefaultRootUnits() { if ( fgDefaultUnits == kRo...Definition TGeoElement.h:132; TGeoElementRN::FillPopulationvoid FillPopulation(TObjArray *population, Double_t precision=0.001, Double_t factor=1.)Fills the input array with the set of RN elements resulting from the decay of this one.Definition TGeoElement.cxx:550; TGeoElementRN::RatioTGeoBatemanSol * Ratio() constDefinition TGeoElement.h:188; TGeoElementRN::ResetRatiovoid ResetRatio()Clears the existing ratio.Definition TGeoElement.cxx:695; TGeoElementTableTable of elements.Definition TGeoElement.h:398; TGeoElementTable::GetElementTGeoElement * GetElement(Int_t z)Definition TGeoElement.h:435; TGeoElementTable::GetElementsRNTObjArray * GetElementsRN() constDefinition TGeoElement.h:438; TGeoElementTable::GetNelementsInt_t GetNelements() constDefinition TGeoElement.h:442; TGeoElementBase class for chemical elements.Definition TGeoElement.h:36; TGeoElement::GetSpecificActivityvirtual Double_t GetSpecificActivity() constDefinition TGeoElement.h:79; TGeoElement::ADouble_t A() constDefinition TGeoElement.h:71; TGeoElement::SetDefinedvoid SetDefined(Bool_t flag=kTRUE)Definition TGeoElement.h:85; TGeoElement::IsRadioNuclidevirtual Bool_t IsRadioNuclide() constDefinition TGeoElement.h:82; TGeoElement::NeffDouble_t Neff() constReturns effective number of nucleons.Definition TGeoElement.cxx:294; TGeoElement::ZInt_t Z() constDefinition TGeoElement.h:68; TGeoElement::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMaterial_8cxx_source.html:53617,Clear,Clears,53617,doc/master/TGeoMaterial_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMaterial_8cxx_source.html,1,['Clear'],['Clears']
Usability,"ay::GetSize ; (; ); const. inline . Definition at line 47 of file TArray.h. ◆ IsA(). virtual TClass * TArray::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented in TArrayC, TArrayD, TArrayF, TArrayI, TArrayL, TArrayL64, TArrayS, TGLTH3Composition, TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 58 of file TArray.h. ◆ operator=(). TArray & TArray::operator= ; (; const TArray & ; rhs). inline . Definition at line 43 of file TArray.h. ◆ OutOfBoundsError(). Bool_t TArray::OutOfBoundsError ; (; const char * ; where, . Int_t ; i . ); const. protected . Generate an out-of-bounds error. Always returns false. ; Definition at line 30 of file TArray.cxx. ◆ ReadArray(). TArray * TArray::ReadArray ; (; TBuffer & ; b, . const TClass * ; clReq . ). static . Read TArray object from buffer. ; Simplified version of TBuffer::ReadObject (does not keep track of multiple references to same array). ; Definition at line 41 of file TArray.cxx. ◆ Set(). virtual void TArray::Set ; (; Int_t ; n). pure virtual . Implemented in TArrayC, TArrayD, TArrayF, TArrayI, TArrayL, TArrayL64, and TArrayS. ◆ SetAt(). virtual void TArray::SetAt ; (; Double_t ; v, . Int_t ; i . ). pure virtual . Implemented in TArrayC, TArrayD, TArrayF, TArrayI, TArrayL, TArrayL64, and TArrayS. ◆ Streamer(). virtual void TArray::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TArrayC, TArrayD, TArrayF, TArrayI, TArrayL, TArrayL64, TArrayS, TGLTH3Composition, TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D. ◆ StreamerNVirtual(). void TArray::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 58 of file TArray.h. ◆ WriteArray(). void TArray::WriteArray ; (; TBuffer & ; b, . const TArray * ; a . ). static . Write TArr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArray.html:5482,Simpl,Simplified,5482,doc/master/classTArray.html,https://root.cern,https://root.cern/doc/master/classTArray.html,1,['Simpl'],['Simplified']
Usability,"ayChannel* dc) const; Returns ENDF code of decay result. void FillPopulation(TObjArray* population, Double_t precision = 0.001, Double_t factor = 1.); Fills the input array with the set of RN elements resulting from the decay of; this one. All element in the list will contain the time evolution of their; proportion by number with respect to this element. The proportion can be; retrieved via the method TGeoElementRN::Ratio().; The precision represent the minimum cumulative branching ratio for; which decay products are still taken into account. void MakeName(Int_t a, Int_t z, Int_t iso); Generate a default name for the element. void Print(Option_t* option = """") const; Print info about the element;. TGeoElementRN * ReadElementRN(const char* record, Int_t& ndecays); Create element from line record. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive for RN elements. void AddRatio(TGeoBatemanSol& ratio); Adds a proportion ratio to the existing one. void ResetRatio(); Clears the existing ratio. TGeoElement & operator=(const TGeoElementRN& elem). Int_t ENDFCode() const; methods. { return 0;}. Bool_t IsRadioNuclide() const; {return kFALSE;}. TGeoElementRN(const TGeoElementRN& elem). Int_t ENDF(Int_t a, Int_t z, Int_t iso); {return 10000*z+10*a+iso;}. Int_t MassNo() const; {return (Int_t)fA;}. Int_t AtomicNo() const; {return fZ;}. Int_t IsoNo() const; {return fIso;}. Double_t Level() const; {return fLevel;}. Double_t MassEx() const; {return fDeltaM;}. Double_t HalfLife() const; {return fHalfLife;}. Double_t NatAbun() const; {return fNatAbun;}. const char* PJ() const; {return fTitle.Data();}. Double_t TH_F() const; {return fTH_F;}. Double_t TG_F() const; {return fTG_F;}. Double_t TH_S() const; {return fTH_S;}. Double_t TG_S() const; {return fTG_S;}. Double_t Status() const; {return fStatus;}. Bool_t Stable() const; {return !fDecays;}. TObjArray * Decays() const; {return fDecays;}. TGeoBatemanSol * Ratio() const; {return fRatio;}. » Author: Andrei Gheata 17",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoElementRN.html:9930,Clear,Clears,9930,root/html528/TGeoElementRN.html,https://root.cern,https://root.cern/root/html528/TGeoElementRN.html,6,['Clear'],['Clears']
Usability,"ayChunk* chunk = GetChunk(bin / fChunkSize);; 934 if (!chunk->fSumw2 ) {; 935 // if fSumw2 is zero GetCalculateErrors should return false; 936 if (GetCalculateErrors()) {; 937 Error(""SetBinError"", ""GetCalculateErrors() logic error!"");; 938 }; 939 Sumw2(); // enable error calculation; 940 }; 941 ; 942 (*chunk->fSumw2)[bin % fChunkSize] += e2;; 943}; 944 ; 945////////////////////////////////////////////////////////////////////////////////; 946/// Enable calculation of errors; 947 ; 948void THnSparse::Sumw2(); 949{; 950 if (GetCalculateErrors()) return;; 951 ; 952 fTsumw2 = 0.;; 953 TIter iChunk(&fBinContent);; 954 THnSparseArrayChunk* chunk = nullptr;; 955 while ((chunk = (THnSparseArrayChunk*) iChunk())); 956 chunk->Sumw2();; 957}; 958 ; 959////////////////////////////////////////////////////////////////////////////////; 960/// Clear the histogram; 961 ; 962void THnSparse::Reset(Option_t *option /*= """"*/); 963{; 964 fFilledBins = 0;; 965 fBins.Delete();; 966 fBinsContinued.Clear();; 967 fBinContent.Delete();; 968 ResetBase(option);; 969}; 970 ; d#define d(i)Definition RSha256.hxx:102; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; UChar_tunsigned char UChar_tDefinition RtypesCore.h:38; Char_tchar Char_tDefinition RtypesCore.h:37; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TAxis.h; TClass.h; TDataMember.h; TDataType.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectang",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:35843,Clear,Clear,35843,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,1,['Clear'],['Clear']
Usability,"ayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update (const TClass *oldClass, TClass *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and titl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerSTL.html:4885,Clear,Clear,4885,doc/master/classTStreamerSTL.html,https://root.cern,https://root.cern/doc/master/classTStreamerSTL.html,2,['Clear'],['Clear']
Usability,"ayT< T >::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 171 of file TNDArray.h. ◆ DeclFileName(). template<typename T > . static const char * TNDArrayT< T >::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 171 of file TNDArray.h. ◆ Init(). template<typename T > . void TNDArrayT< T >::Init ; (; Int_t ; ndim, . const Int_t * ; nbins, . bool ; addOverflow = false . ). inlineoverridevirtual . Reimplemented from TNDArray.; Definition at line 120 of file TNDArray.h. ◆ IsA(). template<typename T > . TClass * TNDArrayT< T >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNDArray.; Definition at line 171 of file TNDArray.h. ◆ operator[](). template<typename T > . TNDArrayRef< T > TNDArrayT< T >::operator[] ; (; Int_t ; idx); const. inline . Definition at line 130 of file TNDArray.h. ◆ Reset(). template<typename T > . void TNDArrayT< T >::Reset ; (; Option_t * ; = """"). inlineoverridevirtual . Implements TNDArray.; Definition at line 125 of file TNDArray.h. ◆ SetAsDouble(). template<typename T > . void TNDArrayT< T >::SetAsDouble ; (; ULong64_t ; linidx, . Double_t ; value . ). inlineoverridevirtual . Implements TNDArray.; Definition at line 158 of file TNDArray.h. ◆ Streamer(). template<typename T > . void TNDArrayT< T >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNDArray. ◆ StreamerNVirtual(). template<typename T > . void TNDArrayT< T >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 171 of file TNDArray.h. Member Data Documentation. ◆ fData. template<typename T > . std::vector<T> TNDArrayT< T >::fData. protected . Definition at line 170 of file TNDArray.h. hist/hist/inc/TNDArray.h. TNDArrayT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNDArrayT.html:14883,Guid,Guide,14883,doc/master/classTNDArrayT.html,https://root.cern,https://root.cern/doc/master/classTNDArrayT.html,1,['Guid'],['Guide']
Usability,ayer. ; Definition at line 70 of file Layer.h. ◆ fBiasGradients. template<typename Architecture_t > . Matrix_t TMVA::DNN::TLayer< Architecture_t >::fBiasGradients. private . Gradients w.r.t. the bias values of this layer. ; Definition at line 74 of file Layer.h. ◆ fDerivatives. template<typename Architecture_t > . Matrix_t TMVA::DNN::TLayer< Architecture_t >::fDerivatives. private . First fDerivatives of the activations of this layer. ; Definition at line 72 of file Layer.h. ◆ fDropoutProbability. template<typename Architecture_t > . Scalar_t TMVA::DNN::TLayer< Architecture_t >::fDropoutProbability. private . Probability that an input is active. ; Definition at line 67 of file Layer.h. ◆ fF. template<typename Architecture_t > . EActivationFunction TMVA::DNN::TLayer< Architecture_t >::fF. private . Activation function of the layer. ; Definition at line 77 of file Layer.h. ◆ fInputWidth. template<typename Architecture_t > . size_t TMVA::DNN::TLayer< Architecture_t >::fInputWidth. private . Number of neurons of the previous layer. ; Definition at line 64 of file Layer.h. ◆ fOutput. template<typename Architecture_t > . Matrix_t TMVA::DNN::TLayer< Architecture_t >::fOutput. private . Activations of this layer. ; Definition at line 71 of file Layer.h. ◆ fWeightGradients. template<typename Architecture_t > . Matrix_t TMVA::DNN::TLayer< Architecture_t >::fWeightGradients. private . Gradients w.r.t. the weights of this layer. ; Definition at line 73 of file Layer.h. ◆ fWeights. template<typename Architecture_t > . Matrix_t TMVA::DNN::TLayer< Architecture_t >::fWeights. private . The fWeights of this layer. ; Definition at line 69 of file Layer.h. ◆ fWidth. template<typename Architecture_t > . size_t TMVA::DNN::TLayer< Architecture_t >::fWidth. private . Number of neurons of this layer. ; Definition at line 65 of file Layer.h. tmva/tmva/inc/TMVA/DNN/Layer.h. TMVADNNTLayer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TLayer.html:11751,Guid,Guide,11751,doc/master/classTMVA_1_1DNN_1_1TLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TLayer.html,1,['Guid'],['Guide']
Usability,ayer. friend class TProofPlayer. friend . Definition at line 36 of file TProofOutputFile.h. ◆ TProofPlayerRemote. friend class TProofPlayerRemote. friend . Definition at line 37 of file TProofOutputFile.h. Member Data Documentation. ◆ fDataSet. TFileCollection* TProofOutputFile::fDataSet. private . Definition at line 66 of file TProofOutputFile.h. ◆ fDir. TString TProofOutputFile::fDir. private . Definition at line 53 of file TProofOutputFile.h. ◆ fFileName. TString TProofOutputFile::fFileName. private . Definition at line 55 of file TProofOutputFile.h. ◆ fIsLocal. Bool_t TProofOutputFile::fIsLocal. private . Definition at line 60 of file TProofOutputFile.h. ◆ fLocalHost. TString TProofOutputFile::fLocalHost. private . Definition at line 59 of file TProofOutputFile.h. ◆ fMerged. Bool_t TProofOutputFile::fMerged. private . Definition at line 61 of file TProofOutputFile.h. ◆ fMergeHistosOneGo. Bool_t TProofOutputFile::fMergeHistosOneGo. private . Definition at line 64 of file TProofOutputFile.h. ◆ fMerger. TFileMerger* TProofOutputFile::fMerger. private . Definition at line 67 of file TProofOutputFile.h. ◆ fOptionsAnchor. TString TProofOutputFile::fOptionsAnchor. private . Definition at line 56 of file TProofOutputFile.h. ◆ fOutputFileName. TString TProofOutputFile::fOutputFileName. private . Definition at line 57 of file TProofOutputFile.h. ◆ fRawDir. TString TProofOutputFile::fRawDir. private . Definition at line 54 of file TProofOutputFile.h. ◆ fRunType. ERunType TProofOutputFile::fRunType. private . Definition at line 62 of file TProofOutputFile.h. ◆ fTypeOpt. UInt_t TProofOutputFile::fTypeOpt. private . Definition at line 63 of file TProofOutputFile.h. ◆ fWorkerOrdinal. TString TProofOutputFile::fWorkerOrdinal. private . Definition at line 58 of file TProofOutputFile.h. proof/proof/inc/TProofOutputFile.h; proof/proof/src/TProofOutputFile.cxx. TProofOutputFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofOutputFile.html:24279,Guid,Guide,24279,doc/master/classTProofOutputFile.html,https://root.cern,https://root.cern/doc/master/classTProofOutputFile.html,1,['Guid'],['Guide']
Usability,"ayout engine as far as; possible with the text that is available. The display is updated; appropriately. void SetTableRelief(int relief); Sets relief mode of html table. void SetRuleRelief(int relief); Sets relief mode of html rule. void UnderlineLinks(int onoff); Set/reset html links underline. void SetBaseUri(const char* uri); Sets base URI. int GotoAnchor(const char* name); Go to anchor position. const char * GetUid(const char* string); Given a string, this procedure returns a unique identifier for the; string. This procedure returns a pointer to a new char string corresponding to; the ""string"" argument. The new string has a value identical to string; (strcmp will return 0), but it's guaranteed that any other calls to this; procedure with a string equal to ""string"" will return exactly the same; result (i.e. can compare pointer *values* directly, without having to; call strcmp on what they point to). void ComputeVirtualSize(); Computes virtual size of html area. void ClearGcCache(); Clear the cache of GCs. void ResetLayoutContext(); Reset the main layout context in the main widget. This happens; before we redo the layout, or just before deleting the widget. void Redraw(); This routine is invoked in order to redraw all or part of the HTML; widget. This might happen because the display has changed, or in; response to an expose event. In all cases, though, this routine; is called by an idle handler. void ScheduleRedraw(); Make sure that a call to the Redraw() routine has been queued. Bool_t HandleIdleEvent(TGIdleHandler* i); Handles idle event. void RedrawArea(int left, int top, int right, int bottom); If any part of the screen needs to be redrawn, then call this routine; with the values of a box (in window coordinates) that needs to be; redrawn. This routine will schedule an idle handler to do the redraw. The box coordinates are relative to the clipping window (fCanvas). void DrawRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); Draw region defined by [x,y] [w,h]. Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHtml.html:33340,Clear,ClearGcCache,33340,root/html528/TGHtml.html,https://root.cern,https://root.cern/root/html528/TGHtml.html,12,['Clear'],"['Clear', 'ClearGcCache']"
Usability,ayout specification option ; Definition at line 221 of file MethodANNBase.h. ◆ fNcycles. Int_t TMVA::MethodANNBase::fNcycles. protected . number of epochs to train ; Definition at line 192 of file MethodANNBase.h. ◆ fNetwork. TObjArray* TMVA::MethodANNBase::fNetwork. Definition at line 139 of file MethodANNBase.h. ◆ fNeuronInputType. TString TMVA::MethodANNBase::fNeuronInputType. protected . name of neuron input calculator class ; Definition at line 195 of file MethodANNBase.h. ◆ fNeuronType. TString TMVA::MethodANNBase::fNeuronType. protected . name of neuron activation function class ; Definition at line 194 of file MethodANNBase.h. ◆ fOutput. TActivation* TMVA::MethodANNBase::fOutput. protected . Definition at line 164 of file MethodANNBase.h. ◆ fOutputNeurons. std::vector<TNeuron*> TMVA::MethodANNBase::fOutputNeurons. private . cache this for fast access ; Definition at line 220 of file MethodANNBase.h. ◆ fRandomSeed. Int_t TMVA::MethodANNBase::fRandomSeed. protected . random seed for initial synapse weights ; Definition at line 190 of file MethodANNBase.h. ◆ fRegulatorIdx. std::vector<Int_t> TMVA::MethodANNBase::fRegulatorIdx. protected . Definition at line 169 of file MethodANNBase.h. ◆ fRegulators. std::vector<Double_t> TMVA::MethodANNBase::fRegulators. protected . Definition at line 170 of file MethodANNBase.h. ◆ frgen. TRandom3* TMVA::MethodANNBase::frgen. protected . Definition at line 166 of file MethodANNBase.h. ◆ fSynapses. TObjArray* TMVA::MethodANNBase::fSynapses. protected . Definition at line 162 of file MethodANNBase.h. ◆ fUseRegulator. bool TMVA::MethodANNBase::fUseRegulator. protected . zjh ; Definition at line 187 of file MethodANNBase.h. Libraries for TMVA::MethodANNBase:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodANNBase.h; tmva/tmva/src/MethodANNBase.cxx. TMVAMethodANNBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:46997,Guid,Guide,46997,doc/master/classTMVA_1_1MethodANNBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html,1,['Guid'],['Guide']
Usability,"ayoutHints::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; = """" . ). overridevirtual . Save XY layout hints as a C++ statement(s) on output stream. ; Reimplemented from TGLayoutHints.; Definition at line 139 of file TGXYLayout.cxx. ◆ SetFlag(). void TGXYLayoutHints::SetFlag ; (; UInt_t ; flag). inline . Definition at line 50 of file TGXYLayout.h. ◆ SetH(). void TGXYLayoutHints::SetH ; (; Double_t ; h). inline . Definition at line 49 of file TGXYLayout.h. ◆ SetW(). void TGXYLayoutHints::SetW ; (; Double_t ; w). inline . Definition at line 48 of file TGXYLayout.h. ◆ SetX(). void TGXYLayoutHints::SetX ; (; Double_t ; x). inline . Definition at line 46 of file TGXYLayout.h. ◆ SetY(). void TGXYLayoutHints::SetY ; (; Double_t ; y). inline . Definition at line 47 of file TGXYLayout.h. ◆ Streamer(). void TGXYLayoutHints::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGLayoutHints. ◆ StreamerNVirtual(). void TGXYLayoutHints::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file TGXYLayout.h. Member Data Documentation. ◆ fFlag. UInt_t TGXYLayoutHints::fFlag. protected . rubber flag ; Definition at line 26 of file TGXYLayout.h. ◆ fH. Double_t TGXYLayoutHints::fH. protected . height of widget ; Definition at line 25 of file TGXYLayout.h. ◆ fW. Double_t TGXYLayoutHints::fW. protected . width of widget ; Definition at line 24 of file TGXYLayout.h. ◆ fX. Double_t TGXYLayoutHints::fX. protected . x - position of widget ; Definition at line 22 of file TGXYLayout.h. ◆ fY. Double_t TGXYLayoutHints::fY. protected . y - position of widget ; Definition at line 23 of file TGXYLayout.h. Libraries for TGXYLayoutHints:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGXYLayout.h; gui/gui/src/TGXYLayout.cxx. TGXYLayoutHints. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGXYLayoutHints.html:18848,Guid,Guide,18848,doc/master/classTGXYLayoutHints.html,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html,1,['Guid'],['Guide']
Usability,"ays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gives an example of how to create a horizontal splitter. ;  ; file  splitterVertical.C;  This macro gives an example of how to create a vertical splitter. ;  ; file  staffTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  statusBar.C;  This macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window. ;  ; file  textEntries.C;  This macro gives an example of how to set/change text entry attributes. ;  ; file  textviewostream.C;  This macro gives an example of how to use the TGTextViewostream widget. ;  ; file  WorldMap.C;  This macro sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__gui.html:2894,simpl,simple,2894,doc/master/group__tutorial__gui.html,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html,1,['simpl'],['simple']
Usability,"b);  Constructor of matrix applying a specific operation to two prototypes. ;  ;  TMatrixT (const TMatrixTSym< Element > &another);  Copy constructor of a symmetric matrix. ;  ;  TMatrixT (EMatrixCreatorsOp1 op, const TMatrixT< Element > &prototype);  Constructor of matrix applying a specific operation to the prototype. ;  ;  TMatrixT (Int_t nrows, Int_t ncols);  Constructor for (nrows x ncols) matrix. ;  ;  TMatrixT (Int_t nrows, Int_t ncols, const Element *data, Option_t *option="""");  option=""F"": array elements contains the matrix stored column-wise like in Fortran, so a[i,j] = elements[i+no_rows*j], else it is supposed that array elements are stored row-wise a[i,j] = elements[i*no_cols+j] ;  ;  TMatrixT (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  Constructor for ([row_lwb..row_upb] x [col_lwb..col_upb]) matrix. ;  ;  TMatrixT (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, const Element *data, Option_t *option="""");  array elements are copied ;  ;  ~TMatrixT () override;  ; TClass * Class ();  ; void Clear (Option_t *="""") override;  ; Double_t Determinant () const override;  Return the matrix determinant. ;  ; void Determinant (Double_t &d1, Double_t &d2) const override;  Return the matrix determinant as d1,d2 where det = d1*TMath::Power(2.0,d2) ;  ; const TMatrixT< Element > EigenVectors (TVectorT< Element > &eigenValues) const;  Return a matrix containing the eigen-vectors ordered by descending values of Re^2+Im^2 of the complex eigen-values . ;  ; const Int_t * GetColIndexArray () const override;  ; Int_t * GetColIndexArray () override;  ; const Element * GetMatrixArray () const override;  ; Element * GetMatrixArray () override;  ; const Int_t * GetRowIndexArray () const override;  ; Int_t * GetRowIndexArray () override;  ; TMatrixT< Element > GetSub (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t *option=""S"") const;  ; TMatrixTBase< Element > & GetSub (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixT.html:3605,Clear,Clear,3605,doc/master/classTMatrixT.html,https://root.cern,https://root.cern/doc/master/classTMatrixT.html,1,['Clear'],['Clear']
Usability,"b*TGeoGedFrame::fTabtab of the ged-editor; TGeoTabManager*TGeoGedFrame::fTabMgrtab manager corresponding to ged-editor; TGTextButton*TGeoPconEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; Double_t*TGeoPconEditor::fZiInitial Z positions; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoPgonEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for polycone editor. ~TGeoPgonEditor(); Destructor. void SetModel(TObject* obj); Connect to a given pcon. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. void CreateEdges(); Create number entry for Nedges. void DoNedges(); Change number of edges. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPgonEditor.html:22158,undo,undoing,22158,root/html534/TGeoPgonEditor.html,https://root.cern,https://root.cern/root/html534/TGeoPgonEditor.html,1,['undo'],['undoing']
Usability,"b, Element *cp); 3130{; 3131 const Element *arp0 = ap; // Pointer to A[i,0];; 3132 while (arp0 < ap + na) {; 3133 const Element *brp0 = bp; // Pointer to B[j,0];; 3134 while (brp0 < bp + nb) {; 3135 const Element *arp = arp0; // Pointer to the i-th row of A, reset to A[i,0]; 3136 const Element *brp = brp0; // Pointer to the j-th row of B, reset to B[j,0]; 3137 Element cij = 0;; 3138 while (brp < brp0 + ncolsb) // Scan the i-th row of A and; 3139 cij += *arp++ * *brp++; // the j-th row of B; 3140 *cp++ = cij;; 3141 brp0 += ncolsb; // Set brp0 to the (j+1)-th row; 3142 }; 3143 arp0 += ncolsa; // Set arp0 to the (i+1)-th row; 3144 }; 3145}; 3146 ; 3147////////////////////////////////////////////////////////////////////////////////; 3148/// Stream an object of class TMatrixT.; 3149 ; 3150template <class Element>; 3151void TMatrixT<Element>::Streamer(TBuffer &R__b); 3152{; 3153 if (R__b.IsReading()) {; 3154 UInt_t R__s, R__c;; 3155 Version_t R__v = R__b.ReadVersion(&R__s, &R__c);; 3156 if (R__v > 2) {; 3157 Clear();; 3158 R__b.ReadClassBuffer(TMatrixT<Element>::Class(), this, R__v, R__s, R__c);; 3159 } else if (R__v == 2) { // process old version 2; 3160 Clear();; 3161 TObject::Streamer(R__b);; 3162 this->MakeValid();; 3163 R__b >> this->fNrows;; 3164 R__b >> this->fNcols;; 3165 R__b >> this->fNelems;; 3166 R__b >> this->fRowLwb;; 3167 R__b >> this->fColLwb;; 3168 Char_t isArray;; 3169 R__b >> isArray;; 3170 if (isArray) {; 3171 if (this->fNelems > 0) {; 3172 fElements = new Element[this->fNelems];; 3173 R__b.ReadFastArray(fElements, this->fNelems);; 3174 } else; 3175 fElements = nullptr;; 3176 }; 3177 R__b.CheckByteCount(R__s, R__c, TMatrixT<Element>::IsA());; 3178 } else { //====process old versions before automatic schema evolution; 3179 TObject::Streamer(R__b);; 3180 this->MakeValid();; 3181 R__b >> this->fNrows;; 3182 R__b >> this->fNcols;; 3183 R__b >> this->fRowLwb;; 3184 R__b >> this->fColLwb;; 3185 this->fNelems = R__b.ReadArray(fElements);; 3186 R__b.CheckByteCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:110838,Clear,Clear,110838,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,1,['Clear'],['Clear']
Usability,"b.com/root-project/root/blob/master/tree/dataframe/inc/ROOT/RTrivialDS.hxx. Note that RTrivialDS is only a demo data source implementation and superior alternatives typically exist for production use (e.g. constructing an empty RDataFrame as RDataFrame(nEntries)).; ; int df010_trivialDataSource(); {; auto nEvents = 128U;; auto d_s = ROOT::RDF::MakeTrivialDataFrame(nEvents);; ; /// Now we have a regular RDataFrame: the ingestion of data is delegated to; /// the RDataSource. At this point everything works as before.; auto h_s = d_s.Define(""x"", ""1./(1. + col0)"").Histo1D({""h_s"", ""h_s"", 128, 0, .6}, ""x"");; ; /// Now we redo the same with a RDF from scratch and we draw the two histograms; ROOT::RDataFrame d(nEvents);; ; /// This lambda redoes what the RTrivialDS provides; auto g = []() {; static ULong64_t i = 0;; return i++;; };; auto h = d.Define(""col0"", g).Define(""x"", ""1./(1. + col0)"").Histo1D({""h"", ""h"", 128, 0, .6}, ""x"");; ; auto c_s = new TCanvas();; c_s->SetLogy();; h_s->DrawClone();; ; auto c = new TCanvas();; c->SetLogy();; h->DrawClone();; ; return 0;; }; d#define d(i)Definition RSha256.hxx:102; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; h#define h(i)Definition RSha256.hxx:106; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TCanvasThe Canvas class.Definition TCanvas.h:23; ROOT::RDF::MakeTrivialDataFrameRInterface< RDFDetail::RLoopManager > MakeTrivialDataFrame()Make a RDF wrapping a RTrivialDS with infinite entries, for demo purposes.Definition RTrivialDS.cxx:130; df010_trivialDataSourceDefinition df010_trivialDataSource.py:1; DateSeptember 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df010_trivialDataSource.C. tutorialsdataframedf010_trivialDataSource.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df010__trivialDataSource_8C.html:2694,Guid,Guide,2694,doc/master/df010__trivialDataSource_8C.html,https://root.cern,https://root.cern/doc/master/df010__trivialDataSource_8C.html,1,['Guid'],['Guide']
Usability,"bMgrtab manager corresponding to ged-editor; TGTextButton*TGeoTubeEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTubeSegEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for tube segment editor. ~TGeoTubeSegEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoTubeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTubeSegEditor.html:21819,undo,undoing,21819,root/html528/TGeoTubeSegEditor.html,https://root.cern,https://root.cern/root/html528/TGeoTubeSegEditor.html,1,['undo'],['undoing']
Usability,"bMgrtab manager corresponding to ged-editor; TGTextButton*TGeoTubeEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTubeSegEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for tube segment editor. ~TGeoTubeSegEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoTubeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoTubeSegEditor.html:21919,undo,undoing,21919,root/html530/TGeoTubeSegEditor.html,https://root.cern,https://root.cern/root/html530/TGeoTubeSegEditor.html,1,['undo'],['undoing']
Usability,"bMgrtab manager corresponding to ged-editor; TGTextButton*TGeoTubeEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTubeSegEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for tube segment editor. ~TGeoTubeSegEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoTubeEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoTubeSegEditor.html:21919,undo,undoing,21919,root/html532/TGeoTubeSegEditor.html,https://root.cern,https://root.cern/root/html532/TGeoTubeSegEditor.html,1,['undo'],['undoing']
Usability,"back about processed events. ;  ; file  exec_macro.C;  This utility macro executes the macro ""macro"" given as first argument and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__gui.html:2160,simpl,simple,2160,doc/master/group__tutorial__gui.html,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html,1,['simpl'],['simple']
Usability,"balsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableWrappers(bool value = true); Enable call wrappers (also known as stubs) if value is true;; disable if value is false. void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:19661,Clear,ClearStack,19661,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,1,['Clear'],['ClearStack']
Usability,"basket number written; Long64_tTBranch::fZipBytesTotal number of bytes in all leaves after compression; static Int_tTBranch::fgCount! branch counter. private:. Long64_tfRequestedEntry! Cursor indicating which entry is being requested. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchRef(); Default constructor. TBranchRef(TTree* tree); Main constructor called by TTree::BranchRef. ~TBranchRef(); Typical destructor. void Clear(Option_t* option = """"); Clear entries in the TRefTable. Int_t Fill(); Fill the branch basket with the referenced objects parent numbers. Bool_t Notify(); This function is called by TRefTable::Notify, itself called by; TRef::GetObject.; The function reads the branch containing the object referenced; by the TRef. void Print(Option_t* option = """") const; Print the TRefTable branch. void ReadLeavesImpl(TBuffer& b); This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. void FillLeavesImpl(TBuffer& b); This function called by TBranch::Fill overloads TBranch::FillLeaves. void Reset(Option_t* option = """"); Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. void ResetAfterMerge(TFileMergeInfo* ); Reset a Branch after a Merge operation (drop data but keep customizations); TRefTable is cleared. Int_t SetParent(const TObject* obj, Int_t branchID); -- Set the current parent branch. This function is called by TBranchElement::GetEntry(); and TBranchElement::Fill() when reading or writing; branches that may contain referenced objects. TRefTable * GetRefTable() const; {return fRefTable;}. void SetRequestedEntry(Long64_t entry); {fRequestedEntry = entry;}. » Author: Rene Brun 19/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-03-12 16:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBranchRef.html:14937,clear,cleared,14937,root/html534/TBranchRef.html,https://root.cern,https://root.cern/root/html534/TBranchRef.html,2,['clear'],['cleared']
Usability,"be called after DFactMatrix (see implementation in Math/MatrixInversion.icc); Code from dfinv routine from CERNLIB Assumed first the LU decomposition via DfactMatrix function; taken from CLHEP : L. Moneta May 2006 ; Definition at line 577 of file MatrixInversion.icc. ◆ Dinv() [1/2]. template<unsigned int idim, unsigned int n = idim> . template<class T > . static bool ROOT::Math::Inverter< idim, n >::Dinv ; (; MatRepSym< T, idim > & ; rhs). inlinestatic . symmetric matrix inversion using Bunch-kaufman pivoting method implementation in Math/MatrixInversion.icc ; Definition at line 98 of file Dinv.h. ◆ Dinv() [2/2]. template<unsigned int idim, unsigned int n = idim> . template<class MatrixRep > . static bool ROOT::Math::Inverter< idim, n >::Dinv ; (; MatrixRep & ; rhs). inlinestatic . matrix inversion for a generic square matrix using LU factorization (code originally from CERNLIB and then ported in C++ for CLHEP) implementation is in file Math/MatrixInversion.icc ; Definition at line 75 of file Dinv.h. ◆ InvertBunchKaufman(). template<unsigned int idim, unsigned int N> . template<class T > . void ROOT::Math::Inverter< idim, N >::InvertBunchKaufman ; (; MatRepSym< T, idim > & ; rhs, . int & ; ifail . ). static . Bunch-Kaufman method for inversion of symmetric matrices. ; General Inversion for a symmetric matrix Bunch-Kaufman diagonal pivoting method It is described in J.R.; Bunch, L. Kaufman (1977). ""Some Stable Methods for Calculating Inertia and Solving Symmetric; Linear Systems"", Math. Comp. 31, p. 162-179. or in Gene H. Golub, /Charles F. van Loan, ""Matrix Computations"" (the second edition has a bug.) and implemented in ""lapack"" Mario Stanke, 09/97 ; Definition at line 40 of file MatrixInversion.icc. The documentation for this class was generated from the following files:; math/smatrix/inc/Math/Dinv.h; math/smatrix/inc/Math/MatrixInversion.icc. ROOTMathInverter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter.html:4576,Guid,Guide,4576,doc/master/classROOT_1_1Math_1_1Inverter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter.html,1,['Guid'],['Guide']
Usability,"be generated if the elapsed time is less than a second.; 13.4.6 Examples of Using the Generators; The method Rndm() is used for generating a pseudo-random number distributed between 0 and 1 as shown in the following example:; // use default seed; // (same random numbers will be generated each time); TRandom3 r; // generate a number in interval ]0,1] (0 is excluded); r.Rndm();; double x[100];; r.RndmArray(100,x); // generate an array of random numbers in ]0,1]; TRandom3 rdm(111); // construct with a user-defined seed; // use 0: a unique seed will be automatically generated using TUUID; TRandom1 r1(0);; TRandom2 r2(0);; TRandom3 r3(0);; // seed generated using machine clock (different every second); TRandom r0(0);; 13.4.7 Random Number Distributions; The TRandom base class provides functions, which can be used by all the other derived classes for generating random variates according to predefined distributions. In the simplest cases, like in the case of the exponential distribution, the non-uniform random number is obtained by applying appropriate transformations. In the more complicated cases, random variates are obtained using acceptance-rejection methods, which require several random numbers.; TRandom3 r;; // generate a gaussian distributed number with:; // mu=0, sigma=1 (default values); double x1 = r.Gaus();; double x2 = r.Gaus(10,3); // use mu = 10, sigma = 3;; The following table shows the various distributions that can be generated using methods of the TRandom classes. More information is available in the reference documentation for TRandom. In addition, random numbers distributed according to a user defined function, in a limited interval, or to a user defined histogram, can be generated in a very efficient way using TF1::GetRandom() or TH1::GetRandom(). Distributions; Description. Double_t Uniform(Double_t x1,Double_t x2 ); Uniform random numbers between x1,x2. Double_t Gaus(Double_t mu,Double_t sigma ); Gaussian random numbers.; Default values: mu=0, sigma=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:669643,simpl,simplest,669643,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simplest']
Usability,"be passed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented from RooAbsPdf.; Definition at line 166 of file RooGamma.cxx. ◆ IsA(). TClass * RooGamma::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 51 of file RooGamma.h. ◆ Streamer(). void RooGamma::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooGamma::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file RooGamma.h. ◆ translate(). void RooGamma::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 90 of file RooGamma.cxx. Member Data Documentation. ◆ beta. RooRealProxy RooGamma::beta. protected . Definition at line 42 of file RooGamma.h. ◆ gamma. RooRealProxy RooGamma::gamma. protected . Definition at line 41 of file RooGamma.h. ◆ mu. RooRealProxy RooGamma::mu. protected . Definition at line 43 of file RooGamma.h. ◆ x. RooRealProxy RooGamma::x. protected . Definition at line 40 of file RooGamma.h. Libraries for RooGamma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGamma.html:79741,simpl,simple,79741,doc/master/classRooGamma.html,https://root.cern,https://root.cern/doc/master/classRooGamma.html,1,['simpl'],['simple']
Usability,"be printed if; the specified label does not represent a valid state. Bool_t defineType(const char* label); Define a state with given name, the lowest available; positive integer is assigned as index. Category; state labels may not contain semicolons.; Error status is return if state with given name; is already defined. Bool_t defineType(const char* label, Int_t index); Define a state with given name and index. Category; state labels may not contain semicolons; Error status is return if state with given name; or index is already defined. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; compact only at the moment. void clearRange(const char* name, Bool_t silent); Check that both input arguments are not null pointers. void setRange(const char* rangeName, const char* stateNameList). void addToRange(const char* rangeName, const char* stateNameList); Check that both input arguments are not null pointers. Bool_t isStateInRange(const char* rangeName, const char* stateName) const; Check that both input arguments are not null pointers. void Streamer(TBuffer& b). TObject* clone(const char* newname) const; { return new RooCategory(*this,newname); }. Int_t getIndex() const; Value modifiers. const char* getLabel() const. Bool_t isFundamental() const; We implement a fundamental type of AbsArg that can be stored in a dataset. void clearTypes(); { RooAbsCategory::clearTypes() ; }. Bool_t inRange(const char* rangeName) const; Returns true of current value of category is inside given range. Bool_t hasRange(const char* rangeName) const; Returns true if category has range with given name. RooCatType evaluate() const; Dummy implementation. » Last changed: Mon Dec 7 13:47:04 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCategory.html:24176,clear,clearTypes,24176,root/html526/RooCategory.html,https://root.cern,https://root.cern/root/html526/RooCategory.html,2,['clear'],['clearTypes']
Usability,"be printed if; the specified label does not represent a valid state. Bool_t defineType(const char* label); Define a state with given name, the lowest available; positive integer is assigned as index. Category; state labels may not contain semicolons.; Error status is return if state with given name; is already defined. Bool_t defineType(const char* label, Int_t index); Define a state with given name and index. Category; state labels may not contain semicolons; Error status is return if state with given name; or index is already defined. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; compact only at the moment. void clearRange(const char* name, Bool_t silent); Check that both input arguments are not null pointers. void setRange(const char* rangeName, const char* stateNameList). void addToRange(const char* rangeName, const char* stateNameList); Check that both input arguments are not null pointers. Bool_t isStateInRange(const char* rangeName, const char* stateName) const; Check that both input arguments are not null pointers. void Streamer(TBuffer& b). TObject* clone(const char* newname) const; { return new RooCategory(*this,newname); }. Int_t getIndex() const; Value modifiers. const char* getLabel() const. Bool_t isFundamental() const; We implement a fundamental type of AbsArg that can be stored in a dataset. void clearTypes(); { RooAbsCategory::clearTypes() ; }. Bool_t inRange(const char* rangeName) const; Returns true of current value of category is inside given range. Bool_t hasRange(const char* rangeName) const; Returns true if category has range with given name. RooCatType evaluate() const; Dummy implementation. » Last changed: Mon Jul 4 15:22:24 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCategory.html:24430,clear,clearTypes,24430,root/html530/RooCategory.html,https://root.cern,https://root.cern/root/html530/RooCategory.html,2,['clear'],['clearTypes']
Usability,"be printed if; the specified label does not represent a valid state. Bool_t defineType(const char* label); Define a state with given name, the lowest available; positive integer is assigned as index. Category; state labels may not contain semicolons.; Error status is return if state with given name; is already defined. Bool_t defineType(const char* label, Int_t index); Define a state with given name and index. Category; state labels may not contain semicolons; Error status is return if state with given name; or index is already defined. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void writeToStream(ostream& os, Bool_t compact) const; compact only at the moment. void clearRange(const char* name, Bool_t silent); Check that both input arguments are not null pointers. void setRange(const char* rangeName, const char* stateNameList). void addToRange(const char* rangeName, const char* stateNameList); Check that both input arguments are not null pointers. Bool_t isStateInRange(const char* rangeName, const char* stateName) const; Check that both input arguments are not null pointers. void Streamer(TBuffer& b). TObject* clone(const char* newname) const; { return new RooCategory(*this,newname); }. Int_t getIndex() const; Value modifiers. const char* getLabel() const. Bool_t isFundamental() const; We implement a fundamental type of AbsArg that can be stored in a dataset. void clearTypes(); { RooAbsCategory::clearTypes() ; }. Bool_t inRange(const char* rangeName) const; Returns true of current value of category is inside given range. Bool_t hasRange(const char* rangeName) const; Returns true if category has range with given name. RooCatType evaluate() const; Dummy implementation. » Last changed: Sat Oct 9 22:38:38 2010 » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCategory.html:24308,clear,clearTypes,24308,root/html528/RooCategory.html,https://root.cern,https://root.cern/root/html528/RooCategory.html,2,['clear'],['clearTypes']
Usability,"beTGeoVolume * MakeTube(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz)Make in one step a volume pointing to a tube shape with given medium.Definition TGeoManager.cxx:3204; (*) The same applies for all primitive shapes, for which there can be found corresponding MakeSHAPE() methods. Their usage is much more convenient unless a shape has to be shared between more volumes.; Let us make now an aluminum wire having the same shape, supposing that we have created the copper wire with the line above:; TGeoVolume *wire_al = new TGeoVolume(""WIRE_AL"",wire_co>GetShape(),; ptrAL);; We would like now to position our wire in the middle of a gas chamber. We need first to define the gas chamber:; TGeoVolume *chamber = gGeoManager->MakeTube(""CHAMBER"",ptrGAS,; 0,1,1);; Now we can put the wire inside:; chamber->AddNode(wire_co,1);; If we inspect now the chamber volume in a browser, we will notice that it has one daughter. Of course, the gas has some container also, but let us keeps it like that for the sake of simplicity. Since we did not supply the third argument, the wire will be positioned with an identity transformation inside the chamber.; Overlapping Volumes; Positioning volumes that does not overlap their neighbors nor extrude their container is sometimes quite strong constraint. Having a limited set of geometric shapes might force sometimes overlaps. Since overlapping is contradictory to containment, a point belonging to an overlapping region will naturally belong to all overlapping partners. The answer provided by the modeller to ""Where am I?"" is no longer deterministic if there is no priority assigned.; There are two ways out provided by the modeller in such cases and we will illustrate them by examples. Suppose we have 2 crossing tubes that we have to describe. Such a structure cannot be decomposed in a containment schema. This is a typical example of simple structure that can be handled by using composite shapes. What we have to do is to de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:36763,simpl,simplicity,36763,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simplicity']
Usability,"beginning - tracks - show tracks from TGeoManager - showtop - show top-level volume of TGeoManager (default off) - no_screen - let ignore kVisOnScreen bits for nodes visibility - dray - calculate rendering order using raytracing (extensive calculations) - dbox - use distance to nearest point from bounding box for rendering order (default) - dpnt - use distance to shape center as rendering order - dsize - use volume size as rendering order - ddflt - let three.js to calculate rendering order - comp - show left and right components of TGeoCompositeShape - compx - show all sub-components of TGeoCompositeShape; In the URL string several global settings can be changed:. geosegm - grads per segment is cylindrical shapes, default is 6; geocomp - compress results of composite shape production, default is true. It is possible to display only part of geometry model. For instance, one could select sub-item like:. file=rootgeom.root&item=simple1/TOP/REPLICA_1. Or one can use simple selection syntax (work only with first-level volumes):. item=simple1&opt=-bar1-bar2. Syntax uses ‘+’ sign to enable visibility flag of specified volume and ‘-’ sign to disable visibility. One could use wildcard symbol like ’+TUBE1*’.; Another way to configure visibility flags is usage of ROOT macros, which typically looks like:; {; TGeoManager::Import(""http://root.cern/files/alice2.root"");; gGeoManager->DefaultColors();; // gGeoManager->SetVisLevel(4);; gGeoManager->GetVolume(""HALL"")->InvisibleAll();; gGeoManager->GetVolume(""ZDCC"")->InvisibleAll();; gGeoManager->GetVolume(""ZDCA"")->InvisibleAll();; // ...; gGeoManager->GetVolume(""ALIC"")->Draw(""ogl"");; new TBrowser;; }; Example of such macro can be found in root tutorials.; From provided macro only following calls will be executed in JSROOT:. gGeoManager->DefaultColors(); gGeoManager->GetVolume(""HALL"")->InvisibleAll(); gGeoManager->GetVolume(""HALL"")->SetTransparency(30); gGeoManager->GetVolume(""HALL"")->SetLineColor(5); gGeoManager->GetVolume(""ALIC"")->Dr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:14278,simpl,simple,14278,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['simpl'],['simple']
Usability,being deleted! ; Definition at line 442 of file TSchemaRuleSet.cxx. ◆ SetClass(). void TSchemaRuleSet::SetClass ; (; TClass * ; cls). Set the TClass associated with this rule set. ; Definition at line 457 of file TSchemaRuleSet.cxx. ◆ Streamer(). void TSchemaRuleSet::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class ROOT::TSchemaRuleSet. ; Reimplemented from TObject.; Definition at line 555 of file TSchemaRuleSet.cxx. ◆ StreamerNVirtual(). void ROOT::Detail::TSchemaRuleSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file TSchemaRuleSet.h. Member Data Documentation. ◆ fAllRules. TObjArray* ROOT::Detail::TSchemaRuleSet::fAllRules. private . Array of non-persistent rules - just for cleanup purposes - owns the elements. ; Definition at line 70 of file TSchemaRuleSet.h. ◆ fCheckSum. UInt_t ROOT::Detail::TSchemaRuleSet::fCheckSum. private . Definition at line 74 of file TSchemaRuleSet.h. ◆ fClass. TClassRef ROOT::Detail::TSchemaRuleSet::fClass. private . Array of all rules. ; Definition at line 71 of file TSchemaRuleSet.h. ◆ fClassName. TString ROOT::Detail::TSchemaRuleSet::fClassName. private . Target class pointer (for consistency checking) ; Definition at line 72 of file TSchemaRuleSet.h. ◆ fPersistentRules. TObjArray* ROOT::Detail::TSchemaRuleSet::fPersistentRules. private . Definition at line 68 of file TSchemaRuleSet.h. ◆ fRemainingRules. TObjArray* ROOT::Detail::TSchemaRuleSet::fRemainingRules. private . Definition at line 69 of file TSchemaRuleSet.h. ◆ fVersion. Int_t ROOT::Detail::TSchemaRuleSet::fVersion. private . Definition at line 73 of file TSchemaRuleSet.h. Libraries for ROOT::Detail::TSchemaRuleSet:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TSchemaRuleSet.h; core/meta/src/TSchemaRuleSet.cxx. ROOTDetailTSchemaRuleSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html:19819,Guid,Guide,19819,doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TSchemaRuleSet.html,1,['Guid'],['Guide']
Usability,"being spread across the file. However it might decrease the performance when reading more branches (or the full entry).; When using SortBasketsByEntry the baskets with the lowest starting entry are written first. (i.e. the baskets are sorted by the index/number of the first entry they contain). This means that on the file the baskets will be in the order in which they will be needed when reading the whole tree sequentially.; For examples of CloneTree, see tutorials:. copytree.C: A macro to copy a subset of a TTree to a new TTree. The input file has been generated by the program in $ROOTSYS/test/Event with: Event 1000 1 1 1; copytree2.C: A macro to copy a subset of a TTree to a new TTree. One branch of the new Tree is written to a separate file. The input file has been generated by the program in $ROOTSYS/test/Event with: Event 1000 1 1 1 . Reimplemented in TNtuple.; Definition at line 3139 of file TTree.cxx. ◆ CopyAddresses(). void TTree::CopyAddresses ; (; TTree * ; tree, . bool ; undo = false . ). virtual . Set branch addresses of passed tree equal to ours. ; If undo is true, reset the branch addresses instead of copying them. This ensures 'separation' of a cloned tree from its original. ; Definition at line 3299 of file TTree.cxx. ◆ CopyEntries(). Long64_t TTree::CopyEntries ; (; TTree * ; tree, . Long64_t ; nentries = -1, . Option_t * ; option = """", . bool ; needCopyAddresses = false . ). virtual . Copy nentries from given tree to this tree. ; This routines assumes that the branches that intended to be copied are already connected. The typical case is that this tree was created using tree->CloneTree(0).; By default copy all entries.; Returns number of bytes copied to this tree.; If 'option' contains the word 'fast' and nentries is -1, the cloning will be done without unzipping or unstreaming the baskets (i.e., a direct copy of the raw bytes on disk).; When 'fast' is specified, 'option' can also contains a sorting order for the baskets in the output file.; There ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:106606,undo,undo,106606,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['undo'],['undo']
Usability,"bel = """", . Option_t * ; option = ""lpf"" . ). Add a new entry to this legend. ; ""obj"" is the object to be represented. ""label"" is the text you wish to associate with obj in the legend. If ""label"" is null or empty, the title of the object will be used.; Options are:. L: draw line associated with TAttLine if obj inherits from TAttLine; P: draw polymarker associated with TAttMarker if obj inherits from TAttMarker; F: draw a box with fill associated wit TAttFill if obj inherits TAttFill; E: draw vertical error bar if option ""L"" is also specified . Definition at line 320 of file TLegend.cxx. ◆ Class(). static TClass * TLegend::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TLegend::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TLegend::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 82 of file TLegend.h. ◆ Clear(). void TLegend::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear all entries in this legend, including the header. ; Reimplemented from TObject.; Definition at line 379 of file TLegend.cxx. ◆ Copy(). void TLegend::Copy ; (; TObject & ; obj); const. overridevirtual . Copy this legend into ""obj"". ; Reimplemented from TBox.; Definition at line 388 of file TLegend.cxx. ◆ DeclFileName(). static const char * TLegend::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 82 of file TLegend.h. ◆ DeleteEntry(). void TLegend::DeleteEntry ; (; ). virtual . Delete entry at the mouse position. ; Definition at line 413 of file TLegend.cxx. ◆ Draw(). void TLegend::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this legend with its current attributes. ; Reimplemented from TBox.; Definition at line 425 of file TLegend.cxx. ◆ EditEntryAttFill(). void TLegend::EditEntryAttFill ; (; ). virtual . Edit the fill attributes for the entry pointed by th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend.html:37553,Clear,Clear,37553,doc/master/classTLegend.html,https://root.cern,https://root.cern/doc/master/classTLegend.html,1,['Clear'],['Clear']
Usability,"bel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionQueryFrame.html:21395,feedback,feedback,21395,root/html534/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html534/TSessionQueryFrame.html,1,['feedback'],['feedback']
Usability,"belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateElements ();  Annihilate elements. ;  ; Bool_t ApplyVizTag (const TString &tag, const TString &fallback_tag="""");  Set the VizTag, find model-element from the VizDB and copy visualization-parameters from it. ;  ; List_i BeginChildren ();  ; List_ci BeginChildren () const;  ; List_i BeginParents ();  ; List_ci BeginParents () const;  ; virtual Bool_t CanEditElement () const;  ; virtual Bool_t CanEditMainColor () const;  ; virtual Bool_t CanEditMainTrans () const;  ; virtual Bool_t CanEditMainTransparency () const;  ; virtual void CheckReferenceCount (const TEveException &eh=""TEveElement::CheckReferenceCount "");  Check external references to this and eventually auto-destruct the render-element. ;  ; virtual void ClearStamps ();  ; virtual void CloneChildrenRecurse (TEveElement *dest, Int_t level=0) const;  Clone children and attach them to the dest element. ;  ; virtual TEveElement * CloneElement () const;  Clone the element via copy constructor. ;  ; virtual TEveElement * CloneElementRecurse (Int_t level=0) const;  Clone elements and recurse 'level' deep over children. ;  ; virtual void CollectSceneParents (List_t &scenes);  Collect all parents of class TEveScene. ;  ; virtual void CollectSceneParentsFromChildren (List_t &scenes, TEveElement *parent);  Collect scene-parents from all children. ;  ; virtual void CopyVizParams (const TEveElement *el);  Copy visualization parameters from element el. ;  ; virtual void CopyVizParamsFromDB ();  Copy visualization parameters from the model-element fVizModel. ;  ; void CSCApplyMainColorToAllChildren ();  ; void CSCApplyMainColorToMatchingChildren ();  ; void CSCApplyMainTransparencyToAllChildren ();  ; void CSCApplyMainTransparencyToMatchingChildren ();  ; void CSCImplySelectAllChildren ();  ; void CSCTakeAnyParen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSceneInfo.html:2949,Clear,ClearStamps,2949,doc/master/classTEveSceneInfo.html,https://root.cern,https://root.cern/doc/master/classTEveSceneInfo.html,1,['Clear'],['ClearStamps']
Usability,"below MaxVirtualsize.Definition TTree.cxx:6837; TTree::GetReadEntryvirtual Long64_t GetReadEntry() constDefinition TTree.h:549; TTree::GetListOfBranchesvirtual TObjArray * GetListOfBranches()Definition TTree.h:528; TTree::fZipBytesLong64_t fZipBytesTotal number of bytes in all branches after compression.Definition TTree.h:87; TTree::GetTreevirtual TTree * GetTree() constDefinition TTree.h:557; TTree::fTransientBufferTBuffer * fTransientBuffer! Pointer to the current transient buffer.Definition TTree.h:138; TTree::SetEntryListvirtual void SetEntryList(TEntryList *list, Option_t *opt="""")Set an EntryList.Definition TTree.cxx:9046; TTree::Notifybool Notify() overrideFunction called when loading a new class library.Definition TTree.cxx:7033; TTree::AddZipBytesvirtual void AddZipBytes(Int_t zip)Definition TTree.h:332; TTree::LoadTreevirtual Long64_t LoadTree(Long64_t entry)Set current entry.Definition TTree.cxx:6473; TTree::ReadFilevirtual Long64_t ReadFile(const char *filename, const char *branchDescriptor="""", char delimiter=' ')Create or simply read branches from filename.Definition TTree.cxx:7564; TTree::GetAliasvirtual const char * GetAlias(const char *aliasName) constReturns the expanded value of the alias. Search in the friends if any.Definition TTree.cxx:5226; TTree::SetIOFeaturesROOT::TIOFeatures SetIOFeatures(const ROOT::TIOFeatures &)Provide the end-user with the ability to enable/disable various experimental IO features for this TTr...Definition TTree.cxx:9130; TTree::CreateBasketvirtual TBasket * CreateBasket(TBranch *)Create a basket for this tree and given branch.Definition TTree.cxx:3731; TTree::fUserInfoTList * fUserInfopointer to a list of user objects associated to this TreeDefinition TTree.h:133; TTree::GetMinimumvirtual Double_t GetMinimum(const char *columname)Return minimum of column with name columname.Definition TTree.cxx:6275; TTree::RemoveFriendvirtual void RemoveFriend(TTree *)Remove a friend from the list of friends.Definition TTree.cxx:7977; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:454548,simpl,simply,454548,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['simpl'],['simply']
Usability,"ber Function Documentation. ◆ Allocate(). void * TGenCollectionProxy::Allocate ; (; UInt_t ; n, . Bool_t ; forceDelete . ). overridevirtual . Allocate the needed space. ; For associative collection, this returns a TStaging object that need to be deleted manually or returned by calling Commit(TStaging*) ; Implements TVirtualCollectionProxy.; Definition at line 1192 of file TGenCollectionProxy.cxx. ◆ At(). void * TGenCollectionProxy::At ; (; UInt_t ; idx). overridevirtual . Return the address of the value at index 'idx'. ; Implements TVirtualCollectionProxy.; Reimplemented in TGenVectorProxy, TGenVectorBoolProxy, TGenListProxy, and TGenSetProxy.; Definition at line 1064 of file TGenCollectionProxy.cxx. ◆ CheckFunctions(). void TGenCollectionProxy::CheckFunctions ; (; ); const. protected . Check existence of function pointers. ; Definition at line 793 of file TGenCollectionProxy.cxx. ◆ Clear(). void TGenCollectionProxy::Clear ; (; const char * ; opt = """"). overridevirtual . Clear the emulated collection. ; Implements TVirtualCollectionProxy.; Definition at line 1136 of file TGenCollectionProxy.cxx. ◆ Commit(). void TGenCollectionProxy::Commit ; (; void * ; env). overridevirtual . Commit the change. ; Implements TVirtualCollectionProxy.; Definition at line 1277 of file TGenCollectionProxy.cxx. ◆ DeleteItem(). void TGenCollectionProxy::DeleteItem ; (; Bool_t ; force, . void * ; ptr . ); const. protectedvirtual . Call to delete/destruct individual item. ; Reimplemented in TGenVectorProxy, TGenVectorBoolProxy, TGenBitsetProxy, and TGenMapProxy.; Definition at line 1350 of file TGenCollectionProxy.cxx. ◆ Generate(). TVirtualCollectionProxy * TGenCollectionProxy::Generate ; (; ); const. overridevirtual . Virtual copy constructor. ; Implements TVirtualCollectionProxy.; Reimplemented in TGenCollectionStreamer.; Definition at line 731 of file TGenCollectionProxy.cxx. ◆ GetCollectionClass(). TClass * TGenCollectionProxy::GetCollectionClass ; (; ); const. overridevirtual . Return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy.html:16369,Clear,Clear,16369,doc/master/classTGenCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html,1,['Clear'],['Clear']
Usability,"ber Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TProcessExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. . ROOT::TProcessExecutor::Map; This class inherits its interfaces from ROOT::TExecutor; . The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TProcessExecutor never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TProcessExecutor::Map is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Map will outrun the benefits of parallel execution on most machines.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Note: the user should take care of initializing random seeds differently in each process (e.g. using the process",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html:1249,simpl,simply,1249,doc/v632/classROOT_1_1TProcessExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TProcessExecutor.html,2,['simpl'],['simply']
Usability,"ber Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Types |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; RooLinkedList Class ReferenceRooFit » RooFit Core. ; Collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list. ; It can optionally add a hash table to speed up random access in large collections Use RooAbsCollection derived objects for public use (e.g. RooArgSet or RooArgList) ; Definition at line 44 of file RooLinkedList.h. Public Member Functions;  RooLinkedList (const RooLinkedList &other);  Copy constructor. ;  ;  RooLinkedList (Int_t htsize=0);  ;  ~RooLinkedList () override;  Destructor. ;  ; virtual void Add (TObject *arg);  ; TObject * At (int index) const;  Return object stored in sequential position given by index. ;  ; RooLinkedListIterImpl begin () const;  ; void Clear (Option_t *o=nullptr) override;  Remove all elements from collection. ;  ; TObject * Clone (const char *=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; void Delete (Option_t *o=nullptr) override;  Remove all elements in collection and delete all elements NB: Collection does not own elements, this function should be used judiciously by caller. ;  ; bool empty () const;  ; RooLinkedListIterImpl end () const;  ; TObject * find (const char *name) const;  Return pointer to object with given name in collection. ;  ; RooAbsArg * findArg (const RooAbsArg *) const;  Return pointer to object with given name in collection. ;  ; TObject * FindObject (const char *name) const override;  Return pointer to object with given name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object in list. ;  ; TObject * First () const;  ; RooFIter fwdIterator () const;  Create a one-time-use forward iterator for this list. ;  ; Int_t getHashTableSize () const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinkedList.html:1142,Clear,Clear,1142,doc/master/classRooLinkedList.html,https://root.cern,https://root.cern/doc/master/classRooLinkedList.html,1,['Clear'],['Clear']
Usability,"ber Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TBrowserPlugin Class ReferenceGUI » Low level GUI widgets. ; Helper class used to manage plugins (command or macro to be executed). ; Definition at line 35 of file TRootBrowser.h. Public Member Functions;  TBrowserPlugin (const char *name, const char *cmd="""", Int_t tab=1, Int_t sub=-1);  ;  ~TBrowserPlugin () override;  ; TClass * IsA () const override;  ; void SetCommand (const char *cmd);  ; void SetSubTab (Int_t sub);  ; void SetTab (Int_t tab);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowserPlugin.html:1120,Clear,Clear,1120,doc/master/classTBrowserPlugin.html,https://root.cern,https://root.cern/doc/master/classTBrowserPlugin.html,1,['Clear'],['Clear']
Usability,"ber of divisions used to draw this tube. ; Definition at line 185 of file TTUBE.cxx. ◆ SetPoints(). void TTUBE::SetPoints ; (; Double_t * ; points); const. overrideprotectedvirtual . Create TUBE points. ; Reimplemented from TShape.; Reimplemented in TTUBS.; Definition at line 194 of file TTUBE.cxx. ◆ SetSegsAndPols(). void TTUBE::SetSegsAndPols ; (; TBuffer3D & ; buffer); const. protectedvirtual . Set segments and polygons. ; Definition at line 227 of file TTUBE.cxx. ◆ Sizeof3D(). void TTUBE::Sizeof3D ; (; ); const. overridevirtual . Return total X3D needed by TNode::ls (when called with option ""x"") ; Reimplemented from TAtt3D.; Reimplemented in TTUBS.; Definition at line 306 of file TTUBE.cxx. ◆ Streamer(). void TTUBE::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TTUBE. ; Reimplemented from TShape.; Reimplemented in TTUBS.; Definition at line 318 of file TTUBE.cxx. ◆ StreamerNVirtual(). void TTUBE::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 72 of file TTUBE.h. Member Data Documentation. ◆ fAspectRatio. Float_t TTUBE::fAspectRatio. protected . Definition at line 41 of file TTUBE.h. ◆ fCoTab. Double_t* TTUBE::fCoTab. mutableprotected . Table of sin(fPhi1) .... sin(fPhil+fDphi1) ; Definition at line 45 of file TTUBE.h. ◆ fDz. Float_t TTUBE::fDz. protected . Definition at line 38 of file TTUBE.h. ◆ fNdiv. Int_t TTUBE::fNdiv. protected . Definition at line 39 of file TTUBE.h. ◆ fRmax. Float_t TTUBE::fRmax. protected . Definition at line 36 of file TTUBE.h. ◆ fRmin. Float_t TTUBE::fRmin. protected . Definition at line 35 of file TTUBE.h. ◆ fSiTab. Double_t* TTUBE::fSiTab. mutableprotected . Definition at line 44 of file TTUBE.h. Libraries for TTUBE:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TTUBE.h; graf3d/g3d/src/TTUBE.cxx. TTUBE. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTUBE.html:23547,Guid,Guide,23547,doc/master/classTTUBE.html,https://root.cern,https://root.cern/doc/master/classTTUBE.html,1,['Guid'],['Guide']
Usability,"ber values working for all histograms (1D, 2D and 3D) ; Definition at line 7977 of file TH1.cxx. ◆ Draw(). void TH1::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this histogram with options. ; Histograms are drawn via the THistPainter class. Each histogram has a pointer to its own painter (to be usable in a multithreaded program). The same histogram can be drawn with different options in different pads. When a histogram drawn in a pad is deleted, the histogram is automatically removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automatically shown in the pad next time the pad is updated. One does not need to redraw the histogram. To draw the current version of a histogram in a pad, one can use h->DrawCopy(); This makes a clone of the histogram. Once the clone is drawn, the original histogram may be modified or deleted without affecting the aspect of the clone. By default, TH1::Draw clears the current pad.; One can use TH1::SetMaximum and TH1::SetMinimum to force a particular value for the maximum or the minimum scale on the plot.; TH1::UseCurrentStyle can be used to change all histogram graphics attributes to correspond to the current selected style. This function must be called for each histogram. In case one reads and draws many histograms from a file, one can force the histograms to inherit automatically the current graphics style by calling before gROOT->ForceStyle();; See the THistPainter class for a description of all the drawing options. ; Reimplemented from TObject.; Definition at line 3066 of file TH1.cxx. ◆ DrawCopy(). TH1 * TH1::DrawCopy ; (; Option_t * ; option = """", . const char * ; name_postfix = ""_copy"" . ); const. virtual . Copy this histogram and Draw in the current pad. ; Once the histogram is drawn into the pad, any further modification using graphics input will be made on the copy of the histogram, and not to the original object. By default a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:109313,clear,clears,109313,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['clear'],['clears']
Usability,"bers (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TArray(); static TClass*Class(); virtual Double_tGetAt(Int_t i) const; Int_tGetSize() const; virtual TClass*IsA() const; TArray&operator=(const TArray& rhs); static TArray*ReadArray(TBuffer& b, const TClass* clReq); virtual voidSet(Int_t n); virtual voidSetAt(Double_t v, Int_t i); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static voidWriteArray(TBuffer& b, const TArray* a). protected:. Bool_tBoundsOk(const char* where, Int_t at) const; Bool_tOutOfBoundsError(const char* where, Int_t i) const. Data Members; public:. Int_tfNNumber of array elements. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t OutOfBoundsError(const char* where, Int_t i) const; Generate an out-of-bounds error. Always returns false. TArray * ReadArray(TBuffer& b, const TClass* clReq); Read TArray object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same array). void WriteArray(TBuffer& b, const TArray* a); Write TArray object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same array). Bool_t BoundsOk(const char* where, Int_t at) const. TArray & operator=(const TArray& rhs); {if(this!=&rhs) fN = rhs.fN; return *this; }. virtual ~TArray(); { fN = 0; }. Int_t GetSize() const; { return fN; }. void Set(Int_t n). Double_t GetAt(Int_t i) const. void SetAt(Double_t v, Int_t i). » Author: Fons Rademakers 21/10/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-03-10 17:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TArray.html:1524,Simpl,Simplified,1524,root/html534/TArray.html,https://root.cern,https://root.cern/root/html534/TArray.html,2,['Simpl'],['Simplified']
Usability,"bers |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; THttpEngine Class ReferenceHTTP server. ; Abstract class for implementing http protocol for THttpServer. ; Definition at line 19 of file THttpEngine.h. Public Member Functions; virtual Bool_t Create (const char *);  Method to create all components of engine. ;  ; THttpServer * GetServer () const;  Returns pointer to THttpServer associated with engine. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpEngine.html:1099,Clear,Clear,1099,doc/master/classTHttpEngine.html,https://root.cern,https://root.cern/doc/master/classTHttpEngine.html,1,['Clear'],['Clear']
Usability,"bers |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TMapTypeToTClass Class Reference. . Definition at line 365 of file TClass.cxx. Public Types; typedef IdMap_t::const_iterator const_iterator;  ; typedef std::map< std::string, TClass * > IdMap_t;  ; typedef IdMap_t::key_type key_type;  ; typedef IdMap_t::mapped_type mapped_type;  ; typedef IdMap_t::size_type size_type;  . Public Member Functions; void Add (const key_type &key, mapped_type &obj);  ; mapped_type Find (const key_type &key) const;  ; void Remove (const key_type &key);  . Private Attributes; IdMap_t fMap;  . Member Typedef Documentation. ◆ const_iterator. typedef IdMap_t::const_iterator ROOT::TMapTypeToTClass::const_iterator. Definition at line 372 of file TClass.cxx. ◆ IdMap_t. typedef std::map<std::string,TClass*> ROOT::TMapTypeToTClass::IdMap_t. Definition at line 370 of file TClass.cxx. ◆ key_type. typedef IdMap_t::key_type ROOT::TMapTypeToTClass::key_type. Definition at line 371 of file TClass.cxx. ◆ mapped_type. typedef IdMap_t::mapped_type ROOT::TMapTypeToTClass::mapped_type. Definition at line 378 of file TClass.cxx. ◆ size_type. typedef IdMap_t::size_type ROOT::TMapTypeToTClass::size_type. Definition at line 373 of file TClass.cxx. Member Function Documentation. ◆ Add(). void ROOT::TMapTypeToTClass::Add ; (; const key_type & ; key, . mapped_type & ; obj . ). inline . Definition at line 385 of file TClass.cxx. ◆ Find(). mapped_type ROOT::TMapTypeToTClass::Find ; (; const key_type & ; key); const. inline . Definition at line 390 of file TClass.cxx. ◆ Remove(). void ROOT::TMapTypeToTClass::Remove ; (; const key_type & ; key). inline . Definition at line 398 of file TClass.cxx. Member Data Documentation. ◆ fMap. IdMap_t ROOT::TMapTypeToTClass::fMap. private . Definition at line 382 of file TClass.cxx. core/meta/src/TClass.cxx. ROOTTMapTypeToTClass. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TMapTypeToTClass.html:2064,Guid,Guide,2064,doc/master/classROOT_1_1TMapTypeToTClass.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TMapTypeToTClass.html,1,['Guid'],['Guide']
Usability,"bers; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::MultiBuildConfig. class RooSimWSTool::MultiBuildConfig: public RooSimWSTool::BuildConfig. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;State2}"" where State1 and; State2 are the state names of the two spitting categories. The examples so far deal with a single prototype p.d.f. It is also; possible to bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimWSTool__MultiBuildConfig.html:1142,simpl,simple,1142,root/html526/RooSimWSTool__MultiBuildConfig.html,https://root.cern,https://root.cern/root/html526/RooSimWSTool__MultiBuildConfig.html,4,['simpl'],['simple']
Usability,"bers; data members; class charts. ROOT; » HIST; » HIST; » THnT<int>. class THnT<int>: public THn. Helper struct to hold one dimension's bin range for THnBinIter. Function Members (Methods); public:. virtual~THnT<int>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_int_.html:984,Clear,Clear,984,root/html602/THnT_int_.html,https://root.cern,https://root.cern/root/html602/THnT_int_.html,2,['Clear'],['Clear']
Usability,"bers; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tfConfidenceLevelconfidence level; Double_tfLowerLimitlower interval limit; RooArgSetfParametersset containing the parameter of interest; Double_tfUpperLimitupper interval limit. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-03-10 17:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleInterval.html:6961,Simpl,SimpleInterval,6961,root/html534/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"better to access the values in a script, one by one. There is a traditional way of doing this (TTree::SetBranchAddress() etc) and a new, recommended one: the TTreeReader. That's what we will use later and introduce here.; The TTreeReader Concept; The TTree loads entry by entry into memory. You and the TTree need to agree what data the TTree should make available (i.e. for which branches) and what data these branches contain. First, we set up a TTreeReader object that connects our data requests to the TTree:; // Access a TTree called ""MyTree"" in the file:; TTreeReader reader(""MyTree"", file);. The TTreeReader Values and Arrays; This reader object can now be used by the data accessors. There are two types: TTreeReaderArray can iterate through collections (std::vector, TClonesArray, TList, MyType[12] - whatever) and TTreeReaderValue that doesn't. You can choose how you access the values - for our tree, all of these might make sense in different contexts:; TTreeReaderValue<float> rvMissingET(reader, ""missingET"");; // The following needs the definition of the Muon class - which is why accessing; // data member branches is much simpler.; TTreeReaderValue<std::vector<Muon>> rvMuons(reader, ""muons"");. TTreeReaderArray<float> raMuonPt(reader, ""muons.fPt"");; // Here, too we would need the definition of the Muon class.; TTreeReaderArray<Muon> raMuons(reader, ""muons"");. Accessing Data; The TTreeReader checks whether the type you specify is the type that's stored in the branch, i.e. whether it can actually access the data through the reader object. The TTreeReaderValue gets its values like so:; // Loop through all the TTree's entries; while (reader.Next()) {; // behaves like an iterator; float missingET = *rvMissingET;; ...; }. A TTreeReaderArray allows you to get the size and access the n-th element:; while (reader.Next()) {; for (int iMuon = 0, nMuons = raMuonPt.GetSize(); iMuon < nMuons; ++iMuon) {; hist->Fill(raMuonPt[iMuon]);; }; }. Of course in C++11 you could also just do; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/7-using-ttreereader.html:3198,simpl,simpler,3198,d/7-using-ttreereader.html,https://root.cern,https://root.cern/d/7-using-ttreereader.html,1,['simpl'],['simpler']
Usability,"bient; Specular; Emissive. For each of these you can select the component via the radio buttons. Each component can have the red, green and blue values for the component adjusted via the sliders. You can apply this adjustment to the shape itself, or to all shapes sharing a common ‘family’. Shapes of the same family have external objects with the same TObject name string. You can also adjust the ‘Opacity’ and ‘Shine’ for the shapes materials via the sliders.; 9.13.2.11 Geometry; Viewer Controls Pane ‘Geometry’ tab.; Review and modify the shapes X/Y/Z center and scaling factors via the edit boxes. Selection and editing of shapes is not available via the API at present.; 9.13.2.12 Outputting Viewer Contents; The current viewer rendering can be output to an external EPS or PDF, using the options under the ‘File’ menu on the top menu bar. The file is named ‘viewer.eps’ or ‘viewer.pdf’ and written to the current ROOT directory.; 9.13.3 The X3D Viewer; The X3D viewer is a fairly simple and limited viewer, capable of showing basic lines and polygons. It lacks the quality, performance and more advanced features of the GL Viewer, and additionally is not supported on Windows. It is not actively developed and you are encouraged to use the GL Viewer out of preference. The below table presents the main interactions - these are repeated in the Help dialog of the viewer.; Action KeyActionKey; Wireframe Mode wRotate about xx a; Hidden Line Mode eRotate about yy b; Hidden Surface Mode rRotate about zz c; Move object down uAuto-rotate about x1 2 3; Move object up iAuto-rotate about y4 5 6; Move object left lAuto-rotate about z7 8 9; Move object right hToggle controls styleo; Move object forward jToggle stereo displays; Move object backward kToggle blue stereo viewd; Adjust focus (stereo mode) [ ] { }Toggle double bufferf; Rotate object Left mouse button down + move.; 9.13.4 Common 3D Viewer Architecture; The 3D Viewer Architecture provides a common mechanism for viewer clients to publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:400710,simpl,simple,400710,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"bin with the maximum content of each individual violin is; 1558set to a constant value using SetBarWidth(). The static function will affect all violin-charts; 1559in the running program. Default is true. Scaling between multiple violin-charts; 1560(using ""same"" or THStack) is not supported, yet.; 1561 ; 1562##### The zero indicator line; 1563Typical for violin charts is a line in the background over the whole histogram indicating; 1564the bins with zero entries. The zero indicator line can be activated with z=1. The line color; 1565will always be the same as the fill-color of the histogram.; 1566 ; 1567##### The Mean; 1568The Mean is illustrated with the same mechanism as used for candle plots. Usually a circle is used.; 1569 ; 1570##### Whiskers; 1571The whiskers are illustrated by the same mechanism as used for candle plots. There is only one; 1572difference. When using the simple whisker definition (w=1) and the zero indicator line (z=1), then; 1573the whiskers will be forced to be solid (usually hashed); 1574 ; 1575##### Points; 1576The points are illustrated by the same mechanism as used for candle plots. E.g. VIOLIN2 uses; 1577better whisker definition (w=2) and outliers (p=1).; 1578 ; 1579##### Other options; 1580It is possible to combine all options of candle or violin plots with each other. E.g. a violin plot; 1581including a box-plot.; 1582 ; 1583#### How to use the violin-plots drawing option; 1584 ; 1585There are two predefined violin-plot representations:; 1586 - ""VIOLINX1"": Standard violin (histogram, mean, whisker over full distribution,; 1587 zero indicator line); 1588 - ""VIOLINX2"": Line VIOLINX1 both with better whisker definition + outliers.; 1589 ; 1590A solid fill style is recommended for this plot (as opposed to a hollow or; 1591hashed style).; 1592 ; 1593Begin_Macro(source); 1594{; 1595 auto c1 = new TCanvas(""c1"",""c1"",600,400);; 1596 Int_t nx(6), ny(40);; 1597 double xmin(0.0), xmax(+6.0), ymin(0.0), ymax(+4.0);; 1598 auto hviolin = new TH2F(""h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:67331,simpl,simple,67331,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['simpl'],['simple']
Usability,"bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNorm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1D.html:1802,Clear,ClearUnderflowAndOverflow,1802,root/html602/TH1D.html,https://root.cern,https://root.cern/root/html602/TH1D.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNorm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2D.html:1783,Clear,ClearUnderflowAndOverflow,1783,root/html602/TH2D.html,https://root.cern,https://root.cern/root/html602/TH2D.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Bool_tTH1::CanExtendAllAxes() const; virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTH1::ClearUnderflowAndOverflow(); virtual TObject*TH1::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*TH1::DrawNorm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3D.html:1783,Clear,ClearUnderflowAndOverflow,1783,root/html602/TH3D.html,https://root.cern,https://root.cern/root/html602/TH3D.html,2,['Clear'],['ClearUnderflowAndOverflow']
Usability,"binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:3709,clear,clearEvalError,3709,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,3,['clear'],['clearEvalError']
Usability,"bins in Y except; for Y's under- and overflow bins.; NOTE2: if maxdiff=0 (default), the first cell with content=c is returned. Double_t GetCorrelationFactor(Int_t axis1 = 1, Int_t axis2 = 2) const; -*-*-*Return correlation factor between axis1 and axis2; *-* ====================================================. Double_t GetCovariance(Int_t axis1 = 1, Int_t axis2 = 2) const; -*-*-*Return covariance between axis1 and axis2; *-* ====================================================. void GetRandom2(Double_t& x, Double_t& y); return 2 random numbers along axis x and y distributed according; the cellcontents of a 2-dim histogram. void GetStats(Double_t* stats) const; fill the array stats from the contents of this histogram; The array stats must be correctly dimensionned in the calling program.; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2; stats[6] = sumwxy. If no axis-subranges are specified (via TAxis::SetRange), the array stats; is simply a copy of the statistics quantities computed at filling time.; If sub-ranges are specified, the function recomputes these quantities; from the bin contents in the current axis ranges. Note that the mean value/RMS is computed using the bins in the currently; defined ranges (see TAxis::SetRange). By default the ranges include; all bins from 1 to nbins included, excluding underflows and overflows.; To force the underflows and overflows in the computation, one must; call the static function TH1::StatOverflows(kTRUE) before filling; the histogram. Double_t Integral(Option_t* option = """") const; Return integral of bin contents. Only bins in the bins range are considered.; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x and in y. Double_t Integral(Int_t binx1, Int_t binx2, Int_t biny1, Int_t biny2, Option_t* option = """") const; Return integral",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TH2.html:38385,simpl,simply,38385,root/html530/TH2.html,https://root.cern,https://root.cern/root/html530/TH2.html,2,['simpl'],['simply']
Usability,"bj = nullptr . ). protected . Read data of special kind of objects. ; Definition at line 851 of file TSQLFile.cxx. ◆ ReadSQLClassInfos(). void TSQLFile::ReadSQLClassInfos ; (; ). protected . Read all class infos from IdsTable. ; Definition at line 1911 of file TSQLFile.cxx. ◆ Recover(). Int_t TSQLFile::Recover ; (; ). inlinefinalvirtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented from TFile.; Definition at line 240 of file TSQLFile.h. ◆ ReOpen(). Int_t TSQLFile::ReOpen ; (; Option_t * ; m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:85077,usab,usable,85077,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['usab'],['usable']
Usability,"bj);; 448 }; 449 }; 450 }; 451 }; 452 // delete tlk;; 453 }; 454 fFirst.reset();; 455 fLast.reset();; 456 fCache.reset();; 457 fSize = 0;; 458 Changed();; 459}; 460 ; 461////////////////////////////////////////////////////////////////////////////////; 462/// Remove all objects from the list AND delete all heap based objects.; 463/// If option=""slow"" then keep list consistent during delete. This allows; 464/// recursive list operations during the delete (e.g. during the dtor; 465/// of an object in this list one can still access the list to search for; 466/// other not yet deleted objects).; 467 ; 468void TList::Delete(Option_t *option); 469{; 470 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 471 R__COLLECTION_WRITE_GUARD();; 472 ; 473 Bool_t slow = option ? (!strcmp(option, ""slow"") ? kTRUE : kFALSE) : kFALSE;; 474 ; 475 TList removeDirectory; // need to deregister these from their directory; 476 ; 477 if (slow) {; 478 ; 479 // In some case, for example TParallelCoord, a list (the pad's list of; 480 // primitives) will contain both the container and the containees; 481 // (the TParallelCoorVar) but if the Clear is being called from; 482 // the destructor of the container of this list, one of the first; 483 // thing done will be the remove the container (the pad) for the; 484 // list (of Primitives of the canvas) that was connecting it; 485 // (indirectly) to the list of cleanups.; 486 ; 487 // To preserve this connection (without introducing one when there was none),; 488 // we re-use fCache to inform RecursiveRemove of the node currently; 489 // being cleared/deleted.; 490 while (fFirst) {; 491 auto tlk = fFirst;; 492 fFirst = fFirst->fNext;; 493 fSize--;; 494 ; 495 // Make node available to RecursiveRemove; 496 tlk->fNext.reset();; 497 tlk->fPrev.reset();; 498 fCache = tlk;; 499 ; 500 // delete only heap objects; 501 auto obj = tlk->GetObject();; 502 if (obj && ROOT::Detail::HasBeenDeleted(obj)); 503 Error(""Delete"", ""A list is accessing an object (%p) already de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8cxx_source.html:14884,Clear,Clear,14884,doc/master/TList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TList_8cxx_source.html,1,['Clear'],['Clear']
Usability,"bj, Int_t kind, TList *slaves);  Broadcast an object to all slaves in the specified list. ;  ; Int_t BroadcastObject (const TObject *obj, Int_t kind=kMESS_OBJECT, ESlaves list=kActive);  Broadcast an object to all slaves in the specified list. ;  ; Int_t BroadcastRaw (const void *buffer, Int_t length, ESlaves list=kActive);  Broadcast a raw buffer of specified length to all slaves in the specified list. ;  ; Int_t BroadcastRaw (const void *buffer, Int_t length, TList *slaves);  Broadcast a raw buffer of specified length to all slaves in the specified list. ;  ; Int_t BuildPackage (const char *package, EBuildPackageOpt opt=kBuildAll, Int_t chkveropt=TPackMgr::kCheckROOT, TList *workers=0);  Build specified package. ;  ; Bool_t CheckFile (const char *file, TSlave *sl, Long_t modtime, Int_t cpopt=(kCp|kCpBin));  Check if a file needs to be send to the slave. ;  ; void CleanGDirectory (TList *ol);  Remove links to objects in list 'ol' from gDirectory. ;  ; void ClearDataProgress (Int_t r, Int_t t);  Progress bar for clear data. ;  ; Int_t Collect (const TSlave *sl, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from slave sl. ;  ; Int_t Collect (TMonitor *mon, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from the slave servers. ;  ; Int_t CollectInputFrom (TSocket *s, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect and analyze available input from socket s. ;  ; Bool_t CreateMerger (TSlave *sl, Int_t port);  Create a new merger. ;  ; void DeActivateAsyncInput ();  De-activate a-sync input handler. ;  ; Int_t DisablePackage (const char *package);  Remove a specific package. ;  ; Int_t DisablePackages ();  Remove all packages. ;  ; Int_t Exec (const char *cmd, ESlaves list, Bool_t plusMaster);  Send command to be executed on the PROOF master and/or slaves. ;  ; void FinalizationDone ();  ; Int_t FindNextFreeMerger ();  Return a merger, which is both active and still accepts some workers to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:47636,Clear,ClearDataProgress,47636,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,"['Clear', 'Progress bar', 'clear']","['ClearDataProgress', 'Progress bar', 'clear']"
Usability,"bjArray *branchNames) overrideUpdate the fBranchIndexCache collection to match the current TTree given the ordered list of branch n...Definition TTreePerfStats.cxx:360; TTreePerfStats::SetLoadedvoid SetLoaded(TBranch *b, size_t basketNumber) overrideDefinition TTreePerfStats.h:145; TTreePerfStats::GetGraphTimeTGraphErrors * GetGraphTime()Definition TTreePerfStats.h:100; TTreePerfStats::GetDuplicateBasketCacheBasketList_t GetDuplicateBasketCache() constReturn the collection of baskets which have been read by the TTreeCache more than once.Definition TTreePerfStats.cxx:424; TTreePerfStats::SetMissedvoid SetMissed(size_t bi, size_t basketNumber) overrideDefinition TTreePerfStats.h:150; TTreePerfStats::fCpuTimeDouble_t fCpuTimeCpu time.Definition TTreePerfStats.h:59; TTreePerfStats::GetCpuTimevirtual Double_t GetCpuTime() constDefinition TTreePerfStats.h:97; TTreePerfStats::SetFilevoid SetFile(TFile *newfile) overrideDefinition TTreePerfStats.h:82; TTreePerfStats::SimpleEventvoid SimpleEvent(EEventType) overrideDefinition TTreePerfStats.h:115; TTreePerfStats::Finishvirtual void Finish()When the run is finished this function must be called to save the current parameters in the file and ...Definition TTreePerfStats.cxx:328; TTreePerfStats::GetNameconst char * GetName() const overrideReturns name of object.Definition TTreePerfStats.h:102; TTreePerfStats::Paintvoid Paint(Option_t *chopt="""") overrideDraw the TTree I/O perf graph.Definition TTreePerfStats.cxx:458; TTreePerfStats::GetBytesReadExtravirtual Long64_t GetBytesReadExtra() constDefinition TTreePerfStats.h:96; TTreePerfStats::SetTreeCacheSizevirtual void SetTreeCacheSize(Int_t nbytes)Definition TTreePerfStats.h:141; TTreePerfStats::SaveAsvoid SaveAs(const char *filename="""", Option_t *option="""") const overrideSave this object to filename.Definition TTreePerfStats.cxx:647; TTreePerfStats::FileReadEventvoid FileReadEvent(TFile *file, Int_t len, Double_t start) overrideRecord TTree file read event.Definition TTreePerfStat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreePerfStats_8h_source.html:15980,Simpl,SimpleEventvoid,15980,doc/master/TTreePerfStats_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreePerfStats_8h_source.html,2,['Simpl'],"['SimpleEvent', 'SimpleEventvoid']"
Usability,"bjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);. }. a.Delete();; }. One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete(); // or a.Clear() or a.Clear(""C""); }. To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:1663,Clear,Clear,1663,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,4,['Clear'],['Clear']
Usability,"bject * ; obj). static . static Obsolete function kept for back compatibility. ; In the near future will print a Warning, then will be deleted. ; Definition at line 466 of file TRef.cxx. ◆ SetStaticObject(). void TRef::SetStaticObject ; (; TObject * ; obj). static . Static function to set the object found on the Action on Demand function. ; This function may be called by the user in the function called when a ""EXEC:"" keyword is specified in the data member field of the TRef. The function can get access to the dereferencing TRef (i.e. this)using the static function GetStaticObject(). ; Definition at line 478 of file TRef.cxx. ◆ Streamer(). void TRef::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TRef. ; Reimplemented from TObject.; Definition at line 486 of file TRef.cxx. ◆ StreamerNVirtual(). void TRef::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 64 of file TRef.h. Friends And Related Symbol Documentation. ◆ operator!=. Bool_t operator!= ; (; const TRef & ; r1, . const TRef & ; r2 . ). friend . Return kTRUE if r1 and r2 do not point to the same object. ; Definition at line 329 of file TRef.cxx. ◆ operator==. Bool_t operator== ; (; const TRef & ; r1, . const TRef & ; r2 . ). friend . Return kTRUE if r1 and r2 point to the same object. ; Definition at line 320 of file TRef.cxx. Member Data Documentation. ◆ fgExecs. TObjArray * TRef::fgExecs = nullptr. staticprotected . Pointer to ProcessID when TRef was written. ; Definition at line 37 of file TRef.h. ◆ fgObject. TObject * TRef::fgObject = nullptr. staticprotected . Definition at line 38 of file TRef.h. ◆ fPID. TProcessID* TRef::fPID. protected . Definition at line 35 of file TRef.h. Libraries for TRef:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TRef.h; core/base/src/TRef.cxx. TRef. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRef.html:27216,Guid,Guide,27216,doc/master/classTRef.html,https://root.cern,https://root.cern/doc/master/classTRef.html,1,['Guid'],['Guide']
Usability,"bject is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - A TTree automatically creates a cache; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries (default to 100).; - A 'cached' TChain switches over to a new file. WHY DO WE NEED the TreeCache when doing data analysis?. When writing a TTree, the branch buffers are kept in memory.; A typical branch buffersize (before compression) is typically 32 KBytes.; After compression, the zipped buffer may be just a few Kbytes.; The branch buffers cannot be much larger in case of Trees with several; hundred or thousand branches.; When writing, this does not generate a performance problem because branch; buffers are always written sequentially and the OS is in general clever enough; to flush the data to the output file when a few MBytes of data have to be written.; When reading at the contrary, one may hit a performance problem when reading; across a network (LAN or WAN) and the network latency is high.; For example in a WAN with 10ms latency, reading 1000 buffers of 10 KBytes each; with no cache will imply 10s penalty where a local ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:1924,learn,learning,1924,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,4,['learn'],['learning']
Usability,"bject is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TProofPlayerRemote(TProof* proof = 0); { fProgressStatus = n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofPlayerRemote.html:19389,feedback,feedback,19389,root/html530/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html530/TProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"bject(const TBuffer3D&, Bool_t* = 0); virtual Int_tTGLViewer::AddObject(UInt_t, const TBuffer3D&, Bool_t* = 0); virtual voidTGLViewerBase::AddOverlayElement(TGLOverlayElement* el); TGLSceneInfo*TGLViewerBase::AddScene(TGLSceneBase* scene); virtual voidTObject::AppendPad(Option_t* option = """"); voidTGLViewer::ApplySelection(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; voidTGLViewer::AutoFade(Float_t fade, Float_t time = 1, Int_t steps = 10); virtual voidTGLViewer::BeginScene(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTGLViewer::BuildingScene() const; virtual Bool_tTGLViewer::CanLoopOnPrimitives() const; virtual voidTGLViewerBase::Changed(); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGLViewer::ClearCurrentOvlElm(); virtual voidTGLViewer::Clicked(TObject* obj)SIGNAL ; virtual voidTGLViewer::Clicked(TObject* obj, UInt_t button, UInt_t state)SIGNAL ; TGLClip*TGLViewerBase::Clip() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTGLViewer::CloseComposite(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); TGLColorSet&TGLViewer::ColorSet(); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; virtual voidCreateGLWidget(); TGLCamera&TGLViewer::CurrentCamera() const; TGLLo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLEmbeddedViewer.html:1789,Clear,ClearCurrentOvlElm,1789,root/html528/TGLEmbeddedViewer.html,https://root.cern,https://root.cern/root/html528/TGLEmbeddedViewer.html,6,['Clear'],['ClearCurrentOvlElm']
Usability,"bject(const TBuffer3D&, Bool_t* = 0); virtual Int_tTGLViewer::AddObject(UInt_t, const TBuffer3D&, Bool_t* = 0); virtual voidTGLViewerBase::AddOverlayElement(TGLOverlayElement* el); TGLSceneInfo*TGLViewerBase::AddScene(TGLSceneBase* scene); virtual voidTObject::AppendPad(Option_t* option = """"); voidTGLViewer::ApplySelection(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; voidTGLViewer::AutoFade(Float_t fade, Float_t time = 1, Int_t steps = 10); virtual voidTGLViewer::BeginScene(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTGLViewer::BuildingScene() const; virtual Bool_tTGLViewer::CanLoopOnPrimitives() const; virtual voidTGLViewerBase::Changed(); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGLViewer::ClearCurrentOvlElm(); virtual voidTGLViewer::Clicked(TObject* obj)SIGNAL ; virtual voidTGLViewer::Clicked(TObject* obj, UInt_t button, UInt_t state)SIGNAL ; TGLClip*TGLViewerBase::Clip() const; virtual TObject*TObject::Clone(const char* newname = """") const; voidClose(); virtual voidTGLViewer::CloseComposite(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); TGLColorSet&TGLViewer::ColorSet(); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; virtual voidCreateGLWidget(); TGLCamera&TGLViewer::CurrentCamera()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSAViewer.html:1738,Clear,ClearCurrentOvlElm,1738,root/html528/TGLSAViewer.html,https://root.cern,https://root.cern/root/html528/TGLSAViewer.html,6,['Clear'],['ClearCurrentOvlElm']
Usability,"bject(name);; 351 ; 352 // If the object ""name"" has not been found, the following code tries to; 353 // find it in TMultiGraph or THStack possibly present in the current pad.; 354 if (!obj) {; 355 TList *lop = gPad->GetListOfPrimitives();; 356 if (lop) {; 357 TIter next(lop);; 358 while(auto o = next()) {; 359 if ( o->InheritsFrom(TMultiGraph::Class() ) ) {; 360 TList * grlist = ((TMultiGraph *)o)->GetListOfGraphs();; 361 obj = grlist->FindObject(name);; 362 if (obj) break;; 363 }; 364 if ( o->InheritsFrom(THStack::Class() ) ) {; 365 TList * hlist = ((THStack *)o)->GetHists();; 366 obj = hlist->FindObject(name);; 367 if (obj) break;; 368 }; 369 }; 370 }; 371 }; 372 ; 373 return AddEntry( obj, label, option );; 374}; 375 ; 376////////////////////////////////////////////////////////////////////////////////; 377/// Clear all entries in this legend, including the header.; 378 ; 379void TLegend::Clear( Option_t *); 380{; 381 if (!fPrimitives) return;; 382 fPrimitives->Delete();; 383}; 384 ; 385////////////////////////////////////////////////////////////////////////////////; 386/// Copy this legend into ""obj"".; 387 ; 388void TLegend::Copy(TObject &obj) const; 389{; 390 auto &tgt = static_cast<TLegend &> (obj);; 391 TPave::Copy(tgt);; 392 TAttText::Copy(tgt);; 393 tgt.fEntrySeparation = fEntrySeparation;; 394 tgt.fMargin = fMargin;; 395 tgt.fNColumns = fNColumns;; 396 ; 397 if (tgt.fPrimitives) {; 398 tgt.fPrimitives->Delete();; 399 delete tgt.fPrimitives;; 400 tgt.fPrimitives = nullptr;; 401 }; 402 if (fPrimitives) {; 403 tgt.fPrimitives = new TList();; 404 TIter next(fPrimitives);; 405 while (auto entry = (TLegendEntry *) next()); 406 tgt.fPrimitives->Add(new TLegendEntry(*entry));; 407 }; 408}; 409 ; 410////////////////////////////////////////////////////////////////////////////////; 411/// Delete entry at the mouse position.; 412 ; 413void TLegend::DeleteEntry(); 414{; 415 if ( !fPrimitives ) return;; 416 TLegendEntry* entry = GetEntry(); // get entry pointed by the mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLegend_8cxx_source.html:13700,Clear,Clear,13700,doc/master/TLegend_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLegend_8cxx_source.html,1,['Clear'],['Clear']
Usability,"bject* mother); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user). Data Members; public:. enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_tTChair::fLastIndxindex pof the last used table row;; void*TChair::fLastRowpointer to the last used table row; fLastRow = table[fLastIndx]; TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; TTable*TChair::fTablethe ""TTable"" object this object is pthe proxy for; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColumnView(const char* colName = """", TTable* table = 0); constructor. ~TColumnView(); destructor. void Browse(TBrowser* b); Create a column histogram for the simple column. TH1 * Histogram(const char* selection = """"); Create a histogram from the context menu. Bool_t IsFolder() const; Treat the column with the pointer to the ""Ptr"" as a ""folder"". TColumnView(const char* colName = """", TTable* table = 0). » Author: Valery Fine(fine@bnl.gov) 13/03/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TColumnView.h 21414 2007-12-17 14:15:59Z brun $ » Last generated: 2009-12-07 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TColumnView.html:10977,simpl,simple,10977,root/html526/TColumnView.html,https://root.cern,https://root.cern/root/html526/TColumnView.html,1,['simpl'],['simple']
Usability,"bject* mother); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user). Data Members; public:. enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_tTChair::fLastIndxindex pof the last used table row;; void*TChair::fLastRowpointer to the last used table row; fLastRow = table[fLastIndx]; TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; TTable*TChair::fTablethe ""TTable"" object this object is pthe proxy for; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColumnView(const char* colName = """", TTable* table = 0); constructor. ~TColumnView(); destructor. void Browse(TBrowser* b); Create a column histogram for the simple column. TH1 * Histogram(const char* selection = """"); Create a histogram from the context menu. Bool_t IsFolder() const; Treat the column with the pointer to the ""Ptr"" as a ""folder"". TColumnView(const char* colName = """", TTable* table = 0). » Author: Valery Fine(fine@bnl.gov) 13/03/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TColumnView.h 21414 2007-12-17 14:15:59Z brun $ » Last generated: 2010-09-23 20:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TColumnView.html:10968,simpl,simple,10968,root/html528/TColumnView.html,https://root.cern,https://root.cern/root/html528/TColumnView.html,1,['simpl'],['simple']
Usability,"bject* mother); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user). Data Members; public:. enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_tTChair::fLastIndxindex pof the last used table row;; void*TChair::fLastRowpointer to the last used table row; fLastRow = table[fLastIndx]; TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; TTable*TChair::fTablethe ""TTable"" object this object is pthe proxy for; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColumnView(const char* colName = """", TTable* table = 0); constructor. ~TColumnView(); destructor. void Browse(TBrowser* b); Create a column histogram for the simple column. TH1 * Histogram(const char* selection = """"); Create a histogram from the context menu. Bool_t IsFolder() const; Treat the column with the pointer to the ""Ptr"" as a ""folder"". TColumnView(const char* colName = """", TTable* table = 0). » Author: Valery Fine(fine@bnl.gov) 13/03/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TColumnView.h 21414 2007-12-17 14:15:59Z brun $ » Last generated: 2011-07-04 15:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TColumnView.html:11068,simpl,simple,11068,root/html530/TColumnView.html,https://root.cern,https://root.cern/root/html530/TColumnView.html,1,['simpl'],['simple']
Usability,"bject* mother); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user). Data Members; public:. enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_tTChair::fLastIndxindex pof the last used table row;; void*TChair::fLastRowpointer to the last used table row; fLastRow = table[fLastIndx]; TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; TTable*TChair::fTablethe ""TTable"" object this object is pthe proxy for; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColumnView(const char* colName = """", TTable* table = 0); constructor. ~TColumnView(); destructor. void Browse(TBrowser* b); Create a column histogram for the simple column. TH1 * Histogram(const char* selection = """"); Create a histogram from the context menu. Bool_t IsFolder() const; Treat the column with the pointer to the ""Ptr"" as a ""folder"". TColumnView(const char* colName = """", TTable* table = 0). » Author: Valery Fine(fine@bnl.gov) 13/03/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TColumnView.h 21414 2007-12-17 14:15:59Z brun $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TColumnView.html:11068,simpl,simple,11068,root/html532/TColumnView.html,https://root.cern,https://root.cern/root/html532/TColumnView.html,1,['simpl'],['simple']
Usability,"bject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:2243,Clear,ClearInputData,2243,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,6,['Clear'],['ClearInputData']
Usability,"bject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Unlock ();  Unlock the directory. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLockPath.html:1732,Clear,Clear,1732,doc/master/classTLockPath.html,https://root.cern,https://root.cern/doc/master/classTLockPath.html,1,['Clear'],['Clear']
Usability,"bject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual TGridJob * Submit (const char *);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGrid.html:2967,Clear,Clear,2967,doc/master/classTGrid.html,https://root.cern,https://root.cern/doc/master/classTGrid.html,1,['Clear'],['Clear']
Usability,"bject.; Definition at line 81 of file TExMap.h. ◆ operator()() [1/2]. Long64_t & TExMap::operator() ; (; Long64_t ; key). inline . Definition at line 79 of file TExMap.h. ◆ operator()() [2/2]. Long64_t & TExMap::operator() ; (; ULong64_t ; hash, . Long64_t ; key . ). Return a reference to the value belonging to the key with the specified hash value. ; If the key does not exist it will be added. NOTE: the reference will be invalidated an Expand() triggered by an Add() or another operator() call. ; Definition at line 139 of file TExMap.cxx. ◆ operator=(). TExMap & TExMap::operator= ; (; const TExMap & ; map). Assignment operator. ; Definition at line 64 of file TExMap.cxx. ◆ Remove() [1/2]. void TExMap::Remove ; (; Long64_t ; key). inline . Definition at line 76 of file TExMap.h. ◆ Remove() [2/2]. void TExMap::Remove ; (; ULong64_t ; hash, . Long64_t ; key . ). Remove entry with specified key from the TExMap. ; Definition at line 217 of file TExMap.cxx. ◆ Streamer(). void TExMap::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TObject.; Definition at line 306 of file TExMap.cxx. ◆ StreamerNVirtual(). void TExMap::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file TExMap.h. Friends And Related Symbol Documentation. ◆ TExMapIter. friend class TExMapIter. friend . Definition at line 35 of file TExMap.h. Member Data Documentation. ◆ fSize. Int_t TExMap::fSize. private . Definition at line 51 of file TExMap.h. ◆ fTable. Assoc_t* TExMap::fTable. private . Definition at line 50 of file TExMap.h. ◆ fTally. Int_t TExMap::fTally. private . Definition at line 52 of file TExMap.h. Libraries for TExMap:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TExMap.h; core/cont/src/TExMap.cxx. TExMap. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExMap.html:17631,Guid,Guide,17631,doc/master/classTExMap.html,https://root.cern,https://root.cern/doc/master/classTExMap.html,1,['Guid'],['Guide']
Usability,"bject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleInterval.html:7298,Simpl,SimpleInterval,7298,root/html602/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleInterval.html,4,['Simpl'],['SimpleInterval']
Usability,"bject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. UInt_tfNbPntsNumber of points describing the shape; UInt_tfNbPolsNumber of polygons describing the shape; UInt_tfNbSegsNumber of segments describing the shape; UInt_tfPntsCapacityCurrent capacity of fPnts space; UInt_tfPolsCapacityCurrent capacity of fSegs space; UInt_tfSectionsSection validity flags; UInt_tfSegsCapacityCurrent capacity of fSegs space; const Int_tfTypePrimitive type - predefined ones in TBuffer3DTypes.h; static UInt_tfgCSLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBuffer3D(Int_t type, UInt_t reqPnts = 0, UInt_t reqPntsCapacity = 0, UInt_t reqSegs = 0, UInt_t reqSegsCapacity = 0, UInt_t reqPols = 0, UInt_t reqPolsCapacity = 0); Destructor; Construct from supplied shape type and raw sizes. ~TBuffer3D(); Destructor. void Init(); Initialise buffer. void ClearSectionsValid(); Clear any sections marked valid. void SetLocalMasterIdentity(); Set kRaw tesselation section of buffer with supplied sizes; Set fLocalMaster in section kCore to identity. void SetAABoundingBox(const Double_t[3] origin, const Double_t[3] halfLengths); Set fBBVertex in kBoundingBox section to a axis aligned (local) BB; using supplied origin and box half lengths. 7-------6; /| /|; 3-------2 |; | 4-----|-5; |/ |; 0-------1. Bool_t SetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity); Set kRaw tesselation section of buffer with supplied sizes. UInt_t GetCSLevel(); return CS level. void IncCSLevel(); increment CS level. UInt_t DecCSLevel(); decrement CS level. TBuffer3D(const TBuffer3D& ); Non-copyable class. const TBuffer3D & operator=(const TBuffer3D& ). void SetSectionsValid(UInt_t mask); Section validity flags. { fSections |= mask & kAll; }. Bool_t SectionsValid(UInt_t mask) const; { return (Bool_t) (GetSections",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBuffer3D.html:16886,Clear,ClearSectionsValid,16886,root/html602/TBuffer3D.html,https://root.cern,https://root.cern/root/html602/TBuffer3D.html,4,['Clear'],"['Clear', 'ClearSectionsValid']"
Usability,"bject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveProjectionManager.html:2611,Clear,ClearStamps,2611,root/html530/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html530/TEveProjectionManager.html,5,['Clear'],['ClearStamps']
Usability,"bject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveShape::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoShape.html:2835,Clear,ClearStamps,2835,root/html528/TEveGeoShape.html,https://root.cern,https://root.cern/root/html528/TEveGeoShape.html,3,['Clear'],['ClearStamps']
Usability,"bject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleInterval.html:7436,Simpl,SimpleInterval,7436,root/html602/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleInterval.html,2,['Simpl'],['SimpleInterval']
Usability,"bject::EmitVA(const char* signal, Int_t nargs, va_list va); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*TProof::GetDataSet(const char* dataset, const char* optStr = """"); TMap*TProof::GetDataSetQuota(const char* optStr = """"); virtual TMap*TProof::GetDataSets(const char* uri = """", const char* optStr = """"); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTProof::Getenv(const char* env, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofCondor.html:6903,Feedback,Feedback,6903,root/html534/TProofCondor.html,https://root.cern,https://root.cern/root/html534/TProofCondor.html,2,['Feedback'],['Feedback']
Usability,"bject::MakeZombie(). private:. TMVA::MsgLogger&Log() const; TStringSecToText(Double_t, Bool_t) const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Bool_tfColourfulOutputflag for use of colors; TMVA::MsgLogger*fLoggerthe output logger; Int_tfNcountsreference number of ""counts""; TStringfPrefixprefix for outputs; static const TStringfgClassNameused for output; static const Int_tfgNbinsnumber of bins in progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Timer(const char* prefix = """", Bool_t colourfulOutput = kTRUE); constructor. Timer(Int_t ncounts, const char* prefix = """", Bool_t colourfulOutput = kTRUE); standard constructor: ncounts gives the total number of counts that; the loop will iterate through. At each call of the timer, the current; number of counts is provided by the user, so that the timer can obtain; the due time from linearly interpolating the spent time. ~Timer( void ); destructor. void Init(Int_t ncounts); timer initialisation. void Reset( void ); resets timer. Double_t ElapsedSeconds( void ); computes elapsed tim in seconds. TString GetElapsedTime(Bool_t Scientific = kTRUE); returns pretty string with elaplsed time. TString GetLeftTime(Int_t icounts); returns pretty string with time left. void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Timer.html:7112,progress bar,progress bar,7112,root/html602/TMVA__Timer.html,https://root.cern,https://root.cern/root/html602/TMVA__Timer.html,2,['progress bar'],['progress bar']
Usability,"bjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; AppendTree(TTree *tree)TTreeViewer; AreAllSignalsBlocked()TQObjectstatic; AreSignalsBlocked() constTQObjectinline; BindKey(const TGWindow *w, Int_t keycode, Int_t modifier) constTGMainFramevirtual; BlockAllSignals(Bool_t b)TQObjectstatic; BlockSignals(Bool_t b)TQObjectinline; Browse(TBrowser *b)TObjectvirtual; BuildInterface()TTreeViewerprivate; ChangeBackground(Pixel_t back)TGFramevirtual; ChangedBy(const char *method)TQObjectinlinevirtual; ChangeOptions(UInt_t options) overrideTGCompositeFramevirtual; ChangeSubframesBackground(Pixel_t back)TGCompositeFramevirtual; CheckConnectArgs(TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot)TQObjectprotectedstatic; CheckedHash()TObjectinline; Class()TTreeViewerstatic; Class_Name()TTreeViewerstatic; Class_Version()TTreeViewerinlinestatic; ClassName() constTObjectvirtual; Cleanup()TGCompositeFramevirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; CloseWindow() overrideTTreeViewervirtual; CollectClassSignalLists(TList &list, TClass *cls)TQObject; Compare(const TObject *obj) constTObjectvirtual; CompressName(const char *method_name)TQObjectprotectedstatic; Connect(const char *signal, const char *receiver_class, void *receiver, const char *slot)TQObject; Connect(TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot)TQObjectstatic; Connect(const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot)TQObjectstatic; Connected(const char *)TQObjectinlinevirtual; ConnectToClass(TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot)TQObjectprotectedstatic; ConnectToClass(const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot)TQObjectprotectedstatic; Contains(Int_t x, Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeViewer-members.html:1484,Clear,Clear,1484,doc/master/classTTreeViewer-members.html,https://root.cern,https://root.cern/doc/master/classTTreeViewer-members.html,1,['Clear'],['Clear']
Usability,"bjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TJSONStackObj:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TJSONStackObj(). TJSONStackObj::TJSONStackObj ; (; ). default . keep actual class version, workaround for ReadVersion in custom streamer . ◆ ~TJSONStackObj(). TJSONStackObj::~TJSONStackObj ; (; ). inlineoverride . Definition at line 362 of file TBufferJSON.cxx. Member Function Documentation. ◆ AssignStl(). Bool_t TJSONStackObj::AssignStl ; (; TClass * ; cl, . Int_t ; map_convert, . const char * ; typename_tag . ). inline . Definition at line 442 of file TBufferJSON.cxx. ◆ ClearStl(). void TJSONStackObj::ClearStl ; (; ). inline . Definition at line 467 of file TBufferJSON.cxx. ◆ GetStlNode(). nlohmann::json * TJSONStackObj::GetStlNode ; (; ). inline . Definition at line 462 of file TBufferJSON.cxx. ◆ IsJsonArray(). Int_t TJSONStackObj::IsJsonArray ; (; nlohmann::json * ; json = nullptr, . const char * ; map_convert_type = nullptr . ). inline . checks if specified JSON node is array (compressed or not compressed) returns length of array (or -1 if failure) ; Definition at line 392 of file TBufferJSON.cxx. ◆ IsJsonString(). Bool_t TJSONStackObj::IsJsonString ; (; ). inline . Definition at line 387 of file TBufferJSON.cxx. ◆ IsStl(). Bool_t TJSONStackObj::IsStl ; (; ); const. inline . Definition at line 440 of file TBufferJSON.cxx. ◆ IsStreamerElement(). Bool_t TJSONStackObj::IsStreamerElement ; (; ); const. inline . Definition at line 370 of file TBufferJSON.cxx. ◆ IsStreamerInfo(). Bool_t TJSONStackObj::IsStreamerInfo ; (; ); const. inline . Definition at line 368 of file TBufferJSON.c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTJSONStackObj.html:12094,Clear,ClearStl,12094,doc/master/classTJSONStackObj.html,https://root.cern,https://root.cern/doc/master/classTJSONStackObj.html,1,['Clear'],['ClearStl']
Usability,"bjects in list 'ol' from gDirectory. ; Definition at line 3046 of file TProof.cxx. ◆ CleanupSession(). Int_t TProof::CleanupSession ; (; const char * ; sessiontag). Send cleanup request for the session specified by tag. ; Definition at line 6092 of file TProof.cxx. ◆ ClearCache(). void TProof::ClearCache ; (; const char * ; file = 0). virtual . Remove file from all file caches. ; If file is 0 or """" or ""*"", remove all the files ; Reimplemented in TProofLite.; Definition at line 7714 of file TProof.cxx. ◆ ClearData(). void TProof::ClearData ; (; UInt_t ; what = kUnregistered, . const char * ; dsname = 0 . ). Remove files for the data directory. ; The option 'what' can take the values: kPurge remove all files and directories under '~/data' kUnregistered remove only files not in registered datasets (default) kDataset remove files belonging to dataset 'dsname' User is prompt for confirmation, unless kForceClear is ORed with the option ; Definition at line 7412 of file TProof.cxx. ◆ ClearDataProgress(). void TProof::ClearDataProgress ; (; Int_t ; r, . Int_t ; t . ). private . Progress bar for clear data. ; Definition at line 7670 of file TProof.cxx. ◆ ClearDataSetCache(). void TProof::ClearDataSetCache ; (; const char * ; dataset = 0). virtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented in TProofLite.; Definition at line 10896 of file TProof.cxx. ◆ ClearFeedback(). void TProof::ClearFeedback ; (; ). Clear feedback list. ; Definition at line 10012 of file TProof.cxx. ◆ ClearInput(). void TProof::ClearInput ; (; ). Clear input object list. ; Definition at line 9742 of file TProof.cxx. ◆ ClearInputData() [1/2]. void TProof::ClearInputData ; (; const char * ; name). Remove obj 'name' form the input data list;. ; Definition at line 9572 of file TProof.cxx. ◆ ClearInputData() [2/2]. void TProof::ClearInputData ; (; TObject * ; obj = 0). Remove obj form the input data list; if obj is null (default), clear the input data info.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:75026,Clear,ClearDataProgress,75026,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['ClearDataProgress']
Usability,"bjects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExMap.html:2938,Clear,Clear,2938,doc/master/classTExMap.html,https://root.cern,https://root.cern/doc/master/classTExMap.html,1,['Clear'],['Clear']
Usability,"ble (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the fit model function ;  ; bool SetVariable (unsigned int, const std::string &, double, double) override;  set free variable (dummy impl. since there is no need to set variables in the Linear Fitter) ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearMinimizer.html:3190,Clear,Clear,3190,doc/master/classTLinearMinimizer.html,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html,1,['Clear'],['Clear']
Usability,"ble - decides whether the channel grid is shown or not -color - color of channel grid. ; Definition at line 7271 of file TSpectrum2Painter.cxx. ◆ SetChanMarks(). void TSpectrum2Painter::SetChanMarks ; (; Int_t ; enable, . Int_t ; color, . Int_t ; width, . Int_t ; height, . Int_t ; style . ). Sets enables/disables drawing of channel marks and sets their attributes: . enable - decides whether the channel marks are shown or not; color - color of channel marks; width - width of channel marks in pixels; height - height of channel marks in pixels; style - style of channel marks (dot, cross, star, rectangle, X, diamond, triangle) . Definition at line 7244 of file TSpectrum2Painter.cxx. ◆ SetColorAlgorithm(). void TSpectrum2Painter::SetColorAlgorithm ; (; Int_t ; colorAlgorithm). Sets shading color algorithm: . olorAlgorithm - applies only for rainbowed display modes (rgb smooth algorithm, rgb modulo color component, cmy smooth algorithm,; cmy modulo color component, cie smooth algorithm,; cie modulo color component, yiq smooth algorithm,; yiq modulo color component, hsv smooth algorithm,; hsv modulo color component, it does not apply for simple display modes algorithm group . Definition at line 7150 of file TSpectrum2Painter.cxx. ◆ SetColorIncrements(). void TSpectrum2Painter::SetColorIncrements ; (; Double_t ; r, . Double_t ; g, . Double_t ; b . ). Sets color increments between two color levels for r, g, b components: . r, g, b - color increments between two color levels . Definition at line 7162 of file TSpectrum2Painter.cxx. ◆ SetContourWidth(). void TSpectrum2Painter::SetContourWidth ; (; Int_t ; width). Sets width between horizontal slices: . width - width between contours, applies only for contours display mode . Definition at line 7218 of file TSpectrum2Painter.cxx. ◆ SetDisplayMode(). void TSpectrum2Painter::SetDisplayMode ; (; Int_t ; modeGroup, . Int_t ; displayMode . ). Sets display group mode and display mode: . modeGroup - the following group modes can be set: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:53185,simpl,simple,53185,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['simpl'],['simple']
Usability,"ble Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; Friends |; List of all members ; ROOT::Experimental::RDrawable Class ReferenceGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; Base class for drawable entities: objects that can be painted on a RPad. ; AuthorsAxel Naumann axel@.nosp@m.cern.nosp@m..ch, Sergey Linev s.lin.nosp@m.ev@g.nosp@m.si.de ; Date2015-08-07 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 108 of file RDrawable.hxx. Classes; class  RDisplayContext;  . Public Types; using Version_t = uint64_t;  . Public Member Functions;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  ; virtual void UseStyle (const std::shared_ptr< RStyle > &style);  . Protected Member Functions;  RDrawable (const RDrawable &)=delete;  ; virtual void CollectShared (Internal::RIOSharedVector_t &);  ; virtual std::unique_ptr< RDisplayItem > Display (const RDisplayContext &);  Creates display item for drawable By default item contains drawable data itself. ;  ; virtual void Execute (const std::string &);  ; RAttrMap & GetAttrMap ();  ; const RAttrMap & GetAttrMap () const;  ; Version_t GetVersion () const;  ; virtual bool IsFrameRequired () const;  ; bool MatchSelector (const std::string &selector) const;  Preliminary method which checks if drawable matches with given selector Following selector are allowed: ""type"" or ""#id"" or "".class_name"" Here type is drawable kind like 'rect' or 'pad' id is drawable identifier, specified with RDrawable::SetId() method class_name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RDrawable.html:937,Clear,ClearStyle,937,doc/master/classROOT_1_1Experimental_1_1RDrawable.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RDrawable.html,1,['Clear'],['ClearStyle']
Usability,"ble normal_quantile_c(double z, double sigma)Inverse ( ) of the cumulative distribution function of the upper tail of the normal (Gaussian) distri...Definition QuantFuncMathCore.cxx:126; ROOT::Math::beta_quantile_cdouble beta_quantile_c(double x, double a, double b)Inverse ( ) of the cumulative distribution function of the lower tail of the beta distribution (beta_...Definition QuantFuncMathCore.cxx:16; ROOT::Math::beta_quantiledouble beta_quantile(double x, double a, double b)Inverse ( ) of the cumulative distribution function of the upper tail of the beta distribution (beta_...Definition QuantFuncMathCore.cxx:26; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; ROOT::Detail::HasBeenDeletedR__ALWAYS_INLINE bool HasBeenDeleted(const TObject *obj)Check if the TObject's memory has been deleted.Definition TObject.h:402; TMath::AreEqualRelBool_t AreEqualRel(Double_t af, Double_t bf, Double_t relPrec)Comparing floating points.Definition TMath.h:426; graphDefinition graph.py:1; v@ vDefinition rootcling_impl.cxx:3699; Beta_interval_lengthDefinition TEfficiency.cxx:1368; Beta_interval_length::fBetaDouble_t fBetaDefinition TEfficiency.cxx:1387; Beta_interval_length::Beta_interval_lengthBeta_interval_length(Double_t level, Double_t alpha, Double_t beta)Definition TEfficiency.cxx:1369; Beta_interval_length::fCLDouble_t fCLDefinition TEfficiency.cxx:1385; Beta_interval_length::fAlphaDouble_t fAlphaDefinition TEfficiency.cxx:1386; Beta_interval_length::LowerMaxDouble_t LowerMax()Definition TEfficiency.cxx:1373; Beta_interval_length::operator()Double_t operator()(double lower) constDefinition TEfficiency.cxx:1378. histhistsrcTEfficiency.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:188383,Guid,Guide,188383,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ble nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngRanLuxD1:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngRanLuxD1::BaseType. Definition at line 401 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngRanLuxD1(). ROOT::Math::GSLRngRanLuxD1::GSLRngRanLuxD1 ; (; ). Definition at line 424 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngRanLuxD1:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngRanLuxD1. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html:5767,Guid,Guide,5767,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html,1,['Guid'],['Guide']
Usability,"ble nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngRanLuxD2:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngRanLuxD2::BaseType. Definition at line 415 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngRanLuxD2(). ROOT::Math::GSLRngRanLuxD2::GSLRngRanLuxD2 ; (; ). Definition at line 431 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngRanLuxD2:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngRanLuxD2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html:5767,Guid,Guide,5767,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html,1,['Guid'],['Guide']
Usability,"ble nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngRanLuxS1:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngRanLuxS1::BaseType. Definition at line 371 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngRanLuxS1(). ROOT::Math::GSLRngRanLuxS1::GSLRngRanLuxS1 ; (; ). Definition at line 410 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngRanLuxS1:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngRanLuxS1. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html:5751,Guid,Guide,5751,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html,1,['Guid'],['Guide']
Usability,"ble nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngRanLuxS2:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngRanLuxS2::BaseType. Definition at line 386 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngRanLuxS2(). ROOT::Math::GSLRngRanLuxS2::GSLRngRanLuxS2 ; (; ). Definition at line 417 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngRanLuxS2:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngRanLuxS2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html:5750,Guid,Guide,5750,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,1,['Guid'],['Guide']
Usability,"ble to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGeoXtru() [1/4]. TGeoXtru::TGeoXtru ; (; const TGeoXtru & ; ). protecteddelete . mutex for thread data . ◆ TGeoXtru() [2/4]. TGeoXtru::TGeoXtru ; (; ). ◆ TGeoXtru() [3/4]. TGeoXtru::TGeoXtru ; (; Int_t ; nz). ◆ TGeoXtru() [4/4]. TGeoXtru::TGeoXtru ; (; Double_t * ; param). ◆ ~TGeoXtru(). TGeoXtru::~TGeoXtru ; (; ). override . Member Function Documentation. ◆ Capacity(). Double_t TGeoXtru::Capacity ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Class(). static TClass * TGeoXtru::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoXtru::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoXtru::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 121 of file TGeoXtru.h. ◆ ClearThreadData(). void TGeoXtru::ClearThreadData ; (; ); const. overridevirtual . Reimplemented from TGeoShape. ◆ ComputeBBox(). void TGeoXtru::ComputeBBox ; (; ). overridevirtual . Reimplemented from TGeoBBox. ◆ ComputeNormal(). void TGeoXtru::ComputeNormal ; (; const Double_t * ; point, . const Double_t * ; dir, . Double_t * ; norm . ). overridevirtual . Reimplemented from TGeoBBox. ◆ ComputeNormal_v(). void TGeoXtru::ComputeNormal_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; norms, . Int_t ; vecsize . ). overridevirtual . Reimplemented from TGeoBBox. ◆ Contains(). Bool_t TGeoXtru::Contains ; (; const Double_t * ; point); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Contains_v(). void TGeoXtru::Contains_v ; (; const Double_t * ; points, . Bool_t * ; inside, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ CreateThreadData(). void TGeoXtru::CreateThreadData ; (; Int_t ; nthreads). overridevirtual . Reimplemented from TGeoShape. ◆ DeclFileName(). static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoXtru.html:24233,Clear,ClearThreadData,24233,doc/master/classTGeoXtru.html,https://root.cern,https://root.cern/doc/master/classTGeoXtru.html,1,['Clear'],['ClearThreadData']
Usability,"ble() [3/3]. TRefTable::TRefTable ; (; const TRefTable & ; ). delete . Member Function Documentation. ◆ Add(). Int_t TRefTable::Add ; (; Int_t ; uid, . TProcessID * ; context = nullptr . ). virtual . Add a new uid to the table. ; we add a new pair (uid,fparent) to the map This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer ; Definition at line 88 of file TRefTable.cxx. ◆ AddInternalIdxForPID(). Int_t TRefTable::AddInternalIdxForPID ; (; TProcessID * ; procid). protected . Add the internal index for fProcessIDs, fAllocSize, etc given a PID. ; Definition at line 119 of file TRefTable.cxx. ◆ Class(). static TClass * TRefTable::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRefTable::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRefTable::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 93 of file TRefTable.h. ◆ Clear(). void TRefTable::Clear ; (; Option_t * ; = """"). overridevirtual . Clear all entries in the table. ; Reimplemented from TObject.; Definition at line 145 of file TRefTable.cxx. ◆ DeclFileName(). static const char * TRefTable::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 93 of file TRefTable.h. ◆ Expand(). Int_t TRefTable::Expand ; (; Int_t ; pid, . Int_t ; newsize . ). virtual . Expand fParentIDs to newsize for ProcessID pid. ; Definition at line 157 of file TRefTable.cxx. ◆ ExpandForIID(). Int_t TRefTable::ExpandForIID ; (; Int_t ; iid, . Int_t ; newsize . ). protectedvirtual . Expand fParentIDs to newsize for internel ProcessID index iid. ; Definition at line 167 of file TRefTable.cxx. ◆ ExpandPIDs(). void TRefTable::ExpandPIDs ; (; Int_t ; numpids). protected . Expand the arrays of managed PIDs. ; Definition at line 193 of file TRefTable.cxx. ◆ FillBuffer(). void TRefTable::FillBuffer ; (; TBuffer & ; b). virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefTable.html:16009,Clear,Clear,16009,doc/master/classTRefTable.html,https://root.cern,https://root.cern/doc/master/classTRefTable.html,1,['Clear'],['Clear']
Usability,"ble); virtual voidSetUID(UInt_t uid, TProcessID* context = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRefTable(); TRefTable(const TRefTable&); TRefTable(TObject* owner, Int_t size); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Int_tAddInternalIdxForPID(TProcessID* procid); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tExpandForIID(Int_t iid, Int_t newsize); voidExpandPIDs(Int_t numpids); Int_tFindPIDGUID(const char* guid) const; Int_tGetInternalIdxForPID(TProcessID* procid) const; Int_tGetInternalIdxForPID(Int_t pid) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TRefTable::(anonymous)kHaveWarnedReadingOld; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZomb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRefTable.html:6872,guid,guid,6872,root/html602/TRefTable.html,https://root.cern,https://root.cern/root/html602/TRefTable.html,2,['guid'],['guid']
Usability,"ble, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumiliMinimizer.html:3133,Clear,Clear,3133,doc/master/classTFumiliMinimizer.html,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html,1,['Clear'],['Clear']
Usability,"ble.cxx File Reference. #include ""TClassTable.h""; #include ""TClass.h""; #include ""TClassEdit.h""; #include ""TProtoClass.h""; #include ""TList.h""; #include ""TROOT.h""; #include ""TString.h""; #include ""TError.h""; #include ""TRegexp.h""; #include ""TObjString.h""; #include ""TMap.h""; #include ""TInterpreter.h""; #include <map>; #include <memory>; #include <typeinfo>; #include <cstdlib>; #include <string>; #include <mutex>. Include dependency graph for TClassTable.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TClassTable::NormalizeThenLock;  ; class  ROOT::TClassAlt;  ; class  ROOT::TClassRec;  ; class  ROOT::TForNamespace;  ; class  ROOT::TMapTypeToClassRec;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Macros; #define R__USE_STD_MAP;  . Functions; static int ClassComp (const void *a, const void *b);  ; static UInt_t ROOT::ClassTableHash (const char *name, UInt_t size);  ; static std::mutex & GetClassTableMutex ();  ; std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAddClassAlternate ();  . Variables; TClassTable * gClassTable;  . Macro Definition Documentation. ◆ R__USE_STD_MAP. #define R__USE_STD_MAP. Definition at line 143 of file TClassTable.cxx. Function Documentation. ◆ ClassComp(). static int ClassComp ; (; const void * ; a, . const void * ; b . ). static . Definition at line 794 of file TClassTable.cxx. ◆ GetClassTableMutex(). static std::mutex & GetClassTableMutex ; (; ). static . Definition at line 60 of file TClassTable.cxx. Variable Documentation. ◆ gClassTable. TClassTable* gClassTable. Definition at line 47 of file TClassTable.cxx. corecontsrcTClassTable.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx.html:2123,Guid,Guide,2123,doc/master/TClassTable_8cxx.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx.html,1,['Guid'],['Guide']
Usability,"ble.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement. ;  ; file  pyroot004_NumbaDeclare.py;   This tutorial illustrates how PyROOT supports declaring C++ callables from Python callables making them, for example, usable with RDataFrame. ;  ; file  pyroot005_tfile_context_manager.py;   This tutorial demonstrates the usage of the TFile class as a Python context manager. ;  ; file  pyroot006_tcontext_context_manager.py;   This tutorial demonstrates the usage of the TContext class as a Python context manager. ;  ; file  ratioplot.py;   Display two histograms and their ratio. ;  ; file  shapes.py;   Draw the geometry using the x3d viewver. ;  ; file  staff.py;   example of macro to read data from an ascii file and create a root file with a Tree. ;  ; file  surfaces.py;   Surfaces example ;  ; file  tornado.py;  Tornado example. ;  ; file  zdemo.py;   This macro is an example of graphs in log scales with annotations. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__pyroot.html:2314,usab,usable,2314,doc/master/group__tutorial__pyroot.html,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html,2,"['Guid', 'usab']","['Guide', 'usable']"
Usability,"bleRearrangeTransform::PrintTransformation ; (; std::ostream & ; o). virtual . prints the transformation ranges ; Reimplemented from TMVA::VariableTransformBase.; Definition at line 160 of file VariableRearrangeTransform.cxx. ◆ ReadFromXML(). void TMVA::VariableRearrangeTransform::ReadFromXML ; (; void * ; trfnode). virtual . Read the transformation matrices from the xml node. ; Implements TMVA::VariableTransformBase.; Definition at line 143 of file VariableRearrangeTransform.cxx. ◆ ReadTransformationFromStream(). void TMVA::VariableRearrangeTransform::ReadTransformationFromStream ; (; std::istream & ; , . const TString & ;  . ). inlinevirtual . Implements TMVA::VariableTransformBase.; Definition at line 59 of file VariableRearrangeTransform.h. ◆ Streamer(). virtual void TMVA::VariableRearrangeTransform::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::VariableTransformBase. ◆ StreamerNVirtual(). void TMVA::VariableRearrangeTransform::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 74 of file VariableRearrangeTransform.h. ◆ Transform(). const TMVA::Event * TMVA::VariableRearrangeTransform::Transform ; (; const Event * const ; ev, . Int_t ; cls . ); const. virtual . Implements TMVA::VariableTransformBase.; Definition at line 81 of file VariableRearrangeTransform.cxx. ◆ WriteTransformationToStream(). void TMVA::VariableRearrangeTransform::WriteTransformationToStream ; (; std::ostream & ; ); const. inlinevirtual . Implements TMVA::VariableTransformBase.; Definition at line 58 of file VariableRearrangeTransform.h. Libraries for TMVA::VariableRearrangeTransform:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/VariableRearrangeTransform.h; tmva/tmva/src/VariableRearrangeTransform.cxx. TMVAVariableRearrangeTransform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableRearrangeTransform.html:19838,Guid,Guide,19838,doc/master/classTMVA_1_1VariableRearrangeTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableRearrangeTransform.html,1,['Guid'],['Guide']
Usability,"ble_any. For example:; ROOT::TSpinMutex m;; std::condition_variable cv;; bool ready = false;; ; void worker_thread(); {; // Wait until main() sends data; std::unique_lock<ROOT::TSpinMutex> lk(m);; cv.wait(lk, []{return ready;});; [...]; }; worker_threadstatic void * worker_thread(void *thread_func_param)Definition civetweb.c:19086; ROOT::TSpinMutexA spin mutex class which respects the STL interface for mutexes.Definition TSpinMutex.hxx:42; mTMarker mDefinition textangle.C:8; {.cpp} ; Definition at line 42 of file TSpinMutex.hxx. Public Member Functions;  TSpinMutex ()=default;  ;  TSpinMutex (const TSpinMutex &)=delete;  ;  ~TSpinMutex ()=default;  ; void lock ();  ; TSpinMutex & operator= (const TSpinMutex &)=delete;  ; bool try_lock ();  ; void unlock ();  . Private Attributes; std::atomic_flag fAFlag = ATOMIC_FLAG_INIT;  . #include <ROOT/TSpinMutex.hxx>; Constructor & Destructor Documentation. ◆ TSpinMutex() [1/2]. ROOT::TSpinMutex::TSpinMutex ; (; ). default . ◆ TSpinMutex() [2/2]. ROOT::TSpinMutex::TSpinMutex ; (; const TSpinMutex & ; ). delete . ◆ ~TSpinMutex(). ROOT::TSpinMutex::~TSpinMutex ; (; ). default . Member Function Documentation. ◆ lock(). void ROOT::TSpinMutex::lock ; (; ). inline . Definition at line 53 of file TSpinMutex.hxx. ◆ operator=(). TSpinMutex & ROOT::TSpinMutex::operator= ; (; const TSpinMutex & ; ). delete . ◆ try_lock(). bool ROOT::TSpinMutex::try_lock ; (; ). inline . Definition at line 55 of file TSpinMutex.hxx. ◆ unlock(). void ROOT::TSpinMutex::unlock ; (; ). inline . Definition at line 54 of file TSpinMutex.hxx. Member Data Documentation. ◆ fAFlag. std::atomic_flag ROOT::TSpinMutex::fAFlag = ATOMIC_FLAG_INIT. private . Definition at line 45 of file TSpinMutex.hxx. Libraries for ROOT::TSpinMutex:. [legend]; The documentation for this class was generated from the following file:; core/thread/inc/ROOT/TSpinMutex.hxx. ROOTTSpinMutex. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSpinMutex.html:2393,Guid,Guide,2393,doc/v632/classROOT_1_1TSpinMutex.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSpinMutex.html,1,['Guid'],['Guide']
Usability,"ble_t &y1, const Double_t size, const Double_t angle, const Char_t *t, const Int_t length)Get the text bounding box.Definition TMathText.cxx:419; TMathText::GetBoundingBoxvoid GetBoundingBox(UInt_t &w, UInt_t &h, Bool_t angle=kFALSE) overrideGet the text width and height.Definition TMathText.cxx:477; TMathText::fRendererTMathTextRenderer * fRendererDefinition TMathText.h:24; TMathText::GetXsizeDouble_t GetXsize()Get X size.Definition TMathText.cxx:498; TMathText::GetAlignPointvoid GetAlignPoint(Double_t &x0, Double_t &y0, const Double_t size, const Double_t angle, const Char_t *t, const Int_t length, const Short_t align)Alignment.Definition TMathText.cxx:444; TMathText::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TMathText.cxx:676; TMathText::Rendervoid Render(const Double_t x, const Double_t y, const Double_t size, const Double_t angle, const Char_t *t, const Int_t length)Render the text.Definition TMathText.cxx:407; TMathText::~TMathText~TMathText() overrideDestructor.Definition TMathText.cxx:363; TMathText::DrawMathTextTMathText * DrawMathText(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters and copy object attributes.Definition TMathText.cxx:541; TMathText::TMathTextTMathText()Default constructor.Definition TMathText.cxx:345; TMathText::PaintMathTextvirtual void PaintMathText(Double_t x, Double_t y, Double_t angle, Double_t size, const char *text)Paint text (used by Paint()).Definition TMathText.cxx:577; TMathText::Copyvoid Copy(TObject &text) const overrideCopy.Definition TMathText.cxx:394; TObjectMother of all ROOT objects.Definition TObject.h:41; TTextBase class for several text objects.Definition TText.h:22; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17. graf2dgrafincTMathText.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMathText_8h_source.html:6610,Guid,Guide,6610,doc/master/TMathText_8h_source.html,https://root.cern,https://root.cern/doc/master/TMathText_8h_source.html,1,['Guid'],['Guide']
Usability,"ble_t * GetX() constDefinition TGraph.h:139; TGraph::SetNamevoid SetName(const char *name="""") overrideSet graph name.Definition TGraph.cxx:2381; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TPad::Dividevoid Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) overrideAutomatic pad generation by division.Definition TPad.cxx:1249; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TVirtualFitter::GetFitterstatic TVirtualFitter * GetFitter()static: return the current FitterDefinition TVirtualFitter.cxx:209; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; grTGraphErrors * grDefinition legend1.C:25; ROOT::Fit::GetConfidenceIntervalsbool GetConfidenceIntervals(const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95)compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors grDefinition HFitInterface.cxx:965; AuthorRene Brun ; Definition in file ConfidenceIntervals.C. tutorialsfitConfidenceIntervals.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ConfidenceIntervals_8C.html:9698,Guid,Guide,9698,doc/master/ConfidenceIntervals_8C.html,https://root.cern,https://root.cern/doc/master/ConfidenceIntervals_8C.html,1,['Guid'],['Guide']
Usability,"ble_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TSystem::Execvirtual Int_t Exec(const char *shellcmd)Execute a command.Definition TSystem.cxx:653; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; c1return c1Definition legend1.C:41; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::GetThreadPoolSizeUInt_t GetThreadPoolSize()Returns the size of ROOT's thread pool.Definition TROOT.cxx:577; TMVA_CNN_ClassificationDefinition TMVA_CNN_Classification.py:1; TMVA::Python_ExecutableTString Python_Executable()Function to find current Python executable used by ROOT If ""Python3"" is installed,...Definition PyMethodBase.cxx:43; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4; AuthorLorenzo Moneta ; Definition in file TMVA_CNN_Classification.C. tutorialstmvaTMVA_CNN_Classification.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:66515,Guid,Guide,66515,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Guid'],['Guide']
Usability,"ble_t e); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void Sumw2(); Enable calculation of errors. THnSparse* Rebin(Int_t group) const; Combine the content of ""group"" neighboring bins into; a new bin and return the resulting THnSparse.; For group=2 and a 3 dimensional histogram, all ""blocks""; of 2*2*2 bins will be put into a bin. void SetTitle(const char* title); Change (i.e. set) the title. If title is in the form ""stringt;string0;string1;string2 ...""; the histogram title is set to stringt, the title of axis0 to string0,; of axis1 to string1, of axis2 to string2, etc, just like it is done; for TH1/TH2/TH3.; To insert the character "";"" in one of the titles, one should use ""#;""; or ""#semicolon"". THnSparse* Rebin(const Int_t* group) const; Combine the content of ""group"" neighboring bins for each dimension; into a new bin and return the resulting THnSparse.; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins; will be grouped. void Reset(Option_t* option = """"); Clear the histogram. Double_t ComputeIntegral(); Calculate the integral of the histogram. void PrintBin(Long64_t idx, Option_t* options) const; Print bin with linex index ""idx"".; For valid options see PrintBin(Long64_t idx, Int_t* bin, Option_t* options). Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; Print one bin. If ""idx"" is != -1 use that to determine the bin,; otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; If ""options"" contains:; '0': only print bins with an error or content != 0; Return whether the bin was printed (depends on options). void PrintEntries(Long64_t from = 0, Long64_t howmany = -1, Option_t* options = 0) const; Print ""howmany"" entries starting at ""from"". If ""howmany"" is -1, print all.; If ""options"" contains:; 'x': print in the order of axis bins, i.e. (0,0,...,0), (0,0,...,1),...; '0': only print bins with content != 0. void Print(Option_t* option = """") const; Print a THnSparse. If ""option"" contains:; 'a': print axis details; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:24858,Clear,Clear,24858,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,3,['Clear'],['Clear']
Usability,"ble_t themin=0, Double_t themax=180, Double_t phimin=0, Double_t phimax=360)Make in one step a volume pointing to a sphere shape with given medium.Definition TGeoManager.cxx:3186; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; TGeoManager::SetNsegmentsvoid SetNsegments(Int_t nseg)Set number of segments for approximating circles in drawing.Definition TGeoManager.cxx:3594; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23; TGeoTranslationClass describing translations.Definition TGeoMatrix.h:116; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::AddNodevirtual TGeoNode * AddNode(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:975; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; TGeoVolume::SetLineColorvoid SetLineColor(Color_t lcolor) overrideSet the line color.Definition TGeoVolume.cxx:2169; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; AuthorOtto Schaile ; Definition in file nucleus.C. tutorialsglnucleus.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/nucleus_8C.html:5178,Guid,Guide,5178,doc/master/nucleus_8C.html,https://root.cern,https://root.cern/doc/master/nucleus_8C.html,1,['Guid'],['Guide']
Usability,"ble_t x0 = 0.0, Double_t x1 = 0.0) const; Double_tTUnfold::GetChi2A() const; Double_tTUnfold::GetChi2L() const; Double_tGetChi2Sys(); voidGetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0); voidGetDeltaSysSource(TH1* hist_delta, const char* source, const Int_t* binMap = 0); voidGetDeltaSysTau(TH1* delta, const Int_t* binMap = 0); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTUnfold::GetEmatrix(TH2* ematrix, const Int_t* binMap = 0) const; TH2D*TUnfold::GetEmatrix(const char* name, const char* title, Double_t x0 = 0.0, Double_t x1 = 0.0) const; voidGetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysBackgroundUncorr(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysTau(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixSysUncorr(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); voidGetEmatrixTotal(TH2* ematrix, const Int_t* binMap = 0); TH1D*TUnfold::GetFoldedOutput(const char* name, const char* title, Double_t y0 = 0.0, Double_t y1 = 0.0) const; virtual const char*TObject::GetIconName() const; TH1D*TUnfold::GetInput(const char* name, const char* title, Double_t y0 = 0.0, Double_t y1 = 0.0) const; virtual Double_tTUnfold::GetLcurveX() const; virtual Double_tTUnfold::GetLcurveY() const; TH2D*TUnfold::GetLsquared(const char* name, const char* title, Double_t x0 = 0.0, Double_t x1 = 0.0) const; virtual const char*TObject::GetName() const; Int_tTUnfold::GetNdf() const; Int_tTUnfold::GetNpar() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:8030,clear,clearEmat,8030,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,18,['clear'],['clearEmat']
Usability,"ble_tfPadTheta; const Float_t*fPhysicalShapeColor; Int_tfSelectedPart; TGLSelectionBufferfSelection; Int_tfSelectionBase; Bool_tfSelectionPass; Bool_tfUpdateSelection; TAxis*fXAxis; Double_tfXOYSectionPos; Double_tfXOZSectionPos; TAxis*fYAxis; Double_tfYOZSectionPos; TAxis*fZAxis; vector<Double_t>fZLevels. private:. const TColor*fPadColor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Paint(); Draw lego/surf/whatever you can. void PrintPlot() const; Generate PS using gl2ps. Bool_t PlotSelected(Int_t px, Int_t py); Read color buffer content to find selected object. void SetPadColor(const TColor* color); Used in a pad. void SetFrameColor(const TColor* frameColor); Set plot's back box color. void InvalidateSelection(); Selection must be updated. const TColor * GetPadColor() const; Get pad color. void MoveSection(Int_t px, Int_t py); Create dynamic profile using selected plane. void DrawSections() const; Draw sections (if any). void ClearBuffers() const. // Clear buffer.; Float_t rgb[3] = {1.f, 1.f, 1.f};; if (const TColor *color = GetPadColor()); color->GetRGB(rgb[0], rgb[1], rgb[2]);; glClearColor(rgb[0], rgb[1], rgb[2], 1.);; glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);. void DrawPaletteAxis() const; Draw. Palette. Axis. void SaveModelviewMatrix() const. void SaveProjectionMatrix() const. void RestoreModelviewMatrix() const. void RestoreProjectionMatrix() const. const TGLPlotBox& RefBackBox() const; { return fBackBox; }. void SetPhysicalShapeColor(const Float_t* rgba). void InitGL() const. void DeInitGL() const. void DrawPlot() const. Bool_t InitGeometry(); Init geometry does plot's specific initialization. void StartPan(Int_t px, Int_t py); Pan function is already declared in TVirtualGLPainter. void AddOption(const TString& stringOption); Add string option, it can be a digit in ""lego"" or ""surf"". void ProcessEvent(Int_t event, Int_t px, Int_t py); Function to process additional events (key presses, mouse clicks.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLPlotPainter.html:3467,Clear,ClearBuffers,3467,root/html532/TGLPlotPainter.html,https://root.cern,https://root.cern/root/html532/TGLPlotPainter.html,2,['Clear'],['ClearBuffers']
Usability,"ble_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numpoints, Int_t px, Int_t py) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCone.html:5242,Clear,ClearThreadData,5242,doc/master/classTGeoCone.html,https://root.cern,https://root.cern/doc/master/classTGeoCone.html,3,['Clear'],['ClearThreadData']
Usability,"ble_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numpoints, Int_t px, Int_t py) const;  Returns distance to shape primit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoEltu.html:7947,Clear,ClearThreadData,7947,doc/master/classTGeoEltu.html,https://root.cern,https://root.cern/doc/master/classTGeoEltu.html,5,['Clear'],['ClearThreadData']
Usability,"ble_t GetGranularity () const;  ; virtual Double_t GetMass () const;  ; virtual Int_t GetMCNumber () const;  ; virtual const char * GetParticleType () const;  ; virtual Bool_t GetStable () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print the entire information of this kind of particle. ;  ; virtual Double_t SampleMass () const;  Samples a mass according to the Breit-Wigner resonance distribution. ;  ; virtual Double_t SampleMass (Double_t widthcut) const;  Samples a mass in the interval: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttParticle.html:2007,Clear,Clear,2007,doc/master/classTAttParticle.html,https://root.cern,https://root.cern/doc/master/classTAttParticle.html,1,['Clear'],['Clear']
Usability,"ble_t YY () const;  ; Double_t YZ () const;  ; Double_t ZX () const;  ; Double_t ZY () const;  ; Double_t ZZ () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRotation.html:10847,Clear,Clear,10847,doc/master/classTRotation.html,https://root.cern,https://root.cern/doc/master/classTRotation.html,1,['Clear'],['Clear']
Usability,"ble_t YZ () const;  ; Double_t ZT () const;  ; Double_t ZX () const;  ; Double_t ZY () const;  ; Double_t ZZ () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLorentzRotation.html:7193,Clear,Clear,7193,doc/master/classTLorentzRotation.html,https://root.cern,https://root.cern/doc/master/classTLorentzRotation.html,1,['Clear'],['Clear']
Usability,"bled state of a button group with radio and check buttons ;  buttonsLayout.CThis macro gives an example of different buttons' layout ;  buttonTest.CThis macro gives an example of how to set/change text button attributes ;  calendar.CThis macro gives an example of how to use html widget to display tabular data ;  CPUMeter.CSimple macro showing capabilities of the TGSpeedo widget ;  customContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample showing how to customize a context menu for a class ;  drag_and_drop.CThis tutorial illustrates how to use drag and drop within ROOT ;  exec3.CExample of using signal/slot in TCanvas/TPad to get feedback about processed events ;  exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT ;  gtreeTableTest.CThis TableTest class is a simple example of how to use a TGTreeTable ;  guilabels.CThis macro gives an example of how to create different kind of labels and the possibility to enable/disable them ;  guitest.CTest program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism ;  guitest_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved ;  guiWithCINT.CA simple example of entering CINT commands and having the CINT output in a ROOT GUI application window ;  iconAsXPMData.CA simple example of creating icon image from XPM data, included into the code ;  listBox.CThis macro gives an example of how to create a list box and how to set and use its multiple selection feature ;  mditest.CGUI MDI features ;  ntupleTableTest.CThis TableTest class is a simple example of how to use a TGTable with a T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:118715,simpl,simple,118715,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['simpl'],['simple']
Usability,"bles fgxxx are 0 and the TClonesArray fgxxx are created. ; Definition at line 24 of file JetEvent.cxx. ◆ ~JetEvent(). JetEvent::~JetEvent ; (; ). override . Definition at line 38 of file JetEvent.cxx. Member Function Documentation. ◆ AddHitA(). Hit * JetEvent::AddHitA ; (; ). Add a new hit to the list of hits in detector A. ; Definition at line 124 of file JetEvent.cxx. ◆ AddHitB(). Hit * JetEvent::AddHitB ; (; ). Add a new hit to the list of hits in detector B. ; Definition at line 134 of file JetEvent.cxx. ◆ AddJet(). Jet * JetEvent::AddJet ; (; ). Add a new Jet to the list of tracks for this event. ; Definition at line 102 of file JetEvent.cxx. ◆ AddTrack(). Track * JetEvent::AddTrack ; (; ). Add a new track to the list of tracks for this event. ; Definition at line 113 of file JetEvent.cxx. ◆ Build(). void JetEvent::Build ; (; Int_t ; jetm = 3, . Int_t ; trackm = 10, . Int_t ; hitam = 100, . Int_t ; hitbm = 10 . ). Build one event. ; Definition at line 46 of file JetEvent.cxx. ◆ Clear(). void JetEvent::Clear ; (; Option_t * ; option = """"). overridevirtual . Reimplemented from TObject.; Definition at line 143 of file JetEvent.cxx. ◆ GetJets(). TClonesArray * JetEvent::GetJets ; (; ); const. inline . Definition at line 96 of file JetEvent.h. ◆ GetNhitA(). Int_t JetEvent::GetNhitA ; (; ); const. inline . Definition at line 90 of file JetEvent.h. ◆ GetNhitB(). Int_t JetEvent::GetNhitB ; (; ); const. inline . Definition at line 91 of file JetEvent.h. ◆ GetNjet(). Int_t JetEvent::GetNjet ; (; ); const. inline . Definition at line 88 of file JetEvent.h. ◆ GetNtrack(). Int_t JetEvent::GetNtrack ; (; ); const. inline . Definition at line 89 of file JetEvent.h. ◆ Reset(). void JetEvent::Reset ; (; Option_t * ; option = """"). Static function to reset all static objects for this event. ; Definition at line 154 of file JetEvent.cxx. Member Data Documentation. ◆ fgHitsA. TClonesArray * JetEvent::fgHitsA = nullptr. staticprivate . Definition at line 79 of file JetEvent.h. ◆ fgHi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classJetEvent.html:12051,Clear,Clear,12051,doc/master/classJetEvent.html,https://root.cern,https://root.cern/doc/master/classJetEvent.html,1,['Clear'],['Clear']
Usability,"ble tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngMinStd:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngMinStd::BaseType. Definition at line 509 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngMinStd(). ROOT::Math::GSLRngMinStd::GSLRngMinStd ; (; ). Definition at line 488 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngMinStd:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngMinStd. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html:5638,Guid,Guide,5638,doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html,1,['Guid'],['Guide']
Usability,"ble tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngRanLux:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngRanLux::BaseType. Definition at line 357 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngRanLux(). ROOT::Math::GSLRngRanLux::GSLRngRanLux ; (; ). Definition at line 403 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngRanLux:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngRanLux. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html:5733,Guid,Guide,5733,doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html,1,['Guid'],['Guide']
Usability,"ble tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngRanMar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngRanMar::BaseType. Definition at line 496 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngRanMar(). ROOT::Math::GSLRngRanMar::GSLRngRanMar ; (; ). Definition at line 480 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngRanMar:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngRanMar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html:5620,Guid,Guide,5620,doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html,1,['Guid'],['Guide']
Usability,"blic Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoIsotope Class Reference. . Definition at line 103 of file TGeoElement.h. Public Member Functions;  TGeoIsotope ();  Dummy I/O constructor. ;  ;  TGeoIsotope (const char *name, Int_t z, Int_t n, Double_t a);  Constructor. ;  ;  ~TGeoIsotope () override;  ; Double_t GetA () const;  ; Int_t GetN () const;  ; Int_t GetZ () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print this isotope. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoIsotope.html:1109,Clear,Clear,1109,doc/master/classTGeoIsotope.html,https://root.cern,https://root.cern/doc/master/classTGeoIsotope.html,1,['Clear'],['Clear']
Usability,"blockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMultiVarGaussian.html:3202,clear,clearValueDirty,3202,root/html528/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html528/RooMultiVarGaussian.html,1,['clear'],['clearValueDirty']
Usability,"blockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMultiVarGaussian.html:3202,clear,clearValueDirty,3202,root/html530/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html530/RooMultiVarGaussian.html,1,['clear'],['clearValueDirty']
Usability,"blue). The negative portion of the axis line is shown in dark color, the positive in bright. The axis name and minimum / maximum values are labeled in the same color. There are three options for axes drawing - selected by radio buttons:. None - not drawn (default).; Edge - draw axes on the (minimum) edge of the scene extents box.; Origin - drawn axes through the origin. For edge axes, the zero value for each axis is marked on the axis line with a colored sphere. For origin axes, a single white sphere is shown at the origin.; Edge axes are depth clipped - i.e. are obscured by 3D objects in front of them. Origin axes (which generally pass through the middle of the 3D scene) are not depth clipped - so always visible.; A single orange sphere of fixed view port (window) size can be shown at any arbitrary position. Enable / disable the drawing with ‘Show’ checkbox. Enter X/Y/Z position in the edit boxes to set position. Initial position is at the center of the scene.; Set the guides using TGLViewer::SetGuideState e.g. to enable edge axes, and enable a reference marker at world position 50, 60, 100:; Double_t refPos[3] = {50.0,60.0,100.0};; v->SetGuideState(TGLUtil::kAxesEdge, kTRUE, refPos);; 9.13.2.8 Selecting Scene Shapes; You can select a single shape from your scene by pressing ‘Shift’ key, pointing and left clicking anywhere on the shape in the viewer. Selection is currently shown by drawing the shape-bounding box (not depth clipped) in white (polygon or wire frame render styles) or red (outline render style). Manipulators supported by the shape are drawn in red, green and blue while the non-supported ones are drawn in grey. To deselect a shape, either select another, or shift/click anywhere on the background (empty space) in the viewer. You cannot select Manipulators or Guides (Axes / Reference Marker).; 9.13.2.9 Editing Shapes; When a shape is selected, the viewer’s control pane shows the user interface that allows you to review and adjust the color and geometry pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:397851,guid,guides,397851,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['guid'],['guides']
Usability,"bmission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Documentation. ROOT provides different types of documentation:. The Reference Guide, which is generated by doxygen provides an up-to-date full code documentation. This is mainly for software developers of ROOT and using ROOT to build the applications.; A general Users Guide is provided for a more in depth explanation of concepts and functionality available in the ROOT system. ; A number of topical User Guides and Manuals for various components of the system.; A rich set of ROOT tutorials and code examples are offered to developers to exercise specific functionality.; A rich set of HowTo's is also present to discuss issues commonly faced by ROOT users. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/documentation.html:2254,Guid,Guides,2254,d/documentation.html,https://root.cern,https://root.cern/d/documentation.html,3,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"bname, Option_t* option = ""read"", const char* user = ""user"", const char* pass = ""pass""); virtual~TSQLFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* option = """")MENU ; Bool_tCommit(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLFile.html:8095,Clear,Clear,8095,root/html530/TSQLFile.html,https://root.cern,https://root.cern/root/html530/TSQLFile.html,1,['Clear'],['Clear']
Usability,"bname, Option_t* option = ""read"", const char* user = ""user"", const char* pass = ""pass""); virtual~TSQLFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* option = """")MENU ; Bool_tCommit(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; virtual Bool_tTFile::Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSQLFile.html:8095,Clear,Clear,8095,root/html532/TSQLFile.html,https://root.cern,https://root.cern/root/html532/TSQLFile.html,1,['Clear'],['Clear']
Usability,"bname, Option_t* option = ""read"", const char* user = ""user"", const char* pass = ""pass""); virtual~TSQLFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* option = """")MENU ; Bool_tCommit(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; virtual Bool_tTFile::Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); virtual voidTFile::Delete(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSQLFile.html:8095,Clear,Clear,8095,root/html534/TSQLFile.html,https://root.cern,https://root.cern/root/html534/TSQLFile.html,1,['Clear'],['Clear']
Usability,"boloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoSphere, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, TGeoXtru, and TGeoVGShape. ◆ CheckShape(). void TGeoShape::CheckShape ; (; Int_t ; testNo, . Int_t ; nsamples = 10000, . Option_t * ; option = """" . ). Test for shape navigation methods. ; Summary for test numbers:. 1: DistFromInside/Outside. Sample points inside the shape. Generate directions randomly in cos(theta). Compute DistFromInside and move the point with bigger distance. Compute DistFromOutside back from new point. Plot d-(d1+d2) . Definition at line 211 of file TGeoShape.cxx. ◆ Class(). static TClass * TGeoShape::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoShape::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoShape::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 171 of file TGeoShape.h. ◆ ClearThreadData(). virtual void TGeoShape::ClearThreadData ; (; ); const. inlinevirtual . Reimplemented in TGeoCompositeShape, TGeoPgon, and TGeoXtru.; Definition at line 66 of file TGeoShape.h. ◆ ComputeBBox(). virtual void TGeoShape::ComputeBBox ; (; ). pure virtual . Implemented in TGeoArb8, TGeoBBox, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoShapeAssembly, TGeoSphere, TGeoTessellated, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, TGeoXtru, and TGeoVGShape. ◆ ComputeEpsMch(). Double_t TGeoShape::ComputeEpsMch ; (; ). static . Compute machine round-off double precision error as the smallest number that if added to 1.0 is different than 1.0. ; Definition at line 225 of file TGeoShape.cxx. ◆ ComputeNormal(). virtual void TGeoShape::ComputeNormal ; (; const Double_t * ; point, . const Double_t * ; dir, . Double_t * ; norm . ). pure virtual . Implemented in TGeoArb8, TGeoBBox,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:28426,Clear,ClearThreadData,28426,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['Clear'],['ClearThreadData']
Usability,"bool ROOT::Experimental::RNTupleImporter::fIsQuiet = false. private . No standard output, conversely if set to false, schema information and progress is printed. ; Definition at line 220 of file RNTupleImporter.hxx. ◆ fLeafCountCollections. std::map<std::string, RImportLeafCountCollection> ROOT::Experimental::RNTupleImporter::fLeafCountCollections. private . Maps the count leaf to the information about the corresponding untyped collection. ; Definition at line 229 of file RNTupleImporter.hxx. ◆ fMaxEntries. std::int64_t ROOT::Experimental::RNTupleImporter::fMaxEntries = -1. private . The maximum number of entries to import. When this value is -1 (default), import all entries. ; Definition at line 217 of file RNTupleImporter.hxx. ◆ fModel. std::unique_ptr<RNTupleModel> ROOT::Experimental::RNTupleImporter::fModel. private . Definition at line 224 of file RNTupleImporter.hxx. ◆ fNTupleName. std::string ROOT::Experimental::RNTupleImporter::fNTupleName. private . Definition at line 208 of file RNTupleImporter.hxx. ◆ fProgressCallback. std::unique_ptr<RProgressCallback> ROOT::Experimental::RNTupleImporter::fProgressCallback. private . Definition at line 221 of file RNTupleImporter.hxx. ◆ fSourceFile. std::unique_ptr<TFile> ROOT::Experimental::RNTupleImporter::fSourceFile. private . Definition at line 204 of file RNTupleImporter.hxx. ◆ fSourceTree. TTree* ROOT::Experimental::RNTupleImporter::fSourceTree. private . Definition at line 205 of file RNTupleImporter.hxx. ◆ fWriteOptions. RNTupleWriteOptions ROOT::Experimental::RNTupleImporter::fWriteOptions. private . Definition at line 210 of file RNTupleImporter.hxx. Libraries for ROOT::Experimental::RNTupleImporter:. [legend]; The documentation for this class was generated from the following files:; tree/ntupleutil/v7/inc/ROOT/RNTupleImporter.hxx; tree/ntupleutil/v7/src/RNTupleImporter.cxx. ROOTExperimentalRNTupleImporter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html:15304,Guid,Guide,15304,doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html,1,['Guid'],['Guide']
Usability,"bool fIsShuttingDown = false;; 188 ; 189protected:; 190 Bool_t SetSuspendAutoParsing(Bool_t value) final;; 191 ; 192public: // Public Interface; 193 ; 194 virtual ~TCling();; 195 TCling(const char* name, const char* title, const char* const argv[], void *interpLibHandle);; 196 ; 197 void AddIncludePath(const char* path) final;; 198 void *GetAutoLoadCallBack() const final { return fAutoLoadCallBack; }; 199 void *SetAutoLoadCallBack(void* cb) final { void* prev = fAutoLoadCallBack; fAutoLoadCallBack = cb; return prev; }; 200 Int_t AutoLoad(const char *classname, Bool_t knowDictNotLoaded = kFALSE) final;; 201 Int_t AutoLoad(const std::type_info& typeinfo, Bool_t knowDictNotLoaded = kFALSE) final;; 202 Int_t AutoParse(const char* cls) final;; 203 void* LazyFunctionCreatorAutoload(const std::string& mangled_name);; 204 bool LibraryLoadingFailed(const std::string&, const std::string&, bool, bool);; 205 Bool_t IsAutoLoadNamespaceCandidate(const clang::NamespaceDecl* nsDecl);; 206 void ClearFileBusy() final;; 207 void ClearStack() final; // Delete existing temporary values; 208 Bool_t Declare(const char* code) final;; 209 void EndOfLineAction() final;; 210 TClass *GetClass(const std::type_info& typeinfo, Bool_t load) const final;; 211 Int_t GetExitCode() const final { return fExitCode; }; 212 TEnv* GetMapfile() const final { return fMapfile; }; 213 Int_t GetMore() const final;; 214 TClass *GenerateTClass(const char *classname, Bool_t emulation, Bool_t silent = kFALSE) final;; 215 TClass *GenerateTClass(ClassInfo_t *classinfo, Bool_t silent = kFALSE) final;; 216 Int_t GenerateDictionary(const char* classes, const char* includes = """", const char* options = nullptr) final;; 217 char* GetPrompt() final { return fPrompt; }; 218 const char* GetSharedLibs() final;; 219 const char* GetClassSharedLibs(const char* cls, bool skipCore = true) final;; 220 const char* GetSharedLibDeps(const char* lib, bool tryDyld = false) final;; 221 const char* GetIncludePath() final;; 222 virtual cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:8347,Clear,ClearFileBusy,8347,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['Clear'],['ClearFileBusy']
Usability,"bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; virtual void setCachedValue (double, bool=true);  Overwrite the current value stored in this object, making it look like this object computed that value. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:23623,Clear,Clear,23623,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['Clear'],['Clear']
Usability,"boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. vector<double>fCovarvector storing the covariance matrix; unsigned intfDim; vector<double>fErrorsvector of output errors; boolfMinosRun; TMinuit*fMinuit; vector<double>fParamsvector of output values; ROOT::Minuit::EMinimizerTypefType; boolfUsed; static ROOT::Math::IMultiGenFunction*fgFunc; static TMinuit*fgMinuit; static boolfgUseStaticMinuitflag to control if using global TMInuit instance (gMinuit); static boolfgUsedflag to control if static instance has done minimization. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMinuitMinimizer(ROOT::Minuit::EMinimizerType type = ROOT::Minuit::kMigrad, unsigned int ndim = 0); Constructor for TMinuitMinimier class via an enumeration specifying the minimization; algorithm type. Supported types are : kMigrad, kSimplex, kCombined (a combined; Migrad + Simplex minimization) and kMigradImproved (a Migrad mininimization folloed by an; improved search for global minima). The default type is Migrad (kMigrad). TMinuitMinimizer(const char* type, unsigned int ndim = 0); constructor from a char * for the algorithm type, used by the plug-in manager; The names supported (case unsensitive) are:; Migrad (default), Simplex, Minimize (for the combined Migrad+ Simplex) and Migrad_imp. ~TMinuitMinimizer(); Destructor implementation. TMinuitMinimizer(const TMinuitMinimizer& ); Implementation of copy constructor (it is private). bool UseStaticMinuit(bool on = true); static method to control usage of global TMinuit instance. void InitTMinuit(int ndim). void SetFunction(const ROOT::Math::IMultiGenFunction & func); Set the objective function to be minimized, by passing a function object implement the; basic multi-dim Function interface. In this case the derivatives will be; calculated by Minuit; Here a TMinuit instance is created since only at this point we know the number of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuitMinimizer.html:6429,Simpl,Simplex,6429,root/html602/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html602/TMinuitMinimizer.html,2,['Simpl'],['Simplex']
Usability,"bool ; shapeProp . ). Change dirty flag propagation mask for specified server. ; Definition at line 438 of file RooAbsArg.cxx. ◆ checkObservables(). bool RooAbsArg::checkObservables ; (; const RooArgSet * ; nset); const. virtual . Overloadable function in which derived classes can implement consistency checks of the variables. ; If this function returns true, indicating an error, the fitter or generator will abort. ; Reimplemented in RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooRealSumFunc, and RooRealSumPdf.; Definition at line 817 of file RooAbsArg.cxx. ◆ cleanBranchName(). TString RooAbsArg::cleanBranchName ; (; ); const. protected . Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ; Definition at line 2075 of file RooAbsArg.cxx. ◆ clearShapeDirty(). void RooAbsArg::clearShapeDirty ; (; ); const. inlineprotected . Definition at line 579 of file RooAbsArg.h. ◆ clearValueAndShapeDirty(). void RooAbsArg::clearValueAndShapeDirty ; (; ); const. inlineprotected . Definition at line 571 of file RooAbsArg.h. ◆ clearValueDirty(). void RooAbsArg::clearValueDirty ; (; ); const. inlineprotected . Definition at line 576 of file RooAbsArg.h. ◆ clients(). const RefCountList_t & RooAbsArg::clients ; (; ); const. inline . List of all clients of this object. ; Definition at line 166 of file RooAbsArg.h. ◆ clone(). virtual TObject * RooAbsArg::clone ; (; const char * ; newname = nullptr); const. pure virtual . Implemented in RooStats::HistFactory::FlexibleInterpVar, RooStats::HistFactory::LinInterpVar, ParamHistFunc, PiecewiseInterpolation, RooStats::HistFactory::RooBarlowBeestonLL, Roo2DKeysPdf, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:50696,clear,clearValueAndShapeDirty,50696,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; TIterator * clientIterator () const R__DEPRECATED(6;  Retrieve a client iterator. ;  ; TIterator Use clients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * valueClientIterator () const R__DEPRECATED(6;  ; TIterator Use valueClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * shapeClientIterator () const R__DEPRECATED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:42041,clear,clear,42041,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,3,['clear'],['clear']
Usability,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:28854,clear,clear,28854,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,37,['clear'],['clear']
Usability,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; TIterator * clientIterator () const R__DEPRECATED(6;  Retrieve a client iterator. ;  ; TIterator Use clients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * valueClientIterator () const R__DEPRECATED(6;  ; TIterator Use valueClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * shapeClientIterator () const R__DEPRECATED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:30999,clear,clear,30999,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['clear'],['clear']
Usability,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:41822,clear,clear,41822,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,112,['clear'],['clear']
Usability,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; virtual void writeToStream (std::ostream &os, bool compact) const =0;  ; Client-Server Interface; These functions allow RooFit to figure out who is serving values to whom. . const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:15782,clear,clear,15782,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clear']
Usability,"bort ();  ; virtual void SetStatus (Long64_t status);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelEvent.html:3864,Clear,Clear,3864,doc/master/classTSelEvent.html,https://root.cern,https://root.cern/doc/master/classTSelEvent.html,5,['Clear'],['Clear']
Usability,"bounding; box will be sampled. void CheckBoundaryReference(Int_t icheck = -1); Check the boundary errors reference file created by CheckBoundaryErrors method.; The shape for which the crossing failed is drawn with the starting point in red; and the extrapolated point to boundary (+/- failing push/pull) in yellow. void CheckGeometryFull(Bool_t checkoverlaps = kTRUE, Bool_t checkcrossings = kTRUE, Int_t nrays = 10000, const Double_t* vertex = NULL); Geometry checking method (see: TGeoManager::CheckGeometry()). void CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const; Geometry checking method (see TGeoChecker). void CheckOverlaps(const TGeoVolume* vol, Double_t ovlp = 0.1, Option_t* option = """") const; Check overlaps for the top volume of the geometry, within a limit OVLP. void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); check current point in the geometry. void ClearVisibleVolumes(); Clear the list of visible volumes; reset the kVisOnScreen bit for volumes previously in the list. void DefineColors() const; Define 100 colors with increasing light intensities for each basic color (1-7); Register these colors at indexes starting with 1000. Int_t GetColor(Int_t base, Float_t light) const; Get index of a base color with given light intensity (0,1). TGeoVolume * GetDrawnVolume() const; Get currently drawn volume. Int_t DistanceToPrimitiveVol(TGeoVolume* vol, Int_t px, Int_t py); compute the closest distance of approach from point px,py to a volume. void DefaultAngles(); Set default angles for the current view. void DefaultColors(); Set default volume colors according to tracking media. Int_t CountNodes(TGeoVolume* vol, Int_t level) const; Count number of visible nodes down to a given level. Int_t CountVisibleNodes(); Count total number of visible nodes. void CheckEdit(); Check if Ged library is loaded and load geometry editor classe. void EditGeometry(Option_t* option = """"); Start the geometry editor. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPainter.html:14129,Clear,ClearVisibleVolumes,14129,root/html528/TGeoPainter.html,https://root.cern,https://root.cern/root/html528/TGeoPainter.html,2,['Clear'],"['Clear', 'ClearVisibleVolumes']"
Usability,"bout this threshold category to the specified stream. ; In addition to the info from RooAbsCategory::printStream() we add:; Standard : input category Shape : default value Verbose : list of thresholds ; Reimplemented from RooAbsCategory.; Definition at line 150 of file RooThresholdCategory.cxx. ◆ recomputeShape(). void RooThresholdCategory::recomputeShape ; (; ). inlineoverrideprotectedvirtual . No shape recomputation is necessary. This category does not depend on other categories. ; Implements RooAbsCategory.; Definition at line 50 of file RooThresholdCategory.h. ◆ Streamer(). void RooThresholdCategory::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsCategory. ◆ StreamerNVirtual(). void RooThresholdCategory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 52 of file RooThresholdCategory.h. ◆ writeToStream(). void RooThresholdCategory::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to given stream. ; Reimplemented from RooAbsCategory.; Definition at line 124 of file RooThresholdCategory.cxx. Member Data Documentation. ◆ _defIndex. const value_type RooThresholdCategory::_defIndex {std::numeric_limits<value_type>::min()}. protected . Definition at line 45 of file RooThresholdCategory.h. ◆ _inputVar. RooRealProxy RooThresholdCategory::_inputVar. protected . Definition at line 44 of file RooThresholdCategory.h. ◆ _threshList. std::vector<std::pair<double,value_type> > RooThresholdCategory::_threshList. protected . Definition at line 46 of file RooThresholdCategory.h. Libraries for RooThresholdCategory:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooThresholdCategory.h; roofit/roofitcore/src/RooThresholdCategory.cxx. RooThresholdCategory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooThresholdCategory.html:49183,Guid,Guide,49183,doc/master/classRooThresholdCategory.html,https://root.cern,https://root.cern/doc/master/classRooThresholdCategory.html,1,['Guid'],['Guide']
Usability,"bout which TTree entry to access. For that call TTreeReader::Next() in a loop. It will return false once it has reached the end of the TTree.; In the same loop, compute the total size of all events (simply add the current event size to the total size); ... // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Get the data from the current TTree entry by getting; // the value from the connected reader (eventSize):; totalSize += *eventSize;; }. Accessing the Analysis Result; At the end of the loop, print the sum of all event sizes. This sum shows you the real power of a TTree: even though you can analyze large amounts of data (our example tree with 22MB is tiny!) ROOT needs just a few MB of your RAM, no matter how many events you analyze. Imagine what it would be like if you had to load all data into memory, e.g. using a simple vector!; ... Int_t sizeInMB = totalSize/1024/1024;; printf(""Total size of all events: %d MB\n"", sizeInMB);; }. Running the Macro; To run this macro, simply type .x AnalyzeTree.C and ROOT will execute it. If it finds an error it might be wise to quit ROOT (.q) and try again!; If, for any reason, you don't manage to get it working, you can download a working macro file here: CountEvents.C; Here again, if you are using ROOT via ssh, you have to download the file with wget from your remote directory:; wget http://root-mirror.github.io/training/intro/CountEvents.C; . ‹ TTree and Its Data; up; Histogramming ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-macro-read-ttree.html:5280,simpl,simply,5280,d/using-macro-read-ttree.html,https://root.cern,https://root.cern/d/using-macro-read-ttree.html,1,['simpl'],['simply']
Usability,"box. Note: Length/volume ratios NOT dependent on the projected size; of box at current camera configuration as we do not want; continual changes. This is used when (re) populating the scene; with objects from external client. TODO: Might be more logical to move this test out to client -; and have accessor for fInterestBox instead?. Bool_t UpdateInterest(Bool_t force); Update the internal interest box (fInterestBox) of the camera.; The interest box is an orientated bounding box, calculated as; an expanded container round the frustum. It is used to test if; if object bounding boxes are of interest (should be accepted; into viewer scene) for a camera - see TGLCamera::OfInterest(). The interest box is updated if the frustum is no longer contained; in the existing one, or a new one calculated on the current frustum; differs significantly in volume (camera has been zoomed/dollyed; sizable amount). If the interest box is updated we return kTRUE - kFALSE otherwise. void ResetInterest(); Clear out the existing interest box. Bool_t AdjustAndClampVal(Double_t& val, Double_t min, Double_t max, Int_t screenShift, Int_t screenShiftRange, Bool_t mod1, Bool_t mod2) const; Adjust a passed REFERENCE value 'val', based on screenShift delta.; Two modifier flags ('mod1' / 'mod2' ) for sensitivity:. mod1 = kFALSE, mod2 = kFALSE : normal sensitivity (screenShift/screenShiftRange); mod1 = kTRUE, mod2 = kFALSE : 0.1x sensitivity; mod1 = kTRUE, mod2 = kTRUE : 0.01x sensitivity; mod1 = kFALSE, mod2 = kTRUE : 10.0x sensitivity. 'val' is modified and clamped to 'min' / 'max' range.; Return bool kTRUE if val actually changed. Used as common interaction function for adjusting zoom/dolly etc. Double_t AdjustDelta(Double_t screenShift, Double_t deltaFactor, Bool_t mod1, Bool_t mod2) const; Adjust a passed screen value and apply modifiers.; See AdjustAndClampVal() for details. void DrawDebugAids() const; Draw out some debugging aids for the camera:. i) The frustum used to create the current interest ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLCamera.html:15030,Clear,Clear,15030,root/html528/TGLCamera.html,https://root.cern,https://root.cern/root/html528/TGLCamera.html,6,['Clear'],['Clear']
Usability,"branches with variable length arrays. Each entry has a variable number of tracks, and each track has several variables.; tree4.C: a tree with a class (Event). The class Event is defined in $ROOTSYS/test. In this example we first encounter the impact of splitting a branch. Each script contains the main function, with the same name as the file (i.e. tree1), the function to write - tree1w, and the function to read - tree1r. If the script is not run in batch mode, it displays the tree in the browser and tree viewer. To study the example scripts, you can either execute the main script, or load the script and execute a specific function. For example:; // execute the function that writes, reads, shows the tree; root[] x tree1.C; // use ACLiC to build shared library, check syntax, execute; root[] x tree1.C++; // Load the script and select a function to execute; root[] L tree1.C; root[] tree1w(); root[] tree1r(); 12.14 Example 1: A Tree with Simple Variables; This example shows how to write, view, and read a tree with several simple (integers and floating-point) variables.; 12.14.1 Writing the Tree; Below is the function that writes the tree (tree1w). First, the variables are defined (px, py, pz, random and ev). Then we add a branch for each of the variables to the tree, by calling the TTree::Branch method for each variable.; void tree1w(){. // create a tree file tree1.root - create the file, the Tree and; // a few branches; TFile f(""tree1.root"",""recreate"");; TTree t1(""t1"",""a simple Tree with simple variables"");; Float_t px, py, pz;; Double_t random;; Int_t ev;; t1.Branch(""px"",&px,""px/F"");; t1.Branch(""py"",&py,""py/F"");; t1.Branch(""pz"",&pz,""pz/F"");; t1.Branch(""ev"",&ev,""ev/I"");. // fill the tree; for (Int_t i=0; i<10000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; random = gRandom->Rndm();; ev = i;; t1.Fill();; }; // save the Tree heade; the file will be automatically closed; // when going out of the function scope; t1.Write();; }; 12.14.1.1 Creating Branches with A si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:552399,Simpl,Simple,552399,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"branches.; 352 /// \return Pointer to the TBranch that was created. The branch is owned by the tree.; 353 template <class T> TBranch *Branch(const char* name, T* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); 354 {; 355 return BranchImpRef(name, TClass::GetClass<T>(), TDataType::GetType(typeid(T)), obj, bufsize, splitlevel);; 356 }; 357 ; 358 /// Add a new branch, and infer the data type from the array `addobj` being passed.; 359 ///; 360 /// \note This and the previous overload should cover most cases for creating a branch. Try to use these two whenever; 361 /// possible, unless e.g. type conversions are needed.; 362 ///; 363 /// \param[in] name Name of the branch to be created.; 364 /// \param[in] addobj Array of the objects to be added. When calling Fill(), the current value of the type/object will be saved.; 365 /// \param[in] bufsize he buffer size in bytes for this branch. When the buffer is full, it is compressed and written to disc.; 366 /// The default value of 32000 bytes and should be ok for most simple types. Larger buffers (e.g. 256000) if your Tree is not split and each entry is large (Megabytes).; 367 /// A small value for bufsize is beneficial if entries in the Tree are accessed randomly and the Tree is in split mode.; 368 /// \param[in] splitlevel If T is a class or struct and splitlevel > 0, the members of the object are serialised as separate branches.; 369 /// \return Pointer to the TBranch that was created. The branch is owned by the tree.; 370 template <class T> TBranch *Branch(const char* name, T** addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); 371 {; 372 return BranchImp(name, TClass::GetClass<T>(), addobj, bufsize, splitlevel);; 373 }; 374 ; 375 virtual Int_t Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """");; 376 virtual Int_t Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99);; 377 virtual Int_t Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:18154,simpl,simple,18154,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['simpl'],['simple']
Usability,"break;; 842 }; 843 ; 844 Settings * settings = new Settings(TString(), s.convergenceSteps, s.batchSize,; 845 s.testInterval, s.weightDecay, r,; 846 MinimizerType::fSteepest, s.learningRate,; 847 s.momentum, 1, s.multithreading);; 848 std::shared_ptr<Settings> ptrSettings(settings);; 849 ptrSettings->setMonitoring (0);; 850 Log() << kINFO; 851 << ""Training with learning rate = "" << ptrSettings->learningRate (); 852 << "", momentum = "" << ptrSettings->momentum (); 853 << "", repetitions = "" << ptrSettings->repetitions (); 854 << Endl;; 855 ; 856 ptrSettings->setProgressLimits ((idxSetting)*100.0/(fSettings.size ()),; 857 (idxSetting+1)*100.0/(fSettings.size ()));; 858 ; 859 const std::vector<double>& dropConfig = ptrSettings->dropFractions ();; 860 if (!dropConfig.empty ()) {; 861 Log () << kINFO << ""Drop configuration"" << Endl; 862 << "" drop repetitions = "" << ptrSettings->dropRepetitions(); 863 << Endl;; 864 }; 865 ; 866 int idx = 0;; 867 for (auto f : dropConfig) {; 868 Log () << kINFO << "" Layer "" << idx << "" = "" << f << Endl;; 869 ++idx;; 870 }; 871 Log () << kINFO << Endl;; 872 ; 873 DNN::Steepest minimizer(ptrSettings->learningRate(),; 874 ptrSettings->momentum(),; 875 ptrSettings->repetitions());; 876 net.train(weights, trainPattern, testPattern, minimizer, *ptrSettings.get());; 877 ptrSettings.reset();; 878 Log () << kINFO << Endl;; 879 idxSetting++;; 880 }; 881 size_t weightIndex = 0;; 882 for (size_t l = 0; l < fNet.GetDepth(); l++) {; 883 auto & layerWeights = fNet.GetLayer(l).GetWeights();; 884 for (Int_t j = 0; j < layerWeights.GetNcols(); j++) {; 885 for (Int_t i = 0; i < layerWeights.GetNrows(); i++) {; 886 layerWeights(i,j) = weights[weightIndex];; 887 weightIndex++;; 888 }; 889 }; 890 auto & layerBiases = fNet.GetLayer(l).GetBiases();; 891 if (l == 0) {; 892 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {; 893 layerBiases(i,0) = weights[weightIndex];; 894 weightIndex++;; 895 }; 896 } else {; 897 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:31253,learn,learningRate,31253,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['learn'],['learningRate']
Usability,"browser on Windows.; 640 TString cWindows(""start \""\"" "");; 641 cWindows.Append(url);; 642 gSystem->Exec(cWindows);; 643#else; 644 // Command for opening a browser in Linux.; 645 TString cLinux(""xdg-open "");; 646 // For Linux we check if the DISPLAY is set.; 647 if (gSystem->Getenv(""DISPLAY"")) {; 648 // If the DISPLAY is set it will open the browser.; 649 cLinux.Append(url);; 650 gSystem->Exec(cLinux);; 651 } else {; 652 // Else the user will have a warning and the URL in the terminal.; 653 Warning(""OpenInBrowser"", ""The $DISPLAY is not set! Please open (e.g. Ctrl-click) %s\n"", url.Data());; 654 return;; 655 }; 656#endif; 657 Info(""OpenInBrowser"", ""A new tab should have opened in your browser."");; 658}; 659 ; 660namespace {; 661enum EUrl { kURLforClass, kURLforNameSpace, kURLforStruct };; 662////////////////////////////////////////////////////////////////////////////////; 663/// The function generates a URL address for class or namespace (scopeName).; 664/// This is the URL to the online reference guide, generated by Doxygen.; 665/// With the enumeration ""EUrl"" we pick which case we need - the one for; 666/// class (kURLforClass) or the one for namespace (kURLforNameSpace).; 667///; 668/// \param[in] scopeName the name of the class or the namespace; 669/// \param[in] scopeType the enumerator for class or namespace; 670 ; 671static TString UrlGenerator(TString scopeName, EUrl scopeType); 672{; 673 // We start the URL with a static part, the same for all scopes and members.; 674 TString url = ""https://root.cern/doc/"";; 675 // Then we check the ROOT version used.; 676 TPRegexp re4(R""(.*/(v\d)-(\d\d)-00-patches)"");; 677 const char *branchName = gROOT->GetGitBranch();; 678 TObjArray *objarr = re4.MatchS(branchName);; 679 TString version;; 680 // We extract the correct version name for the URL.; 681 if (objarr && objarr->GetEntries() == 3) {; 682 // We have a valid version of ROOT and we will extract the correct name for the URL.; 683 version = ((TObjString *)objarr->At(1))-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:23075,guid,guide,23075,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['guid'],['guide']
Usability,"browserPad->Update();; // This call tells ROOT to process all pending GUI events; // It allows users to use the TBrowser as usual while the event-loop is running; gSystem->ProcessEvents();; });; ; // Finally, we would like to print a progress bar on the terminal to show how the event-loop is progressing.; // To take into account _all_ events we use `OnPartialResultSlot`: when Implicit Multi-Threading is enabled, in fact,; // `OnPartialResult` invokes the callback only in one of the worker threads, and always returns that worker threads'; // partial result. This is useful because it means we don't have to worry about concurrent execution and; // thread-safety of the callbacks if we are happy with just one threads' partial result.; // `OnPartialResultSlot`, on the other hand, invokes the callback in each one of the worker threads, every time a; // thread finishes processing a batch of `everyN` events. This is what we want for the progress bar, but we need to; // take care that two threads will not print to terminal at the same time: we need a std::mutex for synchronization.; std::string progressBar;; std::mutex barMutex; // Only one thread at a time can lock a mutex. Let's use this to avoid concurrent printing.; // Magic numbers that yield good progress bars for nSlots = 1,2,4,8; const auto everyN = nSlots == 8 ? 1000 : 100ull * nSlots;; const auto barWidth = nEvents / everyN;; h.OnPartialResultSlot(everyN, [&barWidth, &progressBar, &barMutex](unsigned int /*slot*/, TH1D & /*partialHist*/) {; std::lock_guard<std::mutex> l(barMutex); // lock_guard locks the mutex at construction, releases it at destruction; progressBar.push_back('#');; // re-print the line with the progress bar; std::cout << ""\r["" << std::left << std::setw(barWidth) << progressBar << ']' << std::flush;; });; ; // ## Running the analysis; // So far we told RDataFrame what we want to happen during the event-loop, but we have not actually run any of those; // actions: the TBrowser is still empty, the prog",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df013__InspectAnalysis_8C.html:4855,progress bar,progress bar,4855,doc/master/df013__InspectAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html,1,['progress bar'],['progress bar']
Usability,"bsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooChangeTracker(); Default constructor. RooChangeTracker(const char* name, const char* title, const RooArgSet& trackSet, Bool_t checkValues = kFALSE); Constructor. The set trackSet contains the observables to be; tracked for changes. If checkValues is true an additional; validation step is activated where the numeric values of the; tracked arguments are compared with reference values ensuring; that values have actually changed. RooChangeTracker(const RooChangeTracker& other, const char* name = 0); Copy constructor. Bool_t hasChanged(Bool_t clearState); Returns true if state has changes since last call with clearState=kTRUE; If clearState is true, changeState flag will be cleared. ~RooChangeTracker(); Destructor. RooArgSet parameters() const. TObject* clone(const char* newname) const; { return new RooChangeTracker(*this, newname); }. Double_t evaluate() const; { return 1 ; }. » Last changed: Tue Mar 10 17:15:55 2015 » Last generated: 2015-03-10 17:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChangeTracker.html:37042,clear,clearState,37042,root/html534/RooChangeTracker.html,https://root.cern,https://root.cern/root/html534/RooChangeTracker.html,4,['clear'],"['clearState', 'cleared']"
Usability,bsCollection.h. ◆ useHashMapForFind(). void RooAbsCollection::useHashMapForFind ; (; bool ; flag); const. Parameters. [in]flagSwitch hash map on or off. . Definition at line 1614 of file RooAbsCollection.cxx. Member Data Documentation. ◆ _allRRV. bool RooAbsCollection::_allRRV = true. protected . All contents are RRV. ; Definition at line 382 of file RooAbsCollection.h. ◆ _hashAssistedFind. HashAssistedFind* RooAbsCollection::_hashAssistedFind = nullptr. mutableprivate . ! ; Definition at line 423 of file RooAbsCollection.h. ◆ _list. Storage_t RooAbsCollection::_list. protected . Actual object storage. ; Definition at line 377 of file RooAbsCollection.h. ◆ _name. TString RooAbsCollection::_name. protected . Our name. ; Definition at line 381 of file RooAbsCollection.h. ◆ _ownCont. bool RooAbsCollection::_ownCont = false. protected . Flag to identify a list that owns its contents. ; Definition at line 380 of file RooAbsCollection.h. ◆ _sizeThresholdForMapSearch. std::size_t RooAbsCollection::_sizeThresholdForMapSearch = 100. private . ! ; Definition at line 424 of file RooAbsCollection.h. ◆ _structureTag. TNamed* RooAbsCollection::_structureTag {nullptr}. mutableprotected . ! Structure tag ; Definition at line 389 of file RooAbsCollection.h. ◆ _typedStructureTag. TNamed* RooAbsCollection::_typedStructureTag {nullptr}. mutableprotected . ! Typed structure tag ; Definition at line 390 of file RooAbsCollection.h. ◆ _uniqueId. const RooFit::UniqueId<RooAbsCollection> RooAbsCollection::_uniqueId. private . Definition at line 430 of file RooAbsCollection.h. Libraries for RooAbsCollection:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsCollection.h; roofit/roofitcore/src/RooAbsCollection.cxx; /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/pyzdoc/_roofit.pyzdoc. RooAbsCollection. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:40 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:63066,Guid,Guide,63066,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['Guid'],['Guide']
Usability,"bsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistPdf.html:2853,Clear,Clear,2853,root/html532/RooHistPdf.html,https://root.cern,https://root.cern/root/html532/RooHistPdf.html,1,['Clear'],['Clear']
Usability,"bsRealLValue &var, const RooCmdArg &arg={})Definition RooGlobalFunc.cxx:850; RooFit::BinningRooCmdArg Binning(const RooAbsBinning &binning)Definition RooGlobalFunc.cxx:328; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf309_ndimplotDefinition rf309_ndimplot.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf309_ndimplot.C. tutorialsroofitrf309_ndimplot.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf309__ndimplot_8C.html:7070,Guid,Guide,7070,doc/master/rf309__ndimplot_8C.html,https://root.cern,https://root.cern/doc/master/rf309__ndimplot_8C.html,1,['Guid'],['Guide']
Usability,"bsite The ROOT web site has up to date documentation. The ROOT source code automatically generates this documentation, so each class is explicitly documented on its own web page, which is always up to date with the latest official release of ROOT.; The ROOT Reference Guide web pages can be found at class index reference guide https://root.cern/doc/master/classes.html. Each page contains a class description, and an explanation of each method. It shows the class inheritance tree and lets you jump to the parent class page by clicking on the class name. If you want more details, you can even see the source. There is a help page available in the little box on the upper right hand side of each class documentation page. You can see on the next page what a typical class documentation web page looks like. The ROOT web site also contains in addition to this Reference Guide, “How To’s”, a list of publications and example applications.; 1.7.1 Class Reference Guide; The top of any class reference page lets you jump to different parts of the documentation. The first line links to the class index and the index for the current module (a group of classes, often a library). The second line links to the ROOT homepage and the class overviews. The third line links the source information - a HTML version of the source and header file as well as the CVS (the source management system used for the ROOT development) information of the files. The last line links the different parts of the current pages. Example of function documentation, with automatically generated LaTeX-like graphics. Inheritance tree, showing what the current class derives from, and which classes inherit from it. HTML version of the source file linking all types and most functions. 2 Getting Started; We begin by showing you how to use ROOT interactively. There are two examples to click through and learn how to use the GUI. We continue by using the command line, and explaining the coding conventions, global variables and the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:29284,Guid,Guide,29284,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Guid'],['Guide']
Usability,"btr)=0; TVirtualGeoPainter::CheckShapevirtual void CheckShape(TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option)=0; TVirtualGeoPainter::ExecuteManagerEventvirtual void ExecuteManagerEvent(TGeoManager *geom, Int_t event, Int_t px, Int_t py)=0; TVirtualGeoPainter::SetBombFactorsvirtual void SetBombFactors(Double_t bombx=1.3, Double_t bomby=1.3, Double_t bombz=1.3, Double_t bombr=1.3)=0; TVirtualGeoPainter::CheckBoundaryErrorsvirtual void CheckBoundaryErrors(Int_t ntracks=1000000, Double_t radius=-1.)=0; TVirtualGeoTrackBase class for user-defined tracks attached to a geometry.Definition TVirtualGeoTrack.h:23; TVirtualGeoTrack::GetIdInt_t GetId() constDefinition TVirtualGeoTrack.h:43; TVirtualGeoTrack::GetMotherTVirtualGeoTrack * GetMother() constDefinition TVirtualGeoTrack.h:46; TVirtualGeoTrack::FindTrackWithIdvirtual TVirtualGeoTrack * FindTrackWithId(Int_t id) constRecursively search through this track for a daughter particle (at any depth) with the specified id.Definition TVirtualGeoTrack.cxx:83; bool; double; int; unsigned int; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5; ROOT::EnableThreadSafetyvoid EnableThreadSafety()Enable support for multi-threading within the ROOT code in particular, enables the global mutex to ma...Definition TROOT.cxx:501; TMath::ATan2Double_t ATan2(Double_t y, Double_t x)Returns the principal value of the arc tangent of y/x, expressed in radians.Definition TMath.h:646; TMath::BinarySearchLong64_t BinarySearch(Long64_t n, const T *array, T value)Binary search in an array of n values to locate value.Definition TMathBase.h:347; TMath::RadToDegconstexpr Double_t RadToDeg()Conversion from radian to degree: .Definition TMath.h:72. geomgeomsrcTGeoManager.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:249993,Guid,Guide,249993,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Guid'],['Guide']
Usability,"buf, Long64_t pos, Int_t len, Bool_t* free); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsActiveThread(); virtual Bool_tTFileCacheRead::IsAsyncReading() const; Bool_tTTreeCache::IsAutoCreated() const; virtual Bool_tTTreeCache::IsEnabled() const; virtual Bool_tTFileCacheRead::IsEnablePrefetching() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTTreeCache::IsLearning() const; Bool_tTObject::IsOnHeap() const; static Bool_tIsParallelUnzip(); Bool_tIsQueueEmpty(); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTTreeCache::LearnPrefill(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTFileCacheRead::Prefetch(Long64_t pos, Int_t len); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTTreeCache::ReadBuffer(char* buf, Long64_t pos, Int_t len); virtual Int_tReadBufferExt(char* buf, Long64_t po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCacheUnzip.html:5794,Learn,LearnPrefill,5794,root/html534/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html534/TTreeCacheUnzip.html,1,['Learn'],['LearnPrefill']
Usability,"buf, Long64_t pos, Int_t len, Bool_t* free); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsActiveThread(); virtual Bool_tTFileCacheRead::IsAsyncReading() const; Bool_tTTreeCache::IsAutoCreated() const; virtual Bool_tTTreeCache::IsEnabled() const; virtual Bool_tTFileCacheRead::IsEnablePrefetching() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTTreeCache::IsLearning() const; Bool_tTObject::IsOnHeap() const; static Bool_tIsParallelUnzip(); Bool_tIsQueueEmpty(); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTTreeCache::LearnPrefill(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTFileCacheRead::Prefetch(Long64_t pos, Int_t len); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTTreeCache::ReadBuffer(char* buf, Long64_t pos, Int_t len); virtual Int_tReadBufferExt(char* buf, Long64_t pos, Int_t len, Int_t& loc); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCacheUnzip.html:5747,Learn,LearnPrefill,5747,root/html602/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html602/TTreeCacheUnzip.html,2,['Learn'],['LearnPrefill']
Usability,"buffers' size; Int_tfModeGroupdisplay mode algorithm group (simple modes-kModeGroupSimple, modes with shading according to light-kModeGroupLight, modes with shading according to channels counts-kModeGroupHeight, modes of combination of shading according to light and to channels counts-kModeGroupLightHeight); Double_tfMxx; Double_tfMxy; Double_tfMyx; Double_tfMyy; TStringTNamed::fNameobject identifier; TColor*fNewColor!; Int_tfNewColorIndex; Int_tfNodesxnumber of nodes in x dimension of grid; Int_tfNodesynumber of nodes in y dimension of grid; Double_tfNuSli; Int_tfPenColorcolor of spectrum; Int_tfPenDashstyle of pen; Int_tfPenWidthwidth of line; Double_tfRainbow1Stepdetermines the first component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow2Stepdetermines the second component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow3Stepdetermines the third component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfShadingdetermines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; Int_tfShadowdetermines whether shadow will be drawn (no shadow, shadow), for rainbowed display modes with shading according to light; TStringTNamed::fTitleobject title; Double_tfTxx; Double_tfTxy; Double_tfTyx; Double_tfTyy; Double_tfTyz; Int_tfViewAnglerotation angle of the view, it can be 0, 90, 180, 270 degrees; Double_tfVx; Double_tfVy; Int_tfXe; Int_tfXlightx position of fictive light source, applies only for rainbowed display modes with shading according to light; Int_tfXmaxx-end channel of spectrum; Int_tfXminx-starting channel of spectrum; Int_tfXs; Int_tfXt; Int_tfYe; Int_tfYlighty position of fictive light source, applies only for rain",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:12152,simpl,simple,12152,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['simpl'],['simple']
Usability,"bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tfConfidenceLevelconfidence level; Double_tfLowerLimitlower interval limit; RooArgSetfParametersset containing the parameter of interest; Double_tfUpperLimitupper interval limit. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleInterval(const char* name = 0); Default constructor. SimpleInterval(const RooStats::SimpleInterval& other, const char* name); fParameters.add( other.fParameters );. operator=(const RooStats::SimpleInterval& other). SimpleInterval(const char* name, const RooRealVar& var, Double_t lower, Double_t upper, Double_t cl); Alternate constructor. ~SimpleInterval(); Destructor. Bool_t IsInInterval(const RooArgSet& ) const. RooArgSet* GetParameters() const; return cloned list of parameters. Bool_t CheckParameters(const RooArgSet& ) const. explicit SimpleInterval(const char* name = 0); default constructors. void SetConfidenceLevel(Double_t ); set the confidence level for the interval. Simple interval is defined at construction time so this function; has no effect. {}. Double_t ConfidenceLevel() const; return the confidence interval. {return fConfidenceLevel;}. Double_t LowerLimit(); return the interval lower limit. {return fLowerLimit;}. Double_t UpperLimit(); return the interval upper limit. {return fUpperLimit;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__SimpleInterval.html:6811,Simpl,SimpleInterval,6811,root/html534/RooStats__SimpleInterval.html,https://root.cern,https://root.cern/root/html534/RooStats__SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,"bufsize = 0); Write all objects in this collection. By default all objects in; the collection are written individually (each object gets its; own key). Note, this is recursive, i.e. objects in collections; in the collection are also written individually. To write all; objects using a single key specify a name and set option to; TObject::kSingleKey (i.e. 1). TCollection * GetCurrentCollection(); Return the globally accessible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). TIter begin() const; { return ++(TIter(this)); }. TIter end() const; { return TIter::End(); }. TCollection(const TCollection& ). void operator=(const TCollection& ). TCollection(); { }. virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char* name) const; { return FindObject(name) != 0; }. Bool_t Contains(const TObject* obj) const; { return FindObject(obj) != 0; }. void Delete(Option_t* option = """"). Int_t GetEntries() const; { return GetSize(); }. TObject ** GetObjectRef(const TObject* obj) const. Int_t GetSize() const; { return fSize; }. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsEmpty() const; { return GetSize() <= 0; }. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsOwner() const; { return TestBit(kIsOwner); }. Bool_t IsSortable() const; { return kTRUE; }. TIterator * MakeIterator(Bool_t dir = kIterForward) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCollection.html:14589,Clear,Clear,14589,root/html602/TCollection.html,https://root.cern,https://root.cern/root/html602/TCollection.html,2,['Clear'],['Clear']
Usability,"bufsize = 0); Write all objects in this collection. By default all objects in; the collection are written individually (each object gets its; own key). Note, this is recursive, i.e. objects in collections; in the collection are also written individually. To write all; objects using a single key specify a name and set option to; TObject::kSingleKey (i.e. 1). TCollection * GetCurrentCollection(); Return the globally accessible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). TIter begin() const; { return ++(TIter(this)); }. TIter end() const; { return TIter::End(); }. void operator=(const TCollection& ). virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char* name) const; { return FindObject(name) != 0; }. Bool_t Contains(const TObject* obj) const; { return FindObject(obj) != 0; }. void Delete(Option_t* option = """"). Int_t GetEntries() const; { return GetSize(); }. TObject ** GetObjectRef(const TObject* obj) const. Int_t GetSize() const; { return fSize; }. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsEmpty() const; { return GetSize() <= 0; }. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsOwner() const; { return TestBit(kIsOwner); }. Bool_t IsSortable() const; { return kTRUE; }. TIterator * MakeIterator(Bool_t dir = kIterForward) const. TIterator * MakeReverseIterator() const; { return M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCollection.html:13998,Clear,Clear,13998,root/html534/TCollection.html,https://root.cern,https://root.cern/root/html534/TCollection.html,1,['Clear'],['Clear']
Usability,"bufsize = 0); Write all objects in this collection. By default all objects in; the collection are written individually (each object gets its; own key). Note, this is recursive, i.e. objects in collections; in the collection are also written individually. To write all; objects using a single key specify a name and set option to; TObject::kSingleKey (i.e. 1). TCollection * GetCurrentCollection(); Return the globally accessible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). void operator=(const TCollection& ). virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char* name) const; { return FindObject(name) != 0; }. Bool_t Contains(const TObject* obj) const; { return FindObject(obj) != 0; }. void Delete(Option_t* option = """"). Int_t GetEntries() const; { return GetSize(); }. TObject ** GetObjectRef(const TObject* obj) const. Int_t GetSize() const; { return fSize; }. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsEmpty() const; { return GetSize() <= 0; }. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsOwner() const; { return TestBit(kIsOwner); }. Bool_t IsSortable() const; { return kTRUE; }. TIterator * MakeIterator(Bool_t dir = kIterForward) const. TIterator * MakeReverseIterator() const; { return MakeIterator(kIterBackward); }. TObject * Remove(TObject* obj). void RemoveAll(TCollection* col)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCollection.html:13873,Clear,Clear,13873,root/html528/TCollection.html,https://root.cern,https://root.cern/root/html528/TCollection.html,3,['Clear'],['Clear']
Usability,"bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual Bool_tTFormula::CheckOperands(Int_t operation, Int_t& err); virtual Bool_tTFormula::CheckOperands(Int_t leftoperand, Int_t rightoperartion, Int_t& err); voidTFormula::ClearFormula(Option_t* option = """"); virtual voidTFormula::Convert(UInt_t fromVersion); virtual Double_tDefinedValue(Int_t code); Int_tDefinedVariable(TString& name); virtual Int_tDefinedVariable(TString& name, int& action); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTFormula::EvalParFast(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive0(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive1(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive2(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive3(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive4(const Double_t* x, const Double_t* params); Short_tTFormula::GetAction(Int_t code) const; Short_tTFormula::GetActionOptimized(Int_t code) const; Int_tTFormula::GetActionParam(Int_t code) const; Int_tTFormula::GetActionParamOptimized(Int_t code) const; Int_t*TFormula::GetOper() const; Int_t*TFormula::GetOperOptimized() const; voidinitCopy(const RooFormula& other); virtual Bool_tTFormula::IsString(Int_t oper) const; voidTFormula::MakePrimitive(const char* expr, Int_t pos); voidTObject::MakeZombie(); RooFormula&operator=(const RooFormula& other); Int_tTFormula::PreCompile(); voidTFormula::SetAction(Int_t code, Int_t value, Int_t param = 0); voidTFormula::SetActionOptimized(Int_t code, Int_t value, Int_t param = 0); virtual Bool_tTFormula::StringToNumber(Int_t code). Data Members; public:. enum TFormula::[unnamed] { kEnd; kAdd; kSubstract; kMultiply; kDivide; kModulo; kcos; ksin; kta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFormula.html:9129,Clear,ClearFormula,9129,root/html526/RooFormula.html,https://root.cern,https://root.cern/root/html526/RooFormula.html,5,['Clear'],['ClearFormula']
Usability,"bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual Bool_tTFormula::CheckOperands(Int_t operation, Int_t& err); virtual Bool_tTFormula::CheckOperands(Int_t leftoperand, Int_t rightoperartion, Int_t& err); voidTFormula::ClearFormula(Option_t* option = """"); virtual voidTFormula::Convert(UInt_t fromVersion); virtual Double_tDefinedValue(Int_t code); Int_tDefinedVariable(TString& name); virtual Int_tDefinedVariable(TString& name, int& action); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_tTFormula::EvalParFast(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive0(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive1(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive2(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive3(const Double_t* x, const Double_t* params); Double_tTFormula::EvalPrimitive4(const Double_t* x, const Double_t* params); Short_tTFormula::GetAction(Int_t code) const; Short_tTFormula::GetActionOptimized(Int_t code) const; Int_tTFormula::GetActionParam(Int_t code) const; Int_tTFormula::GetActionParamOptimized(Int_t code) const; Int_t*TFormula::GetOper() const; Int_t*TFormula::GetOperOptimized() const; voidinitCopy(const RooFormula& other); virtual Bool_tTFormula::IsString(Int_t oper) const; voidTFormula::MakePrimitive(const char* expr, Int_t pos); voidTObject::MakeZombie(); RooFormula&operator=(const RooFormula& other); Int_tTFormula::PreCompile(); voidTFormula::SetAction(Int_t code, Int_t value, Int_t param = 0); voidTFormula::SetActionOptimized(Int_t code, Int_t value, Int_t param = 0); virtual Bool_tTFormula::StringToNumber(Int_t code). Data Members; public:. static RooPrintable::ContentsOptionRooPrintable::kAddress; static RooPrintable::ContentsOptionR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFormula.html:9273,Clear,ClearFormula,9273,root/html602/RooFormula.html,https://root.cern,https://root.cern/root/html602/RooFormula.html,1,['Clear'],['ClearFormula']
Usability,"bufsize = 32000); TBranch*TTree::Branch(const char* name, int address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, void** obj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch(const char* name, const char* classname, void** obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*TTree::BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*TTree::Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidTTree::Browse(TBrowser*); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*TTree::CreateBasket(TBranch*); Int_tTTree::Debug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidTTree::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* vare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/THbookTree.html:3591,Clear,Clear,3591,root/html530/THbookTree.html,https://root.cern,https://root.cern/root/html530/THbookTree.html,2,['Clear'],['Clear']
Usability,building. void ChangeTextColor(TGTextButton* ); Change text color via color selection dialog. This method is activated; via context menu during guibuilding. void ChangePicture(TGPictureButton* ); Invoke file dialog to assign a new picture.; This method is activated via context menu during guibuilding. void ChangeBackgroundColor(TGCanvas* ); Change background color via context menu. void ChangeBackgroundColor(TGComboBox* ); Change background color for list box entries. This method is invoked; via context menu during guibuilding. void ChangeProperties(TGLabel* ); Edit properties via font selection dialog. This method is activated; via context menu during guibuilding. void ChangeTextColor(TGLabel* ); Change text color via color selection dialog. This method is activated; via context menu during guibuilding. void ChangeBackgroundColor(TGListBox* ); Set background color for list box entries. This method is invoked; via context menu during guibuilding. void ChangeBarColor(TGProgressBar* ); Set progress bar color via TGColorDialog.; This method is activated via context menu during guibuilding. void ChangeTextColor(TGProgressBar* ); Change text color which displays position. void ChangeTextColor(TGTextEntry* ); Set text color. This method is invoked; via context menu during guibuilding. void ChangeTextFont(TGTextEntry* ); Change text font via font selection dialog. This method is activated; via context menu during guibuilding. void ChangeImage(TGIcon* ); Invoke file dialog to assign a new image.; This method is activated via context menu during guibuilding. void SetLassoDrawn(Bool_t on); Set lasso drawn flag. Bool_t IsEditDisabled(TGWindow* f) const; { return (f && (f->GetEditDisabled() & kEditDisable)); }. Bool_t IsGrabDisabled(TGWindow* f) const; { return (f && (f->GetEditDisabled() & kEditDisableGrab)); }. Bool_t IsEventsDisabled(TGWindow* f) const; { return (f && (f->GetEditDisabled() & kEditDisableEvents)); }. Bool_t IsFixedLayout(TGWindow* f) const; { return (f && (f-,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGuiBldDragManager.html:34500,progress bar,progress bar,34500,root/html528/TGuiBldDragManager.html,https://root.cern,https://root.cern/root/html528/TGuiBldDragManager.html,6,['progress bar'],['progress bar']
Usability,"bulk sending, the first entry in the list is an TObjString defining the variable names in the format VARname1,VARname2,... while the other entries are TObjStrings with the multiplets to be sent VARvalue1,VARvalue2,...; The string 'opt' allows the following additional control: table=[<db>.]<table> allows to insert to a different table from the one defined at construction (change is not persistent); if <db> is not specified, the same db defined at cinstruction is used. bulk Do a bulk insert More options can be given concurrently, comma-separated . The specified table must already have been created in the DB. ; Reimplemented from TVirtualMonitoringWriter.; Definition at line 87 of file TSQLMonitoring.cxx. ◆ Streamer(). void TSQLMonitoringWriter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TSQLMonitoringWriter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file TSQLMonitoring.h. ◆ Verbose(). void TSQLMonitoringWriter::Verbose ; (; Bool_t ; onoff). inlineoverridevirtual . Reimplemented from TVirtualMonitoringWriter.; Definition at line 49 of file TSQLMonitoring.h. Member Data Documentation. ◆ fDB. TSQLServer* TSQLMonitoringWriter::fDB. private . Definition at line 33 of file TSQLMonitoring.h. ◆ fMaxBulkSize. Long64_t TSQLMonitoringWriter::fMaxBulkSize. private . Definition at line 36 of file TSQLMonitoring.h. ◆ fTable. TString TSQLMonitoringWriter::fTable. private . Definition at line 34 of file TSQLMonitoring.h. ◆ fVerbose. Bool_t TSQLMonitoringWriter::fVerbose. private . Definition at line 38 of file TSQLMonitoring.h. Libraries for TSQLMonitoringWriter:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TSQLMonitoring.h; net/net/src/TSQLMonitoring.cxx. TSQLMonitoringWriter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLMonitoringWriter.html:16852,Guid,Guide,16852,doc/master/classTSQLMonitoringWriter.html,https://root.cern,https://root.cern/doc/master/classTSQLMonitoringWriter.html,1,['Guid'],['Guide']
Usability,"bute. ;  ; RAttrMap & AddDouble (const std::string &name, double value);  ; RAttrMap & AddInt (const std::string &name, int value);  ; RAttrMap & AddNoValue (const std::string &name);  ; RAttrMap & AddPadLength (const std::string &name, const RPadLength &value);  ; RAttrMap & AddString (const std::string &name, const std::string &value);  ; RAttrMap & AddValue (const std::string &name, bool value);  ; RAttrMap & AddValue (const std::string &name, const RColor &value);  ; RAttrMap & AddValue (const std::string &name, const RPadLength &value);  ; RAttrMap & AddValue (const std::string &name, const std::string &value);  ; RAttrMap & AddValue (const std::string &name, double value);  ; RAttrMap & AddValue (const std::string &name, int value);  ; auto begin () const;  ; bool Change (const std::string &name, Value_t *value=nullptr);  Change attribute using string value and kind Used to change attributes from JS side Returns true if value was really changed. ;  ; void Clear (const std::string &name);  Clear specified attribute. ;  ; auto end () const;  ; const Value_t * Find (const std::string &name) const;  ; RAttrMap & operator= (const RAttrMap &src);  . Private Member Functions; void AddBestMatch (const std::string &name, const std::string &value);  Add attribute, converting to best possible type Tested boolean, int, double. ;  . Private Attributes; std::unordered_map< std::string, std::unique_ptr< Value_t > > m;  JSON_object. ;  . Friends; class RAttrBase;  ; class RStyle;  . #include <ROOT/RAttrMap.hxx>; Member Enumeration Documentation. ◆ EValuesKind. enum ROOT::Experimental::RAttrMap::EValuesKind. EnumeratorkNoValue ; kBool ; kInt ; kDouble ; kString . Definition at line 40 of file RAttrMap.hxx. Constructor & Destructor Documentation. ◆ RAttrMap() [1/2]. ROOT::Experimental::RAttrMap::RAttrMap ; (; ). default . JSON_asbase - store as map object. . ◆ RAttrMap() [2/2]. ROOT::Experimental::RAttrMap::RAttrMap ; (; const RAttrMap & ; src). inline . Definition at line 172 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RAttrMap.html:2317,Clear,Clear,2317,doc/master/classROOT_1_1Experimental_1_1RAttrMap.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RAttrMap.html,2,['Clear'],['Clear']
Usability,"butes |; List of all members ; TModuleDocInfo Class Reference. . Definition at line 107 of file TDocInfo.h. Public Member Functions;  TModuleDocInfo (const char *name, TModuleDocInfo *super, const char *doc="""");  ;  ~TModuleDocInfo () override;  ; void AddClass (TClassDocInfo *cl);  ; TList * GetClasses ();  ; const char * GetDoc () const;  ; THashList & GetSub ();  ; TModuleDocInfo * GetSuper () const;  ; TClass * IsA () const override;  ; Bool_t IsSelected () const;  ; void SetDoc (const char *doc);  ; void SetSelected (Bool_t sel=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTModuleDocInfo.html:1184,Clear,Clear,1184,doc/master/classTModuleDocInfo.html,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html,1,['Clear'],['Clear']
Usability,"butes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:6525,clear,clearShapeDirty,6525,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,1,['clear'],['clearShapeDirty']
